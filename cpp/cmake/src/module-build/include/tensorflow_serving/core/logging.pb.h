// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/core/logging.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fcore_2flogging_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fcore_2flogging_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow_serving/apis/model.pb.h"
#include "tensorflow_serving/config/logging_config.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_5fserving_2fcore_2flogging_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_5fserving_2fcore_2flogging_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_5fserving_2fcore_2flogging_2eproto;
namespace tensorflow {
namespace serving {
class LogMetadata;
class LogMetadataDefaultTypeInternal;
extern LogMetadataDefaultTypeInternal _LogMetadata_default_instance_;
}  // namespace serving
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::serving::LogMetadata* Arena::CreateMaybeMessage<::tensorflow::serving::LogMetadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {
namespace serving {

// ===================================================================

class LogMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.LogMetadata) */ {
 public:
  inline LogMetadata() : LogMetadata(nullptr) {};
  virtual ~LogMetadata();

  LogMetadata(const LogMetadata& from);
  LogMetadata(LogMetadata&& from) noexcept
    : LogMetadata() {
    *this = ::std::move(from);
  }

  inline LogMetadata& operator=(const LogMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogMetadata& operator=(LogMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogMetadata* internal_default_instance() {
    return reinterpret_cast<const LogMetadata*>(
               &_LogMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LogMetadata& a, LogMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(LogMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogMetadata* New() const final {
    return CreateMaybeMessage<LogMetadata>(nullptr);
  }

  LogMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogMetadata& from);
  void MergeFrom(const LogMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.LogMetadata";
  }
  protected:
  explicit LogMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_5fserving_2fcore_2flogging_2eproto);
    return ::descriptor_table_tensorflow_5fserving_2fcore_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSavedModelTagsFieldNumber = 3,
    kModelSpecFieldNumber = 1,
    kSamplingConfigFieldNumber = 2,
  };
  // repeated string saved_model_tags = 3;
  int saved_model_tags_size() const;
  private:
  int _internal_saved_model_tags_size() const;
  public:
  void clear_saved_model_tags();
  const std::string& saved_model_tags(int index) const;
  std::string* mutable_saved_model_tags(int index);
  void set_saved_model_tags(int index, const std::string& value);
  void set_saved_model_tags(int index, std::string&& value);
  void set_saved_model_tags(int index, const char* value);
  void set_saved_model_tags(int index, const char* value, size_t size);
  std::string* add_saved_model_tags();
  void add_saved_model_tags(const std::string& value);
  void add_saved_model_tags(std::string&& value);
  void add_saved_model_tags(const char* value);
  void add_saved_model_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& saved_model_tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_saved_model_tags();
  private:
  const std::string& _internal_saved_model_tags(int index) const;
  std::string* _internal_add_saved_model_tags();
  public:

  // .tensorflow.serving.ModelSpec model_spec = 1;
  bool has_model_spec() const;
  private:
  bool _internal_has_model_spec() const;
  public:
  void clear_model_spec();
  const ::tensorflow::serving::ModelSpec& model_spec() const;
  ::tensorflow::serving::ModelSpec* release_model_spec();
  ::tensorflow::serving::ModelSpec* mutable_model_spec();
  void set_allocated_model_spec(::tensorflow::serving::ModelSpec* model_spec);
  private:
  const ::tensorflow::serving::ModelSpec& _internal_model_spec() const;
  ::tensorflow::serving::ModelSpec* _internal_mutable_model_spec();
  public:
  void unsafe_arena_set_allocated_model_spec(
      ::tensorflow::serving::ModelSpec* model_spec);
  ::tensorflow::serving::ModelSpec* unsafe_arena_release_model_spec();

  // .tensorflow.serving.SamplingConfig sampling_config = 2;
  bool has_sampling_config() const;
  private:
  bool _internal_has_sampling_config() const;
  public:
  void clear_sampling_config();
  const ::tensorflow::serving::SamplingConfig& sampling_config() const;
  ::tensorflow::serving::SamplingConfig* release_sampling_config();
  ::tensorflow::serving::SamplingConfig* mutable_sampling_config();
  void set_allocated_sampling_config(::tensorflow::serving::SamplingConfig* sampling_config);
  private:
  const ::tensorflow::serving::SamplingConfig& _internal_sampling_config() const;
  ::tensorflow::serving::SamplingConfig* _internal_mutable_sampling_config();
  public:
  void unsafe_arena_set_allocated_sampling_config(
      ::tensorflow::serving::SamplingConfig* sampling_config);
  ::tensorflow::serving::SamplingConfig* unsafe_arena_release_sampling_config();

  // @@protoc_insertion_point(class_scope:tensorflow.serving.LogMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> saved_model_tags_;
  ::tensorflow::serving::ModelSpec* model_spec_;
  ::tensorflow::serving::SamplingConfig* sampling_config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_5fserving_2fcore_2flogging_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogMetadata

// .tensorflow.serving.ModelSpec model_spec = 1;
inline bool LogMetadata::_internal_has_model_spec() const {
  return this != internal_default_instance() && model_spec_ != nullptr;
}
inline bool LogMetadata::has_model_spec() const {
  return _internal_has_model_spec();
}
inline const ::tensorflow::serving::ModelSpec& LogMetadata::_internal_model_spec() const {
  const ::tensorflow::serving::ModelSpec* p = model_spec_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tensorflow::serving::ModelSpec*>(
      &::tensorflow::serving::_ModelSpec_default_instance_);
}
inline const ::tensorflow::serving::ModelSpec& LogMetadata::model_spec() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.LogMetadata.model_spec)
  return _internal_model_spec();
}
inline void LogMetadata::unsafe_arena_set_allocated_model_spec(
    ::tensorflow::serving::ModelSpec* model_spec) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_spec_);
  }
  model_spec_ = model_spec;
  if (model_spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.LogMetadata.model_spec)
}
inline ::tensorflow::serving::ModelSpec* LogMetadata::release_model_spec() {
  auto temp = unsafe_arena_release_model_spec();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tensorflow::serving::ModelSpec* LogMetadata::unsafe_arena_release_model_spec() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.LogMetadata.model_spec)
  
  ::tensorflow::serving::ModelSpec* temp = model_spec_;
  model_spec_ = nullptr;
  return temp;
}
inline ::tensorflow::serving::ModelSpec* LogMetadata::_internal_mutable_model_spec() {
  
  if (model_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::serving::ModelSpec>(GetArena());
    model_spec_ = p;
  }
  return model_spec_;
}
inline ::tensorflow::serving::ModelSpec* LogMetadata::mutable_model_spec() {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.LogMetadata.model_spec)
  return _internal_mutable_model_spec();
}
inline void LogMetadata::set_allocated_model_spec(::tensorflow::serving::ModelSpec* model_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_spec_);
  }
  if (model_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_spec)->GetArena();
    if (message_arena != submessage_arena) {
      model_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_spec, submessage_arena);
    }
    
  } else {
    
  }
  model_spec_ = model_spec;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.LogMetadata.model_spec)
}

// .tensorflow.serving.SamplingConfig sampling_config = 2;
inline bool LogMetadata::_internal_has_sampling_config() const {
  return this != internal_default_instance() && sampling_config_ != nullptr;
}
inline bool LogMetadata::has_sampling_config() const {
  return _internal_has_sampling_config();
}
inline const ::tensorflow::serving::SamplingConfig& LogMetadata::_internal_sampling_config() const {
  const ::tensorflow::serving::SamplingConfig* p = sampling_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tensorflow::serving::SamplingConfig*>(
      &::tensorflow::serving::_SamplingConfig_default_instance_);
}
inline const ::tensorflow::serving::SamplingConfig& LogMetadata::sampling_config() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.LogMetadata.sampling_config)
  return _internal_sampling_config();
}
inline void LogMetadata::unsafe_arena_set_allocated_sampling_config(
    ::tensorflow::serving::SamplingConfig* sampling_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sampling_config_);
  }
  sampling_config_ = sampling_config;
  if (sampling_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.LogMetadata.sampling_config)
}
inline ::tensorflow::serving::SamplingConfig* LogMetadata::release_sampling_config() {
  auto temp = unsafe_arena_release_sampling_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tensorflow::serving::SamplingConfig* LogMetadata::unsafe_arena_release_sampling_config() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.LogMetadata.sampling_config)
  
  ::tensorflow::serving::SamplingConfig* temp = sampling_config_;
  sampling_config_ = nullptr;
  return temp;
}
inline ::tensorflow::serving::SamplingConfig* LogMetadata::_internal_mutable_sampling_config() {
  
  if (sampling_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::serving::SamplingConfig>(GetArena());
    sampling_config_ = p;
  }
  return sampling_config_;
}
inline ::tensorflow::serving::SamplingConfig* LogMetadata::mutable_sampling_config() {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.LogMetadata.sampling_config)
  return _internal_mutable_sampling_config();
}
inline void LogMetadata::set_allocated_sampling_config(::tensorflow::serving::SamplingConfig* sampling_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sampling_config_);
  }
  if (sampling_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sampling_config)->GetArena();
    if (message_arena != submessage_arena) {
      sampling_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sampling_config, submessage_arena);
    }
    
  } else {
    
  }
  sampling_config_ = sampling_config;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.LogMetadata.sampling_config)
}

// repeated string saved_model_tags = 3;
inline int LogMetadata::_internal_saved_model_tags_size() const {
  return saved_model_tags_.size();
}
inline int LogMetadata::saved_model_tags_size() const {
  return _internal_saved_model_tags_size();
}
inline void LogMetadata::clear_saved_model_tags() {
  saved_model_tags_.Clear();
}
inline std::string* LogMetadata::add_saved_model_tags() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.serving.LogMetadata.saved_model_tags)
  return _internal_add_saved_model_tags();
}
inline const std::string& LogMetadata::_internal_saved_model_tags(int index) const {
  return saved_model_tags_.Get(index);
}
inline const std::string& LogMetadata::saved_model_tags(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.LogMetadata.saved_model_tags)
  return _internal_saved_model_tags(index);
}
inline std::string* LogMetadata::mutable_saved_model_tags(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.LogMetadata.saved_model_tags)
  return saved_model_tags_.Mutable(index);
}
inline void LogMetadata::set_saved_model_tags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.serving.LogMetadata.saved_model_tags)
  saved_model_tags_.Mutable(index)->assign(value);
}
inline void LogMetadata::set_saved_model_tags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:tensorflow.serving.LogMetadata.saved_model_tags)
  saved_model_tags_.Mutable(index)->assign(std::move(value));
}
inline void LogMetadata::set_saved_model_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  saved_model_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.LogMetadata.saved_model_tags)
}
inline void LogMetadata::set_saved_model_tags(int index, const char* value, size_t size) {
  saved_model_tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.LogMetadata.saved_model_tags)
}
inline std::string* LogMetadata::_internal_add_saved_model_tags() {
  return saved_model_tags_.Add();
}
inline void LogMetadata::add_saved_model_tags(const std::string& value) {
  saved_model_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.serving.LogMetadata.saved_model_tags)
}
inline void LogMetadata::add_saved_model_tags(std::string&& value) {
  saved_model_tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tensorflow.serving.LogMetadata.saved_model_tags)
}
inline void LogMetadata::add_saved_model_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  saved_model_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.serving.LogMetadata.saved_model_tags)
}
inline void LogMetadata::add_saved_model_tags(const char* value, size_t size) {
  saved_model_tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.serving.LogMetadata.saved_model_tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LogMetadata::saved_model_tags() const {
  // @@protoc_insertion_point(field_list:tensorflow.serving.LogMetadata.saved_model_tags)
  return saved_model_tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LogMetadata::mutable_saved_model_tags() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.LogMetadata.saved_model_tags)
  return &saved_model_tags_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace serving
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fcore_2flogging_2eproto
