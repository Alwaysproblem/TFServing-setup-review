// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tensorflow/core/protobuf/worker_service.proto
// Original file comments:
// Copyright 2016 The TensorFlow Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ==============================================================================
//
#ifndef GRPC_tensorflow_2fcore_2fprotobuf_2fworker_5fservice_2eproto__INCLUDED
#define GRPC_tensorflow_2fcore_2fprotobuf_2fworker_5fservice_2eproto__INCLUDED

#include "tensorflow/core/protobuf/worker_service.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace tensorflow {
namespace grpc {

// //////////////////////////////////////////////////////////////////////////////
//
// WorkerService defines a TensorFlow service that executes dataflow
// graphs on a set of local devices, on behalf of a MasterService.
//
// A worker service keeps track of multiple "registered graphs". Each
// registered graph is a subgraph of a client's graph, corresponding to
// only the nodes that should execute on this worker (and any
// additional nodes necessary for inter-process communication using
// the `RecvTensor` method).
//
// //////////////////////////////////////////////////////////////////////////////
//
class WorkerService final {
 public:
  static constexpr char const* service_full_name() {
    return "tensorflow.grpc.WorkerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // See worker.proto for details.
    virtual ::grpc::Status GetStatus(::grpc::ClientContext* context, const ::tensorflow::GetStatusRequest& request, ::tensorflow::GetStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::GetStatusResponse>> AsyncGetStatus(::grpc::ClientContext* context, const ::tensorflow::GetStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::GetStatusResponse>>(AsyncGetStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::GetStatusResponse>> PrepareAsyncGetStatus(::grpc::ClientContext* context, const ::tensorflow::GetStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::GetStatusResponse>>(PrepareAsyncGetStatusRaw(context, request, cq));
    }
    // See worker.proto for details.
    virtual ::grpc::Status CreateWorkerSession(::grpc::ClientContext* context, const ::tensorflow::CreateWorkerSessionRequest& request, ::tensorflow::CreateWorkerSessionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CreateWorkerSessionResponse>> AsyncCreateWorkerSession(::grpc::ClientContext* context, const ::tensorflow::CreateWorkerSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CreateWorkerSessionResponse>>(AsyncCreateWorkerSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CreateWorkerSessionResponse>> PrepareAsyncCreateWorkerSession(::grpc::ClientContext* context, const ::tensorflow::CreateWorkerSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CreateWorkerSessionResponse>>(PrepareAsyncCreateWorkerSessionRaw(context, request, cq));
    }
    // See worker.proto for details.
    virtual ::grpc::Status DeleteWorkerSession(::grpc::ClientContext* context, const ::tensorflow::DeleteWorkerSessionRequest& request, ::tensorflow::DeleteWorkerSessionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::DeleteWorkerSessionResponse>> AsyncDeleteWorkerSession(::grpc::ClientContext* context, const ::tensorflow::DeleteWorkerSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::DeleteWorkerSessionResponse>>(AsyncDeleteWorkerSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::DeleteWorkerSessionResponse>> PrepareAsyncDeleteWorkerSession(::grpc::ClientContext* context, const ::tensorflow::DeleteWorkerSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::DeleteWorkerSessionResponse>>(PrepareAsyncDeleteWorkerSessionRaw(context, request, cq));
    }
    // See worker.proto for details.
    virtual ::grpc::Status RegisterGraph(::grpc::ClientContext* context, const ::tensorflow::RegisterGraphRequest& request, ::tensorflow::RegisterGraphResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RegisterGraphResponse>> AsyncRegisterGraph(::grpc::ClientContext* context, const ::tensorflow::RegisterGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RegisterGraphResponse>>(AsyncRegisterGraphRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RegisterGraphResponse>> PrepareAsyncRegisterGraph(::grpc::ClientContext* context, const ::tensorflow::RegisterGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RegisterGraphResponse>>(PrepareAsyncRegisterGraphRaw(context, request, cq));
    }
    // See worker.proto for details.
    virtual ::grpc::Status DeregisterGraph(::grpc::ClientContext* context, const ::tensorflow::DeregisterGraphRequest& request, ::tensorflow::DeregisterGraphResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::DeregisterGraphResponse>> AsyncDeregisterGraph(::grpc::ClientContext* context, const ::tensorflow::DeregisterGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::DeregisterGraphResponse>>(AsyncDeregisterGraphRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::DeregisterGraphResponse>> PrepareAsyncDeregisterGraph(::grpc::ClientContext* context, const ::tensorflow::DeregisterGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::DeregisterGraphResponse>>(PrepareAsyncDeregisterGraphRaw(context, request, cq));
    }
    // See worker.proto for details.
    virtual ::grpc::Status RunGraph(::grpc::ClientContext* context, const ::tensorflow::RunGraphRequest& request, ::tensorflow::RunGraphResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RunGraphResponse>> AsyncRunGraph(::grpc::ClientContext* context, const ::tensorflow::RunGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RunGraphResponse>>(AsyncRunGraphRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RunGraphResponse>> PrepareAsyncRunGraph(::grpc::ClientContext* context, const ::tensorflow::RunGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RunGraphResponse>>(PrepareAsyncRunGraphRaw(context, request, cq));
    }
    // See worker.proto for details.
    virtual ::grpc::Status CleanupGraph(::grpc::ClientContext* context, const ::tensorflow::CleanupGraphRequest& request, ::tensorflow::CleanupGraphResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CleanupGraphResponse>> AsyncCleanupGraph(::grpc::ClientContext* context, const ::tensorflow::CleanupGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CleanupGraphResponse>>(AsyncCleanupGraphRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CleanupGraphResponse>> PrepareAsyncCleanupGraph(::grpc::ClientContext* context, const ::tensorflow::CleanupGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CleanupGraphResponse>>(PrepareAsyncCleanupGraphRaw(context, request, cq));
    }
    // See worker.proto for details.
    virtual ::grpc::Status CleanupAll(::grpc::ClientContext* context, const ::tensorflow::CleanupAllRequest& request, ::tensorflow::CleanupAllResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CleanupAllResponse>> AsyncCleanupAll(::grpc::ClientContext* context, const ::tensorflow::CleanupAllRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CleanupAllResponse>>(AsyncCleanupAllRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CleanupAllResponse>> PrepareAsyncCleanupAll(::grpc::ClientContext* context, const ::tensorflow::CleanupAllRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CleanupAllResponse>>(PrepareAsyncCleanupAllRaw(context, request, cq));
    }
    // See worker.proto for details.
    virtual ::grpc::Status RecvTensor(::grpc::ClientContext* context, const ::tensorflow::RecvTensorRequest& request, ::tensorflow::RecvTensorResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RecvTensorResponse>> AsyncRecvTensor(::grpc::ClientContext* context, const ::tensorflow::RecvTensorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RecvTensorResponse>>(AsyncRecvTensorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RecvTensorResponse>> PrepareAsyncRecvTensor(::grpc::ClientContext* context, const ::tensorflow::RecvTensorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RecvTensorResponse>>(PrepareAsyncRecvTensorRaw(context, request, cq));
    }
    // RecvTensor Method
    // See worker.proto for details.
    virtual ::grpc::Status Logging(::grpc::ClientContext* context, const ::tensorflow::LoggingRequest& request, ::tensorflow::LoggingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::LoggingResponse>> AsyncLogging(::grpc::ClientContext* context, const ::tensorflow::LoggingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::LoggingResponse>>(AsyncLoggingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::LoggingResponse>> PrepareAsyncLogging(::grpc::ClientContext* context, const ::tensorflow::LoggingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::LoggingResponse>>(PrepareAsyncLoggingRaw(context, request, cq));
    }
    // See worker.proto for details.
    virtual ::grpc::Status Tracing(::grpc::ClientContext* context, const ::tensorflow::TracingRequest& request, ::tensorflow::TracingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::TracingResponse>> AsyncTracing(::grpc::ClientContext* context, const ::tensorflow::TracingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::TracingResponse>>(AsyncTracingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::TracingResponse>> PrepareAsyncTracing(::grpc::ClientContext* context, const ::tensorflow::TracingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::TracingResponse>>(PrepareAsyncTracingRaw(context, request, cq));
    }
    // See worker.proto for details.
    virtual ::grpc::Status RecvBuf(::grpc::ClientContext* context, const ::tensorflow::RecvBufRequest& request, ::tensorflow::RecvBufResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RecvBufResponse>> AsyncRecvBuf(::grpc::ClientContext* context, const ::tensorflow::RecvBufRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RecvBufResponse>>(AsyncRecvBufRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RecvBufResponse>> PrepareAsyncRecvBuf(::grpc::ClientContext* context, const ::tensorflow::RecvBufRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RecvBufResponse>>(PrepareAsyncRecvBufRaw(context, request, cq));
    }
    // See worker.proto for details.
    virtual ::grpc::Status GetStepSequence(::grpc::ClientContext* context, const ::tensorflow::GetStepSequenceRequest& request, ::tensorflow::GetStepSequenceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::GetStepSequenceResponse>> AsyncGetStepSequence(::grpc::ClientContext* context, const ::tensorflow::GetStepSequenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::GetStepSequenceResponse>>(AsyncGetStepSequenceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::GetStepSequenceResponse>> PrepareAsyncGetStepSequence(::grpc::ClientContext* context, const ::tensorflow::GetStepSequenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::GetStepSequenceResponse>>(PrepareAsyncGetStepSequenceRaw(context, request, cq));
    }
    // See worker.proto for details.
    virtual ::grpc::Status CompleteGroup(::grpc::ClientContext* context, const ::tensorflow::CompleteGroupRequest& request, ::tensorflow::CompleteGroupResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CompleteGroupResponse>> AsyncCompleteGroup(::grpc::ClientContext* context, const ::tensorflow::CompleteGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CompleteGroupResponse>>(AsyncCompleteGroupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CompleteGroupResponse>> PrepareAsyncCompleteGroup(::grpc::ClientContext* context, const ::tensorflow::CompleteGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CompleteGroupResponse>>(PrepareAsyncCompleteGroupRaw(context, request, cq));
    }
    // See worker.proto for details.
    virtual ::grpc::Status CompleteInstance(::grpc::ClientContext* context, const ::tensorflow::CompleteInstanceRequest& request, ::tensorflow::CompleteInstanceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CompleteInstanceResponse>> AsyncCompleteInstance(::grpc::ClientContext* context, const ::tensorflow::CompleteInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CompleteInstanceResponse>>(AsyncCompleteInstanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CompleteInstanceResponse>> PrepareAsyncCompleteInstance(::grpc::ClientContext* context, const ::tensorflow::CompleteInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CompleteInstanceResponse>>(PrepareAsyncCompleteInstanceRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // See worker.proto for details.
      virtual void GetStatus(::grpc::ClientContext* context, const ::tensorflow::GetStatusRequest* request, ::tensorflow::GetStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::GetStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetStatus(::grpc::ClientContext* context, const ::tensorflow::GetStatusRequest* request, ::tensorflow::GetStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetStatus(::grpc::ClientContext* context, const ::tensorflow::GetStatusRequest* request, ::tensorflow::GetStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::GetStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::GetStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // See worker.proto for details.
      virtual void CreateWorkerSession(::grpc::ClientContext* context, const ::tensorflow::CreateWorkerSessionRequest* request, ::tensorflow::CreateWorkerSessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateWorkerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::CreateWorkerSessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateWorkerSession(::grpc::ClientContext* context, const ::tensorflow::CreateWorkerSessionRequest* request, ::tensorflow::CreateWorkerSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateWorkerSession(::grpc::ClientContext* context, const ::tensorflow::CreateWorkerSessionRequest* request, ::tensorflow::CreateWorkerSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateWorkerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::CreateWorkerSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateWorkerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::CreateWorkerSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // See worker.proto for details.
      virtual void DeleteWorkerSession(::grpc::ClientContext* context, const ::tensorflow::DeleteWorkerSessionRequest* request, ::tensorflow::DeleteWorkerSessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteWorkerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::DeleteWorkerSessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteWorkerSession(::grpc::ClientContext* context, const ::tensorflow::DeleteWorkerSessionRequest* request, ::tensorflow::DeleteWorkerSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteWorkerSession(::grpc::ClientContext* context, const ::tensorflow::DeleteWorkerSessionRequest* request, ::tensorflow::DeleteWorkerSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteWorkerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::DeleteWorkerSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteWorkerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::DeleteWorkerSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // See worker.proto for details.
      virtual void RegisterGraph(::grpc::ClientContext* context, const ::tensorflow::RegisterGraphRequest* request, ::tensorflow::RegisterGraphResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::RegisterGraphResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RegisterGraph(::grpc::ClientContext* context, const ::tensorflow::RegisterGraphRequest* request, ::tensorflow::RegisterGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RegisterGraph(::grpc::ClientContext* context, const ::tensorflow::RegisterGraphRequest* request, ::tensorflow::RegisterGraphResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RegisterGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::RegisterGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RegisterGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::RegisterGraphResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // See worker.proto for details.
      virtual void DeregisterGraph(::grpc::ClientContext* context, const ::tensorflow::DeregisterGraphRequest* request, ::tensorflow::DeregisterGraphResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeregisterGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::DeregisterGraphResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeregisterGraph(::grpc::ClientContext* context, const ::tensorflow::DeregisterGraphRequest* request, ::tensorflow::DeregisterGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeregisterGraph(::grpc::ClientContext* context, const ::tensorflow::DeregisterGraphRequest* request, ::tensorflow::DeregisterGraphResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeregisterGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::DeregisterGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeregisterGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::DeregisterGraphResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // See worker.proto for details.
      virtual void RunGraph(::grpc::ClientContext* context, const ::tensorflow::RunGraphRequest* request, ::tensorflow::RunGraphResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RunGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::RunGraphResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RunGraph(::grpc::ClientContext* context, const ::tensorflow::RunGraphRequest* request, ::tensorflow::RunGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RunGraph(::grpc::ClientContext* context, const ::tensorflow::RunGraphRequest* request, ::tensorflow::RunGraphResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RunGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::RunGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RunGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::RunGraphResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // See worker.proto for details.
      virtual void CleanupGraph(::grpc::ClientContext* context, const ::tensorflow::CleanupGraphRequest* request, ::tensorflow::CleanupGraphResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CleanupGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::CleanupGraphResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CleanupGraph(::grpc::ClientContext* context, const ::tensorflow::CleanupGraphRequest* request, ::tensorflow::CleanupGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CleanupGraph(::grpc::ClientContext* context, const ::tensorflow::CleanupGraphRequest* request, ::tensorflow::CleanupGraphResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CleanupGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::CleanupGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CleanupGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::CleanupGraphResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // See worker.proto for details.
      virtual void CleanupAll(::grpc::ClientContext* context, const ::tensorflow::CleanupAllRequest* request, ::tensorflow::CleanupAllResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CleanupAll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::CleanupAllResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CleanupAll(::grpc::ClientContext* context, const ::tensorflow::CleanupAllRequest* request, ::tensorflow::CleanupAllResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CleanupAll(::grpc::ClientContext* context, const ::tensorflow::CleanupAllRequest* request, ::tensorflow::CleanupAllResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CleanupAll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::CleanupAllResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CleanupAll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::CleanupAllResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // See worker.proto for details.
      virtual void RecvTensor(::grpc::ClientContext* context, const ::tensorflow::RecvTensorRequest* request, ::tensorflow::RecvTensorResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RecvTensor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::RecvTensorResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RecvTensor(::grpc::ClientContext* context, const ::tensorflow::RecvTensorRequest* request, ::tensorflow::RecvTensorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RecvTensor(::grpc::ClientContext* context, const ::tensorflow::RecvTensorRequest* request, ::tensorflow::RecvTensorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RecvTensor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::RecvTensorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RecvTensor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::RecvTensorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // RecvTensor Method
      // See worker.proto for details.
      virtual void Logging(::grpc::ClientContext* context, const ::tensorflow::LoggingRequest* request, ::tensorflow::LoggingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Logging(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::LoggingResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Logging(::grpc::ClientContext* context, const ::tensorflow::LoggingRequest* request, ::tensorflow::LoggingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Logging(::grpc::ClientContext* context, const ::tensorflow::LoggingRequest* request, ::tensorflow::LoggingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Logging(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::LoggingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Logging(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::LoggingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // See worker.proto for details.
      virtual void Tracing(::grpc::ClientContext* context, const ::tensorflow::TracingRequest* request, ::tensorflow::TracingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Tracing(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::TracingResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Tracing(::grpc::ClientContext* context, const ::tensorflow::TracingRequest* request, ::tensorflow::TracingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Tracing(::grpc::ClientContext* context, const ::tensorflow::TracingRequest* request, ::tensorflow::TracingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Tracing(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::TracingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Tracing(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::TracingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // See worker.proto for details.
      virtual void RecvBuf(::grpc::ClientContext* context, const ::tensorflow::RecvBufRequest* request, ::tensorflow::RecvBufResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RecvBuf(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::RecvBufResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RecvBuf(::grpc::ClientContext* context, const ::tensorflow::RecvBufRequest* request, ::tensorflow::RecvBufResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RecvBuf(::grpc::ClientContext* context, const ::tensorflow::RecvBufRequest* request, ::tensorflow::RecvBufResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RecvBuf(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::RecvBufResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RecvBuf(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::RecvBufResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // See worker.proto for details.
      virtual void GetStepSequence(::grpc::ClientContext* context, const ::tensorflow::GetStepSequenceRequest* request, ::tensorflow::GetStepSequenceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetStepSequence(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::GetStepSequenceResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetStepSequence(::grpc::ClientContext* context, const ::tensorflow::GetStepSequenceRequest* request, ::tensorflow::GetStepSequenceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetStepSequence(::grpc::ClientContext* context, const ::tensorflow::GetStepSequenceRequest* request, ::tensorflow::GetStepSequenceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetStepSequence(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::GetStepSequenceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetStepSequence(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::GetStepSequenceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // See worker.proto for details.
      virtual void CompleteGroup(::grpc::ClientContext* context, const ::tensorflow::CompleteGroupRequest* request, ::tensorflow::CompleteGroupResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CompleteGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::CompleteGroupResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CompleteGroup(::grpc::ClientContext* context, const ::tensorflow::CompleteGroupRequest* request, ::tensorflow::CompleteGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CompleteGroup(::grpc::ClientContext* context, const ::tensorflow::CompleteGroupRequest* request, ::tensorflow::CompleteGroupResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CompleteGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::CompleteGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CompleteGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::CompleteGroupResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // See worker.proto for details.
      virtual void CompleteInstance(::grpc::ClientContext* context, const ::tensorflow::CompleteInstanceRequest* request, ::tensorflow::CompleteInstanceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CompleteInstance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::CompleteInstanceResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CompleteInstance(::grpc::ClientContext* context, const ::tensorflow::CompleteInstanceRequest* request, ::tensorflow::CompleteInstanceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CompleteInstance(::grpc::ClientContext* context, const ::tensorflow::CompleteInstanceRequest* request, ::tensorflow::CompleteInstanceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CompleteInstance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::CompleteInstanceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CompleteInstance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::CompleteInstanceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::GetStatusResponse>* AsyncGetStatusRaw(::grpc::ClientContext* context, const ::tensorflow::GetStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::GetStatusResponse>* PrepareAsyncGetStatusRaw(::grpc::ClientContext* context, const ::tensorflow::GetStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CreateWorkerSessionResponse>* AsyncCreateWorkerSessionRaw(::grpc::ClientContext* context, const ::tensorflow::CreateWorkerSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CreateWorkerSessionResponse>* PrepareAsyncCreateWorkerSessionRaw(::grpc::ClientContext* context, const ::tensorflow::CreateWorkerSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::DeleteWorkerSessionResponse>* AsyncDeleteWorkerSessionRaw(::grpc::ClientContext* context, const ::tensorflow::DeleteWorkerSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::DeleteWorkerSessionResponse>* PrepareAsyncDeleteWorkerSessionRaw(::grpc::ClientContext* context, const ::tensorflow::DeleteWorkerSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RegisterGraphResponse>* AsyncRegisterGraphRaw(::grpc::ClientContext* context, const ::tensorflow::RegisterGraphRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RegisterGraphResponse>* PrepareAsyncRegisterGraphRaw(::grpc::ClientContext* context, const ::tensorflow::RegisterGraphRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::DeregisterGraphResponse>* AsyncDeregisterGraphRaw(::grpc::ClientContext* context, const ::tensorflow::DeregisterGraphRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::DeregisterGraphResponse>* PrepareAsyncDeregisterGraphRaw(::grpc::ClientContext* context, const ::tensorflow::DeregisterGraphRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RunGraphResponse>* AsyncRunGraphRaw(::grpc::ClientContext* context, const ::tensorflow::RunGraphRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RunGraphResponse>* PrepareAsyncRunGraphRaw(::grpc::ClientContext* context, const ::tensorflow::RunGraphRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CleanupGraphResponse>* AsyncCleanupGraphRaw(::grpc::ClientContext* context, const ::tensorflow::CleanupGraphRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CleanupGraphResponse>* PrepareAsyncCleanupGraphRaw(::grpc::ClientContext* context, const ::tensorflow::CleanupGraphRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CleanupAllResponse>* AsyncCleanupAllRaw(::grpc::ClientContext* context, const ::tensorflow::CleanupAllRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CleanupAllResponse>* PrepareAsyncCleanupAllRaw(::grpc::ClientContext* context, const ::tensorflow::CleanupAllRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RecvTensorResponse>* AsyncRecvTensorRaw(::grpc::ClientContext* context, const ::tensorflow::RecvTensorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RecvTensorResponse>* PrepareAsyncRecvTensorRaw(::grpc::ClientContext* context, const ::tensorflow::RecvTensorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::LoggingResponse>* AsyncLoggingRaw(::grpc::ClientContext* context, const ::tensorflow::LoggingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::LoggingResponse>* PrepareAsyncLoggingRaw(::grpc::ClientContext* context, const ::tensorflow::LoggingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::TracingResponse>* AsyncTracingRaw(::grpc::ClientContext* context, const ::tensorflow::TracingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::TracingResponse>* PrepareAsyncTracingRaw(::grpc::ClientContext* context, const ::tensorflow::TracingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RecvBufResponse>* AsyncRecvBufRaw(::grpc::ClientContext* context, const ::tensorflow::RecvBufRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RecvBufResponse>* PrepareAsyncRecvBufRaw(::grpc::ClientContext* context, const ::tensorflow::RecvBufRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::GetStepSequenceResponse>* AsyncGetStepSequenceRaw(::grpc::ClientContext* context, const ::tensorflow::GetStepSequenceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::GetStepSequenceResponse>* PrepareAsyncGetStepSequenceRaw(::grpc::ClientContext* context, const ::tensorflow::GetStepSequenceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CompleteGroupResponse>* AsyncCompleteGroupRaw(::grpc::ClientContext* context, const ::tensorflow::CompleteGroupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CompleteGroupResponse>* PrepareAsyncCompleteGroupRaw(::grpc::ClientContext* context, const ::tensorflow::CompleteGroupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CompleteInstanceResponse>* AsyncCompleteInstanceRaw(::grpc::ClientContext* context, const ::tensorflow::CompleteInstanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CompleteInstanceResponse>* PrepareAsyncCompleteInstanceRaw(::grpc::ClientContext* context, const ::tensorflow::CompleteInstanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetStatus(::grpc::ClientContext* context, const ::tensorflow::GetStatusRequest& request, ::tensorflow::GetStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::GetStatusResponse>> AsyncGetStatus(::grpc::ClientContext* context, const ::tensorflow::GetStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::GetStatusResponse>>(AsyncGetStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::GetStatusResponse>> PrepareAsyncGetStatus(::grpc::ClientContext* context, const ::tensorflow::GetStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::GetStatusResponse>>(PrepareAsyncGetStatusRaw(context, request, cq));
    }
    ::grpc::Status CreateWorkerSession(::grpc::ClientContext* context, const ::tensorflow::CreateWorkerSessionRequest& request, ::tensorflow::CreateWorkerSessionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::CreateWorkerSessionResponse>> AsyncCreateWorkerSession(::grpc::ClientContext* context, const ::tensorflow::CreateWorkerSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::CreateWorkerSessionResponse>>(AsyncCreateWorkerSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::CreateWorkerSessionResponse>> PrepareAsyncCreateWorkerSession(::grpc::ClientContext* context, const ::tensorflow::CreateWorkerSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::CreateWorkerSessionResponse>>(PrepareAsyncCreateWorkerSessionRaw(context, request, cq));
    }
    ::grpc::Status DeleteWorkerSession(::grpc::ClientContext* context, const ::tensorflow::DeleteWorkerSessionRequest& request, ::tensorflow::DeleteWorkerSessionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::DeleteWorkerSessionResponse>> AsyncDeleteWorkerSession(::grpc::ClientContext* context, const ::tensorflow::DeleteWorkerSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::DeleteWorkerSessionResponse>>(AsyncDeleteWorkerSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::DeleteWorkerSessionResponse>> PrepareAsyncDeleteWorkerSession(::grpc::ClientContext* context, const ::tensorflow::DeleteWorkerSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::DeleteWorkerSessionResponse>>(PrepareAsyncDeleteWorkerSessionRaw(context, request, cq));
    }
    ::grpc::Status RegisterGraph(::grpc::ClientContext* context, const ::tensorflow::RegisterGraphRequest& request, ::tensorflow::RegisterGraphResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::RegisterGraphResponse>> AsyncRegisterGraph(::grpc::ClientContext* context, const ::tensorflow::RegisterGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::RegisterGraphResponse>>(AsyncRegisterGraphRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::RegisterGraphResponse>> PrepareAsyncRegisterGraph(::grpc::ClientContext* context, const ::tensorflow::RegisterGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::RegisterGraphResponse>>(PrepareAsyncRegisterGraphRaw(context, request, cq));
    }
    ::grpc::Status DeregisterGraph(::grpc::ClientContext* context, const ::tensorflow::DeregisterGraphRequest& request, ::tensorflow::DeregisterGraphResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::DeregisterGraphResponse>> AsyncDeregisterGraph(::grpc::ClientContext* context, const ::tensorflow::DeregisterGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::DeregisterGraphResponse>>(AsyncDeregisterGraphRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::DeregisterGraphResponse>> PrepareAsyncDeregisterGraph(::grpc::ClientContext* context, const ::tensorflow::DeregisterGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::DeregisterGraphResponse>>(PrepareAsyncDeregisterGraphRaw(context, request, cq));
    }
    ::grpc::Status RunGraph(::grpc::ClientContext* context, const ::tensorflow::RunGraphRequest& request, ::tensorflow::RunGraphResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::RunGraphResponse>> AsyncRunGraph(::grpc::ClientContext* context, const ::tensorflow::RunGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::RunGraphResponse>>(AsyncRunGraphRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::RunGraphResponse>> PrepareAsyncRunGraph(::grpc::ClientContext* context, const ::tensorflow::RunGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::RunGraphResponse>>(PrepareAsyncRunGraphRaw(context, request, cq));
    }
    ::grpc::Status CleanupGraph(::grpc::ClientContext* context, const ::tensorflow::CleanupGraphRequest& request, ::tensorflow::CleanupGraphResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::CleanupGraphResponse>> AsyncCleanupGraph(::grpc::ClientContext* context, const ::tensorflow::CleanupGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::CleanupGraphResponse>>(AsyncCleanupGraphRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::CleanupGraphResponse>> PrepareAsyncCleanupGraph(::grpc::ClientContext* context, const ::tensorflow::CleanupGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::CleanupGraphResponse>>(PrepareAsyncCleanupGraphRaw(context, request, cq));
    }
    ::grpc::Status CleanupAll(::grpc::ClientContext* context, const ::tensorflow::CleanupAllRequest& request, ::tensorflow::CleanupAllResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::CleanupAllResponse>> AsyncCleanupAll(::grpc::ClientContext* context, const ::tensorflow::CleanupAllRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::CleanupAllResponse>>(AsyncCleanupAllRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::CleanupAllResponse>> PrepareAsyncCleanupAll(::grpc::ClientContext* context, const ::tensorflow::CleanupAllRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::CleanupAllResponse>>(PrepareAsyncCleanupAllRaw(context, request, cq));
    }
    ::grpc::Status RecvTensor(::grpc::ClientContext* context, const ::tensorflow::RecvTensorRequest& request, ::tensorflow::RecvTensorResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::RecvTensorResponse>> AsyncRecvTensor(::grpc::ClientContext* context, const ::tensorflow::RecvTensorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::RecvTensorResponse>>(AsyncRecvTensorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::RecvTensorResponse>> PrepareAsyncRecvTensor(::grpc::ClientContext* context, const ::tensorflow::RecvTensorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::RecvTensorResponse>>(PrepareAsyncRecvTensorRaw(context, request, cq));
    }
    ::grpc::Status Logging(::grpc::ClientContext* context, const ::tensorflow::LoggingRequest& request, ::tensorflow::LoggingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::LoggingResponse>> AsyncLogging(::grpc::ClientContext* context, const ::tensorflow::LoggingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::LoggingResponse>>(AsyncLoggingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::LoggingResponse>> PrepareAsyncLogging(::grpc::ClientContext* context, const ::tensorflow::LoggingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::LoggingResponse>>(PrepareAsyncLoggingRaw(context, request, cq));
    }
    ::grpc::Status Tracing(::grpc::ClientContext* context, const ::tensorflow::TracingRequest& request, ::tensorflow::TracingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::TracingResponse>> AsyncTracing(::grpc::ClientContext* context, const ::tensorflow::TracingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::TracingResponse>>(AsyncTracingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::TracingResponse>> PrepareAsyncTracing(::grpc::ClientContext* context, const ::tensorflow::TracingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::TracingResponse>>(PrepareAsyncTracingRaw(context, request, cq));
    }
    ::grpc::Status RecvBuf(::grpc::ClientContext* context, const ::tensorflow::RecvBufRequest& request, ::tensorflow::RecvBufResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::RecvBufResponse>> AsyncRecvBuf(::grpc::ClientContext* context, const ::tensorflow::RecvBufRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::RecvBufResponse>>(AsyncRecvBufRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::RecvBufResponse>> PrepareAsyncRecvBuf(::grpc::ClientContext* context, const ::tensorflow::RecvBufRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::RecvBufResponse>>(PrepareAsyncRecvBufRaw(context, request, cq));
    }
    ::grpc::Status GetStepSequence(::grpc::ClientContext* context, const ::tensorflow::GetStepSequenceRequest& request, ::tensorflow::GetStepSequenceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::GetStepSequenceResponse>> AsyncGetStepSequence(::grpc::ClientContext* context, const ::tensorflow::GetStepSequenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::GetStepSequenceResponse>>(AsyncGetStepSequenceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::GetStepSequenceResponse>> PrepareAsyncGetStepSequence(::grpc::ClientContext* context, const ::tensorflow::GetStepSequenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::GetStepSequenceResponse>>(PrepareAsyncGetStepSequenceRaw(context, request, cq));
    }
    ::grpc::Status CompleteGroup(::grpc::ClientContext* context, const ::tensorflow::CompleteGroupRequest& request, ::tensorflow::CompleteGroupResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::CompleteGroupResponse>> AsyncCompleteGroup(::grpc::ClientContext* context, const ::tensorflow::CompleteGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::CompleteGroupResponse>>(AsyncCompleteGroupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::CompleteGroupResponse>> PrepareAsyncCompleteGroup(::grpc::ClientContext* context, const ::tensorflow::CompleteGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::CompleteGroupResponse>>(PrepareAsyncCompleteGroupRaw(context, request, cq));
    }
    ::grpc::Status CompleteInstance(::grpc::ClientContext* context, const ::tensorflow::CompleteInstanceRequest& request, ::tensorflow::CompleteInstanceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::CompleteInstanceResponse>> AsyncCompleteInstance(::grpc::ClientContext* context, const ::tensorflow::CompleteInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::CompleteInstanceResponse>>(AsyncCompleteInstanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::CompleteInstanceResponse>> PrepareAsyncCompleteInstance(::grpc::ClientContext* context, const ::tensorflow::CompleteInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::CompleteInstanceResponse>>(PrepareAsyncCompleteInstanceRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetStatus(::grpc::ClientContext* context, const ::tensorflow::GetStatusRequest* request, ::tensorflow::GetStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void GetStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::GetStatusResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetStatus(::grpc::ClientContext* context, const ::tensorflow::GetStatusRequest* request, ::tensorflow::GetStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetStatus(::grpc::ClientContext* context, const ::tensorflow::GetStatusRequest* request, ::tensorflow::GetStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::GetStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::GetStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CreateWorkerSession(::grpc::ClientContext* context, const ::tensorflow::CreateWorkerSessionRequest* request, ::tensorflow::CreateWorkerSessionResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateWorkerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::CreateWorkerSessionResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateWorkerSession(::grpc::ClientContext* context, const ::tensorflow::CreateWorkerSessionRequest* request, ::tensorflow::CreateWorkerSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateWorkerSession(::grpc::ClientContext* context, const ::tensorflow::CreateWorkerSessionRequest* request, ::tensorflow::CreateWorkerSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateWorkerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::CreateWorkerSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateWorkerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::CreateWorkerSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteWorkerSession(::grpc::ClientContext* context, const ::tensorflow::DeleteWorkerSessionRequest* request, ::tensorflow::DeleteWorkerSessionResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteWorkerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::DeleteWorkerSessionResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteWorkerSession(::grpc::ClientContext* context, const ::tensorflow::DeleteWorkerSessionRequest* request, ::tensorflow::DeleteWorkerSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteWorkerSession(::grpc::ClientContext* context, const ::tensorflow::DeleteWorkerSessionRequest* request, ::tensorflow::DeleteWorkerSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteWorkerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::DeleteWorkerSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteWorkerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::DeleteWorkerSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RegisterGraph(::grpc::ClientContext* context, const ::tensorflow::RegisterGraphRequest* request, ::tensorflow::RegisterGraphResponse* response, std::function<void(::grpc::Status)>) override;
      void RegisterGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::RegisterGraphResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RegisterGraph(::grpc::ClientContext* context, const ::tensorflow::RegisterGraphRequest* request, ::tensorflow::RegisterGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RegisterGraph(::grpc::ClientContext* context, const ::tensorflow::RegisterGraphRequest* request, ::tensorflow::RegisterGraphResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RegisterGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::RegisterGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RegisterGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::RegisterGraphResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeregisterGraph(::grpc::ClientContext* context, const ::tensorflow::DeregisterGraphRequest* request, ::tensorflow::DeregisterGraphResponse* response, std::function<void(::grpc::Status)>) override;
      void DeregisterGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::DeregisterGraphResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeregisterGraph(::grpc::ClientContext* context, const ::tensorflow::DeregisterGraphRequest* request, ::tensorflow::DeregisterGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeregisterGraph(::grpc::ClientContext* context, const ::tensorflow::DeregisterGraphRequest* request, ::tensorflow::DeregisterGraphResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeregisterGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::DeregisterGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeregisterGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::DeregisterGraphResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RunGraph(::grpc::ClientContext* context, const ::tensorflow::RunGraphRequest* request, ::tensorflow::RunGraphResponse* response, std::function<void(::grpc::Status)>) override;
      void RunGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::RunGraphResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RunGraph(::grpc::ClientContext* context, const ::tensorflow::RunGraphRequest* request, ::tensorflow::RunGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RunGraph(::grpc::ClientContext* context, const ::tensorflow::RunGraphRequest* request, ::tensorflow::RunGraphResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RunGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::RunGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RunGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::RunGraphResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CleanupGraph(::grpc::ClientContext* context, const ::tensorflow::CleanupGraphRequest* request, ::tensorflow::CleanupGraphResponse* response, std::function<void(::grpc::Status)>) override;
      void CleanupGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::CleanupGraphResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CleanupGraph(::grpc::ClientContext* context, const ::tensorflow::CleanupGraphRequest* request, ::tensorflow::CleanupGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CleanupGraph(::grpc::ClientContext* context, const ::tensorflow::CleanupGraphRequest* request, ::tensorflow::CleanupGraphResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CleanupGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::CleanupGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CleanupGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::CleanupGraphResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CleanupAll(::grpc::ClientContext* context, const ::tensorflow::CleanupAllRequest* request, ::tensorflow::CleanupAllResponse* response, std::function<void(::grpc::Status)>) override;
      void CleanupAll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::CleanupAllResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CleanupAll(::grpc::ClientContext* context, const ::tensorflow::CleanupAllRequest* request, ::tensorflow::CleanupAllResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CleanupAll(::grpc::ClientContext* context, const ::tensorflow::CleanupAllRequest* request, ::tensorflow::CleanupAllResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CleanupAll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::CleanupAllResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CleanupAll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::CleanupAllResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RecvTensor(::grpc::ClientContext* context, const ::tensorflow::RecvTensorRequest* request, ::tensorflow::RecvTensorResponse* response, std::function<void(::grpc::Status)>) override;
      void RecvTensor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::RecvTensorResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RecvTensor(::grpc::ClientContext* context, const ::tensorflow::RecvTensorRequest* request, ::tensorflow::RecvTensorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RecvTensor(::grpc::ClientContext* context, const ::tensorflow::RecvTensorRequest* request, ::tensorflow::RecvTensorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RecvTensor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::RecvTensorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RecvTensor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::RecvTensorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Logging(::grpc::ClientContext* context, const ::tensorflow::LoggingRequest* request, ::tensorflow::LoggingResponse* response, std::function<void(::grpc::Status)>) override;
      void Logging(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::LoggingResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Logging(::grpc::ClientContext* context, const ::tensorflow::LoggingRequest* request, ::tensorflow::LoggingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Logging(::grpc::ClientContext* context, const ::tensorflow::LoggingRequest* request, ::tensorflow::LoggingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Logging(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::LoggingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Logging(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::LoggingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Tracing(::grpc::ClientContext* context, const ::tensorflow::TracingRequest* request, ::tensorflow::TracingResponse* response, std::function<void(::grpc::Status)>) override;
      void Tracing(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::TracingResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Tracing(::grpc::ClientContext* context, const ::tensorflow::TracingRequest* request, ::tensorflow::TracingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Tracing(::grpc::ClientContext* context, const ::tensorflow::TracingRequest* request, ::tensorflow::TracingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Tracing(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::TracingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Tracing(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::TracingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RecvBuf(::grpc::ClientContext* context, const ::tensorflow::RecvBufRequest* request, ::tensorflow::RecvBufResponse* response, std::function<void(::grpc::Status)>) override;
      void RecvBuf(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::RecvBufResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RecvBuf(::grpc::ClientContext* context, const ::tensorflow::RecvBufRequest* request, ::tensorflow::RecvBufResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RecvBuf(::grpc::ClientContext* context, const ::tensorflow::RecvBufRequest* request, ::tensorflow::RecvBufResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RecvBuf(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::RecvBufResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RecvBuf(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::RecvBufResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetStepSequence(::grpc::ClientContext* context, const ::tensorflow::GetStepSequenceRequest* request, ::tensorflow::GetStepSequenceResponse* response, std::function<void(::grpc::Status)>) override;
      void GetStepSequence(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::GetStepSequenceResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetStepSequence(::grpc::ClientContext* context, const ::tensorflow::GetStepSequenceRequest* request, ::tensorflow::GetStepSequenceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetStepSequence(::grpc::ClientContext* context, const ::tensorflow::GetStepSequenceRequest* request, ::tensorflow::GetStepSequenceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetStepSequence(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::GetStepSequenceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetStepSequence(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::GetStepSequenceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CompleteGroup(::grpc::ClientContext* context, const ::tensorflow::CompleteGroupRequest* request, ::tensorflow::CompleteGroupResponse* response, std::function<void(::grpc::Status)>) override;
      void CompleteGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::CompleteGroupResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CompleteGroup(::grpc::ClientContext* context, const ::tensorflow::CompleteGroupRequest* request, ::tensorflow::CompleteGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CompleteGroup(::grpc::ClientContext* context, const ::tensorflow::CompleteGroupRequest* request, ::tensorflow::CompleteGroupResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CompleteGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::CompleteGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CompleteGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::CompleteGroupResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CompleteInstance(::grpc::ClientContext* context, const ::tensorflow::CompleteInstanceRequest* request, ::tensorflow::CompleteInstanceResponse* response, std::function<void(::grpc::Status)>) override;
      void CompleteInstance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::CompleteInstanceResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CompleteInstance(::grpc::ClientContext* context, const ::tensorflow::CompleteInstanceRequest* request, ::tensorflow::CompleteInstanceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CompleteInstance(::grpc::ClientContext* context, const ::tensorflow::CompleteInstanceRequest* request, ::tensorflow::CompleteInstanceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CompleteInstance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::CompleteInstanceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CompleteInstance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::CompleteInstanceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::tensorflow::GetStatusResponse>* AsyncGetStatusRaw(::grpc::ClientContext* context, const ::tensorflow::GetStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::GetStatusResponse>* PrepareAsyncGetStatusRaw(::grpc::ClientContext* context, const ::tensorflow::GetStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::CreateWorkerSessionResponse>* AsyncCreateWorkerSessionRaw(::grpc::ClientContext* context, const ::tensorflow::CreateWorkerSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::CreateWorkerSessionResponse>* PrepareAsyncCreateWorkerSessionRaw(::grpc::ClientContext* context, const ::tensorflow::CreateWorkerSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::DeleteWorkerSessionResponse>* AsyncDeleteWorkerSessionRaw(::grpc::ClientContext* context, const ::tensorflow::DeleteWorkerSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::DeleteWorkerSessionResponse>* PrepareAsyncDeleteWorkerSessionRaw(::grpc::ClientContext* context, const ::tensorflow::DeleteWorkerSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::RegisterGraphResponse>* AsyncRegisterGraphRaw(::grpc::ClientContext* context, const ::tensorflow::RegisterGraphRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::RegisterGraphResponse>* PrepareAsyncRegisterGraphRaw(::grpc::ClientContext* context, const ::tensorflow::RegisterGraphRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::DeregisterGraphResponse>* AsyncDeregisterGraphRaw(::grpc::ClientContext* context, const ::tensorflow::DeregisterGraphRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::DeregisterGraphResponse>* PrepareAsyncDeregisterGraphRaw(::grpc::ClientContext* context, const ::tensorflow::DeregisterGraphRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::RunGraphResponse>* AsyncRunGraphRaw(::grpc::ClientContext* context, const ::tensorflow::RunGraphRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::RunGraphResponse>* PrepareAsyncRunGraphRaw(::grpc::ClientContext* context, const ::tensorflow::RunGraphRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::CleanupGraphResponse>* AsyncCleanupGraphRaw(::grpc::ClientContext* context, const ::tensorflow::CleanupGraphRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::CleanupGraphResponse>* PrepareAsyncCleanupGraphRaw(::grpc::ClientContext* context, const ::tensorflow::CleanupGraphRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::CleanupAllResponse>* AsyncCleanupAllRaw(::grpc::ClientContext* context, const ::tensorflow::CleanupAllRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::CleanupAllResponse>* PrepareAsyncCleanupAllRaw(::grpc::ClientContext* context, const ::tensorflow::CleanupAllRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::RecvTensorResponse>* AsyncRecvTensorRaw(::grpc::ClientContext* context, const ::tensorflow::RecvTensorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::RecvTensorResponse>* PrepareAsyncRecvTensorRaw(::grpc::ClientContext* context, const ::tensorflow::RecvTensorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::LoggingResponse>* AsyncLoggingRaw(::grpc::ClientContext* context, const ::tensorflow::LoggingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::LoggingResponse>* PrepareAsyncLoggingRaw(::grpc::ClientContext* context, const ::tensorflow::LoggingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::TracingResponse>* AsyncTracingRaw(::grpc::ClientContext* context, const ::tensorflow::TracingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::TracingResponse>* PrepareAsyncTracingRaw(::grpc::ClientContext* context, const ::tensorflow::TracingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::RecvBufResponse>* AsyncRecvBufRaw(::grpc::ClientContext* context, const ::tensorflow::RecvBufRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::RecvBufResponse>* PrepareAsyncRecvBufRaw(::grpc::ClientContext* context, const ::tensorflow::RecvBufRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::GetStepSequenceResponse>* AsyncGetStepSequenceRaw(::grpc::ClientContext* context, const ::tensorflow::GetStepSequenceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::GetStepSequenceResponse>* PrepareAsyncGetStepSequenceRaw(::grpc::ClientContext* context, const ::tensorflow::GetStepSequenceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::CompleteGroupResponse>* AsyncCompleteGroupRaw(::grpc::ClientContext* context, const ::tensorflow::CompleteGroupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::CompleteGroupResponse>* PrepareAsyncCompleteGroupRaw(::grpc::ClientContext* context, const ::tensorflow::CompleteGroupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::CompleteInstanceResponse>* AsyncCompleteInstanceRaw(::grpc::ClientContext* context, const ::tensorflow::CompleteInstanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::CompleteInstanceResponse>* PrepareAsyncCompleteInstanceRaw(::grpc::ClientContext* context, const ::tensorflow::CompleteInstanceRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateWorkerSession_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteWorkerSession_;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterGraph_;
    const ::grpc::internal::RpcMethod rpcmethod_DeregisterGraph_;
    const ::grpc::internal::RpcMethod rpcmethod_RunGraph_;
    const ::grpc::internal::RpcMethod rpcmethod_CleanupGraph_;
    const ::grpc::internal::RpcMethod rpcmethod_CleanupAll_;
    const ::grpc::internal::RpcMethod rpcmethod_RecvTensor_;
    const ::grpc::internal::RpcMethod rpcmethod_Logging_;
    const ::grpc::internal::RpcMethod rpcmethod_Tracing_;
    const ::grpc::internal::RpcMethod rpcmethod_RecvBuf_;
    const ::grpc::internal::RpcMethod rpcmethod_GetStepSequence_;
    const ::grpc::internal::RpcMethod rpcmethod_CompleteGroup_;
    const ::grpc::internal::RpcMethod rpcmethod_CompleteInstance_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // See worker.proto for details.
    virtual ::grpc::Status GetStatus(::grpc::ServerContext* context, const ::tensorflow::GetStatusRequest* request, ::tensorflow::GetStatusResponse* response);
    // See worker.proto for details.
    virtual ::grpc::Status CreateWorkerSession(::grpc::ServerContext* context, const ::tensorflow::CreateWorkerSessionRequest* request, ::tensorflow::CreateWorkerSessionResponse* response);
    // See worker.proto for details.
    virtual ::grpc::Status DeleteWorkerSession(::grpc::ServerContext* context, const ::tensorflow::DeleteWorkerSessionRequest* request, ::tensorflow::DeleteWorkerSessionResponse* response);
    // See worker.proto for details.
    virtual ::grpc::Status RegisterGraph(::grpc::ServerContext* context, const ::tensorflow::RegisterGraphRequest* request, ::tensorflow::RegisterGraphResponse* response);
    // See worker.proto for details.
    virtual ::grpc::Status DeregisterGraph(::grpc::ServerContext* context, const ::tensorflow::DeregisterGraphRequest* request, ::tensorflow::DeregisterGraphResponse* response);
    // See worker.proto for details.
    virtual ::grpc::Status RunGraph(::grpc::ServerContext* context, const ::tensorflow::RunGraphRequest* request, ::tensorflow::RunGraphResponse* response);
    // See worker.proto for details.
    virtual ::grpc::Status CleanupGraph(::grpc::ServerContext* context, const ::tensorflow::CleanupGraphRequest* request, ::tensorflow::CleanupGraphResponse* response);
    // See worker.proto for details.
    virtual ::grpc::Status CleanupAll(::grpc::ServerContext* context, const ::tensorflow::CleanupAllRequest* request, ::tensorflow::CleanupAllResponse* response);
    // See worker.proto for details.
    virtual ::grpc::Status RecvTensor(::grpc::ServerContext* context, const ::tensorflow::RecvTensorRequest* request, ::tensorflow::RecvTensorResponse* response);
    // RecvTensor Method
    // See worker.proto for details.
    virtual ::grpc::Status Logging(::grpc::ServerContext* context, const ::tensorflow::LoggingRequest* request, ::tensorflow::LoggingResponse* response);
    // See worker.proto for details.
    virtual ::grpc::Status Tracing(::grpc::ServerContext* context, const ::tensorflow::TracingRequest* request, ::tensorflow::TracingResponse* response);
    // See worker.proto for details.
    virtual ::grpc::Status RecvBuf(::grpc::ServerContext* context, const ::tensorflow::RecvBufRequest* request, ::tensorflow::RecvBufResponse* response);
    // See worker.proto for details.
    virtual ::grpc::Status GetStepSequence(::grpc::ServerContext* context, const ::tensorflow::GetStepSequenceRequest* request, ::tensorflow::GetStepSequenceResponse* response);
    // See worker.proto for details.
    virtual ::grpc::Status CompleteGroup(::grpc::ServerContext* context, const ::tensorflow::CompleteGroupRequest* request, ::tensorflow::CompleteGroupResponse* response);
    // See worker.proto for details.
    virtual ::grpc::Status CompleteInstance(::grpc::ServerContext* context, const ::tensorflow::CompleteInstanceRequest* request, ::tensorflow::CompleteInstanceResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetStatus() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* /*context*/, const ::tensorflow::GetStatusRequest* /*request*/, ::tensorflow::GetStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStatus(::grpc::ServerContext* context, ::tensorflow::GetStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::tensorflow::GetStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateWorkerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateWorkerSession() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CreateWorkerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateWorkerSession(::grpc::ServerContext* /*context*/, const ::tensorflow::CreateWorkerSessionRequest* /*request*/, ::tensorflow::CreateWorkerSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateWorkerSession(::grpc::ServerContext* context, ::tensorflow::CreateWorkerSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::tensorflow::CreateWorkerSessionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteWorkerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteWorkerSession() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeleteWorkerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteWorkerSession(::grpc::ServerContext* /*context*/, const ::tensorflow::DeleteWorkerSessionRequest* /*request*/, ::tensorflow::DeleteWorkerSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteWorkerSession(::grpc::ServerContext* context, ::tensorflow::DeleteWorkerSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::tensorflow::DeleteWorkerSessionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterGraph() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_RegisterGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterGraph(::grpc::ServerContext* /*context*/, const ::tensorflow::RegisterGraphRequest* /*request*/, ::tensorflow::RegisterGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterGraph(::grpc::ServerContext* context, ::tensorflow::RegisterGraphRequest* request, ::grpc::ServerAsyncResponseWriter< ::tensorflow::RegisterGraphResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeregisterGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeregisterGraph() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeregisterGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeregisterGraph(::grpc::ServerContext* /*context*/, const ::tensorflow::DeregisterGraphRequest* /*request*/, ::tensorflow::DeregisterGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeregisterGraph(::grpc::ServerContext* context, ::tensorflow::DeregisterGraphRequest* request, ::grpc::ServerAsyncResponseWriter< ::tensorflow::DeregisterGraphResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RunGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RunGraph() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_RunGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunGraph(::grpc::ServerContext* /*context*/, const ::tensorflow::RunGraphRequest* /*request*/, ::tensorflow::RunGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRunGraph(::grpc::ServerContext* context, ::tensorflow::RunGraphRequest* request, ::grpc::ServerAsyncResponseWriter< ::tensorflow::RunGraphResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CleanupGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CleanupGraph() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_CleanupGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CleanupGraph(::grpc::ServerContext* /*context*/, const ::tensorflow::CleanupGraphRequest* /*request*/, ::tensorflow::CleanupGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCleanupGraph(::grpc::ServerContext* context, ::tensorflow::CleanupGraphRequest* request, ::grpc::ServerAsyncResponseWriter< ::tensorflow::CleanupGraphResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CleanupAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CleanupAll() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_CleanupAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CleanupAll(::grpc::ServerContext* /*context*/, const ::tensorflow::CleanupAllRequest* /*request*/, ::tensorflow::CleanupAllResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCleanupAll(::grpc::ServerContext* context, ::tensorflow::CleanupAllRequest* request, ::grpc::ServerAsyncResponseWriter< ::tensorflow::CleanupAllResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RecvTensor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RecvTensor() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_RecvTensor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecvTensor(::grpc::ServerContext* /*context*/, const ::tensorflow::RecvTensorRequest* /*request*/, ::tensorflow::RecvTensorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecvTensor(::grpc::ServerContext* context, ::tensorflow::RecvTensorRequest* request, ::grpc::ServerAsyncResponseWriter< ::tensorflow::RecvTensorResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Logging : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Logging() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_Logging() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logging(::grpc::ServerContext* /*context*/, const ::tensorflow::LoggingRequest* /*request*/, ::tensorflow::LoggingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogging(::grpc::ServerContext* context, ::tensorflow::LoggingRequest* request, ::grpc::ServerAsyncResponseWriter< ::tensorflow::LoggingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Tracing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Tracing() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_Tracing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tracing(::grpc::ServerContext* /*context*/, const ::tensorflow::TracingRequest* /*request*/, ::tensorflow::TracingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTracing(::grpc::ServerContext* context, ::tensorflow::TracingRequest* request, ::grpc::ServerAsyncResponseWriter< ::tensorflow::TracingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RecvBuf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RecvBuf() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_RecvBuf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecvBuf(::grpc::ServerContext* /*context*/, const ::tensorflow::RecvBufRequest* /*request*/, ::tensorflow::RecvBufResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecvBuf(::grpc::ServerContext* context, ::tensorflow::RecvBufRequest* request, ::grpc::ServerAsyncResponseWriter< ::tensorflow::RecvBufResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetStepSequence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetStepSequence() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_GetStepSequence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStepSequence(::grpc::ServerContext* /*context*/, const ::tensorflow::GetStepSequenceRequest* /*request*/, ::tensorflow::GetStepSequenceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStepSequence(::grpc::ServerContext* context, ::tensorflow::GetStepSequenceRequest* request, ::grpc::ServerAsyncResponseWriter< ::tensorflow::GetStepSequenceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CompleteGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CompleteGroup() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_CompleteGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CompleteGroup(::grpc::ServerContext* /*context*/, const ::tensorflow::CompleteGroupRequest* /*request*/, ::tensorflow::CompleteGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCompleteGroup(::grpc::ServerContext* context, ::tensorflow::CompleteGroupRequest* request, ::grpc::ServerAsyncResponseWriter< ::tensorflow::CompleteGroupResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CompleteInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CompleteInstance() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_CompleteInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CompleteInstance(::grpc::ServerContext* /*context*/, const ::tensorflow::CompleteInstanceRequest* /*request*/, ::tensorflow::CompleteInstanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCompleteInstance(::grpc::ServerContext* context, ::tensorflow::CompleteInstanceRequest* request, ::grpc::ServerAsyncResponseWriter< ::tensorflow::CompleteInstanceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetStatus<WithAsyncMethod_CreateWorkerSession<WithAsyncMethod_DeleteWorkerSession<WithAsyncMethod_RegisterGraph<WithAsyncMethod_DeregisterGraph<WithAsyncMethod_RunGraph<WithAsyncMethod_CleanupGraph<WithAsyncMethod_CleanupAll<WithAsyncMethod_RecvTensor<WithAsyncMethod_Logging<WithAsyncMethod_Tracing<WithAsyncMethod_RecvBuf<WithAsyncMethod_GetStepSequence<WithAsyncMethod_CompleteGroup<WithAsyncMethod_CompleteInstance<Service > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetStatus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::GetStatusRequest, ::tensorflow::GetStatusResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tensorflow::GetStatusRequest* request, ::tensorflow::GetStatusResponse* response) { return this->GetStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetStatus(
        ::grpc::experimental::MessageAllocator< ::tensorflow::GetStatusRequest, ::tensorflow::GetStatusResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::GetStatusRequest, ::tensorflow::GetStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* /*context*/, const ::tensorflow::GetStatusRequest* /*request*/, ::tensorflow::GetStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::tensorflow::GetStatusRequest* /*request*/, ::tensorflow::GetStatusResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetStatus(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tensorflow::GetStatusRequest* /*request*/, ::tensorflow::GetStatusResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateWorkerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateWorkerSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::CreateWorkerSessionRequest, ::tensorflow::CreateWorkerSessionResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tensorflow::CreateWorkerSessionRequest* request, ::tensorflow::CreateWorkerSessionResponse* response) { return this->CreateWorkerSession(context, request, response); }));}
    void SetMessageAllocatorFor_CreateWorkerSession(
        ::grpc::experimental::MessageAllocator< ::tensorflow::CreateWorkerSessionRequest, ::tensorflow::CreateWorkerSessionResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::CreateWorkerSessionRequest, ::tensorflow::CreateWorkerSessionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateWorkerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateWorkerSession(::grpc::ServerContext* /*context*/, const ::tensorflow::CreateWorkerSessionRequest* /*request*/, ::tensorflow::CreateWorkerSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateWorkerSession(
      ::grpc::CallbackServerContext* /*context*/, const ::tensorflow::CreateWorkerSessionRequest* /*request*/, ::tensorflow::CreateWorkerSessionResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateWorkerSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tensorflow::CreateWorkerSessionRequest* /*request*/, ::tensorflow::CreateWorkerSessionResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteWorkerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteWorkerSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::DeleteWorkerSessionRequest, ::tensorflow::DeleteWorkerSessionResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tensorflow::DeleteWorkerSessionRequest* request, ::tensorflow::DeleteWorkerSessionResponse* response) { return this->DeleteWorkerSession(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteWorkerSession(
        ::grpc::experimental::MessageAllocator< ::tensorflow::DeleteWorkerSessionRequest, ::tensorflow::DeleteWorkerSessionResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::DeleteWorkerSessionRequest, ::tensorflow::DeleteWorkerSessionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteWorkerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteWorkerSession(::grpc::ServerContext* /*context*/, const ::tensorflow::DeleteWorkerSessionRequest* /*request*/, ::tensorflow::DeleteWorkerSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteWorkerSession(
      ::grpc::CallbackServerContext* /*context*/, const ::tensorflow::DeleteWorkerSessionRequest* /*request*/, ::tensorflow::DeleteWorkerSessionResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteWorkerSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tensorflow::DeleteWorkerSessionRequest* /*request*/, ::tensorflow::DeleteWorkerSessionResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RegisterGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RegisterGraph() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::RegisterGraphRequest, ::tensorflow::RegisterGraphResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tensorflow::RegisterGraphRequest* request, ::tensorflow::RegisterGraphResponse* response) { return this->RegisterGraph(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterGraph(
        ::grpc::experimental::MessageAllocator< ::tensorflow::RegisterGraphRequest, ::tensorflow::RegisterGraphResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::RegisterGraphRequest, ::tensorflow::RegisterGraphResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RegisterGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterGraph(::grpc::ServerContext* /*context*/, const ::tensorflow::RegisterGraphRequest* /*request*/, ::tensorflow::RegisterGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RegisterGraph(
      ::grpc::CallbackServerContext* /*context*/, const ::tensorflow::RegisterGraphRequest* /*request*/, ::tensorflow::RegisterGraphResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RegisterGraph(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tensorflow::RegisterGraphRequest* /*request*/, ::tensorflow::RegisterGraphResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeregisterGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeregisterGraph() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::DeregisterGraphRequest, ::tensorflow::DeregisterGraphResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tensorflow::DeregisterGraphRequest* request, ::tensorflow::DeregisterGraphResponse* response) { return this->DeregisterGraph(context, request, response); }));}
    void SetMessageAllocatorFor_DeregisterGraph(
        ::grpc::experimental::MessageAllocator< ::tensorflow::DeregisterGraphRequest, ::tensorflow::DeregisterGraphResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::DeregisterGraphRequest, ::tensorflow::DeregisterGraphResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeregisterGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeregisterGraph(::grpc::ServerContext* /*context*/, const ::tensorflow::DeregisterGraphRequest* /*request*/, ::tensorflow::DeregisterGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeregisterGraph(
      ::grpc::CallbackServerContext* /*context*/, const ::tensorflow::DeregisterGraphRequest* /*request*/, ::tensorflow::DeregisterGraphResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeregisterGraph(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tensorflow::DeregisterGraphRequest* /*request*/, ::tensorflow::DeregisterGraphResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RunGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RunGraph() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::RunGraphRequest, ::tensorflow::RunGraphResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tensorflow::RunGraphRequest* request, ::tensorflow::RunGraphResponse* response) { return this->RunGraph(context, request, response); }));}
    void SetMessageAllocatorFor_RunGraph(
        ::grpc::experimental::MessageAllocator< ::tensorflow::RunGraphRequest, ::tensorflow::RunGraphResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::RunGraphRequest, ::tensorflow::RunGraphResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RunGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunGraph(::grpc::ServerContext* /*context*/, const ::tensorflow::RunGraphRequest* /*request*/, ::tensorflow::RunGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RunGraph(
      ::grpc::CallbackServerContext* /*context*/, const ::tensorflow::RunGraphRequest* /*request*/, ::tensorflow::RunGraphResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RunGraph(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tensorflow::RunGraphRequest* /*request*/, ::tensorflow::RunGraphResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CleanupGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CleanupGraph() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::CleanupGraphRequest, ::tensorflow::CleanupGraphResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tensorflow::CleanupGraphRequest* request, ::tensorflow::CleanupGraphResponse* response) { return this->CleanupGraph(context, request, response); }));}
    void SetMessageAllocatorFor_CleanupGraph(
        ::grpc::experimental::MessageAllocator< ::tensorflow::CleanupGraphRequest, ::tensorflow::CleanupGraphResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::CleanupGraphRequest, ::tensorflow::CleanupGraphResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CleanupGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CleanupGraph(::grpc::ServerContext* /*context*/, const ::tensorflow::CleanupGraphRequest* /*request*/, ::tensorflow::CleanupGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CleanupGraph(
      ::grpc::CallbackServerContext* /*context*/, const ::tensorflow::CleanupGraphRequest* /*request*/, ::tensorflow::CleanupGraphResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CleanupGraph(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tensorflow::CleanupGraphRequest* /*request*/, ::tensorflow::CleanupGraphResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CleanupAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CleanupAll() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::CleanupAllRequest, ::tensorflow::CleanupAllResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tensorflow::CleanupAllRequest* request, ::tensorflow::CleanupAllResponse* response) { return this->CleanupAll(context, request, response); }));}
    void SetMessageAllocatorFor_CleanupAll(
        ::grpc::experimental::MessageAllocator< ::tensorflow::CleanupAllRequest, ::tensorflow::CleanupAllResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::CleanupAllRequest, ::tensorflow::CleanupAllResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CleanupAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CleanupAll(::grpc::ServerContext* /*context*/, const ::tensorflow::CleanupAllRequest* /*request*/, ::tensorflow::CleanupAllResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CleanupAll(
      ::grpc::CallbackServerContext* /*context*/, const ::tensorflow::CleanupAllRequest* /*request*/, ::tensorflow::CleanupAllResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CleanupAll(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tensorflow::CleanupAllRequest* /*request*/, ::tensorflow::CleanupAllResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RecvTensor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RecvTensor() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::RecvTensorRequest, ::tensorflow::RecvTensorResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tensorflow::RecvTensorRequest* request, ::tensorflow::RecvTensorResponse* response) { return this->RecvTensor(context, request, response); }));}
    void SetMessageAllocatorFor_RecvTensor(
        ::grpc::experimental::MessageAllocator< ::tensorflow::RecvTensorRequest, ::tensorflow::RecvTensorResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::RecvTensorRequest, ::tensorflow::RecvTensorResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RecvTensor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecvTensor(::grpc::ServerContext* /*context*/, const ::tensorflow::RecvTensorRequest* /*request*/, ::tensorflow::RecvTensorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RecvTensor(
      ::grpc::CallbackServerContext* /*context*/, const ::tensorflow::RecvTensorRequest* /*request*/, ::tensorflow::RecvTensorResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RecvTensor(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tensorflow::RecvTensorRequest* /*request*/, ::tensorflow::RecvTensorResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Logging : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Logging() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::LoggingRequest, ::tensorflow::LoggingResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tensorflow::LoggingRequest* request, ::tensorflow::LoggingResponse* response) { return this->Logging(context, request, response); }));}
    void SetMessageAllocatorFor_Logging(
        ::grpc::experimental::MessageAllocator< ::tensorflow::LoggingRequest, ::tensorflow::LoggingResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(9);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::LoggingRequest, ::tensorflow::LoggingResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Logging() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logging(::grpc::ServerContext* /*context*/, const ::tensorflow::LoggingRequest* /*request*/, ::tensorflow::LoggingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Logging(
      ::grpc::CallbackServerContext* /*context*/, const ::tensorflow::LoggingRequest* /*request*/, ::tensorflow::LoggingResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Logging(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tensorflow::LoggingRequest* /*request*/, ::tensorflow::LoggingResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Tracing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Tracing() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(10,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::TracingRequest, ::tensorflow::TracingResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tensorflow::TracingRequest* request, ::tensorflow::TracingResponse* response) { return this->Tracing(context, request, response); }));}
    void SetMessageAllocatorFor_Tracing(
        ::grpc::experimental::MessageAllocator< ::tensorflow::TracingRequest, ::tensorflow::TracingResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(10);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::TracingRequest, ::tensorflow::TracingResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Tracing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tracing(::grpc::ServerContext* /*context*/, const ::tensorflow::TracingRequest* /*request*/, ::tensorflow::TracingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Tracing(
      ::grpc::CallbackServerContext* /*context*/, const ::tensorflow::TracingRequest* /*request*/, ::tensorflow::TracingResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Tracing(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tensorflow::TracingRequest* /*request*/, ::tensorflow::TracingResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RecvBuf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RecvBuf() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(11,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::RecvBufRequest, ::tensorflow::RecvBufResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tensorflow::RecvBufRequest* request, ::tensorflow::RecvBufResponse* response) { return this->RecvBuf(context, request, response); }));}
    void SetMessageAllocatorFor_RecvBuf(
        ::grpc::experimental::MessageAllocator< ::tensorflow::RecvBufRequest, ::tensorflow::RecvBufResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(11);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::RecvBufRequest, ::tensorflow::RecvBufResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RecvBuf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecvBuf(::grpc::ServerContext* /*context*/, const ::tensorflow::RecvBufRequest* /*request*/, ::tensorflow::RecvBufResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RecvBuf(
      ::grpc::CallbackServerContext* /*context*/, const ::tensorflow::RecvBufRequest* /*request*/, ::tensorflow::RecvBufResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RecvBuf(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tensorflow::RecvBufRequest* /*request*/, ::tensorflow::RecvBufResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetStepSequence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetStepSequence() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(12,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::GetStepSequenceRequest, ::tensorflow::GetStepSequenceResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tensorflow::GetStepSequenceRequest* request, ::tensorflow::GetStepSequenceResponse* response) { return this->GetStepSequence(context, request, response); }));}
    void SetMessageAllocatorFor_GetStepSequence(
        ::grpc::experimental::MessageAllocator< ::tensorflow::GetStepSequenceRequest, ::tensorflow::GetStepSequenceResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(12);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::GetStepSequenceRequest, ::tensorflow::GetStepSequenceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetStepSequence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStepSequence(::grpc::ServerContext* /*context*/, const ::tensorflow::GetStepSequenceRequest* /*request*/, ::tensorflow::GetStepSequenceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetStepSequence(
      ::grpc::CallbackServerContext* /*context*/, const ::tensorflow::GetStepSequenceRequest* /*request*/, ::tensorflow::GetStepSequenceResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetStepSequence(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tensorflow::GetStepSequenceRequest* /*request*/, ::tensorflow::GetStepSequenceResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CompleteGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CompleteGroup() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(13,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::CompleteGroupRequest, ::tensorflow::CompleteGroupResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tensorflow::CompleteGroupRequest* request, ::tensorflow::CompleteGroupResponse* response) { return this->CompleteGroup(context, request, response); }));}
    void SetMessageAllocatorFor_CompleteGroup(
        ::grpc::experimental::MessageAllocator< ::tensorflow::CompleteGroupRequest, ::tensorflow::CompleteGroupResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(13);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::CompleteGroupRequest, ::tensorflow::CompleteGroupResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CompleteGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CompleteGroup(::grpc::ServerContext* /*context*/, const ::tensorflow::CompleteGroupRequest* /*request*/, ::tensorflow::CompleteGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CompleteGroup(
      ::grpc::CallbackServerContext* /*context*/, const ::tensorflow::CompleteGroupRequest* /*request*/, ::tensorflow::CompleteGroupResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CompleteGroup(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tensorflow::CompleteGroupRequest* /*request*/, ::tensorflow::CompleteGroupResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CompleteInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CompleteInstance() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(14,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::CompleteInstanceRequest, ::tensorflow::CompleteInstanceResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tensorflow::CompleteInstanceRequest* request, ::tensorflow::CompleteInstanceResponse* response) { return this->CompleteInstance(context, request, response); }));}
    void SetMessageAllocatorFor_CompleteInstance(
        ::grpc::experimental::MessageAllocator< ::tensorflow::CompleteInstanceRequest, ::tensorflow::CompleteInstanceResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(14);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::CompleteInstanceRequest, ::tensorflow::CompleteInstanceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CompleteInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CompleteInstance(::grpc::ServerContext* /*context*/, const ::tensorflow::CompleteInstanceRequest* /*request*/, ::tensorflow::CompleteInstanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CompleteInstance(
      ::grpc::CallbackServerContext* /*context*/, const ::tensorflow::CompleteInstanceRequest* /*request*/, ::tensorflow::CompleteInstanceResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CompleteInstance(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tensorflow::CompleteInstanceRequest* /*request*/, ::tensorflow::CompleteInstanceResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_GetStatus<ExperimentalWithCallbackMethod_CreateWorkerSession<ExperimentalWithCallbackMethod_DeleteWorkerSession<ExperimentalWithCallbackMethod_RegisterGraph<ExperimentalWithCallbackMethod_DeregisterGraph<ExperimentalWithCallbackMethod_RunGraph<ExperimentalWithCallbackMethod_CleanupGraph<ExperimentalWithCallbackMethod_CleanupAll<ExperimentalWithCallbackMethod_RecvTensor<ExperimentalWithCallbackMethod_Logging<ExperimentalWithCallbackMethod_Tracing<ExperimentalWithCallbackMethod_RecvBuf<ExperimentalWithCallbackMethod_GetStepSequence<ExperimentalWithCallbackMethod_CompleteGroup<ExperimentalWithCallbackMethod_CompleteInstance<Service > > > > > > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_GetStatus<ExperimentalWithCallbackMethod_CreateWorkerSession<ExperimentalWithCallbackMethod_DeleteWorkerSession<ExperimentalWithCallbackMethod_RegisterGraph<ExperimentalWithCallbackMethod_DeregisterGraph<ExperimentalWithCallbackMethod_RunGraph<ExperimentalWithCallbackMethod_CleanupGraph<ExperimentalWithCallbackMethod_CleanupAll<ExperimentalWithCallbackMethod_RecvTensor<ExperimentalWithCallbackMethod_Logging<ExperimentalWithCallbackMethod_Tracing<ExperimentalWithCallbackMethod_RecvBuf<ExperimentalWithCallbackMethod_GetStepSequence<ExperimentalWithCallbackMethod_CompleteGroup<ExperimentalWithCallbackMethod_CompleteInstance<Service > > > > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetStatus() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* /*context*/, const ::tensorflow::GetStatusRequest* /*request*/, ::tensorflow::GetStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateWorkerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateWorkerSession() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CreateWorkerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateWorkerSession(::grpc::ServerContext* /*context*/, const ::tensorflow::CreateWorkerSessionRequest* /*request*/, ::tensorflow::CreateWorkerSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteWorkerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteWorkerSession() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeleteWorkerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteWorkerSession(::grpc::ServerContext* /*context*/, const ::tensorflow::DeleteWorkerSessionRequest* /*request*/, ::tensorflow::DeleteWorkerSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegisterGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterGraph() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_RegisterGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterGraph(::grpc::ServerContext* /*context*/, const ::tensorflow::RegisterGraphRequest* /*request*/, ::tensorflow::RegisterGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeregisterGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeregisterGraph() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeregisterGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeregisterGraph(::grpc::ServerContext* /*context*/, const ::tensorflow::DeregisterGraphRequest* /*request*/, ::tensorflow::DeregisterGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RunGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RunGraph() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_RunGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunGraph(::grpc::ServerContext* /*context*/, const ::tensorflow::RunGraphRequest* /*request*/, ::tensorflow::RunGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CleanupGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CleanupGraph() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_CleanupGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CleanupGraph(::grpc::ServerContext* /*context*/, const ::tensorflow::CleanupGraphRequest* /*request*/, ::tensorflow::CleanupGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CleanupAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CleanupAll() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_CleanupAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CleanupAll(::grpc::ServerContext* /*context*/, const ::tensorflow::CleanupAllRequest* /*request*/, ::tensorflow::CleanupAllResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RecvTensor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RecvTensor() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_RecvTensor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecvTensor(::grpc::ServerContext* /*context*/, const ::tensorflow::RecvTensorRequest* /*request*/, ::tensorflow::RecvTensorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Logging : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Logging() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_Logging() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logging(::grpc::ServerContext* /*context*/, const ::tensorflow::LoggingRequest* /*request*/, ::tensorflow::LoggingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Tracing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Tracing() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_Tracing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tracing(::grpc::ServerContext* /*context*/, const ::tensorflow::TracingRequest* /*request*/, ::tensorflow::TracingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RecvBuf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RecvBuf() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_RecvBuf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecvBuf(::grpc::ServerContext* /*context*/, const ::tensorflow::RecvBufRequest* /*request*/, ::tensorflow::RecvBufResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetStepSequence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetStepSequence() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_GetStepSequence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStepSequence(::grpc::ServerContext* /*context*/, const ::tensorflow::GetStepSequenceRequest* /*request*/, ::tensorflow::GetStepSequenceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CompleteGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CompleteGroup() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_CompleteGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CompleteGroup(::grpc::ServerContext* /*context*/, const ::tensorflow::CompleteGroupRequest* /*request*/, ::tensorflow::CompleteGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CompleteInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CompleteInstance() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_CompleteInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CompleteInstance(::grpc::ServerContext* /*context*/, const ::tensorflow::CompleteInstanceRequest* /*request*/, ::tensorflow::CompleteInstanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetStatus() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* /*context*/, const ::tensorflow::GetStatusRequest* /*request*/, ::tensorflow::GetStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateWorkerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateWorkerSession() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CreateWorkerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateWorkerSession(::grpc::ServerContext* /*context*/, const ::tensorflow::CreateWorkerSessionRequest* /*request*/, ::tensorflow::CreateWorkerSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateWorkerSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteWorkerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteWorkerSession() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DeleteWorkerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteWorkerSession(::grpc::ServerContext* /*context*/, const ::tensorflow::DeleteWorkerSessionRequest* /*request*/, ::tensorflow::DeleteWorkerSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteWorkerSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterGraph() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_RegisterGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterGraph(::grpc::ServerContext* /*context*/, const ::tensorflow::RegisterGraphRequest* /*request*/, ::tensorflow::RegisterGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterGraph(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeregisterGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeregisterGraph() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DeregisterGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeregisterGraph(::grpc::ServerContext* /*context*/, const ::tensorflow::DeregisterGraphRequest* /*request*/, ::tensorflow::DeregisterGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeregisterGraph(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RunGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RunGraph() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_RunGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunGraph(::grpc::ServerContext* /*context*/, const ::tensorflow::RunGraphRequest* /*request*/, ::tensorflow::RunGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRunGraph(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CleanupGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CleanupGraph() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_CleanupGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CleanupGraph(::grpc::ServerContext* /*context*/, const ::tensorflow::CleanupGraphRequest* /*request*/, ::tensorflow::CleanupGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCleanupGraph(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CleanupAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CleanupAll() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_CleanupAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CleanupAll(::grpc::ServerContext* /*context*/, const ::tensorflow::CleanupAllRequest* /*request*/, ::tensorflow::CleanupAllResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCleanupAll(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RecvTensor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RecvTensor() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_RecvTensor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecvTensor(::grpc::ServerContext* /*context*/, const ::tensorflow::RecvTensorRequest* /*request*/, ::tensorflow::RecvTensorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecvTensor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Logging : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Logging() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_Logging() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logging(::grpc::ServerContext* /*context*/, const ::tensorflow::LoggingRequest* /*request*/, ::tensorflow::LoggingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogging(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Tracing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Tracing() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_Tracing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tracing(::grpc::ServerContext* /*context*/, const ::tensorflow::TracingRequest* /*request*/, ::tensorflow::TracingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTracing(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RecvBuf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RecvBuf() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_RecvBuf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecvBuf(::grpc::ServerContext* /*context*/, const ::tensorflow::RecvBufRequest* /*request*/, ::tensorflow::RecvBufResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecvBuf(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetStepSequence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetStepSequence() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_GetStepSequence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStepSequence(::grpc::ServerContext* /*context*/, const ::tensorflow::GetStepSequenceRequest* /*request*/, ::tensorflow::GetStepSequenceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStepSequence(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CompleteGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CompleteGroup() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_CompleteGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CompleteGroup(::grpc::ServerContext* /*context*/, const ::tensorflow::CompleteGroupRequest* /*request*/, ::tensorflow::CompleteGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCompleteGroup(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CompleteInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CompleteInstance() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_CompleteInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CompleteInstance(::grpc::ServerContext* /*context*/, const ::tensorflow::CompleteInstanceRequest* /*request*/, ::tensorflow::CompleteInstanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCompleteInstance(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetStatus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetStatus(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* /*context*/, const ::tensorflow::GetStatusRequest* /*request*/, ::tensorflow::GetStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetStatus(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateWorkerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateWorkerSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateWorkerSession(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateWorkerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateWorkerSession(::grpc::ServerContext* /*context*/, const ::tensorflow::CreateWorkerSessionRequest* /*request*/, ::tensorflow::CreateWorkerSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateWorkerSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateWorkerSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteWorkerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteWorkerSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteWorkerSession(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteWorkerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteWorkerSession(::grpc::ServerContext* /*context*/, const ::tensorflow::DeleteWorkerSessionRequest* /*request*/, ::tensorflow::DeleteWorkerSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteWorkerSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteWorkerSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RegisterGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RegisterGraph() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterGraph(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RegisterGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterGraph(::grpc::ServerContext* /*context*/, const ::tensorflow::RegisterGraphRequest* /*request*/, ::tensorflow::RegisterGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RegisterGraph(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RegisterGraph(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeregisterGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeregisterGraph() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeregisterGraph(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeregisterGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeregisterGraph(::grpc::ServerContext* /*context*/, const ::tensorflow::DeregisterGraphRequest* /*request*/, ::tensorflow::DeregisterGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeregisterGraph(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeregisterGraph(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RunGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RunGraph() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RunGraph(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RunGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunGraph(::grpc::ServerContext* /*context*/, const ::tensorflow::RunGraphRequest* /*request*/, ::tensorflow::RunGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RunGraph(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RunGraph(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CleanupGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CleanupGraph() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CleanupGraph(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CleanupGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CleanupGraph(::grpc::ServerContext* /*context*/, const ::tensorflow::CleanupGraphRequest* /*request*/, ::tensorflow::CleanupGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CleanupGraph(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CleanupGraph(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CleanupAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CleanupAll() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CleanupAll(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CleanupAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CleanupAll(::grpc::ServerContext* /*context*/, const ::tensorflow::CleanupAllRequest* /*request*/, ::tensorflow::CleanupAllResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CleanupAll(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CleanupAll(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RecvTensor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RecvTensor() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RecvTensor(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RecvTensor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecvTensor(::grpc::ServerContext* /*context*/, const ::tensorflow::RecvTensorRequest* /*request*/, ::tensorflow::RecvTensorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RecvTensor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RecvTensor(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Logging : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Logging() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Logging(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Logging() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logging(::grpc::ServerContext* /*context*/, const ::tensorflow::LoggingRequest* /*request*/, ::tensorflow::LoggingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Logging(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Logging(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Tracing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Tracing() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(10,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Tracing(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Tracing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tracing(::grpc::ServerContext* /*context*/, const ::tensorflow::TracingRequest* /*request*/, ::tensorflow::TracingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Tracing(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Tracing(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RecvBuf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RecvBuf() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(11,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RecvBuf(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RecvBuf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecvBuf(::grpc::ServerContext* /*context*/, const ::tensorflow::RecvBufRequest* /*request*/, ::tensorflow::RecvBufResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RecvBuf(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RecvBuf(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetStepSequence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetStepSequence() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(12,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetStepSequence(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetStepSequence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStepSequence(::grpc::ServerContext* /*context*/, const ::tensorflow::GetStepSequenceRequest* /*request*/, ::tensorflow::GetStepSequenceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetStepSequence(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetStepSequence(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CompleteGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CompleteGroup() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(13,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CompleteGroup(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CompleteGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CompleteGroup(::grpc::ServerContext* /*context*/, const ::tensorflow::CompleteGroupRequest* /*request*/, ::tensorflow::CompleteGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CompleteGroup(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CompleteGroup(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CompleteInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CompleteInstance() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(14,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CompleteInstance(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CompleteInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CompleteInstance(::grpc::ServerContext* /*context*/, const ::tensorflow::CompleteInstanceRequest* /*request*/, ::tensorflow::CompleteInstanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CompleteInstance(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CompleteInstance(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetStatus() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tensorflow::GetStatusRequest, ::tensorflow::GetStatusResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::tensorflow::GetStatusRequest, ::tensorflow::GetStatusResponse>* streamer) {
                       return this->StreamedGetStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* /*context*/, const ::tensorflow::GetStatusRequest* /*request*/, ::tensorflow::GetStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tensorflow::GetStatusRequest,::tensorflow::GetStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateWorkerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateWorkerSession() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tensorflow::CreateWorkerSessionRequest, ::tensorflow::CreateWorkerSessionResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::tensorflow::CreateWorkerSessionRequest, ::tensorflow::CreateWorkerSessionResponse>* streamer) {
                       return this->StreamedCreateWorkerSession(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateWorkerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateWorkerSession(::grpc::ServerContext* /*context*/, const ::tensorflow::CreateWorkerSessionRequest* /*request*/, ::tensorflow::CreateWorkerSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateWorkerSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tensorflow::CreateWorkerSessionRequest,::tensorflow::CreateWorkerSessionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteWorkerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteWorkerSession() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tensorflow::DeleteWorkerSessionRequest, ::tensorflow::DeleteWorkerSessionResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::tensorflow::DeleteWorkerSessionRequest, ::tensorflow::DeleteWorkerSessionResponse>* streamer) {
                       return this->StreamedDeleteWorkerSession(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteWorkerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteWorkerSession(::grpc::ServerContext* /*context*/, const ::tensorflow::DeleteWorkerSessionRequest* /*request*/, ::tensorflow::DeleteWorkerSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteWorkerSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tensorflow::DeleteWorkerSessionRequest,::tensorflow::DeleteWorkerSessionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterGraph() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tensorflow::RegisterGraphRequest, ::tensorflow::RegisterGraphResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::tensorflow::RegisterGraphRequest, ::tensorflow::RegisterGraphResponse>* streamer) {
                       return this->StreamedRegisterGraph(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterGraph(::grpc::ServerContext* /*context*/, const ::tensorflow::RegisterGraphRequest* /*request*/, ::tensorflow::RegisterGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterGraph(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tensorflow::RegisterGraphRequest,::tensorflow::RegisterGraphResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeregisterGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeregisterGraph() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tensorflow::DeregisterGraphRequest, ::tensorflow::DeregisterGraphResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::tensorflow::DeregisterGraphRequest, ::tensorflow::DeregisterGraphResponse>* streamer) {
                       return this->StreamedDeregisterGraph(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeregisterGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeregisterGraph(::grpc::ServerContext* /*context*/, const ::tensorflow::DeregisterGraphRequest* /*request*/, ::tensorflow::DeregisterGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeregisterGraph(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tensorflow::DeregisterGraphRequest,::tensorflow::DeregisterGraphResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RunGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RunGraph() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tensorflow::RunGraphRequest, ::tensorflow::RunGraphResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::tensorflow::RunGraphRequest, ::tensorflow::RunGraphResponse>* streamer) {
                       return this->StreamedRunGraph(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RunGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RunGraph(::grpc::ServerContext* /*context*/, const ::tensorflow::RunGraphRequest* /*request*/, ::tensorflow::RunGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRunGraph(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tensorflow::RunGraphRequest,::tensorflow::RunGraphResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CleanupGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CleanupGraph() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tensorflow::CleanupGraphRequest, ::tensorflow::CleanupGraphResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::tensorflow::CleanupGraphRequest, ::tensorflow::CleanupGraphResponse>* streamer) {
                       return this->StreamedCleanupGraph(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CleanupGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CleanupGraph(::grpc::ServerContext* /*context*/, const ::tensorflow::CleanupGraphRequest* /*request*/, ::tensorflow::CleanupGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCleanupGraph(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tensorflow::CleanupGraphRequest,::tensorflow::CleanupGraphResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CleanupAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CleanupAll() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tensorflow::CleanupAllRequest, ::tensorflow::CleanupAllResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::tensorflow::CleanupAllRequest, ::tensorflow::CleanupAllResponse>* streamer) {
                       return this->StreamedCleanupAll(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CleanupAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CleanupAll(::grpc::ServerContext* /*context*/, const ::tensorflow::CleanupAllRequest* /*request*/, ::tensorflow::CleanupAllResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCleanupAll(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tensorflow::CleanupAllRequest,::tensorflow::CleanupAllResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RecvTensor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RecvTensor() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tensorflow::RecvTensorRequest, ::tensorflow::RecvTensorResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::tensorflow::RecvTensorRequest, ::tensorflow::RecvTensorResponse>* streamer) {
                       return this->StreamedRecvTensor(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RecvTensor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RecvTensor(::grpc::ServerContext* /*context*/, const ::tensorflow::RecvTensorRequest* /*request*/, ::tensorflow::RecvTensorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRecvTensor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tensorflow::RecvTensorRequest,::tensorflow::RecvTensorResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Logging : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Logging() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tensorflow::LoggingRequest, ::tensorflow::LoggingResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::tensorflow::LoggingRequest, ::tensorflow::LoggingResponse>* streamer) {
                       return this->StreamedLogging(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Logging() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Logging(::grpc::ServerContext* /*context*/, const ::tensorflow::LoggingRequest* /*request*/, ::tensorflow::LoggingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogging(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tensorflow::LoggingRequest,::tensorflow::LoggingResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Tracing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Tracing() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tensorflow::TracingRequest, ::tensorflow::TracingResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::tensorflow::TracingRequest, ::tensorflow::TracingResponse>* streamer) {
                       return this->StreamedTracing(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Tracing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Tracing(::grpc::ServerContext* /*context*/, const ::tensorflow::TracingRequest* /*request*/, ::tensorflow::TracingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTracing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tensorflow::TracingRequest,::tensorflow::TracingResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RecvBuf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RecvBuf() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tensorflow::RecvBufRequest, ::tensorflow::RecvBufResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::tensorflow::RecvBufRequest, ::tensorflow::RecvBufResponse>* streamer) {
                       return this->StreamedRecvBuf(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RecvBuf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RecvBuf(::grpc::ServerContext* /*context*/, const ::tensorflow::RecvBufRequest* /*request*/, ::tensorflow::RecvBufResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRecvBuf(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tensorflow::RecvBufRequest,::tensorflow::RecvBufResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetStepSequence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetStepSequence() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tensorflow::GetStepSequenceRequest, ::tensorflow::GetStepSequenceResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::tensorflow::GetStepSequenceRequest, ::tensorflow::GetStepSequenceResponse>* streamer) {
                       return this->StreamedGetStepSequence(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetStepSequence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetStepSequence(::grpc::ServerContext* /*context*/, const ::tensorflow::GetStepSequenceRequest* /*request*/, ::tensorflow::GetStepSequenceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetStepSequence(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tensorflow::GetStepSequenceRequest,::tensorflow::GetStepSequenceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CompleteGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CompleteGroup() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tensorflow::CompleteGroupRequest, ::tensorflow::CompleteGroupResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::tensorflow::CompleteGroupRequest, ::tensorflow::CompleteGroupResponse>* streamer) {
                       return this->StreamedCompleteGroup(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CompleteGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CompleteGroup(::grpc::ServerContext* /*context*/, const ::tensorflow::CompleteGroupRequest* /*request*/, ::tensorflow::CompleteGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCompleteGroup(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tensorflow::CompleteGroupRequest,::tensorflow::CompleteGroupResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CompleteInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CompleteInstance() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tensorflow::CompleteInstanceRequest, ::tensorflow::CompleteInstanceResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::tensorflow::CompleteInstanceRequest, ::tensorflow::CompleteInstanceResponse>* streamer) {
                       return this->StreamedCompleteInstance(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CompleteInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CompleteInstance(::grpc::ServerContext* /*context*/, const ::tensorflow::CompleteInstanceRequest* /*request*/, ::tensorflow::CompleteInstanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCompleteInstance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tensorflow::CompleteInstanceRequest,::tensorflow::CompleteInstanceResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetStatus<WithStreamedUnaryMethod_CreateWorkerSession<WithStreamedUnaryMethod_DeleteWorkerSession<WithStreamedUnaryMethod_RegisterGraph<WithStreamedUnaryMethod_DeregisterGraph<WithStreamedUnaryMethod_RunGraph<WithStreamedUnaryMethod_CleanupGraph<WithStreamedUnaryMethod_CleanupAll<WithStreamedUnaryMethod_RecvTensor<WithStreamedUnaryMethod_Logging<WithStreamedUnaryMethod_Tracing<WithStreamedUnaryMethod_RecvBuf<WithStreamedUnaryMethod_GetStepSequence<WithStreamedUnaryMethod_CompleteGroup<WithStreamedUnaryMethod_CompleteInstance<Service > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetStatus<WithStreamedUnaryMethod_CreateWorkerSession<WithStreamedUnaryMethod_DeleteWorkerSession<WithStreamedUnaryMethod_RegisterGraph<WithStreamedUnaryMethod_DeregisterGraph<WithStreamedUnaryMethod_RunGraph<WithStreamedUnaryMethod_CleanupGraph<WithStreamedUnaryMethod_CleanupAll<WithStreamedUnaryMethod_RecvTensor<WithStreamedUnaryMethod_Logging<WithStreamedUnaryMethod_Tracing<WithStreamedUnaryMethod_RecvBuf<WithStreamedUnaryMethod_GetStepSequence<WithStreamedUnaryMethod_CompleteGroup<WithStreamedUnaryMethod_CompleteInstance<Service > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace grpc
}  // namespace tensorflow


#endif  // GRPC_tensorflow_2fcore_2fprotobuf_2fworker_5fservice_2eproto__INCLUDED
