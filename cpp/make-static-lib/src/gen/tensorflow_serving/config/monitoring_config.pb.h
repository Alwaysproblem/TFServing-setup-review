// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/config/monitoring_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto;
namespace tensorflow {
namespace serving {
class MonitoringConfig;
class MonitoringConfigDefaultTypeInternal;
extern MonitoringConfigDefaultTypeInternal _MonitoringConfig_default_instance_;
class PrometheusConfig;
class PrometheusConfigDefaultTypeInternal;
extern PrometheusConfigDefaultTypeInternal _PrometheusConfig_default_instance_;
}  // namespace serving
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::serving::MonitoringConfig* Arena::CreateMaybeMessage<::tensorflow::serving::MonitoringConfig>(Arena*);
template<> ::tensorflow::serving::PrometheusConfig* Arena::CreateMaybeMessage<::tensorflow::serving::PrometheusConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {
namespace serving {

// ===================================================================

class PrometheusConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.PrometheusConfig) */ {
 public:
  inline PrometheusConfig() : PrometheusConfig(nullptr) {};
  virtual ~PrometheusConfig();

  PrometheusConfig(const PrometheusConfig& from);
  PrometheusConfig(PrometheusConfig&& from) noexcept
    : PrometheusConfig() {
    *this = ::std::move(from);
  }

  inline PrometheusConfig& operator=(const PrometheusConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrometheusConfig& operator=(PrometheusConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrometheusConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrometheusConfig* internal_default_instance() {
    return reinterpret_cast<const PrometheusConfig*>(
               &_PrometheusConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PrometheusConfig& a, PrometheusConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PrometheusConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrometheusConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrometheusConfig* New() const final {
    return CreateMaybeMessage<PrometheusConfig>(nullptr);
  }

  PrometheusConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrometheusConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrometheusConfig& from);
  void MergeFrom(const PrometheusConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrometheusConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.PrometheusConfig";
  }
  protected:
  explicit PrometheusConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto);
    return ::descriptor_table_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 2,
    kEnableFieldNumber = 1,
  };
  // string path = 2;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_path(
      std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // bool enable = 1;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.serving.PrometheusConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  bool enable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class MonitoringConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.MonitoringConfig) */ {
 public:
  inline MonitoringConfig() : MonitoringConfig(nullptr) {};
  virtual ~MonitoringConfig();

  MonitoringConfig(const MonitoringConfig& from);
  MonitoringConfig(MonitoringConfig&& from) noexcept
    : MonitoringConfig() {
    *this = ::std::move(from);
  }

  inline MonitoringConfig& operator=(const MonitoringConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonitoringConfig& operator=(MonitoringConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MonitoringConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MonitoringConfig* internal_default_instance() {
    return reinterpret_cast<const MonitoringConfig*>(
               &_MonitoringConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MonitoringConfig& a, MonitoringConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(MonitoringConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonitoringConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MonitoringConfig* New() const final {
    return CreateMaybeMessage<MonitoringConfig>(nullptr);
  }

  MonitoringConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MonitoringConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MonitoringConfig& from);
  void MergeFrom(const MonitoringConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitoringConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.MonitoringConfig";
  }
  protected:
  explicit MonitoringConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto);
    return ::descriptor_table_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrometheusConfigFieldNumber = 1,
  };
  // .tensorflow.serving.PrometheusConfig prometheus_config = 1;
  bool has_prometheus_config() const;
  private:
  bool _internal_has_prometheus_config() const;
  public:
  void clear_prometheus_config();
  const ::tensorflow::serving::PrometheusConfig& prometheus_config() const;
  ::tensorflow::serving::PrometheusConfig* release_prometheus_config();
  ::tensorflow::serving::PrometheusConfig* mutable_prometheus_config();
  void set_allocated_prometheus_config(::tensorflow::serving::PrometheusConfig* prometheus_config);
  private:
  const ::tensorflow::serving::PrometheusConfig& _internal_prometheus_config() const;
  ::tensorflow::serving::PrometheusConfig* _internal_mutable_prometheus_config();
  public:
  void unsafe_arena_set_allocated_prometheus_config(
      ::tensorflow::serving::PrometheusConfig* prometheus_config);
  ::tensorflow::serving::PrometheusConfig* unsafe_arena_release_prometheus_config();

  // @@protoc_insertion_point(class_scope:tensorflow.serving.MonitoringConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tensorflow::serving::PrometheusConfig* prometheus_config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PrometheusConfig

// bool enable = 1;
inline void PrometheusConfig::clear_enable() {
  enable_ = false;
}
inline bool PrometheusConfig::_internal_enable() const {
  return enable_;
}
inline bool PrometheusConfig::enable() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.PrometheusConfig.enable)
  return _internal_enable();
}
inline void PrometheusConfig::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void PrometheusConfig::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.PrometheusConfig.enable)
}

// string path = 2;
inline void PrometheusConfig::clear_path() {
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PrometheusConfig::path() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.PrometheusConfig.path)
  return _internal_path();
}
inline void PrometheusConfig::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.PrometheusConfig.path)
}
inline std::string* PrometheusConfig::mutable_path() {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.PrometheusConfig.path)
  return _internal_mutable_path();
}
inline const std::string& PrometheusConfig::_internal_path() const {
  return path_.Get();
}
inline void PrometheusConfig::_internal_set_path(const std::string& value) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PrometheusConfig::set_path(std::string&& value) {
  
  path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.serving.PrometheusConfig.path)
}
inline void PrometheusConfig::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.PrometheusConfig.path)
}
inline void PrometheusConfig::set_path(const char* value,
    size_t size) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.PrometheusConfig.path)
}
inline std::string* PrometheusConfig::_internal_mutable_path() {
  
  return path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PrometheusConfig::release_path() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.PrometheusConfig.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrometheusConfig::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.PrometheusConfig.path)
}
inline std::string* PrometheusConfig::unsafe_arena_release_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.PrometheusConfig.path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PrometheusConfig::unsafe_arena_set_allocated_path(
    std::string* path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (path != nullptr) {
    
  } else {
    
  }
  path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.PrometheusConfig.path)
}

// -------------------------------------------------------------------

// MonitoringConfig

// .tensorflow.serving.PrometheusConfig prometheus_config = 1;
inline bool MonitoringConfig::_internal_has_prometheus_config() const {
  return this != internal_default_instance() && prometheus_config_ != nullptr;
}
inline bool MonitoringConfig::has_prometheus_config() const {
  return _internal_has_prometheus_config();
}
inline void MonitoringConfig::clear_prometheus_config() {
  if (GetArena() == nullptr && prometheus_config_ != nullptr) {
    delete prometheus_config_;
  }
  prometheus_config_ = nullptr;
}
inline const ::tensorflow::serving::PrometheusConfig& MonitoringConfig::_internal_prometheus_config() const {
  const ::tensorflow::serving::PrometheusConfig* p = prometheus_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tensorflow::serving::PrometheusConfig*>(
      &::tensorflow::serving::_PrometheusConfig_default_instance_);
}
inline const ::tensorflow::serving::PrometheusConfig& MonitoringConfig::prometheus_config() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.MonitoringConfig.prometheus_config)
  return _internal_prometheus_config();
}
inline void MonitoringConfig::unsafe_arena_set_allocated_prometheus_config(
    ::tensorflow::serving::PrometheusConfig* prometheus_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prometheus_config_);
  }
  prometheus_config_ = prometheus_config;
  if (prometheus_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.MonitoringConfig.prometheus_config)
}
inline ::tensorflow::serving::PrometheusConfig* MonitoringConfig::release_prometheus_config() {
  auto temp = unsafe_arena_release_prometheus_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tensorflow::serving::PrometheusConfig* MonitoringConfig::unsafe_arena_release_prometheus_config() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.MonitoringConfig.prometheus_config)
  
  ::tensorflow::serving::PrometheusConfig* temp = prometheus_config_;
  prometheus_config_ = nullptr;
  return temp;
}
inline ::tensorflow::serving::PrometheusConfig* MonitoringConfig::_internal_mutable_prometheus_config() {
  
  if (prometheus_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::serving::PrometheusConfig>(GetArena());
    prometheus_config_ = p;
  }
  return prometheus_config_;
}
inline ::tensorflow::serving::PrometheusConfig* MonitoringConfig::mutable_prometheus_config() {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.MonitoringConfig.prometheus_config)
  return _internal_mutable_prometheus_config();
}
inline void MonitoringConfig::set_allocated_prometheus_config(::tensorflow::serving::PrometheusConfig* prometheus_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete prometheus_config_;
  }
  if (prometheus_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(prometheus_config);
    if (message_arena != submessage_arena) {
      prometheus_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prometheus_config, submessage_arena);
    }
    
  } else {
    
  }
  prometheus_config_ = prometheus_config;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.MonitoringConfig.prometheus_config)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serving
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto
