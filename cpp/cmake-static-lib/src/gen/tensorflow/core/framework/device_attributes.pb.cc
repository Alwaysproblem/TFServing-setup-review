// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/device_attributes.proto

#include "tensorflow/core/framework/device_attributes.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeviceLocality_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InterconnectLink_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LocalLinks_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto;
namespace tensorflow {
class InterconnectLinkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InterconnectLink> _instance;
} _InterconnectLink_default_instance_;
class LocalLinksDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocalLinks> _instance;
} _LocalLinks_default_instance_;
class DeviceLocalityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceLocality> _instance;
} _DeviceLocality_default_instance_;
class DeviceAttributesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceAttributes> _instance;
} _DeviceAttributes_default_instance_;
}  // namespace tensorflow
static void InitDefaultsscc_info_DeviceAttributes_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_DeviceAttributes_default_instance_;
    new (ptr) ::tensorflow::DeviceAttributes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::DeviceAttributes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeviceAttributes_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeviceAttributes_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto}, {
      &scc_info_DeviceLocality_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto.base,}};

static void InitDefaultsscc_info_DeviceLocality_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_DeviceLocality_default_instance_;
    new (ptr) ::tensorflow::DeviceLocality();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::DeviceLocality::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeviceLocality_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeviceLocality_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto}, {
      &scc_info_LocalLinks_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto.base,}};

static void InitDefaultsscc_info_InterconnectLink_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_InterconnectLink_default_instance_;
    new (ptr) ::tensorflow::InterconnectLink();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::InterconnectLink::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InterconnectLink_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InterconnectLink_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto}, {}};

static void InitDefaultsscc_info_LocalLinks_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_LocalLinks_default_instance_;
    new (ptr) ::tensorflow::LocalLinks();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::LocalLinks::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LocalLinks_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LocalLinks_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto}, {
      &scc_info_InterconnectLink_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::InterconnectLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::InterconnectLink, device_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::InterconnectLink, type_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::InterconnectLink, strength_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::LocalLinks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::LocalLinks, link_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceLocality, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceLocality, bus_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceLocality, numa_node_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceLocality, links_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceAttributes, name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceAttributes, device_type_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceAttributes, memory_limit_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceAttributes, locality_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceAttributes, incarnation_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceAttributes, physical_device_desc_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::InterconnectLink)},
  { 8, -1, sizeof(::tensorflow::LocalLinks)},
  { 14, -1, sizeof(::tensorflow::DeviceLocality)},
  { 22, -1, sizeof(::tensorflow::DeviceAttributes)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_InterconnectLink_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_LocalLinks_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_DeviceLocality_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_DeviceAttributes_default_instance_),
};

const char descriptor_table_protodef_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n1tensorflow/core/framework/device_attri"
  "butes.proto\022\ntensorflow\"E\n\020InterconnectL"
  "ink\022\021\n\tdevice_id\030\001 \001(\005\022\014\n\004type\030\002 \001(\t\022\020\n\010"
  "strength\030\003 \001(\005\"8\n\nLocalLinks\022*\n\004link\030\001 \003"
  "(\0132\034.tensorflow.InterconnectLink\"Z\n\016Devi"
  "ceLocality\022\016\n\006bus_id\030\001 \001(\005\022\021\n\tnuma_node\030"
  "\002 \001(\005\022%\n\005links\030\003 \001(\0132\026.tensorflow.LocalL"
  "inks\"\254\001\n\020DeviceAttributes\022\014\n\004name\030\001 \001(\t\022"
  "\023\n\013device_type\030\002 \001(\t\022\024\n\014memory_limit\030\004 \001"
  "(\003\022,\n\010locality\030\005 \001(\0132\032.tensorflow.Device"
  "Locality\022\023\n\013incarnation\030\006 \001(\006\022\034\n\024physica"
  "l_device_desc\030\007 \001(\tB\221\001\n\030org.tensorflow.f"
  "rameworkB\026DeviceAttributesProtosP\001ZXgith"
  "ub.com/tensorflow/tensorflow/tensorflow/"
  "go/core/framework/device_attributes_go_p"
  "roto\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto_sccs[4] = {
  &scc_info_DeviceAttributes_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto.base,
  &scc_info_DeviceLocality_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto.base,
  &scc_info_InterconnectLink_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto.base,
  &scc_info_LocalLinks_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto = {
  false, false, descriptor_table_protodef_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto, "tensorflow/core/framework/device_attributes.proto", 615,
  &descriptor_table_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto_once, descriptor_table_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto_sccs, descriptor_table_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto::offsets,
  file_level_metadata_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto, 4, file_level_enum_descriptors_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto, file_level_service_descriptors_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto)), true);
namespace tensorflow {

// ===================================================================

void InterconnectLink::InitAsDefaultInstance() {
}
class InterconnectLink::_Internal {
 public:
};

InterconnectLink::InterconnectLink(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.InterconnectLink)
}
InterconnectLink::InterconnectLink(const InterconnectLink& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  ::memcpy(&device_id_, &from.device_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&strength_) -
    reinterpret_cast<char*>(&device_id_)) + sizeof(strength_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.InterconnectLink)
}

void InterconnectLink::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InterconnectLink_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&device_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&strength_) -
      reinterpret_cast<char*>(&device_id_)) + sizeof(strength_));
}

InterconnectLink::~InterconnectLink() {
  // @@protoc_insertion_point(destructor:tensorflow.InterconnectLink)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InterconnectLink::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InterconnectLink::ArenaDtor(void* object) {
  InterconnectLink* _this = reinterpret_cast< InterconnectLink* >(object);
  (void)_this;
}
void InterconnectLink::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InterconnectLink::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InterconnectLink& InterconnectLink::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InterconnectLink_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto.base);
  return *internal_default_instance();
}


void InterconnectLink::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.InterconnectLink)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&device_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&strength_) -
      reinterpret_cast<char*>(&device_id_)) + sizeof(strength_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InterconnectLink::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.InterconnectLink.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 strength = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          strength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InterconnectLink::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.InterconnectLink)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 device_id = 1;
  if (this->device_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_device_id(), target);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.InterconnectLink.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // int32 strength = 3;
  if (this->strength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_strength(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.InterconnectLink)
  return target;
}

size_t InterconnectLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.InterconnectLink)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // int32 device_id = 1;
  if (this->device_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_device_id());
  }

  // int32 strength = 3;
  if (this->strength() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_strength());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InterconnectLink::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.InterconnectLink)
  GOOGLE_DCHECK_NE(&from, this);
  const InterconnectLink* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InterconnectLink>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.InterconnectLink)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.InterconnectLink)
    MergeFrom(*source);
  }
}

void InterconnectLink::MergeFrom(const InterconnectLink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.InterconnectLink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.device_id() != 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.strength() != 0) {
    _internal_set_strength(from._internal_strength());
  }
}

void InterconnectLink::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.InterconnectLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InterconnectLink::CopyFrom(const InterconnectLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.InterconnectLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterconnectLink::IsInitialized() const {
  return true;
}

void InterconnectLink::InternalSwap(InterconnectLink* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InterconnectLink, strength_)
      + sizeof(InterconnectLink::strength_)
      - PROTOBUF_FIELD_OFFSET(InterconnectLink, device_id_)>(
          reinterpret_cast<char*>(&device_id_),
          reinterpret_cast<char*>(&other->device_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InterconnectLink::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LocalLinks::InitAsDefaultInstance() {
}
class LocalLinks::_Internal {
 public:
};

LocalLinks::LocalLinks(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  link_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.LocalLinks)
}
LocalLinks::LocalLinks(const LocalLinks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      link_(from.link_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.LocalLinks)
}

void LocalLinks::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LocalLinks_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto.base);
}

LocalLinks::~LocalLinks() {
  // @@protoc_insertion_point(destructor:tensorflow.LocalLinks)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LocalLinks::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LocalLinks::ArenaDtor(void* object) {
  LocalLinks* _this = reinterpret_cast< LocalLinks* >(object);
  (void)_this;
}
void LocalLinks::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocalLinks::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocalLinks& LocalLinks::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocalLinks_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto.base);
  return *internal_default_instance();
}


void LocalLinks::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.LocalLinks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  link_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalLinks::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tensorflow.InterconnectLink link = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_link(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocalLinks::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.LocalLinks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.InterconnectLink link = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_link_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_link(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.LocalLinks)
  return target;
}

size_t LocalLinks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.LocalLinks)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.InterconnectLink link = 1;
  total_size += 1UL * this->_internal_link_size();
  for (const auto& msg : this->link_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalLinks::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.LocalLinks)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalLinks* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocalLinks>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.LocalLinks)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.LocalLinks)
    MergeFrom(*source);
  }
}

void LocalLinks::MergeFrom(const LocalLinks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.LocalLinks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  link_.MergeFrom(from.link_);
}

void LocalLinks::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.LocalLinks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalLinks::CopyFrom(const LocalLinks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.LocalLinks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalLinks::IsInitialized() const {
  return true;
}

void LocalLinks::InternalSwap(LocalLinks* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  link_.InternalSwap(&other->link_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalLinks::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeviceLocality::InitAsDefaultInstance() {
  ::tensorflow::_DeviceLocality_default_instance_._instance.get_mutable()->links_ = const_cast< ::tensorflow::LocalLinks*>(
      ::tensorflow::LocalLinks::internal_default_instance());
}
class DeviceLocality::_Internal {
 public:
  static const ::tensorflow::LocalLinks& links(const DeviceLocality* msg);
};

const ::tensorflow::LocalLinks&
DeviceLocality::_Internal::links(const DeviceLocality* msg) {
  return *msg->links_;
}
DeviceLocality::DeviceLocality(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DeviceLocality)
}
DeviceLocality::DeviceLocality(const DeviceLocality& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_links()) {
    links_ = new ::tensorflow::LocalLinks(*from.links_);
  } else {
    links_ = nullptr;
  }
  ::memcpy(&bus_id_, &from.bus_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&numa_node_) -
    reinterpret_cast<char*>(&bus_id_)) + sizeof(numa_node_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.DeviceLocality)
}

void DeviceLocality::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceLocality_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto.base);
  ::memset(&links_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numa_node_) -
      reinterpret_cast<char*>(&links_)) + sizeof(numa_node_));
}

DeviceLocality::~DeviceLocality() {
  // @@protoc_insertion_point(destructor:tensorflow.DeviceLocality)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceLocality::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete links_;
}

void DeviceLocality::ArenaDtor(void* object) {
  DeviceLocality* _this = reinterpret_cast< DeviceLocality* >(object);
  (void)_this;
}
void DeviceLocality::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceLocality::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceLocality& DeviceLocality::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceLocality_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto.base);
  return *internal_default_instance();
}


void DeviceLocality::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DeviceLocality)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && links_ != nullptr) {
    delete links_;
  }
  links_ = nullptr;
  ::memset(&bus_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numa_node_) -
      reinterpret_cast<char*>(&bus_id_)) + sizeof(numa_node_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceLocality::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 bus_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bus_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 numa_node = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          numa_node_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.LocalLinks links = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_links(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceLocality::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DeviceLocality)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bus_id = 1;
  if (this->bus_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_bus_id(), target);
  }

  // int32 numa_node = 2;
  if (this->numa_node() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_numa_node(), target);
  }

  // .tensorflow.LocalLinks links = 3;
  if (this->has_links()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::links(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DeviceLocality)
  return target;
}

size_t DeviceLocality::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DeviceLocality)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.LocalLinks links = 3;
  if (this->has_links()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *links_);
  }

  // int32 bus_id = 1;
  if (this->bus_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bus_id());
  }

  // int32 numa_node = 2;
  if (this->numa_node() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_numa_node());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceLocality::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.DeviceLocality)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceLocality* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceLocality>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.DeviceLocality)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.DeviceLocality)
    MergeFrom(*source);
  }
}

void DeviceLocality::MergeFrom(const DeviceLocality& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DeviceLocality)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_links()) {
    _internal_mutable_links()->::tensorflow::LocalLinks::MergeFrom(from._internal_links());
  }
  if (from.bus_id() != 0) {
    _internal_set_bus_id(from._internal_bus_id());
  }
  if (from.numa_node() != 0) {
    _internal_set_numa_node(from._internal_numa_node());
  }
}

void DeviceLocality::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.DeviceLocality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceLocality::CopyFrom(const DeviceLocality& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DeviceLocality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceLocality::IsInitialized() const {
  return true;
}

void DeviceLocality::InternalSwap(DeviceLocality* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceLocality, numa_node_)
      + sizeof(DeviceLocality::numa_node_)
      - PROTOBUF_FIELD_OFFSET(DeviceLocality, links_)>(
          reinterpret_cast<char*>(&links_),
          reinterpret_cast<char*>(&other->links_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceLocality::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeviceAttributes::InitAsDefaultInstance() {
  ::tensorflow::_DeviceAttributes_default_instance_._instance.get_mutable()->locality_ = const_cast< ::tensorflow::DeviceLocality*>(
      ::tensorflow::DeviceLocality::internal_default_instance());
}
class DeviceAttributes::_Internal {
 public:
  static const ::tensorflow::DeviceLocality& locality(const DeviceAttributes* msg);
};

const ::tensorflow::DeviceLocality&
DeviceAttributes::_Internal::locality(const DeviceAttributes* msg) {
  return *msg->locality_;
}
DeviceAttributes::DeviceAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DeviceAttributes)
}
DeviceAttributes::DeviceAttributes(const DeviceAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  device_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_type().empty()) {
    device_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_type(),
      GetArena());
  }
  physical_device_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_physical_device_desc().empty()) {
    physical_device_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_physical_device_desc(),
      GetArena());
  }
  if (from._internal_has_locality()) {
    locality_ = new ::tensorflow::DeviceLocality(*from.locality_);
  } else {
    locality_ = nullptr;
  }
  ::memcpy(&memory_limit_, &from.memory_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&incarnation_) -
    reinterpret_cast<char*>(&memory_limit_)) + sizeof(incarnation_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.DeviceAttributes)
}

void DeviceAttributes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceAttributes_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  physical_device_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&locality_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&incarnation_) -
      reinterpret_cast<char*>(&locality_)) + sizeof(incarnation_));
}

DeviceAttributes::~DeviceAttributes() {
  // @@protoc_insertion_point(destructor:tensorflow.DeviceAttributes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  physical_device_desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete locality_;
}

void DeviceAttributes::ArenaDtor(void* object) {
  DeviceAttributes* _this = reinterpret_cast< DeviceAttributes* >(object);
  (void)_this;
}
void DeviceAttributes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceAttributes& DeviceAttributes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceAttributes_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto.base);
  return *internal_default_instance();
}


void DeviceAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DeviceAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  physical_device_desc_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && locality_ != nullptr) {
    delete locality_;
  }
  locality_ = nullptr;
  ::memset(&memory_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&incarnation_) -
      reinterpret_cast<char*>(&memory_limit_)) + sizeof(incarnation_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceAttributes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.DeviceAttributes.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_device_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.DeviceAttributes.device_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 memory_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          memory_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.DeviceLocality locality = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_locality(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // fixed64 incarnation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          incarnation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // string physical_device_desc = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_physical_device_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.DeviceAttributes.physical_device_desc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceAttributes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DeviceAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeviceAttributes.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string device_type = 2;
  if (this->device_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_type().data(), static_cast<int>(this->_internal_device_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeviceAttributes.device_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_device_type(), target);
  }

  // int64 memory_limit = 4;
  if (this->memory_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_memory_limit(), target);
  }

  // .tensorflow.DeviceLocality locality = 5;
  if (this->has_locality()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::locality(this), target, stream);
  }

  // fixed64 incarnation = 6;
  if (this->incarnation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(6, this->_internal_incarnation(), target);
  }

  // string physical_device_desc = 7;
  if (this->physical_device_desc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_physical_device_desc().data(), static_cast<int>(this->_internal_physical_device_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeviceAttributes.physical_device_desc");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_physical_device_desc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DeviceAttributes)
  return target;
}

size_t DeviceAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DeviceAttributes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string device_type = 2;
  if (this->device_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_type());
  }

  // string physical_device_desc = 7;
  if (this->physical_device_desc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_physical_device_desc());
  }

  // .tensorflow.DeviceLocality locality = 5;
  if (this->has_locality()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *locality_);
  }

  // int64 memory_limit = 4;
  if (this->memory_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_memory_limit());
  }

  // fixed64 incarnation = 6;
  if (this->incarnation() != 0) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceAttributes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.DeviceAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceAttributes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceAttributes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.DeviceAttributes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.DeviceAttributes)
    MergeFrom(*source);
  }
}

void DeviceAttributes::MergeFrom(const DeviceAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DeviceAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.device_type().size() > 0) {
    _internal_set_device_type(from._internal_device_type());
  }
  if (from.physical_device_desc().size() > 0) {
    _internal_set_physical_device_desc(from._internal_physical_device_desc());
  }
  if (from.has_locality()) {
    _internal_mutable_locality()->::tensorflow::DeviceLocality::MergeFrom(from._internal_locality());
  }
  if (from.memory_limit() != 0) {
    _internal_set_memory_limit(from._internal_memory_limit());
  }
  if (from.incarnation() != 0) {
    _internal_set_incarnation(from._internal_incarnation());
  }
}

void DeviceAttributes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.DeviceAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceAttributes::CopyFrom(const DeviceAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DeviceAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceAttributes::IsInitialized() const {
  return true;
}

void DeviceAttributes::InternalSwap(DeviceAttributes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_type_.Swap(&other->device_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  physical_device_desc_.Swap(&other->physical_device_desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceAttributes, incarnation_)
      + sizeof(DeviceAttributes::incarnation_)
      - PROTOBUF_FIELD_OFFSET(DeviceAttributes, locality_)>(
          reinterpret_cast<char*>(&locality_),
          reinterpret_cast<char*>(&other->locality_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceAttributes::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::InterconnectLink* Arena::CreateMaybeMessage< ::tensorflow::InterconnectLink >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::InterconnectLink >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::LocalLinks* Arena::CreateMaybeMessage< ::tensorflow::LocalLinks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::LocalLinks >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::DeviceLocality* Arena::CreateMaybeMessage< ::tensorflow::DeviceLocality >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::DeviceLocality >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::DeviceAttributes* Arena::CreateMaybeMessage< ::tensorflow::DeviceAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::DeviceAttributes >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
