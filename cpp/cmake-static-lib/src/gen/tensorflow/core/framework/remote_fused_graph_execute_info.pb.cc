// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/remote_fused_graph_execute_info.proto

#include "tensorflow/core/framework/remote_fused_graph_execute_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GraphDef_tensorflow_2fcore_2fframework_2fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2fremote_5ffused_5fgraph_5fexecute_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RemoteFusedGraphExecuteInfo_TensorShapeTypeProto_tensorflow_2fcore_2fframework_2fremote_5ffused_5fgraph_5fexecute_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TensorShapeProto_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto;
namespace tensorflow {
class RemoteFusedGraphExecuteInfo_TensorShapeTypeProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoteFusedGraphExecuteInfo_TensorShapeTypeProto> _instance;
} _RemoteFusedGraphExecuteInfo_TensorShapeTypeProto_default_instance_;
class RemoteFusedGraphExecuteInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoteFusedGraphExecuteInfo> _instance;
} _RemoteFusedGraphExecuteInfo_default_instance_;
}  // namespace tensorflow
static void InitDefaultsscc_info_RemoteFusedGraphExecuteInfo_tensorflow_2fcore_2fframework_2fremote_5ffused_5fgraph_5fexecute_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_RemoteFusedGraphExecuteInfo_default_instance_;
    new (ptr) ::tensorflow::RemoteFusedGraphExecuteInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::RemoteFusedGraphExecuteInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RemoteFusedGraphExecuteInfo_tensorflow_2fcore_2fframework_2fremote_5ffused_5fgraph_5fexecute_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RemoteFusedGraphExecuteInfo_tensorflow_2fcore_2fframework_2fremote_5ffused_5fgraph_5fexecute_5finfo_2eproto}, {
      &scc_info_GraphDef_tensorflow_2fcore_2fframework_2fgraph_2eproto.base,
      &scc_info_RemoteFusedGraphExecuteInfo_TensorShapeTypeProto_tensorflow_2fcore_2fframework_2fremote_5ffused_5fgraph_5fexecute_5finfo_2eproto.base,}};

static void InitDefaultsscc_info_RemoteFusedGraphExecuteInfo_TensorShapeTypeProto_tensorflow_2fcore_2fframework_2fremote_5ffused_5fgraph_5fexecute_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_RemoteFusedGraphExecuteInfo_TensorShapeTypeProto_default_instance_;
    new (ptr) ::tensorflow::RemoteFusedGraphExecuteInfo_TensorShapeTypeProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::RemoteFusedGraphExecuteInfo_TensorShapeTypeProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RemoteFusedGraphExecuteInfo_TensorShapeTypeProto_tensorflow_2fcore_2fframework_2fremote_5ffused_5fgraph_5fexecute_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RemoteFusedGraphExecuteInfo_TensorShapeTypeProto_tensorflow_2fcore_2fframework_2fremote_5ffused_5fgraph_5fexecute_5finfo_2eproto}, {
      &scc_info_TensorShapeProto_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_2fcore_2fframework_2fremote_5ffused_5fgraph_5fexecute_5finfo_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fframework_2fremote_5ffused_5fgraph_5fexecute_5finfo_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fframework_2fremote_5ffused_5fgraph_5fexecute_5finfo_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_2fcore_2fframework_2fremote_5ffused_5fgraph_5fexecute_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RemoteFusedGraphExecuteInfo_TensorShapeTypeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RemoteFusedGraphExecuteInfo_TensorShapeTypeProto, dtype_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RemoteFusedGraphExecuteInfo_TensorShapeTypeProto, shape_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RemoteFusedGraphExecuteInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RemoteFusedGraphExecuteInfo, remote_graph_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RemoteFusedGraphExecuteInfo, graph_input_node_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RemoteFusedGraphExecuteInfo, graph_output_node_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RemoteFusedGraphExecuteInfo, executor_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RemoteFusedGraphExecuteInfo, serialized_executor_parameters_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RemoteFusedGraphExecuteInfo, default_graph_input_tensor_shape_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RemoteFusedGraphExecuteInfo, default_graph_output_tensor_shape_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::RemoteFusedGraphExecuteInfo_TensorShapeTypeProto)},
  { 7, -1, sizeof(::tensorflow::RemoteFusedGraphExecuteInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_RemoteFusedGraphExecuteInfo_TensorShapeTypeProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_RemoteFusedGraphExecuteInfo_default_instance_),
};

const char descriptor_table_protodef_tensorflow_2fcore_2fframework_2fremote_5ffused_5fgraph_5fexecute_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\?tensorflow/core/framework/remote_fused"
  "_graph_execute_info.proto\022\ntensorflow\032%t"
  "ensorflow/core/framework/graph.proto\032,te"
  "nsorflow/core/framework/tensor_shape.pro"
  "to\032%tensorflow/core/framework/types.prot"
  "o\"\202\004\n\033RemoteFusedGraphExecuteInfo\022*\n\014rem"
  "ote_graph\030\001 \001(\0132\024.tensorflow.GraphDef\022\035\n"
  "\025graph_input_node_name\030\002 \003(\t\022\036\n\026graph_ou"
  "tput_node_name\030\003 \003(\t\022\025\n\rexecutor_name\030\004 "
  "\001(\t\022&\n\036serialized_executor_parameters\030\005 "
  "\001(\014\022f\n default_graph_input_tensor_shape\030"
  "\006 \003(\0132<.tensorflow.RemoteFusedGraphExecu"
  "teInfo.TensorShapeTypeProto\022g\n!default_g"
  "raph_output_tensor_shape\030\007 \003(\0132<.tensorf"
  "low.RemoteFusedGraphExecuteInfo.TensorSh"
  "apeTypeProto\032h\n\024TensorShapeTypeProto\022#\n\005"
  "dtype\030\001 \001(\0162\024.tensorflow.DataType\022+\n\005sha"
  "pe\030\002 \001(\0132\034.tensorflow.TensorShapeProtoB\251"
  "\001\n\030org.tensorflow.frameworkB RemoteFused"
  "GraphExecuteInfoProtoP\001Zfgithub.com/tens"
  "orflow/tensorflow/tensorflow/go/core/fra"
  "mework/remote_fused_graph_execute_info_g"
  "o_proto\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_2fcore_2fframework_2fremote_5ffused_5fgraph_5fexecute_5finfo_2eproto_deps[3] = {
  &::descriptor_table_tensorflow_2fcore_2fframework_2fgraph_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_2fcore_2fframework_2fremote_5ffused_5fgraph_5fexecute_5finfo_2eproto_sccs[2] = {
  &scc_info_RemoteFusedGraphExecuteInfo_tensorflow_2fcore_2fframework_2fremote_5ffused_5fgraph_5fexecute_5finfo_2eproto.base,
  &scc_info_RemoteFusedGraphExecuteInfo_TensorShapeTypeProto_tensorflow_2fcore_2fframework_2fremote_5ffused_5fgraph_5fexecute_5finfo_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_2fcore_2fframework_2fremote_5ffused_5fgraph_5fexecute_5finfo_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fframework_2fremote_5ffused_5fgraph_5fexecute_5finfo_2eproto = {
  false, false, descriptor_table_protodef_tensorflow_2fcore_2fframework_2fremote_5ffused_5fgraph_5fexecute_5finfo_2eproto, "tensorflow/core/framework/remote_fused_graph_execute_info.proto", 898,
  &descriptor_table_tensorflow_2fcore_2fframework_2fremote_5ffused_5fgraph_5fexecute_5finfo_2eproto_once, descriptor_table_tensorflow_2fcore_2fframework_2fremote_5ffused_5fgraph_5fexecute_5finfo_2eproto_sccs, descriptor_table_tensorflow_2fcore_2fframework_2fremote_5ffused_5fgraph_5fexecute_5finfo_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fframework_2fremote_5ffused_5fgraph_5fexecute_5finfo_2eproto::offsets,
  file_level_metadata_tensorflow_2fcore_2fframework_2fremote_5ffused_5fgraph_5fexecute_5finfo_2eproto, 2, file_level_enum_descriptors_tensorflow_2fcore_2fframework_2fremote_5ffused_5fgraph_5fexecute_5finfo_2eproto, file_level_service_descriptors_tensorflow_2fcore_2fframework_2fremote_5ffused_5fgraph_5fexecute_5finfo_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_2fcore_2fframework_2fremote_5ffused_5fgraph_5fexecute_5finfo_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_2fcore_2fframework_2fremote_5ffused_5fgraph_5fexecute_5finfo_2eproto)), true);
namespace tensorflow {

// ===================================================================

void RemoteFusedGraphExecuteInfo_TensorShapeTypeProto::InitAsDefaultInstance() {
  ::tensorflow::_RemoteFusedGraphExecuteInfo_TensorShapeTypeProto_default_instance_._instance.get_mutable()->shape_ = const_cast< ::tensorflow::TensorShapeProto*>(
      ::tensorflow::TensorShapeProto::internal_default_instance());
}
class RemoteFusedGraphExecuteInfo_TensorShapeTypeProto::_Internal {
 public:
  static const ::tensorflow::TensorShapeProto& shape(const RemoteFusedGraphExecuteInfo_TensorShapeTypeProto* msg);
};

const ::tensorflow::TensorShapeProto&
RemoteFusedGraphExecuteInfo_TensorShapeTypeProto::_Internal::shape(const RemoteFusedGraphExecuteInfo_TensorShapeTypeProto* msg) {
  return *msg->shape_;
}
void RemoteFusedGraphExecuteInfo_TensorShapeTypeProto::clear_shape() {
  if (GetArena() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
}
RemoteFusedGraphExecuteInfo_TensorShapeTypeProto::RemoteFusedGraphExecuteInfo_TensorShapeTypeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto)
}
RemoteFusedGraphExecuteInfo_TensorShapeTypeProto::RemoteFusedGraphExecuteInfo_TensorShapeTypeProto(const RemoteFusedGraphExecuteInfo_TensorShapeTypeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_shape()) {
    shape_ = new ::tensorflow::TensorShapeProto(*from.shape_);
  } else {
    shape_ = nullptr;
  }
  dtype_ = from.dtype_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto)
}

void RemoteFusedGraphExecuteInfo_TensorShapeTypeProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoteFusedGraphExecuteInfo_TensorShapeTypeProto_tensorflow_2fcore_2fframework_2fremote_5ffused_5fgraph_5fexecute_5finfo_2eproto.base);
  ::memset(&shape_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dtype_) -
      reinterpret_cast<char*>(&shape_)) + sizeof(dtype_));
}

RemoteFusedGraphExecuteInfo_TensorShapeTypeProto::~RemoteFusedGraphExecuteInfo_TensorShapeTypeProto() {
  // @@protoc_insertion_point(destructor:tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoteFusedGraphExecuteInfo_TensorShapeTypeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete shape_;
}

void RemoteFusedGraphExecuteInfo_TensorShapeTypeProto::ArenaDtor(void* object) {
  RemoteFusedGraphExecuteInfo_TensorShapeTypeProto* _this = reinterpret_cast< RemoteFusedGraphExecuteInfo_TensorShapeTypeProto* >(object);
  (void)_this;
}
void RemoteFusedGraphExecuteInfo_TensorShapeTypeProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoteFusedGraphExecuteInfo_TensorShapeTypeProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoteFusedGraphExecuteInfo_TensorShapeTypeProto& RemoteFusedGraphExecuteInfo_TensorShapeTypeProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoteFusedGraphExecuteInfo_TensorShapeTypeProto_tensorflow_2fcore_2fframework_2fremote_5ffused_5fgraph_5fexecute_5finfo_2eproto.base);
  return *internal_default_instance();
}


void RemoteFusedGraphExecuteInfo_TensorShapeTypeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
  dtype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteFusedGraphExecuteInfo_TensorShapeTypeProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.DataType dtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dtype(static_cast<::tensorflow::DataType>(val));
        } else goto handle_unusual;
        continue;
      // .tensorflow.TensorShapeProto shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoteFusedGraphExecuteInfo_TensorShapeTypeProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.DataType dtype = 1;
  if (this->dtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_dtype(), target);
  }

  // .tensorflow.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::shape(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto)
  return target;
}

size_t RemoteFusedGraphExecuteInfo_TensorShapeTypeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shape_);
  }

  // .tensorflow.DataType dtype = 1;
  if (this->dtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteFusedGraphExecuteInfo_TensorShapeTypeProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteFusedGraphExecuteInfo_TensorShapeTypeProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoteFusedGraphExecuteInfo_TensorShapeTypeProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto)
    MergeFrom(*source);
  }
}

void RemoteFusedGraphExecuteInfo_TensorShapeTypeProto::MergeFrom(const RemoteFusedGraphExecuteInfo_TensorShapeTypeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_shape()) {
    _internal_mutable_shape()->::tensorflow::TensorShapeProto::MergeFrom(from._internal_shape());
  }
  if (from.dtype() != 0) {
    _internal_set_dtype(from._internal_dtype());
  }
}

void RemoteFusedGraphExecuteInfo_TensorShapeTypeProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteFusedGraphExecuteInfo_TensorShapeTypeProto::CopyFrom(const RemoteFusedGraphExecuteInfo_TensorShapeTypeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteFusedGraphExecuteInfo_TensorShapeTypeProto::IsInitialized() const {
  return true;
}

void RemoteFusedGraphExecuteInfo_TensorShapeTypeProto::InternalSwap(RemoteFusedGraphExecuteInfo_TensorShapeTypeProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoteFusedGraphExecuteInfo_TensorShapeTypeProto, dtype_)
      + sizeof(RemoteFusedGraphExecuteInfo_TensorShapeTypeProto::dtype_)
      - PROTOBUF_FIELD_OFFSET(RemoteFusedGraphExecuteInfo_TensorShapeTypeProto, shape_)>(
          reinterpret_cast<char*>(&shape_),
          reinterpret_cast<char*>(&other->shape_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteFusedGraphExecuteInfo_TensorShapeTypeProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoteFusedGraphExecuteInfo::InitAsDefaultInstance() {
  ::tensorflow::_RemoteFusedGraphExecuteInfo_default_instance_._instance.get_mutable()->remote_graph_ = const_cast< ::tensorflow::GraphDef*>(
      ::tensorflow::GraphDef::internal_default_instance());
}
class RemoteFusedGraphExecuteInfo::_Internal {
 public:
  static const ::tensorflow::GraphDef& remote_graph(const RemoteFusedGraphExecuteInfo* msg);
};

const ::tensorflow::GraphDef&
RemoteFusedGraphExecuteInfo::_Internal::remote_graph(const RemoteFusedGraphExecuteInfo* msg) {
  return *msg->remote_graph_;
}
void RemoteFusedGraphExecuteInfo::clear_remote_graph() {
  if (GetArena() == nullptr && remote_graph_ != nullptr) {
    delete remote_graph_;
  }
  remote_graph_ = nullptr;
}
RemoteFusedGraphExecuteInfo::RemoteFusedGraphExecuteInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  graph_input_node_name_(arena),
  graph_output_node_name_(arena),
  default_graph_input_tensor_shape_(arena),
  default_graph_output_tensor_shape_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RemoteFusedGraphExecuteInfo)
}
RemoteFusedGraphExecuteInfo::RemoteFusedGraphExecuteInfo(const RemoteFusedGraphExecuteInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      graph_input_node_name_(from.graph_input_node_name_),
      graph_output_node_name_(from.graph_output_node_name_),
      default_graph_input_tensor_shape_(from.default_graph_input_tensor_shape_),
      default_graph_output_tensor_shape_(from.default_graph_output_tensor_shape_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  executor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_executor_name().empty()) {
    executor_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_executor_name(),
      GetArena());
  }
  serialized_executor_parameters_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serialized_executor_parameters().empty()) {
    serialized_executor_parameters_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_serialized_executor_parameters(),
      GetArena());
  }
  if (from._internal_has_remote_graph()) {
    remote_graph_ = new ::tensorflow::GraphDef(*from.remote_graph_);
  } else {
    remote_graph_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.RemoteFusedGraphExecuteInfo)
}

void RemoteFusedGraphExecuteInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoteFusedGraphExecuteInfo_tensorflow_2fcore_2fframework_2fremote_5ffused_5fgraph_5fexecute_5finfo_2eproto.base);
  executor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialized_executor_parameters_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_graph_ = nullptr;
}

RemoteFusedGraphExecuteInfo::~RemoteFusedGraphExecuteInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.RemoteFusedGraphExecuteInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoteFusedGraphExecuteInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  executor_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialized_executor_parameters_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete remote_graph_;
}

void RemoteFusedGraphExecuteInfo::ArenaDtor(void* object) {
  RemoteFusedGraphExecuteInfo* _this = reinterpret_cast< RemoteFusedGraphExecuteInfo* >(object);
  (void)_this;
}
void RemoteFusedGraphExecuteInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoteFusedGraphExecuteInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoteFusedGraphExecuteInfo& RemoteFusedGraphExecuteInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoteFusedGraphExecuteInfo_tensorflow_2fcore_2fframework_2fremote_5ffused_5fgraph_5fexecute_5finfo_2eproto.base);
  return *internal_default_instance();
}


void RemoteFusedGraphExecuteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RemoteFusedGraphExecuteInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  graph_input_node_name_.Clear();
  graph_output_node_name_.Clear();
  default_graph_input_tensor_shape_.Clear();
  default_graph_output_tensor_shape_.Clear();
  executor_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  serialized_executor_parameters_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && remote_graph_ != nullptr) {
    delete remote_graph_;
  }
  remote_graph_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteFusedGraphExecuteInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.GraphDef remote_graph = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_remote_graph(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string graph_input_node_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_graph_input_node_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.RemoteFusedGraphExecuteInfo.graph_input_node_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string graph_output_node_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_graph_output_node_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.RemoteFusedGraphExecuteInfo.graph_output_node_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string executor_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_executor_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.RemoteFusedGraphExecuteInfo.executor_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes serialized_executor_parameters = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_serialized_executor_parameters();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto default_graph_input_tensor_shape = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_default_graph_input_tensor_shape(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto default_graph_output_tensor_shape = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_default_graph_output_tensor_shape(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoteFusedGraphExecuteInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RemoteFusedGraphExecuteInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.GraphDef remote_graph = 1;
  if (this->has_remote_graph()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::remote_graph(this), target, stream);
  }

  // repeated string graph_input_node_name = 2;
  for (int i = 0, n = this->_internal_graph_input_node_name_size(); i < n; i++) {
    const auto& s = this->_internal_graph_input_node_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RemoteFusedGraphExecuteInfo.graph_input_node_name");
    target = stream->WriteString(2, s, target);
  }

  // repeated string graph_output_node_name = 3;
  for (int i = 0, n = this->_internal_graph_output_node_name_size(); i < n; i++) {
    const auto& s = this->_internal_graph_output_node_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RemoteFusedGraphExecuteInfo.graph_output_node_name");
    target = stream->WriteString(3, s, target);
  }

  // string executor_name = 4;
  if (this->executor_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_executor_name().data(), static_cast<int>(this->_internal_executor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RemoteFusedGraphExecuteInfo.executor_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_executor_name(), target);
  }

  // bytes serialized_executor_parameters = 5;
  if (this->serialized_executor_parameters().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_serialized_executor_parameters(), target);
  }

  // repeated .tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto default_graph_input_tensor_shape = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_default_graph_input_tensor_shape_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_default_graph_input_tensor_shape(i), target, stream);
  }

  // repeated .tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto default_graph_output_tensor_shape = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_default_graph_output_tensor_shape_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_default_graph_output_tensor_shape(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RemoteFusedGraphExecuteInfo)
  return target;
}

size_t RemoteFusedGraphExecuteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RemoteFusedGraphExecuteInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string graph_input_node_name = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(graph_input_node_name_.size());
  for (int i = 0, n = graph_input_node_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      graph_input_node_name_.Get(i));
  }

  // repeated string graph_output_node_name = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(graph_output_node_name_.size());
  for (int i = 0, n = graph_output_node_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      graph_output_node_name_.Get(i));
  }

  // repeated .tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto default_graph_input_tensor_shape = 6;
  total_size += 1UL * this->_internal_default_graph_input_tensor_shape_size();
  for (const auto& msg : this->default_graph_input_tensor_shape_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto default_graph_output_tensor_shape = 7;
  total_size += 1UL * this->_internal_default_graph_output_tensor_shape_size();
  for (const auto& msg : this->default_graph_output_tensor_shape_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string executor_name = 4;
  if (this->executor_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_executor_name());
  }

  // bytes serialized_executor_parameters = 5;
  if (this->serialized_executor_parameters().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_serialized_executor_parameters());
  }

  // .tensorflow.GraphDef remote_graph = 1;
  if (this->has_remote_graph()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *remote_graph_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteFusedGraphExecuteInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RemoteFusedGraphExecuteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteFusedGraphExecuteInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoteFusedGraphExecuteInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RemoteFusedGraphExecuteInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RemoteFusedGraphExecuteInfo)
    MergeFrom(*source);
  }
}

void RemoteFusedGraphExecuteInfo::MergeFrom(const RemoteFusedGraphExecuteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RemoteFusedGraphExecuteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  graph_input_node_name_.MergeFrom(from.graph_input_node_name_);
  graph_output_node_name_.MergeFrom(from.graph_output_node_name_);
  default_graph_input_tensor_shape_.MergeFrom(from.default_graph_input_tensor_shape_);
  default_graph_output_tensor_shape_.MergeFrom(from.default_graph_output_tensor_shape_);
  if (from.executor_name().size() > 0) {
    _internal_set_executor_name(from._internal_executor_name());
  }
  if (from.serialized_executor_parameters().size() > 0) {
    _internal_set_serialized_executor_parameters(from._internal_serialized_executor_parameters());
  }
  if (from.has_remote_graph()) {
    _internal_mutable_remote_graph()->::tensorflow::GraphDef::MergeFrom(from._internal_remote_graph());
  }
}

void RemoteFusedGraphExecuteInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RemoteFusedGraphExecuteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteFusedGraphExecuteInfo::CopyFrom(const RemoteFusedGraphExecuteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RemoteFusedGraphExecuteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteFusedGraphExecuteInfo::IsInitialized() const {
  return true;
}

void RemoteFusedGraphExecuteInfo::InternalSwap(RemoteFusedGraphExecuteInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  graph_input_node_name_.InternalSwap(&other->graph_input_node_name_);
  graph_output_node_name_.InternalSwap(&other->graph_output_node_name_);
  default_graph_input_tensor_shape_.InternalSwap(&other->default_graph_input_tensor_shape_);
  default_graph_output_tensor_shape_.InternalSwap(&other->default_graph_output_tensor_shape_);
  executor_name_.Swap(&other->executor_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  serialized_executor_parameters_.Swap(&other->serialized_executor_parameters_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(remote_graph_, other->remote_graph_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteFusedGraphExecuteInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::RemoteFusedGraphExecuteInfo_TensorShapeTypeProto* Arena::CreateMaybeMessage< ::tensorflow::RemoteFusedGraphExecuteInfo_TensorShapeTypeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::RemoteFusedGraphExecuteInfo_TensorShapeTypeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::RemoteFusedGraphExecuteInfo* Arena::CreateMaybeMessage< ::tensorflow::RemoteFusedGraphExecuteInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::RemoteFusedGraphExecuteInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
