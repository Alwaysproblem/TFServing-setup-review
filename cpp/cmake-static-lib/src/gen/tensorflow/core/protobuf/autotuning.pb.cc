// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/autotuning.proto

#include "tensorflow/core/protobuf/autotuning.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fduration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Duration_google_2fprotobuf_2fduration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_AutotuneResult_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutotuneResult_ConvKey_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AutotuneResult_FailureResult_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutotuneResult_GemmKey_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ComputeCapability_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CudnnVersion_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto;
namespace tensorflow {
class CudnnVersionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CudnnVersion> _instance;
} _CudnnVersion_default_instance_;
class ComputeCapabilityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ComputeCapability> _instance;
} _ComputeCapability_default_instance_;
class AutotuneResult_FailureResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutotuneResult_FailureResult> _instance;
  const ::tensorflow::AutotuneResult_ConvKey* reference_conv_;
  const ::tensorflow::AutotuneResult_GemmKey* reference_gemm_;
} _AutotuneResult_FailureResult_default_instance_;
class AutotuneResult_ConvKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutotuneResult_ConvKey> _instance;
} _AutotuneResult_ConvKey_default_instance_;
class AutotuneResult_GemmKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutotuneResult_GemmKey> _instance;
} _AutotuneResult_GemmKey_default_instance_;
class AutotuneResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutotuneResult> _instance;
  const ::tensorflow::AutotuneResult_ConvKey* conv_;
  const ::tensorflow::AutotuneResult_GemmKey* gemm_;
} _AutotuneResult_default_instance_;
class AutotuningLogDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutotuningLog> _instance;
} _AutotuningLog_default_instance_;
}  // namespace tensorflow
static void InitDefaultsscc_info_AutotuneResult_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_AutotuneResult_default_instance_;
    new (ptr) ::tensorflow::AutotuneResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::AutotuneResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_AutotuneResult_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_AutotuneResult_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto}, {
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,
      &scc_info_AutotuneResult_FailureResult_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto.base,
      &scc_info_AutotuneResult_ConvKey_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto.base,
      &scc_info_AutotuneResult_GemmKey_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto.base,}};

static void InitDefaultsscc_info_AutotuneResult_ConvKey_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_AutotuneResult_ConvKey_default_instance_;
    new (ptr) ::tensorflow::AutotuneResult_ConvKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::AutotuneResult_ConvKey::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutotuneResult_ConvKey_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AutotuneResult_ConvKey_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto}, {}};

static void InitDefaultsscc_info_AutotuneResult_FailureResult_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_AutotuneResult_FailureResult_default_instance_;
    new (ptr) ::tensorflow::AutotuneResult_FailureResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::AutotuneResult_FailureResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AutotuneResult_FailureResult_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AutotuneResult_FailureResult_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto}, {
      &scc_info_AutotuneResult_ConvKey_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto.base,
      &scc_info_AutotuneResult_GemmKey_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto.base,}};

static void InitDefaultsscc_info_AutotuneResult_GemmKey_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_AutotuneResult_GemmKey_default_instance_;
    new (ptr) ::tensorflow::AutotuneResult_GemmKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::AutotuneResult_GemmKey::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutotuneResult_GemmKey_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AutotuneResult_GemmKey_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto}, {}};

static void InitDefaultsscc_info_AutotuningLog_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_AutotuningLog_default_instance_;
    new (ptr) ::tensorflow::AutotuningLog();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::AutotuningLog::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_AutotuningLog_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_AutotuningLog_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,
      &scc_info_AutotuneResult_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto.base,
      &scc_info_CudnnVersion_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto.base,
      &scc_info_ComputeCapability_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto.base,}};

static void InitDefaultsscc_info_ComputeCapability_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_ComputeCapability_default_instance_;
    new (ptr) ::tensorflow::ComputeCapability();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::ComputeCapability::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ComputeCapability_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ComputeCapability_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto}, {}};

static void InitDefaultsscc_info_CudnnVersion_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_CudnnVersion_default_instance_;
    new (ptr) ::tensorflow::CudnnVersion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::CudnnVersion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CudnnVersion_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CudnnVersion_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CudnnVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CudnnVersion, major_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CudnnVersion, minor_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CudnnVersion, patch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ComputeCapability, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ComputeCapability, major_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ComputeCapability, minor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::AutotuneResult_FailureResult, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorflow::AutotuneResult_FailureResult, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::AutotuneResult_FailureResult, kind_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::AutotuneResult_FailureResult, msg_),
  offsetof(::tensorflow::AutotuneResult_FailureResultDefaultTypeInternal, reference_conv_),
  offsetof(::tensorflow::AutotuneResult_FailureResultDefaultTypeInternal, reference_gemm_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::AutotuneResult_FailureResult, buffer_address_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::AutotuneResult_FailureResult, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::AutotuneResult_ConvKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::AutotuneResult_ConvKey, algorithm_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::AutotuneResult_ConvKey, tensor_ops_enabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::AutotuneResult_GemmKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::AutotuneResult_GemmKey, algorithm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::AutotuneResult, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorflow::AutotuneResult, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::AutotuneResult, scratch_bytes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::AutotuneResult, run_time_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::AutotuneResult, failure_),
  offsetof(::tensorflow::AutotuneResultDefaultTypeInternal, conv_),
  offsetof(::tensorflow::AutotuneResultDefaultTypeInternal, gemm_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::AutotuneResult, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::AutotuningLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::AutotuningLog, instr_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::AutotuningLog, results_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::AutotuningLog, cudnn_version_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::AutotuningLog, compute_capability_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::AutotuningLog, device_pci_bus_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::AutotuningLog, blas_version_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::CudnnVersion)},
  { 8, -1, sizeof(::tensorflow::ComputeCapability)},
  { 15, -1, sizeof(::tensorflow::AutotuneResult_FailureResult)},
  { 26, -1, sizeof(::tensorflow::AutotuneResult_ConvKey)},
  { 33, -1, sizeof(::tensorflow::AutotuneResult_GemmKey)},
  { 39, -1, sizeof(::tensorflow::AutotuneResult)},
  { 50, -1, sizeof(::tensorflow::AutotuningLog)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_CudnnVersion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_ComputeCapability_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_AutotuneResult_FailureResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_AutotuneResult_ConvKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_AutotuneResult_GemmKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_AutotuneResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_AutotuningLog_default_instance_),
};

const char descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)tensorflow/core/protobuf/autotuning.pr"
  "oto\022\ntensorflow\032\031google/protobuf/any.pro"
  "to\032\036google/protobuf/duration.proto\";\n\014Cu"
  "dnnVersion\022\r\n\005major\030\001 \001(\005\022\r\n\005minor\030\002 \001(\005"
  "\022\r\n\005patch\030\003 \001(\005\"1\n\021ComputeCapability\022\r\n\005"
  "major\030\001 \001(\005\022\r\n\005minor\030\002 \001(\005\"\212\005\n\016AutotuneR"
  "esult\022\025\n\rscratch_bytes\030\010 \001(\003\022+\n\010run_time"
  "\030\t \001(\0132\031.google.protobuf.Duration\0229\n\007fai"
  "lure\030\007 \001(\0132(.tensorflow.AutotuneResult.F"
  "ailureResult\0222\n\004conv\030\005 \001(\0132\".tensorflow."
  "AutotuneResult.ConvKeyH\000\0222\n\004gemm\030\006 \001(\0132\""
  ".tensorflow.AutotuneResult.GemmKeyH\000\032\355\001\n"
  "\rFailureResult\0224\n\004kind\030\001 \001(\0162&.tensorflo"
  "w.AutotuneResult.FailureKind\022\013\n\003msg\030\002 \001("
  "\t\022<\n\016reference_conv\030\013 \001(\0132\".tensorflow.A"
  "utotuneResult.ConvKeyH\000\022<\n\016reference_gem"
  "m\030\014 \001(\0132\".tensorflow.AutotuneResult.Gemm"
  "KeyH\000\022\026\n\016buffer_address\030\r \001(\003B\005\n\003key\0328\n\007"
  "ConvKey\022\021\n\talgorithm\030\001 \001(\003\022\032\n\022tensor_ops"
  "_enabled\030\002 \001(\010\032\034\n\007GemmKey\022\021\n\talgorithm\030\001"
  " \001(\003\"B\n\013FailureKind\022\013\n\007UNKNOWN\020\000\022\024\n\020REDZ"
  "ONE_MODIFIED\020\001\022\020\n\014WRONG_RESULT\020\002B\005\n\003key\""
  "\376\001\n\rAutotuningLog\022#\n\005instr\030\001 \001(\0132\024.googl"
  "e.protobuf.Any\022+\n\007results\030\002 \003(\0132\032.tensor"
  "flow.AutotuneResult\022/\n\rcudnn_version\030\003 \001"
  "(\0132\030.tensorflow.CudnnVersion\0229\n\022compute_"
  "capability\030\004 \001(\0132\035.tensorflow.ComputeCap"
  "ability\022\031\n\021device_pci_bus_id\030\005 \001(\t\022\024\n\014bl"
  "as_version\030\006 \001(\tBWZUgithub.com/tensorflo"
  "w/tensorflow/tensorflow/go/core/protobuf"
  "/for_core_protos_go_protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto_sccs[7] = {
  &scc_info_AutotuneResult_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto.base,
  &scc_info_AutotuneResult_ConvKey_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto.base,
  &scc_info_AutotuneResult_FailureResult_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto.base,
  &scc_info_AutotuneResult_GemmKey_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto.base,
  &scc_info_AutotuningLog_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto.base,
  &scc_info_ComputeCapability_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto.base,
  &scc_info_CudnnVersion_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto = {
  false, false, descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto, "tensorflow/core/protobuf/autotuning.proto", 1233,
  &descriptor_table_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto_once, descriptor_table_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto_sccs, descriptor_table_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto_deps, 7, 2,
  schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto::offsets,
  file_level_metadata_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto, 7, file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto, file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto)), true);
namespace tensorflow {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AutotuneResult_FailureKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto);
  return file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto[0];
}
bool AutotuneResult_FailureKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AutotuneResult_FailureKind AutotuneResult::UNKNOWN;
constexpr AutotuneResult_FailureKind AutotuneResult::REDZONE_MODIFIED;
constexpr AutotuneResult_FailureKind AutotuneResult::WRONG_RESULT;
constexpr AutotuneResult_FailureKind AutotuneResult::FailureKind_MIN;
constexpr AutotuneResult_FailureKind AutotuneResult::FailureKind_MAX;
constexpr int AutotuneResult::FailureKind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void CudnnVersion::InitAsDefaultInstance() {
}
class CudnnVersion::_Internal {
 public:
};

CudnnVersion::CudnnVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CudnnVersion)
}
CudnnVersion::CudnnVersion(const CudnnVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&major_, &from.major_,
    static_cast<size_t>(reinterpret_cast<char*>(&patch_) -
    reinterpret_cast<char*>(&major_)) + sizeof(patch_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.CudnnVersion)
}

void CudnnVersion::SharedCtor() {
  ::memset(&major_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&patch_) -
      reinterpret_cast<char*>(&major_)) + sizeof(patch_));
}

CudnnVersion::~CudnnVersion() {
  // @@protoc_insertion_point(destructor:tensorflow.CudnnVersion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CudnnVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CudnnVersion::ArenaDtor(void* object) {
  CudnnVersion* _this = reinterpret_cast< CudnnVersion* >(object);
  (void)_this;
}
void CudnnVersion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CudnnVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CudnnVersion& CudnnVersion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CudnnVersion_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto.base);
  return *internal_default_instance();
}


void CudnnVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CudnnVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&major_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&patch_) -
      reinterpret_cast<char*>(&major_)) + sizeof(patch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CudnnVersion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 major = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          major_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 minor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 patch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          patch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CudnnVersion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CudnnVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 major = 1;
  if (this->major() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_major(), target);
  }

  // int32 minor = 2;
  if (this->minor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_minor(), target);
  }

  // int32 patch = 3;
  if (this->patch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_patch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CudnnVersion)
  return target;
}

size_t CudnnVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CudnnVersion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 major = 1;
  if (this->major() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_major());
  }

  // int32 minor = 2;
  if (this->minor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_minor());
  }

  // int32 patch = 3;
  if (this->patch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_patch());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CudnnVersion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CudnnVersion)
  GOOGLE_DCHECK_NE(&from, this);
  const CudnnVersion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CudnnVersion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CudnnVersion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CudnnVersion)
    MergeFrom(*source);
  }
}

void CudnnVersion::MergeFrom(const CudnnVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CudnnVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.major() != 0) {
    _internal_set_major(from._internal_major());
  }
  if (from.minor() != 0) {
    _internal_set_minor(from._internal_minor());
  }
  if (from.patch() != 0) {
    _internal_set_patch(from._internal_patch());
  }
}

void CudnnVersion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CudnnVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CudnnVersion::CopyFrom(const CudnnVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CudnnVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CudnnVersion::IsInitialized() const {
  return true;
}

void CudnnVersion::InternalSwap(CudnnVersion* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CudnnVersion, patch_)
      + sizeof(CudnnVersion::patch_)
      - PROTOBUF_FIELD_OFFSET(CudnnVersion, major_)>(
          reinterpret_cast<char*>(&major_),
          reinterpret_cast<char*>(&other->major_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CudnnVersion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ComputeCapability::InitAsDefaultInstance() {
}
class ComputeCapability::_Internal {
 public:
};

ComputeCapability::ComputeCapability(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ComputeCapability)
}
ComputeCapability::ComputeCapability(const ComputeCapability& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&major_, &from.major_,
    static_cast<size_t>(reinterpret_cast<char*>(&minor_) -
    reinterpret_cast<char*>(&major_)) + sizeof(minor_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.ComputeCapability)
}

void ComputeCapability::SharedCtor() {
  ::memset(&major_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minor_) -
      reinterpret_cast<char*>(&major_)) + sizeof(minor_));
}

ComputeCapability::~ComputeCapability() {
  // @@protoc_insertion_point(destructor:tensorflow.ComputeCapability)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ComputeCapability::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ComputeCapability::ArenaDtor(void* object) {
  ComputeCapability* _this = reinterpret_cast< ComputeCapability* >(object);
  (void)_this;
}
void ComputeCapability::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ComputeCapability::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ComputeCapability& ComputeCapability::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ComputeCapability_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto.base);
  return *internal_default_instance();
}


void ComputeCapability::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ComputeCapability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&major_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minor_) -
      reinterpret_cast<char*>(&major_)) + sizeof(minor_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComputeCapability::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 major = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          major_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 minor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ComputeCapability::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ComputeCapability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 major = 1;
  if (this->major() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_major(), target);
  }

  // int32 minor = 2;
  if (this->minor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_minor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ComputeCapability)
  return target;
}

size_t ComputeCapability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ComputeCapability)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 major = 1;
  if (this->major() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_major());
  }

  // int32 minor = 2;
  if (this->minor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_minor());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComputeCapability::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ComputeCapability)
  GOOGLE_DCHECK_NE(&from, this);
  const ComputeCapability* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ComputeCapability>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ComputeCapability)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ComputeCapability)
    MergeFrom(*source);
  }
}

void ComputeCapability::MergeFrom(const ComputeCapability& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ComputeCapability)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.major() != 0) {
    _internal_set_major(from._internal_major());
  }
  if (from.minor() != 0) {
    _internal_set_minor(from._internal_minor());
  }
}

void ComputeCapability::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ComputeCapability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComputeCapability::CopyFrom(const ComputeCapability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ComputeCapability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComputeCapability::IsInitialized() const {
  return true;
}

void ComputeCapability::InternalSwap(ComputeCapability* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComputeCapability, minor_)
      + sizeof(ComputeCapability::minor_)
      - PROTOBUF_FIELD_OFFSET(ComputeCapability, major_)>(
          reinterpret_cast<char*>(&major_),
          reinterpret_cast<char*>(&other->major_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComputeCapability::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AutotuneResult_FailureResult::InitAsDefaultInstance() {
  ::tensorflow::_AutotuneResult_FailureResult_default_instance_.reference_conv_ = const_cast< ::tensorflow::AutotuneResult_ConvKey*>(
      ::tensorflow::AutotuneResult_ConvKey::internal_default_instance());
  ::tensorflow::_AutotuneResult_FailureResult_default_instance_.reference_gemm_ = const_cast< ::tensorflow::AutotuneResult_GemmKey*>(
      ::tensorflow::AutotuneResult_GemmKey::internal_default_instance());
}
class AutotuneResult_FailureResult::_Internal {
 public:
  static const ::tensorflow::AutotuneResult_ConvKey& reference_conv(const AutotuneResult_FailureResult* msg);
  static const ::tensorflow::AutotuneResult_GemmKey& reference_gemm(const AutotuneResult_FailureResult* msg);
};

const ::tensorflow::AutotuneResult_ConvKey&
AutotuneResult_FailureResult::_Internal::reference_conv(const AutotuneResult_FailureResult* msg) {
  return *msg->key_.reference_conv_;
}
const ::tensorflow::AutotuneResult_GemmKey&
AutotuneResult_FailureResult::_Internal::reference_gemm(const AutotuneResult_FailureResult* msg) {
  return *msg->key_.reference_gemm_;
}
void AutotuneResult_FailureResult::set_allocated_reference_conv(::tensorflow::AutotuneResult_ConvKey* reference_conv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_key();
  if (reference_conv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reference_conv);
    if (message_arena != submessage_arena) {
      reference_conv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference_conv, submessage_arena);
    }
    set_has_reference_conv();
    key_.reference_conv_ = reference_conv;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.AutotuneResult.FailureResult.reference_conv)
}
void AutotuneResult_FailureResult::set_allocated_reference_gemm(::tensorflow::AutotuneResult_GemmKey* reference_gemm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_key();
  if (reference_gemm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reference_gemm);
    if (message_arena != submessage_arena) {
      reference_gemm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference_gemm, submessage_arena);
    }
    set_has_reference_gemm();
    key_.reference_gemm_ = reference_gemm;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.AutotuneResult.FailureResult.reference_gemm)
}
AutotuneResult_FailureResult::AutotuneResult_FailureResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.AutotuneResult.FailureResult)
}
AutotuneResult_FailureResult::AutotuneResult_FailureResult(const AutotuneResult_FailureResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_msg(),
      GetArena());
  }
  ::memcpy(&kind_, &from.kind_,
    static_cast<size_t>(reinterpret_cast<char*>(&buffer_address_) -
    reinterpret_cast<char*>(&kind_)) + sizeof(buffer_address_));
  clear_has_key();
  switch (from.key_case()) {
    case kReferenceConv: {
      _internal_mutable_reference_conv()->::tensorflow::AutotuneResult_ConvKey::MergeFrom(from._internal_reference_conv());
      break;
    }
    case kReferenceGemm: {
      _internal_mutable_reference_gemm()->::tensorflow::AutotuneResult_GemmKey::MergeFrom(from._internal_reference_gemm());
      break;
    }
    case KEY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.AutotuneResult.FailureResult)
}

void AutotuneResult_FailureResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AutotuneResult_FailureResult_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&kind_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buffer_address_) -
      reinterpret_cast<char*>(&kind_)) + sizeof(buffer_address_));
  clear_has_key();
}

AutotuneResult_FailureResult::~AutotuneResult_FailureResult() {
  // @@protoc_insertion_point(destructor:tensorflow.AutotuneResult.FailureResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AutotuneResult_FailureResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_key()) {
    clear_key();
  }
}

void AutotuneResult_FailureResult::ArenaDtor(void* object) {
  AutotuneResult_FailureResult* _this = reinterpret_cast< AutotuneResult_FailureResult* >(object);
  (void)_this;
}
void AutotuneResult_FailureResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AutotuneResult_FailureResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutotuneResult_FailureResult& AutotuneResult_FailureResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutotuneResult_FailureResult_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto.base);
  return *internal_default_instance();
}


void AutotuneResult_FailureResult::clear_key() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.AutotuneResult.FailureResult)
  switch (key_case()) {
    case kReferenceConv: {
      if (GetArena() == nullptr) {
        delete key_.reference_conv_;
      }
      break;
    }
    case kReferenceGemm: {
      if (GetArena() == nullptr) {
        delete key_.reference_gemm_;
      }
      break;
    }
    case KEY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KEY_NOT_SET;
}


void AutotuneResult_FailureResult::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.AutotuneResult.FailureResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&kind_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buffer_address_) -
      reinterpret_cast<char*>(&kind_)) + sizeof(buffer_address_));
  clear_key();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutotuneResult_FailureResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.AutotuneResult.FailureKind kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_kind(static_cast<::tensorflow::AutotuneResult_FailureKind>(val));
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.AutotuneResult.FailureResult.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.AutotuneResult.ConvKey reference_conv = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference_conv(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.AutotuneResult.GemmKey reference_gemm = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference_gemm(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 buffer_address = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          buffer_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AutotuneResult_FailureResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.AutotuneResult.FailureResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.AutotuneResult.FailureKind kind = 1;
  if (this->kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_kind(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.AutotuneResult.FailureResult.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // .tensorflow.AutotuneResult.ConvKey reference_conv = 11;
  if (_internal_has_reference_conv()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::reference_conv(this), target, stream);
  }

  // .tensorflow.AutotuneResult.GemmKey reference_gemm = 12;
  if (_internal_has_reference_gemm()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::reference_gemm(this), target, stream);
  }

  // int64 buffer_address = 13;
  if (this->buffer_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_buffer_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.AutotuneResult.FailureResult)
  return target;
}

size_t AutotuneResult_FailureResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.AutotuneResult.FailureResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // .tensorflow.AutotuneResult.FailureKind kind = 1;
  if (this->kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kind());
  }

  // int64 buffer_address = 13;
  if (this->buffer_address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_buffer_address());
  }

  switch (key_case()) {
    // .tensorflow.AutotuneResult.ConvKey reference_conv = 11;
    case kReferenceConv: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *key_.reference_conv_);
      break;
    }
    // .tensorflow.AutotuneResult.GemmKey reference_gemm = 12;
    case kReferenceGemm: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *key_.reference_gemm_);
      break;
    }
    case KEY_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutotuneResult_FailureResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.AutotuneResult.FailureResult)
  GOOGLE_DCHECK_NE(&from, this);
  const AutotuneResult_FailureResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AutotuneResult_FailureResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.AutotuneResult.FailureResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.AutotuneResult.FailureResult)
    MergeFrom(*source);
  }
}

void AutotuneResult_FailureResult::MergeFrom(const AutotuneResult_FailureResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.AutotuneResult.FailureResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {
    _internal_set_msg(from._internal_msg());
  }
  if (from.kind() != 0) {
    _internal_set_kind(from._internal_kind());
  }
  if (from.buffer_address() != 0) {
    _internal_set_buffer_address(from._internal_buffer_address());
  }
  switch (from.key_case()) {
    case kReferenceConv: {
      _internal_mutable_reference_conv()->::tensorflow::AutotuneResult_ConvKey::MergeFrom(from._internal_reference_conv());
      break;
    }
    case kReferenceGemm: {
      _internal_mutable_reference_gemm()->::tensorflow::AutotuneResult_GemmKey::MergeFrom(from._internal_reference_gemm());
      break;
    }
    case KEY_NOT_SET: {
      break;
    }
  }
}

void AutotuneResult_FailureResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.AutotuneResult.FailureResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutotuneResult_FailureResult::CopyFrom(const AutotuneResult_FailureResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.AutotuneResult.FailureResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutotuneResult_FailureResult::IsInitialized() const {
  return true;
}

void AutotuneResult_FailureResult::InternalSwap(AutotuneResult_FailureResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutotuneResult_FailureResult, buffer_address_)
      + sizeof(AutotuneResult_FailureResult::buffer_address_)
      - PROTOBUF_FIELD_OFFSET(AutotuneResult_FailureResult, kind_)>(
          reinterpret_cast<char*>(&kind_),
          reinterpret_cast<char*>(&other->kind_));
  swap(key_, other->key_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AutotuneResult_FailureResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AutotuneResult_ConvKey::InitAsDefaultInstance() {
}
class AutotuneResult_ConvKey::_Internal {
 public:
};

AutotuneResult_ConvKey::AutotuneResult_ConvKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.AutotuneResult.ConvKey)
}
AutotuneResult_ConvKey::AutotuneResult_ConvKey(const AutotuneResult_ConvKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&algorithm_, &from.algorithm_,
    static_cast<size_t>(reinterpret_cast<char*>(&tensor_ops_enabled_) -
    reinterpret_cast<char*>(&algorithm_)) + sizeof(tensor_ops_enabled_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.AutotuneResult.ConvKey)
}

void AutotuneResult_ConvKey::SharedCtor() {
  ::memset(&algorithm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tensor_ops_enabled_) -
      reinterpret_cast<char*>(&algorithm_)) + sizeof(tensor_ops_enabled_));
}

AutotuneResult_ConvKey::~AutotuneResult_ConvKey() {
  // @@protoc_insertion_point(destructor:tensorflow.AutotuneResult.ConvKey)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AutotuneResult_ConvKey::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AutotuneResult_ConvKey::ArenaDtor(void* object) {
  AutotuneResult_ConvKey* _this = reinterpret_cast< AutotuneResult_ConvKey* >(object);
  (void)_this;
}
void AutotuneResult_ConvKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AutotuneResult_ConvKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutotuneResult_ConvKey& AutotuneResult_ConvKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutotuneResult_ConvKey_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto.base);
  return *internal_default_instance();
}


void AutotuneResult_ConvKey::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.AutotuneResult.ConvKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&algorithm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tensor_ops_enabled_) -
      reinterpret_cast<char*>(&algorithm_)) + sizeof(tensor_ops_enabled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutotuneResult_ConvKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 algorithm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          algorithm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool tensor_ops_enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tensor_ops_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AutotuneResult_ConvKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.AutotuneResult.ConvKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 algorithm = 1;
  if (this->algorithm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_algorithm(), target);
  }

  // bool tensor_ops_enabled = 2;
  if (this->tensor_ops_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_tensor_ops_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.AutotuneResult.ConvKey)
  return target;
}

size_t AutotuneResult_ConvKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.AutotuneResult.ConvKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 algorithm = 1;
  if (this->algorithm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_algorithm());
  }

  // bool tensor_ops_enabled = 2;
  if (this->tensor_ops_enabled() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutotuneResult_ConvKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.AutotuneResult.ConvKey)
  GOOGLE_DCHECK_NE(&from, this);
  const AutotuneResult_ConvKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AutotuneResult_ConvKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.AutotuneResult.ConvKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.AutotuneResult.ConvKey)
    MergeFrom(*source);
  }
}

void AutotuneResult_ConvKey::MergeFrom(const AutotuneResult_ConvKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.AutotuneResult.ConvKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.algorithm() != 0) {
    _internal_set_algorithm(from._internal_algorithm());
  }
  if (from.tensor_ops_enabled() != 0) {
    _internal_set_tensor_ops_enabled(from._internal_tensor_ops_enabled());
  }
}

void AutotuneResult_ConvKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.AutotuneResult.ConvKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutotuneResult_ConvKey::CopyFrom(const AutotuneResult_ConvKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.AutotuneResult.ConvKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutotuneResult_ConvKey::IsInitialized() const {
  return true;
}

void AutotuneResult_ConvKey::InternalSwap(AutotuneResult_ConvKey* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutotuneResult_ConvKey, tensor_ops_enabled_)
      + sizeof(AutotuneResult_ConvKey::tensor_ops_enabled_)
      - PROTOBUF_FIELD_OFFSET(AutotuneResult_ConvKey, algorithm_)>(
          reinterpret_cast<char*>(&algorithm_),
          reinterpret_cast<char*>(&other->algorithm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AutotuneResult_ConvKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AutotuneResult_GemmKey::InitAsDefaultInstance() {
}
class AutotuneResult_GemmKey::_Internal {
 public:
};

AutotuneResult_GemmKey::AutotuneResult_GemmKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.AutotuneResult.GemmKey)
}
AutotuneResult_GemmKey::AutotuneResult_GemmKey(const AutotuneResult_GemmKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  algorithm_ = from.algorithm_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.AutotuneResult.GemmKey)
}

void AutotuneResult_GemmKey::SharedCtor() {
  algorithm_ = PROTOBUF_LONGLONG(0);
}

AutotuneResult_GemmKey::~AutotuneResult_GemmKey() {
  // @@protoc_insertion_point(destructor:tensorflow.AutotuneResult.GemmKey)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AutotuneResult_GemmKey::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AutotuneResult_GemmKey::ArenaDtor(void* object) {
  AutotuneResult_GemmKey* _this = reinterpret_cast< AutotuneResult_GemmKey* >(object);
  (void)_this;
}
void AutotuneResult_GemmKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AutotuneResult_GemmKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutotuneResult_GemmKey& AutotuneResult_GemmKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutotuneResult_GemmKey_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto.base);
  return *internal_default_instance();
}


void AutotuneResult_GemmKey::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.AutotuneResult.GemmKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  algorithm_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutotuneResult_GemmKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 algorithm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          algorithm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AutotuneResult_GemmKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.AutotuneResult.GemmKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 algorithm = 1;
  if (this->algorithm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_algorithm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.AutotuneResult.GemmKey)
  return target;
}

size_t AutotuneResult_GemmKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.AutotuneResult.GemmKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 algorithm = 1;
  if (this->algorithm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_algorithm());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutotuneResult_GemmKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.AutotuneResult.GemmKey)
  GOOGLE_DCHECK_NE(&from, this);
  const AutotuneResult_GemmKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AutotuneResult_GemmKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.AutotuneResult.GemmKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.AutotuneResult.GemmKey)
    MergeFrom(*source);
  }
}

void AutotuneResult_GemmKey::MergeFrom(const AutotuneResult_GemmKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.AutotuneResult.GemmKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.algorithm() != 0) {
    _internal_set_algorithm(from._internal_algorithm());
  }
}

void AutotuneResult_GemmKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.AutotuneResult.GemmKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutotuneResult_GemmKey::CopyFrom(const AutotuneResult_GemmKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.AutotuneResult.GemmKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutotuneResult_GemmKey::IsInitialized() const {
  return true;
}

void AutotuneResult_GemmKey::InternalSwap(AutotuneResult_GemmKey* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(algorithm_, other->algorithm_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AutotuneResult_GemmKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AutotuneResult::InitAsDefaultInstance() {
  ::tensorflow::_AutotuneResult_default_instance_._instance.get_mutable()->run_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
  ::tensorflow::_AutotuneResult_default_instance_._instance.get_mutable()->failure_ = const_cast< ::tensorflow::AutotuneResult_FailureResult*>(
      ::tensorflow::AutotuneResult_FailureResult::internal_default_instance());
  ::tensorflow::_AutotuneResult_default_instance_.conv_ = const_cast< ::tensorflow::AutotuneResult_ConvKey*>(
      ::tensorflow::AutotuneResult_ConvKey::internal_default_instance());
  ::tensorflow::_AutotuneResult_default_instance_.gemm_ = const_cast< ::tensorflow::AutotuneResult_GemmKey*>(
      ::tensorflow::AutotuneResult_GemmKey::internal_default_instance());
}
class AutotuneResult::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Duration& run_time(const AutotuneResult* msg);
  static const ::tensorflow::AutotuneResult_FailureResult& failure(const AutotuneResult* msg);
  static const ::tensorflow::AutotuneResult_ConvKey& conv(const AutotuneResult* msg);
  static const ::tensorflow::AutotuneResult_GemmKey& gemm(const AutotuneResult* msg);
};

const PROTOBUF_NAMESPACE_ID::Duration&
AutotuneResult::_Internal::run_time(const AutotuneResult* msg) {
  return *msg->run_time_;
}
const ::tensorflow::AutotuneResult_FailureResult&
AutotuneResult::_Internal::failure(const AutotuneResult* msg) {
  return *msg->failure_;
}
const ::tensorflow::AutotuneResult_ConvKey&
AutotuneResult::_Internal::conv(const AutotuneResult* msg) {
  return *msg->key_.conv_;
}
const ::tensorflow::AutotuneResult_GemmKey&
AutotuneResult::_Internal::gemm(const AutotuneResult* msg) {
  return *msg->key_.gemm_;
}
void AutotuneResult::clear_run_time() {
  if (GetArena() == nullptr && run_time_ != nullptr) {
    delete run_time_;
  }
  run_time_ = nullptr;
}
void AutotuneResult::set_allocated_conv(::tensorflow::AutotuneResult_ConvKey* conv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_key();
  if (conv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(conv);
    if (message_arena != submessage_arena) {
      conv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conv, submessage_arena);
    }
    set_has_conv();
    key_.conv_ = conv;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.AutotuneResult.conv)
}
void AutotuneResult::set_allocated_gemm(::tensorflow::AutotuneResult_GemmKey* gemm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_key();
  if (gemm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gemm);
    if (message_arena != submessage_arena) {
      gemm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gemm, submessage_arena);
    }
    set_has_gemm();
    key_.gemm_ = gemm;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.AutotuneResult.gemm)
}
AutotuneResult::AutotuneResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.AutotuneResult)
}
AutotuneResult::AutotuneResult(const AutotuneResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_failure()) {
    failure_ = new ::tensorflow::AutotuneResult_FailureResult(*from.failure_);
  } else {
    failure_ = nullptr;
  }
  if (from._internal_has_run_time()) {
    run_time_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.run_time_);
  } else {
    run_time_ = nullptr;
  }
  scratch_bytes_ = from.scratch_bytes_;
  clear_has_key();
  switch (from.key_case()) {
    case kConv: {
      _internal_mutable_conv()->::tensorflow::AutotuneResult_ConvKey::MergeFrom(from._internal_conv());
      break;
    }
    case kGemm: {
      _internal_mutable_gemm()->::tensorflow::AutotuneResult_GemmKey::MergeFrom(from._internal_gemm());
      break;
    }
    case KEY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.AutotuneResult)
}

void AutotuneResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AutotuneResult_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto.base);
  ::memset(&failure_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scratch_bytes_) -
      reinterpret_cast<char*>(&failure_)) + sizeof(scratch_bytes_));
  clear_has_key();
}

AutotuneResult::~AutotuneResult() {
  // @@protoc_insertion_point(destructor:tensorflow.AutotuneResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AutotuneResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete failure_;
  if (this != internal_default_instance()) delete run_time_;
  if (has_key()) {
    clear_key();
  }
}

void AutotuneResult::ArenaDtor(void* object) {
  AutotuneResult* _this = reinterpret_cast< AutotuneResult* >(object);
  (void)_this;
}
void AutotuneResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AutotuneResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutotuneResult& AutotuneResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutotuneResult_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto.base);
  return *internal_default_instance();
}


void AutotuneResult::clear_key() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.AutotuneResult)
  switch (key_case()) {
    case kConv: {
      if (GetArena() == nullptr) {
        delete key_.conv_;
      }
      break;
    }
    case kGemm: {
      if (GetArena() == nullptr) {
        delete key_.gemm_;
      }
      break;
    }
    case KEY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KEY_NOT_SET;
}


void AutotuneResult::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.AutotuneResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && failure_ != nullptr) {
    delete failure_;
  }
  failure_ = nullptr;
  if (GetArena() == nullptr && run_time_ != nullptr) {
    delete run_time_;
  }
  run_time_ = nullptr;
  scratch_bytes_ = PROTOBUF_LONGLONG(0);
  clear_key();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutotuneResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.AutotuneResult.ConvKey conv = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_conv(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.AutotuneResult.GemmKey gemm = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_gemm(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.AutotuneResult.FailureResult failure = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_failure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 scratch_bytes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          scratch_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration run_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_run_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AutotuneResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.AutotuneResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.AutotuneResult.ConvKey conv = 5;
  if (_internal_has_conv()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::conv(this), target, stream);
  }

  // .tensorflow.AutotuneResult.GemmKey gemm = 6;
  if (_internal_has_gemm()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::gemm(this), target, stream);
  }

  // .tensorflow.AutotuneResult.FailureResult failure = 7;
  if (this->has_failure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::failure(this), target, stream);
  }

  // int64 scratch_bytes = 8;
  if (this->scratch_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_scratch_bytes(), target);
  }

  // .google.protobuf.Duration run_time = 9;
  if (this->has_run_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::run_time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.AutotuneResult)
  return target;
}

size_t AutotuneResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.AutotuneResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.AutotuneResult.FailureResult failure = 7;
  if (this->has_failure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *failure_);
  }

  // .google.protobuf.Duration run_time = 9;
  if (this->has_run_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *run_time_);
  }

  // int64 scratch_bytes = 8;
  if (this->scratch_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_scratch_bytes());
  }

  switch (key_case()) {
    // .tensorflow.AutotuneResult.ConvKey conv = 5;
    case kConv: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *key_.conv_);
      break;
    }
    // .tensorflow.AutotuneResult.GemmKey gemm = 6;
    case kGemm: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *key_.gemm_);
      break;
    }
    case KEY_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutotuneResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.AutotuneResult)
  GOOGLE_DCHECK_NE(&from, this);
  const AutotuneResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AutotuneResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.AutotuneResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.AutotuneResult)
    MergeFrom(*source);
  }
}

void AutotuneResult::MergeFrom(const AutotuneResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.AutotuneResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_failure()) {
    _internal_mutable_failure()->::tensorflow::AutotuneResult_FailureResult::MergeFrom(from._internal_failure());
  }
  if (from.has_run_time()) {
    _internal_mutable_run_time()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_run_time());
  }
  if (from.scratch_bytes() != 0) {
    _internal_set_scratch_bytes(from._internal_scratch_bytes());
  }
  switch (from.key_case()) {
    case kConv: {
      _internal_mutable_conv()->::tensorflow::AutotuneResult_ConvKey::MergeFrom(from._internal_conv());
      break;
    }
    case kGemm: {
      _internal_mutable_gemm()->::tensorflow::AutotuneResult_GemmKey::MergeFrom(from._internal_gemm());
      break;
    }
    case KEY_NOT_SET: {
      break;
    }
  }
}

void AutotuneResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.AutotuneResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutotuneResult::CopyFrom(const AutotuneResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.AutotuneResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutotuneResult::IsInitialized() const {
  return true;
}

void AutotuneResult::InternalSwap(AutotuneResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutotuneResult, scratch_bytes_)
      + sizeof(AutotuneResult::scratch_bytes_)
      - PROTOBUF_FIELD_OFFSET(AutotuneResult, failure_)>(
          reinterpret_cast<char*>(&failure_),
          reinterpret_cast<char*>(&other->failure_));
  swap(key_, other->key_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AutotuneResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AutotuningLog::InitAsDefaultInstance() {
  ::tensorflow::_AutotuningLog_default_instance_._instance.get_mutable()->instr_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
  ::tensorflow::_AutotuningLog_default_instance_._instance.get_mutable()->cudnn_version_ = const_cast< ::tensorflow::CudnnVersion*>(
      ::tensorflow::CudnnVersion::internal_default_instance());
  ::tensorflow::_AutotuningLog_default_instance_._instance.get_mutable()->compute_capability_ = const_cast< ::tensorflow::ComputeCapability*>(
      ::tensorflow::ComputeCapability::internal_default_instance());
}
class AutotuningLog::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& instr(const AutotuningLog* msg);
  static const ::tensorflow::CudnnVersion& cudnn_version(const AutotuningLog* msg);
  static const ::tensorflow::ComputeCapability& compute_capability(const AutotuningLog* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
AutotuningLog::_Internal::instr(const AutotuningLog* msg) {
  return *msg->instr_;
}
const ::tensorflow::CudnnVersion&
AutotuningLog::_Internal::cudnn_version(const AutotuningLog* msg) {
  return *msg->cudnn_version_;
}
const ::tensorflow::ComputeCapability&
AutotuningLog::_Internal::compute_capability(const AutotuningLog* msg) {
  return *msg->compute_capability_;
}
void AutotuningLog::clear_instr() {
  if (GetArena() == nullptr && instr_ != nullptr) {
    delete instr_;
  }
  instr_ = nullptr;
}
AutotuningLog::AutotuningLog(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.AutotuningLog)
}
AutotuningLog::AutotuningLog(const AutotuningLog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_pci_bus_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_pci_bus_id().empty()) {
    device_pci_bus_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_pci_bus_id(),
      GetArena());
  }
  blas_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_blas_version().empty()) {
    blas_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_blas_version(),
      GetArena());
  }
  if (from._internal_has_instr()) {
    instr_ = new PROTOBUF_NAMESPACE_ID::Any(*from.instr_);
  } else {
    instr_ = nullptr;
  }
  if (from._internal_has_cudnn_version()) {
    cudnn_version_ = new ::tensorflow::CudnnVersion(*from.cudnn_version_);
  } else {
    cudnn_version_ = nullptr;
  }
  if (from._internal_has_compute_capability()) {
    compute_capability_ = new ::tensorflow::ComputeCapability(*from.compute_capability_);
  } else {
    compute_capability_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.AutotuningLog)
}

void AutotuningLog::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AutotuningLog_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto.base);
  device_pci_bus_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  blas_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&instr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compute_capability_) -
      reinterpret_cast<char*>(&instr_)) + sizeof(compute_capability_));
}

AutotuningLog::~AutotuningLog() {
  // @@protoc_insertion_point(destructor:tensorflow.AutotuningLog)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AutotuningLog::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_pci_bus_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  blas_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete instr_;
  if (this != internal_default_instance()) delete cudnn_version_;
  if (this != internal_default_instance()) delete compute_capability_;
}

void AutotuningLog::ArenaDtor(void* object) {
  AutotuningLog* _this = reinterpret_cast< AutotuningLog* >(object);
  (void)_this;
}
void AutotuningLog::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AutotuningLog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutotuningLog& AutotuningLog::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutotuningLog_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto.base);
  return *internal_default_instance();
}


void AutotuningLog::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.AutotuningLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  device_pci_bus_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  blas_version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && instr_ != nullptr) {
    delete instr_;
  }
  instr_ = nullptr;
  if (GetArena() == nullptr && cudnn_version_ != nullptr) {
    delete cudnn_version_;
  }
  cudnn_version_ = nullptr;
  if (GetArena() == nullptr && compute_capability_ != nullptr) {
    delete compute_capability_;
  }
  compute_capability_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutotuningLog::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Any instr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_instr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.AutotuneResult results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .tensorflow.CudnnVersion cudnn_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cudnn_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.ComputeCapability compute_capability = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_compute_capability(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_pci_bus_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_device_pci_bus_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.AutotuningLog.device_pci_bus_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string blas_version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_blas_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.AutotuningLog.blas_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AutotuningLog::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.AutotuningLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any instr = 1;
  if (this->has_instr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::instr(this), target, stream);
  }

  // repeated .tensorflow.AutotuneResult results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_results(i), target, stream);
  }

  // .tensorflow.CudnnVersion cudnn_version = 3;
  if (this->has_cudnn_version()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::cudnn_version(this), target, stream);
  }

  // .tensorflow.ComputeCapability compute_capability = 4;
  if (this->has_compute_capability()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::compute_capability(this), target, stream);
  }

  // string device_pci_bus_id = 5;
  if (this->device_pci_bus_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_pci_bus_id().data(), static_cast<int>(this->_internal_device_pci_bus_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.AutotuningLog.device_pci_bus_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_device_pci_bus_id(), target);
  }

  // string blas_version = 6;
  if (this->blas_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_blas_version().data(), static_cast<int>(this->_internal_blas_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.AutotuningLog.blas_version");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_blas_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.AutotuningLog)
  return target;
}

size_t AutotuningLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.AutotuningLog)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.AutotuneResult results = 2;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string device_pci_bus_id = 5;
  if (this->device_pci_bus_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_pci_bus_id());
  }

  // string blas_version = 6;
  if (this->blas_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_blas_version());
  }

  // .google.protobuf.Any instr = 1;
  if (this->has_instr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *instr_);
  }

  // .tensorflow.CudnnVersion cudnn_version = 3;
  if (this->has_cudnn_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cudnn_version_);
  }

  // .tensorflow.ComputeCapability compute_capability = 4;
  if (this->has_compute_capability()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *compute_capability_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutotuningLog::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.AutotuningLog)
  GOOGLE_DCHECK_NE(&from, this);
  const AutotuningLog* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AutotuningLog>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.AutotuningLog)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.AutotuningLog)
    MergeFrom(*source);
  }
}

void AutotuningLog::MergeFrom(const AutotuningLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.AutotuningLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from.device_pci_bus_id().size() > 0) {
    _internal_set_device_pci_bus_id(from._internal_device_pci_bus_id());
  }
  if (from.blas_version().size() > 0) {
    _internal_set_blas_version(from._internal_blas_version());
  }
  if (from.has_instr()) {
    _internal_mutable_instr()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_instr());
  }
  if (from.has_cudnn_version()) {
    _internal_mutable_cudnn_version()->::tensorflow::CudnnVersion::MergeFrom(from._internal_cudnn_version());
  }
  if (from.has_compute_capability()) {
    _internal_mutable_compute_capability()->::tensorflow::ComputeCapability::MergeFrom(from._internal_compute_capability());
  }
}

void AutotuningLog::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.AutotuningLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutotuningLog::CopyFrom(const AutotuningLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.AutotuningLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutotuningLog::IsInitialized() const {
  return true;
}

void AutotuningLog::InternalSwap(AutotuningLog* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
  device_pci_bus_id_.Swap(&other->device_pci_bus_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  blas_version_.Swap(&other->blas_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutotuningLog, compute_capability_)
      + sizeof(AutotuningLog::compute_capability_)
      - PROTOBUF_FIELD_OFFSET(AutotuningLog, instr_)>(
          reinterpret_cast<char*>(&instr_),
          reinterpret_cast<char*>(&other->instr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AutotuningLog::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::CudnnVersion* Arena::CreateMaybeMessage< ::tensorflow::CudnnVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CudnnVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::ComputeCapability* Arena::CreateMaybeMessage< ::tensorflow::ComputeCapability >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::ComputeCapability >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::AutotuneResult_FailureResult* Arena::CreateMaybeMessage< ::tensorflow::AutotuneResult_FailureResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::AutotuneResult_FailureResult >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::AutotuneResult_ConvKey* Arena::CreateMaybeMessage< ::tensorflow::AutotuneResult_ConvKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::AutotuneResult_ConvKey >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::AutotuneResult_GemmKey* Arena::CreateMaybeMessage< ::tensorflow::AutotuneResult_GemmKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::AutotuneResult_GemmKey >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::AutotuneResult* Arena::CreateMaybeMessage< ::tensorflow::AutotuneResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::AutotuneResult >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::AutotuningLog* Arena::CreateMaybeMessage< ::tensorflow::AutotuningLog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::AutotuningLog >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
