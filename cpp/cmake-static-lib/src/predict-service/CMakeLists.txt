cmake_minimum_required(VERSION 3.0.0)
project(predict-service VERSION 0.1.0)

include(CTest)
enable_testing()

include_directories(/cpp/src/gen)
include_directories(/usr/local/include)

link_directories(/usr/local/lib)
link_directories(/grpc/cmake/build)
link_directories(/usr/lib/x86_64-linux-gnu)

link_directories(/usr/local/lib )
link_directories(/grpc/cmake/build )
link_directories(/usr/lib )
link_directories(/grpc/cmake/build/third_party/boringssl-with-bazel)
link_directories(/grpc/cmake/build/third_party/abseil-cpp/absl/base)
link_directories(/grpc/cmake/build/third_party/abseil-cpp/absl/strings)
link_directories(/grpc/cmake/build/third_party/abseil-cpp/absl/container)
link_directories(/grpc/cmake/build/third_party/abseil-cpp/absl/flags)
link_directories(/grpc/cmake/build/third_party/abseil-cpp/absl/synchronization)
link_directories(/grpc/cmake/build/third_party/zlib)
link_directories(/grpc/cmake/build/third_party/abseil-cpp/absl/time)
link_directories(/grpc/cmake/build/third_party/abseil-cpp/absl/random)
link_directories(/grpc/cmake/build/third_party/abseil-cpp/absl/types)
link_directories(/grpc/cmake/build/third_party/boringssl-with-bazel)
link_directories(/grpc/cmake/build/third_party/abseil-cpp/absl/status)
link_directories(/grpc/cmake/build/third_party/abseil-cpp/absl/hash)
link_directories(/grpc/cmake/build/third_party/abseil-cpp/absl/debugging)
link_directories(/grpc/cmake/build/third_party/abseil-cpp/absl/numeric)
link_directories(/grpc/cmake/build/third_party/cares/cares/lib)
link_directories(/cpp/src/cmake-static-lib/build)

file(GLOB_RECURSE SOURCES RELATIVE ${CMAKE_SOURCE_DIR} "./*.cc")

add_executable(predict-service ${SOURCES})
target_link_libraries(${PROJECT_NAME} -ltfclient)
target_link_libraries(${PROJECT_NAME} -lboost_program_options -lprotobuf -pthread -lgrpc++ -lgrpc -lgpr)
target_link_libraries(${PROJECT_NAME} -laddress_sorting -lgrpc++_alts -lgrpc++_error_details -lgrpc++_reflection)
target_link_libraries(${PROJECT_NAME} -lgrpc++_unsecure -lgrpc_plugin_support -lgrpc_unsecure -lgrpcpp_channelz -lupb)
target_link_libraries(${PROJECT_NAME} -labsl_base)
target_link_libraries(${PROJECT_NAME} -labsl_str_format_internal)
target_link_libraries(${PROJECT_NAME} -labsl_strings_internal)
target_link_libraries(${PROJECT_NAME} -labsl_strings)
target_link_libraries(${PROJECT_NAME} -labsl_dynamic_annotations)
target_link_libraries(${PROJECT_NAME} -labsl_flags_program_name)
target_link_libraries(${PROJECT_NAME} -labsl_time)
target_link_libraries(${PROJECT_NAME} -labsl_int128)
target_link_libraries(${PROJECT_NAME} -labsl_flags_usage)
target_link_libraries(${PROJECT_NAME} -labsl_malloc_internal)
target_link_libraries(${PROJECT_NAME} -labsl_city)
target_link_libraries(${PROJECT_NAME} -labsl_random_internal_randen_hwaes)
target_link_libraries(${PROJECT_NAME} -labsl_raw_logging_internal)
target_link_libraries(${PROJECT_NAME} -labsl_random_internal_seed_material)
target_link_libraries(${PROJECT_NAME} -labsl_flags_parse)
target_link_libraries(${PROJECT_NAME} -labsl_random_distributions)
target_link_libraries(${PROJECT_NAME} -labsl_failure_signal_handler)
target_link_libraries(${PROJECT_NAME} -labsl_spinlock_wait)
target_link_libraries(${PROJECT_NAME} -labsl_random_seed_gen_exception)
target_link_libraries(${PROJECT_NAME} -labsl_bad_variant_access)
target_link_libraries(${PROJECT_NAME} -labsl_log_severity)
target_link_libraries(${PROJECT_NAME} -labsl_examine_stack)
target_link_libraries(${PROJECT_NAME} -labsl_graphcycles_internal)
target_link_libraries(${PROJECT_NAME} -labsl_leak_check_disable)
target_link_libraries(${PROJECT_NAME} -labsl_scoped_set_env)
target_link_libraries(${PROJECT_NAME} -labsl_debugging_internal)
target_link_libraries(${PROJECT_NAME} -labsl_cord)
target_link_libraries(${PROJECT_NAME} -labsl_synchronization)
target_link_libraries(${PROJECT_NAME} -labsl_periodic_sampler)
target_link_libraries(${PROJECT_NAME} -labsl_raw_hash_set)
target_link_libraries(${PROJECT_NAME} -labsl_stacktrace)
target_link_libraries(${PROJECT_NAME} -labsl_flags_usage_internal)
target_link_libraries(${PROJECT_NAME} -labsl_flags_internal)
target_link_libraries(${PROJECT_NAME} -labsl_time_zone)
target_link_libraries(${PROJECT_NAME} -labsl_exponential_biased)
target_link_libraries(${PROJECT_NAME} -labsl_throw_delegate)
target_link_libraries(${PROJECT_NAME} -labsl_bad_optional_access)
target_link_libraries(${PROJECT_NAME} -labsl_random_internal_pool_urbg)
target_link_libraries(${PROJECT_NAME} -labsl_symbolize)
target_link_libraries(${PROJECT_NAME} -labsl_flags_marshalling)
target_link_libraries(${PROJECT_NAME} -labsl_random_seed_sequences)
target_link_libraries(${PROJECT_NAME} -labsl_status)
target_link_libraries(${PROJECT_NAME} -labsl_hash)
target_link_libraries(${PROJECT_NAME} -labsl_random_internal_randen)
target_link_libraries(${PROJECT_NAME} -labsl_flags_config)
target_link_libraries(${PROJECT_NAME} -labsl_random_internal_randen_hwaes_impl)
target_link_libraries(${PROJECT_NAME} -labsl_random_internal_randen_slow)
target_link_libraries(${PROJECT_NAME} -labsl_flags_registry)
target_link_libraries(${PROJECT_NAME} -labsl_demangle_internal)
target_link_libraries(${PROJECT_NAME} -labsl_flags)
target_link_libraries(${PROJECT_NAME} -labsl_bad_any_cast_impl)
target_link_libraries(${PROJECT_NAME} -labsl_leak_check)
target_link_libraries(${PROJECT_NAME} -labsl_random_internal_distribution_test_util)
target_link_libraries(${PROJECT_NAME} -labsl_civil_time)
target_link_libraries(${PROJECT_NAME} -labsl_hashtablez_sampler)
target_link_libraries(${PROJECT_NAME} -lcares)
target_link_libraries(${PROJECT_NAME} -lz)
target_link_libraries(${PROJECT_NAME} -lssl)
target_link_libraries(${PROJECT_NAME} -lcrypto )
target_link_libraries(${PROJECT_NAME} -ldl)

set(CPACK_PROJECT_NAME ${PROJECT_NAME})
set(CPACK_PROJECT_VERSION ${PROJECT_VERSION})
include(CPack)
