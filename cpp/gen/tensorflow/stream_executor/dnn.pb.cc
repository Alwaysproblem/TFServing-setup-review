// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/stream_executor/dnn.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/stream_executor/dnn.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace stream_executor {
namespace dnn {

namespace {

const ::google::protobuf::Descriptor* TensorDescriptorProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TensorDescriptorProto_reflection_ = NULL;
struct TensorDescriptorProtoOneofInstance {
  int data_layout_;
  int filter_layout_;
}* TensorDescriptorProto_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* AlgorithmProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlgorithmProto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AlgorithmProto_MathType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ConvolutionDescriptorProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConvolutionDescriptorProto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DataType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DataLayout_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FilterLayout_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ActivationMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ConvolutionMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ConvolutionKind_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_2fstream_5fexecutor_2fdnn_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tensorflow_2fstream_5fexecutor_2fdnn_2eproto() {
  protobuf_AddDesc_tensorflow_2fstream_5fexecutor_2fdnn_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow/stream_executor/dnn.proto");
  GOOGLE_CHECK(file != NULL);
  TensorDescriptorProto_descriptor_ = file->message_type(0);
  static const int TensorDescriptorProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorDescriptorProto, dimensions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorDescriptorProto, data_type_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TensorDescriptorProto_default_oneof_instance_, data_layout_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TensorDescriptorProto_default_oneof_instance_, filter_layout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorDescriptorProto, layout_oneof_),
  };
  TensorDescriptorProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TensorDescriptorProto_descriptor_,
      TensorDescriptorProto::default_instance_,
      TensorDescriptorProto_offsets_,
      -1,
      -1,
      -1,
      TensorDescriptorProto_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorDescriptorProto, _oneof_case_[0]),
      sizeof(TensorDescriptorProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorDescriptorProto, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorDescriptorProto, _is_default_instance_));
  AlgorithmProto_descriptor_ = file->message_type(1);
  static const int AlgorithmProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlgorithmProto, algo_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlgorithmProto, math_type_),
  };
  AlgorithmProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AlgorithmProto_descriptor_,
      AlgorithmProto::default_instance_,
      AlgorithmProto_offsets_,
      -1,
      -1,
      -1,
      sizeof(AlgorithmProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlgorithmProto, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlgorithmProto, _is_default_instance_));
  AlgorithmProto_MathType_descriptor_ = AlgorithmProto_descriptor_->enum_type(0);
  ConvolutionDescriptorProto_descriptor_ = file->message_type(2);
  static const int ConvolutionDescriptorProto_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionDescriptorProto, paddings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionDescriptorProto, strides_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionDescriptorProto, dilations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionDescriptorProto, compute_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionDescriptorProto, group_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionDescriptorProto, convolution_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionDescriptorProto, name_),
  };
  ConvolutionDescriptorProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConvolutionDescriptorProto_descriptor_,
      ConvolutionDescriptorProto::default_instance_,
      ConvolutionDescriptorProto_offsets_,
      -1,
      -1,
      -1,
      sizeof(ConvolutionDescriptorProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionDescriptorProto, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionDescriptorProto, _is_default_instance_));
  DataType_descriptor_ = file->enum_type(0);
  DataLayout_descriptor_ = file->enum_type(1);
  FilterLayout_descriptor_ = file->enum_type(2);
  ActivationMode_descriptor_ = file->enum_type(3);
  ConvolutionMode_descriptor_ = file->enum_type(4);
  ConvolutionKind_descriptor_ = file->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_2fstream_5fexecutor_2fdnn_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TensorDescriptorProto_descriptor_, &TensorDescriptorProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AlgorithmProto_descriptor_, &AlgorithmProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConvolutionDescriptorProto_descriptor_, &ConvolutionDescriptorProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_2fstream_5fexecutor_2fdnn_2eproto() {
  delete TensorDescriptorProto::default_instance_;
  delete TensorDescriptorProto_default_oneof_instance_;
  delete TensorDescriptorProto_reflection_;
  delete AlgorithmProto::default_instance_;
  delete AlgorithmProto_reflection_;
  delete ConvolutionDescriptorProto::default_instance_;
  delete ConvolutionDescriptorProto_reflection_;
}

void protobuf_AddDesc_tensorflow_2fstream_5fexecutor_2fdnn_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_tensorflow_2fstream_5fexecutor_2fdnn_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n$tensorflow/stream_executor/dnn.proto\022\023"
    "stream_executor.dnn\"\341\001\n\025TensorDescriptor"
    "Proto\022\022\n\ndimensions\030\001 \003(\003\0220\n\tdata_type\030\002"
    " \001(\0162\035.stream_executor.dnn.DataType\0226\n\013d"
    "ata_layout\030\003 \001(\0162\037.stream_executor.dnn.D"
    "ataLayoutH\000\022:\n\rfilter_layout\030\004 \001(\0162!.str"
    "eam_executor.dnn.FilterLayoutH\000B\016\n\014layou"
    "t_oneof\"\224\001\n\016AlgorithmProto\022\017\n\007algo_id\030\001 "
    "\001(\003\022\?\n\tmath_type\030\002 \001(\0162,.stream_executor"
    ".dnn.AlgorithmProto.MathType\"0\n\010MathType"
    "\022\020\n\014DEFAULT_MATH\020\000\022\022\n\016TENSOR_OP_MATH\020\001\"\352"
    "\001\n\032ConvolutionDescriptorProto\022\020\n\010padding"
    "s\030\001 \003(\003\022\017\n\007strides\030\002 \003(\003\022\021\n\tdilations\030\003 "
    "\003(\003\0223\n\014compute_mode\030\004 \001(\0162\035.stream_execu"
    "tor.dnn.DataType\022\023\n\013group_count\030\005 \001(\005\022>\n"
    "\020convolution_mode\030\006 \001(\0162$.stream_executo"
    "r.dnn.ConvolutionMode\022\014\n\004name\030\007 \001(\t*E\n\010D"
    "ataType\022\n\n\006kFloat\020\000\022\013\n\007kDouble\020\001\022\t\n\005kHal"
    "f\020\002\022\t\n\005kInt8\020\003\022\n\n\006kInt32\020\004*l\n\nDataLayout"
    "\022\021\n\rkYXDepthBatch\020\000\022\021\n\rkYXBatchDepth\020\001\022\021"
    "\n\rkBatchYXDepth\020\002\022\021\n\rkBatchDepthYX\020\003\022\022\n\016"
    "kBatchDepthYX4\020\004*s\n\014FilterLayout\022\022\n\016kOut"
    "putInputYX\020\000\022\022\n\016kOutputYXInput\020\001\022\023\n\017kOut"
    "putInputYX4\020\002\022\022\n\016kInputYXOutput\020\003\022\022\n\016kYX"
    "InputOutput\020\004*f\n\016ActivationMode\022\t\n\005kNone"
    "\020\000\022\014\n\010kSigmoid\020\001\022\t\n\005kRelu\020\002\022\n\n\006kRelu6\020\003\022"
    "\n\n\006kReluX\020\004\022\t\n\005kTanh\020\005\022\r\n\tkBandPass\020\006*9\n"
    "\017ConvolutionMode\022\025\n\021CROSS_CORRELATION\020\000\022"
    "\017\n\013CONVOLUTION\020\001*p\n\017ConvolutionKind\022\013\n\007I"
    "NVALID\020\000\022\013\n\007FORWARD\020\001\022\023\n\017BACKWARD_FILTER"
    "\020\002\022\021\n\rBACKWARD_DATA\020\003\022\033\n\027FORWARD_BIAS_AC"
    "TIVATION\020\004B@Z>github.com/tensorflow/tens"
    "orflow/tensorflow/go/stream_executorb\006pr"
    "oto3", 1324);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/stream_executor/dnn.proto", &protobuf_RegisterTypes);
  TensorDescriptorProto::default_instance_ = new TensorDescriptorProto();
  TensorDescriptorProto_default_oneof_instance_ = new TensorDescriptorProtoOneofInstance();
  AlgorithmProto::default_instance_ = new AlgorithmProto();
  ConvolutionDescriptorProto::default_instance_ = new ConvolutionDescriptorProto();
  TensorDescriptorProto::default_instance_->InitAsDefaultInstance();
  AlgorithmProto::default_instance_->InitAsDefaultInstance();
  ConvolutionDescriptorProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_2fstream_5fexecutor_2fdnn_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_2fstream_5fexecutor_2fdnn_2eproto {
  StaticDescriptorInitializer_tensorflow_2fstream_5fexecutor_2fdnn_2eproto() {
    protobuf_AddDesc_tensorflow_2fstream_5fexecutor_2fdnn_2eproto();
  }
} static_descriptor_initializer_tensorflow_2fstream_5fexecutor_2fdnn_2eproto_;
const ::google::protobuf::EnumDescriptor* DataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataType_descriptor_;
}
bool DataType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DataLayout_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataLayout_descriptor_;
}
bool DataLayout_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FilterLayout_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FilterLayout_descriptor_;
}
bool FilterLayout_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ActivationMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivationMode_descriptor_;
}
bool ActivationMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ConvolutionMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConvolutionMode_descriptor_;
}
bool ConvolutionMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ConvolutionKind_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConvolutionKind_descriptor_;
}
bool ConvolutionKind_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorDescriptorProto::kDimensionsFieldNumber;
const int TensorDescriptorProto::kDataTypeFieldNumber;
const int TensorDescriptorProto::kDataLayoutFieldNumber;
const int TensorDescriptorProto::kFilterLayoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorDescriptorProto::TensorDescriptorProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stream_executor.dnn.TensorDescriptorProto)
}

void TensorDescriptorProto::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  TensorDescriptorProto_default_oneof_instance_->data_layout_ = 0;
  TensorDescriptorProto_default_oneof_instance_->filter_layout_ = 0;
}

TensorDescriptorProto::TensorDescriptorProto(const TensorDescriptorProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stream_executor.dnn.TensorDescriptorProto)
}

void TensorDescriptorProto::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  data_type_ = 0;
  clear_has_layout_oneof();
}

TensorDescriptorProto::~TensorDescriptorProto() {
  // @@protoc_insertion_point(destructor:stream_executor.dnn.TensorDescriptorProto)
  SharedDtor();
}

void TensorDescriptorProto::SharedDtor() {
  if (has_layout_oneof()) {
    clear_layout_oneof();
  }
  if (this != default_instance_) {
  }
}

void TensorDescriptorProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TensorDescriptorProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TensorDescriptorProto_descriptor_;
}

const TensorDescriptorProto& TensorDescriptorProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fstream_5fexecutor_2fdnn_2eproto();
  return *default_instance_;
}

TensorDescriptorProto* TensorDescriptorProto::default_instance_ = NULL;

TensorDescriptorProto* TensorDescriptorProto::New(::google::protobuf::Arena* arena) const {
  TensorDescriptorProto* n = new TensorDescriptorProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TensorDescriptorProto::clear_layout_oneof() {
// @@protoc_insertion_point(one_of_clear_start:stream_executor.dnn.TensorDescriptorProto)
  switch(layout_oneof_case()) {
    case kDataLayout: {
      // No need to clear
      break;
    }
    case kFilterLayout: {
      // No need to clear
      break;
    }
    case LAYOUT_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LAYOUT_ONEOF_NOT_SET;
}


void TensorDescriptorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:stream_executor.dnn.TensorDescriptorProto)
  data_type_ = 0;
  dimensions_.Clear();
  clear_layout_oneof();
}

bool TensorDescriptorProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stream_executor.dnn.TensorDescriptorProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 dimensions = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_dimensions())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10, input, this->mutable_dimensions())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_data_type;
        break;
      }

      // optional .stream_executor.dnn.DataType data_type = 2;
      case 2: {
        if (tag == 16) {
         parse_data_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_data_type(static_cast< ::stream_executor::dnn::DataType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_data_layout;
        break;
      }

      // optional .stream_executor.dnn.DataLayout data_layout = 3;
      case 3: {
        if (tag == 24) {
         parse_data_layout:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_data_layout(static_cast< ::stream_executor::dnn::DataLayout >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_filter_layout;
        break;
      }

      // optional .stream_executor.dnn.FilterLayout filter_layout = 4;
      case 4: {
        if (tag == 32) {
         parse_filter_layout:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_filter_layout(static_cast< ::stream_executor::dnn::FilterLayout >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stream_executor.dnn.TensorDescriptorProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stream_executor.dnn.TensorDescriptorProto)
  return false;
#undef DO_
}

void TensorDescriptorProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stream_executor.dnn.TensorDescriptorProto)
  // repeated int64 dimensions = 1;
  if (this->dimensions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dimensions_cached_byte_size_);
  }
  for (int i = 0; i < this->dimensions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->dimensions(i), output);
  }

  // optional .stream_executor.dnn.DataType data_type = 2;
  if (this->data_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->data_type(), output);
  }

  // optional .stream_executor.dnn.DataLayout data_layout = 3;
  if (has_data_layout()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->data_layout(), output);
  }

  // optional .stream_executor.dnn.FilterLayout filter_layout = 4;
  if (has_filter_layout()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->filter_layout(), output);
  }

  // @@protoc_insertion_point(serialize_end:stream_executor.dnn.TensorDescriptorProto)
}

::google::protobuf::uint8* TensorDescriptorProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stream_executor.dnn.TensorDescriptorProto)
  // repeated int64 dimensions = 1;
  if (this->dimensions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _dimensions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->dimensions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->dimensions(i), target);
  }

  // optional .stream_executor.dnn.DataType data_type = 2;
  if (this->data_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->data_type(), target);
  }

  // optional .stream_executor.dnn.DataLayout data_layout = 3;
  if (has_data_layout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->data_layout(), target);
  }

  // optional .stream_executor.dnn.FilterLayout filter_layout = 4;
  if (has_filter_layout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->filter_layout(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:stream_executor.dnn.TensorDescriptorProto)
  return target;
}

int TensorDescriptorProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:stream_executor.dnn.TensorDescriptorProto)
  int total_size = 0;

  // optional .stream_executor.dnn.DataType data_type = 2;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_type());
  }

  // repeated int64 dimensions = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->dimensions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->dimensions(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dimensions_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  switch (layout_oneof_case()) {
    // optional .stream_executor.dnn.DataLayout data_layout = 3;
    case kDataLayout: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_layout());
      break;
    }
    // optional .stream_executor.dnn.FilterLayout filter_layout = 4;
    case kFilterLayout: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filter_layout());
      break;
    }
    case LAYOUT_ONEOF_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TensorDescriptorProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stream_executor.dnn.TensorDescriptorProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TensorDescriptorProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TensorDescriptorProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stream_executor.dnn.TensorDescriptorProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stream_executor.dnn.TensorDescriptorProto)
    MergeFrom(*source);
  }
}

void TensorDescriptorProto::MergeFrom(const TensorDescriptorProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stream_executor.dnn.TensorDescriptorProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  dimensions_.MergeFrom(from.dimensions_);
  switch (from.layout_oneof_case()) {
    case kDataLayout: {
      set_data_layout(from.data_layout());
      break;
    }
    case kFilterLayout: {
      set_filter_layout(from.filter_layout());
      break;
    }
    case LAYOUT_ONEOF_NOT_SET: {
      break;
    }
  }
  if (from.data_type() != 0) {
    set_data_type(from.data_type());
  }
}

void TensorDescriptorProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stream_executor.dnn.TensorDescriptorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorDescriptorProto::CopyFrom(const TensorDescriptorProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stream_executor.dnn.TensorDescriptorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorDescriptorProto::IsInitialized() const {

  return true;
}

void TensorDescriptorProto::Swap(TensorDescriptorProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TensorDescriptorProto::InternalSwap(TensorDescriptorProto* other) {
  dimensions_.UnsafeArenaSwap(&other->dimensions_);
  std::swap(data_type_, other->data_type_);
  std::swap(layout_oneof_, other->layout_oneof_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TensorDescriptorProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TensorDescriptorProto_descriptor_;
  metadata.reflection = TensorDescriptorProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TensorDescriptorProto

// repeated int64 dimensions = 1;
int TensorDescriptorProto::dimensions_size() const {
  return dimensions_.size();
}
void TensorDescriptorProto::clear_dimensions() {
  dimensions_.Clear();
}
 ::google::protobuf::int64 TensorDescriptorProto::dimensions(int index) const {
  // @@protoc_insertion_point(field_get:stream_executor.dnn.TensorDescriptorProto.dimensions)
  return dimensions_.Get(index);
}
 void TensorDescriptorProto::set_dimensions(int index, ::google::protobuf::int64 value) {
  dimensions_.Set(index, value);
  // @@protoc_insertion_point(field_set:stream_executor.dnn.TensorDescriptorProto.dimensions)
}
 void TensorDescriptorProto::add_dimensions(::google::protobuf::int64 value) {
  dimensions_.Add(value);
  // @@protoc_insertion_point(field_add:stream_executor.dnn.TensorDescriptorProto.dimensions)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TensorDescriptorProto::dimensions() const {
  // @@protoc_insertion_point(field_list:stream_executor.dnn.TensorDescriptorProto.dimensions)
  return dimensions_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TensorDescriptorProto::mutable_dimensions() {
  // @@protoc_insertion_point(field_mutable_list:stream_executor.dnn.TensorDescriptorProto.dimensions)
  return &dimensions_;
}

// optional .stream_executor.dnn.DataType data_type = 2;
void TensorDescriptorProto::clear_data_type() {
  data_type_ = 0;
}
 ::stream_executor::dnn::DataType TensorDescriptorProto::data_type() const {
  // @@protoc_insertion_point(field_get:stream_executor.dnn.TensorDescriptorProto.data_type)
  return static_cast< ::stream_executor::dnn::DataType >(data_type_);
}
 void TensorDescriptorProto::set_data_type(::stream_executor::dnn::DataType value) {
  
  data_type_ = value;
  // @@protoc_insertion_point(field_set:stream_executor.dnn.TensorDescriptorProto.data_type)
}

// optional .stream_executor.dnn.DataLayout data_layout = 3;
bool TensorDescriptorProto::has_data_layout() const {
  return layout_oneof_case() == kDataLayout;
}
void TensorDescriptorProto::set_has_data_layout() {
  _oneof_case_[0] = kDataLayout;
}
void TensorDescriptorProto::clear_data_layout() {
  if (has_data_layout()) {
    layout_oneof_.data_layout_ = 0;
    clear_has_layout_oneof();
  }
}
 ::stream_executor::dnn::DataLayout TensorDescriptorProto::data_layout() const {
  // @@protoc_insertion_point(field_get:stream_executor.dnn.TensorDescriptorProto.data_layout)
  if (has_data_layout()) {
    return static_cast< ::stream_executor::dnn::DataLayout >(layout_oneof_.data_layout_);
  }
  return static_cast< ::stream_executor::dnn::DataLayout >(0);
}
 void TensorDescriptorProto::set_data_layout(::stream_executor::dnn::DataLayout value) {
  if (!has_data_layout()) {
    clear_layout_oneof();
    set_has_data_layout();
  }
  layout_oneof_.data_layout_ = value;
  // @@protoc_insertion_point(field_set:stream_executor.dnn.TensorDescriptorProto.data_layout)
}

// optional .stream_executor.dnn.FilterLayout filter_layout = 4;
bool TensorDescriptorProto::has_filter_layout() const {
  return layout_oneof_case() == kFilterLayout;
}
void TensorDescriptorProto::set_has_filter_layout() {
  _oneof_case_[0] = kFilterLayout;
}
void TensorDescriptorProto::clear_filter_layout() {
  if (has_filter_layout()) {
    layout_oneof_.filter_layout_ = 0;
    clear_has_layout_oneof();
  }
}
 ::stream_executor::dnn::FilterLayout TensorDescriptorProto::filter_layout() const {
  // @@protoc_insertion_point(field_get:stream_executor.dnn.TensorDescriptorProto.filter_layout)
  if (has_filter_layout()) {
    return static_cast< ::stream_executor::dnn::FilterLayout >(layout_oneof_.filter_layout_);
  }
  return static_cast< ::stream_executor::dnn::FilterLayout >(0);
}
 void TensorDescriptorProto::set_filter_layout(::stream_executor::dnn::FilterLayout value) {
  if (!has_filter_layout()) {
    clear_layout_oneof();
    set_has_filter_layout();
  }
  layout_oneof_.filter_layout_ = value;
  // @@protoc_insertion_point(field_set:stream_executor.dnn.TensorDescriptorProto.filter_layout)
}

bool TensorDescriptorProto::has_layout_oneof() const {
  return layout_oneof_case() != LAYOUT_ONEOF_NOT_SET;
}
void TensorDescriptorProto::clear_has_layout_oneof() {
  _oneof_case_[0] = LAYOUT_ONEOF_NOT_SET;
}
TensorDescriptorProto::LayoutOneofCase TensorDescriptorProto::layout_oneof_case() const {
  return TensorDescriptorProto::LayoutOneofCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* AlgorithmProto_MathType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlgorithmProto_MathType_descriptor_;
}
bool AlgorithmProto_MathType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AlgorithmProto_MathType AlgorithmProto::DEFAULT_MATH;
const AlgorithmProto_MathType AlgorithmProto::TENSOR_OP_MATH;
const AlgorithmProto_MathType AlgorithmProto::MathType_MIN;
const AlgorithmProto_MathType AlgorithmProto::MathType_MAX;
const int AlgorithmProto::MathType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AlgorithmProto::kAlgoIdFieldNumber;
const int AlgorithmProto::kMathTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AlgorithmProto::AlgorithmProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stream_executor.dnn.AlgorithmProto)
}

void AlgorithmProto::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AlgorithmProto::AlgorithmProto(const AlgorithmProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stream_executor.dnn.AlgorithmProto)
}

void AlgorithmProto::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  algo_id_ = GOOGLE_LONGLONG(0);
  math_type_ = 0;
}

AlgorithmProto::~AlgorithmProto() {
  // @@protoc_insertion_point(destructor:stream_executor.dnn.AlgorithmProto)
  SharedDtor();
}

void AlgorithmProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AlgorithmProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlgorithmProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlgorithmProto_descriptor_;
}

const AlgorithmProto& AlgorithmProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fstream_5fexecutor_2fdnn_2eproto();
  return *default_instance_;
}

AlgorithmProto* AlgorithmProto::default_instance_ = NULL;

AlgorithmProto* AlgorithmProto::New(::google::protobuf::Arena* arena) const {
  AlgorithmProto* n = new AlgorithmProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AlgorithmProto::Clear() {
// @@protoc_insertion_point(message_clear_start:stream_executor.dnn.AlgorithmProto)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AlgorithmProto, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AlgorithmProto*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(algo_id_, math_type_);

#undef ZR_HELPER_
#undef ZR_

}

bool AlgorithmProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stream_executor.dnn.AlgorithmProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 algo_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &algo_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_math_type;
        break;
      }

      // optional .stream_executor.dnn.AlgorithmProto.MathType math_type = 2;
      case 2: {
        if (tag == 16) {
         parse_math_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_math_type(static_cast< ::stream_executor::dnn::AlgorithmProto_MathType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stream_executor.dnn.AlgorithmProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stream_executor.dnn.AlgorithmProto)
  return false;
#undef DO_
}

void AlgorithmProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stream_executor.dnn.AlgorithmProto)
  // optional int64 algo_id = 1;
  if (this->algo_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->algo_id(), output);
  }

  // optional .stream_executor.dnn.AlgorithmProto.MathType math_type = 2;
  if (this->math_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->math_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:stream_executor.dnn.AlgorithmProto)
}

::google::protobuf::uint8* AlgorithmProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stream_executor.dnn.AlgorithmProto)
  // optional int64 algo_id = 1;
  if (this->algo_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->algo_id(), target);
  }

  // optional .stream_executor.dnn.AlgorithmProto.MathType math_type = 2;
  if (this->math_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->math_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:stream_executor.dnn.AlgorithmProto)
  return target;
}

int AlgorithmProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:stream_executor.dnn.AlgorithmProto)
  int total_size = 0;

  // optional int64 algo_id = 1;
  if (this->algo_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->algo_id());
  }

  // optional .stream_executor.dnn.AlgorithmProto.MathType math_type = 2;
  if (this->math_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->math_type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlgorithmProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stream_executor.dnn.AlgorithmProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AlgorithmProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AlgorithmProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stream_executor.dnn.AlgorithmProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stream_executor.dnn.AlgorithmProto)
    MergeFrom(*source);
  }
}

void AlgorithmProto::MergeFrom(const AlgorithmProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stream_executor.dnn.AlgorithmProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.algo_id() != 0) {
    set_algo_id(from.algo_id());
  }
  if (from.math_type() != 0) {
    set_math_type(from.math_type());
  }
}

void AlgorithmProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stream_executor.dnn.AlgorithmProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlgorithmProto::CopyFrom(const AlgorithmProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stream_executor.dnn.AlgorithmProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlgorithmProto::IsInitialized() const {

  return true;
}

void AlgorithmProto::Swap(AlgorithmProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AlgorithmProto::InternalSwap(AlgorithmProto* other) {
  std::swap(algo_id_, other->algo_id_);
  std::swap(math_type_, other->math_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AlgorithmProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlgorithmProto_descriptor_;
  metadata.reflection = AlgorithmProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AlgorithmProto

// optional int64 algo_id = 1;
void AlgorithmProto::clear_algo_id() {
  algo_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 AlgorithmProto::algo_id() const {
  // @@protoc_insertion_point(field_get:stream_executor.dnn.AlgorithmProto.algo_id)
  return algo_id_;
}
 void AlgorithmProto::set_algo_id(::google::protobuf::int64 value) {
  
  algo_id_ = value;
  // @@protoc_insertion_point(field_set:stream_executor.dnn.AlgorithmProto.algo_id)
}

// optional .stream_executor.dnn.AlgorithmProto.MathType math_type = 2;
void AlgorithmProto::clear_math_type() {
  math_type_ = 0;
}
 ::stream_executor::dnn::AlgorithmProto_MathType AlgorithmProto::math_type() const {
  // @@protoc_insertion_point(field_get:stream_executor.dnn.AlgorithmProto.math_type)
  return static_cast< ::stream_executor::dnn::AlgorithmProto_MathType >(math_type_);
}
 void AlgorithmProto::set_math_type(::stream_executor::dnn::AlgorithmProto_MathType value) {
  
  math_type_ = value;
  // @@protoc_insertion_point(field_set:stream_executor.dnn.AlgorithmProto.math_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConvolutionDescriptorProto::kPaddingsFieldNumber;
const int ConvolutionDescriptorProto::kStridesFieldNumber;
const int ConvolutionDescriptorProto::kDilationsFieldNumber;
const int ConvolutionDescriptorProto::kComputeModeFieldNumber;
const int ConvolutionDescriptorProto::kGroupCountFieldNumber;
const int ConvolutionDescriptorProto::kConvolutionModeFieldNumber;
const int ConvolutionDescriptorProto::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConvolutionDescriptorProto::ConvolutionDescriptorProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stream_executor.dnn.ConvolutionDescriptorProto)
}

void ConvolutionDescriptorProto::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ConvolutionDescriptorProto::ConvolutionDescriptorProto(const ConvolutionDescriptorProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stream_executor.dnn.ConvolutionDescriptorProto)
}

void ConvolutionDescriptorProto::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  compute_mode_ = 0;
  group_count_ = 0;
  convolution_mode_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ConvolutionDescriptorProto::~ConvolutionDescriptorProto() {
  // @@protoc_insertion_point(destructor:stream_executor.dnn.ConvolutionDescriptorProto)
  SharedDtor();
}

void ConvolutionDescriptorProto::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ConvolutionDescriptorProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConvolutionDescriptorProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConvolutionDescriptorProto_descriptor_;
}

const ConvolutionDescriptorProto& ConvolutionDescriptorProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fstream_5fexecutor_2fdnn_2eproto();
  return *default_instance_;
}

ConvolutionDescriptorProto* ConvolutionDescriptorProto::default_instance_ = NULL;

ConvolutionDescriptorProto* ConvolutionDescriptorProto::New(::google::protobuf::Arena* arena) const {
  ConvolutionDescriptorProto* n = new ConvolutionDescriptorProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConvolutionDescriptorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:stream_executor.dnn.ConvolutionDescriptorProto)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ConvolutionDescriptorProto, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ConvolutionDescriptorProto*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(compute_mode_, group_count_);
  convolution_mode_ = 0;
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  paddings_.Clear();
  strides_.Clear();
  dilations_.Clear();
}

bool ConvolutionDescriptorProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stream_executor.dnn.ConvolutionDescriptorProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 paddings = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_paddings())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10, input, this->mutable_paddings())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_strides;
        break;
      }

      // repeated int64 strides = 2;
      case 2: {
        if (tag == 18) {
         parse_strides:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_strides())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 18, input, this->mutable_strides())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dilations;
        break;
      }

      // repeated int64 dilations = 3;
      case 3: {
        if (tag == 26) {
         parse_dilations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_dilations())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 26, input, this->mutable_dilations())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_compute_mode;
        break;
      }

      // optional .stream_executor.dnn.DataType compute_mode = 4;
      case 4: {
        if (tag == 32) {
         parse_compute_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_compute_mode(static_cast< ::stream_executor::dnn::DataType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_group_count;
        break;
      }

      // optional int32 group_count = 5;
      case 5: {
        if (tag == 40) {
         parse_group_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_count_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_convolution_mode;
        break;
      }

      // optional .stream_executor.dnn.ConvolutionMode convolution_mode = 6;
      case 6: {
        if (tag == 48) {
         parse_convolution_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_convolution_mode(static_cast< ::stream_executor::dnn::ConvolutionMode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // optional string name = 7;
      case 7: {
        if (tag == 58) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "stream_executor.dnn.ConvolutionDescriptorProto.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stream_executor.dnn.ConvolutionDescriptorProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stream_executor.dnn.ConvolutionDescriptorProto)
  return false;
#undef DO_
}

void ConvolutionDescriptorProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stream_executor.dnn.ConvolutionDescriptorProto)
  // repeated int64 paddings = 1;
  if (this->paddings_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_paddings_cached_byte_size_);
  }
  for (int i = 0; i < this->paddings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->paddings(i), output);
  }

  // repeated int64 strides = 2;
  if (this->strides_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_strides_cached_byte_size_);
  }
  for (int i = 0; i < this->strides_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->strides(i), output);
  }

  // repeated int64 dilations = 3;
  if (this->dilations_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dilations_cached_byte_size_);
  }
  for (int i = 0; i < this->dilations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->dilations(i), output);
  }

  // optional .stream_executor.dnn.DataType compute_mode = 4;
  if (this->compute_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->compute_mode(), output);
  }

  // optional int32 group_count = 5;
  if (this->group_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->group_count(), output);
  }

  // optional .stream_executor.dnn.ConvolutionMode convolution_mode = 6;
  if (this->convolution_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->convolution_mode(), output);
  }

  // optional string name = 7;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stream_executor.dnn.ConvolutionDescriptorProto.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:stream_executor.dnn.ConvolutionDescriptorProto)
}

::google::protobuf::uint8* ConvolutionDescriptorProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stream_executor.dnn.ConvolutionDescriptorProto)
  // repeated int64 paddings = 1;
  if (this->paddings_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _paddings_cached_byte_size_, target);
  }
  for (int i = 0; i < this->paddings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->paddings(i), target);
  }

  // repeated int64 strides = 2;
  if (this->strides_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _strides_cached_byte_size_, target);
  }
  for (int i = 0; i < this->strides_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->strides(i), target);
  }

  // repeated int64 dilations = 3;
  if (this->dilations_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _dilations_cached_byte_size_, target);
  }
  for (int i = 0; i < this->dilations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->dilations(i), target);
  }

  // optional .stream_executor.dnn.DataType compute_mode = 4;
  if (this->compute_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->compute_mode(), target);
  }

  // optional int32 group_count = 5;
  if (this->group_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->group_count(), target);
  }

  // optional .stream_executor.dnn.ConvolutionMode convolution_mode = 6;
  if (this->convolution_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->convolution_mode(), target);
  }

  // optional string name = 7;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stream_executor.dnn.ConvolutionDescriptorProto.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:stream_executor.dnn.ConvolutionDescriptorProto)
  return target;
}

int ConvolutionDescriptorProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:stream_executor.dnn.ConvolutionDescriptorProto)
  int total_size = 0;

  // optional .stream_executor.dnn.DataType compute_mode = 4;
  if (this->compute_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->compute_mode());
  }

  // optional int32 group_count = 5;
  if (this->group_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group_count());
  }

  // optional .stream_executor.dnn.ConvolutionMode convolution_mode = 6;
  if (this->convolution_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->convolution_mode());
  }

  // optional string name = 7;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // repeated int64 paddings = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->paddings_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->paddings(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _paddings_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int64 strides = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->strides_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->strides(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _strides_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int64 dilations = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->dilations_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->dilations(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dilations_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConvolutionDescriptorProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stream_executor.dnn.ConvolutionDescriptorProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ConvolutionDescriptorProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConvolutionDescriptorProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stream_executor.dnn.ConvolutionDescriptorProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stream_executor.dnn.ConvolutionDescriptorProto)
    MergeFrom(*source);
  }
}

void ConvolutionDescriptorProto::MergeFrom(const ConvolutionDescriptorProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stream_executor.dnn.ConvolutionDescriptorProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  paddings_.MergeFrom(from.paddings_);
  strides_.MergeFrom(from.strides_);
  dilations_.MergeFrom(from.dilations_);
  if (from.compute_mode() != 0) {
    set_compute_mode(from.compute_mode());
  }
  if (from.group_count() != 0) {
    set_group_count(from.group_count());
  }
  if (from.convolution_mode() != 0) {
    set_convolution_mode(from.convolution_mode());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void ConvolutionDescriptorProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stream_executor.dnn.ConvolutionDescriptorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvolutionDescriptorProto::CopyFrom(const ConvolutionDescriptorProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stream_executor.dnn.ConvolutionDescriptorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvolutionDescriptorProto::IsInitialized() const {

  return true;
}

void ConvolutionDescriptorProto::Swap(ConvolutionDescriptorProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConvolutionDescriptorProto::InternalSwap(ConvolutionDescriptorProto* other) {
  paddings_.UnsafeArenaSwap(&other->paddings_);
  strides_.UnsafeArenaSwap(&other->strides_);
  dilations_.UnsafeArenaSwap(&other->dilations_);
  std::swap(compute_mode_, other->compute_mode_);
  std::swap(group_count_, other->group_count_);
  std::swap(convolution_mode_, other->convolution_mode_);
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConvolutionDescriptorProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConvolutionDescriptorProto_descriptor_;
  metadata.reflection = ConvolutionDescriptorProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConvolutionDescriptorProto

// repeated int64 paddings = 1;
int ConvolutionDescriptorProto::paddings_size() const {
  return paddings_.size();
}
void ConvolutionDescriptorProto::clear_paddings() {
  paddings_.Clear();
}
 ::google::protobuf::int64 ConvolutionDescriptorProto::paddings(int index) const {
  // @@protoc_insertion_point(field_get:stream_executor.dnn.ConvolutionDescriptorProto.paddings)
  return paddings_.Get(index);
}
 void ConvolutionDescriptorProto::set_paddings(int index, ::google::protobuf::int64 value) {
  paddings_.Set(index, value);
  // @@protoc_insertion_point(field_set:stream_executor.dnn.ConvolutionDescriptorProto.paddings)
}
 void ConvolutionDescriptorProto::add_paddings(::google::protobuf::int64 value) {
  paddings_.Add(value);
  // @@protoc_insertion_point(field_add:stream_executor.dnn.ConvolutionDescriptorProto.paddings)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ConvolutionDescriptorProto::paddings() const {
  // @@protoc_insertion_point(field_list:stream_executor.dnn.ConvolutionDescriptorProto.paddings)
  return paddings_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ConvolutionDescriptorProto::mutable_paddings() {
  // @@protoc_insertion_point(field_mutable_list:stream_executor.dnn.ConvolutionDescriptorProto.paddings)
  return &paddings_;
}

// repeated int64 strides = 2;
int ConvolutionDescriptorProto::strides_size() const {
  return strides_.size();
}
void ConvolutionDescriptorProto::clear_strides() {
  strides_.Clear();
}
 ::google::protobuf::int64 ConvolutionDescriptorProto::strides(int index) const {
  // @@protoc_insertion_point(field_get:stream_executor.dnn.ConvolutionDescriptorProto.strides)
  return strides_.Get(index);
}
 void ConvolutionDescriptorProto::set_strides(int index, ::google::protobuf::int64 value) {
  strides_.Set(index, value);
  // @@protoc_insertion_point(field_set:stream_executor.dnn.ConvolutionDescriptorProto.strides)
}
 void ConvolutionDescriptorProto::add_strides(::google::protobuf::int64 value) {
  strides_.Add(value);
  // @@protoc_insertion_point(field_add:stream_executor.dnn.ConvolutionDescriptorProto.strides)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ConvolutionDescriptorProto::strides() const {
  // @@protoc_insertion_point(field_list:stream_executor.dnn.ConvolutionDescriptorProto.strides)
  return strides_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ConvolutionDescriptorProto::mutable_strides() {
  // @@protoc_insertion_point(field_mutable_list:stream_executor.dnn.ConvolutionDescriptorProto.strides)
  return &strides_;
}

// repeated int64 dilations = 3;
int ConvolutionDescriptorProto::dilations_size() const {
  return dilations_.size();
}
void ConvolutionDescriptorProto::clear_dilations() {
  dilations_.Clear();
}
 ::google::protobuf::int64 ConvolutionDescriptorProto::dilations(int index) const {
  // @@protoc_insertion_point(field_get:stream_executor.dnn.ConvolutionDescriptorProto.dilations)
  return dilations_.Get(index);
}
 void ConvolutionDescriptorProto::set_dilations(int index, ::google::protobuf::int64 value) {
  dilations_.Set(index, value);
  // @@protoc_insertion_point(field_set:stream_executor.dnn.ConvolutionDescriptorProto.dilations)
}
 void ConvolutionDescriptorProto::add_dilations(::google::protobuf::int64 value) {
  dilations_.Add(value);
  // @@protoc_insertion_point(field_add:stream_executor.dnn.ConvolutionDescriptorProto.dilations)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ConvolutionDescriptorProto::dilations() const {
  // @@protoc_insertion_point(field_list:stream_executor.dnn.ConvolutionDescriptorProto.dilations)
  return dilations_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ConvolutionDescriptorProto::mutable_dilations() {
  // @@protoc_insertion_point(field_mutable_list:stream_executor.dnn.ConvolutionDescriptorProto.dilations)
  return &dilations_;
}

// optional .stream_executor.dnn.DataType compute_mode = 4;
void ConvolutionDescriptorProto::clear_compute_mode() {
  compute_mode_ = 0;
}
 ::stream_executor::dnn::DataType ConvolutionDescriptorProto::compute_mode() const {
  // @@protoc_insertion_point(field_get:stream_executor.dnn.ConvolutionDescriptorProto.compute_mode)
  return static_cast< ::stream_executor::dnn::DataType >(compute_mode_);
}
 void ConvolutionDescriptorProto::set_compute_mode(::stream_executor::dnn::DataType value) {
  
  compute_mode_ = value;
  // @@protoc_insertion_point(field_set:stream_executor.dnn.ConvolutionDescriptorProto.compute_mode)
}

// optional int32 group_count = 5;
void ConvolutionDescriptorProto::clear_group_count() {
  group_count_ = 0;
}
 ::google::protobuf::int32 ConvolutionDescriptorProto::group_count() const {
  // @@protoc_insertion_point(field_get:stream_executor.dnn.ConvolutionDescriptorProto.group_count)
  return group_count_;
}
 void ConvolutionDescriptorProto::set_group_count(::google::protobuf::int32 value) {
  
  group_count_ = value;
  // @@protoc_insertion_point(field_set:stream_executor.dnn.ConvolutionDescriptorProto.group_count)
}

// optional .stream_executor.dnn.ConvolutionMode convolution_mode = 6;
void ConvolutionDescriptorProto::clear_convolution_mode() {
  convolution_mode_ = 0;
}
 ::stream_executor::dnn::ConvolutionMode ConvolutionDescriptorProto::convolution_mode() const {
  // @@protoc_insertion_point(field_get:stream_executor.dnn.ConvolutionDescriptorProto.convolution_mode)
  return static_cast< ::stream_executor::dnn::ConvolutionMode >(convolution_mode_);
}
 void ConvolutionDescriptorProto::set_convolution_mode(::stream_executor::dnn::ConvolutionMode value) {
  
  convolution_mode_ = value;
  // @@protoc_insertion_point(field_set:stream_executor.dnn.ConvolutionDescriptorProto.convolution_mode)
}

// optional string name = 7;
void ConvolutionDescriptorProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ConvolutionDescriptorProto::name() const {
  // @@protoc_insertion_point(field_get:stream_executor.dnn.ConvolutionDescriptorProto.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConvolutionDescriptorProto::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stream_executor.dnn.ConvolutionDescriptorProto.name)
}
 void ConvolutionDescriptorProto::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stream_executor.dnn.ConvolutionDescriptorProto.name)
}
 void ConvolutionDescriptorProto::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stream_executor.dnn.ConvolutionDescriptorProto.name)
}
 ::std::string* ConvolutionDescriptorProto::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:stream_executor.dnn.ConvolutionDescriptorProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConvolutionDescriptorProto::release_name() {
  // @@protoc_insertion_point(field_release:stream_executor.dnn.ConvolutionDescriptorProto.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConvolutionDescriptorProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:stream_executor.dnn.ConvolutionDescriptorProto.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dnn
}  // namespace stream_executor

// @@protoc_insertion_point(global_scope)
