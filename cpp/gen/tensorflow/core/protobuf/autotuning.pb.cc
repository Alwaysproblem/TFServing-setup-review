// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/autotuning.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/protobuf/autotuning.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {

namespace {

const ::google::protobuf::Descriptor* CudnnVersion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CudnnVersion_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComputeCapability_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComputeCapability_reflection_ = NULL;
const ::google::protobuf::Descriptor* AutotuneResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AutotuneResult_reflection_ = NULL;
struct AutotuneResultOneofInstance {
  const ::tensorflow::AutotuneResult_ConvKey* conv_;
  const ::tensorflow::AutotuneResult_GemmKey* gemm_;
}* AutotuneResult_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* AutotuneResult_FailureResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AutotuneResult_FailureResult_reflection_ = NULL;
struct AutotuneResult_FailureResultOneofInstance {
  const ::tensorflow::AutotuneResult_ConvKey* reference_conv_;
  const ::tensorflow::AutotuneResult_GemmKey* reference_gemm_;
}* AutotuneResult_FailureResult_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* AutotuneResult_ConvKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AutotuneResult_ConvKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* AutotuneResult_GemmKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AutotuneResult_GemmKey_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AutotuneResult_FailureKind_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AutotuningLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AutotuningLog_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto() {
  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow/core/protobuf/autotuning.proto");
  GOOGLE_CHECK(file != NULL);
  CudnnVersion_descriptor_ = file->message_type(0);
  static const int CudnnVersion_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CudnnVersion, major_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CudnnVersion, minor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CudnnVersion, patch_),
  };
  CudnnVersion_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CudnnVersion_descriptor_,
      CudnnVersion::default_instance_,
      CudnnVersion_offsets_,
      -1,
      -1,
      -1,
      sizeof(CudnnVersion),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CudnnVersion, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CudnnVersion, _is_default_instance_));
  ComputeCapability_descriptor_ = file->message_type(1);
  static const int ComputeCapability_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputeCapability, major_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputeCapability, minor_),
  };
  ComputeCapability_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ComputeCapability_descriptor_,
      ComputeCapability::default_instance_,
      ComputeCapability_offsets_,
      -1,
      -1,
      -1,
      sizeof(ComputeCapability),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputeCapability, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputeCapability, _is_default_instance_));
  AutotuneResult_descriptor_ = file->message_type(2);
  static const int AutotuneResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutotuneResult, scratch_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutotuneResult, run_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutotuneResult, failure_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(AutotuneResult_default_oneof_instance_, conv_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(AutotuneResult_default_oneof_instance_, gemm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutotuneResult, key_),
  };
  AutotuneResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AutotuneResult_descriptor_,
      AutotuneResult::default_instance_,
      AutotuneResult_offsets_,
      -1,
      -1,
      -1,
      AutotuneResult_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutotuneResult, _oneof_case_[0]),
      sizeof(AutotuneResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutotuneResult, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutotuneResult, _is_default_instance_));
  AutotuneResult_FailureResult_descriptor_ = AutotuneResult_descriptor_->nested_type(0);
  static const int AutotuneResult_FailureResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutotuneResult_FailureResult, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutotuneResult_FailureResult, msg_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(AutotuneResult_FailureResult_default_oneof_instance_, reference_conv_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(AutotuneResult_FailureResult_default_oneof_instance_, reference_gemm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutotuneResult_FailureResult, buffer_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutotuneResult_FailureResult, key_),
  };
  AutotuneResult_FailureResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AutotuneResult_FailureResult_descriptor_,
      AutotuneResult_FailureResult::default_instance_,
      AutotuneResult_FailureResult_offsets_,
      -1,
      -1,
      -1,
      AutotuneResult_FailureResult_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutotuneResult_FailureResult, _oneof_case_[0]),
      sizeof(AutotuneResult_FailureResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutotuneResult_FailureResult, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutotuneResult_FailureResult, _is_default_instance_));
  AutotuneResult_ConvKey_descriptor_ = AutotuneResult_descriptor_->nested_type(1);
  static const int AutotuneResult_ConvKey_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutotuneResult_ConvKey, algorithm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutotuneResult_ConvKey, tensor_ops_enabled_),
  };
  AutotuneResult_ConvKey_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AutotuneResult_ConvKey_descriptor_,
      AutotuneResult_ConvKey::default_instance_,
      AutotuneResult_ConvKey_offsets_,
      -1,
      -1,
      -1,
      sizeof(AutotuneResult_ConvKey),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutotuneResult_ConvKey, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutotuneResult_ConvKey, _is_default_instance_));
  AutotuneResult_GemmKey_descriptor_ = AutotuneResult_descriptor_->nested_type(2);
  static const int AutotuneResult_GemmKey_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutotuneResult_GemmKey, algorithm_),
  };
  AutotuneResult_GemmKey_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AutotuneResult_GemmKey_descriptor_,
      AutotuneResult_GemmKey::default_instance_,
      AutotuneResult_GemmKey_offsets_,
      -1,
      -1,
      -1,
      sizeof(AutotuneResult_GemmKey),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutotuneResult_GemmKey, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutotuneResult_GemmKey, _is_default_instance_));
  AutotuneResult_FailureKind_descriptor_ = AutotuneResult_descriptor_->enum_type(0);
  AutotuningLog_descriptor_ = file->message_type(3);
  static const int AutotuningLog_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutotuningLog, instr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutotuningLog, results_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutotuningLog, cudnn_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutotuningLog, compute_capability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutotuningLog, device_pci_bus_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutotuningLog, blas_version_),
  };
  AutotuningLog_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AutotuningLog_descriptor_,
      AutotuningLog::default_instance_,
      AutotuningLog_offsets_,
      -1,
      -1,
      -1,
      sizeof(AutotuningLog),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutotuningLog, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutotuningLog, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CudnnVersion_descriptor_, &CudnnVersion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ComputeCapability_descriptor_, &ComputeCapability::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AutotuneResult_descriptor_, &AutotuneResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AutotuneResult_FailureResult_descriptor_, &AutotuneResult_FailureResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AutotuneResult_ConvKey_descriptor_, &AutotuneResult_ConvKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AutotuneResult_GemmKey_descriptor_, &AutotuneResult_GemmKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AutotuningLog_descriptor_, &AutotuningLog::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto() {
  delete CudnnVersion::default_instance_;
  delete CudnnVersion_reflection_;
  delete ComputeCapability::default_instance_;
  delete ComputeCapability_reflection_;
  delete AutotuneResult::default_instance_;
  delete AutotuneResult_default_oneof_instance_;
  delete AutotuneResult_reflection_;
  delete AutotuneResult_FailureResult::default_instance_;
  delete AutotuneResult_FailureResult_default_oneof_instance_;
  delete AutotuneResult_FailureResult_reflection_;
  delete AutotuneResult_ConvKey::default_instance_;
  delete AutotuneResult_ConvKey_reflection_;
  delete AutotuneResult_GemmKey::default_instance_;
  delete AutotuneResult_GemmKey_reflection_;
  delete AutotuningLog::default_instance_;
  delete AutotuningLog_reflection_;
}

void protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fany_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fduration_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n)tensorflow/core/protobuf/autotuning.pr"
    "oto\022\ntensorflow\032\031google/protobuf/any.pro"
    "to\032\036google/protobuf/duration.proto\";\n\014Cu"
    "dnnVersion\022\r\n\005major\030\001 \001(\005\022\r\n\005minor\030\002 \001(\005"
    "\022\r\n\005patch\030\003 \001(\005\"1\n\021ComputeCapability\022\r\n\005"
    "major\030\001 \001(\005\022\r\n\005minor\030\002 \001(\005\"\212\005\n\016AutotuneR"
    "esult\022\025\n\rscratch_bytes\030\010 \001(\003\022+\n\010run_time"
    "\030\t \001(\0132\031.google.protobuf.Duration\0229\n\007fai"
    "lure\030\007 \001(\0132(.tensorflow.AutotuneResult.F"
    "ailureResult\0222\n\004conv\030\005 \001(\0132\".tensorflow."
    "AutotuneResult.ConvKeyH\000\0222\n\004gemm\030\006 \001(\0132\""
    ".tensorflow.AutotuneResult.GemmKeyH\000\032\355\001\n"
    "\rFailureResult\0224\n\004kind\030\001 \001(\0162&.tensorflo"
    "w.AutotuneResult.FailureKind\022\013\n\003msg\030\002 \001("
    "\t\022<\n\016reference_conv\030\013 \001(\0132\".tensorflow.A"
    "utotuneResult.ConvKeyH\000\022<\n\016reference_gem"
    "m\030\014 \001(\0132\".tensorflow.AutotuneResult.Gemm"
    "KeyH\000\022\026\n\016buffer_address\030\r \001(\003B\005\n\003key\0328\n\007"
    "ConvKey\022\021\n\talgorithm\030\001 \001(\003\022\032\n\022tensor_ops"
    "_enabled\030\002 \001(\010\032\034\n\007GemmKey\022\021\n\talgorithm\030\001"
    " \001(\003\"B\n\013FailureKind\022\013\n\007UNKNOWN\020\000\022\024\n\020REDZ"
    "ONE_MODIFIED\020\001\022\020\n\014WRONG_RESULT\020\002B\005\n\003key\""
    "\376\001\n\rAutotuningLog\022#\n\005instr\030\001 \001(\0132\024.googl"
    "e.protobuf.Any\022+\n\007results\030\002 \003(\0132\032.tensor"
    "flow.AutotuneResult\022/\n\rcudnn_version\030\003 \001"
    "(\0132\030.tensorflow.CudnnVersion\0229\n\022compute_"
    "capability\030\004 \001(\0132\035.tensorflow.ComputeCap"
    "ability\022\031\n\021device_pci_bus_id\030\005 \001(\t\022\024\n\014bl"
    "as_version\030\006 \001(\tBJZHgithub.com/tensorflo"
    "w/tensorflow/tensorflow/go/core/core_pro"
    "tos_go_protob\006proto3", 1220);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/protobuf/autotuning.proto", &protobuf_RegisterTypes);
  CudnnVersion::default_instance_ = new CudnnVersion();
  ComputeCapability::default_instance_ = new ComputeCapability();
  AutotuneResult::default_instance_ = new AutotuneResult();
  AutotuneResult_default_oneof_instance_ = new AutotuneResultOneofInstance();
  AutotuneResult_FailureResult::default_instance_ = new AutotuneResult_FailureResult();
  AutotuneResult_FailureResult_default_oneof_instance_ = new AutotuneResult_FailureResultOneofInstance();
  AutotuneResult_ConvKey::default_instance_ = new AutotuneResult_ConvKey();
  AutotuneResult_GemmKey::default_instance_ = new AutotuneResult_GemmKey();
  AutotuningLog::default_instance_ = new AutotuningLog();
  CudnnVersion::default_instance_->InitAsDefaultInstance();
  ComputeCapability::default_instance_->InitAsDefaultInstance();
  AutotuneResult::default_instance_->InitAsDefaultInstance();
  AutotuneResult_FailureResult::default_instance_->InitAsDefaultInstance();
  AutotuneResult_ConvKey::default_instance_->InitAsDefaultInstance();
  AutotuneResult_GemmKey::default_instance_->InitAsDefaultInstance();
  AutotuningLog::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto {
  StaticDescriptorInitializer_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto() {
    protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto();
  }
} static_descriptor_initializer_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CudnnVersion::kMajorFieldNumber;
const int CudnnVersion::kMinorFieldNumber;
const int CudnnVersion::kPatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CudnnVersion::CudnnVersion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CudnnVersion)
}

void CudnnVersion::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CudnnVersion::CudnnVersion(const CudnnVersion& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.CudnnVersion)
}

void CudnnVersion::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  major_ = 0;
  minor_ = 0;
  patch_ = 0;
}

CudnnVersion::~CudnnVersion() {
  // @@protoc_insertion_point(destructor:tensorflow.CudnnVersion)
  SharedDtor();
}

void CudnnVersion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CudnnVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CudnnVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CudnnVersion_descriptor_;
}

const CudnnVersion& CudnnVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto();
  return *default_instance_;
}

CudnnVersion* CudnnVersion::default_instance_ = NULL;

CudnnVersion* CudnnVersion::New(::google::protobuf::Arena* arena) const {
  CudnnVersion* n = new CudnnVersion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CudnnVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CudnnVersion)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CudnnVersion, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CudnnVersion*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(major_, patch_);

#undef ZR_HELPER_
#undef ZR_

}

bool CudnnVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CudnnVersion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 major = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &major_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_minor;
        break;
      }

      // optional int32 minor = 2;
      case 2: {
        if (tag == 16) {
         parse_minor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minor_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_patch;
        break;
      }

      // optional int32 patch = 3;
      case 3: {
        if (tag == 24) {
         parse_patch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &patch_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CudnnVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CudnnVersion)
  return false;
#undef DO_
}

void CudnnVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CudnnVersion)
  // optional int32 major = 1;
  if (this->major() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->major(), output);
  }

  // optional int32 minor = 2;
  if (this->minor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->minor(), output);
  }

  // optional int32 patch = 3;
  if (this->patch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->patch(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.CudnnVersion)
}

::google::protobuf::uint8* CudnnVersion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CudnnVersion)
  // optional int32 major = 1;
  if (this->major() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->major(), target);
  }

  // optional int32 minor = 2;
  if (this->minor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->minor(), target);
  }

  // optional int32 patch = 3;
  if (this->patch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->patch(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CudnnVersion)
  return target;
}

int CudnnVersion::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CudnnVersion)
  int total_size = 0;

  // optional int32 major = 1;
  if (this->major() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->major());
  }

  // optional int32 minor = 2;
  if (this->minor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->minor());
  }

  // optional int32 patch = 3;
  if (this->patch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->patch());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CudnnVersion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CudnnVersion)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CudnnVersion* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CudnnVersion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CudnnVersion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CudnnVersion)
    MergeFrom(*source);
  }
}

void CudnnVersion::MergeFrom(const CudnnVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CudnnVersion)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.major() != 0) {
    set_major(from.major());
  }
  if (from.minor() != 0) {
    set_minor(from.minor());
  }
  if (from.patch() != 0) {
    set_patch(from.patch());
  }
}

void CudnnVersion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CudnnVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CudnnVersion::CopyFrom(const CudnnVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CudnnVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CudnnVersion::IsInitialized() const {

  return true;
}

void CudnnVersion::Swap(CudnnVersion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CudnnVersion::InternalSwap(CudnnVersion* other) {
  std::swap(major_, other->major_);
  std::swap(minor_, other->minor_);
  std::swap(patch_, other->patch_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CudnnVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CudnnVersion_descriptor_;
  metadata.reflection = CudnnVersion_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CudnnVersion

// optional int32 major = 1;
void CudnnVersion::clear_major() {
  major_ = 0;
}
 ::google::protobuf::int32 CudnnVersion::major() const {
  // @@protoc_insertion_point(field_get:tensorflow.CudnnVersion.major)
  return major_;
}
 void CudnnVersion::set_major(::google::protobuf::int32 value) {
  
  major_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CudnnVersion.major)
}

// optional int32 minor = 2;
void CudnnVersion::clear_minor() {
  minor_ = 0;
}
 ::google::protobuf::int32 CudnnVersion::minor() const {
  // @@protoc_insertion_point(field_get:tensorflow.CudnnVersion.minor)
  return minor_;
}
 void CudnnVersion::set_minor(::google::protobuf::int32 value) {
  
  minor_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CudnnVersion.minor)
}

// optional int32 patch = 3;
void CudnnVersion::clear_patch() {
  patch_ = 0;
}
 ::google::protobuf::int32 CudnnVersion::patch() const {
  // @@protoc_insertion_point(field_get:tensorflow.CudnnVersion.patch)
  return patch_;
}
 void CudnnVersion::set_patch(::google::protobuf::int32 value) {
  
  patch_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CudnnVersion.patch)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ComputeCapability::kMajorFieldNumber;
const int ComputeCapability::kMinorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComputeCapability::ComputeCapability()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ComputeCapability)
}

void ComputeCapability::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ComputeCapability::ComputeCapability(const ComputeCapability& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.ComputeCapability)
}

void ComputeCapability::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  major_ = 0;
  minor_ = 0;
}

ComputeCapability::~ComputeCapability() {
  // @@protoc_insertion_point(destructor:tensorflow.ComputeCapability)
  SharedDtor();
}

void ComputeCapability::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ComputeCapability::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComputeCapability::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComputeCapability_descriptor_;
}

const ComputeCapability& ComputeCapability::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto();
  return *default_instance_;
}

ComputeCapability* ComputeCapability::default_instance_ = NULL;

ComputeCapability* ComputeCapability::New(::google::protobuf::Arena* arena) const {
  ComputeCapability* n = new ComputeCapability;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ComputeCapability::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ComputeCapability)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ComputeCapability, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ComputeCapability*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(major_, minor_);

#undef ZR_HELPER_
#undef ZR_

}

bool ComputeCapability::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.ComputeCapability)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 major = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &major_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_minor;
        break;
      }

      // optional int32 minor = 2;
      case 2: {
        if (tag == 16) {
         parse_minor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minor_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.ComputeCapability)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.ComputeCapability)
  return false;
#undef DO_
}

void ComputeCapability::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.ComputeCapability)
  // optional int32 major = 1;
  if (this->major() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->major(), output);
  }

  // optional int32 minor = 2;
  if (this->minor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->minor(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.ComputeCapability)
}

::google::protobuf::uint8* ComputeCapability::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ComputeCapability)
  // optional int32 major = 1;
  if (this->major() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->major(), target);
  }

  // optional int32 minor = 2;
  if (this->minor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->minor(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ComputeCapability)
  return target;
}

int ComputeCapability::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ComputeCapability)
  int total_size = 0;

  // optional int32 major = 1;
  if (this->major() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->major());
  }

  // optional int32 minor = 2;
  if (this->minor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->minor());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComputeCapability::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ComputeCapability)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ComputeCapability* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ComputeCapability>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ComputeCapability)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ComputeCapability)
    MergeFrom(*source);
  }
}

void ComputeCapability::MergeFrom(const ComputeCapability& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ComputeCapability)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.major() != 0) {
    set_major(from.major());
  }
  if (from.minor() != 0) {
    set_minor(from.minor());
  }
}

void ComputeCapability::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ComputeCapability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComputeCapability::CopyFrom(const ComputeCapability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ComputeCapability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComputeCapability::IsInitialized() const {

  return true;
}

void ComputeCapability::Swap(ComputeCapability* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ComputeCapability::InternalSwap(ComputeCapability* other) {
  std::swap(major_, other->major_);
  std::swap(minor_, other->minor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ComputeCapability::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComputeCapability_descriptor_;
  metadata.reflection = ComputeCapability_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ComputeCapability

// optional int32 major = 1;
void ComputeCapability::clear_major() {
  major_ = 0;
}
 ::google::protobuf::int32 ComputeCapability::major() const {
  // @@protoc_insertion_point(field_get:tensorflow.ComputeCapability.major)
  return major_;
}
 void ComputeCapability::set_major(::google::protobuf::int32 value) {
  
  major_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ComputeCapability.major)
}

// optional int32 minor = 2;
void ComputeCapability::clear_minor() {
  minor_ = 0;
}
 ::google::protobuf::int32 ComputeCapability::minor() const {
  // @@protoc_insertion_point(field_get:tensorflow.ComputeCapability.minor)
  return minor_;
}
 void ComputeCapability::set_minor(::google::protobuf::int32 value) {
  
  minor_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ComputeCapability.minor)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* AutotuneResult_FailureKind_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AutotuneResult_FailureKind_descriptor_;
}
bool AutotuneResult_FailureKind_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AutotuneResult_FailureKind AutotuneResult::UNKNOWN;
const AutotuneResult_FailureKind AutotuneResult::REDZONE_MODIFIED;
const AutotuneResult_FailureKind AutotuneResult::WRONG_RESULT;
const AutotuneResult_FailureKind AutotuneResult::FailureKind_MIN;
const AutotuneResult_FailureKind AutotuneResult::FailureKind_MAX;
const int AutotuneResult::FailureKind_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutotuneResult_FailureResult::kKindFieldNumber;
const int AutotuneResult_FailureResult::kMsgFieldNumber;
const int AutotuneResult_FailureResult::kReferenceConvFieldNumber;
const int AutotuneResult_FailureResult::kReferenceGemmFieldNumber;
const int AutotuneResult_FailureResult::kBufferAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutotuneResult_FailureResult::AutotuneResult_FailureResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.AutotuneResult.FailureResult)
}

void AutotuneResult_FailureResult::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  AutotuneResult_FailureResult_default_oneof_instance_->reference_conv_ = const_cast< ::tensorflow::AutotuneResult_ConvKey*>(&::tensorflow::AutotuneResult_ConvKey::default_instance());
  AutotuneResult_FailureResult_default_oneof_instance_->reference_gemm_ = const_cast< ::tensorflow::AutotuneResult_GemmKey*>(&::tensorflow::AutotuneResult_GemmKey::default_instance());
}

AutotuneResult_FailureResult::AutotuneResult_FailureResult(const AutotuneResult_FailureResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.AutotuneResult.FailureResult)
}

void AutotuneResult_FailureResult::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  kind_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buffer_address_ = GOOGLE_LONGLONG(0);
  clear_has_key();
}

AutotuneResult_FailureResult::~AutotuneResult_FailureResult() {
  // @@protoc_insertion_point(destructor:tensorflow.AutotuneResult.FailureResult)
  SharedDtor();
}

void AutotuneResult_FailureResult::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_key()) {
    clear_key();
  }
  if (this != default_instance_) {
  }
}

void AutotuneResult_FailureResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutotuneResult_FailureResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AutotuneResult_FailureResult_descriptor_;
}

const AutotuneResult_FailureResult& AutotuneResult_FailureResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto();
  return *default_instance_;
}

AutotuneResult_FailureResult* AutotuneResult_FailureResult::default_instance_ = NULL;

AutotuneResult_FailureResult* AutotuneResult_FailureResult::New(::google::protobuf::Arena* arena) const {
  AutotuneResult_FailureResult* n = new AutotuneResult_FailureResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AutotuneResult_FailureResult::clear_key() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.AutotuneResult.FailureResult)
  switch(key_case()) {
    case kReferenceConv: {
      delete key_.reference_conv_;
      break;
    }
    case kReferenceGemm: {
      delete key_.reference_gemm_;
      break;
    }
    case KEY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KEY_NOT_SET;
}


void AutotuneResult_FailureResult::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.AutotuneResult.FailureResult)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AutotuneResult_FailureResult, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AutotuneResult_FailureResult*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(buffer_address_, kind_);
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  clear_key();
}

bool AutotuneResult_FailureResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.AutotuneResult.FailureResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tensorflow.AutotuneResult.FailureKind kind = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_kind(static_cast< ::tensorflow::AutotuneResult_FailureKind >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional string msg = 2;
      case 2: {
        if (tag == 18) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.AutotuneResult.FailureResult.msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_reference_conv;
        break;
      }

      // optional .tensorflow.AutotuneResult.ConvKey reference_conv = 11;
      case 11: {
        if (tag == 90) {
         parse_reference_conv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reference_conv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_reference_gemm;
        break;
      }

      // optional .tensorflow.AutotuneResult.GemmKey reference_gemm = 12;
      case 12: {
        if (tag == 98) {
         parse_reference_gemm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reference_gemm()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_buffer_address;
        break;
      }

      // optional int64 buffer_address = 13;
      case 13: {
        if (tag == 104) {
         parse_buffer_address:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buffer_address_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.AutotuneResult.FailureResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.AutotuneResult.FailureResult)
  return false;
#undef DO_
}

void AutotuneResult_FailureResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.AutotuneResult.FailureResult)
  // optional .tensorflow.AutotuneResult.FailureKind kind = 1;
  if (this->kind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->kind(), output);
  }

  // optional string msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.AutotuneResult.FailureResult.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  // optional .tensorflow.AutotuneResult.ConvKey reference_conv = 11;
  if (has_reference_conv()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *key_.reference_conv_, output);
  }

  // optional .tensorflow.AutotuneResult.GemmKey reference_gemm = 12;
  if (has_reference_gemm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *key_.reference_gemm_, output);
  }

  // optional int64 buffer_address = 13;
  if (this->buffer_address() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->buffer_address(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.AutotuneResult.FailureResult)
}

::google::protobuf::uint8* AutotuneResult_FailureResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.AutotuneResult.FailureResult)
  // optional .tensorflow.AutotuneResult.FailureKind kind = 1;
  if (this->kind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->kind(), target);
  }

  // optional string msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.AutotuneResult.FailureResult.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  // optional .tensorflow.AutotuneResult.ConvKey reference_conv = 11;
  if (has_reference_conv()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *key_.reference_conv_, false, target);
  }

  // optional .tensorflow.AutotuneResult.GemmKey reference_gemm = 12;
  if (has_reference_gemm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *key_.reference_gemm_, false, target);
  }

  // optional int64 buffer_address = 13;
  if (this->buffer_address() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->buffer_address(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.AutotuneResult.FailureResult)
  return target;
}

int AutotuneResult_FailureResult::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.AutotuneResult.FailureResult)
  int total_size = 0;

  // optional .tensorflow.AutotuneResult.FailureKind kind = 1;
  if (this->kind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
  }

  // optional string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // optional int64 buffer_address = 13;
  if (this->buffer_address() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->buffer_address());
  }

  switch (key_case()) {
    // optional .tensorflow.AutotuneResult.ConvKey reference_conv = 11;
    case kReferenceConv: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *key_.reference_conv_);
      break;
    }
    // optional .tensorflow.AutotuneResult.GemmKey reference_gemm = 12;
    case kReferenceGemm: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *key_.reference_gemm_);
      break;
    }
    case KEY_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutotuneResult_FailureResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.AutotuneResult.FailureResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AutotuneResult_FailureResult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AutotuneResult_FailureResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.AutotuneResult.FailureResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.AutotuneResult.FailureResult)
    MergeFrom(*source);
  }
}

void AutotuneResult_FailureResult::MergeFrom(const AutotuneResult_FailureResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.AutotuneResult.FailureResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.key_case()) {
    case kReferenceConv: {
      mutable_reference_conv()->::tensorflow::AutotuneResult_ConvKey::MergeFrom(from.reference_conv());
      break;
    }
    case kReferenceGemm: {
      mutable_reference_gemm()->::tensorflow::AutotuneResult_GemmKey::MergeFrom(from.reference_gemm());
      break;
    }
    case KEY_NOT_SET: {
      break;
    }
  }
  if (from.kind() != 0) {
    set_kind(from.kind());
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.buffer_address() != 0) {
    set_buffer_address(from.buffer_address());
  }
}

void AutotuneResult_FailureResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.AutotuneResult.FailureResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutotuneResult_FailureResult::CopyFrom(const AutotuneResult_FailureResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.AutotuneResult.FailureResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutotuneResult_FailureResult::IsInitialized() const {

  return true;
}

void AutotuneResult_FailureResult::Swap(AutotuneResult_FailureResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AutotuneResult_FailureResult::InternalSwap(AutotuneResult_FailureResult* other) {
  std::swap(kind_, other->kind_);
  msg_.Swap(&other->msg_);
  std::swap(buffer_address_, other->buffer_address_);
  std::swap(key_, other->key_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AutotuneResult_FailureResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AutotuneResult_FailureResult_descriptor_;
  metadata.reflection = AutotuneResult_FailureResult_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutotuneResult_ConvKey::kAlgorithmFieldNumber;
const int AutotuneResult_ConvKey::kTensorOpsEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutotuneResult_ConvKey::AutotuneResult_ConvKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.AutotuneResult.ConvKey)
}

void AutotuneResult_ConvKey::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AutotuneResult_ConvKey::AutotuneResult_ConvKey(const AutotuneResult_ConvKey& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.AutotuneResult.ConvKey)
}

void AutotuneResult_ConvKey::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  algorithm_ = GOOGLE_LONGLONG(0);
  tensor_ops_enabled_ = false;
}

AutotuneResult_ConvKey::~AutotuneResult_ConvKey() {
  // @@protoc_insertion_point(destructor:tensorflow.AutotuneResult.ConvKey)
  SharedDtor();
}

void AutotuneResult_ConvKey::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AutotuneResult_ConvKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutotuneResult_ConvKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AutotuneResult_ConvKey_descriptor_;
}

const AutotuneResult_ConvKey& AutotuneResult_ConvKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto();
  return *default_instance_;
}

AutotuneResult_ConvKey* AutotuneResult_ConvKey::default_instance_ = NULL;

AutotuneResult_ConvKey* AutotuneResult_ConvKey::New(::google::protobuf::Arena* arena) const {
  AutotuneResult_ConvKey* n = new AutotuneResult_ConvKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AutotuneResult_ConvKey::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.AutotuneResult.ConvKey)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AutotuneResult_ConvKey, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AutotuneResult_ConvKey*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(algorithm_, tensor_ops_enabled_);

#undef ZR_HELPER_
#undef ZR_

}

bool AutotuneResult_ConvKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.AutotuneResult.ConvKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 algorithm = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &algorithm_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tensor_ops_enabled;
        break;
      }

      // optional bool tensor_ops_enabled = 2;
      case 2: {
        if (tag == 16) {
         parse_tensor_ops_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tensor_ops_enabled_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.AutotuneResult.ConvKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.AutotuneResult.ConvKey)
  return false;
#undef DO_
}

void AutotuneResult_ConvKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.AutotuneResult.ConvKey)
  // optional int64 algorithm = 1;
  if (this->algorithm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->algorithm(), output);
  }

  // optional bool tensor_ops_enabled = 2;
  if (this->tensor_ops_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->tensor_ops_enabled(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.AutotuneResult.ConvKey)
}

::google::protobuf::uint8* AutotuneResult_ConvKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.AutotuneResult.ConvKey)
  // optional int64 algorithm = 1;
  if (this->algorithm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->algorithm(), target);
  }

  // optional bool tensor_ops_enabled = 2;
  if (this->tensor_ops_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->tensor_ops_enabled(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.AutotuneResult.ConvKey)
  return target;
}

int AutotuneResult_ConvKey::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.AutotuneResult.ConvKey)
  int total_size = 0;

  // optional int64 algorithm = 1;
  if (this->algorithm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->algorithm());
  }

  // optional bool tensor_ops_enabled = 2;
  if (this->tensor_ops_enabled() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutotuneResult_ConvKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.AutotuneResult.ConvKey)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AutotuneResult_ConvKey* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AutotuneResult_ConvKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.AutotuneResult.ConvKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.AutotuneResult.ConvKey)
    MergeFrom(*source);
  }
}

void AutotuneResult_ConvKey::MergeFrom(const AutotuneResult_ConvKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.AutotuneResult.ConvKey)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.algorithm() != 0) {
    set_algorithm(from.algorithm());
  }
  if (from.tensor_ops_enabled() != 0) {
    set_tensor_ops_enabled(from.tensor_ops_enabled());
  }
}

void AutotuneResult_ConvKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.AutotuneResult.ConvKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutotuneResult_ConvKey::CopyFrom(const AutotuneResult_ConvKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.AutotuneResult.ConvKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutotuneResult_ConvKey::IsInitialized() const {

  return true;
}

void AutotuneResult_ConvKey::Swap(AutotuneResult_ConvKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AutotuneResult_ConvKey::InternalSwap(AutotuneResult_ConvKey* other) {
  std::swap(algorithm_, other->algorithm_);
  std::swap(tensor_ops_enabled_, other->tensor_ops_enabled_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AutotuneResult_ConvKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AutotuneResult_ConvKey_descriptor_;
  metadata.reflection = AutotuneResult_ConvKey_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutotuneResult_GemmKey::kAlgorithmFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutotuneResult_GemmKey::AutotuneResult_GemmKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.AutotuneResult.GemmKey)
}

void AutotuneResult_GemmKey::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AutotuneResult_GemmKey::AutotuneResult_GemmKey(const AutotuneResult_GemmKey& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.AutotuneResult.GemmKey)
}

void AutotuneResult_GemmKey::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  algorithm_ = GOOGLE_LONGLONG(0);
}

AutotuneResult_GemmKey::~AutotuneResult_GemmKey() {
  // @@protoc_insertion_point(destructor:tensorflow.AutotuneResult.GemmKey)
  SharedDtor();
}

void AutotuneResult_GemmKey::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AutotuneResult_GemmKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutotuneResult_GemmKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AutotuneResult_GemmKey_descriptor_;
}

const AutotuneResult_GemmKey& AutotuneResult_GemmKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto();
  return *default_instance_;
}

AutotuneResult_GemmKey* AutotuneResult_GemmKey::default_instance_ = NULL;

AutotuneResult_GemmKey* AutotuneResult_GemmKey::New(::google::protobuf::Arena* arena) const {
  AutotuneResult_GemmKey* n = new AutotuneResult_GemmKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AutotuneResult_GemmKey::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.AutotuneResult.GemmKey)
  algorithm_ = GOOGLE_LONGLONG(0);
}

bool AutotuneResult_GemmKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.AutotuneResult.GemmKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 algorithm = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &algorithm_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.AutotuneResult.GemmKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.AutotuneResult.GemmKey)
  return false;
#undef DO_
}

void AutotuneResult_GemmKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.AutotuneResult.GemmKey)
  // optional int64 algorithm = 1;
  if (this->algorithm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->algorithm(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.AutotuneResult.GemmKey)
}

::google::protobuf::uint8* AutotuneResult_GemmKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.AutotuneResult.GemmKey)
  // optional int64 algorithm = 1;
  if (this->algorithm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->algorithm(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.AutotuneResult.GemmKey)
  return target;
}

int AutotuneResult_GemmKey::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.AutotuneResult.GemmKey)
  int total_size = 0;

  // optional int64 algorithm = 1;
  if (this->algorithm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->algorithm());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutotuneResult_GemmKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.AutotuneResult.GemmKey)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AutotuneResult_GemmKey* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AutotuneResult_GemmKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.AutotuneResult.GemmKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.AutotuneResult.GemmKey)
    MergeFrom(*source);
  }
}

void AutotuneResult_GemmKey::MergeFrom(const AutotuneResult_GemmKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.AutotuneResult.GemmKey)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.algorithm() != 0) {
    set_algorithm(from.algorithm());
  }
}

void AutotuneResult_GemmKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.AutotuneResult.GemmKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutotuneResult_GemmKey::CopyFrom(const AutotuneResult_GemmKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.AutotuneResult.GemmKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutotuneResult_GemmKey::IsInitialized() const {

  return true;
}

void AutotuneResult_GemmKey::Swap(AutotuneResult_GemmKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AutotuneResult_GemmKey::InternalSwap(AutotuneResult_GemmKey* other) {
  std::swap(algorithm_, other->algorithm_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AutotuneResult_GemmKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AutotuneResult_GemmKey_descriptor_;
  metadata.reflection = AutotuneResult_GemmKey_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutotuneResult::kScratchBytesFieldNumber;
const int AutotuneResult::kRunTimeFieldNumber;
const int AutotuneResult::kFailureFieldNumber;
const int AutotuneResult::kConvFieldNumber;
const int AutotuneResult::kGemmFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutotuneResult::AutotuneResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.AutotuneResult)
}

void AutotuneResult::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  run_time_ = const_cast< ::google::protobuf::Duration*>(&::google::protobuf::Duration::default_instance());
  failure_ = const_cast< ::tensorflow::AutotuneResult_FailureResult*>(&::tensorflow::AutotuneResult_FailureResult::default_instance());
  AutotuneResult_default_oneof_instance_->conv_ = const_cast< ::tensorflow::AutotuneResult_ConvKey*>(&::tensorflow::AutotuneResult_ConvKey::default_instance());
  AutotuneResult_default_oneof_instance_->gemm_ = const_cast< ::tensorflow::AutotuneResult_GemmKey*>(&::tensorflow::AutotuneResult_GemmKey::default_instance());
}

AutotuneResult::AutotuneResult(const AutotuneResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.AutotuneResult)
}

void AutotuneResult::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  scratch_bytes_ = GOOGLE_LONGLONG(0);
  run_time_ = NULL;
  failure_ = NULL;
  clear_has_key();
}

AutotuneResult::~AutotuneResult() {
  // @@protoc_insertion_point(destructor:tensorflow.AutotuneResult)
  SharedDtor();
}

void AutotuneResult::SharedDtor() {
  if (has_key()) {
    clear_key();
  }
  if (this != default_instance_) {
    delete run_time_;
    delete failure_;
  }
}

void AutotuneResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutotuneResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AutotuneResult_descriptor_;
}

const AutotuneResult& AutotuneResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto();
  return *default_instance_;
}

AutotuneResult* AutotuneResult::default_instance_ = NULL;

AutotuneResult* AutotuneResult::New(::google::protobuf::Arena* arena) const {
  AutotuneResult* n = new AutotuneResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AutotuneResult::clear_key() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.AutotuneResult)
  switch(key_case()) {
    case kConv: {
      delete key_.conv_;
      break;
    }
    case kGemm: {
      delete key_.gemm_;
      break;
    }
    case KEY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KEY_NOT_SET;
}


void AutotuneResult::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.AutotuneResult)
  scratch_bytes_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && run_time_ != NULL) delete run_time_;
  run_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && failure_ != NULL) delete failure_;
  failure_ = NULL;
  clear_key();
}

bool AutotuneResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.AutotuneResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tensorflow.AutotuneResult.ConvKey conv = 5;
      case 5: {
        if (tag == 42) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_gemm;
        break;
      }

      // optional .tensorflow.AutotuneResult.GemmKey gemm = 6;
      case 6: {
        if (tag == 50) {
         parse_gemm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gemm()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_failure;
        break;
      }

      // optional .tensorflow.AutotuneResult.FailureResult failure = 7;
      case 7: {
        if (tag == 58) {
         parse_failure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_failure()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_scratch_bytes;
        break;
      }

      // optional int64 scratch_bytes = 8;
      case 8: {
        if (tag == 64) {
         parse_scratch_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &scratch_bytes_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_run_time;
        break;
      }

      // optional .google.protobuf.Duration run_time = 9;
      case 9: {
        if (tag == 74) {
         parse_run_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_run_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.AutotuneResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.AutotuneResult)
  return false;
#undef DO_
}

void AutotuneResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.AutotuneResult)
  // optional .tensorflow.AutotuneResult.ConvKey conv = 5;
  if (has_conv()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *key_.conv_, output);
  }

  // optional .tensorflow.AutotuneResult.GemmKey gemm = 6;
  if (has_gemm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *key_.gemm_, output);
  }

  // optional .tensorflow.AutotuneResult.FailureResult failure = 7;
  if (this->has_failure()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->failure_, output);
  }

  // optional int64 scratch_bytes = 8;
  if (this->scratch_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->scratch_bytes(), output);
  }

  // optional .google.protobuf.Duration run_time = 9;
  if (this->has_run_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->run_time_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.AutotuneResult)
}

::google::protobuf::uint8* AutotuneResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.AutotuneResult)
  // optional .tensorflow.AutotuneResult.ConvKey conv = 5;
  if (has_conv()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *key_.conv_, false, target);
  }

  // optional .tensorflow.AutotuneResult.GemmKey gemm = 6;
  if (has_gemm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *key_.gemm_, false, target);
  }

  // optional .tensorflow.AutotuneResult.FailureResult failure = 7;
  if (this->has_failure()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->failure_, false, target);
  }

  // optional int64 scratch_bytes = 8;
  if (this->scratch_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->scratch_bytes(), target);
  }

  // optional .google.protobuf.Duration run_time = 9;
  if (this->has_run_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->run_time_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.AutotuneResult)
  return target;
}

int AutotuneResult::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.AutotuneResult)
  int total_size = 0;

  // optional int64 scratch_bytes = 8;
  if (this->scratch_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->scratch_bytes());
  }

  // optional .google.protobuf.Duration run_time = 9;
  if (this->has_run_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->run_time_);
  }

  // optional .tensorflow.AutotuneResult.FailureResult failure = 7;
  if (this->has_failure()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->failure_);
  }

  switch (key_case()) {
    // optional .tensorflow.AutotuneResult.ConvKey conv = 5;
    case kConv: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *key_.conv_);
      break;
    }
    // optional .tensorflow.AutotuneResult.GemmKey gemm = 6;
    case kGemm: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *key_.gemm_);
      break;
    }
    case KEY_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutotuneResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.AutotuneResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AutotuneResult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AutotuneResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.AutotuneResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.AutotuneResult)
    MergeFrom(*source);
  }
}

void AutotuneResult::MergeFrom(const AutotuneResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.AutotuneResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.key_case()) {
    case kConv: {
      mutable_conv()->::tensorflow::AutotuneResult_ConvKey::MergeFrom(from.conv());
      break;
    }
    case kGemm: {
      mutable_gemm()->::tensorflow::AutotuneResult_GemmKey::MergeFrom(from.gemm());
      break;
    }
    case KEY_NOT_SET: {
      break;
    }
  }
  if (from.scratch_bytes() != 0) {
    set_scratch_bytes(from.scratch_bytes());
  }
  if (from.has_run_time()) {
    mutable_run_time()->::google::protobuf::Duration::MergeFrom(from.run_time());
  }
  if (from.has_failure()) {
    mutable_failure()->::tensorflow::AutotuneResult_FailureResult::MergeFrom(from.failure());
  }
}

void AutotuneResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.AutotuneResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutotuneResult::CopyFrom(const AutotuneResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.AutotuneResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutotuneResult::IsInitialized() const {

  return true;
}

void AutotuneResult::Swap(AutotuneResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AutotuneResult::InternalSwap(AutotuneResult* other) {
  std::swap(scratch_bytes_, other->scratch_bytes_);
  std::swap(run_time_, other->run_time_);
  std::swap(failure_, other->failure_);
  std::swap(key_, other->key_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AutotuneResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AutotuneResult_descriptor_;
  metadata.reflection = AutotuneResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AutotuneResult_FailureResult

// optional .tensorflow.AutotuneResult.FailureKind kind = 1;
void AutotuneResult_FailureResult::clear_kind() {
  kind_ = 0;
}
 ::tensorflow::AutotuneResult_FailureKind AutotuneResult_FailureResult::kind() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutotuneResult.FailureResult.kind)
  return static_cast< ::tensorflow::AutotuneResult_FailureKind >(kind_);
}
 void AutotuneResult_FailureResult::set_kind(::tensorflow::AutotuneResult_FailureKind value) {
  
  kind_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.AutotuneResult.FailureResult.kind)
}

// optional string msg = 2;
void AutotuneResult_FailureResult::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AutotuneResult_FailureResult::msg() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutotuneResult.FailureResult.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AutotuneResult_FailureResult::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.AutotuneResult.FailureResult.msg)
}
 void AutotuneResult_FailureResult::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.AutotuneResult.FailureResult.msg)
}
 void AutotuneResult_FailureResult::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.AutotuneResult.FailureResult.msg)
}
 ::std::string* AutotuneResult_FailureResult::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.AutotuneResult.FailureResult.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AutotuneResult_FailureResult::release_msg() {
  // @@protoc_insertion_point(field_release:tensorflow.AutotuneResult.FailureResult.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AutotuneResult_FailureResult::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.AutotuneResult.FailureResult.msg)
}

// optional .tensorflow.AutotuneResult.ConvKey reference_conv = 11;
bool AutotuneResult_FailureResult::has_reference_conv() const {
  return key_case() == kReferenceConv;
}
void AutotuneResult_FailureResult::set_has_reference_conv() {
  _oneof_case_[0] = kReferenceConv;
}
void AutotuneResult_FailureResult::clear_reference_conv() {
  if (has_reference_conv()) {
    delete key_.reference_conv_;
    clear_has_key();
  }
}
 const ::tensorflow::AutotuneResult_ConvKey& AutotuneResult_FailureResult::reference_conv() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutotuneResult.FailureResult.reference_conv)
  return has_reference_conv()
      ? *key_.reference_conv_
      : ::tensorflow::AutotuneResult_ConvKey::default_instance();
}
::tensorflow::AutotuneResult_ConvKey* AutotuneResult_FailureResult::mutable_reference_conv() {
  if (!has_reference_conv()) {
    clear_key();
    set_has_reference_conv();
    key_.reference_conv_ = new ::tensorflow::AutotuneResult_ConvKey;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.AutotuneResult.FailureResult.reference_conv)
  return key_.reference_conv_;
}
::tensorflow::AutotuneResult_ConvKey* AutotuneResult_FailureResult::release_reference_conv() {
  // @@protoc_insertion_point(field_release:tensorflow.AutotuneResult.FailureResult.reference_conv)
  if (has_reference_conv()) {
    clear_has_key();
    ::tensorflow::AutotuneResult_ConvKey* temp = key_.reference_conv_;
    key_.reference_conv_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AutotuneResult_FailureResult::set_allocated_reference_conv(::tensorflow::AutotuneResult_ConvKey* reference_conv) {
  clear_key();
  if (reference_conv) {
    set_has_reference_conv();
    key_.reference_conv_ = reference_conv;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.AutotuneResult.FailureResult.reference_conv)
}

// optional .tensorflow.AutotuneResult.GemmKey reference_gemm = 12;
bool AutotuneResult_FailureResult::has_reference_gemm() const {
  return key_case() == kReferenceGemm;
}
void AutotuneResult_FailureResult::set_has_reference_gemm() {
  _oneof_case_[0] = kReferenceGemm;
}
void AutotuneResult_FailureResult::clear_reference_gemm() {
  if (has_reference_gemm()) {
    delete key_.reference_gemm_;
    clear_has_key();
  }
}
 const ::tensorflow::AutotuneResult_GemmKey& AutotuneResult_FailureResult::reference_gemm() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutotuneResult.FailureResult.reference_gemm)
  return has_reference_gemm()
      ? *key_.reference_gemm_
      : ::tensorflow::AutotuneResult_GemmKey::default_instance();
}
::tensorflow::AutotuneResult_GemmKey* AutotuneResult_FailureResult::mutable_reference_gemm() {
  if (!has_reference_gemm()) {
    clear_key();
    set_has_reference_gemm();
    key_.reference_gemm_ = new ::tensorflow::AutotuneResult_GemmKey;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.AutotuneResult.FailureResult.reference_gemm)
  return key_.reference_gemm_;
}
::tensorflow::AutotuneResult_GemmKey* AutotuneResult_FailureResult::release_reference_gemm() {
  // @@protoc_insertion_point(field_release:tensorflow.AutotuneResult.FailureResult.reference_gemm)
  if (has_reference_gemm()) {
    clear_has_key();
    ::tensorflow::AutotuneResult_GemmKey* temp = key_.reference_gemm_;
    key_.reference_gemm_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AutotuneResult_FailureResult::set_allocated_reference_gemm(::tensorflow::AutotuneResult_GemmKey* reference_gemm) {
  clear_key();
  if (reference_gemm) {
    set_has_reference_gemm();
    key_.reference_gemm_ = reference_gemm;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.AutotuneResult.FailureResult.reference_gemm)
}

// optional int64 buffer_address = 13;
void AutotuneResult_FailureResult::clear_buffer_address() {
  buffer_address_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 AutotuneResult_FailureResult::buffer_address() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutotuneResult.FailureResult.buffer_address)
  return buffer_address_;
}
 void AutotuneResult_FailureResult::set_buffer_address(::google::protobuf::int64 value) {
  
  buffer_address_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.AutotuneResult.FailureResult.buffer_address)
}

bool AutotuneResult_FailureResult::has_key() const {
  return key_case() != KEY_NOT_SET;
}
void AutotuneResult_FailureResult::clear_has_key() {
  _oneof_case_[0] = KEY_NOT_SET;
}
AutotuneResult_FailureResult::KeyCase AutotuneResult_FailureResult::key_case() const {
  return AutotuneResult_FailureResult::KeyCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AutotuneResult_ConvKey

// optional int64 algorithm = 1;
void AutotuneResult_ConvKey::clear_algorithm() {
  algorithm_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 AutotuneResult_ConvKey::algorithm() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutotuneResult.ConvKey.algorithm)
  return algorithm_;
}
 void AutotuneResult_ConvKey::set_algorithm(::google::protobuf::int64 value) {
  
  algorithm_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.AutotuneResult.ConvKey.algorithm)
}

// optional bool tensor_ops_enabled = 2;
void AutotuneResult_ConvKey::clear_tensor_ops_enabled() {
  tensor_ops_enabled_ = false;
}
 bool AutotuneResult_ConvKey::tensor_ops_enabled() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutotuneResult.ConvKey.tensor_ops_enabled)
  return tensor_ops_enabled_;
}
 void AutotuneResult_ConvKey::set_tensor_ops_enabled(bool value) {
  
  tensor_ops_enabled_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.AutotuneResult.ConvKey.tensor_ops_enabled)
}

// -------------------------------------------------------------------

// AutotuneResult_GemmKey

// optional int64 algorithm = 1;
void AutotuneResult_GemmKey::clear_algorithm() {
  algorithm_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 AutotuneResult_GemmKey::algorithm() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutotuneResult.GemmKey.algorithm)
  return algorithm_;
}
 void AutotuneResult_GemmKey::set_algorithm(::google::protobuf::int64 value) {
  
  algorithm_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.AutotuneResult.GemmKey.algorithm)
}

// -------------------------------------------------------------------

// AutotuneResult

// optional int64 scratch_bytes = 8;
void AutotuneResult::clear_scratch_bytes() {
  scratch_bytes_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 AutotuneResult::scratch_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutotuneResult.scratch_bytes)
  return scratch_bytes_;
}
 void AutotuneResult::set_scratch_bytes(::google::protobuf::int64 value) {
  
  scratch_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.AutotuneResult.scratch_bytes)
}

// optional .google.protobuf.Duration run_time = 9;
bool AutotuneResult::has_run_time() const {
  return !_is_default_instance_ && run_time_ != NULL;
}
void AutotuneResult::clear_run_time() {
  if (GetArenaNoVirtual() == NULL && run_time_ != NULL) delete run_time_;
  run_time_ = NULL;
}
const ::google::protobuf::Duration& AutotuneResult::run_time() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutotuneResult.run_time)
  return run_time_ != NULL ? *run_time_ : *default_instance_->run_time_;
}
::google::protobuf::Duration* AutotuneResult::mutable_run_time() {
  
  if (run_time_ == NULL) {
    run_time_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.AutotuneResult.run_time)
  return run_time_;
}
::google::protobuf::Duration* AutotuneResult::release_run_time() {
  // @@protoc_insertion_point(field_release:tensorflow.AutotuneResult.run_time)
  
  ::google::protobuf::Duration* temp = run_time_;
  run_time_ = NULL;
  return temp;
}
void AutotuneResult::set_allocated_run_time(::google::protobuf::Duration* run_time) {
  delete run_time_;
  run_time_ = run_time;
  if (run_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.AutotuneResult.run_time)
}

// optional .tensorflow.AutotuneResult.FailureResult failure = 7;
bool AutotuneResult::has_failure() const {
  return !_is_default_instance_ && failure_ != NULL;
}
void AutotuneResult::clear_failure() {
  if (GetArenaNoVirtual() == NULL && failure_ != NULL) delete failure_;
  failure_ = NULL;
}
const ::tensorflow::AutotuneResult_FailureResult& AutotuneResult::failure() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutotuneResult.failure)
  return failure_ != NULL ? *failure_ : *default_instance_->failure_;
}
::tensorflow::AutotuneResult_FailureResult* AutotuneResult::mutable_failure() {
  
  if (failure_ == NULL) {
    failure_ = new ::tensorflow::AutotuneResult_FailureResult;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.AutotuneResult.failure)
  return failure_;
}
::tensorflow::AutotuneResult_FailureResult* AutotuneResult::release_failure() {
  // @@protoc_insertion_point(field_release:tensorflow.AutotuneResult.failure)
  
  ::tensorflow::AutotuneResult_FailureResult* temp = failure_;
  failure_ = NULL;
  return temp;
}
void AutotuneResult::set_allocated_failure(::tensorflow::AutotuneResult_FailureResult* failure) {
  delete failure_;
  failure_ = failure;
  if (failure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.AutotuneResult.failure)
}

// optional .tensorflow.AutotuneResult.ConvKey conv = 5;
bool AutotuneResult::has_conv() const {
  return key_case() == kConv;
}
void AutotuneResult::set_has_conv() {
  _oneof_case_[0] = kConv;
}
void AutotuneResult::clear_conv() {
  if (has_conv()) {
    delete key_.conv_;
    clear_has_key();
  }
}
 const ::tensorflow::AutotuneResult_ConvKey& AutotuneResult::conv() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutotuneResult.conv)
  return has_conv()
      ? *key_.conv_
      : ::tensorflow::AutotuneResult_ConvKey::default_instance();
}
::tensorflow::AutotuneResult_ConvKey* AutotuneResult::mutable_conv() {
  if (!has_conv()) {
    clear_key();
    set_has_conv();
    key_.conv_ = new ::tensorflow::AutotuneResult_ConvKey;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.AutotuneResult.conv)
  return key_.conv_;
}
::tensorflow::AutotuneResult_ConvKey* AutotuneResult::release_conv() {
  // @@protoc_insertion_point(field_release:tensorflow.AutotuneResult.conv)
  if (has_conv()) {
    clear_has_key();
    ::tensorflow::AutotuneResult_ConvKey* temp = key_.conv_;
    key_.conv_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AutotuneResult::set_allocated_conv(::tensorflow::AutotuneResult_ConvKey* conv) {
  clear_key();
  if (conv) {
    set_has_conv();
    key_.conv_ = conv;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.AutotuneResult.conv)
}

// optional .tensorflow.AutotuneResult.GemmKey gemm = 6;
bool AutotuneResult::has_gemm() const {
  return key_case() == kGemm;
}
void AutotuneResult::set_has_gemm() {
  _oneof_case_[0] = kGemm;
}
void AutotuneResult::clear_gemm() {
  if (has_gemm()) {
    delete key_.gemm_;
    clear_has_key();
  }
}
 const ::tensorflow::AutotuneResult_GemmKey& AutotuneResult::gemm() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutotuneResult.gemm)
  return has_gemm()
      ? *key_.gemm_
      : ::tensorflow::AutotuneResult_GemmKey::default_instance();
}
::tensorflow::AutotuneResult_GemmKey* AutotuneResult::mutable_gemm() {
  if (!has_gemm()) {
    clear_key();
    set_has_gemm();
    key_.gemm_ = new ::tensorflow::AutotuneResult_GemmKey;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.AutotuneResult.gemm)
  return key_.gemm_;
}
::tensorflow::AutotuneResult_GemmKey* AutotuneResult::release_gemm() {
  // @@protoc_insertion_point(field_release:tensorflow.AutotuneResult.gemm)
  if (has_gemm()) {
    clear_has_key();
    ::tensorflow::AutotuneResult_GemmKey* temp = key_.gemm_;
    key_.gemm_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AutotuneResult::set_allocated_gemm(::tensorflow::AutotuneResult_GemmKey* gemm) {
  clear_key();
  if (gemm) {
    set_has_gemm();
    key_.gemm_ = gemm;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.AutotuneResult.gemm)
}

bool AutotuneResult::has_key() const {
  return key_case() != KEY_NOT_SET;
}
void AutotuneResult::clear_has_key() {
  _oneof_case_[0] = KEY_NOT_SET;
}
AutotuneResult::KeyCase AutotuneResult::key_case() const {
  return AutotuneResult::KeyCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutotuningLog::kInstrFieldNumber;
const int AutotuningLog::kResultsFieldNumber;
const int AutotuningLog::kCudnnVersionFieldNumber;
const int AutotuningLog::kComputeCapabilityFieldNumber;
const int AutotuningLog::kDevicePciBusIdFieldNumber;
const int AutotuningLog::kBlasVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutotuningLog::AutotuningLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.AutotuningLog)
}

void AutotuningLog::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  instr_ = const_cast< ::google::protobuf::Any*>(&::google::protobuf::Any::default_instance());
  cudnn_version_ = const_cast< ::tensorflow::CudnnVersion*>(&::tensorflow::CudnnVersion::default_instance());
  compute_capability_ = const_cast< ::tensorflow::ComputeCapability*>(&::tensorflow::ComputeCapability::default_instance());
}

AutotuningLog::AutotuningLog(const AutotuningLog& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.AutotuningLog)
}

void AutotuningLog::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  instr_ = NULL;
  cudnn_version_ = NULL;
  compute_capability_ = NULL;
  device_pci_bus_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blas_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AutotuningLog::~AutotuningLog() {
  // @@protoc_insertion_point(destructor:tensorflow.AutotuningLog)
  SharedDtor();
}

void AutotuningLog::SharedDtor() {
  device_pci_bus_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blas_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete instr_;
    delete cudnn_version_;
    delete compute_capability_;
  }
}

void AutotuningLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutotuningLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AutotuningLog_descriptor_;
}

const AutotuningLog& AutotuningLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto();
  return *default_instance_;
}

AutotuningLog* AutotuningLog::default_instance_ = NULL;

AutotuningLog* AutotuningLog::New(::google::protobuf::Arena* arena) const {
  AutotuningLog* n = new AutotuningLog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AutotuningLog::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.AutotuningLog)
  if (GetArenaNoVirtual() == NULL && instr_ != NULL) delete instr_;
  instr_ = NULL;
  if (GetArenaNoVirtual() == NULL && cudnn_version_ != NULL) delete cudnn_version_;
  cudnn_version_ = NULL;
  if (GetArenaNoVirtual() == NULL && compute_capability_ != NULL) delete compute_capability_;
  compute_capability_ = NULL;
  device_pci_bus_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blas_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  results_.Clear();
}

bool AutotuningLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.AutotuningLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.protobuf.Any instr = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_results;
        break;
      }

      // repeated .tensorflow.AutotuneResult results = 2;
      case 2: {
        if (tag == 18) {
         parse_results:
          DO_(input->IncrementRecursionDepth());
         parse_loop_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_results;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_cudnn_version;
        break;
      }

      // optional .tensorflow.CudnnVersion cudnn_version = 3;
      case 3: {
        if (tag == 26) {
         parse_cudnn_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cudnn_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_compute_capability;
        break;
      }

      // optional .tensorflow.ComputeCapability compute_capability = 4;
      case 4: {
        if (tag == 34) {
         parse_compute_capability:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_compute_capability()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_device_pci_bus_id;
        break;
      }

      // optional string device_pci_bus_id = 5;
      case 5: {
        if (tag == 42) {
         parse_device_pci_bus_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_pci_bus_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_pci_bus_id().data(), this->device_pci_bus_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.AutotuningLog.device_pci_bus_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_blas_version;
        break;
      }

      // optional string blas_version = 6;
      case 6: {
        if (tag == 50) {
         parse_blas_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_blas_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->blas_version().data(), this->blas_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.AutotuningLog.blas_version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.AutotuningLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.AutotuningLog)
  return false;
#undef DO_
}

void AutotuningLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.AutotuningLog)
  // optional .google.protobuf.Any instr = 1;
  if (this->has_instr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->instr_, output);
  }

  // repeated .tensorflow.AutotuneResult results = 2;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->results(i), output);
  }

  // optional .tensorflow.CudnnVersion cudnn_version = 3;
  if (this->has_cudnn_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->cudnn_version_, output);
  }

  // optional .tensorflow.ComputeCapability compute_capability = 4;
  if (this->has_compute_capability()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->compute_capability_, output);
  }

  // optional string device_pci_bus_id = 5;
  if (this->device_pci_bus_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_pci_bus_id().data(), this->device_pci_bus_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.AutotuningLog.device_pci_bus_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->device_pci_bus_id(), output);
  }

  // optional string blas_version = 6;
  if (this->blas_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->blas_version().data(), this->blas_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.AutotuningLog.blas_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->blas_version(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.AutotuningLog)
}

::google::protobuf::uint8* AutotuningLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.AutotuningLog)
  // optional .google.protobuf.Any instr = 1;
  if (this->has_instr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->instr_, false, target);
  }

  // repeated .tensorflow.AutotuneResult results = 2;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->results(i), false, target);
  }

  // optional .tensorflow.CudnnVersion cudnn_version = 3;
  if (this->has_cudnn_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->cudnn_version_, false, target);
  }

  // optional .tensorflow.ComputeCapability compute_capability = 4;
  if (this->has_compute_capability()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->compute_capability_, false, target);
  }

  // optional string device_pci_bus_id = 5;
  if (this->device_pci_bus_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_pci_bus_id().data(), this->device_pci_bus_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.AutotuningLog.device_pci_bus_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->device_pci_bus_id(), target);
  }

  // optional string blas_version = 6;
  if (this->blas_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->blas_version().data(), this->blas_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.AutotuningLog.blas_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->blas_version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.AutotuningLog)
  return target;
}

int AutotuningLog::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.AutotuningLog)
  int total_size = 0;

  // optional .google.protobuf.Any instr = 1;
  if (this->has_instr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->instr_);
  }

  // optional .tensorflow.CudnnVersion cudnn_version = 3;
  if (this->has_cudnn_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cudnn_version_);
  }

  // optional .tensorflow.ComputeCapability compute_capability = 4;
  if (this->has_compute_capability()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->compute_capability_);
  }

  // optional string device_pci_bus_id = 5;
  if (this->device_pci_bus_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_pci_bus_id());
  }

  // optional string blas_version = 6;
  if (this->blas_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->blas_version());
  }

  // repeated .tensorflow.AutotuneResult results = 2;
  total_size += 1 * this->results_size();
  for (int i = 0; i < this->results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->results(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutotuningLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.AutotuningLog)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AutotuningLog* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AutotuningLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.AutotuningLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.AutotuningLog)
    MergeFrom(*source);
  }
}

void AutotuningLog::MergeFrom(const AutotuningLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.AutotuningLog)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  results_.MergeFrom(from.results_);
  if (from.has_instr()) {
    mutable_instr()->::google::protobuf::Any::MergeFrom(from.instr());
  }
  if (from.has_cudnn_version()) {
    mutable_cudnn_version()->::tensorflow::CudnnVersion::MergeFrom(from.cudnn_version());
  }
  if (from.has_compute_capability()) {
    mutable_compute_capability()->::tensorflow::ComputeCapability::MergeFrom(from.compute_capability());
  }
  if (from.device_pci_bus_id().size() > 0) {

    device_pci_bus_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_pci_bus_id_);
  }
  if (from.blas_version().size() > 0) {

    blas_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blas_version_);
  }
}

void AutotuningLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.AutotuningLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutotuningLog::CopyFrom(const AutotuningLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.AutotuningLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutotuningLog::IsInitialized() const {

  return true;
}

void AutotuningLog::Swap(AutotuningLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AutotuningLog::InternalSwap(AutotuningLog* other) {
  std::swap(instr_, other->instr_);
  results_.UnsafeArenaSwap(&other->results_);
  std::swap(cudnn_version_, other->cudnn_version_);
  std::swap(compute_capability_, other->compute_capability_);
  device_pci_bus_id_.Swap(&other->device_pci_bus_id_);
  blas_version_.Swap(&other->blas_version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AutotuningLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AutotuningLog_descriptor_;
  metadata.reflection = AutotuningLog_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AutotuningLog

// optional .google.protobuf.Any instr = 1;
bool AutotuningLog::has_instr() const {
  return !_is_default_instance_ && instr_ != NULL;
}
void AutotuningLog::clear_instr() {
  if (GetArenaNoVirtual() == NULL && instr_ != NULL) delete instr_;
  instr_ = NULL;
}
const ::google::protobuf::Any& AutotuningLog::instr() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutotuningLog.instr)
  return instr_ != NULL ? *instr_ : *default_instance_->instr_;
}
::google::protobuf::Any* AutotuningLog::mutable_instr() {
  
  if (instr_ == NULL) {
    instr_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.AutotuningLog.instr)
  return instr_;
}
::google::protobuf::Any* AutotuningLog::release_instr() {
  // @@protoc_insertion_point(field_release:tensorflow.AutotuningLog.instr)
  
  ::google::protobuf::Any* temp = instr_;
  instr_ = NULL;
  return temp;
}
void AutotuningLog::set_allocated_instr(::google::protobuf::Any* instr) {
  delete instr_;
  instr_ = instr;
  if (instr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.AutotuningLog.instr)
}

// repeated .tensorflow.AutotuneResult results = 2;
int AutotuningLog::results_size() const {
  return results_.size();
}
void AutotuningLog::clear_results() {
  results_.Clear();
}
const ::tensorflow::AutotuneResult& AutotuningLog::results(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.AutotuningLog.results)
  return results_.Get(index);
}
::tensorflow::AutotuneResult* AutotuningLog::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.AutotuningLog.results)
  return results_.Mutable(index);
}
::tensorflow::AutotuneResult* AutotuningLog::add_results() {
  // @@protoc_insertion_point(field_add:tensorflow.AutotuningLog.results)
  return results_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::AutotuneResult >*
AutotuningLog::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.AutotuningLog.results)
  return &results_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::AutotuneResult >&
AutotuningLog::results() const {
  // @@protoc_insertion_point(field_list:tensorflow.AutotuningLog.results)
  return results_;
}

// optional .tensorflow.CudnnVersion cudnn_version = 3;
bool AutotuningLog::has_cudnn_version() const {
  return !_is_default_instance_ && cudnn_version_ != NULL;
}
void AutotuningLog::clear_cudnn_version() {
  if (GetArenaNoVirtual() == NULL && cudnn_version_ != NULL) delete cudnn_version_;
  cudnn_version_ = NULL;
}
const ::tensorflow::CudnnVersion& AutotuningLog::cudnn_version() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutotuningLog.cudnn_version)
  return cudnn_version_ != NULL ? *cudnn_version_ : *default_instance_->cudnn_version_;
}
::tensorflow::CudnnVersion* AutotuningLog::mutable_cudnn_version() {
  
  if (cudnn_version_ == NULL) {
    cudnn_version_ = new ::tensorflow::CudnnVersion;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.AutotuningLog.cudnn_version)
  return cudnn_version_;
}
::tensorflow::CudnnVersion* AutotuningLog::release_cudnn_version() {
  // @@protoc_insertion_point(field_release:tensorflow.AutotuningLog.cudnn_version)
  
  ::tensorflow::CudnnVersion* temp = cudnn_version_;
  cudnn_version_ = NULL;
  return temp;
}
void AutotuningLog::set_allocated_cudnn_version(::tensorflow::CudnnVersion* cudnn_version) {
  delete cudnn_version_;
  cudnn_version_ = cudnn_version;
  if (cudnn_version) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.AutotuningLog.cudnn_version)
}

// optional .tensorflow.ComputeCapability compute_capability = 4;
bool AutotuningLog::has_compute_capability() const {
  return !_is_default_instance_ && compute_capability_ != NULL;
}
void AutotuningLog::clear_compute_capability() {
  if (GetArenaNoVirtual() == NULL && compute_capability_ != NULL) delete compute_capability_;
  compute_capability_ = NULL;
}
const ::tensorflow::ComputeCapability& AutotuningLog::compute_capability() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutotuningLog.compute_capability)
  return compute_capability_ != NULL ? *compute_capability_ : *default_instance_->compute_capability_;
}
::tensorflow::ComputeCapability* AutotuningLog::mutable_compute_capability() {
  
  if (compute_capability_ == NULL) {
    compute_capability_ = new ::tensorflow::ComputeCapability;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.AutotuningLog.compute_capability)
  return compute_capability_;
}
::tensorflow::ComputeCapability* AutotuningLog::release_compute_capability() {
  // @@protoc_insertion_point(field_release:tensorflow.AutotuningLog.compute_capability)
  
  ::tensorflow::ComputeCapability* temp = compute_capability_;
  compute_capability_ = NULL;
  return temp;
}
void AutotuningLog::set_allocated_compute_capability(::tensorflow::ComputeCapability* compute_capability) {
  delete compute_capability_;
  compute_capability_ = compute_capability;
  if (compute_capability) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.AutotuningLog.compute_capability)
}

// optional string device_pci_bus_id = 5;
void AutotuningLog::clear_device_pci_bus_id() {
  device_pci_bus_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AutotuningLog::device_pci_bus_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutotuningLog.device_pci_bus_id)
  return device_pci_bus_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AutotuningLog::set_device_pci_bus_id(const ::std::string& value) {
  
  device_pci_bus_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.AutotuningLog.device_pci_bus_id)
}
 void AutotuningLog::set_device_pci_bus_id(const char* value) {
  
  device_pci_bus_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.AutotuningLog.device_pci_bus_id)
}
 void AutotuningLog::set_device_pci_bus_id(const char* value, size_t size) {
  
  device_pci_bus_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.AutotuningLog.device_pci_bus_id)
}
 ::std::string* AutotuningLog::mutable_device_pci_bus_id() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.AutotuningLog.device_pci_bus_id)
  return device_pci_bus_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AutotuningLog::release_device_pci_bus_id() {
  // @@protoc_insertion_point(field_release:tensorflow.AutotuningLog.device_pci_bus_id)
  
  return device_pci_bus_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AutotuningLog::set_allocated_device_pci_bus_id(::std::string* device_pci_bus_id) {
  if (device_pci_bus_id != NULL) {
    
  } else {
    
  }
  device_pci_bus_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_pci_bus_id);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.AutotuningLog.device_pci_bus_id)
}

// optional string blas_version = 6;
void AutotuningLog::clear_blas_version() {
  blas_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AutotuningLog::blas_version() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutotuningLog.blas_version)
  return blas_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AutotuningLog::set_blas_version(const ::std::string& value) {
  
  blas_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.AutotuningLog.blas_version)
}
 void AutotuningLog::set_blas_version(const char* value) {
  
  blas_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.AutotuningLog.blas_version)
}
 void AutotuningLog::set_blas_version(const char* value, size_t size) {
  
  blas_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.AutotuningLog.blas_version)
}
 ::std::string* AutotuningLog::mutable_blas_version() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.AutotuningLog.blas_version)
  return blas_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AutotuningLog::release_blas_version() {
  // @@protoc_insertion_point(field_release:tensorflow.AutotuningLog.blas_version)
  
  return blas_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AutotuningLog::set_allocated_blas_version(::std::string* blas_version) {
  if (blas_version != NULL) {
    
  } else {
    
  }
  blas_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), blas_version);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.AutotuningLog.blas_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
