// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/device_filters.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/protobuf/device_filters.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {

namespace {

const ::google::protobuf::Descriptor* TaskDeviceFilters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskDeviceFilters_reflection_ = NULL;
const ::google::protobuf::Descriptor* JobDeviceFilters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JobDeviceFilters_reflection_ = NULL;
const ::google::protobuf::Descriptor* JobDeviceFilters_TasksEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ClusterDeviceFilters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClusterDeviceFilters_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto() {
  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow/core/protobuf/device_filters.proto");
  GOOGLE_CHECK(file != NULL);
  TaskDeviceFilters_descriptor_ = file->message_type(0);
  static const int TaskDeviceFilters_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDeviceFilters, device_filters_),
  };
  TaskDeviceFilters_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TaskDeviceFilters_descriptor_,
      TaskDeviceFilters::default_instance_,
      TaskDeviceFilters_offsets_,
      -1,
      -1,
      -1,
      sizeof(TaskDeviceFilters),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDeviceFilters, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDeviceFilters, _is_default_instance_));
  JobDeviceFilters_descriptor_ = file->message_type(1);
  static const int JobDeviceFilters_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobDeviceFilters, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobDeviceFilters, tasks_),
  };
  JobDeviceFilters_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      JobDeviceFilters_descriptor_,
      JobDeviceFilters::default_instance_,
      JobDeviceFilters_offsets_,
      -1,
      -1,
      -1,
      sizeof(JobDeviceFilters),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobDeviceFilters, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobDeviceFilters, _is_default_instance_));
  JobDeviceFilters_TasksEntry_descriptor_ = JobDeviceFilters_descriptor_->nested_type(0);
  ClusterDeviceFilters_descriptor_ = file->message_type(2);
  static const int ClusterDeviceFilters_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterDeviceFilters, jobs_),
  };
  ClusterDeviceFilters_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClusterDeviceFilters_descriptor_,
      ClusterDeviceFilters::default_instance_,
      ClusterDeviceFilters_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClusterDeviceFilters),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterDeviceFilters, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterDeviceFilters, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TaskDeviceFilters_descriptor_, &TaskDeviceFilters::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      JobDeviceFilters_descriptor_, &JobDeviceFilters::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        JobDeviceFilters_TasksEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::tensorflow::TaskDeviceFilters,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                JobDeviceFilters_TasksEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClusterDeviceFilters_descriptor_, &ClusterDeviceFilters::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto() {
  delete TaskDeviceFilters::default_instance_;
  delete TaskDeviceFilters_reflection_;
  delete JobDeviceFilters::default_instance_;
  delete JobDeviceFilters_reflection_;
  delete ClusterDeviceFilters::default_instance_;
  delete ClusterDeviceFilters_reflection_;
}

void protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n-tensorflow/core/protobuf/device_filter"
    "s.proto\022\ntensorflow\"+\n\021TaskDeviceFilters"
    "\022\026\n\016device_filters\030\001 \003(\t\"\245\001\n\020JobDeviceFi"
    "lters\022\014\n\004name\030\001 \001(\t\0226\n\005tasks\030\002 \003(\0132\'.ten"
    "sorflow.JobDeviceFilters.TasksEntry\032K\n\nT"
    "asksEntry\022\013\n\003key\030\001 \001(\005\022,\n\005value\030\002 \001(\0132\035."
    "tensorflow.TaskDeviceFilters:\0028\001\"B\n\024Clus"
    "terDeviceFilters\022*\n\004jobs\030\001 \003(\0132\034.tensorf"
    "low.JobDeviceFiltersB\200\001\n\032org.tensorflow."
    "distruntimeB\023DeviceFiltersProtosP\001ZHgith"
    "ub.com/tensorflow/tensorflow/tensorflow/"
    "go/core/core_protos_go_proto\370\001\001b\006proto3", 479);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/protobuf/device_filters.proto", &protobuf_RegisterTypes);
  TaskDeviceFilters::default_instance_ = new TaskDeviceFilters();
  JobDeviceFilters::default_instance_ = new JobDeviceFilters();
  ClusterDeviceFilters::default_instance_ = new ClusterDeviceFilters();
  TaskDeviceFilters::default_instance_->InitAsDefaultInstance();
  JobDeviceFilters::default_instance_->InitAsDefaultInstance();
  ClusterDeviceFilters::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto {
  StaticDescriptorInitializer_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto() {
    protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto();
  }
} static_descriptor_initializer_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskDeviceFilters::kDeviceFiltersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskDeviceFilters::TaskDeviceFilters()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.TaskDeviceFilters)
}

TaskDeviceFilters::TaskDeviceFilters(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  device_filters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.TaskDeviceFilters)
}

void TaskDeviceFilters::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TaskDeviceFilters::TaskDeviceFilters(const TaskDeviceFilters& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.TaskDeviceFilters)
}

void TaskDeviceFilters::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
}

TaskDeviceFilters::~TaskDeviceFilters() {
  // @@protoc_insertion_point(destructor:tensorflow.TaskDeviceFilters)
  SharedDtor();
}

void TaskDeviceFilters::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void TaskDeviceFilters::ArenaDtor(void* object) {
  TaskDeviceFilters* _this = reinterpret_cast< TaskDeviceFilters* >(object);
  (void)_this;
}
void TaskDeviceFilters::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TaskDeviceFilters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskDeviceFilters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskDeviceFilters_descriptor_;
}

const TaskDeviceFilters& TaskDeviceFilters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto();
  return *default_instance_;
}

TaskDeviceFilters* TaskDeviceFilters::default_instance_ = NULL;

TaskDeviceFilters* TaskDeviceFilters::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TaskDeviceFilters>(arena);
}

void TaskDeviceFilters::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TaskDeviceFilters)
  device_filters_.Clear();
}

bool TaskDeviceFilters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.TaskDeviceFilters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string device_filters = 1;
      case 1: {
        if (tag == 10) {
         parse_device_filters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_device_filters()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_filters(this->device_filters_size() - 1).data(),
            this->device_filters(this->device_filters_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.TaskDeviceFilters.device_filters"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_device_filters;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.TaskDeviceFilters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.TaskDeviceFilters)
  return false;
#undef DO_
}

void TaskDeviceFilters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.TaskDeviceFilters)
  // repeated string device_filters = 1;
  for (int i = 0; i < this->device_filters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_filters(i).data(), this->device_filters(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TaskDeviceFilters.device_filters");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->device_filters(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.TaskDeviceFilters)
}

::google::protobuf::uint8* TaskDeviceFilters::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TaskDeviceFilters)
  // repeated string device_filters = 1;
  for (int i = 0; i < this->device_filters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_filters(i).data(), this->device_filters(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TaskDeviceFilters.device_filters");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->device_filters(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TaskDeviceFilters)
  return target;
}

int TaskDeviceFilters::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TaskDeviceFilters)
  int total_size = 0;

  // repeated string device_filters = 1;
  total_size += 1 * this->device_filters_size();
  for (int i = 0; i < this->device_filters_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->device_filters(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskDeviceFilters::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.TaskDeviceFilters)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TaskDeviceFilters* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskDeviceFilters>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.TaskDeviceFilters)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.TaskDeviceFilters)
    MergeFrom(*source);
  }
}

void TaskDeviceFilters::MergeFrom(const TaskDeviceFilters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TaskDeviceFilters)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  device_filters_.MergeFrom(from.device_filters_);
}

void TaskDeviceFilters::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.TaskDeviceFilters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskDeviceFilters::CopyFrom(const TaskDeviceFilters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TaskDeviceFilters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskDeviceFilters::IsInitialized() const {

  return true;
}

void TaskDeviceFilters::Swap(TaskDeviceFilters* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TaskDeviceFilters temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void TaskDeviceFilters::UnsafeArenaSwap(TaskDeviceFilters* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TaskDeviceFilters::InternalSwap(TaskDeviceFilters* other) {
  device_filters_.UnsafeArenaSwap(&other->device_filters_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskDeviceFilters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskDeviceFilters_descriptor_;
  metadata.reflection = TaskDeviceFilters_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskDeviceFilters

// repeated string device_filters = 1;
int TaskDeviceFilters::device_filters_size() const {
  return device_filters_.size();
}
void TaskDeviceFilters::clear_device_filters() {
  device_filters_.Clear();
}
 const ::std::string& TaskDeviceFilters::device_filters(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.TaskDeviceFilters.device_filters)
  return device_filters_.Get(index);
}
 ::std::string* TaskDeviceFilters::mutable_device_filters(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.TaskDeviceFilters.device_filters)
  return device_filters_.Mutable(index);
}
 void TaskDeviceFilters::set_device_filters(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.TaskDeviceFilters.device_filters)
  device_filters_.Mutable(index)->assign(value);
}
 void TaskDeviceFilters::set_device_filters(int index, const char* value) {
  device_filters_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.TaskDeviceFilters.device_filters)
}
 void TaskDeviceFilters::set_device_filters(int index, const char* value, size_t size) {
  device_filters_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.TaskDeviceFilters.device_filters)
}
 ::std::string* TaskDeviceFilters::add_device_filters() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.TaskDeviceFilters.device_filters)
  return device_filters_.Add();
}
 void TaskDeviceFilters::add_device_filters(const ::std::string& value) {
  device_filters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.TaskDeviceFilters.device_filters)
}
 void TaskDeviceFilters::add_device_filters(const char* value) {
  device_filters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.TaskDeviceFilters.device_filters)
}
 void TaskDeviceFilters::add_device_filters(const char* value, size_t size) {
  device_filters_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.TaskDeviceFilters.device_filters)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TaskDeviceFilters::device_filters() const {
  // @@protoc_insertion_point(field_list:tensorflow.TaskDeviceFilters.device_filters)
  return device_filters_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TaskDeviceFilters::mutable_device_filters() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.TaskDeviceFilters.device_filters)
  return &device_filters_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JobDeviceFilters::kNameFieldNumber;
const int JobDeviceFilters::kTasksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JobDeviceFilters::JobDeviceFilters()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.JobDeviceFilters)
}

JobDeviceFilters::JobDeviceFilters(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  tasks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.JobDeviceFilters)
}

void JobDeviceFilters::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

JobDeviceFilters::JobDeviceFilters(const JobDeviceFilters& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.JobDeviceFilters)
}

void JobDeviceFilters::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tasks_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  tasks_.SetEntryDescriptor(
      &::tensorflow::JobDeviceFilters_TasksEntry_descriptor_);
}

JobDeviceFilters::~JobDeviceFilters() {
  // @@protoc_insertion_point(destructor:tensorflow.JobDeviceFilters)
  SharedDtor();
}

void JobDeviceFilters::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void JobDeviceFilters::ArenaDtor(void* object) {
  JobDeviceFilters* _this = reinterpret_cast< JobDeviceFilters* >(object);
  (void)_this;
}
void JobDeviceFilters::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void JobDeviceFilters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobDeviceFilters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JobDeviceFilters_descriptor_;
}

const JobDeviceFilters& JobDeviceFilters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto();
  return *default_instance_;
}

JobDeviceFilters* JobDeviceFilters::default_instance_ = NULL;

JobDeviceFilters* JobDeviceFilters::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<JobDeviceFilters>(arena);
}

void JobDeviceFilters::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.JobDeviceFilters)
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  tasks_.Clear();
}

bool JobDeviceFilters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.JobDeviceFilters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.JobDeviceFilters.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tasks;
        break;
      }

      // map<int32, .tensorflow.TaskDeviceFilters> tasks = 2;
      case 2: {
        if (tag == 18) {
         parse_tasks:
          DO_(input->IncrementRecursionDepth());
         parse_loop_tasks:
          JobDeviceFilters_TasksEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, ::tensorflow::TaskDeviceFilters,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::TaskDeviceFilters > > parser(&tasks_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_tasks;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.JobDeviceFilters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.JobDeviceFilters)
  return false;
#undef DO_
}

void JobDeviceFilters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.JobDeviceFilters)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.JobDeviceFilters.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // map<int32, .tensorflow.TaskDeviceFilters> tasks = 2;
  if (!this->tasks().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::TaskDeviceFilters >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterminstic() &&
        this->tasks().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->tasks().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::TaskDeviceFilters >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::TaskDeviceFilters >::const_iterator
          it = this->tasks().begin();
          it != this->tasks().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<JobDeviceFilters_TasksEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(tasks_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    } else {
      ::google::protobuf::scoped_ptr<JobDeviceFilters_TasksEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::TaskDeviceFilters >::const_iterator
          it = this->tasks().begin();
          it != this->tasks().end(); ++it) {
        entry.reset(tasks_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.JobDeviceFilters)
}

::google::protobuf::uint8* JobDeviceFilters::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.JobDeviceFilters)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.JobDeviceFilters.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // map<int32, .tensorflow.TaskDeviceFilters> tasks = 2;
  if (!this->tasks().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::TaskDeviceFilters >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->tasks().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->tasks().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::TaskDeviceFilters >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::TaskDeviceFilters >::const_iterator
          it = this->tasks().begin();
          it != this->tasks().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<JobDeviceFilters_TasksEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(tasks_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    } else {
      ::google::protobuf::scoped_ptr<JobDeviceFilters_TasksEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::TaskDeviceFilters >::const_iterator
          it = this->tasks().begin();
          it != this->tasks().end(); ++it) {
        entry.reset(tasks_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.JobDeviceFilters)
  return target;
}

int JobDeviceFilters::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.JobDeviceFilters)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // map<int32, .tensorflow.TaskDeviceFilters> tasks = 2;
  total_size += 1 * this->tasks_size();
  {
    ::google::protobuf::scoped_ptr<JobDeviceFilters_TasksEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::TaskDeviceFilters >::const_iterator
        it = this->tasks().begin();
        it != this->tasks().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(tasks_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobDeviceFilters::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.JobDeviceFilters)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const JobDeviceFilters* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const JobDeviceFilters>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.JobDeviceFilters)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.JobDeviceFilters)
    MergeFrom(*source);
  }
}

void JobDeviceFilters::MergeFrom(const JobDeviceFilters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.JobDeviceFilters)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  tasks_.MergeFrom(from.tasks_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
}

void JobDeviceFilters::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.JobDeviceFilters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobDeviceFilters::CopyFrom(const JobDeviceFilters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.JobDeviceFilters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobDeviceFilters::IsInitialized() const {

  return true;
}

void JobDeviceFilters::Swap(JobDeviceFilters* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    JobDeviceFilters temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void JobDeviceFilters::UnsafeArenaSwap(JobDeviceFilters* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void JobDeviceFilters::InternalSwap(JobDeviceFilters* other) {
  name_.Swap(&other->name_);
  tasks_.Swap(&other->tasks_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JobDeviceFilters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JobDeviceFilters_descriptor_;
  metadata.reflection = JobDeviceFilters_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JobDeviceFilters

// optional string name = 1;
void JobDeviceFilters::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& JobDeviceFilters::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.JobDeviceFilters.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void JobDeviceFilters::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.JobDeviceFilters.name)
}
 void JobDeviceFilters::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.JobDeviceFilters.name)
}
 void JobDeviceFilters::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.JobDeviceFilters.name)
}
 ::std::string* JobDeviceFilters::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.JobDeviceFilters.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* JobDeviceFilters::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.JobDeviceFilters.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* JobDeviceFilters::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.JobDeviceFilters.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void JobDeviceFilters::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.JobDeviceFilters.name)
}
 void JobDeviceFilters::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.JobDeviceFilters.name)
}

// map<int32, .tensorflow.TaskDeviceFilters> tasks = 2;
int JobDeviceFilters::tasks_size() const {
  return tasks_.size();
}
void JobDeviceFilters::clear_tasks() {
  tasks_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::TaskDeviceFilters >&
JobDeviceFilters::tasks() const {
  // @@protoc_insertion_point(field_map:tensorflow.JobDeviceFilters.tasks)
  return tasks_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::TaskDeviceFilters >*
JobDeviceFilters::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.JobDeviceFilters.tasks)
  return tasks_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClusterDeviceFilters::kJobsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClusterDeviceFilters::ClusterDeviceFilters()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ClusterDeviceFilters)
}

ClusterDeviceFilters::ClusterDeviceFilters(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  jobs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ClusterDeviceFilters)
}

void ClusterDeviceFilters::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ClusterDeviceFilters::ClusterDeviceFilters(const ClusterDeviceFilters& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.ClusterDeviceFilters)
}

void ClusterDeviceFilters::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ClusterDeviceFilters::~ClusterDeviceFilters() {
  // @@protoc_insertion_point(destructor:tensorflow.ClusterDeviceFilters)
  SharedDtor();
}

void ClusterDeviceFilters::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void ClusterDeviceFilters::ArenaDtor(void* object) {
  ClusterDeviceFilters* _this = reinterpret_cast< ClusterDeviceFilters* >(object);
  (void)_this;
}
void ClusterDeviceFilters::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ClusterDeviceFilters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClusterDeviceFilters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClusterDeviceFilters_descriptor_;
}

const ClusterDeviceFilters& ClusterDeviceFilters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto();
  return *default_instance_;
}

ClusterDeviceFilters* ClusterDeviceFilters::default_instance_ = NULL;

ClusterDeviceFilters* ClusterDeviceFilters::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ClusterDeviceFilters>(arena);
}

void ClusterDeviceFilters::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ClusterDeviceFilters)
  jobs_.Clear();
}

bool ClusterDeviceFilters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.ClusterDeviceFilters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.JobDeviceFilters jobs = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_jobs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_jobs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_jobs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.ClusterDeviceFilters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.ClusterDeviceFilters)
  return false;
#undef DO_
}

void ClusterDeviceFilters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.ClusterDeviceFilters)
  // repeated .tensorflow.JobDeviceFilters jobs = 1;
  for (unsigned int i = 0, n = this->jobs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->jobs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.ClusterDeviceFilters)
}

::google::protobuf::uint8* ClusterDeviceFilters::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ClusterDeviceFilters)
  // repeated .tensorflow.JobDeviceFilters jobs = 1;
  for (unsigned int i = 0, n = this->jobs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->jobs(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ClusterDeviceFilters)
  return target;
}

int ClusterDeviceFilters::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ClusterDeviceFilters)
  int total_size = 0;

  // repeated .tensorflow.JobDeviceFilters jobs = 1;
  total_size += 1 * this->jobs_size();
  for (int i = 0; i < this->jobs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jobs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClusterDeviceFilters::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ClusterDeviceFilters)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ClusterDeviceFilters* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ClusterDeviceFilters>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ClusterDeviceFilters)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ClusterDeviceFilters)
    MergeFrom(*source);
  }
}

void ClusterDeviceFilters::MergeFrom(const ClusterDeviceFilters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ClusterDeviceFilters)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  jobs_.MergeFrom(from.jobs_);
}

void ClusterDeviceFilters::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ClusterDeviceFilters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterDeviceFilters::CopyFrom(const ClusterDeviceFilters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ClusterDeviceFilters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterDeviceFilters::IsInitialized() const {

  return true;
}

void ClusterDeviceFilters::Swap(ClusterDeviceFilters* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ClusterDeviceFilters temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ClusterDeviceFilters::UnsafeArenaSwap(ClusterDeviceFilters* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ClusterDeviceFilters::InternalSwap(ClusterDeviceFilters* other) {
  jobs_.UnsafeArenaSwap(&other->jobs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClusterDeviceFilters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClusterDeviceFilters_descriptor_;
  metadata.reflection = ClusterDeviceFilters_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClusterDeviceFilters

// repeated .tensorflow.JobDeviceFilters jobs = 1;
int ClusterDeviceFilters::jobs_size() const {
  return jobs_.size();
}
void ClusterDeviceFilters::clear_jobs() {
  jobs_.Clear();
}
const ::tensorflow::JobDeviceFilters& ClusterDeviceFilters::jobs(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.ClusterDeviceFilters.jobs)
  return jobs_.Get(index);
}
::tensorflow::JobDeviceFilters* ClusterDeviceFilters::mutable_jobs(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.ClusterDeviceFilters.jobs)
  return jobs_.Mutable(index);
}
::tensorflow::JobDeviceFilters* ClusterDeviceFilters::add_jobs() {
  // @@protoc_insertion_point(field_add:tensorflow.ClusterDeviceFilters.jobs)
  return jobs_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::JobDeviceFilters >*
ClusterDeviceFilters::mutable_jobs() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.ClusterDeviceFilters.jobs)
  return &jobs_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::JobDeviceFilters >&
ClusterDeviceFilters::jobs() const {
  // @@protoc_insertion_point(field_list:tensorflow.ClusterDeviceFilters.jobs)
  return jobs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
