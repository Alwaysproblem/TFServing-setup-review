// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/graph_debug_info.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/protobuf/graph_debug_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {

namespace {

const ::google::protobuf::Descriptor* GraphDebugInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GraphDebugInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GraphDebugInfo_FileLineCol_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GraphDebugInfo_FileLineCol_reflection_ = NULL;
const ::google::protobuf::Descriptor* GraphDebugInfo_StackTrace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GraphDebugInfo_StackTrace_reflection_ = NULL;
const ::google::protobuf::Descriptor* GraphDebugInfo_TracesEntry_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto() {
  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow/core/protobuf/graph_debug_info.proto");
  GOOGLE_CHECK(file != NULL);
  GraphDebugInfo_descriptor_ = file->message_type(0);
  static const int GraphDebugInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphDebugInfo, files_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphDebugInfo, traces_),
  };
  GraphDebugInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GraphDebugInfo_descriptor_,
      GraphDebugInfo::default_instance_,
      GraphDebugInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(GraphDebugInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphDebugInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphDebugInfo, _is_default_instance_));
  GraphDebugInfo_FileLineCol_descriptor_ = GraphDebugInfo_descriptor_->nested_type(0);
  static const int GraphDebugInfo_FileLineCol_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphDebugInfo_FileLineCol, file_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphDebugInfo_FileLineCol, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphDebugInfo_FileLineCol, col_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphDebugInfo_FileLineCol, func_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphDebugInfo_FileLineCol, code_),
  };
  GraphDebugInfo_FileLineCol_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GraphDebugInfo_FileLineCol_descriptor_,
      GraphDebugInfo_FileLineCol::default_instance_,
      GraphDebugInfo_FileLineCol_offsets_,
      -1,
      -1,
      -1,
      sizeof(GraphDebugInfo_FileLineCol),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphDebugInfo_FileLineCol, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphDebugInfo_FileLineCol, _is_default_instance_));
  GraphDebugInfo_StackTrace_descriptor_ = GraphDebugInfo_descriptor_->nested_type(1);
  static const int GraphDebugInfo_StackTrace_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphDebugInfo_StackTrace, file_line_cols_),
  };
  GraphDebugInfo_StackTrace_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GraphDebugInfo_StackTrace_descriptor_,
      GraphDebugInfo_StackTrace::default_instance_,
      GraphDebugInfo_StackTrace_offsets_,
      -1,
      -1,
      -1,
      sizeof(GraphDebugInfo_StackTrace),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphDebugInfo_StackTrace, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphDebugInfo_StackTrace, _is_default_instance_));
  GraphDebugInfo_TracesEntry_descriptor_ = GraphDebugInfo_descriptor_->nested_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GraphDebugInfo_descriptor_, &GraphDebugInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GraphDebugInfo_FileLineCol_descriptor_, &GraphDebugInfo_FileLineCol::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GraphDebugInfo_StackTrace_descriptor_, &GraphDebugInfo_StackTrace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        GraphDebugInfo_TracesEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::tensorflow::GraphDebugInfo_StackTrace,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                GraphDebugInfo_TracesEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto() {
  delete GraphDebugInfo::default_instance_;
  delete GraphDebugInfo_reflection_;
  delete GraphDebugInfo_FileLineCol::default_instance_;
  delete GraphDebugInfo_FileLineCol_reflection_;
  delete GraphDebugInfo_StackTrace::default_instance_;
  delete GraphDebugInfo_StackTrace_reflection_;
}

void protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n/tensorflow/core/protobuf/graph_debug_i"
    "nfo.proto\022\ntensorflow\"\325\002\n\016GraphDebugInfo"
    "\022\r\n\005files\030\001 \003(\t\0226\n\006traces\030\002 \003(\0132&.tensor"
    "flow.GraphDebugInfo.TracesEntry\032X\n\013FileL"
    "ineCol\022\022\n\nfile_index\030\001 \001(\005\022\014\n\004line\030\002 \001(\005"
    "\022\013\n\003col\030\003 \001(\005\022\014\n\004func\030\004 \001(\t\022\014\n\004code\030\005 \001("
    "\t\032L\n\nStackTrace\022>\n\016file_line_cols\030\001 \003(\0132"
    "&.tensorflow.GraphDebugInfo.FileLineCol\032"
    "T\n\013TracesEntry\022\013\n\003key\030\001 \001(\t\0224\n\005value\030\002 \001"
    "(\0132%.tensorflow.GraphDebugInfo.StackTrac"
    "e:\0028\001B\177\n\030org.tensorflow.frameworkB\024Graph"
    "DebugInfoProtosP\001ZHgithub.com/tensorflow"
    "/tensorflow/tensorflow/go/core/core_prot"
    "os_go_proto\370\001\001b\006proto3", 542);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/protobuf/graph_debug_info.proto", &protobuf_RegisterTypes);
  GraphDebugInfo::default_instance_ = new GraphDebugInfo();
  GraphDebugInfo_FileLineCol::default_instance_ = new GraphDebugInfo_FileLineCol();
  GraphDebugInfo_StackTrace::default_instance_ = new GraphDebugInfo_StackTrace();
  GraphDebugInfo::default_instance_->InitAsDefaultInstance();
  GraphDebugInfo_FileLineCol::default_instance_->InitAsDefaultInstance();
  GraphDebugInfo_StackTrace::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto {
  StaticDescriptorInitializer_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto() {
    protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto();
  }
} static_descriptor_initializer_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GraphDebugInfo_FileLineCol::kFileIndexFieldNumber;
const int GraphDebugInfo_FileLineCol::kLineFieldNumber;
const int GraphDebugInfo_FileLineCol::kColFieldNumber;
const int GraphDebugInfo_FileLineCol::kFuncFieldNumber;
const int GraphDebugInfo_FileLineCol::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GraphDebugInfo_FileLineCol::GraphDebugInfo_FileLineCol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GraphDebugInfo.FileLineCol)
}

GraphDebugInfo_FileLineCol::GraphDebugInfo_FileLineCol(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphDebugInfo.FileLineCol)
}

void GraphDebugInfo_FileLineCol::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GraphDebugInfo_FileLineCol::GraphDebugInfo_FileLineCol(const GraphDebugInfo_FileLineCol& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphDebugInfo.FileLineCol)
}

void GraphDebugInfo_FileLineCol::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  file_index_ = 0;
  line_ = 0;
  col_ = 0;
  func_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GraphDebugInfo_FileLineCol::~GraphDebugInfo_FileLineCol() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphDebugInfo.FileLineCol)
  SharedDtor();
}

void GraphDebugInfo_FileLineCol::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  func_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  code_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void GraphDebugInfo_FileLineCol::ArenaDtor(void* object) {
  GraphDebugInfo_FileLineCol* _this = reinterpret_cast< GraphDebugInfo_FileLineCol* >(object);
  (void)_this;
}
void GraphDebugInfo_FileLineCol::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GraphDebugInfo_FileLineCol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GraphDebugInfo_FileLineCol::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GraphDebugInfo_FileLineCol_descriptor_;
}

const GraphDebugInfo_FileLineCol& GraphDebugInfo_FileLineCol::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto();
  return *default_instance_;
}

GraphDebugInfo_FileLineCol* GraphDebugInfo_FileLineCol::default_instance_ = NULL;

GraphDebugInfo_FileLineCol* GraphDebugInfo_FileLineCol::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GraphDebugInfo_FileLineCol>(arena);
}

void GraphDebugInfo_FileLineCol::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphDebugInfo.FileLineCol)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GraphDebugInfo_FileLineCol, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GraphDebugInfo_FileLineCol*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(file_index_, line_);
  col_ = 0;
  func_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  code_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());

#undef ZR_HELPER_
#undef ZR_

}

bool GraphDebugInfo_FileLineCol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GraphDebugInfo.FileLineCol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 file_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_line;
        break;
      }

      // optional int32 line = 2;
      case 2: {
        if (tag == 16) {
         parse_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_col;
        break;
      }

      // optional int32 col = 3;
      case 3: {
        if (tag == 24) {
         parse_col:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_func;
        break;
      }

      // optional string func = 4;
      case 4: {
        if (tag == 34) {
         parse_func:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_func()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->func().data(), this->func().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.GraphDebugInfo.FileLineCol.func"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_code;
        break;
      }

      // optional string code = 5;
      case 5: {
        if (tag == 42) {
         parse_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.GraphDebugInfo.FileLineCol.code"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GraphDebugInfo.FileLineCol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GraphDebugInfo.FileLineCol)
  return false;
#undef DO_
}

void GraphDebugInfo_FileLineCol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GraphDebugInfo.FileLineCol)
  // optional int32 file_index = 1;
  if (this->file_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->file_index(), output);
  }

  // optional int32 line = 2;
  if (this->line() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->line(), output);
  }

  // optional int32 col = 3;
  if (this->col() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->col(), output);
  }

  // optional string func = 4;
  if (this->func().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->func().data(), this->func().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphDebugInfo.FileLineCol.func");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->func(), output);
  }

  // optional string code = 5;
  if (this->code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphDebugInfo.FileLineCol.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->code(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.GraphDebugInfo.FileLineCol)
}

::google::protobuf::uint8* GraphDebugInfo_FileLineCol::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphDebugInfo.FileLineCol)
  // optional int32 file_index = 1;
  if (this->file_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->file_index(), target);
  }

  // optional int32 line = 2;
  if (this->line() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->line(), target);
  }

  // optional int32 col = 3;
  if (this->col() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->col(), target);
  }

  // optional string func = 4;
  if (this->func().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->func().data(), this->func().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphDebugInfo.FileLineCol.func");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->func(), target);
  }

  // optional string code = 5;
  if (this->code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphDebugInfo.FileLineCol.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->code(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphDebugInfo.FileLineCol)
  return target;
}

int GraphDebugInfo_FileLineCol::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphDebugInfo.FileLineCol)
  int total_size = 0;

  // optional int32 file_index = 1;
  if (this->file_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->file_index());
  }

  // optional int32 line = 2;
  if (this->line() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->line());
  }

  // optional int32 col = 3;
  if (this->col() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->col());
  }

  // optional string func = 4;
  if (this->func().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->func());
  }

  // optional string code = 5;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GraphDebugInfo_FileLineCol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GraphDebugInfo.FileLineCol)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GraphDebugInfo_FileLineCol* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GraphDebugInfo_FileLineCol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GraphDebugInfo.FileLineCol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GraphDebugInfo.FileLineCol)
    MergeFrom(*source);
  }
}

void GraphDebugInfo_FileLineCol::MergeFrom(const GraphDebugInfo_FileLineCol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphDebugInfo.FileLineCol)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.file_index() != 0) {
    set_file_index(from.file_index());
  }
  if (from.line() != 0) {
    set_line(from.line());
  }
  if (from.col() != 0) {
    set_col(from.col());
  }
  if (from.func().size() > 0) {
    set_func(from.func());
  }
  if (from.code().size() > 0) {
    set_code(from.code());
  }
}

void GraphDebugInfo_FileLineCol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GraphDebugInfo.FileLineCol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphDebugInfo_FileLineCol::CopyFrom(const GraphDebugInfo_FileLineCol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphDebugInfo.FileLineCol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphDebugInfo_FileLineCol::IsInitialized() const {

  return true;
}

void GraphDebugInfo_FileLineCol::Swap(GraphDebugInfo_FileLineCol* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GraphDebugInfo_FileLineCol temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void GraphDebugInfo_FileLineCol::UnsafeArenaSwap(GraphDebugInfo_FileLineCol* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GraphDebugInfo_FileLineCol::InternalSwap(GraphDebugInfo_FileLineCol* other) {
  std::swap(file_index_, other->file_index_);
  std::swap(line_, other->line_);
  std::swap(col_, other->col_);
  func_.Swap(&other->func_);
  code_.Swap(&other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GraphDebugInfo_FileLineCol::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GraphDebugInfo_FileLineCol_descriptor_;
  metadata.reflection = GraphDebugInfo_FileLineCol_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GraphDebugInfo_StackTrace::kFileLineColsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GraphDebugInfo_StackTrace::GraphDebugInfo_StackTrace()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GraphDebugInfo.StackTrace)
}

GraphDebugInfo_StackTrace::GraphDebugInfo_StackTrace(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  file_line_cols_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphDebugInfo.StackTrace)
}

void GraphDebugInfo_StackTrace::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GraphDebugInfo_StackTrace::GraphDebugInfo_StackTrace(const GraphDebugInfo_StackTrace& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphDebugInfo.StackTrace)
}

void GraphDebugInfo_StackTrace::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

GraphDebugInfo_StackTrace::~GraphDebugInfo_StackTrace() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphDebugInfo.StackTrace)
  SharedDtor();
}

void GraphDebugInfo_StackTrace::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void GraphDebugInfo_StackTrace::ArenaDtor(void* object) {
  GraphDebugInfo_StackTrace* _this = reinterpret_cast< GraphDebugInfo_StackTrace* >(object);
  (void)_this;
}
void GraphDebugInfo_StackTrace::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GraphDebugInfo_StackTrace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GraphDebugInfo_StackTrace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GraphDebugInfo_StackTrace_descriptor_;
}

const GraphDebugInfo_StackTrace& GraphDebugInfo_StackTrace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto();
  return *default_instance_;
}

GraphDebugInfo_StackTrace* GraphDebugInfo_StackTrace::default_instance_ = NULL;

GraphDebugInfo_StackTrace* GraphDebugInfo_StackTrace::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GraphDebugInfo_StackTrace>(arena);
}

void GraphDebugInfo_StackTrace::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphDebugInfo.StackTrace)
  file_line_cols_.Clear();
}

bool GraphDebugInfo_StackTrace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GraphDebugInfo.StackTrace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.GraphDebugInfo.FileLineCol file_line_cols = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_file_line_cols:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_file_line_cols()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_file_line_cols;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GraphDebugInfo.StackTrace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GraphDebugInfo.StackTrace)
  return false;
#undef DO_
}

void GraphDebugInfo_StackTrace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GraphDebugInfo.StackTrace)
  // repeated .tensorflow.GraphDebugInfo.FileLineCol file_line_cols = 1;
  for (unsigned int i = 0, n = this->file_line_cols_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->file_line_cols(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.GraphDebugInfo.StackTrace)
}

::google::protobuf::uint8* GraphDebugInfo_StackTrace::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphDebugInfo.StackTrace)
  // repeated .tensorflow.GraphDebugInfo.FileLineCol file_line_cols = 1;
  for (unsigned int i = 0, n = this->file_line_cols_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->file_line_cols(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphDebugInfo.StackTrace)
  return target;
}

int GraphDebugInfo_StackTrace::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphDebugInfo.StackTrace)
  int total_size = 0;

  // repeated .tensorflow.GraphDebugInfo.FileLineCol file_line_cols = 1;
  total_size += 1 * this->file_line_cols_size();
  for (int i = 0; i < this->file_line_cols_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->file_line_cols(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GraphDebugInfo_StackTrace::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GraphDebugInfo.StackTrace)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GraphDebugInfo_StackTrace* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GraphDebugInfo_StackTrace>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GraphDebugInfo.StackTrace)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GraphDebugInfo.StackTrace)
    MergeFrom(*source);
  }
}

void GraphDebugInfo_StackTrace::MergeFrom(const GraphDebugInfo_StackTrace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphDebugInfo.StackTrace)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  file_line_cols_.MergeFrom(from.file_line_cols_);
}

void GraphDebugInfo_StackTrace::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GraphDebugInfo.StackTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphDebugInfo_StackTrace::CopyFrom(const GraphDebugInfo_StackTrace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphDebugInfo.StackTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphDebugInfo_StackTrace::IsInitialized() const {

  return true;
}

void GraphDebugInfo_StackTrace::Swap(GraphDebugInfo_StackTrace* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GraphDebugInfo_StackTrace temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void GraphDebugInfo_StackTrace::UnsafeArenaSwap(GraphDebugInfo_StackTrace* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GraphDebugInfo_StackTrace::InternalSwap(GraphDebugInfo_StackTrace* other) {
  file_line_cols_.UnsafeArenaSwap(&other->file_line_cols_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GraphDebugInfo_StackTrace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GraphDebugInfo_StackTrace_descriptor_;
  metadata.reflection = GraphDebugInfo_StackTrace_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GraphDebugInfo::kFilesFieldNumber;
const int GraphDebugInfo::kTracesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GraphDebugInfo::GraphDebugInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GraphDebugInfo)
}

GraphDebugInfo::GraphDebugInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  files_(arena),
  traces_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphDebugInfo)
}

void GraphDebugInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GraphDebugInfo::GraphDebugInfo(const GraphDebugInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphDebugInfo)
}

void GraphDebugInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  traces_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  traces_.SetEntryDescriptor(
      &::tensorflow::GraphDebugInfo_TracesEntry_descriptor_);
}

GraphDebugInfo::~GraphDebugInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphDebugInfo)
  SharedDtor();
}

void GraphDebugInfo::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void GraphDebugInfo::ArenaDtor(void* object) {
  GraphDebugInfo* _this = reinterpret_cast< GraphDebugInfo* >(object);
  (void)_this;
}
void GraphDebugInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GraphDebugInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GraphDebugInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GraphDebugInfo_descriptor_;
}

const GraphDebugInfo& GraphDebugInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto();
  return *default_instance_;
}

GraphDebugInfo* GraphDebugInfo::default_instance_ = NULL;

GraphDebugInfo* GraphDebugInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GraphDebugInfo>(arena);
}

void GraphDebugInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphDebugInfo)
  files_.Clear();
  traces_.Clear();
}

bool GraphDebugInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GraphDebugInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string files = 1;
      case 1: {
        if (tag == 10) {
         parse_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_files()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->files(this->files_size() - 1).data(),
            this->files(this->files_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.GraphDebugInfo.files"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_files;
        if (input->ExpectTag(18)) goto parse_traces;
        break;
      }

      // map<string, .tensorflow.GraphDebugInfo.StackTrace> traces = 2;
      case 2: {
        if (tag == 18) {
         parse_traces:
          DO_(input->IncrementRecursionDepth());
         parse_loop_traces:
          GraphDebugInfo_TracesEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::tensorflow::GraphDebugInfo_StackTrace,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::tensorflow::GraphDebugInfo_StackTrace > > parser(&traces_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.GraphDebugInfo.TracesEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_traces;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GraphDebugInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GraphDebugInfo)
  return false;
#undef DO_
}

void GraphDebugInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GraphDebugInfo)
  // repeated string files = 1;
  for (int i = 0; i < this->files_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->files(i).data(), this->files(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphDebugInfo.files");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->files(i), output);
  }

  // map<string, .tensorflow.GraphDebugInfo.StackTrace> traces = 2;
  if (!this->traces().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::GraphDebugInfo_StackTrace >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.GraphDebugInfo.TracesEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->traces().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->traces().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::GraphDebugInfo_StackTrace >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::GraphDebugInfo_StackTrace >::const_iterator
          it = this->traces().begin();
          it != this->traces().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<GraphDebugInfo_TracesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(traces_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<GraphDebugInfo_TracesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::GraphDebugInfo_StackTrace >::const_iterator
          it = this->traces().begin();
          it != this->traces().end(); ++it) {
        entry.reset(traces_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.GraphDebugInfo)
}

::google::protobuf::uint8* GraphDebugInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphDebugInfo)
  // repeated string files = 1;
  for (int i = 0; i < this->files_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->files(i).data(), this->files(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphDebugInfo.files");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->files(i), target);
  }

  // map<string, .tensorflow.GraphDebugInfo.StackTrace> traces = 2;
  if (!this->traces().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::GraphDebugInfo_StackTrace >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.GraphDebugInfo.TracesEntry.key");
      }
    };

    if (deterministic &&
        this->traces().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->traces().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::GraphDebugInfo_StackTrace >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::GraphDebugInfo_StackTrace >::const_iterator
          it = this->traces().begin();
          it != this->traces().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<GraphDebugInfo_TracesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(traces_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<GraphDebugInfo_TracesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::GraphDebugInfo_StackTrace >::const_iterator
          it = this->traces().begin();
          it != this->traces().end(); ++it) {
        entry.reset(traces_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphDebugInfo)
  return target;
}

int GraphDebugInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphDebugInfo)
  int total_size = 0;

  // repeated string files = 1;
  total_size += 1 * this->files_size();
  for (int i = 0; i < this->files_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->files(i));
  }

  // map<string, .tensorflow.GraphDebugInfo.StackTrace> traces = 2;
  total_size += 1 * this->traces_size();
  {
    ::google::protobuf::scoped_ptr<GraphDebugInfo_TracesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::tensorflow::GraphDebugInfo_StackTrace >::const_iterator
        it = this->traces().begin();
        it != this->traces().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(traces_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GraphDebugInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GraphDebugInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GraphDebugInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GraphDebugInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GraphDebugInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GraphDebugInfo)
    MergeFrom(*source);
  }
}

void GraphDebugInfo::MergeFrom(const GraphDebugInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphDebugInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  files_.MergeFrom(from.files_);
  traces_.MergeFrom(from.traces_);
}

void GraphDebugInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GraphDebugInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphDebugInfo::CopyFrom(const GraphDebugInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphDebugInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphDebugInfo::IsInitialized() const {

  return true;
}

void GraphDebugInfo::Swap(GraphDebugInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GraphDebugInfo temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void GraphDebugInfo::UnsafeArenaSwap(GraphDebugInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GraphDebugInfo::InternalSwap(GraphDebugInfo* other) {
  files_.UnsafeArenaSwap(&other->files_);
  traces_.Swap(&other->traces_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GraphDebugInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GraphDebugInfo_descriptor_;
  metadata.reflection = GraphDebugInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GraphDebugInfo_FileLineCol

// optional int32 file_index = 1;
void GraphDebugInfo_FileLineCol::clear_file_index() {
  file_index_ = 0;
}
 ::google::protobuf::int32 GraphDebugInfo_FileLineCol::file_index() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphDebugInfo.FileLineCol.file_index)
  return file_index_;
}
 void GraphDebugInfo_FileLineCol::set_file_index(::google::protobuf::int32 value) {
  
  file_index_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphDebugInfo.FileLineCol.file_index)
}

// optional int32 line = 2;
void GraphDebugInfo_FileLineCol::clear_line() {
  line_ = 0;
}
 ::google::protobuf::int32 GraphDebugInfo_FileLineCol::line() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphDebugInfo.FileLineCol.line)
  return line_;
}
 void GraphDebugInfo_FileLineCol::set_line(::google::protobuf::int32 value) {
  
  line_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphDebugInfo.FileLineCol.line)
}

// optional int32 col = 3;
void GraphDebugInfo_FileLineCol::clear_col() {
  col_ = 0;
}
 ::google::protobuf::int32 GraphDebugInfo_FileLineCol::col() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphDebugInfo.FileLineCol.col)
  return col_;
}
 void GraphDebugInfo_FileLineCol::set_col(::google::protobuf::int32 value) {
  
  col_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphDebugInfo.FileLineCol.col)
}

// optional string func = 4;
void GraphDebugInfo_FileLineCol::clear_func() {
  func_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& GraphDebugInfo_FileLineCol::func() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphDebugInfo.FileLineCol.func)
  return func_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GraphDebugInfo_FileLineCol::set_func(const ::std::string& value) {
  
  func_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.GraphDebugInfo.FileLineCol.func)
}
 void GraphDebugInfo_FileLineCol::set_func(const char* value) {
  
  func_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.GraphDebugInfo.FileLineCol.func)
}
 void GraphDebugInfo_FileLineCol::set_func(const char* value,
    size_t size) {
  
  func_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.GraphDebugInfo.FileLineCol.func)
}
 ::std::string* GraphDebugInfo_FileLineCol::mutable_func() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphDebugInfo.FileLineCol.func)
  return func_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* GraphDebugInfo_FileLineCol::release_func() {
  // @@protoc_insertion_point(field_release:tensorflow.GraphDebugInfo.FileLineCol.func)
  
  return func_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* GraphDebugInfo_FileLineCol::unsafe_arena_release_func() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.GraphDebugInfo.FileLineCol.func)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return func_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void GraphDebugInfo_FileLineCol::set_allocated_func(::std::string* func) {
  if (func != NULL) {
    
  } else {
    
  }
  func_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), func,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GraphDebugInfo.FileLineCol.func)
}
 void GraphDebugInfo_FileLineCol::unsafe_arena_set_allocated_func(
    ::std::string* func) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (func != NULL) {
    
  } else {
    
  }
  func_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      func, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GraphDebugInfo.FileLineCol.func)
}

// optional string code = 5;
void GraphDebugInfo_FileLineCol::clear_code() {
  code_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& GraphDebugInfo_FileLineCol::code() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphDebugInfo.FileLineCol.code)
  return code_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GraphDebugInfo_FileLineCol::set_code(const ::std::string& value) {
  
  code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.GraphDebugInfo.FileLineCol.code)
}
 void GraphDebugInfo_FileLineCol::set_code(const char* value) {
  
  code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.GraphDebugInfo.FileLineCol.code)
}
 void GraphDebugInfo_FileLineCol::set_code(const char* value,
    size_t size) {
  
  code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.GraphDebugInfo.FileLineCol.code)
}
 ::std::string* GraphDebugInfo_FileLineCol::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphDebugInfo.FileLineCol.code)
  return code_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* GraphDebugInfo_FileLineCol::release_code() {
  // @@protoc_insertion_point(field_release:tensorflow.GraphDebugInfo.FileLineCol.code)
  
  return code_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* GraphDebugInfo_FileLineCol::unsafe_arena_release_code() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.GraphDebugInfo.FileLineCol.code)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return code_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void GraphDebugInfo_FileLineCol::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GraphDebugInfo.FileLineCol.code)
}
 void GraphDebugInfo_FileLineCol::unsafe_arena_set_allocated_code(
    ::std::string* code) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (code != NULL) {
    
  } else {
    
  }
  code_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      code, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GraphDebugInfo.FileLineCol.code)
}

// -------------------------------------------------------------------

// GraphDebugInfo_StackTrace

// repeated .tensorflow.GraphDebugInfo.FileLineCol file_line_cols = 1;
int GraphDebugInfo_StackTrace::file_line_cols_size() const {
  return file_line_cols_.size();
}
void GraphDebugInfo_StackTrace::clear_file_line_cols() {
  file_line_cols_.Clear();
}
const ::tensorflow::GraphDebugInfo_FileLineCol& GraphDebugInfo_StackTrace::file_line_cols(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphDebugInfo.StackTrace.file_line_cols)
  return file_line_cols_.Get(index);
}
::tensorflow::GraphDebugInfo_FileLineCol* GraphDebugInfo_StackTrace::mutable_file_line_cols(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphDebugInfo.StackTrace.file_line_cols)
  return file_line_cols_.Mutable(index);
}
::tensorflow::GraphDebugInfo_FileLineCol* GraphDebugInfo_StackTrace::add_file_line_cols() {
  // @@protoc_insertion_point(field_add:tensorflow.GraphDebugInfo.StackTrace.file_line_cols)
  return file_line_cols_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::GraphDebugInfo_FileLineCol >*
GraphDebugInfo_StackTrace::mutable_file_line_cols() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GraphDebugInfo.StackTrace.file_line_cols)
  return &file_line_cols_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphDebugInfo_FileLineCol >&
GraphDebugInfo_StackTrace::file_line_cols() const {
  // @@protoc_insertion_point(field_list:tensorflow.GraphDebugInfo.StackTrace.file_line_cols)
  return file_line_cols_;
}

// -------------------------------------------------------------------

// GraphDebugInfo

// repeated string files = 1;
int GraphDebugInfo::files_size() const {
  return files_.size();
}
void GraphDebugInfo::clear_files() {
  files_.Clear();
}
 const ::std::string& GraphDebugInfo::files(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphDebugInfo.files)
  return files_.Get(index);
}
 ::std::string* GraphDebugInfo::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphDebugInfo.files)
  return files_.Mutable(index);
}
 void GraphDebugInfo::set_files(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.GraphDebugInfo.files)
  files_.Mutable(index)->assign(value);
}
 void GraphDebugInfo::set_files(int index, const char* value) {
  files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.GraphDebugInfo.files)
}
 void GraphDebugInfo::set_files(int index, const char* value, size_t size) {
  files_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.GraphDebugInfo.files)
}
 ::std::string* GraphDebugInfo::add_files() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.GraphDebugInfo.files)
  return files_.Add();
}
 void GraphDebugInfo::add_files(const ::std::string& value) {
  files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.GraphDebugInfo.files)
}
 void GraphDebugInfo::add_files(const char* value) {
  files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.GraphDebugInfo.files)
}
 void GraphDebugInfo::add_files(const char* value, size_t size) {
  files_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.GraphDebugInfo.files)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
GraphDebugInfo::files() const {
  // @@protoc_insertion_point(field_list:tensorflow.GraphDebugInfo.files)
  return files_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
GraphDebugInfo::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GraphDebugInfo.files)
  return &files_;
}

// map<string, .tensorflow.GraphDebugInfo.StackTrace> traces = 2;
int GraphDebugInfo::traces_size() const {
  return traces_.size();
}
void GraphDebugInfo::clear_traces() {
  traces_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::tensorflow::GraphDebugInfo_StackTrace >&
GraphDebugInfo::traces() const {
  // @@protoc_insertion_point(field_map:tensorflow.GraphDebugInfo.traces)
  return traces_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::tensorflow::GraphDebugInfo_StackTrace >*
GraphDebugInfo::mutable_traces() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.GraphDebugInfo.traces)
  return traces_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
