// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/remote_tensor_handle.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/protobuf/remote_tensor_handle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {
namespace eager {

namespace {

const ::google::protobuf::Descriptor* ResourceDtypeAndShape_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceDtypeAndShape_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoteTensorHandle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoteTensorHandle_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto() {
  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow/core/protobuf/remote_tensor_handle.proto");
  GOOGLE_CHECK(file != NULL);
  ResourceDtypeAndShape_descriptor_ = file->message_type(0);
  static const int ResourceDtypeAndShape_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDtypeAndShape, dtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDtypeAndShape, shape_),
  };
  ResourceDtypeAndShape_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResourceDtypeAndShape_descriptor_,
      ResourceDtypeAndShape::default_instance_,
      ResourceDtypeAndShape_offsets_,
      -1,
      -1,
      -1,
      sizeof(ResourceDtypeAndShape),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDtypeAndShape, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDtypeAndShape, _is_default_instance_));
  RemoteTensorHandle_descriptor_ = file->message_type(1);
  static const int RemoteTensorHandle_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteTensorHandle, op_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteTensorHandle, output_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteTensorHandle, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteTensorHandle, op_device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteTensorHandle, dtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteTensorHandle, resource_dtypes_and_shapes_),
  };
  RemoteTensorHandle_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RemoteTensorHandle_descriptor_,
      RemoteTensorHandle::default_instance_,
      RemoteTensorHandle_offsets_,
      -1,
      -1,
      -1,
      sizeof(RemoteTensorHandle),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteTensorHandle, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteTensorHandle, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResourceDtypeAndShape_descriptor_, &ResourceDtypeAndShape::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RemoteTensorHandle_descriptor_, &RemoteTensorHandle::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto() {
  delete ResourceDtypeAndShape::default_instance_;
  delete ResourceDtypeAndShape_reflection_;
  delete RemoteTensorHandle::default_instance_;
  delete RemoteTensorHandle_reflection_;
}

void protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto();
  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n3tensorflow/core/protobuf/remote_tensor"
    "_handle.proto\022\020tensorflow.eager\032,tensorf"
    "low/core/framework/tensor_shape.proto\032%t"
    "ensorflow/core/framework/types.proto\"i\n\025"
    "ResourceDtypeAndShape\022#\n\005dtype\030\001 \001(\0162\024.t"
    "ensorflow.DataType\022+\n\005shape\030\002 \001(\0132\034.tens"
    "orflow.TensorShapeProto\"\314\001\n\022RemoteTensor"
    "Handle\022\r\n\005op_id\030\001 \001(\003\022\022\n\noutput_num\030\002 \001("
    "\005\022\016\n\006device\030\003 \001(\t\022\021\n\top_device\030\004 \001(\t\022#\n\005"
    "dtype\030\005 \001(\0162\024.tensorflow.DataType\022K\n\032res"
    "ource_dtypes_and_shapes\030\006 \003(\0132\'.tensorfl"
    "ow.eager.ResourceDtypeAndShapeB\203\001\n\030org.t"
    "ensorflow.frameworkB\030RemoteTensorHandleP"
    "rotosP\001ZHgithub.com/tensorflow/tensorflo"
    "w/tensorflow/go/core/core_protos_go_prot"
    "o\370\001\001b\006proto3", 612);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/protobuf/remote_tensor_handle.proto", &protobuf_RegisterTypes);
  ResourceDtypeAndShape::default_instance_ = new ResourceDtypeAndShape();
  RemoteTensorHandle::default_instance_ = new RemoteTensorHandle();
  ResourceDtypeAndShape::default_instance_->InitAsDefaultInstance();
  RemoteTensorHandle::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto {
  StaticDescriptorInitializer_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto() {
    protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto();
  }
} static_descriptor_initializer_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto_;

// ===================================================================

void ResourceDtypeAndShape::_slow_mutable_shape() {
  shape_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::TensorShapeProto >(
      GetArenaNoVirtual());
}
::tensorflow::TensorShapeProto* ResourceDtypeAndShape::_slow_release_shape() {
  if (shape_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::TensorShapeProto* temp = new ::tensorflow::TensorShapeProto;
    temp->MergeFrom(*shape_);
    shape_ = NULL;
    return temp;
  }
}
::tensorflow::TensorShapeProto* ResourceDtypeAndShape::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.eager.ResourceDtypeAndShape.shape)
  
  ::tensorflow::TensorShapeProto* temp = shape_;
  shape_ = NULL;
  return temp;
}
void ResourceDtypeAndShape::_slow_set_allocated_shape(
    ::google::protobuf::Arena* message_arena, ::tensorflow::TensorShapeProto** shape) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*shape) == NULL) {
      message_arena->Own(*shape);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*shape)) {
      ::tensorflow::TensorShapeProto* new_shape = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::TensorShapeProto >(
            message_arena);
      new_shape->CopyFrom(**shape);
      *shape = new_shape;
    }
}
void ResourceDtypeAndShape::unsafe_arena_set_allocated_shape(
    ::tensorflow::TensorShapeProto* shape) {
  if (GetArenaNoVirtual() == NULL) {
    delete shape_;
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.eager.ResourceDtypeAndShape.shape)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResourceDtypeAndShape::kDtypeFieldNumber;
const int ResourceDtypeAndShape::kShapeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResourceDtypeAndShape::ResourceDtypeAndShape()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.eager.ResourceDtypeAndShape)
}

ResourceDtypeAndShape::ResourceDtypeAndShape(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.eager.ResourceDtypeAndShape)
}

void ResourceDtypeAndShape::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  shape_ = const_cast< ::tensorflow::TensorShapeProto*>(&::tensorflow::TensorShapeProto::default_instance());
}

ResourceDtypeAndShape::ResourceDtypeAndShape(const ResourceDtypeAndShape& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.ResourceDtypeAndShape)
}

void ResourceDtypeAndShape::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  dtype_ = 0;
  shape_ = NULL;
}

ResourceDtypeAndShape::~ResourceDtypeAndShape() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.ResourceDtypeAndShape)
  SharedDtor();
}

void ResourceDtypeAndShape::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
    delete shape_;
  }
}

void ResourceDtypeAndShape::ArenaDtor(void* object) {
  ResourceDtypeAndShape* _this = reinterpret_cast< ResourceDtypeAndShape* >(object);
  (void)_this;
}
void ResourceDtypeAndShape::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ResourceDtypeAndShape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceDtypeAndShape::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceDtypeAndShape_descriptor_;
}

const ResourceDtypeAndShape& ResourceDtypeAndShape::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto();
  return *default_instance_;
}

ResourceDtypeAndShape* ResourceDtypeAndShape::default_instance_ = NULL;

ResourceDtypeAndShape* ResourceDtypeAndShape::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ResourceDtypeAndShape>(arena);
}

void ResourceDtypeAndShape::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.ResourceDtypeAndShape)
  dtype_ = 0;
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) delete shape_;
  shape_ = NULL;
}

bool ResourceDtypeAndShape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.eager.ResourceDtypeAndShape)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tensorflow.DataType dtype = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dtype(static_cast< ::tensorflow::DataType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_shape;
        break;
      }

      // optional .tensorflow.TensorShapeProto shape = 2;
      case 2: {
        if (tag == 18) {
         parse_shape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.eager.ResourceDtypeAndShape)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.eager.ResourceDtypeAndShape)
  return false;
#undef DO_
}

void ResourceDtypeAndShape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.eager.ResourceDtypeAndShape)
  // optional .tensorflow.DataType dtype = 1;
  if (this->dtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->dtype(), output);
  }

  // optional .tensorflow.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->shape_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.eager.ResourceDtypeAndShape)
}

::google::protobuf::uint8* ResourceDtypeAndShape::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.ResourceDtypeAndShape)
  // optional .tensorflow.DataType dtype = 1;
  if (this->dtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->dtype(), target);
  }

  // optional .tensorflow.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->shape_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.ResourceDtypeAndShape)
  return target;
}

int ResourceDtypeAndShape::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.ResourceDtypeAndShape)
  int total_size = 0;

  // optional .tensorflow.DataType dtype = 1;
  if (this->dtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dtype());
  }

  // optional .tensorflow.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->shape_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceDtypeAndShape::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.eager.ResourceDtypeAndShape)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResourceDtypeAndShape* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResourceDtypeAndShape>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.eager.ResourceDtypeAndShape)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.eager.ResourceDtypeAndShape)
    MergeFrom(*source);
  }
}

void ResourceDtypeAndShape::MergeFrom(const ResourceDtypeAndShape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.ResourceDtypeAndShape)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.dtype() != 0) {
    set_dtype(from.dtype());
  }
  if (from.has_shape()) {
    mutable_shape()->::tensorflow::TensorShapeProto::MergeFrom(from.shape());
  }
}

void ResourceDtypeAndShape::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.eager.ResourceDtypeAndShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceDtypeAndShape::CopyFrom(const ResourceDtypeAndShape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.ResourceDtypeAndShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceDtypeAndShape::IsInitialized() const {

  return true;
}

void ResourceDtypeAndShape::Swap(ResourceDtypeAndShape* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ResourceDtypeAndShape temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ResourceDtypeAndShape::UnsafeArenaSwap(ResourceDtypeAndShape* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ResourceDtypeAndShape::InternalSwap(ResourceDtypeAndShape* other) {
  std::swap(dtype_, other->dtype_);
  std::swap(shape_, other->shape_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResourceDtypeAndShape::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceDtypeAndShape_descriptor_;
  metadata.reflection = ResourceDtypeAndShape_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResourceDtypeAndShape

// optional .tensorflow.DataType dtype = 1;
void ResourceDtypeAndShape::clear_dtype() {
  dtype_ = 0;
}
 ::tensorflow::DataType ResourceDtypeAndShape::dtype() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.ResourceDtypeAndShape.dtype)
  return static_cast< ::tensorflow::DataType >(dtype_);
}
 void ResourceDtypeAndShape::set_dtype(::tensorflow::DataType value) {
  
  dtype_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.eager.ResourceDtypeAndShape.dtype)
}

// optional .tensorflow.TensorShapeProto shape = 2;
bool ResourceDtypeAndShape::has_shape() const {
  return !_is_default_instance_ && shape_ != NULL;
}
void ResourceDtypeAndShape::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) delete shape_;
  shape_ = NULL;
}
const ::tensorflow::TensorShapeProto& ResourceDtypeAndShape::shape() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.ResourceDtypeAndShape.shape)
  return shape_ != NULL ? *shape_ : *default_instance_->shape_;
}
::tensorflow::TensorShapeProto* ResourceDtypeAndShape::mutable_shape() {
  
  if (shape_ == NULL) {
    _slow_mutable_shape();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.eager.ResourceDtypeAndShape.shape)
  return shape_;
}
::tensorflow::TensorShapeProto* ResourceDtypeAndShape::release_shape() {
  // @@protoc_insertion_point(field_release:tensorflow.eager.ResourceDtypeAndShape.shape)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_shape();
  } else {
    ::tensorflow::TensorShapeProto* temp = shape_;
    shape_ = NULL;
    return temp;
  }
}
 void ResourceDtypeAndShape::set_allocated_shape(::tensorflow::TensorShapeProto* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shape_;
  }
  if (shape != NULL) {
    _slow_set_allocated_shape(message_arena, &shape);
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.ResourceDtypeAndShape.shape)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemoteTensorHandle::kOpIdFieldNumber;
const int RemoteTensorHandle::kOutputNumFieldNumber;
const int RemoteTensorHandle::kDeviceFieldNumber;
const int RemoteTensorHandle::kOpDeviceFieldNumber;
const int RemoteTensorHandle::kDtypeFieldNumber;
const int RemoteTensorHandle::kResourceDtypesAndShapesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoteTensorHandle::RemoteTensorHandle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.eager.RemoteTensorHandle)
}

RemoteTensorHandle::RemoteTensorHandle(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  resource_dtypes_and_shapes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.eager.RemoteTensorHandle)
}

void RemoteTensorHandle::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RemoteTensorHandle::RemoteTensorHandle(const RemoteTensorHandle& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.RemoteTensorHandle)
}

void RemoteTensorHandle::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  op_id_ = GOOGLE_LONGLONG(0);
  output_num_ = 0;
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  op_device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dtype_ = 0;
}

RemoteTensorHandle::~RemoteTensorHandle() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.RemoteTensorHandle)
  SharedDtor();
}

void RemoteTensorHandle::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  device_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  op_device_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void RemoteTensorHandle::ArenaDtor(void* object) {
  RemoteTensorHandle* _this = reinterpret_cast< RemoteTensorHandle* >(object);
  (void)_this;
}
void RemoteTensorHandle::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RemoteTensorHandle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoteTensorHandle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoteTensorHandle_descriptor_;
}

const RemoteTensorHandle& RemoteTensorHandle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto();
  return *default_instance_;
}

RemoteTensorHandle* RemoteTensorHandle::default_instance_ = NULL;

RemoteTensorHandle* RemoteTensorHandle::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RemoteTensorHandle>(arena);
}

void RemoteTensorHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.RemoteTensorHandle)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RemoteTensorHandle, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RemoteTensorHandle*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(output_num_, dtype_);
  op_id_ = GOOGLE_LONGLONG(0);
  device_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  op_device_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());

#undef ZR_HELPER_
#undef ZR_

  resource_dtypes_and_shapes_.Clear();
}

bool RemoteTensorHandle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.eager.RemoteTensorHandle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 op_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &op_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_output_num;
        break;
      }

      // optional int32 output_num = 2;
      case 2: {
        if (tag == 16) {
         parse_output_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &output_num_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_device;
        break;
      }

      // optional string device = 3;
      case 3: {
        if (tag == 26) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.eager.RemoteTensorHandle.device"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_op_device;
        break;
      }

      // optional string op_device = 4;
      case 4: {
        if (tag == 34) {
         parse_op_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_op_device()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->op_device().data(), this->op_device().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.eager.RemoteTensorHandle.op_device"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dtype;
        break;
      }

      // optional .tensorflow.DataType dtype = 5;
      case 5: {
        if (tag == 40) {
         parse_dtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dtype(static_cast< ::tensorflow::DataType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_resource_dtypes_and_shapes;
        break;
      }

      // repeated .tensorflow.eager.ResourceDtypeAndShape resource_dtypes_and_shapes = 6;
      case 6: {
        if (tag == 50) {
         parse_resource_dtypes_and_shapes:
          DO_(input->IncrementRecursionDepth());
         parse_loop_resource_dtypes_and_shapes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_resource_dtypes_and_shapes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_resource_dtypes_and_shapes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.eager.RemoteTensorHandle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.eager.RemoteTensorHandle)
  return false;
#undef DO_
}

void RemoteTensorHandle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.eager.RemoteTensorHandle)
  // optional int64 op_id = 1;
  if (this->op_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->op_id(), output);
  }

  // optional int32 output_num = 2;
  if (this->output_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->output_num(), output);
  }

  // optional string device = 3;
  if (this->device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.eager.RemoteTensorHandle.device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->device(), output);
  }

  // optional string op_device = 4;
  if (this->op_device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->op_device().data(), this->op_device().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.eager.RemoteTensorHandle.op_device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->op_device(), output);
  }

  // optional .tensorflow.DataType dtype = 5;
  if (this->dtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->dtype(), output);
  }

  // repeated .tensorflow.eager.ResourceDtypeAndShape resource_dtypes_and_shapes = 6;
  for (unsigned int i = 0, n = this->resource_dtypes_and_shapes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->resource_dtypes_and_shapes(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.eager.RemoteTensorHandle)
}

::google::protobuf::uint8* RemoteTensorHandle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.RemoteTensorHandle)
  // optional int64 op_id = 1;
  if (this->op_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->op_id(), target);
  }

  // optional int32 output_num = 2;
  if (this->output_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->output_num(), target);
  }

  // optional string device = 3;
  if (this->device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.eager.RemoteTensorHandle.device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->device(), target);
  }

  // optional string op_device = 4;
  if (this->op_device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->op_device().data(), this->op_device().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.eager.RemoteTensorHandle.op_device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->op_device(), target);
  }

  // optional .tensorflow.DataType dtype = 5;
  if (this->dtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->dtype(), target);
  }

  // repeated .tensorflow.eager.ResourceDtypeAndShape resource_dtypes_and_shapes = 6;
  for (unsigned int i = 0, n = this->resource_dtypes_and_shapes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->resource_dtypes_and_shapes(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.RemoteTensorHandle)
  return target;
}

int RemoteTensorHandle::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.RemoteTensorHandle)
  int total_size = 0;

  // optional int64 op_id = 1;
  if (this->op_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->op_id());
  }

  // optional int32 output_num = 2;
  if (this->output_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->output_num());
  }

  // optional string device = 3;
  if (this->device().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device());
  }

  // optional string op_device = 4;
  if (this->op_device().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->op_device());
  }

  // optional .tensorflow.DataType dtype = 5;
  if (this->dtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dtype());
  }

  // repeated .tensorflow.eager.ResourceDtypeAndShape resource_dtypes_and_shapes = 6;
  total_size += 1 * this->resource_dtypes_and_shapes_size();
  for (int i = 0; i < this->resource_dtypes_and_shapes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resource_dtypes_and_shapes(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoteTensorHandle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.eager.RemoteTensorHandle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RemoteTensorHandle* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RemoteTensorHandle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.eager.RemoteTensorHandle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.eager.RemoteTensorHandle)
    MergeFrom(*source);
  }
}

void RemoteTensorHandle::MergeFrom(const RemoteTensorHandle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.RemoteTensorHandle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  resource_dtypes_and_shapes_.MergeFrom(from.resource_dtypes_and_shapes_);
  if (from.op_id() != 0) {
    set_op_id(from.op_id());
  }
  if (from.output_num() != 0) {
    set_output_num(from.output_num());
  }
  if (from.device().size() > 0) {
    set_device(from.device());
  }
  if (from.op_device().size() > 0) {
    set_op_device(from.op_device());
  }
  if (from.dtype() != 0) {
    set_dtype(from.dtype());
  }
}

void RemoteTensorHandle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.eager.RemoteTensorHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteTensorHandle::CopyFrom(const RemoteTensorHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.RemoteTensorHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteTensorHandle::IsInitialized() const {

  return true;
}

void RemoteTensorHandle::Swap(RemoteTensorHandle* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RemoteTensorHandle temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void RemoteTensorHandle::UnsafeArenaSwap(RemoteTensorHandle* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RemoteTensorHandle::InternalSwap(RemoteTensorHandle* other) {
  std::swap(op_id_, other->op_id_);
  std::swap(output_num_, other->output_num_);
  device_.Swap(&other->device_);
  op_device_.Swap(&other->op_device_);
  std::swap(dtype_, other->dtype_);
  resource_dtypes_and_shapes_.UnsafeArenaSwap(&other->resource_dtypes_and_shapes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RemoteTensorHandle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoteTensorHandle_descriptor_;
  metadata.reflection = RemoteTensorHandle_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RemoteTensorHandle

// optional int64 op_id = 1;
void RemoteTensorHandle::clear_op_id() {
  op_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RemoteTensorHandle::op_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.RemoteTensorHandle.op_id)
  return op_id_;
}
 void RemoteTensorHandle::set_op_id(::google::protobuf::int64 value) {
  
  op_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.eager.RemoteTensorHandle.op_id)
}

// optional int32 output_num = 2;
void RemoteTensorHandle::clear_output_num() {
  output_num_ = 0;
}
 ::google::protobuf::int32 RemoteTensorHandle::output_num() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.RemoteTensorHandle.output_num)
  return output_num_;
}
 void RemoteTensorHandle::set_output_num(::google::protobuf::int32 value) {
  
  output_num_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.eager.RemoteTensorHandle.output_num)
}

// optional string device = 3;
void RemoteTensorHandle::clear_device() {
  device_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& RemoteTensorHandle::device() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.RemoteTensorHandle.device)
  return device_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RemoteTensorHandle::set_device(const ::std::string& value) {
  
  device_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.eager.RemoteTensorHandle.device)
}
 void RemoteTensorHandle::set_device(const char* value) {
  
  device_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.eager.RemoteTensorHandle.device)
}
 void RemoteTensorHandle::set_device(const char* value,
    size_t size) {
  
  device_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.eager.RemoteTensorHandle.device)
}
 ::std::string* RemoteTensorHandle::mutable_device() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.eager.RemoteTensorHandle.device)
  return device_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* RemoteTensorHandle::release_device() {
  // @@protoc_insertion_point(field_release:tensorflow.eager.RemoteTensorHandle.device)
  
  return device_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* RemoteTensorHandle::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.eager.RemoteTensorHandle.device)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return device_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void RemoteTensorHandle::set_allocated_device(::std::string* device) {
  if (device != NULL) {
    
  } else {
    
  }
  device_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.RemoteTensorHandle.device)
}
 void RemoteTensorHandle::unsafe_arena_set_allocated_device(
    ::std::string* device) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (device != NULL) {
    
  } else {
    
  }
  device_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      device, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.eager.RemoteTensorHandle.device)
}

// optional string op_device = 4;
void RemoteTensorHandle::clear_op_device() {
  op_device_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& RemoteTensorHandle::op_device() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.RemoteTensorHandle.op_device)
  return op_device_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RemoteTensorHandle::set_op_device(const ::std::string& value) {
  
  op_device_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.eager.RemoteTensorHandle.op_device)
}
 void RemoteTensorHandle::set_op_device(const char* value) {
  
  op_device_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.eager.RemoteTensorHandle.op_device)
}
 void RemoteTensorHandle::set_op_device(const char* value,
    size_t size) {
  
  op_device_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.eager.RemoteTensorHandle.op_device)
}
 ::std::string* RemoteTensorHandle::mutable_op_device() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.eager.RemoteTensorHandle.op_device)
  return op_device_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* RemoteTensorHandle::release_op_device() {
  // @@protoc_insertion_point(field_release:tensorflow.eager.RemoteTensorHandle.op_device)
  
  return op_device_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* RemoteTensorHandle::unsafe_arena_release_op_device() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.eager.RemoteTensorHandle.op_device)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return op_device_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void RemoteTensorHandle::set_allocated_op_device(::std::string* op_device) {
  if (op_device != NULL) {
    
  } else {
    
  }
  op_device_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), op_device,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.RemoteTensorHandle.op_device)
}
 void RemoteTensorHandle::unsafe_arena_set_allocated_op_device(
    ::std::string* op_device) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (op_device != NULL) {
    
  } else {
    
  }
  op_device_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      op_device, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.eager.RemoteTensorHandle.op_device)
}

// optional .tensorflow.DataType dtype = 5;
void RemoteTensorHandle::clear_dtype() {
  dtype_ = 0;
}
 ::tensorflow::DataType RemoteTensorHandle::dtype() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.RemoteTensorHandle.dtype)
  return static_cast< ::tensorflow::DataType >(dtype_);
}
 void RemoteTensorHandle::set_dtype(::tensorflow::DataType value) {
  
  dtype_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.eager.RemoteTensorHandle.dtype)
}

// repeated .tensorflow.eager.ResourceDtypeAndShape resource_dtypes_and_shapes = 6;
int RemoteTensorHandle::resource_dtypes_and_shapes_size() const {
  return resource_dtypes_and_shapes_.size();
}
void RemoteTensorHandle::clear_resource_dtypes_and_shapes() {
  resource_dtypes_and_shapes_.Clear();
}
const ::tensorflow::eager::ResourceDtypeAndShape& RemoteTensorHandle::resource_dtypes_and_shapes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.RemoteTensorHandle.resource_dtypes_and_shapes)
  return resource_dtypes_and_shapes_.Get(index);
}
::tensorflow::eager::ResourceDtypeAndShape* RemoteTensorHandle::mutable_resource_dtypes_and_shapes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.eager.RemoteTensorHandle.resource_dtypes_and_shapes)
  return resource_dtypes_and_shapes_.Mutable(index);
}
::tensorflow::eager::ResourceDtypeAndShape* RemoteTensorHandle::add_resource_dtypes_and_shapes() {
  // @@protoc_insertion_point(field_add:tensorflow.eager.RemoteTensorHandle.resource_dtypes_and_shapes)
  return resource_dtypes_and_shapes_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::eager::ResourceDtypeAndShape >*
RemoteTensorHandle::mutable_resource_dtypes_and_shapes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.eager.RemoteTensorHandle.resource_dtypes_and_shapes)
  return &resource_dtypes_and_shapes_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::eager::ResourceDtypeAndShape >&
RemoteTensorHandle::resource_dtypes_and_shapes() const {
  // @@protoc_insertion_point(field_list:tensorflow.eager.RemoteTensorHandle.resource_dtypes_and_shapes)
  return resource_dtypes_and_shapes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace eager
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
