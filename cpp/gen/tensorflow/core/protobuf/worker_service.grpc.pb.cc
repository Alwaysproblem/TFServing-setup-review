// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tensorflow/core/protobuf/worker_service.proto

#include "tensorflow/core/protobuf/worker_service.pb.h"
#include "tensorflow/core/protobuf/worker_service.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace tensorflow {
namespace grpc {

static const char* WorkerService_method_names[] = {
  "/tensorflow.grpc.WorkerService/GetStatus",
  "/tensorflow.grpc.WorkerService/CreateWorkerSession",
  "/tensorflow.grpc.WorkerService/DeleteWorkerSession",
  "/tensorflow.grpc.WorkerService/RegisterGraph",
  "/tensorflow.grpc.WorkerService/DeregisterGraph",
  "/tensorflow.grpc.WorkerService/RunGraph",
  "/tensorflow.grpc.WorkerService/CleanupGraph",
  "/tensorflow.grpc.WorkerService/CleanupAll",
  "/tensorflow.grpc.WorkerService/RecvTensor",
  "/tensorflow.grpc.WorkerService/Logging",
  "/tensorflow.grpc.WorkerService/Tracing",
  "/tensorflow.grpc.WorkerService/RecvBuf",
  "/tensorflow.grpc.WorkerService/GetStepSequence",
  "/tensorflow.grpc.WorkerService/CompleteGroup",
  "/tensorflow.grpc.WorkerService/CompleteInstance",
};

std::unique_ptr< WorkerService::Stub> WorkerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< WorkerService::Stub> stub(new WorkerService::Stub(channel));
  return stub;
}

WorkerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetStatus_(WorkerService_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateWorkerSession_(WorkerService_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteWorkerSession_(WorkerService_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisterGraph_(WorkerService_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeregisterGraph_(WorkerService_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RunGraph_(WorkerService_method_names[5], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CleanupGraph_(WorkerService_method_names[6], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CleanupAll_(WorkerService_method_names[7], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RecvTensor_(WorkerService_method_names[8], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Logging_(WorkerService_method_names[9], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Tracing_(WorkerService_method_names[10], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RecvBuf_(WorkerService_method_names[11], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetStepSequence_(WorkerService_method_names[12], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CompleteGroup_(WorkerService_method_names[13], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CompleteInstance_(WorkerService_method_names[14], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status WorkerService::Stub::GetStatus(::grpc::ClientContext* context, const ::tensorflow::GetStatusRequest& request, ::tensorflow::GetStatusResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetStatus_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::GetStatusResponse>* WorkerService::Stub::AsyncGetStatusRaw(::grpc::ClientContext* context, const ::tensorflow::GetStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::tensorflow::GetStatusResponse>(channel_.get(), cq, rpcmethod_GetStatus_, context, request);
}

::grpc::Status WorkerService::Stub::CreateWorkerSession(::grpc::ClientContext* context, const ::tensorflow::CreateWorkerSessionRequest& request, ::tensorflow::CreateWorkerSessionResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_CreateWorkerSession_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::CreateWorkerSessionResponse>* WorkerService::Stub::AsyncCreateWorkerSessionRaw(::grpc::ClientContext* context, const ::tensorflow::CreateWorkerSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::tensorflow::CreateWorkerSessionResponse>(channel_.get(), cq, rpcmethod_CreateWorkerSession_, context, request);
}

::grpc::Status WorkerService::Stub::DeleteWorkerSession(::grpc::ClientContext* context, const ::tensorflow::DeleteWorkerSessionRequest& request, ::tensorflow::DeleteWorkerSessionResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteWorkerSession_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::DeleteWorkerSessionResponse>* WorkerService::Stub::AsyncDeleteWorkerSessionRaw(::grpc::ClientContext* context, const ::tensorflow::DeleteWorkerSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::tensorflow::DeleteWorkerSessionResponse>(channel_.get(), cq, rpcmethod_DeleteWorkerSession_, context, request);
}

::grpc::Status WorkerService::Stub::RegisterGraph(::grpc::ClientContext* context, const ::tensorflow::RegisterGraphRequest& request, ::tensorflow::RegisterGraphResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_RegisterGraph_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::RegisterGraphResponse>* WorkerService::Stub::AsyncRegisterGraphRaw(::grpc::ClientContext* context, const ::tensorflow::RegisterGraphRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::tensorflow::RegisterGraphResponse>(channel_.get(), cq, rpcmethod_RegisterGraph_, context, request);
}

::grpc::Status WorkerService::Stub::DeregisterGraph(::grpc::ClientContext* context, const ::tensorflow::DeregisterGraphRequest& request, ::tensorflow::DeregisterGraphResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_DeregisterGraph_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::DeregisterGraphResponse>* WorkerService::Stub::AsyncDeregisterGraphRaw(::grpc::ClientContext* context, const ::tensorflow::DeregisterGraphRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::tensorflow::DeregisterGraphResponse>(channel_.get(), cq, rpcmethod_DeregisterGraph_, context, request);
}

::grpc::Status WorkerService::Stub::RunGraph(::grpc::ClientContext* context, const ::tensorflow::RunGraphRequest& request, ::tensorflow::RunGraphResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_RunGraph_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::RunGraphResponse>* WorkerService::Stub::AsyncRunGraphRaw(::grpc::ClientContext* context, const ::tensorflow::RunGraphRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::tensorflow::RunGraphResponse>(channel_.get(), cq, rpcmethod_RunGraph_, context, request);
}

::grpc::Status WorkerService::Stub::CleanupGraph(::grpc::ClientContext* context, const ::tensorflow::CleanupGraphRequest& request, ::tensorflow::CleanupGraphResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_CleanupGraph_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::CleanupGraphResponse>* WorkerService::Stub::AsyncCleanupGraphRaw(::grpc::ClientContext* context, const ::tensorflow::CleanupGraphRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::tensorflow::CleanupGraphResponse>(channel_.get(), cq, rpcmethod_CleanupGraph_, context, request);
}

::grpc::Status WorkerService::Stub::CleanupAll(::grpc::ClientContext* context, const ::tensorflow::CleanupAllRequest& request, ::tensorflow::CleanupAllResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_CleanupAll_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::CleanupAllResponse>* WorkerService::Stub::AsyncCleanupAllRaw(::grpc::ClientContext* context, const ::tensorflow::CleanupAllRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::tensorflow::CleanupAllResponse>(channel_.get(), cq, rpcmethod_CleanupAll_, context, request);
}

::grpc::Status WorkerService::Stub::RecvTensor(::grpc::ClientContext* context, const ::tensorflow::RecvTensorRequest& request, ::tensorflow::RecvTensorResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_RecvTensor_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::RecvTensorResponse>* WorkerService::Stub::AsyncRecvTensorRaw(::grpc::ClientContext* context, const ::tensorflow::RecvTensorRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::tensorflow::RecvTensorResponse>(channel_.get(), cq, rpcmethod_RecvTensor_, context, request);
}

::grpc::Status WorkerService::Stub::Logging(::grpc::ClientContext* context, const ::tensorflow::LoggingRequest& request, ::tensorflow::LoggingResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Logging_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::LoggingResponse>* WorkerService::Stub::AsyncLoggingRaw(::grpc::ClientContext* context, const ::tensorflow::LoggingRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::tensorflow::LoggingResponse>(channel_.get(), cq, rpcmethod_Logging_, context, request);
}

::grpc::Status WorkerService::Stub::Tracing(::grpc::ClientContext* context, const ::tensorflow::TracingRequest& request, ::tensorflow::TracingResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Tracing_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::TracingResponse>* WorkerService::Stub::AsyncTracingRaw(::grpc::ClientContext* context, const ::tensorflow::TracingRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::tensorflow::TracingResponse>(channel_.get(), cq, rpcmethod_Tracing_, context, request);
}

::grpc::Status WorkerService::Stub::RecvBuf(::grpc::ClientContext* context, const ::tensorflow::RecvBufRequest& request, ::tensorflow::RecvBufResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_RecvBuf_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::RecvBufResponse>* WorkerService::Stub::AsyncRecvBufRaw(::grpc::ClientContext* context, const ::tensorflow::RecvBufRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::tensorflow::RecvBufResponse>(channel_.get(), cq, rpcmethod_RecvBuf_, context, request);
}

::grpc::Status WorkerService::Stub::GetStepSequence(::grpc::ClientContext* context, const ::tensorflow::GetStepSequenceRequest& request, ::tensorflow::GetStepSequenceResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetStepSequence_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::GetStepSequenceResponse>* WorkerService::Stub::AsyncGetStepSequenceRaw(::grpc::ClientContext* context, const ::tensorflow::GetStepSequenceRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::tensorflow::GetStepSequenceResponse>(channel_.get(), cq, rpcmethod_GetStepSequence_, context, request);
}

::grpc::Status WorkerService::Stub::CompleteGroup(::grpc::ClientContext* context, const ::tensorflow::CompleteGroupRequest& request, ::tensorflow::CompleteGroupResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_CompleteGroup_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::CompleteGroupResponse>* WorkerService::Stub::AsyncCompleteGroupRaw(::grpc::ClientContext* context, const ::tensorflow::CompleteGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::tensorflow::CompleteGroupResponse>(channel_.get(), cq, rpcmethod_CompleteGroup_, context, request);
}

::grpc::Status WorkerService::Stub::CompleteInstance(::grpc::ClientContext* context, const ::tensorflow::CompleteInstanceRequest& request, ::tensorflow::CompleteInstanceResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_CompleteInstance_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tensorflow::CompleteInstanceResponse>* WorkerService::Stub::AsyncCompleteInstanceRaw(::grpc::ClientContext* context, const ::tensorflow::CompleteInstanceRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::tensorflow::CompleteInstanceResponse>(channel_.get(), cq, rpcmethod_CompleteInstance_, context, request);
}

WorkerService::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      WorkerService_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< WorkerService::Service, ::tensorflow::GetStatusRequest, ::tensorflow::GetStatusResponse>(
          std::mem_fn(&WorkerService::Service::GetStatus), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      WorkerService_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< WorkerService::Service, ::tensorflow::CreateWorkerSessionRequest, ::tensorflow::CreateWorkerSessionResponse>(
          std::mem_fn(&WorkerService::Service::CreateWorkerSession), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      WorkerService_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< WorkerService::Service, ::tensorflow::DeleteWorkerSessionRequest, ::tensorflow::DeleteWorkerSessionResponse>(
          std::mem_fn(&WorkerService::Service::DeleteWorkerSession), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      WorkerService_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< WorkerService::Service, ::tensorflow::RegisterGraphRequest, ::tensorflow::RegisterGraphResponse>(
          std::mem_fn(&WorkerService::Service::RegisterGraph), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      WorkerService_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< WorkerService::Service, ::tensorflow::DeregisterGraphRequest, ::tensorflow::DeregisterGraphResponse>(
          std::mem_fn(&WorkerService::Service::DeregisterGraph), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      WorkerService_method_names[5],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< WorkerService::Service, ::tensorflow::RunGraphRequest, ::tensorflow::RunGraphResponse>(
          std::mem_fn(&WorkerService::Service::RunGraph), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      WorkerService_method_names[6],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< WorkerService::Service, ::tensorflow::CleanupGraphRequest, ::tensorflow::CleanupGraphResponse>(
          std::mem_fn(&WorkerService::Service::CleanupGraph), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      WorkerService_method_names[7],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< WorkerService::Service, ::tensorflow::CleanupAllRequest, ::tensorflow::CleanupAllResponse>(
          std::mem_fn(&WorkerService::Service::CleanupAll), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      WorkerService_method_names[8],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< WorkerService::Service, ::tensorflow::RecvTensorRequest, ::tensorflow::RecvTensorResponse>(
          std::mem_fn(&WorkerService::Service::RecvTensor), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      WorkerService_method_names[9],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< WorkerService::Service, ::tensorflow::LoggingRequest, ::tensorflow::LoggingResponse>(
          std::mem_fn(&WorkerService::Service::Logging), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      WorkerService_method_names[10],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< WorkerService::Service, ::tensorflow::TracingRequest, ::tensorflow::TracingResponse>(
          std::mem_fn(&WorkerService::Service::Tracing), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      WorkerService_method_names[11],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< WorkerService::Service, ::tensorflow::RecvBufRequest, ::tensorflow::RecvBufResponse>(
          std::mem_fn(&WorkerService::Service::RecvBuf), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      WorkerService_method_names[12],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< WorkerService::Service, ::tensorflow::GetStepSequenceRequest, ::tensorflow::GetStepSequenceResponse>(
          std::mem_fn(&WorkerService::Service::GetStepSequence), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      WorkerService_method_names[13],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< WorkerService::Service, ::tensorflow::CompleteGroupRequest, ::tensorflow::CompleteGroupResponse>(
          std::mem_fn(&WorkerService::Service::CompleteGroup), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      WorkerService_method_names[14],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< WorkerService::Service, ::tensorflow::CompleteInstanceRequest, ::tensorflow::CompleteInstanceResponse>(
          std::mem_fn(&WorkerService::Service::CompleteInstance), this)));
}

WorkerService::Service::~Service() {
}

::grpc::Status WorkerService::Service::GetStatus(::grpc::ServerContext* context, const ::tensorflow::GetStatusRequest* request, ::tensorflow::GetStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorkerService::Service::CreateWorkerSession(::grpc::ServerContext* context, const ::tensorflow::CreateWorkerSessionRequest* request, ::tensorflow::CreateWorkerSessionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorkerService::Service::DeleteWorkerSession(::grpc::ServerContext* context, const ::tensorflow::DeleteWorkerSessionRequest* request, ::tensorflow::DeleteWorkerSessionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorkerService::Service::RegisterGraph(::grpc::ServerContext* context, const ::tensorflow::RegisterGraphRequest* request, ::tensorflow::RegisterGraphResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorkerService::Service::DeregisterGraph(::grpc::ServerContext* context, const ::tensorflow::DeregisterGraphRequest* request, ::tensorflow::DeregisterGraphResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorkerService::Service::RunGraph(::grpc::ServerContext* context, const ::tensorflow::RunGraphRequest* request, ::tensorflow::RunGraphResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorkerService::Service::CleanupGraph(::grpc::ServerContext* context, const ::tensorflow::CleanupGraphRequest* request, ::tensorflow::CleanupGraphResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorkerService::Service::CleanupAll(::grpc::ServerContext* context, const ::tensorflow::CleanupAllRequest* request, ::tensorflow::CleanupAllResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorkerService::Service::RecvTensor(::grpc::ServerContext* context, const ::tensorflow::RecvTensorRequest* request, ::tensorflow::RecvTensorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorkerService::Service::Logging(::grpc::ServerContext* context, const ::tensorflow::LoggingRequest* request, ::tensorflow::LoggingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorkerService::Service::Tracing(::grpc::ServerContext* context, const ::tensorflow::TracingRequest* request, ::tensorflow::TracingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorkerService::Service::RecvBuf(::grpc::ServerContext* context, const ::tensorflow::RecvBufRequest* request, ::tensorflow::RecvBufResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorkerService::Service::GetStepSequence(::grpc::ServerContext* context, const ::tensorflow::GetStepSequenceRequest* request, ::tensorflow::GetStepSequenceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorkerService::Service::CompleteGroup(::grpc::ServerContext* context, const ::tensorflow::CompleteGroupRequest* request, ::tensorflow::CompleteGroupResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorkerService::Service::CompleteInstance(::grpc::ServerContext* context, const ::tensorflow::CompleteInstanceRequest* request, ::tensorflow::CompleteInstanceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace tensorflow
}  // namespace grpc

