// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/worker.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/protobuf/worker.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {

namespace {

const ::google::protobuf::Descriptor* GetStatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStatusRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStatusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStatusResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateWorkerSessionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateWorkerSessionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateWorkerSessionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateWorkerSessionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteWorkerSessionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteWorkerSessionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteWorkerSessionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteWorkerSessionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterGraphRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterGraphRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterGraphResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterGraphResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeregisterGraphRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeregisterGraphRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeregisterGraphResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeregisterGraphResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CleanupAllRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CleanupAllRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CleanupAllResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CleanupAllResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExecutorOpts_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExecutorOpts_reflection_ = NULL;
const ::google::protobuf::Descriptor* RunGraphRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunGraphRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RunGraphResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunGraphResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CleanupGraphRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CleanupGraphRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CleanupGraphResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CleanupGraphResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecvTensorRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecvTensorRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecvTensorResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecvTensorResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarkRecvFinishedRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarkRecvFinishedRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarkRecvFinishedResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarkRecvFinishedResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoggingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoggingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LabeledStepStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LabeledStepStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoggingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoggingResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TraceOpts_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TraceOpts_reflection_ = NULL;
const ::google::protobuf::Descriptor* TracingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TracingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TracingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TracingResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecvBufRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecvBufRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecvBufResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecvBufResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompleteGroupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompleteGroupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompleteGroupResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompleteGroupResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompleteInstanceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompleteInstanceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompleteInstanceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompleteInstanceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStepSequenceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStepSequenceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StepSequence_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StepSequence_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStepSequenceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStepSequenceResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fworker_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fworker_2eproto() {
  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fworker_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow/core/protobuf/worker.proto");
  GOOGLE_CHECK(file != NULL);
  GetStatusRequest_descriptor_ = file->message_type(0);
  static const int GetStatusRequest_offsets_[1] = {
  };
  GetStatusRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetStatusRequest_descriptor_,
      GetStatusRequest::default_instance_,
      GetStatusRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetStatusRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStatusRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStatusRequest, _is_default_instance_));
  GetStatusResponse_descriptor_ = file->message_type(1);
  static const int GetStatusResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStatusResponse, device_attributes_),
  };
  GetStatusResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetStatusResponse_descriptor_,
      GetStatusResponse::default_instance_,
      GetStatusResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetStatusResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStatusResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStatusResponse, _is_default_instance_));
  CreateWorkerSessionRequest_descriptor_ = file->message_type(2);
  static const int CreateWorkerSessionRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateWorkerSessionRequest, session_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateWorkerSessionRequest, server_def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateWorkerSessionRequest, isolate_session_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateWorkerSessionRequest, cluster_device_attributes_),
  };
  CreateWorkerSessionRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateWorkerSessionRequest_descriptor_,
      CreateWorkerSessionRequest::default_instance_,
      CreateWorkerSessionRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreateWorkerSessionRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateWorkerSessionRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateWorkerSessionRequest, _is_default_instance_));
  CreateWorkerSessionResponse_descriptor_ = file->message_type(3);
  static const int CreateWorkerSessionResponse_offsets_[1] = {
  };
  CreateWorkerSessionResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateWorkerSessionResponse_descriptor_,
      CreateWorkerSessionResponse::default_instance_,
      CreateWorkerSessionResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreateWorkerSessionResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateWorkerSessionResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateWorkerSessionResponse, _is_default_instance_));
  DeleteWorkerSessionRequest_descriptor_ = file->message_type(4);
  static const int DeleteWorkerSessionRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteWorkerSessionRequest, session_handle_),
  };
  DeleteWorkerSessionRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeleteWorkerSessionRequest_descriptor_,
      DeleteWorkerSessionRequest::default_instance_,
      DeleteWorkerSessionRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeleteWorkerSessionRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteWorkerSessionRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteWorkerSessionRequest, _is_default_instance_));
  DeleteWorkerSessionResponse_descriptor_ = file->message_type(5);
  static const int DeleteWorkerSessionResponse_offsets_[1] = {
  };
  DeleteWorkerSessionResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeleteWorkerSessionResponse_descriptor_,
      DeleteWorkerSessionResponse::default_instance_,
      DeleteWorkerSessionResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeleteWorkerSessionResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteWorkerSessionResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteWorkerSessionResponse, _is_default_instance_));
  RegisterGraphRequest_descriptor_ = file->message_type(6);
  static const int RegisterGraphRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterGraphRequest, session_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterGraphRequest, create_worker_session_called_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterGraphRequest, graph_def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterGraphRequest, has_control_flow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterGraphRequest, graph_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterGraphRequest, debug_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterGraphRequest, collective_graph_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterGraphRequest, config_proto_),
  };
  RegisterGraphRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegisterGraphRequest_descriptor_,
      RegisterGraphRequest::default_instance_,
      RegisterGraphRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(RegisterGraphRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterGraphRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterGraphRequest, _is_default_instance_));
  RegisterGraphResponse_descriptor_ = file->message_type(7);
  static const int RegisterGraphResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterGraphResponse, graph_handle_),
  };
  RegisterGraphResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegisterGraphResponse_descriptor_,
      RegisterGraphResponse::default_instance_,
      RegisterGraphResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(RegisterGraphResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterGraphResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterGraphResponse, _is_default_instance_));
  DeregisterGraphRequest_descriptor_ = file->message_type(8);
  static const int DeregisterGraphRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeregisterGraphRequest, session_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeregisterGraphRequest, create_worker_session_called_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeregisterGraphRequest, graph_handle_),
  };
  DeregisterGraphRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeregisterGraphRequest_descriptor_,
      DeregisterGraphRequest::default_instance_,
      DeregisterGraphRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeregisterGraphRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeregisterGraphRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeregisterGraphRequest, _is_default_instance_));
  DeregisterGraphResponse_descriptor_ = file->message_type(9);
  static const int DeregisterGraphResponse_offsets_[1] = {
  };
  DeregisterGraphResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeregisterGraphResponse_descriptor_,
      DeregisterGraphResponse::default_instance_,
      DeregisterGraphResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeregisterGraphResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeregisterGraphResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeregisterGraphResponse, _is_default_instance_));
  CleanupAllRequest_descriptor_ = file->message_type(10);
  static const int CleanupAllRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanupAllRequest, container_),
  };
  CleanupAllRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CleanupAllRequest_descriptor_,
      CleanupAllRequest::default_instance_,
      CleanupAllRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CleanupAllRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanupAllRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanupAllRequest, _is_default_instance_));
  CleanupAllResponse_descriptor_ = file->message_type(11);
  static const int CleanupAllResponse_offsets_[1] = {
  };
  CleanupAllResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CleanupAllResponse_descriptor_,
      CleanupAllResponse::default_instance_,
      CleanupAllResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CleanupAllResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanupAllResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanupAllResponse, _is_default_instance_));
  ExecutorOpts_descriptor_ = file->message_type(12);
  static const int ExecutorOpts_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorOpts, record_costs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorOpts, record_timeline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorOpts, record_partition_graphs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorOpts, report_tensor_allocations_upon_oom_),
  };
  ExecutorOpts_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExecutorOpts_descriptor_,
      ExecutorOpts::default_instance_,
      ExecutorOpts_offsets_,
      -1,
      -1,
      -1,
      sizeof(ExecutorOpts),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorOpts, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorOpts, _is_default_instance_));
  RunGraphRequest_descriptor_ = file->message_type(13);
  static const int RunGraphRequest_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunGraphRequest, session_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunGraphRequest, create_worker_session_called_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunGraphRequest, graph_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunGraphRequest, step_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunGraphRequest, exec_opts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunGraphRequest, send_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunGraphRequest, recv_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunGraphRequest, is_partial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunGraphRequest, is_last_partial_run_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunGraphRequest, store_errors_in_response_body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunGraphRequest, request_id_),
  };
  RunGraphRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RunGraphRequest_descriptor_,
      RunGraphRequest::default_instance_,
      RunGraphRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(RunGraphRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunGraphRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunGraphRequest, _is_default_instance_));
  RunGraphResponse_descriptor_ = file->message_type(14);
  static const int RunGraphResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunGraphResponse, recv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunGraphResponse, step_stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunGraphResponse, cost_graph_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunGraphResponse, partition_graph_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunGraphResponse, status_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunGraphResponse, status_error_message_),
  };
  RunGraphResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RunGraphResponse_descriptor_,
      RunGraphResponse::default_instance_,
      RunGraphResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(RunGraphResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunGraphResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunGraphResponse, _is_default_instance_));
  CleanupGraphRequest_descriptor_ = file->message_type(15);
  static const int CleanupGraphRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanupGraphRequest, step_id_),
  };
  CleanupGraphRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CleanupGraphRequest_descriptor_,
      CleanupGraphRequest::default_instance_,
      CleanupGraphRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CleanupGraphRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanupGraphRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanupGraphRequest, _is_default_instance_));
  CleanupGraphResponse_descriptor_ = file->message_type(16);
  static const int CleanupGraphResponse_offsets_[1] = {
  };
  CleanupGraphResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CleanupGraphResponse_descriptor_,
      CleanupGraphResponse::default_instance_,
      CleanupGraphResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CleanupGraphResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanupGraphResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanupGraphResponse, _is_default_instance_));
  RecvTensorRequest_descriptor_ = file->message_type(17);
  static const int RecvTensorRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvTensorRequest, step_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvTensorRequest, rendezvous_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvTensorRequest, dma_ok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvTensorRequest, client_locality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvTensorRequest, server_locality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvTensorRequest, transport_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvTensorRequest, request_id_),
  };
  RecvTensorRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RecvTensorRequest_descriptor_,
      RecvTensorRequest::default_instance_,
      RecvTensorRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(RecvTensorRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvTensorRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvTensorRequest, _is_default_instance_));
  RecvTensorResponse_descriptor_ = file->message_type(18);
  static const int RecvTensorResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvTensorResponse, tensor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvTensorResponse, is_dead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvTensorResponse, send_start_micros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvTensorResponse, transport_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvTensorResponse, require_ack_),
  };
  RecvTensorResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RecvTensorResponse_descriptor_,
      RecvTensorResponse::default_instance_,
      RecvTensorResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(RecvTensorResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvTensorResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvTensorResponse, _is_default_instance_));
  MarkRecvFinishedRequest_descriptor_ = file->message_type(19);
  static const int MarkRecvFinishedRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkRecvFinishedRequest, request_id_),
  };
  MarkRecvFinishedRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MarkRecvFinishedRequest_descriptor_,
      MarkRecvFinishedRequest::default_instance_,
      MarkRecvFinishedRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(MarkRecvFinishedRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkRecvFinishedRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkRecvFinishedRequest, _is_default_instance_));
  MarkRecvFinishedResponse_descriptor_ = file->message_type(20);
  static const int MarkRecvFinishedResponse_offsets_[1] = {
  };
  MarkRecvFinishedResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MarkRecvFinishedResponse_descriptor_,
      MarkRecvFinishedResponse::default_instance_,
      MarkRecvFinishedResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(MarkRecvFinishedResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkRecvFinishedResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkRecvFinishedResponse, _is_default_instance_));
  LoggingRequest_descriptor_ = file->message_type(21);
  static const int LoggingRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggingRequest, enable_rpc_logging_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggingRequest, disable_rpc_logging_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggingRequest, clear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggingRequest, fetch_step_id_),
  };
  LoggingRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoggingRequest_descriptor_,
      LoggingRequest::default_instance_,
      LoggingRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(LoggingRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggingRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggingRequest, _is_default_instance_));
  LabeledStepStats_descriptor_ = file->message_type(22);
  static const int LabeledStepStats_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabeledStepStats, step_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabeledStepStats, step_stats_),
  };
  LabeledStepStats_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LabeledStepStats_descriptor_,
      LabeledStepStats::default_instance_,
      LabeledStepStats_offsets_,
      -1,
      -1,
      -1,
      sizeof(LabeledStepStats),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabeledStepStats, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabeledStepStats, _is_default_instance_));
  LoggingResponse_descriptor_ = file->message_type(23);
  static const int LoggingResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggingResponse, step_),
  };
  LoggingResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoggingResponse_descriptor_,
      LoggingResponse::default_instance_,
      LoggingResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(LoggingResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggingResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggingResponse, _is_default_instance_));
  TraceOpts_descriptor_ = file->message_type(24);
  static const int TraceOpts_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceOpts, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceOpts, use_step_profiler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceOpts, use_kernel_profiler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceOpts, use_extended_profiler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceOpts, use_gpu_profiler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceOpts, use_sample_profiler_),
  };
  TraceOpts_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TraceOpts_descriptor_,
      TraceOpts::default_instance_,
      TraceOpts_offsets_,
      -1,
      -1,
      -1,
      sizeof(TraceOpts),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceOpts, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceOpts, _is_default_instance_));
  TracingRequest_descriptor_ = file->message_type(25);
  static const int TracingRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TracingRequest, options_),
  };
  TracingRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TracingRequest_descriptor_,
      TracingRequest::default_instance_,
      TracingRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(TracingRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TracingRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TracingRequest, _is_default_instance_));
  TracingResponse_descriptor_ = file->message_type(26);
  static const int TracingResponse_offsets_[1] = {
  };
  TracingResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TracingResponse_descriptor_,
      TracingResponse::default_instance_,
      TracingResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(TracingResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TracingResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TracingResponse, _is_default_instance_));
  RecvBufRequest_descriptor_ = file->message_type(27);
  static const int RecvBufRequest_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvBufRequest, step_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvBufRequest, buf_rendezvous_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvBufRequest, num_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvBufRequest, buf_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvBufRequest, client_locality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvBufRequest, server_locality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvBufRequest, transport_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvBufRequest, src_device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvBufRequest, dst_device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvBufRequest, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvBufRequest, src_incarnation_),
  };
  RecvBufRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RecvBufRequest_descriptor_,
      RecvBufRequest::default_instance_,
      RecvBufRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(RecvBufRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvBufRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvBufRequest, _is_default_instance_));
  RecvBufResponse_descriptor_ = file->message_type(28);
  static const int RecvBufResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvBufResponse, buf_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvBufResponse, num_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvBufResponse, is_dead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvBufResponse, transport_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvBufResponse, send_start_micros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvBufResponse, require_ack_),
  };
  RecvBufResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RecvBufResponse_descriptor_,
      RecvBufResponse::default_instance_,
      RecvBufResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(RecvBufResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvBufResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvBufResponse, _is_default_instance_));
  CompleteGroupRequest_descriptor_ = file->message_type(29);
  static const int CompleteGroupRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteGroupRequest, group_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteGroupRequest, group_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteGroupRequest, device_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteGroupRequest, device_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteGroupRequest, collective_type_),
  };
  CompleteGroupRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CompleteGroupRequest_descriptor_,
      CompleteGroupRequest::default_instance_,
      CompleteGroupRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CompleteGroupRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteGroupRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteGroupRequest, _is_default_instance_));
  CompleteGroupResponse_descriptor_ = file->message_type(30);
  static const int CompleteGroupResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteGroupResponse, group_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteGroupResponse, group_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteGroupResponse, device_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteGroupResponse, num_tasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteGroupResponse, device_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteGroupResponse, task_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteGroupResponse, communicator_key_),
  };
  CompleteGroupResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CompleteGroupResponse_descriptor_,
      CompleteGroupResponse::default_instance_,
      CompleteGroupResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CompleteGroupResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteGroupResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteGroupResponse, _is_default_instance_));
  CompleteInstanceRequest_descriptor_ = file->message_type(31);
  static const int CompleteInstanceRequest_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteInstanceRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteInstanceRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteInstanceRequest, data_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteInstanceRequest, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteInstanceRequest, group_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteInstanceRequest, group_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteInstanceRequest, instance_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteInstanceRequest, device_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteInstanceRequest, subdiv_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteInstanceRequest, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteInstanceRequest, is_source_),
  };
  CompleteInstanceRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CompleteInstanceRequest_descriptor_,
      CompleteInstanceRequest::default_instance_,
      CompleteInstanceRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CompleteInstanceRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteInstanceRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteInstanceRequest, _is_default_instance_));
  CompleteInstanceResponse_descriptor_ = file->message_type(32);
  static const int CompleteInstanceResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteInstanceResponse, instance_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteInstanceResponse, source_rank_),
  };
  CompleteInstanceResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CompleteInstanceResponse_descriptor_,
      CompleteInstanceResponse::default_instance_,
      CompleteInstanceResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CompleteInstanceResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteInstanceResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteInstanceResponse, _is_default_instance_));
  GetStepSequenceRequest_descriptor_ = file->message_type(33);
  static const int GetStepSequenceRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStepSequenceRequest, graph_key_),
  };
  GetStepSequenceRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetStepSequenceRequest_descriptor_,
      GetStepSequenceRequest::default_instance_,
      GetStepSequenceRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetStepSequenceRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStepSequenceRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStepSequenceRequest, _is_default_instance_));
  StepSequence_descriptor_ = file->message_type(34);
  static const int StepSequence_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepSequence, graph_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepSequence, next_step_id_),
  };
  StepSequence_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StepSequence_descriptor_,
      StepSequence::default_instance_,
      StepSequence_offsets_,
      -1,
      -1,
      -1,
      sizeof(StepSequence),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepSequence, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepSequence, _is_default_instance_));
  GetStepSequenceResponse_descriptor_ = file->message_type(35);
  static const int GetStepSequenceResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStepSequenceResponse, step_sequence_),
  };
  GetStepSequenceResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetStepSequenceResponse_descriptor_,
      GetStepSequenceResponse::default_instance_,
      GetStepSequenceResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetStepSequenceResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStepSequenceResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStepSequenceResponse, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fworker_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetStatusRequest_descriptor_, &GetStatusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetStatusResponse_descriptor_, &GetStatusResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateWorkerSessionRequest_descriptor_, &CreateWorkerSessionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateWorkerSessionResponse_descriptor_, &CreateWorkerSessionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeleteWorkerSessionRequest_descriptor_, &DeleteWorkerSessionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeleteWorkerSessionResponse_descriptor_, &DeleteWorkerSessionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegisterGraphRequest_descriptor_, &RegisterGraphRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegisterGraphResponse_descriptor_, &RegisterGraphResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeregisterGraphRequest_descriptor_, &DeregisterGraphRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeregisterGraphResponse_descriptor_, &DeregisterGraphResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CleanupAllRequest_descriptor_, &CleanupAllRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CleanupAllResponse_descriptor_, &CleanupAllResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExecutorOpts_descriptor_, &ExecutorOpts::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RunGraphRequest_descriptor_, &RunGraphRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RunGraphResponse_descriptor_, &RunGraphResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CleanupGraphRequest_descriptor_, &CleanupGraphRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CleanupGraphResponse_descriptor_, &CleanupGraphResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RecvTensorRequest_descriptor_, &RecvTensorRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RecvTensorResponse_descriptor_, &RecvTensorResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MarkRecvFinishedRequest_descriptor_, &MarkRecvFinishedRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MarkRecvFinishedResponse_descriptor_, &MarkRecvFinishedResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoggingRequest_descriptor_, &LoggingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LabeledStepStats_descriptor_, &LabeledStepStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoggingResponse_descriptor_, &LoggingResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TraceOpts_descriptor_, &TraceOpts::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TracingRequest_descriptor_, &TracingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TracingResponse_descriptor_, &TracingResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RecvBufRequest_descriptor_, &RecvBufRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RecvBufResponse_descriptor_, &RecvBufResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CompleteGroupRequest_descriptor_, &CompleteGroupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CompleteGroupResponse_descriptor_, &CompleteGroupResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CompleteInstanceRequest_descriptor_, &CompleteInstanceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CompleteInstanceResponse_descriptor_, &CompleteInstanceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetStepSequenceRequest_descriptor_, &GetStepSequenceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StepSequence_descriptor_, &StepSequence::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetStepSequenceResponse_descriptor_, &GetStepSequenceResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fworker_2eproto() {
  delete GetStatusRequest::default_instance_;
  delete GetStatusRequest_reflection_;
  delete GetStatusResponse::default_instance_;
  delete GetStatusResponse_reflection_;
  delete CreateWorkerSessionRequest::default_instance_;
  delete CreateWorkerSessionRequest_reflection_;
  delete CreateWorkerSessionResponse::default_instance_;
  delete CreateWorkerSessionResponse_reflection_;
  delete DeleteWorkerSessionRequest::default_instance_;
  delete DeleteWorkerSessionRequest_reflection_;
  delete DeleteWorkerSessionResponse::default_instance_;
  delete DeleteWorkerSessionResponse_reflection_;
  delete RegisterGraphRequest::default_instance_;
  delete RegisterGraphRequest_reflection_;
  delete RegisterGraphResponse::default_instance_;
  delete RegisterGraphResponse_reflection_;
  delete DeregisterGraphRequest::default_instance_;
  delete DeregisterGraphRequest_reflection_;
  delete DeregisterGraphResponse::default_instance_;
  delete DeregisterGraphResponse_reflection_;
  delete CleanupAllRequest::default_instance_;
  delete CleanupAllRequest_reflection_;
  delete CleanupAllResponse::default_instance_;
  delete CleanupAllResponse_reflection_;
  delete ExecutorOpts::default_instance_;
  delete ExecutorOpts_reflection_;
  delete RunGraphRequest::default_instance_;
  delete RunGraphRequest_reflection_;
  delete RunGraphResponse::default_instance_;
  delete RunGraphResponse_reflection_;
  delete CleanupGraphRequest::default_instance_;
  delete CleanupGraphRequest_reflection_;
  delete CleanupGraphResponse::default_instance_;
  delete CleanupGraphResponse_reflection_;
  delete RecvTensorRequest::default_instance_;
  delete RecvTensorRequest_reflection_;
  delete RecvTensorResponse::default_instance_;
  delete RecvTensorResponse_reflection_;
  delete MarkRecvFinishedRequest::default_instance_;
  delete MarkRecvFinishedRequest_reflection_;
  delete MarkRecvFinishedResponse::default_instance_;
  delete MarkRecvFinishedResponse_reflection_;
  delete LoggingRequest::default_instance_;
  delete LoggingRequest_reflection_;
  delete LabeledStepStats::default_instance_;
  delete LabeledStepStats_reflection_;
  delete LoggingResponse::default_instance_;
  delete LoggingResponse_reflection_;
  delete TraceOpts::default_instance_;
  delete TraceOpts_reflection_;
  delete TracingRequest::default_instance_;
  delete TracingRequest_reflection_;
  delete TracingResponse::default_instance_;
  delete TracingResponse_reflection_;
  delete RecvBufRequest::default_instance_;
  delete RecvBufRequest_reflection_;
  delete RecvBufResponse::default_instance_;
  delete RecvBufResponse_reflection_;
  delete CompleteGroupRequest::default_instance_;
  delete CompleteGroupRequest_reflection_;
  delete CompleteGroupResponse::default_instance_;
  delete CompleteGroupResponse_reflection_;
  delete CompleteInstanceRequest::default_instance_;
  delete CompleteInstanceRequest_reflection_;
  delete CompleteInstanceResponse::default_instance_;
  delete CompleteInstanceResponse_reflection_;
  delete GetStepSequenceRequest::default_instance_;
  delete GetStepSequenceRequest_reflection_;
  delete StepSequence::default_instance_;
  delete StepSequence_reflection_;
  delete GetStepSequenceResponse::default_instance_;
  delete GetStepSequenceResponse_reflection_;
}

void protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fworker_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fworker_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fany_2eproto();
  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto();
  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto();
  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2fgraph_2eproto();
  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto();
  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2ftensor_2eproto();
  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto();
  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2ftypes_2eproto();
  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto();
  ::tensorflow::error::protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2ferror_5fcodes_2eproto();
  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fnamed_5ftensor_2eproto();
  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n%tensorflow/core/protobuf/worker.proto\022"
    "\ntensorflow\032\031google/protobuf/any.proto\032*"
    "tensorflow/core/framework/cost_graph.pro"
    "to\0321tensorflow/core/framework/device_att"
    "ributes.proto\032%tensorflow/core/framework"
    "/graph.proto\032*tensorflow/core/framework/"
    "step_stats.proto\032&tensorflow/core/framew"
    "ork/tensor.proto\032,tensorflow/core/framew"
    "ork/tensor_shape.proto\032%tensorflow/core/"
    "framework/types.proto\032%tensorflow/core/p"
    "rotobuf/config.proto\032$tensorflow/core/pr"
    "otobuf/debug.proto\032*tensorflow/core/prot"
    "obuf/error_codes.proto\032+tensorflow/core/"
    "protobuf/named_tensor.proto\0320tensorflow/"
    "core/protobuf/tensorflow_server.proto\"\022\n"
    "\020GetStatusRequest\"L\n\021GetStatusResponse\0227"
    "\n\021device_attributes\030\001 \003(\0132\034.tensorflow.D"
    "eviceAttributes\"\277\001\n\032CreateWorkerSessionR"
    "equest\022\026\n\016session_handle\030\001 \001(\t\022)\n\nserver"
    "_def\030\002 \001(\0132\025.tensorflow.ServerDef\022\035\n\025iso"
    "late_session_state\030\003 \001(\010\022\?\n\031cluster_devi"
    "ce_attributes\030\004 \003(\0132\034.tensorflow.DeviceA"
    "ttributes\"\035\n\033CreateWorkerSessionResponse"
    "\"4\n\032DeleteWorkerSessionRequest\022\026\n\016sessio"
    "n_handle\030\001 \001(\t\"\035\n\033DeleteWorkerSessionRes"
    "ponse\"\312\002\n\024RegisterGraphRequest\022\026\n\016sessio"
    "n_handle\030\001 \001(\t\022$\n\034create_worker_session_"
    "called\030\006 \001(\010\022\'\n\tgraph_def\030\002 \001(\0132\024.tensor"
    "flow.GraphDef\022\034\n\020has_control_flow\030\003 \001(\010B"
    "\002\030\001\022/\n\rgraph_options\030\004 \001(\0132\030.tensorflow."
    "GraphOptions\022/\n\rdebug_options\030\005 \001(\0132\030.te"
    "nsorflow.DebugOptions\022\034\n\024collective_grap"
    "h_key\030\007 \001(\003\022-\n\014config_proto\030\010 \001(\0132\027.tens"
    "orflow.ConfigProto\"-\n\025RegisterGraphRespo"
    "nse\022\024\n\014graph_handle\030\001 \001(\t\"l\n\026DeregisterG"
    "raphRequest\022\026\n\016session_handle\030\002 \001(\t\022$\n\034c"
    "reate_worker_session_called\030\003 \001(\010\022\024\n\014gra"
    "ph_handle\030\001 \001(\t\"\031\n\027DeregisterGraphRespon"
    "se\"&\n\021CleanupAllRequest\022\021\n\tcontainer\030\001 \003"
    "(\t\"\024\n\022CleanupAllResponse\"\212\001\n\014ExecutorOpt"
    "s\022\024\n\014record_costs\030\001 \001(\010\022\027\n\017record_timeli"
    "ne\030\003 \001(\010\022\037\n\027record_partition_graphs\030\004 \001("
    "\010\022*\n\"report_tensor_allocations_upon_oom\030"
    "\005 \001(\010\"\315\002\n\017RunGraphRequest\022\026\n\016session_han"
    "dle\030\010 \001(\t\022$\n\034create_worker_session_calle"
    "d\030\n \001(\010\022\024\n\014graph_handle\030\001 \001(\t\022\017\n\007step_id"
    "\030\002 \001(\003\022+\n\texec_opts\030\005 \001(\0132\030.tensorflow.E"
    "xecutorOpts\022*\n\004send\030\003 \003(\0132\034.tensorflow.N"
    "amedTensorProto\022\020\n\010recv_key\030\004 \003(\t\022\022\n\nis_"
    "partial\030\006 \001(\010\022\033\n\023is_last_partial_run\030\007 \001"
    "(\010\022%\n\035store_errors_in_response_body\030\t \001("
    "\010\022\022\n\nrequest_id\030\013 \001(\003\"\221\002\n\020RunGraphRespon"
    "se\022*\n\004recv\030\001 \003(\0132\034.tensorflow.NamedTenso"
    "rProto\022)\n\nstep_stats\030\002 \001(\0132\025.tensorflow."
    "StepStats\022,\n\ncost_graph\030\003 \001(\0132\030.tensorfl"
    "ow.CostGraphDef\022-\n\017partition_graph\030\004 \003(\013"
    "2\024.tensorflow.GraphDef\022+\n\013status_code\030\005 "
    "\001(\0162\026.tensorflow.error.Code\022\034\n\024status_er"
    "ror_message\030\006 \001(\t\"&\n\023CleanupGraphRequest"
    "\022\017\n\007step_id\030\001 \001(\003\"\026\n\024CleanupGraphRespons"
    "e\"\373\001\n\021RecvTensorRequest\022\017\n\007step_id\030\001 \001(\003"
    "\022\026\n\016rendezvous_key\030\002 \001(\t\022\016\n\006dma_ok\030\003 \001(\010"
    "\0223\n\017client_locality\030\004 \001(\0132\032.tensorflow.D"
    "eviceLocality\0223\n\017server_locality\030\005 \001(\0132\032"
    ".tensorflow.DeviceLocality\022/\n\021transport_"
    "options\030\006 \001(\0132\024.google.protobuf.Any\022\022\n\nr"
    "equest_id\030\007 \001(\003\"\257\001\n\022RecvTensorResponse\022\'"
    "\n\006tensor\030\001 \001(\0132\027.tensorflow.TensorProto\022"
    "\017\n\007is_dead\030\002 \001(\010\022\031\n\021send_start_micros\030\003 "
    "\001(\003\022/\n\021transport_options\030\004 \001(\0132\024.google."
    "protobuf.Any\022\023\n\013require_ack\030\005 \001(\010\"-\n\027Mar"
    "kRecvFinishedRequest\022\022\n\nrequest_id\030\001 \001(\003"
    "\"\032\n\030MarkRecvFinishedResponse\"o\n\016LoggingR"
    "equest\022\032\n\022enable_rpc_logging\030\001 \001(\010\022\033\n\023di"
    "sable_rpc_logging\030\004 \001(\010\022\r\n\005clear\030\002 \001(\010\022\025"
    "\n\rfetch_step_id\030\003 \003(\003\"N\n\020LabeledStepStat"
    "s\022\017\n\007step_id\030\001 \001(\003\022)\n\nstep_stats\030\002 \001(\0132\025"
    ".tensorflow.StepStats\"=\n\017LoggingResponse"
    "\022*\n\004step\030\001 \003(\0132\034.tensorflow.LabeledStepS"
    "tats\"\253\001\n\tTraceOpts\022\020\n\010duration\030\001 \001(\001\022\031\n\021"
    "use_step_profiler\030\002 \001(\010\022\033\n\023use_kernel_pr"
    "ofiler\030\003 \001(\010\022\035\n\025use_extended_profiler\030\004 "
    "\001(\010\022\030\n\020use_gpu_profiler\030\005 \001(\010\022\033\n\023use_sam"
    "ple_profiler\030\006 \001(\010\"8\n\016TracingRequest\022&\n\007"
    "options\030\001 \001(\0132\025.tensorflow.TraceOpts\"\021\n\017"
    "TracingResponse\"\321\002\n\016RecvBufRequest\022\017\n\007st"
    "ep_id\030\001 \001(\003\022\032\n\022buf_rendezvous_key\030\002 \001(\t\022"
    "\021\n\tnum_bytes\030\003 \001(\003\022\017\n\007buf_ptr\030\004 \001(\006\0223\n\017c"
    "lient_locality\030\005 \001(\0132\032.tensorflow.Device"
    "Locality\0223\n\017server_locality\030\006 \001(\0132\032.tens"
    "orflow.DeviceLocality\022/\n\021transport_optio"
    "ns\030\007 \001(\0132\024.google.protobuf.Any\022\022\n\nsrc_de"
    "vice\030\010 \001(\t\022\022\n\ndst_device\030\t \001(\t\022\022\n\nreques"
    "t_id\030\n \001(\003\022\027\n\017src_incarnation\030\013 \001(\004\"\247\001\n\017"
    "RecvBufResponse\022\017\n\007buf_ptr\030\001 \001(\006\022\021\n\tnum_"
    "bytes\030\002 \001(\003\022\017\n\007is_dead\030\003 \001(\010\022/\n\021transpor"
    "t_options\030\004 \001(\0132\024.google.protobuf.Any\022\031\n"
    "\021send_start_micros\030\005 \001(\003\022\023\n\013require_ack\030"
    "\006 \001(\010\"\200\001\n\024CompleteGroupRequest\022\021\n\tgroup_"
    "key\030\001 \001(\005\022\022\n\ngroup_size\030\002 \001(\005\022\023\n\013device_"
    "type\030\003 \001(\t\022\023\n\013device_name\030\004 \003(\t\022\027\n\017colle"
    "ctive_type\030\005 \001(\005\"\250\001\n\025CompleteGroupRespon"
    "se\022\021\n\tgroup_key\030\001 \001(\005\022\022\n\ngroup_size\030\002 \001("
    "\005\022\023\n\013device_type\030\003 \001(\t\022\021\n\tnum_tasks\030\004 \001("
    "\005\022\023\n\013device_name\030\005 \003(\t\022\021\n\ttask_name\030\006 \003("
    "\t\022\030\n\020communicator_key\030\007 \001(\014\"\227\002\n\027Complete"
    "InstanceRequest\022\014\n\004name\030\001 \001(\t\022\014\n\004type\030\002 "
    "\001(\005\022\'\n\tdata_type\030\003 \001(\0162\024.tensorflow.Data"
    "Type\022+\n\005shape\030\004 \001(\0132\034.tensorflow.TensorS"
    "hapeProto\022\021\n\tgroup_key\030\005 \001(\005\022\022\n\ngroup_si"
    "ze\030\006 \001(\005\022\024\n\014instance_key\030\007 \001(\005\022\023\n\013device"
    "_type\030\010 \001(\t\022\025\n\rsubdiv_offset\030\t \003(\005\022\016\n\006de"
    "vice\030\n \001(\t\022\021\n\tis_source\030\013 \001(\010\"K\n\030Complet"
    "eInstanceResponse\022\024\n\014instance_key\030\001 \001(\005\022"
    "\023\n\013source_rank\030\002 \001(\005J\004\010\003\020\004\"+\n\026GetStepSeq"
    "uenceRequest\022\021\n\tgraph_key\030\001 \003(\003\"7\n\014StepS"
    "equence\022\021\n\tgraph_key\030\001 \001(\003\022\024\n\014next_step_"
    "id\030\002 \001(\003\"J\n\027GetStepSequenceResponse\022/\n\rs"
    "tep_sequence\030\001 \003(\0132\030.tensorflow.StepSequ"
    "enceBy\n\032org.tensorflow.distruntimeB\014Work"
    "erProtosP\001ZHgithub.com/tensorflow/tensor"
    "flow/tensorflow/go/core/core_protos_go_p"
    "roto\370\001\001b\006proto3", 4895);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/protobuf/worker.proto", &protobuf_RegisterTypes);
  GetStatusRequest::default_instance_ = new GetStatusRequest();
  GetStatusResponse::default_instance_ = new GetStatusResponse();
  CreateWorkerSessionRequest::default_instance_ = new CreateWorkerSessionRequest();
  CreateWorkerSessionResponse::default_instance_ = new CreateWorkerSessionResponse();
  DeleteWorkerSessionRequest::default_instance_ = new DeleteWorkerSessionRequest();
  DeleteWorkerSessionResponse::default_instance_ = new DeleteWorkerSessionResponse();
  RegisterGraphRequest::default_instance_ = new RegisterGraphRequest();
  RegisterGraphResponse::default_instance_ = new RegisterGraphResponse();
  DeregisterGraphRequest::default_instance_ = new DeregisterGraphRequest();
  DeregisterGraphResponse::default_instance_ = new DeregisterGraphResponse();
  CleanupAllRequest::default_instance_ = new CleanupAllRequest();
  CleanupAllResponse::default_instance_ = new CleanupAllResponse();
  ExecutorOpts::default_instance_ = new ExecutorOpts();
  RunGraphRequest::default_instance_ = new RunGraphRequest();
  RunGraphResponse::default_instance_ = new RunGraphResponse();
  CleanupGraphRequest::default_instance_ = new CleanupGraphRequest();
  CleanupGraphResponse::default_instance_ = new CleanupGraphResponse();
  RecvTensorRequest::default_instance_ = new RecvTensorRequest();
  RecvTensorResponse::default_instance_ = new RecvTensorResponse();
  MarkRecvFinishedRequest::default_instance_ = new MarkRecvFinishedRequest();
  MarkRecvFinishedResponse::default_instance_ = new MarkRecvFinishedResponse();
  LoggingRequest::default_instance_ = new LoggingRequest();
  LabeledStepStats::default_instance_ = new LabeledStepStats();
  LoggingResponse::default_instance_ = new LoggingResponse();
  TraceOpts::default_instance_ = new TraceOpts();
  TracingRequest::default_instance_ = new TracingRequest();
  TracingResponse::default_instance_ = new TracingResponse();
  RecvBufRequest::default_instance_ = new RecvBufRequest();
  RecvBufResponse::default_instance_ = new RecvBufResponse();
  CompleteGroupRequest::default_instance_ = new CompleteGroupRequest();
  CompleteGroupResponse::default_instance_ = new CompleteGroupResponse();
  CompleteInstanceRequest::default_instance_ = new CompleteInstanceRequest();
  CompleteInstanceResponse::default_instance_ = new CompleteInstanceResponse();
  GetStepSequenceRequest::default_instance_ = new GetStepSequenceRequest();
  StepSequence::default_instance_ = new StepSequence();
  GetStepSequenceResponse::default_instance_ = new GetStepSequenceResponse();
  GetStatusRequest::default_instance_->InitAsDefaultInstance();
  GetStatusResponse::default_instance_->InitAsDefaultInstance();
  CreateWorkerSessionRequest::default_instance_->InitAsDefaultInstance();
  CreateWorkerSessionResponse::default_instance_->InitAsDefaultInstance();
  DeleteWorkerSessionRequest::default_instance_->InitAsDefaultInstance();
  DeleteWorkerSessionResponse::default_instance_->InitAsDefaultInstance();
  RegisterGraphRequest::default_instance_->InitAsDefaultInstance();
  RegisterGraphResponse::default_instance_->InitAsDefaultInstance();
  DeregisterGraphRequest::default_instance_->InitAsDefaultInstance();
  DeregisterGraphResponse::default_instance_->InitAsDefaultInstance();
  CleanupAllRequest::default_instance_->InitAsDefaultInstance();
  CleanupAllResponse::default_instance_->InitAsDefaultInstance();
  ExecutorOpts::default_instance_->InitAsDefaultInstance();
  RunGraphRequest::default_instance_->InitAsDefaultInstance();
  RunGraphResponse::default_instance_->InitAsDefaultInstance();
  CleanupGraphRequest::default_instance_->InitAsDefaultInstance();
  CleanupGraphResponse::default_instance_->InitAsDefaultInstance();
  RecvTensorRequest::default_instance_->InitAsDefaultInstance();
  RecvTensorResponse::default_instance_->InitAsDefaultInstance();
  MarkRecvFinishedRequest::default_instance_->InitAsDefaultInstance();
  MarkRecvFinishedResponse::default_instance_->InitAsDefaultInstance();
  LoggingRequest::default_instance_->InitAsDefaultInstance();
  LabeledStepStats::default_instance_->InitAsDefaultInstance();
  LoggingResponse::default_instance_->InitAsDefaultInstance();
  TraceOpts::default_instance_->InitAsDefaultInstance();
  TracingRequest::default_instance_->InitAsDefaultInstance();
  TracingResponse::default_instance_->InitAsDefaultInstance();
  RecvBufRequest::default_instance_->InitAsDefaultInstance();
  RecvBufResponse::default_instance_->InitAsDefaultInstance();
  CompleteGroupRequest::default_instance_->InitAsDefaultInstance();
  CompleteGroupResponse::default_instance_->InitAsDefaultInstance();
  CompleteInstanceRequest::default_instance_->InitAsDefaultInstance();
  CompleteInstanceResponse::default_instance_->InitAsDefaultInstance();
  GetStepSequenceRequest::default_instance_->InitAsDefaultInstance();
  StepSequence::default_instance_->InitAsDefaultInstance();
  GetStepSequenceResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fworker_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_2fcore_2fprotobuf_2fworker_2eproto {
  StaticDescriptorInitializer_tensorflow_2fcore_2fprotobuf_2fworker_2eproto() {
    protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fworker_2eproto();
  }
} static_descriptor_initializer_tensorflow_2fcore_2fprotobuf_2fworker_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetStatusRequest::GetStatusRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GetStatusRequest)
}

GetStatusRequest::GetStatusRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GetStatusRequest)
}

void GetStatusRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetStatusRequest::GetStatusRequest(const GetStatusRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.GetStatusRequest)
}

void GetStatusRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

GetStatusRequest::~GetStatusRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.GetStatusRequest)
  SharedDtor();
}

void GetStatusRequest::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void GetStatusRequest::ArenaDtor(void* object) {
  GetStatusRequest* _this = reinterpret_cast< GetStatusRequest* >(object);
  (void)_this;
}
void GetStatusRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetStatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStatusRequest_descriptor_;
}

const GetStatusRequest& GetStatusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fworker_2eproto();
  return *default_instance_;
}

GetStatusRequest* GetStatusRequest::default_instance_ = NULL;

GetStatusRequest* GetStatusRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetStatusRequest>(arena);
}

void GetStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GetStatusRequest)
}

bool GetStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GetStatusRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GetStatusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GetStatusRequest)
  return false;
#undef DO_
}

void GetStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GetStatusRequest)
  // @@protoc_insertion_point(serialize_end:tensorflow.GetStatusRequest)
}

::google::protobuf::uint8* GetStatusRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GetStatusRequest)
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GetStatusRequest)
  return target;
}

int GetStatusRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GetStatusRequest)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GetStatusRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetStatusRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetStatusRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GetStatusRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GetStatusRequest)
    MergeFrom(*source);
  }
}

void GetStatusRequest::MergeFrom(const GetStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GetStatusRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void GetStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GetStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStatusRequest::CopyFrom(const GetStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GetStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStatusRequest::IsInitialized() const {

  return true;
}

void GetStatusRequest::Swap(GetStatusRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetStatusRequest temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void GetStatusRequest::UnsafeArenaSwap(GetStatusRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetStatusRequest::InternalSwap(GetStatusRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetStatusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStatusRequest_descriptor_;
  metadata.reflection = GetStatusRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetStatusRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetStatusResponse::kDeviceAttributesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetStatusResponse::GetStatusResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GetStatusResponse)
}

GetStatusResponse::GetStatusResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  device_attributes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GetStatusResponse)
}

void GetStatusResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetStatusResponse::GetStatusResponse(const GetStatusResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.GetStatusResponse)
}

void GetStatusResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

GetStatusResponse::~GetStatusResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.GetStatusResponse)
  SharedDtor();
}

void GetStatusResponse::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void GetStatusResponse::ArenaDtor(void* object) {
  GetStatusResponse* _this = reinterpret_cast< GetStatusResponse* >(object);
  (void)_this;
}
void GetStatusResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetStatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStatusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStatusResponse_descriptor_;
}

const GetStatusResponse& GetStatusResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fworker_2eproto();
  return *default_instance_;
}

GetStatusResponse* GetStatusResponse::default_instance_ = NULL;

GetStatusResponse* GetStatusResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetStatusResponse>(arena);
}

void GetStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GetStatusResponse)
  device_attributes_.Clear();
}

bool GetStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GetStatusResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.DeviceAttributes device_attributes = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_device_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_device_attributes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_device_attributes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GetStatusResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GetStatusResponse)
  return false;
#undef DO_
}

void GetStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GetStatusResponse)
  // repeated .tensorflow.DeviceAttributes device_attributes = 1;
  for (unsigned int i = 0, n = this->device_attributes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->device_attributes(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.GetStatusResponse)
}

::google::protobuf::uint8* GetStatusResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GetStatusResponse)
  // repeated .tensorflow.DeviceAttributes device_attributes = 1;
  for (unsigned int i = 0, n = this->device_attributes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->device_attributes(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GetStatusResponse)
  return target;
}

int GetStatusResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GetStatusResponse)
  int total_size = 0;

  // repeated .tensorflow.DeviceAttributes device_attributes = 1;
  total_size += 1 * this->device_attributes_size();
  for (int i = 0; i < this->device_attributes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->device_attributes(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GetStatusResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetStatusResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetStatusResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GetStatusResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GetStatusResponse)
    MergeFrom(*source);
  }
}

void GetStatusResponse::MergeFrom(const GetStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GetStatusResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  device_attributes_.MergeFrom(from.device_attributes_);
}

void GetStatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GetStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStatusResponse::CopyFrom(const GetStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GetStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStatusResponse::IsInitialized() const {

  return true;
}

void GetStatusResponse::Swap(GetStatusResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetStatusResponse temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void GetStatusResponse::UnsafeArenaSwap(GetStatusResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetStatusResponse::InternalSwap(GetStatusResponse* other) {
  device_attributes_.UnsafeArenaSwap(&other->device_attributes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetStatusResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStatusResponse_descriptor_;
  metadata.reflection = GetStatusResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetStatusResponse

// repeated .tensorflow.DeviceAttributes device_attributes = 1;
int GetStatusResponse::device_attributes_size() const {
  return device_attributes_.size();
}
void GetStatusResponse::clear_device_attributes() {
  device_attributes_.Clear();
}
const ::tensorflow::DeviceAttributes& GetStatusResponse::device_attributes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GetStatusResponse.device_attributes)
  return device_attributes_.Get(index);
}
::tensorflow::DeviceAttributes* GetStatusResponse::mutable_device_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.GetStatusResponse.device_attributes)
  return device_attributes_.Mutable(index);
}
::tensorflow::DeviceAttributes* GetStatusResponse::add_device_attributes() {
  // @@protoc_insertion_point(field_add:tensorflow.GetStatusResponse.device_attributes)
  return device_attributes_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::DeviceAttributes >*
GetStatusResponse::mutable_device_attributes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GetStatusResponse.device_attributes)
  return &device_attributes_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::DeviceAttributes >&
GetStatusResponse::device_attributes() const {
  // @@protoc_insertion_point(field_list:tensorflow.GetStatusResponse.device_attributes)
  return device_attributes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void CreateWorkerSessionRequest::_slow_mutable_server_def() {
  server_def_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::ServerDef >(
      GetArenaNoVirtual());
}
::tensorflow::ServerDef* CreateWorkerSessionRequest::_slow_release_server_def() {
  if (server_def_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::ServerDef* temp = new ::tensorflow::ServerDef;
    temp->MergeFrom(*server_def_);
    server_def_ = NULL;
    return temp;
  }
}
::tensorflow::ServerDef* CreateWorkerSessionRequest::unsafe_arena_release_server_def() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.CreateWorkerSessionRequest.server_def)
  
  ::tensorflow::ServerDef* temp = server_def_;
  server_def_ = NULL;
  return temp;
}
void CreateWorkerSessionRequest::_slow_set_allocated_server_def(
    ::google::protobuf::Arena* message_arena, ::tensorflow::ServerDef** server_def) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*server_def) == NULL) {
      message_arena->Own(*server_def);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*server_def)) {
      ::tensorflow::ServerDef* new_server_def = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::ServerDef >(
            message_arena);
      new_server_def->CopyFrom(**server_def);
      *server_def = new_server_def;
    }
}
void CreateWorkerSessionRequest::unsafe_arena_set_allocated_server_def(
    ::tensorflow::ServerDef* server_def) {
  if (GetArenaNoVirtual() == NULL) {
    delete server_def_;
  }
  server_def_ = server_def;
  if (server_def) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.CreateWorkerSessionRequest.server_def)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateWorkerSessionRequest::kSessionHandleFieldNumber;
const int CreateWorkerSessionRequest::kServerDefFieldNumber;
const int CreateWorkerSessionRequest::kIsolateSessionStateFieldNumber;
const int CreateWorkerSessionRequest::kClusterDeviceAttributesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateWorkerSessionRequest::CreateWorkerSessionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CreateWorkerSessionRequest)
}

CreateWorkerSessionRequest::CreateWorkerSessionRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  cluster_device_attributes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CreateWorkerSessionRequest)
}

void CreateWorkerSessionRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  server_def_ = const_cast< ::tensorflow::ServerDef*>(&::tensorflow::ServerDef::default_instance());
}

CreateWorkerSessionRequest::CreateWorkerSessionRequest(const CreateWorkerSessionRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.CreateWorkerSessionRequest)
}

void CreateWorkerSessionRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  session_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_def_ = NULL;
  isolate_session_state_ = false;
}

CreateWorkerSessionRequest::~CreateWorkerSessionRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.CreateWorkerSessionRequest)
  SharedDtor();
}

void CreateWorkerSessionRequest::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  session_handle_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
    delete server_def_;
  }
}

void CreateWorkerSessionRequest::ArenaDtor(void* object) {
  CreateWorkerSessionRequest* _this = reinterpret_cast< CreateWorkerSessionRequest* >(object);
  (void)_this;
}
void CreateWorkerSessionRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CreateWorkerSessionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateWorkerSessionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateWorkerSessionRequest_descriptor_;
}

const CreateWorkerSessionRequest& CreateWorkerSessionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fworker_2eproto();
  return *default_instance_;
}

CreateWorkerSessionRequest* CreateWorkerSessionRequest::default_instance_ = NULL;

CreateWorkerSessionRequest* CreateWorkerSessionRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CreateWorkerSessionRequest>(arena);
}

void CreateWorkerSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CreateWorkerSessionRequest)
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && server_def_ != NULL) delete server_def_;
  server_def_ = NULL;
  isolate_session_state_ = false;
  cluster_device_attributes_.Clear();
}

bool CreateWorkerSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CreateWorkerSessionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string session_handle = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_handle().data(), this->session_handle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.CreateWorkerSessionRequest.session_handle"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_server_def;
        break;
      }

      // optional .tensorflow.ServerDef server_def = 2;
      case 2: {
        if (tag == 18) {
         parse_server_def:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server_def()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isolate_session_state;
        break;
      }

      // optional bool isolate_session_state = 3;
      case 3: {
        if (tag == 24) {
         parse_isolate_session_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isolate_session_state_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cluster_device_attributes;
        break;
      }

      // repeated .tensorflow.DeviceAttributes cluster_device_attributes = 4;
      case 4: {
        if (tag == 34) {
         parse_cluster_device_attributes:
          DO_(input->IncrementRecursionDepth());
         parse_loop_cluster_device_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_cluster_device_attributes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_cluster_device_attributes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CreateWorkerSessionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CreateWorkerSessionRequest)
  return false;
#undef DO_
}

void CreateWorkerSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CreateWorkerSessionRequest)
  // optional string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CreateWorkerSessionRequest.session_handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_handle(), output);
  }

  // optional .tensorflow.ServerDef server_def = 2;
  if (this->has_server_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->server_def_, output);
  }

  // optional bool isolate_session_state = 3;
  if (this->isolate_session_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isolate_session_state(), output);
  }

  // repeated .tensorflow.DeviceAttributes cluster_device_attributes = 4;
  for (unsigned int i = 0, n = this->cluster_device_attributes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cluster_device_attributes(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.CreateWorkerSessionRequest)
}

::google::protobuf::uint8* CreateWorkerSessionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CreateWorkerSessionRequest)
  // optional string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CreateWorkerSessionRequest.session_handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session_handle(), target);
  }

  // optional .tensorflow.ServerDef server_def = 2;
  if (this->has_server_def()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->server_def_, false, target);
  }

  // optional bool isolate_session_state = 3;
  if (this->isolate_session_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isolate_session_state(), target);
  }

  // repeated .tensorflow.DeviceAttributes cluster_device_attributes = 4;
  for (unsigned int i = 0, n = this->cluster_device_attributes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->cluster_device_attributes(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CreateWorkerSessionRequest)
  return target;
}

int CreateWorkerSessionRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CreateWorkerSessionRequest)
  int total_size = 0;

  // optional string session_handle = 1;
  if (this->session_handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_handle());
  }

  // optional .tensorflow.ServerDef server_def = 2;
  if (this->has_server_def()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->server_def_);
  }

  // optional bool isolate_session_state = 3;
  if (this->isolate_session_state() != 0) {
    total_size += 1 + 1;
  }

  // repeated .tensorflow.DeviceAttributes cluster_device_attributes = 4;
  total_size += 1 * this->cluster_device_attributes_size();
  for (int i = 0; i < this->cluster_device_attributes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cluster_device_attributes(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateWorkerSessionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CreateWorkerSessionRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CreateWorkerSessionRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateWorkerSessionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CreateWorkerSessionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CreateWorkerSessionRequest)
    MergeFrom(*source);
  }
}

void CreateWorkerSessionRequest::MergeFrom(const CreateWorkerSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CreateWorkerSessionRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  cluster_device_attributes_.MergeFrom(from.cluster_device_attributes_);
  if (from.session_handle().size() > 0) {
    set_session_handle(from.session_handle());
  }
  if (from.has_server_def()) {
    mutable_server_def()->::tensorflow::ServerDef::MergeFrom(from.server_def());
  }
  if (from.isolate_session_state() != 0) {
    set_isolate_session_state(from.isolate_session_state());
  }
}

void CreateWorkerSessionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CreateWorkerSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateWorkerSessionRequest::CopyFrom(const CreateWorkerSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CreateWorkerSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateWorkerSessionRequest::IsInitialized() const {

  return true;
}

void CreateWorkerSessionRequest::Swap(CreateWorkerSessionRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CreateWorkerSessionRequest temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void CreateWorkerSessionRequest::UnsafeArenaSwap(CreateWorkerSessionRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CreateWorkerSessionRequest::InternalSwap(CreateWorkerSessionRequest* other) {
  session_handle_.Swap(&other->session_handle_);
  std::swap(server_def_, other->server_def_);
  std::swap(isolate_session_state_, other->isolate_session_state_);
  cluster_device_attributes_.UnsafeArenaSwap(&other->cluster_device_attributes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateWorkerSessionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateWorkerSessionRequest_descriptor_;
  metadata.reflection = CreateWorkerSessionRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateWorkerSessionRequest

// optional string session_handle = 1;
void CreateWorkerSessionRequest::clear_session_handle() {
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& CreateWorkerSessionRequest::session_handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.CreateWorkerSessionRequest.session_handle)
  return session_handle_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateWorkerSessionRequest::set_session_handle(const ::std::string& value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.CreateWorkerSessionRequest.session_handle)
}
 void CreateWorkerSessionRequest::set_session_handle(const char* value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.CreateWorkerSessionRequest.session_handle)
}
 void CreateWorkerSessionRequest::set_session_handle(const char* value,
    size_t size) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.CreateWorkerSessionRequest.session_handle)
}
 ::std::string* CreateWorkerSessionRequest::mutable_session_handle() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.CreateWorkerSessionRequest.session_handle)
  return session_handle_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* CreateWorkerSessionRequest::release_session_handle() {
  // @@protoc_insertion_point(field_release:tensorflow.CreateWorkerSessionRequest.session_handle)
  
  return session_handle_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* CreateWorkerSessionRequest::unsafe_arena_release_session_handle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.CreateWorkerSessionRequest.session_handle)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return session_handle_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void CreateWorkerSessionRequest::set_allocated_session_handle(::std::string* session_handle) {
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_handle,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CreateWorkerSessionRequest.session_handle)
}
 void CreateWorkerSessionRequest::unsafe_arena_set_allocated_session_handle(
    ::std::string* session_handle) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      session_handle, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.CreateWorkerSessionRequest.session_handle)
}

// optional .tensorflow.ServerDef server_def = 2;
bool CreateWorkerSessionRequest::has_server_def() const {
  return !_is_default_instance_ && server_def_ != NULL;
}
void CreateWorkerSessionRequest::clear_server_def() {
  if (GetArenaNoVirtual() == NULL && server_def_ != NULL) delete server_def_;
  server_def_ = NULL;
}
const ::tensorflow::ServerDef& CreateWorkerSessionRequest::server_def() const {
  // @@protoc_insertion_point(field_get:tensorflow.CreateWorkerSessionRequest.server_def)
  return server_def_ != NULL ? *server_def_ : *default_instance_->server_def_;
}
::tensorflow::ServerDef* CreateWorkerSessionRequest::mutable_server_def() {
  
  if (server_def_ == NULL) {
    _slow_mutable_server_def();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.CreateWorkerSessionRequest.server_def)
  return server_def_;
}
::tensorflow::ServerDef* CreateWorkerSessionRequest::release_server_def() {
  // @@protoc_insertion_point(field_release:tensorflow.CreateWorkerSessionRequest.server_def)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_server_def();
  } else {
    ::tensorflow::ServerDef* temp = server_def_;
    server_def_ = NULL;
    return temp;
  }
}
 void CreateWorkerSessionRequest::set_allocated_server_def(::tensorflow::ServerDef* server_def) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete server_def_;
  }
  if (server_def != NULL) {
    _slow_set_allocated_server_def(message_arena, &server_def);
  }
  server_def_ = server_def;
  if (server_def) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CreateWorkerSessionRequest.server_def)
}

// optional bool isolate_session_state = 3;
void CreateWorkerSessionRequest::clear_isolate_session_state() {
  isolate_session_state_ = false;
}
 bool CreateWorkerSessionRequest::isolate_session_state() const {
  // @@protoc_insertion_point(field_get:tensorflow.CreateWorkerSessionRequest.isolate_session_state)
  return isolate_session_state_;
}
 void CreateWorkerSessionRequest::set_isolate_session_state(bool value) {
  
  isolate_session_state_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CreateWorkerSessionRequest.isolate_session_state)
}

// repeated .tensorflow.DeviceAttributes cluster_device_attributes = 4;
int CreateWorkerSessionRequest::cluster_device_attributes_size() const {
  return cluster_device_attributes_.size();
}
void CreateWorkerSessionRequest::clear_cluster_device_attributes() {
  cluster_device_attributes_.Clear();
}
const ::tensorflow::DeviceAttributes& CreateWorkerSessionRequest::cluster_device_attributes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.CreateWorkerSessionRequest.cluster_device_attributes)
  return cluster_device_attributes_.Get(index);
}
::tensorflow::DeviceAttributes* CreateWorkerSessionRequest::mutable_cluster_device_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.CreateWorkerSessionRequest.cluster_device_attributes)
  return cluster_device_attributes_.Mutable(index);
}
::tensorflow::DeviceAttributes* CreateWorkerSessionRequest::add_cluster_device_attributes() {
  // @@protoc_insertion_point(field_add:tensorflow.CreateWorkerSessionRequest.cluster_device_attributes)
  return cluster_device_attributes_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::DeviceAttributes >*
CreateWorkerSessionRequest::mutable_cluster_device_attributes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.CreateWorkerSessionRequest.cluster_device_attributes)
  return &cluster_device_attributes_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::DeviceAttributes >&
CreateWorkerSessionRequest::cluster_device_attributes() const {
  // @@protoc_insertion_point(field_list:tensorflow.CreateWorkerSessionRequest.cluster_device_attributes)
  return cluster_device_attributes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateWorkerSessionResponse::CreateWorkerSessionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CreateWorkerSessionResponse)
}

CreateWorkerSessionResponse::CreateWorkerSessionResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CreateWorkerSessionResponse)
}

void CreateWorkerSessionResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CreateWorkerSessionResponse::CreateWorkerSessionResponse(const CreateWorkerSessionResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.CreateWorkerSessionResponse)
}

void CreateWorkerSessionResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

CreateWorkerSessionResponse::~CreateWorkerSessionResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.CreateWorkerSessionResponse)
  SharedDtor();
}

void CreateWorkerSessionResponse::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void CreateWorkerSessionResponse::ArenaDtor(void* object) {
  CreateWorkerSessionResponse* _this = reinterpret_cast< CreateWorkerSessionResponse* >(object);
  (void)_this;
}
void CreateWorkerSessionResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CreateWorkerSessionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateWorkerSessionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateWorkerSessionResponse_descriptor_;
}

const CreateWorkerSessionResponse& CreateWorkerSessionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fworker_2eproto();
  return *default_instance_;
}

CreateWorkerSessionResponse* CreateWorkerSessionResponse::default_instance_ = NULL;

CreateWorkerSessionResponse* CreateWorkerSessionResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CreateWorkerSessionResponse>(arena);
}

void CreateWorkerSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CreateWorkerSessionResponse)
}

bool CreateWorkerSessionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CreateWorkerSessionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CreateWorkerSessionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CreateWorkerSessionResponse)
  return false;
#undef DO_
}

void CreateWorkerSessionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CreateWorkerSessionResponse)
  // @@protoc_insertion_point(serialize_end:tensorflow.CreateWorkerSessionResponse)
}

::google::protobuf::uint8* CreateWorkerSessionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CreateWorkerSessionResponse)
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CreateWorkerSessionResponse)
  return target;
}

int CreateWorkerSessionResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CreateWorkerSessionResponse)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateWorkerSessionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CreateWorkerSessionResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CreateWorkerSessionResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateWorkerSessionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CreateWorkerSessionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CreateWorkerSessionResponse)
    MergeFrom(*source);
  }
}

void CreateWorkerSessionResponse::MergeFrom(const CreateWorkerSessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CreateWorkerSessionResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void CreateWorkerSessionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CreateWorkerSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateWorkerSessionResponse::CopyFrom(const CreateWorkerSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CreateWorkerSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateWorkerSessionResponse::IsInitialized() const {

  return true;
}

void CreateWorkerSessionResponse::Swap(CreateWorkerSessionResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CreateWorkerSessionResponse temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void CreateWorkerSessionResponse::UnsafeArenaSwap(CreateWorkerSessionResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CreateWorkerSessionResponse::InternalSwap(CreateWorkerSessionResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateWorkerSessionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateWorkerSessionResponse_descriptor_;
  metadata.reflection = CreateWorkerSessionResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateWorkerSessionResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteWorkerSessionRequest::kSessionHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteWorkerSessionRequest::DeleteWorkerSessionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.DeleteWorkerSessionRequest)
}

DeleteWorkerSessionRequest::DeleteWorkerSessionRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DeleteWorkerSessionRequest)
}

void DeleteWorkerSessionRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DeleteWorkerSessionRequest::DeleteWorkerSessionRequest(const DeleteWorkerSessionRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.DeleteWorkerSessionRequest)
}

void DeleteWorkerSessionRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  session_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DeleteWorkerSessionRequest::~DeleteWorkerSessionRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.DeleteWorkerSessionRequest)
  SharedDtor();
}

void DeleteWorkerSessionRequest::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  session_handle_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void DeleteWorkerSessionRequest::ArenaDtor(void* object) {
  DeleteWorkerSessionRequest* _this = reinterpret_cast< DeleteWorkerSessionRequest* >(object);
  (void)_this;
}
void DeleteWorkerSessionRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DeleteWorkerSessionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteWorkerSessionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteWorkerSessionRequest_descriptor_;
}

const DeleteWorkerSessionRequest& DeleteWorkerSessionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fworker_2eproto();
  return *default_instance_;
}

DeleteWorkerSessionRequest* DeleteWorkerSessionRequest::default_instance_ = NULL;

DeleteWorkerSessionRequest* DeleteWorkerSessionRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DeleteWorkerSessionRequest>(arena);
}

void DeleteWorkerSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DeleteWorkerSessionRequest)
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool DeleteWorkerSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.DeleteWorkerSessionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string session_handle = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_handle().data(), this->session_handle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.DeleteWorkerSessionRequest.session_handle"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.DeleteWorkerSessionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.DeleteWorkerSessionRequest)
  return false;
#undef DO_
}

void DeleteWorkerSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.DeleteWorkerSessionRequest)
  // optional string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeleteWorkerSessionRequest.session_handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_handle(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.DeleteWorkerSessionRequest)
}

::google::protobuf::uint8* DeleteWorkerSessionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DeleteWorkerSessionRequest)
  // optional string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeleteWorkerSessionRequest.session_handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session_handle(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DeleteWorkerSessionRequest)
  return target;
}

int DeleteWorkerSessionRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DeleteWorkerSessionRequest)
  int total_size = 0;

  // optional string session_handle = 1;
  if (this->session_handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_handle());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteWorkerSessionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.DeleteWorkerSessionRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DeleteWorkerSessionRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteWorkerSessionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.DeleteWorkerSessionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.DeleteWorkerSessionRequest)
    MergeFrom(*source);
  }
}

void DeleteWorkerSessionRequest::MergeFrom(const DeleteWorkerSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DeleteWorkerSessionRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.session_handle().size() > 0) {
    set_session_handle(from.session_handle());
  }
}

void DeleteWorkerSessionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.DeleteWorkerSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteWorkerSessionRequest::CopyFrom(const DeleteWorkerSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DeleteWorkerSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteWorkerSessionRequest::IsInitialized() const {

  return true;
}

void DeleteWorkerSessionRequest::Swap(DeleteWorkerSessionRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DeleteWorkerSessionRequest temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void DeleteWorkerSessionRequest::UnsafeArenaSwap(DeleteWorkerSessionRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DeleteWorkerSessionRequest::InternalSwap(DeleteWorkerSessionRequest* other) {
  session_handle_.Swap(&other->session_handle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteWorkerSessionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteWorkerSessionRequest_descriptor_;
  metadata.reflection = DeleteWorkerSessionRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteWorkerSessionRequest

// optional string session_handle = 1;
void DeleteWorkerSessionRequest::clear_session_handle() {
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& DeleteWorkerSessionRequest::session_handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeleteWorkerSessionRequest.session_handle)
  return session_handle_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeleteWorkerSessionRequest::set_session_handle(const ::std::string& value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.DeleteWorkerSessionRequest.session_handle)
}
 void DeleteWorkerSessionRequest::set_session_handle(const char* value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.DeleteWorkerSessionRequest.session_handle)
}
 void DeleteWorkerSessionRequest::set_session_handle(const char* value,
    size_t size) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.DeleteWorkerSessionRequest.session_handle)
}
 ::std::string* DeleteWorkerSessionRequest::mutable_session_handle() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.DeleteWorkerSessionRequest.session_handle)
  return session_handle_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* DeleteWorkerSessionRequest::release_session_handle() {
  // @@protoc_insertion_point(field_release:tensorflow.DeleteWorkerSessionRequest.session_handle)
  
  return session_handle_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* DeleteWorkerSessionRequest::unsafe_arena_release_session_handle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.DeleteWorkerSessionRequest.session_handle)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return session_handle_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void DeleteWorkerSessionRequest::set_allocated_session_handle(::std::string* session_handle) {
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_handle,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DeleteWorkerSessionRequest.session_handle)
}
 void DeleteWorkerSessionRequest::unsafe_arena_set_allocated_session_handle(
    ::std::string* session_handle) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      session_handle, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.DeleteWorkerSessionRequest.session_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteWorkerSessionResponse::DeleteWorkerSessionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.DeleteWorkerSessionResponse)
}

DeleteWorkerSessionResponse::DeleteWorkerSessionResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DeleteWorkerSessionResponse)
}

void DeleteWorkerSessionResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DeleteWorkerSessionResponse::DeleteWorkerSessionResponse(const DeleteWorkerSessionResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.DeleteWorkerSessionResponse)
}

void DeleteWorkerSessionResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

DeleteWorkerSessionResponse::~DeleteWorkerSessionResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.DeleteWorkerSessionResponse)
  SharedDtor();
}

void DeleteWorkerSessionResponse::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void DeleteWorkerSessionResponse::ArenaDtor(void* object) {
  DeleteWorkerSessionResponse* _this = reinterpret_cast< DeleteWorkerSessionResponse* >(object);
  (void)_this;
}
void DeleteWorkerSessionResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DeleteWorkerSessionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteWorkerSessionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteWorkerSessionResponse_descriptor_;
}

const DeleteWorkerSessionResponse& DeleteWorkerSessionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fworker_2eproto();
  return *default_instance_;
}

DeleteWorkerSessionResponse* DeleteWorkerSessionResponse::default_instance_ = NULL;

DeleteWorkerSessionResponse* DeleteWorkerSessionResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DeleteWorkerSessionResponse>(arena);
}

void DeleteWorkerSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DeleteWorkerSessionResponse)
}

bool DeleteWorkerSessionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.DeleteWorkerSessionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.DeleteWorkerSessionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.DeleteWorkerSessionResponse)
  return false;
#undef DO_
}

void DeleteWorkerSessionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.DeleteWorkerSessionResponse)
  // @@protoc_insertion_point(serialize_end:tensorflow.DeleteWorkerSessionResponse)
}

::google::protobuf::uint8* DeleteWorkerSessionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DeleteWorkerSessionResponse)
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DeleteWorkerSessionResponse)
  return target;
}

int DeleteWorkerSessionResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DeleteWorkerSessionResponse)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteWorkerSessionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.DeleteWorkerSessionResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DeleteWorkerSessionResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteWorkerSessionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.DeleteWorkerSessionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.DeleteWorkerSessionResponse)
    MergeFrom(*source);
  }
}

void DeleteWorkerSessionResponse::MergeFrom(const DeleteWorkerSessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DeleteWorkerSessionResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void DeleteWorkerSessionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.DeleteWorkerSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteWorkerSessionResponse::CopyFrom(const DeleteWorkerSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DeleteWorkerSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteWorkerSessionResponse::IsInitialized() const {

  return true;
}

void DeleteWorkerSessionResponse::Swap(DeleteWorkerSessionResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DeleteWorkerSessionResponse temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void DeleteWorkerSessionResponse::UnsafeArenaSwap(DeleteWorkerSessionResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DeleteWorkerSessionResponse::InternalSwap(DeleteWorkerSessionResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteWorkerSessionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteWorkerSessionResponse_descriptor_;
  metadata.reflection = DeleteWorkerSessionResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteWorkerSessionResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void RegisterGraphRequest::_slow_mutable_graph_def() {
  graph_def_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::GraphDef >(
      GetArenaNoVirtual());
}
::tensorflow::GraphDef* RegisterGraphRequest::_slow_release_graph_def() {
  if (graph_def_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::GraphDef* temp = new ::tensorflow::GraphDef;
    temp->MergeFrom(*graph_def_);
    graph_def_ = NULL;
    return temp;
  }
}
::tensorflow::GraphDef* RegisterGraphRequest::unsafe_arena_release_graph_def() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RegisterGraphRequest.graph_def)
  
  ::tensorflow::GraphDef* temp = graph_def_;
  graph_def_ = NULL;
  return temp;
}
void RegisterGraphRequest::_slow_set_allocated_graph_def(
    ::google::protobuf::Arena* message_arena, ::tensorflow::GraphDef** graph_def) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*graph_def) == NULL) {
      message_arena->Own(*graph_def);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*graph_def)) {
      ::tensorflow::GraphDef* new_graph_def = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::GraphDef >(
            message_arena);
      new_graph_def->CopyFrom(**graph_def);
      *graph_def = new_graph_def;
    }
}
void RegisterGraphRequest::unsafe_arena_set_allocated_graph_def(
    ::tensorflow::GraphDef* graph_def) {
  if (GetArenaNoVirtual() == NULL) {
    delete graph_def_;
  }
  graph_def_ = graph_def;
  if (graph_def) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RegisterGraphRequest.graph_def)
}
void RegisterGraphRequest::_slow_mutable_graph_options() {
  graph_options_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::GraphOptions >(
      GetArenaNoVirtual());
}
::tensorflow::GraphOptions* RegisterGraphRequest::_slow_release_graph_options() {
  if (graph_options_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::GraphOptions* temp = new ::tensorflow::GraphOptions;
    temp->MergeFrom(*graph_options_);
    graph_options_ = NULL;
    return temp;
  }
}
::tensorflow::GraphOptions* RegisterGraphRequest::unsafe_arena_release_graph_options() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RegisterGraphRequest.graph_options)
  
  ::tensorflow::GraphOptions* temp = graph_options_;
  graph_options_ = NULL;
  return temp;
}
void RegisterGraphRequest::_slow_set_allocated_graph_options(
    ::google::protobuf::Arena* message_arena, ::tensorflow::GraphOptions** graph_options) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*graph_options) == NULL) {
      message_arena->Own(*graph_options);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*graph_options)) {
      ::tensorflow::GraphOptions* new_graph_options = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::GraphOptions >(
            message_arena);
      new_graph_options->CopyFrom(**graph_options);
      *graph_options = new_graph_options;
    }
}
void RegisterGraphRequest::unsafe_arena_set_allocated_graph_options(
    ::tensorflow::GraphOptions* graph_options) {
  if (GetArenaNoVirtual() == NULL) {
    delete graph_options_;
  }
  graph_options_ = graph_options;
  if (graph_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RegisterGraphRequest.graph_options)
}
void RegisterGraphRequest::_slow_mutable_debug_options() {
  debug_options_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::DebugOptions >(
      GetArenaNoVirtual());
}
::tensorflow::DebugOptions* RegisterGraphRequest::_slow_release_debug_options() {
  if (debug_options_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::DebugOptions* temp = new ::tensorflow::DebugOptions;
    temp->MergeFrom(*debug_options_);
    debug_options_ = NULL;
    return temp;
  }
}
::tensorflow::DebugOptions* RegisterGraphRequest::unsafe_arena_release_debug_options() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RegisterGraphRequest.debug_options)
  
  ::tensorflow::DebugOptions* temp = debug_options_;
  debug_options_ = NULL;
  return temp;
}
void RegisterGraphRequest::_slow_set_allocated_debug_options(
    ::google::protobuf::Arena* message_arena, ::tensorflow::DebugOptions** debug_options) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*debug_options) == NULL) {
      message_arena->Own(*debug_options);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*debug_options)) {
      ::tensorflow::DebugOptions* new_debug_options = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::DebugOptions >(
            message_arena);
      new_debug_options->CopyFrom(**debug_options);
      *debug_options = new_debug_options;
    }
}
void RegisterGraphRequest::unsafe_arena_set_allocated_debug_options(
    ::tensorflow::DebugOptions* debug_options) {
  if (GetArenaNoVirtual() == NULL) {
    delete debug_options_;
  }
  debug_options_ = debug_options;
  if (debug_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RegisterGraphRequest.debug_options)
}
void RegisterGraphRequest::_slow_mutable_config_proto() {
  config_proto_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::ConfigProto >(
      GetArenaNoVirtual());
}
::tensorflow::ConfigProto* RegisterGraphRequest::_slow_release_config_proto() {
  if (config_proto_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::ConfigProto* temp = new ::tensorflow::ConfigProto;
    temp->MergeFrom(*config_proto_);
    config_proto_ = NULL;
    return temp;
  }
}
::tensorflow::ConfigProto* RegisterGraphRequest::unsafe_arena_release_config_proto() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RegisterGraphRequest.config_proto)
  
  ::tensorflow::ConfigProto* temp = config_proto_;
  config_proto_ = NULL;
  return temp;
}
void RegisterGraphRequest::_slow_set_allocated_config_proto(
    ::google::protobuf::Arena* message_arena, ::tensorflow::ConfigProto** config_proto) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*config_proto) == NULL) {
      message_arena->Own(*config_proto);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*config_proto)) {
      ::tensorflow::ConfigProto* new_config_proto = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::ConfigProto >(
            message_arena);
      new_config_proto->CopyFrom(**config_proto);
      *config_proto = new_config_proto;
    }
}
void RegisterGraphRequest::unsafe_arena_set_allocated_config_proto(
    ::tensorflow::ConfigProto* config_proto) {
  if (GetArenaNoVirtual() == NULL) {
    delete config_proto_;
  }
  config_proto_ = config_proto;
  if (config_proto) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RegisterGraphRequest.config_proto)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterGraphRequest::kSessionHandleFieldNumber;
const int RegisterGraphRequest::kCreateWorkerSessionCalledFieldNumber;
const int RegisterGraphRequest::kGraphDefFieldNumber;
const int RegisterGraphRequest::kHasControlFlowFieldNumber;
const int RegisterGraphRequest::kGraphOptionsFieldNumber;
const int RegisterGraphRequest::kDebugOptionsFieldNumber;
const int RegisterGraphRequest::kCollectiveGraphKeyFieldNumber;
const int RegisterGraphRequest::kConfigProtoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterGraphRequest::RegisterGraphRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RegisterGraphRequest)
}

RegisterGraphRequest::RegisterGraphRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RegisterGraphRequest)
}

void RegisterGraphRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  graph_def_ = const_cast< ::tensorflow::GraphDef*>(&::tensorflow::GraphDef::default_instance());
  graph_options_ = const_cast< ::tensorflow::GraphOptions*>(&::tensorflow::GraphOptions::default_instance());
  debug_options_ = const_cast< ::tensorflow::DebugOptions*>(&::tensorflow::DebugOptions::default_instance());
  config_proto_ = const_cast< ::tensorflow::ConfigProto*>(&::tensorflow::ConfigProto::default_instance());
}

RegisterGraphRequest::RegisterGraphRequest(const RegisterGraphRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.RegisterGraphRequest)
}

void RegisterGraphRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  session_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  create_worker_session_called_ = false;
  graph_def_ = NULL;
  has_control_flow_ = false;
  graph_options_ = NULL;
  debug_options_ = NULL;
  collective_graph_key_ = GOOGLE_LONGLONG(0);
  config_proto_ = NULL;
}

RegisterGraphRequest::~RegisterGraphRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.RegisterGraphRequest)
  SharedDtor();
}

void RegisterGraphRequest::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  session_handle_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
    delete graph_def_;
    delete graph_options_;
    delete debug_options_;
    delete config_proto_;
  }
}

void RegisterGraphRequest::ArenaDtor(void* object) {
  RegisterGraphRequest* _this = reinterpret_cast< RegisterGraphRequest* >(object);
  (void)_this;
}
void RegisterGraphRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RegisterGraphRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterGraphRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterGraphRequest_descriptor_;
}

const RegisterGraphRequest& RegisterGraphRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fworker_2eproto();
  return *default_instance_;
}

RegisterGraphRequest* RegisterGraphRequest::default_instance_ = NULL;

RegisterGraphRequest* RegisterGraphRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RegisterGraphRequest>(arena);
}

void RegisterGraphRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RegisterGraphRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RegisterGraphRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RegisterGraphRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(create_worker_session_called_, has_control_flow_);
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && graph_def_ != NULL) delete graph_def_;
  graph_def_ = NULL;
  if (GetArenaNoVirtual() == NULL && graph_options_ != NULL) delete graph_options_;
  graph_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && debug_options_ != NULL) delete debug_options_;
  debug_options_ = NULL;
  collective_graph_key_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && config_proto_ != NULL) delete config_proto_;
  config_proto_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool RegisterGraphRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RegisterGraphRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string session_handle = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_handle().data(), this->session_handle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.RegisterGraphRequest.session_handle"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_graph_def;
        break;
      }

      // optional .tensorflow.GraphDef graph_def = 2;
      case 2: {
        if (tag == 18) {
         parse_graph_def:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_graph_def()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_has_control_flow;
        break;
      }

      // optional bool has_control_flow = 3 [deprecated = true];
      case 3: {
        if (tag == 24) {
         parse_has_control_flow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_control_flow_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_graph_options;
        break;
      }

      // optional .tensorflow.GraphOptions graph_options = 4;
      case 4: {
        if (tag == 34) {
         parse_graph_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_graph_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_debug_options;
        break;
      }

      // optional .tensorflow.DebugOptions debug_options = 5;
      case 5: {
        if (tag == 42) {
         parse_debug_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_debug_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_create_worker_session_called;
        break;
      }

      // optional bool create_worker_session_called = 6;
      case 6: {
        if (tag == 48) {
         parse_create_worker_session_called:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &create_worker_session_called_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_collective_graph_key;
        break;
      }

      // optional int64 collective_graph_key = 7;
      case 7: {
        if (tag == 56) {
         parse_collective_graph_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &collective_graph_key_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_config_proto;
        break;
      }

      // optional .tensorflow.ConfigProto config_proto = 8;
      case 8: {
        if (tag == 66) {
         parse_config_proto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config_proto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RegisterGraphRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RegisterGraphRequest)
  return false;
#undef DO_
}

void RegisterGraphRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RegisterGraphRequest)
  // optional string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RegisterGraphRequest.session_handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_handle(), output);
  }

  // optional .tensorflow.GraphDef graph_def = 2;
  if (this->has_graph_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->graph_def_, output);
  }

  // optional bool has_control_flow = 3 [deprecated = true];
  if (this->has_control_flow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->has_control_flow(), output);
  }

  // optional .tensorflow.GraphOptions graph_options = 4;
  if (this->has_graph_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->graph_options_, output);
  }

  // optional .tensorflow.DebugOptions debug_options = 5;
  if (this->has_debug_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->debug_options_, output);
  }

  // optional bool create_worker_session_called = 6;
  if (this->create_worker_session_called() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->create_worker_session_called(), output);
  }

  // optional int64 collective_graph_key = 7;
  if (this->collective_graph_key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->collective_graph_key(), output);
  }

  // optional .tensorflow.ConfigProto config_proto = 8;
  if (this->has_config_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->config_proto_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.RegisterGraphRequest)
}

::google::protobuf::uint8* RegisterGraphRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RegisterGraphRequest)
  // optional string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RegisterGraphRequest.session_handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session_handle(), target);
  }

  // optional .tensorflow.GraphDef graph_def = 2;
  if (this->has_graph_def()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->graph_def_, false, target);
  }

  // optional bool has_control_flow = 3 [deprecated = true];
  if (this->has_control_flow() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->has_control_flow(), target);
  }

  // optional .tensorflow.GraphOptions graph_options = 4;
  if (this->has_graph_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->graph_options_, false, target);
  }

  // optional .tensorflow.DebugOptions debug_options = 5;
  if (this->has_debug_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->debug_options_, false, target);
  }

  // optional bool create_worker_session_called = 6;
  if (this->create_worker_session_called() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->create_worker_session_called(), target);
  }

  // optional int64 collective_graph_key = 7;
  if (this->collective_graph_key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->collective_graph_key(), target);
  }

  // optional .tensorflow.ConfigProto config_proto = 8;
  if (this->has_config_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->config_proto_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RegisterGraphRequest)
  return target;
}

int RegisterGraphRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RegisterGraphRequest)
  int total_size = 0;

  // optional string session_handle = 1;
  if (this->session_handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_handle());
  }

  // optional bool create_worker_session_called = 6;
  if (this->create_worker_session_called() != 0) {
    total_size += 1 + 1;
  }

  // optional .tensorflow.GraphDef graph_def = 2;
  if (this->has_graph_def()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->graph_def_);
  }

  // optional bool has_control_flow = 3 [deprecated = true];
  if (this->has_control_flow() != 0) {
    total_size += 1 + 1;
  }

  // optional .tensorflow.GraphOptions graph_options = 4;
  if (this->has_graph_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->graph_options_);
  }

  // optional .tensorflow.DebugOptions debug_options = 5;
  if (this->has_debug_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->debug_options_);
  }

  // optional int64 collective_graph_key = 7;
  if (this->collective_graph_key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->collective_graph_key());
  }

  // optional .tensorflow.ConfigProto config_proto = 8;
  if (this->has_config_proto()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_proto_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterGraphRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RegisterGraphRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RegisterGraphRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterGraphRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RegisterGraphRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RegisterGraphRequest)
    MergeFrom(*source);
  }
}

void RegisterGraphRequest::MergeFrom(const RegisterGraphRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RegisterGraphRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.session_handle().size() > 0) {
    set_session_handle(from.session_handle());
  }
  if (from.create_worker_session_called() != 0) {
    set_create_worker_session_called(from.create_worker_session_called());
  }
  if (from.has_graph_def()) {
    mutable_graph_def()->::tensorflow::GraphDef::MergeFrom(from.graph_def());
  }
  if (from.has_control_flow() != 0) {
    set_has_control_flow(from.has_control_flow());
  }
  if (from.has_graph_options()) {
    mutable_graph_options()->::tensorflow::GraphOptions::MergeFrom(from.graph_options());
  }
  if (from.has_debug_options()) {
    mutable_debug_options()->::tensorflow::DebugOptions::MergeFrom(from.debug_options());
  }
  if (from.collective_graph_key() != 0) {
    set_collective_graph_key(from.collective_graph_key());
  }
  if (from.has_config_proto()) {
    mutable_config_proto()->::tensorflow::ConfigProto::MergeFrom(from.config_proto());
  }
}

void RegisterGraphRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RegisterGraphRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterGraphRequest::CopyFrom(const RegisterGraphRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RegisterGraphRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterGraphRequest::IsInitialized() const {

  return true;
}

void RegisterGraphRequest::Swap(RegisterGraphRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RegisterGraphRequest temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void RegisterGraphRequest::UnsafeArenaSwap(RegisterGraphRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RegisterGraphRequest::InternalSwap(RegisterGraphRequest* other) {
  session_handle_.Swap(&other->session_handle_);
  std::swap(create_worker_session_called_, other->create_worker_session_called_);
  std::swap(graph_def_, other->graph_def_);
  std::swap(has_control_flow_, other->has_control_flow_);
  std::swap(graph_options_, other->graph_options_);
  std::swap(debug_options_, other->debug_options_);
  std::swap(collective_graph_key_, other->collective_graph_key_);
  std::swap(config_proto_, other->config_proto_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegisterGraphRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterGraphRequest_descriptor_;
  metadata.reflection = RegisterGraphRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterGraphRequest

// optional string session_handle = 1;
void RegisterGraphRequest::clear_session_handle() {
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& RegisterGraphRequest::session_handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.RegisterGraphRequest.session_handle)
  return session_handle_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterGraphRequest::set_session_handle(const ::std::string& value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.RegisterGraphRequest.session_handle)
}
 void RegisterGraphRequest::set_session_handle(const char* value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.RegisterGraphRequest.session_handle)
}
 void RegisterGraphRequest::set_session_handle(const char* value,
    size_t size) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.RegisterGraphRequest.session_handle)
}
 ::std::string* RegisterGraphRequest::mutable_session_handle() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.RegisterGraphRequest.session_handle)
  return session_handle_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* RegisterGraphRequest::release_session_handle() {
  // @@protoc_insertion_point(field_release:tensorflow.RegisterGraphRequest.session_handle)
  
  return session_handle_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* RegisterGraphRequest::unsafe_arena_release_session_handle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RegisterGraphRequest.session_handle)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return session_handle_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void RegisterGraphRequest::set_allocated_session_handle(::std::string* session_handle) {
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_handle,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RegisterGraphRequest.session_handle)
}
 void RegisterGraphRequest::unsafe_arena_set_allocated_session_handle(
    ::std::string* session_handle) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      session_handle, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RegisterGraphRequest.session_handle)
}

// optional bool create_worker_session_called = 6;
void RegisterGraphRequest::clear_create_worker_session_called() {
  create_worker_session_called_ = false;
}
 bool RegisterGraphRequest::create_worker_session_called() const {
  // @@protoc_insertion_point(field_get:tensorflow.RegisterGraphRequest.create_worker_session_called)
  return create_worker_session_called_;
}
 void RegisterGraphRequest::set_create_worker_session_called(bool value) {
  
  create_worker_session_called_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RegisterGraphRequest.create_worker_session_called)
}

// optional .tensorflow.GraphDef graph_def = 2;
bool RegisterGraphRequest::has_graph_def() const {
  return !_is_default_instance_ && graph_def_ != NULL;
}
void RegisterGraphRequest::clear_graph_def() {
  if (GetArenaNoVirtual() == NULL && graph_def_ != NULL) delete graph_def_;
  graph_def_ = NULL;
}
const ::tensorflow::GraphDef& RegisterGraphRequest::graph_def() const {
  // @@protoc_insertion_point(field_get:tensorflow.RegisterGraphRequest.graph_def)
  return graph_def_ != NULL ? *graph_def_ : *default_instance_->graph_def_;
}
::tensorflow::GraphDef* RegisterGraphRequest::mutable_graph_def() {
  
  if (graph_def_ == NULL) {
    _slow_mutable_graph_def();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RegisterGraphRequest.graph_def)
  return graph_def_;
}
::tensorflow::GraphDef* RegisterGraphRequest::release_graph_def() {
  // @@protoc_insertion_point(field_release:tensorflow.RegisterGraphRequest.graph_def)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_graph_def();
  } else {
    ::tensorflow::GraphDef* temp = graph_def_;
    graph_def_ = NULL;
    return temp;
  }
}
 void RegisterGraphRequest::set_allocated_graph_def(::tensorflow::GraphDef* graph_def) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete graph_def_;
  }
  if (graph_def != NULL) {
    _slow_set_allocated_graph_def(message_arena, &graph_def);
  }
  graph_def_ = graph_def;
  if (graph_def) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RegisterGraphRequest.graph_def)
}

// optional bool has_control_flow = 3 [deprecated = true];
void RegisterGraphRequest::clear_has_control_flow() {
  has_control_flow_ = false;
}
 bool RegisterGraphRequest::has_control_flow() const {
  // @@protoc_insertion_point(field_get:tensorflow.RegisterGraphRequest.has_control_flow)
  return has_control_flow_;
}
 void RegisterGraphRequest::set_has_control_flow(bool value) {
  
  has_control_flow_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RegisterGraphRequest.has_control_flow)
}

// optional .tensorflow.GraphOptions graph_options = 4;
bool RegisterGraphRequest::has_graph_options() const {
  return !_is_default_instance_ && graph_options_ != NULL;
}
void RegisterGraphRequest::clear_graph_options() {
  if (GetArenaNoVirtual() == NULL && graph_options_ != NULL) delete graph_options_;
  graph_options_ = NULL;
}
const ::tensorflow::GraphOptions& RegisterGraphRequest::graph_options() const {
  // @@protoc_insertion_point(field_get:tensorflow.RegisterGraphRequest.graph_options)
  return graph_options_ != NULL ? *graph_options_ : *default_instance_->graph_options_;
}
::tensorflow::GraphOptions* RegisterGraphRequest::mutable_graph_options() {
  
  if (graph_options_ == NULL) {
    _slow_mutable_graph_options();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RegisterGraphRequest.graph_options)
  return graph_options_;
}
::tensorflow::GraphOptions* RegisterGraphRequest::release_graph_options() {
  // @@protoc_insertion_point(field_release:tensorflow.RegisterGraphRequest.graph_options)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_graph_options();
  } else {
    ::tensorflow::GraphOptions* temp = graph_options_;
    graph_options_ = NULL;
    return temp;
  }
}
 void RegisterGraphRequest::set_allocated_graph_options(::tensorflow::GraphOptions* graph_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete graph_options_;
  }
  if (graph_options != NULL) {
    _slow_set_allocated_graph_options(message_arena, &graph_options);
  }
  graph_options_ = graph_options;
  if (graph_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RegisterGraphRequest.graph_options)
}

// optional .tensorflow.DebugOptions debug_options = 5;
bool RegisterGraphRequest::has_debug_options() const {
  return !_is_default_instance_ && debug_options_ != NULL;
}
void RegisterGraphRequest::clear_debug_options() {
  if (GetArenaNoVirtual() == NULL && debug_options_ != NULL) delete debug_options_;
  debug_options_ = NULL;
}
const ::tensorflow::DebugOptions& RegisterGraphRequest::debug_options() const {
  // @@protoc_insertion_point(field_get:tensorflow.RegisterGraphRequest.debug_options)
  return debug_options_ != NULL ? *debug_options_ : *default_instance_->debug_options_;
}
::tensorflow::DebugOptions* RegisterGraphRequest::mutable_debug_options() {
  
  if (debug_options_ == NULL) {
    _slow_mutable_debug_options();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RegisterGraphRequest.debug_options)
  return debug_options_;
}
::tensorflow::DebugOptions* RegisterGraphRequest::release_debug_options() {
  // @@protoc_insertion_point(field_release:tensorflow.RegisterGraphRequest.debug_options)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_debug_options();
  } else {
    ::tensorflow::DebugOptions* temp = debug_options_;
    debug_options_ = NULL;
    return temp;
  }
}
 void RegisterGraphRequest::set_allocated_debug_options(::tensorflow::DebugOptions* debug_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete debug_options_;
  }
  if (debug_options != NULL) {
    _slow_set_allocated_debug_options(message_arena, &debug_options);
  }
  debug_options_ = debug_options;
  if (debug_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RegisterGraphRequest.debug_options)
}

// optional int64 collective_graph_key = 7;
void RegisterGraphRequest::clear_collective_graph_key() {
  collective_graph_key_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RegisterGraphRequest::collective_graph_key() const {
  // @@protoc_insertion_point(field_get:tensorflow.RegisterGraphRequest.collective_graph_key)
  return collective_graph_key_;
}
 void RegisterGraphRequest::set_collective_graph_key(::google::protobuf::int64 value) {
  
  collective_graph_key_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RegisterGraphRequest.collective_graph_key)
}

// optional .tensorflow.ConfigProto config_proto = 8;
bool RegisterGraphRequest::has_config_proto() const {
  return !_is_default_instance_ && config_proto_ != NULL;
}
void RegisterGraphRequest::clear_config_proto() {
  if (GetArenaNoVirtual() == NULL && config_proto_ != NULL) delete config_proto_;
  config_proto_ = NULL;
}
const ::tensorflow::ConfigProto& RegisterGraphRequest::config_proto() const {
  // @@protoc_insertion_point(field_get:tensorflow.RegisterGraphRequest.config_proto)
  return config_proto_ != NULL ? *config_proto_ : *default_instance_->config_proto_;
}
::tensorflow::ConfigProto* RegisterGraphRequest::mutable_config_proto() {
  
  if (config_proto_ == NULL) {
    _slow_mutable_config_proto();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RegisterGraphRequest.config_proto)
  return config_proto_;
}
::tensorflow::ConfigProto* RegisterGraphRequest::release_config_proto() {
  // @@protoc_insertion_point(field_release:tensorflow.RegisterGraphRequest.config_proto)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_config_proto();
  } else {
    ::tensorflow::ConfigProto* temp = config_proto_;
    config_proto_ = NULL;
    return temp;
  }
}
 void RegisterGraphRequest::set_allocated_config_proto(::tensorflow::ConfigProto* config_proto) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_proto_;
  }
  if (config_proto != NULL) {
    _slow_set_allocated_config_proto(message_arena, &config_proto);
  }
  config_proto_ = config_proto;
  if (config_proto) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RegisterGraphRequest.config_proto)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterGraphResponse::kGraphHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterGraphResponse::RegisterGraphResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RegisterGraphResponse)
}

RegisterGraphResponse::RegisterGraphResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RegisterGraphResponse)
}

void RegisterGraphResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RegisterGraphResponse::RegisterGraphResponse(const RegisterGraphResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.RegisterGraphResponse)
}

void RegisterGraphResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  graph_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RegisterGraphResponse::~RegisterGraphResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.RegisterGraphResponse)
  SharedDtor();
}

void RegisterGraphResponse::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  graph_handle_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void RegisterGraphResponse::ArenaDtor(void* object) {
  RegisterGraphResponse* _this = reinterpret_cast< RegisterGraphResponse* >(object);
  (void)_this;
}
void RegisterGraphResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RegisterGraphResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterGraphResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterGraphResponse_descriptor_;
}

const RegisterGraphResponse& RegisterGraphResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fworker_2eproto();
  return *default_instance_;
}

RegisterGraphResponse* RegisterGraphResponse::default_instance_ = NULL;

RegisterGraphResponse* RegisterGraphResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RegisterGraphResponse>(arena);
}

void RegisterGraphResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RegisterGraphResponse)
  graph_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool RegisterGraphResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RegisterGraphResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string graph_handle = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_graph_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->graph_handle().data(), this->graph_handle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.RegisterGraphResponse.graph_handle"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RegisterGraphResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RegisterGraphResponse)
  return false;
#undef DO_
}

void RegisterGraphResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RegisterGraphResponse)
  // optional string graph_handle = 1;
  if (this->graph_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->graph_handle().data(), this->graph_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RegisterGraphResponse.graph_handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->graph_handle(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.RegisterGraphResponse)
}

::google::protobuf::uint8* RegisterGraphResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RegisterGraphResponse)
  // optional string graph_handle = 1;
  if (this->graph_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->graph_handle().data(), this->graph_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RegisterGraphResponse.graph_handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->graph_handle(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RegisterGraphResponse)
  return target;
}

int RegisterGraphResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RegisterGraphResponse)
  int total_size = 0;

  // optional string graph_handle = 1;
  if (this->graph_handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->graph_handle());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterGraphResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RegisterGraphResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RegisterGraphResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterGraphResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RegisterGraphResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RegisterGraphResponse)
    MergeFrom(*source);
  }
}

void RegisterGraphResponse::MergeFrom(const RegisterGraphResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RegisterGraphResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.graph_handle().size() > 0) {
    set_graph_handle(from.graph_handle());
  }
}

void RegisterGraphResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RegisterGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterGraphResponse::CopyFrom(const RegisterGraphResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RegisterGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterGraphResponse::IsInitialized() const {

  return true;
}

void RegisterGraphResponse::Swap(RegisterGraphResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RegisterGraphResponse temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void RegisterGraphResponse::UnsafeArenaSwap(RegisterGraphResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RegisterGraphResponse::InternalSwap(RegisterGraphResponse* other) {
  graph_handle_.Swap(&other->graph_handle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegisterGraphResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterGraphResponse_descriptor_;
  metadata.reflection = RegisterGraphResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterGraphResponse

// optional string graph_handle = 1;
void RegisterGraphResponse::clear_graph_handle() {
  graph_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& RegisterGraphResponse::graph_handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.RegisterGraphResponse.graph_handle)
  return graph_handle_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterGraphResponse::set_graph_handle(const ::std::string& value) {
  
  graph_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.RegisterGraphResponse.graph_handle)
}
 void RegisterGraphResponse::set_graph_handle(const char* value) {
  
  graph_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.RegisterGraphResponse.graph_handle)
}
 void RegisterGraphResponse::set_graph_handle(const char* value,
    size_t size) {
  
  graph_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.RegisterGraphResponse.graph_handle)
}
 ::std::string* RegisterGraphResponse::mutable_graph_handle() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.RegisterGraphResponse.graph_handle)
  return graph_handle_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* RegisterGraphResponse::release_graph_handle() {
  // @@protoc_insertion_point(field_release:tensorflow.RegisterGraphResponse.graph_handle)
  
  return graph_handle_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* RegisterGraphResponse::unsafe_arena_release_graph_handle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RegisterGraphResponse.graph_handle)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return graph_handle_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void RegisterGraphResponse::set_allocated_graph_handle(::std::string* graph_handle) {
  if (graph_handle != NULL) {
    
  } else {
    
  }
  graph_handle_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), graph_handle,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RegisterGraphResponse.graph_handle)
}
 void RegisterGraphResponse::unsafe_arena_set_allocated_graph_handle(
    ::std::string* graph_handle) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (graph_handle != NULL) {
    
  } else {
    
  }
  graph_handle_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      graph_handle, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RegisterGraphResponse.graph_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeregisterGraphRequest::kSessionHandleFieldNumber;
const int DeregisterGraphRequest::kCreateWorkerSessionCalledFieldNumber;
const int DeregisterGraphRequest::kGraphHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeregisterGraphRequest::DeregisterGraphRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.DeregisterGraphRequest)
}

DeregisterGraphRequest::DeregisterGraphRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DeregisterGraphRequest)
}

void DeregisterGraphRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DeregisterGraphRequest::DeregisterGraphRequest(const DeregisterGraphRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.DeregisterGraphRequest)
}

void DeregisterGraphRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  session_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  create_worker_session_called_ = false;
  graph_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DeregisterGraphRequest::~DeregisterGraphRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.DeregisterGraphRequest)
  SharedDtor();
}

void DeregisterGraphRequest::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  session_handle_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  graph_handle_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void DeregisterGraphRequest::ArenaDtor(void* object) {
  DeregisterGraphRequest* _this = reinterpret_cast< DeregisterGraphRequest* >(object);
  (void)_this;
}
void DeregisterGraphRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DeregisterGraphRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeregisterGraphRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeregisterGraphRequest_descriptor_;
}

const DeregisterGraphRequest& DeregisterGraphRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fworker_2eproto();
  return *default_instance_;
}

DeregisterGraphRequest* DeregisterGraphRequest::default_instance_ = NULL;

DeregisterGraphRequest* DeregisterGraphRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DeregisterGraphRequest>(arena);
}

void DeregisterGraphRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DeregisterGraphRequest)
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  create_worker_session_called_ = false;
  graph_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool DeregisterGraphRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.DeregisterGraphRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string graph_handle = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_graph_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->graph_handle().data(), this->graph_handle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.DeregisterGraphRequest.graph_handle"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_session_handle;
        break;
      }

      // optional string session_handle = 2;
      case 2: {
        if (tag == 18) {
         parse_session_handle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_handle().data(), this->session_handle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.DeregisterGraphRequest.session_handle"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_create_worker_session_called;
        break;
      }

      // optional bool create_worker_session_called = 3;
      case 3: {
        if (tag == 24) {
         parse_create_worker_session_called:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &create_worker_session_called_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.DeregisterGraphRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.DeregisterGraphRequest)
  return false;
#undef DO_
}

void DeregisterGraphRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.DeregisterGraphRequest)
  // optional string graph_handle = 1;
  if (this->graph_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->graph_handle().data(), this->graph_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeregisterGraphRequest.graph_handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->graph_handle(), output);
  }

  // optional string session_handle = 2;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeregisterGraphRequest.session_handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session_handle(), output);
  }

  // optional bool create_worker_session_called = 3;
  if (this->create_worker_session_called() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->create_worker_session_called(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.DeregisterGraphRequest)
}

::google::protobuf::uint8* DeregisterGraphRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DeregisterGraphRequest)
  // optional string graph_handle = 1;
  if (this->graph_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->graph_handle().data(), this->graph_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeregisterGraphRequest.graph_handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->graph_handle(), target);
  }

  // optional string session_handle = 2;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeregisterGraphRequest.session_handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_handle(), target);
  }

  // optional bool create_worker_session_called = 3;
  if (this->create_worker_session_called() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->create_worker_session_called(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DeregisterGraphRequest)
  return target;
}

int DeregisterGraphRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DeregisterGraphRequest)
  int total_size = 0;

  // optional string session_handle = 2;
  if (this->session_handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_handle());
  }

  // optional bool create_worker_session_called = 3;
  if (this->create_worker_session_called() != 0) {
    total_size += 1 + 1;
  }

  // optional string graph_handle = 1;
  if (this->graph_handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->graph_handle());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeregisterGraphRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.DeregisterGraphRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DeregisterGraphRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DeregisterGraphRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.DeregisterGraphRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.DeregisterGraphRequest)
    MergeFrom(*source);
  }
}

void DeregisterGraphRequest::MergeFrom(const DeregisterGraphRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DeregisterGraphRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.session_handle().size() > 0) {
    set_session_handle(from.session_handle());
  }
  if (from.create_worker_session_called() != 0) {
    set_create_worker_session_called(from.create_worker_session_called());
  }
  if (from.graph_handle().size() > 0) {
    set_graph_handle(from.graph_handle());
  }
}

void DeregisterGraphRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.DeregisterGraphRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeregisterGraphRequest::CopyFrom(const DeregisterGraphRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DeregisterGraphRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeregisterGraphRequest::IsInitialized() const {

  return true;
}

void DeregisterGraphRequest::Swap(DeregisterGraphRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DeregisterGraphRequest temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void DeregisterGraphRequest::UnsafeArenaSwap(DeregisterGraphRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DeregisterGraphRequest::InternalSwap(DeregisterGraphRequest* other) {
  session_handle_.Swap(&other->session_handle_);
  std::swap(create_worker_session_called_, other->create_worker_session_called_);
  graph_handle_.Swap(&other->graph_handle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeregisterGraphRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeregisterGraphRequest_descriptor_;
  metadata.reflection = DeregisterGraphRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeregisterGraphRequest

// optional string session_handle = 2;
void DeregisterGraphRequest::clear_session_handle() {
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& DeregisterGraphRequest::session_handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeregisterGraphRequest.session_handle)
  return session_handle_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeregisterGraphRequest::set_session_handle(const ::std::string& value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.DeregisterGraphRequest.session_handle)
}
 void DeregisterGraphRequest::set_session_handle(const char* value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.DeregisterGraphRequest.session_handle)
}
 void DeregisterGraphRequest::set_session_handle(const char* value,
    size_t size) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.DeregisterGraphRequest.session_handle)
}
 ::std::string* DeregisterGraphRequest::mutable_session_handle() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.DeregisterGraphRequest.session_handle)
  return session_handle_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* DeregisterGraphRequest::release_session_handle() {
  // @@protoc_insertion_point(field_release:tensorflow.DeregisterGraphRequest.session_handle)
  
  return session_handle_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* DeregisterGraphRequest::unsafe_arena_release_session_handle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.DeregisterGraphRequest.session_handle)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return session_handle_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void DeregisterGraphRequest::set_allocated_session_handle(::std::string* session_handle) {
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_handle,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DeregisterGraphRequest.session_handle)
}
 void DeregisterGraphRequest::unsafe_arena_set_allocated_session_handle(
    ::std::string* session_handle) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      session_handle, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.DeregisterGraphRequest.session_handle)
}

// optional bool create_worker_session_called = 3;
void DeregisterGraphRequest::clear_create_worker_session_called() {
  create_worker_session_called_ = false;
}
 bool DeregisterGraphRequest::create_worker_session_called() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeregisterGraphRequest.create_worker_session_called)
  return create_worker_session_called_;
}
 void DeregisterGraphRequest::set_create_worker_session_called(bool value) {
  
  create_worker_session_called_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.DeregisterGraphRequest.create_worker_session_called)
}

// optional string graph_handle = 1;
void DeregisterGraphRequest::clear_graph_handle() {
  graph_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& DeregisterGraphRequest::graph_handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeregisterGraphRequest.graph_handle)
  return graph_handle_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeregisterGraphRequest::set_graph_handle(const ::std::string& value) {
  
  graph_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.DeregisterGraphRequest.graph_handle)
}
 void DeregisterGraphRequest::set_graph_handle(const char* value) {
  
  graph_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.DeregisterGraphRequest.graph_handle)
}
 void DeregisterGraphRequest::set_graph_handle(const char* value,
    size_t size) {
  
  graph_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.DeregisterGraphRequest.graph_handle)
}
 ::std::string* DeregisterGraphRequest::mutable_graph_handle() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.DeregisterGraphRequest.graph_handle)
  return graph_handle_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* DeregisterGraphRequest::release_graph_handle() {
  // @@protoc_insertion_point(field_release:tensorflow.DeregisterGraphRequest.graph_handle)
  
  return graph_handle_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* DeregisterGraphRequest::unsafe_arena_release_graph_handle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.DeregisterGraphRequest.graph_handle)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return graph_handle_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void DeregisterGraphRequest::set_allocated_graph_handle(::std::string* graph_handle) {
  if (graph_handle != NULL) {
    
  } else {
    
  }
  graph_handle_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), graph_handle,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DeregisterGraphRequest.graph_handle)
}
 void DeregisterGraphRequest::unsafe_arena_set_allocated_graph_handle(
    ::std::string* graph_handle) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (graph_handle != NULL) {
    
  } else {
    
  }
  graph_handle_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      graph_handle, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.DeregisterGraphRequest.graph_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeregisterGraphResponse::DeregisterGraphResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.DeregisterGraphResponse)
}

DeregisterGraphResponse::DeregisterGraphResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DeregisterGraphResponse)
}

void DeregisterGraphResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DeregisterGraphResponse::DeregisterGraphResponse(const DeregisterGraphResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.DeregisterGraphResponse)
}

void DeregisterGraphResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

DeregisterGraphResponse::~DeregisterGraphResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.DeregisterGraphResponse)
  SharedDtor();
}

void DeregisterGraphResponse::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void DeregisterGraphResponse::ArenaDtor(void* object) {
  DeregisterGraphResponse* _this = reinterpret_cast< DeregisterGraphResponse* >(object);
  (void)_this;
}
void DeregisterGraphResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DeregisterGraphResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeregisterGraphResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeregisterGraphResponse_descriptor_;
}

const DeregisterGraphResponse& DeregisterGraphResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fworker_2eproto();
  return *default_instance_;
}

DeregisterGraphResponse* DeregisterGraphResponse::default_instance_ = NULL;

DeregisterGraphResponse* DeregisterGraphResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DeregisterGraphResponse>(arena);
}

void DeregisterGraphResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DeregisterGraphResponse)
}

bool DeregisterGraphResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.DeregisterGraphResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.DeregisterGraphResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.DeregisterGraphResponse)
  return false;
#undef DO_
}

void DeregisterGraphResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.DeregisterGraphResponse)
  // @@protoc_insertion_point(serialize_end:tensorflow.DeregisterGraphResponse)
}

::google::protobuf::uint8* DeregisterGraphResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DeregisterGraphResponse)
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DeregisterGraphResponse)
  return target;
}

int DeregisterGraphResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DeregisterGraphResponse)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeregisterGraphResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.DeregisterGraphResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DeregisterGraphResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DeregisterGraphResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.DeregisterGraphResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.DeregisterGraphResponse)
    MergeFrom(*source);
  }
}

void DeregisterGraphResponse::MergeFrom(const DeregisterGraphResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DeregisterGraphResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void DeregisterGraphResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.DeregisterGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeregisterGraphResponse::CopyFrom(const DeregisterGraphResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DeregisterGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeregisterGraphResponse::IsInitialized() const {

  return true;
}

void DeregisterGraphResponse::Swap(DeregisterGraphResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DeregisterGraphResponse temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void DeregisterGraphResponse::UnsafeArenaSwap(DeregisterGraphResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DeregisterGraphResponse::InternalSwap(DeregisterGraphResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeregisterGraphResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeregisterGraphResponse_descriptor_;
  metadata.reflection = DeregisterGraphResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeregisterGraphResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CleanupAllRequest::kContainerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CleanupAllRequest::CleanupAllRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CleanupAllRequest)
}

CleanupAllRequest::CleanupAllRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  container_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CleanupAllRequest)
}

void CleanupAllRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CleanupAllRequest::CleanupAllRequest(const CleanupAllRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.CleanupAllRequest)
}

void CleanupAllRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
}

CleanupAllRequest::~CleanupAllRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.CleanupAllRequest)
  SharedDtor();
}

void CleanupAllRequest::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void CleanupAllRequest::ArenaDtor(void* object) {
  CleanupAllRequest* _this = reinterpret_cast< CleanupAllRequest* >(object);
  (void)_this;
}
void CleanupAllRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CleanupAllRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CleanupAllRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CleanupAllRequest_descriptor_;
}

const CleanupAllRequest& CleanupAllRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fworker_2eproto();
  return *default_instance_;
}

CleanupAllRequest* CleanupAllRequest::default_instance_ = NULL;

CleanupAllRequest* CleanupAllRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CleanupAllRequest>(arena);
}

void CleanupAllRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CleanupAllRequest)
  container_.Clear();
}

bool CleanupAllRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CleanupAllRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string container = 1;
      case 1: {
        if (tag == 10) {
         parse_container:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_container()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->container(this->container_size() - 1).data(),
            this->container(this->container_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.CleanupAllRequest.container"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_container;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CleanupAllRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CleanupAllRequest)
  return false;
#undef DO_
}

void CleanupAllRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CleanupAllRequest)
  // repeated string container = 1;
  for (int i = 0; i < this->container_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->container(i).data(), this->container(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CleanupAllRequest.container");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->container(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.CleanupAllRequest)
}

::google::protobuf::uint8* CleanupAllRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CleanupAllRequest)
  // repeated string container = 1;
  for (int i = 0; i < this->container_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->container(i).data(), this->container(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CleanupAllRequest.container");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->container(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CleanupAllRequest)
  return target;
}

int CleanupAllRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CleanupAllRequest)
  int total_size = 0;

  // repeated string container = 1;
  total_size += 1 * this->container_size();
  for (int i = 0; i < this->container_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->container(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CleanupAllRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CleanupAllRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CleanupAllRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CleanupAllRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CleanupAllRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CleanupAllRequest)
    MergeFrom(*source);
  }
}

void CleanupAllRequest::MergeFrom(const CleanupAllRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CleanupAllRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  container_.MergeFrom(from.container_);
}

void CleanupAllRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CleanupAllRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CleanupAllRequest::CopyFrom(const CleanupAllRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CleanupAllRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanupAllRequest::IsInitialized() const {

  return true;
}

void CleanupAllRequest::Swap(CleanupAllRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CleanupAllRequest temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void CleanupAllRequest::UnsafeArenaSwap(CleanupAllRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CleanupAllRequest::InternalSwap(CleanupAllRequest* other) {
  container_.UnsafeArenaSwap(&other->container_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CleanupAllRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CleanupAllRequest_descriptor_;
  metadata.reflection = CleanupAllRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CleanupAllRequest

// repeated string container = 1;
int CleanupAllRequest::container_size() const {
  return container_.size();
}
void CleanupAllRequest::clear_container() {
  container_.Clear();
}
 const ::std::string& CleanupAllRequest::container(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.CleanupAllRequest.container)
  return container_.Get(index);
}
 ::std::string* CleanupAllRequest::mutable_container(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.CleanupAllRequest.container)
  return container_.Mutable(index);
}
 void CleanupAllRequest::set_container(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.CleanupAllRequest.container)
  container_.Mutable(index)->assign(value);
}
 void CleanupAllRequest::set_container(int index, const char* value) {
  container_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.CleanupAllRequest.container)
}
 void CleanupAllRequest::set_container(int index, const char* value, size_t size) {
  container_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.CleanupAllRequest.container)
}
 ::std::string* CleanupAllRequest::add_container() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.CleanupAllRequest.container)
  return container_.Add();
}
 void CleanupAllRequest::add_container(const ::std::string& value) {
  container_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.CleanupAllRequest.container)
}
 void CleanupAllRequest::add_container(const char* value) {
  container_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.CleanupAllRequest.container)
}
 void CleanupAllRequest::add_container(const char* value, size_t size) {
  container_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.CleanupAllRequest.container)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
CleanupAllRequest::container() const {
  // @@protoc_insertion_point(field_list:tensorflow.CleanupAllRequest.container)
  return container_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
CleanupAllRequest::mutable_container() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.CleanupAllRequest.container)
  return &container_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CleanupAllResponse::CleanupAllResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CleanupAllResponse)
}

CleanupAllResponse::CleanupAllResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CleanupAllResponse)
}

void CleanupAllResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CleanupAllResponse::CleanupAllResponse(const CleanupAllResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.CleanupAllResponse)
}

void CleanupAllResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

CleanupAllResponse::~CleanupAllResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.CleanupAllResponse)
  SharedDtor();
}

void CleanupAllResponse::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void CleanupAllResponse::ArenaDtor(void* object) {
  CleanupAllResponse* _this = reinterpret_cast< CleanupAllResponse* >(object);
  (void)_this;
}
void CleanupAllResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CleanupAllResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CleanupAllResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CleanupAllResponse_descriptor_;
}

const CleanupAllResponse& CleanupAllResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fworker_2eproto();
  return *default_instance_;
}

CleanupAllResponse* CleanupAllResponse::default_instance_ = NULL;

CleanupAllResponse* CleanupAllResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CleanupAllResponse>(arena);
}

void CleanupAllResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CleanupAllResponse)
}

bool CleanupAllResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CleanupAllResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CleanupAllResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CleanupAllResponse)
  return false;
#undef DO_
}

void CleanupAllResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CleanupAllResponse)
  // @@protoc_insertion_point(serialize_end:tensorflow.CleanupAllResponse)
}

::google::protobuf::uint8* CleanupAllResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CleanupAllResponse)
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CleanupAllResponse)
  return target;
}

int CleanupAllResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CleanupAllResponse)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CleanupAllResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CleanupAllResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CleanupAllResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CleanupAllResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CleanupAllResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CleanupAllResponse)
    MergeFrom(*source);
  }
}

void CleanupAllResponse::MergeFrom(const CleanupAllResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CleanupAllResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void CleanupAllResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CleanupAllResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CleanupAllResponse::CopyFrom(const CleanupAllResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CleanupAllResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanupAllResponse::IsInitialized() const {

  return true;
}

void CleanupAllResponse::Swap(CleanupAllResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CleanupAllResponse temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void CleanupAllResponse::UnsafeArenaSwap(CleanupAllResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CleanupAllResponse::InternalSwap(CleanupAllResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CleanupAllResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CleanupAllResponse_descriptor_;
  metadata.reflection = CleanupAllResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CleanupAllResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecutorOpts::kRecordCostsFieldNumber;
const int ExecutorOpts::kRecordTimelineFieldNumber;
const int ExecutorOpts::kRecordPartitionGraphsFieldNumber;
const int ExecutorOpts::kReportTensorAllocationsUponOomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecutorOpts::ExecutorOpts()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ExecutorOpts)
}

ExecutorOpts::ExecutorOpts(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ExecutorOpts)
}

void ExecutorOpts::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ExecutorOpts::ExecutorOpts(const ExecutorOpts& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.ExecutorOpts)
}

void ExecutorOpts::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  record_costs_ = false;
  record_timeline_ = false;
  record_partition_graphs_ = false;
  report_tensor_allocations_upon_oom_ = false;
}

ExecutorOpts::~ExecutorOpts() {
  // @@protoc_insertion_point(destructor:tensorflow.ExecutorOpts)
  SharedDtor();
}

void ExecutorOpts::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void ExecutorOpts::ArenaDtor(void* object) {
  ExecutorOpts* _this = reinterpret_cast< ExecutorOpts* >(object);
  (void)_this;
}
void ExecutorOpts::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ExecutorOpts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecutorOpts::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecutorOpts_descriptor_;
}

const ExecutorOpts& ExecutorOpts::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fworker_2eproto();
  return *default_instance_;
}

ExecutorOpts* ExecutorOpts::default_instance_ = NULL;

ExecutorOpts* ExecutorOpts::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ExecutorOpts>(arena);
}

void ExecutorOpts::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ExecutorOpts)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ExecutorOpts, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ExecutorOpts*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(record_costs_, report_tensor_allocations_upon_oom_);

#undef ZR_HELPER_
#undef ZR_

}

bool ExecutorOpts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.ExecutorOpts)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool record_costs = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &record_costs_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_record_timeline;
        break;
      }

      // optional bool record_timeline = 3;
      case 3: {
        if (tag == 24) {
         parse_record_timeline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &record_timeline_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_record_partition_graphs;
        break;
      }

      // optional bool record_partition_graphs = 4;
      case 4: {
        if (tag == 32) {
         parse_record_partition_graphs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &record_partition_graphs_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_report_tensor_allocations_upon_oom;
        break;
      }

      // optional bool report_tensor_allocations_upon_oom = 5;
      case 5: {
        if (tag == 40) {
         parse_report_tensor_allocations_upon_oom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &report_tensor_allocations_upon_oom_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.ExecutorOpts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.ExecutorOpts)
  return false;
#undef DO_
}

void ExecutorOpts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.ExecutorOpts)
  // optional bool record_costs = 1;
  if (this->record_costs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->record_costs(), output);
  }

  // optional bool record_timeline = 3;
  if (this->record_timeline() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->record_timeline(), output);
  }

  // optional bool record_partition_graphs = 4;
  if (this->record_partition_graphs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->record_partition_graphs(), output);
  }

  // optional bool report_tensor_allocations_upon_oom = 5;
  if (this->report_tensor_allocations_upon_oom() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->report_tensor_allocations_upon_oom(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.ExecutorOpts)
}

::google::protobuf::uint8* ExecutorOpts::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ExecutorOpts)
  // optional bool record_costs = 1;
  if (this->record_costs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->record_costs(), target);
  }

  // optional bool record_timeline = 3;
  if (this->record_timeline() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->record_timeline(), target);
  }

  // optional bool record_partition_graphs = 4;
  if (this->record_partition_graphs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->record_partition_graphs(), target);
  }

  // optional bool report_tensor_allocations_upon_oom = 5;
  if (this->report_tensor_allocations_upon_oom() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->report_tensor_allocations_upon_oom(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ExecutorOpts)
  return target;
}

int ExecutorOpts::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ExecutorOpts)
  int total_size = 0;

  // optional bool record_costs = 1;
  if (this->record_costs() != 0) {
    total_size += 1 + 1;
  }

  // optional bool record_timeline = 3;
  if (this->record_timeline() != 0) {
    total_size += 1 + 1;
  }

  // optional bool record_partition_graphs = 4;
  if (this->record_partition_graphs() != 0) {
    total_size += 1 + 1;
  }

  // optional bool report_tensor_allocations_upon_oom = 5;
  if (this->report_tensor_allocations_upon_oom() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecutorOpts::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ExecutorOpts)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ExecutorOpts* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ExecutorOpts>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ExecutorOpts)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ExecutorOpts)
    MergeFrom(*source);
  }
}

void ExecutorOpts::MergeFrom(const ExecutorOpts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ExecutorOpts)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.record_costs() != 0) {
    set_record_costs(from.record_costs());
  }
  if (from.record_timeline() != 0) {
    set_record_timeline(from.record_timeline());
  }
  if (from.record_partition_graphs() != 0) {
    set_record_partition_graphs(from.record_partition_graphs());
  }
  if (from.report_tensor_allocations_upon_oom() != 0) {
    set_report_tensor_allocations_upon_oom(from.report_tensor_allocations_upon_oom());
  }
}

void ExecutorOpts::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ExecutorOpts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutorOpts::CopyFrom(const ExecutorOpts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ExecutorOpts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutorOpts::IsInitialized() const {

  return true;
}

void ExecutorOpts::Swap(ExecutorOpts* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ExecutorOpts temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ExecutorOpts::UnsafeArenaSwap(ExecutorOpts* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ExecutorOpts::InternalSwap(ExecutorOpts* other) {
  std::swap(record_costs_, other->record_costs_);
  std::swap(record_timeline_, other->record_timeline_);
  std::swap(record_partition_graphs_, other->record_partition_graphs_);
  std::swap(report_tensor_allocations_upon_oom_, other->report_tensor_allocations_upon_oom_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExecutorOpts::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExecutorOpts_descriptor_;
  metadata.reflection = ExecutorOpts_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExecutorOpts

// optional bool record_costs = 1;
void ExecutorOpts::clear_record_costs() {
  record_costs_ = false;
}
 bool ExecutorOpts::record_costs() const {
  // @@protoc_insertion_point(field_get:tensorflow.ExecutorOpts.record_costs)
  return record_costs_;
}
 void ExecutorOpts::set_record_costs(bool value) {
  
  record_costs_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ExecutorOpts.record_costs)
}

// optional bool record_timeline = 3;
void ExecutorOpts::clear_record_timeline() {
  record_timeline_ = false;
}
 bool ExecutorOpts::record_timeline() const {
  // @@protoc_insertion_point(field_get:tensorflow.ExecutorOpts.record_timeline)
  return record_timeline_;
}
 void ExecutorOpts::set_record_timeline(bool value) {
  
  record_timeline_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ExecutorOpts.record_timeline)
}

// optional bool record_partition_graphs = 4;
void ExecutorOpts::clear_record_partition_graphs() {
  record_partition_graphs_ = false;
}
 bool ExecutorOpts::record_partition_graphs() const {
  // @@protoc_insertion_point(field_get:tensorflow.ExecutorOpts.record_partition_graphs)
  return record_partition_graphs_;
}
 void ExecutorOpts::set_record_partition_graphs(bool value) {
  
  record_partition_graphs_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ExecutorOpts.record_partition_graphs)
}

// optional bool report_tensor_allocations_upon_oom = 5;
void ExecutorOpts::clear_report_tensor_allocations_upon_oom() {
  report_tensor_allocations_upon_oom_ = false;
}
 bool ExecutorOpts::report_tensor_allocations_upon_oom() const {
  // @@protoc_insertion_point(field_get:tensorflow.ExecutorOpts.report_tensor_allocations_upon_oom)
  return report_tensor_allocations_upon_oom_;
}
 void ExecutorOpts::set_report_tensor_allocations_upon_oom(bool value) {
  
  report_tensor_allocations_upon_oom_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ExecutorOpts.report_tensor_allocations_upon_oom)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void RunGraphRequest::_slow_mutable_exec_opts() {
  exec_opts_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::ExecutorOpts >(
      GetArenaNoVirtual());
}
::tensorflow::ExecutorOpts* RunGraphRequest::_slow_release_exec_opts() {
  if (exec_opts_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::ExecutorOpts* temp = new ::tensorflow::ExecutorOpts;
    temp->MergeFrom(*exec_opts_);
    exec_opts_ = NULL;
    return temp;
  }
}
::tensorflow::ExecutorOpts* RunGraphRequest::unsafe_arena_release_exec_opts() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RunGraphRequest.exec_opts)
  
  ::tensorflow::ExecutorOpts* temp = exec_opts_;
  exec_opts_ = NULL;
  return temp;
}
void RunGraphRequest::_slow_set_allocated_exec_opts(
    ::google::protobuf::Arena* message_arena, ::tensorflow::ExecutorOpts** exec_opts) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*exec_opts) == NULL) {
      message_arena->Own(*exec_opts);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*exec_opts)) {
      ::tensorflow::ExecutorOpts* new_exec_opts = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::ExecutorOpts >(
            message_arena);
      new_exec_opts->CopyFrom(**exec_opts);
      *exec_opts = new_exec_opts;
    }
}
void RunGraphRequest::unsafe_arena_set_allocated_exec_opts(
    ::tensorflow::ExecutorOpts* exec_opts) {
  if (GetArenaNoVirtual() == NULL) {
    delete exec_opts_;
  }
  exec_opts_ = exec_opts;
  if (exec_opts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RunGraphRequest.exec_opts)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunGraphRequest::kSessionHandleFieldNumber;
const int RunGraphRequest::kCreateWorkerSessionCalledFieldNumber;
const int RunGraphRequest::kGraphHandleFieldNumber;
const int RunGraphRequest::kStepIdFieldNumber;
const int RunGraphRequest::kExecOptsFieldNumber;
const int RunGraphRequest::kSendFieldNumber;
const int RunGraphRequest::kRecvKeyFieldNumber;
const int RunGraphRequest::kIsPartialFieldNumber;
const int RunGraphRequest::kIsLastPartialRunFieldNumber;
const int RunGraphRequest::kStoreErrorsInResponseBodyFieldNumber;
const int RunGraphRequest::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunGraphRequest::RunGraphRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RunGraphRequest)
}

RunGraphRequest::RunGraphRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  send_(arena),
  recv_key_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RunGraphRequest)
}

void RunGraphRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  exec_opts_ = const_cast< ::tensorflow::ExecutorOpts*>(&::tensorflow::ExecutorOpts::default_instance());
}

RunGraphRequest::RunGraphRequest(const RunGraphRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.RunGraphRequest)
}

void RunGraphRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  session_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  create_worker_session_called_ = false;
  graph_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  step_id_ = GOOGLE_LONGLONG(0);
  exec_opts_ = NULL;
  is_partial_ = false;
  is_last_partial_run_ = false;
  store_errors_in_response_body_ = false;
  request_id_ = GOOGLE_LONGLONG(0);
}

RunGraphRequest::~RunGraphRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.RunGraphRequest)
  SharedDtor();
}

void RunGraphRequest::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  session_handle_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  graph_handle_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
    delete exec_opts_;
  }
}

void RunGraphRequest::ArenaDtor(void* object) {
  RunGraphRequest* _this = reinterpret_cast< RunGraphRequest* >(object);
  (void)_this;
}
void RunGraphRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RunGraphRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunGraphRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunGraphRequest_descriptor_;
}

const RunGraphRequest& RunGraphRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fworker_2eproto();
  return *default_instance_;
}

RunGraphRequest* RunGraphRequest::default_instance_ = NULL;

RunGraphRequest* RunGraphRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RunGraphRequest>(arena);
}

void RunGraphRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RunGraphRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RunGraphRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RunGraphRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(create_worker_session_called_, is_partial_);
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  graph_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  step_id_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && exec_opts_ != NULL) delete exec_opts_;
  exec_opts_ = NULL;
  ZR_(is_last_partial_run_, store_errors_in_response_body_);
  request_id_ = GOOGLE_LONGLONG(0);

#undef ZR_HELPER_
#undef ZR_

  send_.Clear();
  recv_key_.Clear();
}

bool RunGraphRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RunGraphRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string graph_handle = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_graph_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->graph_handle().data(), this->graph_handle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.RunGraphRequest.graph_handle"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_step_id;
        break;
      }

      // optional int64 step_id = 2;
      case 2: {
        if (tag == 16) {
         parse_step_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &step_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_send;
        break;
      }

      // repeated .tensorflow.NamedTensorProto send = 3;
      case 3: {
        if (tag == 26) {
         parse_send:
          DO_(input->IncrementRecursionDepth());
         parse_loop_send:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_send()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_send;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_recv_key;
        break;
      }

      // repeated string recv_key = 4;
      case 4: {
        if (tag == 34) {
         parse_recv_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_recv_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->recv_key(this->recv_key_size() - 1).data(),
            this->recv_key(this->recv_key_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.RunGraphRequest.recv_key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_recv_key;
        if (input->ExpectTag(42)) goto parse_exec_opts;
        break;
      }

      // optional .tensorflow.ExecutorOpts exec_opts = 5;
      case 5: {
        if (tag == 42) {
         parse_exec_opts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exec_opts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_is_partial;
        break;
      }

      // optional bool is_partial = 6;
      case 6: {
        if (tag == 48) {
         parse_is_partial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_partial_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_is_last_partial_run;
        break;
      }

      // optional bool is_last_partial_run = 7;
      case 7: {
        if (tag == 56) {
         parse_is_last_partial_run:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_last_partial_run_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_session_handle;
        break;
      }

      // optional string session_handle = 8;
      case 8: {
        if (tag == 66) {
         parse_session_handle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_handle().data(), this->session_handle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.RunGraphRequest.session_handle"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_store_errors_in_response_body;
        break;
      }

      // optional bool store_errors_in_response_body = 9;
      case 9: {
        if (tag == 72) {
         parse_store_errors_in_response_body:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &store_errors_in_response_body_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_create_worker_session_called;
        break;
      }

      // optional bool create_worker_session_called = 10;
      case 10: {
        if (tag == 80) {
         parse_create_worker_session_called:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &create_worker_session_called_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_request_id;
        break;
      }

      // optional int64 request_id = 11;
      case 11: {
        if (tag == 88) {
         parse_request_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RunGraphRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RunGraphRequest)
  return false;
#undef DO_
}

void RunGraphRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RunGraphRequest)
  // optional string graph_handle = 1;
  if (this->graph_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->graph_handle().data(), this->graph_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunGraphRequest.graph_handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->graph_handle(), output);
  }

  // optional int64 step_id = 2;
  if (this->step_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->step_id(), output);
  }

  // repeated .tensorflow.NamedTensorProto send = 3;
  for (unsigned int i = 0, n = this->send_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->send(i), output);
  }

  // repeated string recv_key = 4;
  for (int i = 0; i < this->recv_key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recv_key(i).data(), this->recv_key(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunGraphRequest.recv_key");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->recv_key(i), output);
  }

  // optional .tensorflow.ExecutorOpts exec_opts = 5;
  if (this->has_exec_opts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->exec_opts_, output);
  }

  // optional bool is_partial = 6;
  if (this->is_partial() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_partial(), output);
  }

  // optional bool is_last_partial_run = 7;
  if (this->is_last_partial_run() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_last_partial_run(), output);
  }

  // optional string session_handle = 8;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunGraphRequest.session_handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->session_handle(), output);
  }

  // optional bool store_errors_in_response_body = 9;
  if (this->store_errors_in_response_body() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->store_errors_in_response_body(), output);
  }

  // optional bool create_worker_session_called = 10;
  if (this->create_worker_session_called() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->create_worker_session_called(), output);
  }

  // optional int64 request_id = 11;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->request_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.RunGraphRequest)
}

::google::protobuf::uint8* RunGraphRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RunGraphRequest)
  // optional string graph_handle = 1;
  if (this->graph_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->graph_handle().data(), this->graph_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunGraphRequest.graph_handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->graph_handle(), target);
  }

  // optional int64 step_id = 2;
  if (this->step_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->step_id(), target);
  }

  // repeated .tensorflow.NamedTensorProto send = 3;
  for (unsigned int i = 0, n = this->send_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->send(i), false, target);
  }

  // repeated string recv_key = 4;
  for (int i = 0; i < this->recv_key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recv_key(i).data(), this->recv_key(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunGraphRequest.recv_key");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->recv_key(i), target);
  }

  // optional .tensorflow.ExecutorOpts exec_opts = 5;
  if (this->has_exec_opts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->exec_opts_, false, target);
  }

  // optional bool is_partial = 6;
  if (this->is_partial() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_partial(), target);
  }

  // optional bool is_last_partial_run = 7;
  if (this->is_last_partial_run() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_last_partial_run(), target);
  }

  // optional string session_handle = 8;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunGraphRequest.session_handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->session_handle(), target);
  }

  // optional bool store_errors_in_response_body = 9;
  if (this->store_errors_in_response_body() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->store_errors_in_response_body(), target);
  }

  // optional bool create_worker_session_called = 10;
  if (this->create_worker_session_called() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->create_worker_session_called(), target);
  }

  // optional int64 request_id = 11;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->request_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RunGraphRequest)
  return target;
}

int RunGraphRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RunGraphRequest)
  int total_size = 0;

  // optional string session_handle = 8;
  if (this->session_handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_handle());
  }

  // optional bool create_worker_session_called = 10;
  if (this->create_worker_session_called() != 0) {
    total_size += 1 + 1;
  }

  // optional string graph_handle = 1;
  if (this->graph_handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->graph_handle());
  }

  // optional int64 step_id = 2;
  if (this->step_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->step_id());
  }

  // optional .tensorflow.ExecutorOpts exec_opts = 5;
  if (this->has_exec_opts()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->exec_opts_);
  }

  // optional bool is_partial = 6;
  if (this->is_partial() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_last_partial_run = 7;
  if (this->is_last_partial_run() != 0) {
    total_size += 1 + 1;
  }

  // optional bool store_errors_in_response_body = 9;
  if (this->store_errors_in_response_body() != 0) {
    total_size += 1 + 1;
  }

  // optional int64 request_id = 11;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->request_id());
  }

  // repeated .tensorflow.NamedTensorProto send = 3;
  total_size += 1 * this->send_size();
  for (int i = 0; i < this->send_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->send(i));
  }

  // repeated string recv_key = 4;
  total_size += 1 * this->recv_key_size();
  for (int i = 0; i < this->recv_key_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->recv_key(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunGraphRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RunGraphRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RunGraphRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RunGraphRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RunGraphRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RunGraphRequest)
    MergeFrom(*source);
  }
}

void RunGraphRequest::MergeFrom(const RunGraphRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RunGraphRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  send_.MergeFrom(from.send_);
  recv_key_.MergeFrom(from.recv_key_);
  if (from.session_handle().size() > 0) {
    set_session_handle(from.session_handle());
  }
  if (from.create_worker_session_called() != 0) {
    set_create_worker_session_called(from.create_worker_session_called());
  }
  if (from.graph_handle().size() > 0) {
    set_graph_handle(from.graph_handle());
  }
  if (from.step_id() != 0) {
    set_step_id(from.step_id());
  }
  if (from.has_exec_opts()) {
    mutable_exec_opts()->::tensorflow::ExecutorOpts::MergeFrom(from.exec_opts());
  }
  if (from.is_partial() != 0) {
    set_is_partial(from.is_partial());
  }
  if (from.is_last_partial_run() != 0) {
    set_is_last_partial_run(from.is_last_partial_run());
  }
  if (from.store_errors_in_response_body() != 0) {
    set_store_errors_in_response_body(from.store_errors_in_response_body());
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
}

void RunGraphRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RunGraphRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunGraphRequest::CopyFrom(const RunGraphRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RunGraphRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunGraphRequest::IsInitialized() const {

  return true;
}

void RunGraphRequest::Swap(RunGraphRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RunGraphRequest temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void RunGraphRequest::UnsafeArenaSwap(RunGraphRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RunGraphRequest::InternalSwap(RunGraphRequest* other) {
  session_handle_.Swap(&other->session_handle_);
  std::swap(create_worker_session_called_, other->create_worker_session_called_);
  graph_handle_.Swap(&other->graph_handle_);
  std::swap(step_id_, other->step_id_);
  std::swap(exec_opts_, other->exec_opts_);
  send_.UnsafeArenaSwap(&other->send_);
  recv_key_.UnsafeArenaSwap(&other->recv_key_);
  std::swap(is_partial_, other->is_partial_);
  std::swap(is_last_partial_run_, other->is_last_partial_run_);
  std::swap(store_errors_in_response_body_, other->store_errors_in_response_body_);
  std::swap(request_id_, other->request_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RunGraphRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunGraphRequest_descriptor_;
  metadata.reflection = RunGraphRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RunGraphRequest

// optional string session_handle = 8;
void RunGraphRequest::clear_session_handle() {
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& RunGraphRequest::session_handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunGraphRequest.session_handle)
  return session_handle_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RunGraphRequest::set_session_handle(const ::std::string& value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.RunGraphRequest.session_handle)
}
 void RunGraphRequest::set_session_handle(const char* value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.RunGraphRequest.session_handle)
}
 void RunGraphRequest::set_session_handle(const char* value,
    size_t size) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.RunGraphRequest.session_handle)
}
 ::std::string* RunGraphRequest::mutable_session_handle() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.RunGraphRequest.session_handle)
  return session_handle_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* RunGraphRequest::release_session_handle() {
  // @@protoc_insertion_point(field_release:tensorflow.RunGraphRequest.session_handle)
  
  return session_handle_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* RunGraphRequest::unsafe_arena_release_session_handle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RunGraphRequest.session_handle)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return session_handle_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void RunGraphRequest::set_allocated_session_handle(::std::string* session_handle) {
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_handle,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunGraphRequest.session_handle)
}
 void RunGraphRequest::unsafe_arena_set_allocated_session_handle(
    ::std::string* session_handle) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      session_handle, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RunGraphRequest.session_handle)
}

// optional bool create_worker_session_called = 10;
void RunGraphRequest::clear_create_worker_session_called() {
  create_worker_session_called_ = false;
}
 bool RunGraphRequest::create_worker_session_called() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunGraphRequest.create_worker_session_called)
  return create_worker_session_called_;
}
 void RunGraphRequest::set_create_worker_session_called(bool value) {
  
  create_worker_session_called_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RunGraphRequest.create_worker_session_called)
}

// optional string graph_handle = 1;
void RunGraphRequest::clear_graph_handle() {
  graph_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& RunGraphRequest::graph_handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunGraphRequest.graph_handle)
  return graph_handle_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RunGraphRequest::set_graph_handle(const ::std::string& value) {
  
  graph_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.RunGraphRequest.graph_handle)
}
 void RunGraphRequest::set_graph_handle(const char* value) {
  
  graph_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.RunGraphRequest.graph_handle)
}
 void RunGraphRequest::set_graph_handle(const char* value,
    size_t size) {
  
  graph_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.RunGraphRequest.graph_handle)
}
 ::std::string* RunGraphRequest::mutable_graph_handle() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.RunGraphRequest.graph_handle)
  return graph_handle_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* RunGraphRequest::release_graph_handle() {
  // @@protoc_insertion_point(field_release:tensorflow.RunGraphRequest.graph_handle)
  
  return graph_handle_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* RunGraphRequest::unsafe_arena_release_graph_handle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RunGraphRequest.graph_handle)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return graph_handle_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void RunGraphRequest::set_allocated_graph_handle(::std::string* graph_handle) {
  if (graph_handle != NULL) {
    
  } else {
    
  }
  graph_handle_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), graph_handle,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunGraphRequest.graph_handle)
}
 void RunGraphRequest::unsafe_arena_set_allocated_graph_handle(
    ::std::string* graph_handle) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (graph_handle != NULL) {
    
  } else {
    
  }
  graph_handle_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      graph_handle, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RunGraphRequest.graph_handle)
}

// optional int64 step_id = 2;
void RunGraphRequest::clear_step_id() {
  step_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RunGraphRequest::step_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunGraphRequest.step_id)
  return step_id_;
}
 void RunGraphRequest::set_step_id(::google::protobuf::int64 value) {
  
  step_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RunGraphRequest.step_id)
}

// optional .tensorflow.ExecutorOpts exec_opts = 5;
bool RunGraphRequest::has_exec_opts() const {
  return !_is_default_instance_ && exec_opts_ != NULL;
}
void RunGraphRequest::clear_exec_opts() {
  if (GetArenaNoVirtual() == NULL && exec_opts_ != NULL) delete exec_opts_;
  exec_opts_ = NULL;
}
const ::tensorflow::ExecutorOpts& RunGraphRequest::exec_opts() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunGraphRequest.exec_opts)
  return exec_opts_ != NULL ? *exec_opts_ : *default_instance_->exec_opts_;
}
::tensorflow::ExecutorOpts* RunGraphRequest::mutable_exec_opts() {
  
  if (exec_opts_ == NULL) {
    _slow_mutable_exec_opts();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RunGraphRequest.exec_opts)
  return exec_opts_;
}
::tensorflow::ExecutorOpts* RunGraphRequest::release_exec_opts() {
  // @@protoc_insertion_point(field_release:tensorflow.RunGraphRequest.exec_opts)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_exec_opts();
  } else {
    ::tensorflow::ExecutorOpts* temp = exec_opts_;
    exec_opts_ = NULL;
    return temp;
  }
}
 void RunGraphRequest::set_allocated_exec_opts(::tensorflow::ExecutorOpts* exec_opts) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete exec_opts_;
  }
  if (exec_opts != NULL) {
    _slow_set_allocated_exec_opts(message_arena, &exec_opts);
  }
  exec_opts_ = exec_opts;
  if (exec_opts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunGraphRequest.exec_opts)
}

// repeated .tensorflow.NamedTensorProto send = 3;
int RunGraphRequest::send_size() const {
  return send_.size();
}
void RunGraphRequest::clear_send() {
  send_.Clear();
}
const ::tensorflow::NamedTensorProto& RunGraphRequest::send(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.RunGraphRequest.send)
  return send_.Get(index);
}
::tensorflow::NamedTensorProto* RunGraphRequest::mutable_send(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.RunGraphRequest.send)
  return send_.Mutable(index);
}
::tensorflow::NamedTensorProto* RunGraphRequest::add_send() {
  // @@protoc_insertion_point(field_add:tensorflow.RunGraphRequest.send)
  return send_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::NamedTensorProto >*
RunGraphRequest::mutable_send() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.RunGraphRequest.send)
  return &send_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::NamedTensorProto >&
RunGraphRequest::send() const {
  // @@protoc_insertion_point(field_list:tensorflow.RunGraphRequest.send)
  return send_;
}

// repeated string recv_key = 4;
int RunGraphRequest::recv_key_size() const {
  return recv_key_.size();
}
void RunGraphRequest::clear_recv_key() {
  recv_key_.Clear();
}
 const ::std::string& RunGraphRequest::recv_key(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.RunGraphRequest.recv_key)
  return recv_key_.Get(index);
}
 ::std::string* RunGraphRequest::mutable_recv_key(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.RunGraphRequest.recv_key)
  return recv_key_.Mutable(index);
}
 void RunGraphRequest::set_recv_key(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.RunGraphRequest.recv_key)
  recv_key_.Mutable(index)->assign(value);
}
 void RunGraphRequest::set_recv_key(int index, const char* value) {
  recv_key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.RunGraphRequest.recv_key)
}
 void RunGraphRequest::set_recv_key(int index, const char* value, size_t size) {
  recv_key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.RunGraphRequest.recv_key)
}
 ::std::string* RunGraphRequest::add_recv_key() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.RunGraphRequest.recv_key)
  return recv_key_.Add();
}
 void RunGraphRequest::add_recv_key(const ::std::string& value) {
  recv_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.RunGraphRequest.recv_key)
}
 void RunGraphRequest::add_recv_key(const char* value) {
  recv_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.RunGraphRequest.recv_key)
}
 void RunGraphRequest::add_recv_key(const char* value, size_t size) {
  recv_key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.RunGraphRequest.recv_key)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
RunGraphRequest::recv_key() const {
  // @@protoc_insertion_point(field_list:tensorflow.RunGraphRequest.recv_key)
  return recv_key_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
RunGraphRequest::mutable_recv_key() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.RunGraphRequest.recv_key)
  return &recv_key_;
}

// optional bool is_partial = 6;
void RunGraphRequest::clear_is_partial() {
  is_partial_ = false;
}
 bool RunGraphRequest::is_partial() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunGraphRequest.is_partial)
  return is_partial_;
}
 void RunGraphRequest::set_is_partial(bool value) {
  
  is_partial_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RunGraphRequest.is_partial)
}

// optional bool is_last_partial_run = 7;
void RunGraphRequest::clear_is_last_partial_run() {
  is_last_partial_run_ = false;
}
 bool RunGraphRequest::is_last_partial_run() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunGraphRequest.is_last_partial_run)
  return is_last_partial_run_;
}
 void RunGraphRequest::set_is_last_partial_run(bool value) {
  
  is_last_partial_run_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RunGraphRequest.is_last_partial_run)
}

// optional bool store_errors_in_response_body = 9;
void RunGraphRequest::clear_store_errors_in_response_body() {
  store_errors_in_response_body_ = false;
}
 bool RunGraphRequest::store_errors_in_response_body() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunGraphRequest.store_errors_in_response_body)
  return store_errors_in_response_body_;
}
 void RunGraphRequest::set_store_errors_in_response_body(bool value) {
  
  store_errors_in_response_body_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RunGraphRequest.store_errors_in_response_body)
}

// optional int64 request_id = 11;
void RunGraphRequest::clear_request_id() {
  request_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RunGraphRequest::request_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunGraphRequest.request_id)
  return request_id_;
}
 void RunGraphRequest::set_request_id(::google::protobuf::int64 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RunGraphRequest.request_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void RunGraphResponse::_slow_mutable_step_stats() {
  step_stats_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::StepStats >(
      GetArenaNoVirtual());
}
::tensorflow::StepStats* RunGraphResponse::_slow_release_step_stats() {
  if (step_stats_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::StepStats* temp = new ::tensorflow::StepStats;
    temp->MergeFrom(*step_stats_);
    step_stats_ = NULL;
    return temp;
  }
}
::tensorflow::StepStats* RunGraphResponse::unsafe_arena_release_step_stats() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RunGraphResponse.step_stats)
  
  ::tensorflow::StepStats* temp = step_stats_;
  step_stats_ = NULL;
  return temp;
}
void RunGraphResponse::_slow_set_allocated_step_stats(
    ::google::protobuf::Arena* message_arena, ::tensorflow::StepStats** step_stats) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*step_stats) == NULL) {
      message_arena->Own(*step_stats);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*step_stats)) {
      ::tensorflow::StepStats* new_step_stats = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::StepStats >(
            message_arena);
      new_step_stats->CopyFrom(**step_stats);
      *step_stats = new_step_stats;
    }
}
void RunGraphResponse::unsafe_arena_set_allocated_step_stats(
    ::tensorflow::StepStats* step_stats) {
  if (GetArenaNoVirtual() == NULL) {
    delete step_stats_;
  }
  step_stats_ = step_stats;
  if (step_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RunGraphResponse.step_stats)
}
void RunGraphResponse::_slow_mutable_cost_graph() {
  cost_graph_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::CostGraphDef >(
      GetArenaNoVirtual());
}
::tensorflow::CostGraphDef* RunGraphResponse::_slow_release_cost_graph() {
  if (cost_graph_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::CostGraphDef* temp = new ::tensorflow::CostGraphDef;
    temp->MergeFrom(*cost_graph_);
    cost_graph_ = NULL;
    return temp;
  }
}
::tensorflow::CostGraphDef* RunGraphResponse::unsafe_arena_release_cost_graph() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RunGraphResponse.cost_graph)
  
  ::tensorflow::CostGraphDef* temp = cost_graph_;
  cost_graph_ = NULL;
  return temp;
}
void RunGraphResponse::_slow_set_allocated_cost_graph(
    ::google::protobuf::Arena* message_arena, ::tensorflow::CostGraphDef** cost_graph) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*cost_graph) == NULL) {
      message_arena->Own(*cost_graph);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*cost_graph)) {
      ::tensorflow::CostGraphDef* new_cost_graph = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::CostGraphDef >(
            message_arena);
      new_cost_graph->CopyFrom(**cost_graph);
      *cost_graph = new_cost_graph;
    }
}
void RunGraphResponse::unsafe_arena_set_allocated_cost_graph(
    ::tensorflow::CostGraphDef* cost_graph) {
  if (GetArenaNoVirtual() == NULL) {
    delete cost_graph_;
  }
  cost_graph_ = cost_graph;
  if (cost_graph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RunGraphResponse.cost_graph)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunGraphResponse::kRecvFieldNumber;
const int RunGraphResponse::kStepStatsFieldNumber;
const int RunGraphResponse::kCostGraphFieldNumber;
const int RunGraphResponse::kPartitionGraphFieldNumber;
const int RunGraphResponse::kStatusCodeFieldNumber;
const int RunGraphResponse::kStatusErrorMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunGraphResponse::RunGraphResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RunGraphResponse)
}

RunGraphResponse::RunGraphResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  recv_(arena),
  partition_graph_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RunGraphResponse)
}

void RunGraphResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  step_stats_ = const_cast< ::tensorflow::StepStats*>(&::tensorflow::StepStats::default_instance());
  cost_graph_ = const_cast< ::tensorflow::CostGraphDef*>(&::tensorflow::CostGraphDef::default_instance());
}

RunGraphResponse::RunGraphResponse(const RunGraphResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.RunGraphResponse)
}

void RunGraphResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  step_stats_ = NULL;
  cost_graph_ = NULL;
  status_code_ = 0;
  status_error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RunGraphResponse::~RunGraphResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.RunGraphResponse)
  SharedDtor();
}

void RunGraphResponse::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  status_error_message_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
    delete step_stats_;
    delete cost_graph_;
  }
}

void RunGraphResponse::ArenaDtor(void* object) {
  RunGraphResponse* _this = reinterpret_cast< RunGraphResponse* >(object);
  (void)_this;
}
void RunGraphResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RunGraphResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunGraphResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunGraphResponse_descriptor_;
}

const RunGraphResponse& RunGraphResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fworker_2eproto();
  return *default_instance_;
}

RunGraphResponse* RunGraphResponse::default_instance_ = NULL;

RunGraphResponse* RunGraphResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RunGraphResponse>(arena);
}

void RunGraphResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RunGraphResponse)
  if (GetArenaNoVirtual() == NULL && step_stats_ != NULL) delete step_stats_;
  step_stats_ = NULL;
  if (GetArenaNoVirtual() == NULL && cost_graph_ != NULL) delete cost_graph_;
  cost_graph_ = NULL;
  status_code_ = 0;
  status_error_message_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  recv_.Clear();
  partition_graph_.Clear();
}

bool RunGraphResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RunGraphResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.NamedTensorProto recv = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_recv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_recv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_recv;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_step_stats;
        break;
      }

      // optional .tensorflow.StepStats step_stats = 2;
      case 2: {
        if (tag == 18) {
         parse_step_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_step_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cost_graph;
        break;
      }

      // optional .tensorflow.CostGraphDef cost_graph = 3;
      case 3: {
        if (tag == 26) {
         parse_cost_graph:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cost_graph()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_partition_graph;
        break;
      }

      // repeated .tensorflow.GraphDef partition_graph = 4;
      case 4: {
        if (tag == 34) {
         parse_partition_graph:
          DO_(input->IncrementRecursionDepth());
         parse_loop_partition_graph:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_partition_graph()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_partition_graph;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(40)) goto parse_status_code;
        break;
      }

      // optional .tensorflow.error.Code status_code = 5;
      case 5: {
        if (tag == 40) {
         parse_status_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status_code(static_cast< ::tensorflow::error::Code >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_status_error_message;
        break;
      }

      // optional string status_error_message = 6;
      case 6: {
        if (tag == 50) {
         parse_status_error_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status_error_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status_error_message().data(), this->status_error_message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.RunGraphResponse.status_error_message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RunGraphResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RunGraphResponse)
  return false;
#undef DO_
}

void RunGraphResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RunGraphResponse)
  // repeated .tensorflow.NamedTensorProto recv = 1;
  for (unsigned int i = 0, n = this->recv_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recv(i), output);
  }

  // optional .tensorflow.StepStats step_stats = 2;
  if (this->has_step_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->step_stats_, output);
  }

  // optional .tensorflow.CostGraphDef cost_graph = 3;
  if (this->has_cost_graph()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->cost_graph_, output);
  }

  // repeated .tensorflow.GraphDef partition_graph = 4;
  for (unsigned int i = 0, n = this->partition_graph_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->partition_graph(i), output);
  }

  // optional .tensorflow.error.Code status_code = 5;
  if (this->status_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->status_code(), output);
  }

  // optional string status_error_message = 6;
  if (this->status_error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status_error_message().data(), this->status_error_message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunGraphResponse.status_error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->status_error_message(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.RunGraphResponse)
}

::google::protobuf::uint8* RunGraphResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RunGraphResponse)
  // repeated .tensorflow.NamedTensorProto recv = 1;
  for (unsigned int i = 0, n = this->recv_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->recv(i), false, target);
  }

  // optional .tensorflow.StepStats step_stats = 2;
  if (this->has_step_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->step_stats_, false, target);
  }

  // optional .tensorflow.CostGraphDef cost_graph = 3;
  if (this->has_cost_graph()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->cost_graph_, false, target);
  }

  // repeated .tensorflow.GraphDef partition_graph = 4;
  for (unsigned int i = 0, n = this->partition_graph_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->partition_graph(i), false, target);
  }

  // optional .tensorflow.error.Code status_code = 5;
  if (this->status_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->status_code(), target);
  }

  // optional string status_error_message = 6;
  if (this->status_error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status_error_message().data(), this->status_error_message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunGraphResponse.status_error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->status_error_message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RunGraphResponse)
  return target;
}

int RunGraphResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RunGraphResponse)
  int total_size = 0;

  // optional .tensorflow.StepStats step_stats = 2;
  if (this->has_step_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->step_stats_);
  }

  // optional .tensorflow.CostGraphDef cost_graph = 3;
  if (this->has_cost_graph()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cost_graph_);
  }

  // optional .tensorflow.error.Code status_code = 5;
  if (this->status_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status_code());
  }

  // optional string status_error_message = 6;
  if (this->status_error_message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status_error_message());
  }

  // repeated .tensorflow.NamedTensorProto recv = 1;
  total_size += 1 * this->recv_size();
  for (int i = 0; i < this->recv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recv(i));
  }

  // repeated .tensorflow.GraphDef partition_graph = 4;
  total_size += 1 * this->partition_graph_size();
  for (int i = 0; i < this->partition_graph_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->partition_graph(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunGraphResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RunGraphResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RunGraphResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RunGraphResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RunGraphResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RunGraphResponse)
    MergeFrom(*source);
  }
}

void RunGraphResponse::MergeFrom(const RunGraphResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RunGraphResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  recv_.MergeFrom(from.recv_);
  partition_graph_.MergeFrom(from.partition_graph_);
  if (from.has_step_stats()) {
    mutable_step_stats()->::tensorflow::StepStats::MergeFrom(from.step_stats());
  }
  if (from.has_cost_graph()) {
    mutable_cost_graph()->::tensorflow::CostGraphDef::MergeFrom(from.cost_graph());
  }
  if (from.status_code() != 0) {
    set_status_code(from.status_code());
  }
  if (from.status_error_message().size() > 0) {
    set_status_error_message(from.status_error_message());
  }
}

void RunGraphResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RunGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunGraphResponse::CopyFrom(const RunGraphResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RunGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunGraphResponse::IsInitialized() const {

  return true;
}

void RunGraphResponse::Swap(RunGraphResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RunGraphResponse temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void RunGraphResponse::UnsafeArenaSwap(RunGraphResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RunGraphResponse::InternalSwap(RunGraphResponse* other) {
  recv_.UnsafeArenaSwap(&other->recv_);
  std::swap(step_stats_, other->step_stats_);
  std::swap(cost_graph_, other->cost_graph_);
  partition_graph_.UnsafeArenaSwap(&other->partition_graph_);
  std::swap(status_code_, other->status_code_);
  status_error_message_.Swap(&other->status_error_message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RunGraphResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunGraphResponse_descriptor_;
  metadata.reflection = RunGraphResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RunGraphResponse

// repeated .tensorflow.NamedTensorProto recv = 1;
int RunGraphResponse::recv_size() const {
  return recv_.size();
}
void RunGraphResponse::clear_recv() {
  recv_.Clear();
}
const ::tensorflow::NamedTensorProto& RunGraphResponse::recv(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.RunGraphResponse.recv)
  return recv_.Get(index);
}
::tensorflow::NamedTensorProto* RunGraphResponse::mutable_recv(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.RunGraphResponse.recv)
  return recv_.Mutable(index);
}
::tensorflow::NamedTensorProto* RunGraphResponse::add_recv() {
  // @@protoc_insertion_point(field_add:tensorflow.RunGraphResponse.recv)
  return recv_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::NamedTensorProto >*
RunGraphResponse::mutable_recv() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.RunGraphResponse.recv)
  return &recv_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::NamedTensorProto >&
RunGraphResponse::recv() const {
  // @@protoc_insertion_point(field_list:tensorflow.RunGraphResponse.recv)
  return recv_;
}

// optional .tensorflow.StepStats step_stats = 2;
bool RunGraphResponse::has_step_stats() const {
  return !_is_default_instance_ && step_stats_ != NULL;
}
void RunGraphResponse::clear_step_stats() {
  if (GetArenaNoVirtual() == NULL && step_stats_ != NULL) delete step_stats_;
  step_stats_ = NULL;
}
const ::tensorflow::StepStats& RunGraphResponse::step_stats() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunGraphResponse.step_stats)
  return step_stats_ != NULL ? *step_stats_ : *default_instance_->step_stats_;
}
::tensorflow::StepStats* RunGraphResponse::mutable_step_stats() {
  
  if (step_stats_ == NULL) {
    _slow_mutable_step_stats();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RunGraphResponse.step_stats)
  return step_stats_;
}
::tensorflow::StepStats* RunGraphResponse::release_step_stats() {
  // @@protoc_insertion_point(field_release:tensorflow.RunGraphResponse.step_stats)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_step_stats();
  } else {
    ::tensorflow::StepStats* temp = step_stats_;
    step_stats_ = NULL;
    return temp;
  }
}
 void RunGraphResponse::set_allocated_step_stats(::tensorflow::StepStats* step_stats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete step_stats_;
  }
  if (step_stats != NULL) {
    _slow_set_allocated_step_stats(message_arena, &step_stats);
  }
  step_stats_ = step_stats;
  if (step_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunGraphResponse.step_stats)
}

// optional .tensorflow.CostGraphDef cost_graph = 3;
bool RunGraphResponse::has_cost_graph() const {
  return !_is_default_instance_ && cost_graph_ != NULL;
}
void RunGraphResponse::clear_cost_graph() {
  if (GetArenaNoVirtual() == NULL && cost_graph_ != NULL) delete cost_graph_;
  cost_graph_ = NULL;
}
const ::tensorflow::CostGraphDef& RunGraphResponse::cost_graph() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunGraphResponse.cost_graph)
  return cost_graph_ != NULL ? *cost_graph_ : *default_instance_->cost_graph_;
}
::tensorflow::CostGraphDef* RunGraphResponse::mutable_cost_graph() {
  
  if (cost_graph_ == NULL) {
    _slow_mutable_cost_graph();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RunGraphResponse.cost_graph)
  return cost_graph_;
}
::tensorflow::CostGraphDef* RunGraphResponse::release_cost_graph() {
  // @@protoc_insertion_point(field_release:tensorflow.RunGraphResponse.cost_graph)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_cost_graph();
  } else {
    ::tensorflow::CostGraphDef* temp = cost_graph_;
    cost_graph_ = NULL;
    return temp;
  }
}
 void RunGraphResponse::set_allocated_cost_graph(::tensorflow::CostGraphDef* cost_graph) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cost_graph_;
  }
  if (cost_graph != NULL) {
    _slow_set_allocated_cost_graph(message_arena, &cost_graph);
  }
  cost_graph_ = cost_graph;
  if (cost_graph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunGraphResponse.cost_graph)
}

// repeated .tensorflow.GraphDef partition_graph = 4;
int RunGraphResponse::partition_graph_size() const {
  return partition_graph_.size();
}
void RunGraphResponse::clear_partition_graph() {
  partition_graph_.Clear();
}
const ::tensorflow::GraphDef& RunGraphResponse::partition_graph(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.RunGraphResponse.partition_graph)
  return partition_graph_.Get(index);
}
::tensorflow::GraphDef* RunGraphResponse::mutable_partition_graph(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.RunGraphResponse.partition_graph)
  return partition_graph_.Mutable(index);
}
::tensorflow::GraphDef* RunGraphResponse::add_partition_graph() {
  // @@protoc_insertion_point(field_add:tensorflow.RunGraphResponse.partition_graph)
  return partition_graph_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::GraphDef >*
RunGraphResponse::mutable_partition_graph() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.RunGraphResponse.partition_graph)
  return &partition_graph_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphDef >&
RunGraphResponse::partition_graph() const {
  // @@protoc_insertion_point(field_list:tensorflow.RunGraphResponse.partition_graph)
  return partition_graph_;
}

// optional .tensorflow.error.Code status_code = 5;
void RunGraphResponse::clear_status_code() {
  status_code_ = 0;
}
 ::tensorflow::error::Code RunGraphResponse::status_code() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunGraphResponse.status_code)
  return static_cast< ::tensorflow::error::Code >(status_code_);
}
 void RunGraphResponse::set_status_code(::tensorflow::error::Code value) {
  
  status_code_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RunGraphResponse.status_code)
}

// optional string status_error_message = 6;
void RunGraphResponse::clear_status_error_message() {
  status_error_message_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& RunGraphResponse::status_error_message() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunGraphResponse.status_error_message)
  return status_error_message_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RunGraphResponse::set_status_error_message(const ::std::string& value) {
  
  status_error_message_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.RunGraphResponse.status_error_message)
}
 void RunGraphResponse::set_status_error_message(const char* value) {
  
  status_error_message_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.RunGraphResponse.status_error_message)
}
 void RunGraphResponse::set_status_error_message(const char* value,
    size_t size) {
  
  status_error_message_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.RunGraphResponse.status_error_message)
}
 ::std::string* RunGraphResponse::mutable_status_error_message() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.RunGraphResponse.status_error_message)
  return status_error_message_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* RunGraphResponse::release_status_error_message() {
  // @@protoc_insertion_point(field_release:tensorflow.RunGraphResponse.status_error_message)
  
  return status_error_message_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* RunGraphResponse::unsafe_arena_release_status_error_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RunGraphResponse.status_error_message)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return status_error_message_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void RunGraphResponse::set_allocated_status_error_message(::std::string* status_error_message) {
  if (status_error_message != NULL) {
    
  } else {
    
  }
  status_error_message_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status_error_message,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunGraphResponse.status_error_message)
}
 void RunGraphResponse::unsafe_arena_set_allocated_status_error_message(
    ::std::string* status_error_message) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (status_error_message != NULL) {
    
  } else {
    
  }
  status_error_message_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      status_error_message, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RunGraphResponse.status_error_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CleanupGraphRequest::kStepIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CleanupGraphRequest::CleanupGraphRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CleanupGraphRequest)
}

CleanupGraphRequest::CleanupGraphRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CleanupGraphRequest)
}

void CleanupGraphRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CleanupGraphRequest::CleanupGraphRequest(const CleanupGraphRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.CleanupGraphRequest)
}

void CleanupGraphRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  step_id_ = GOOGLE_LONGLONG(0);
}

CleanupGraphRequest::~CleanupGraphRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.CleanupGraphRequest)
  SharedDtor();
}

void CleanupGraphRequest::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void CleanupGraphRequest::ArenaDtor(void* object) {
  CleanupGraphRequest* _this = reinterpret_cast< CleanupGraphRequest* >(object);
  (void)_this;
}
void CleanupGraphRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CleanupGraphRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CleanupGraphRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CleanupGraphRequest_descriptor_;
}

const CleanupGraphRequest& CleanupGraphRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fworker_2eproto();
  return *default_instance_;
}

CleanupGraphRequest* CleanupGraphRequest::default_instance_ = NULL;

CleanupGraphRequest* CleanupGraphRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CleanupGraphRequest>(arena);
}

void CleanupGraphRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CleanupGraphRequest)
  step_id_ = GOOGLE_LONGLONG(0);
}

bool CleanupGraphRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CleanupGraphRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 step_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &step_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CleanupGraphRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CleanupGraphRequest)
  return false;
#undef DO_
}

void CleanupGraphRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CleanupGraphRequest)
  // optional int64 step_id = 1;
  if (this->step_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->step_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.CleanupGraphRequest)
}

::google::protobuf::uint8* CleanupGraphRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CleanupGraphRequest)
  // optional int64 step_id = 1;
  if (this->step_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->step_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CleanupGraphRequest)
  return target;
}

int CleanupGraphRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CleanupGraphRequest)
  int total_size = 0;

  // optional int64 step_id = 1;
  if (this->step_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->step_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CleanupGraphRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CleanupGraphRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CleanupGraphRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CleanupGraphRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CleanupGraphRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CleanupGraphRequest)
    MergeFrom(*source);
  }
}

void CleanupGraphRequest::MergeFrom(const CleanupGraphRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CleanupGraphRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.step_id() != 0) {
    set_step_id(from.step_id());
  }
}

void CleanupGraphRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CleanupGraphRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CleanupGraphRequest::CopyFrom(const CleanupGraphRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CleanupGraphRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanupGraphRequest::IsInitialized() const {

  return true;
}

void CleanupGraphRequest::Swap(CleanupGraphRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CleanupGraphRequest temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void CleanupGraphRequest::UnsafeArenaSwap(CleanupGraphRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CleanupGraphRequest::InternalSwap(CleanupGraphRequest* other) {
  std::swap(step_id_, other->step_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CleanupGraphRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CleanupGraphRequest_descriptor_;
  metadata.reflection = CleanupGraphRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CleanupGraphRequest

// optional int64 step_id = 1;
void CleanupGraphRequest::clear_step_id() {
  step_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 CleanupGraphRequest::step_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.CleanupGraphRequest.step_id)
  return step_id_;
}
 void CleanupGraphRequest::set_step_id(::google::protobuf::int64 value) {
  
  step_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CleanupGraphRequest.step_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CleanupGraphResponse::CleanupGraphResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CleanupGraphResponse)
}

CleanupGraphResponse::CleanupGraphResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CleanupGraphResponse)
}

void CleanupGraphResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CleanupGraphResponse::CleanupGraphResponse(const CleanupGraphResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.CleanupGraphResponse)
}

void CleanupGraphResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

CleanupGraphResponse::~CleanupGraphResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.CleanupGraphResponse)
  SharedDtor();
}

void CleanupGraphResponse::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void CleanupGraphResponse::ArenaDtor(void* object) {
  CleanupGraphResponse* _this = reinterpret_cast< CleanupGraphResponse* >(object);
  (void)_this;
}
void CleanupGraphResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CleanupGraphResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CleanupGraphResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CleanupGraphResponse_descriptor_;
}

const CleanupGraphResponse& CleanupGraphResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fworker_2eproto();
  return *default_instance_;
}

CleanupGraphResponse* CleanupGraphResponse::default_instance_ = NULL;

CleanupGraphResponse* CleanupGraphResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CleanupGraphResponse>(arena);
}

void CleanupGraphResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CleanupGraphResponse)
}

bool CleanupGraphResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CleanupGraphResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CleanupGraphResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CleanupGraphResponse)
  return false;
#undef DO_
}

void CleanupGraphResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CleanupGraphResponse)
  // @@protoc_insertion_point(serialize_end:tensorflow.CleanupGraphResponse)
}

::google::protobuf::uint8* CleanupGraphResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CleanupGraphResponse)
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CleanupGraphResponse)
  return target;
}

int CleanupGraphResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CleanupGraphResponse)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CleanupGraphResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CleanupGraphResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CleanupGraphResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CleanupGraphResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CleanupGraphResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CleanupGraphResponse)
    MergeFrom(*source);
  }
}

void CleanupGraphResponse::MergeFrom(const CleanupGraphResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CleanupGraphResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void CleanupGraphResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CleanupGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CleanupGraphResponse::CopyFrom(const CleanupGraphResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CleanupGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanupGraphResponse::IsInitialized() const {

  return true;
}

void CleanupGraphResponse::Swap(CleanupGraphResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CleanupGraphResponse temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void CleanupGraphResponse::UnsafeArenaSwap(CleanupGraphResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CleanupGraphResponse::InternalSwap(CleanupGraphResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CleanupGraphResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CleanupGraphResponse_descriptor_;
  metadata.reflection = CleanupGraphResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CleanupGraphResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void RecvTensorRequest::_slow_mutable_client_locality() {
  client_locality_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::DeviceLocality >(
      GetArenaNoVirtual());
}
::tensorflow::DeviceLocality* RecvTensorRequest::_slow_release_client_locality() {
  if (client_locality_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::DeviceLocality* temp = new ::tensorflow::DeviceLocality;
    temp->MergeFrom(*client_locality_);
    client_locality_ = NULL;
    return temp;
  }
}
::tensorflow::DeviceLocality* RecvTensorRequest::unsafe_arena_release_client_locality() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RecvTensorRequest.client_locality)
  
  ::tensorflow::DeviceLocality* temp = client_locality_;
  client_locality_ = NULL;
  return temp;
}
void RecvTensorRequest::_slow_set_allocated_client_locality(
    ::google::protobuf::Arena* message_arena, ::tensorflow::DeviceLocality** client_locality) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*client_locality) == NULL) {
      message_arena->Own(*client_locality);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*client_locality)) {
      ::tensorflow::DeviceLocality* new_client_locality = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::DeviceLocality >(
            message_arena);
      new_client_locality->CopyFrom(**client_locality);
      *client_locality = new_client_locality;
    }
}
void RecvTensorRequest::unsafe_arena_set_allocated_client_locality(
    ::tensorflow::DeviceLocality* client_locality) {
  if (GetArenaNoVirtual() == NULL) {
    delete client_locality_;
  }
  client_locality_ = client_locality;
  if (client_locality) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RecvTensorRequest.client_locality)
}
void RecvTensorRequest::_slow_mutable_server_locality() {
  server_locality_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::DeviceLocality >(
      GetArenaNoVirtual());
}
::tensorflow::DeviceLocality* RecvTensorRequest::_slow_release_server_locality() {
  if (server_locality_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::DeviceLocality* temp = new ::tensorflow::DeviceLocality;
    temp->MergeFrom(*server_locality_);
    server_locality_ = NULL;
    return temp;
  }
}
::tensorflow::DeviceLocality* RecvTensorRequest::unsafe_arena_release_server_locality() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RecvTensorRequest.server_locality)
  
  ::tensorflow::DeviceLocality* temp = server_locality_;
  server_locality_ = NULL;
  return temp;
}
void RecvTensorRequest::_slow_set_allocated_server_locality(
    ::google::protobuf::Arena* message_arena, ::tensorflow::DeviceLocality** server_locality) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*server_locality) == NULL) {
      message_arena->Own(*server_locality);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*server_locality)) {
      ::tensorflow::DeviceLocality* new_server_locality = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::DeviceLocality >(
            message_arena);
      new_server_locality->CopyFrom(**server_locality);
      *server_locality = new_server_locality;
    }
}
void RecvTensorRequest::unsafe_arena_set_allocated_server_locality(
    ::tensorflow::DeviceLocality* server_locality) {
  if (GetArenaNoVirtual() == NULL) {
    delete server_locality_;
  }
  server_locality_ = server_locality;
  if (server_locality) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RecvTensorRequest.server_locality)
}
void RecvTensorRequest::_slow_mutable_transport_options() {
  transport_options_ = ::google::protobuf::Arena::Create< ::google::protobuf::Any >(
      GetArenaNoVirtual());
}
::google::protobuf::Any* RecvTensorRequest::_slow_release_transport_options() {
  if (transport_options_ == NULL) {
    return NULL;
  } else {
    ::google::protobuf::Any* temp = new ::google::protobuf::Any;
    temp->MergeFrom(*transport_options_);
    transport_options_ = NULL;
    return temp;
  }
}
::google::protobuf::Any* RecvTensorRequest::unsafe_arena_release_transport_options() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RecvTensorRequest.transport_options)
  
  ::google::protobuf::Any* temp = transport_options_;
  transport_options_ = NULL;
  return temp;
}
void RecvTensorRequest::unsafe_arena_set_allocated_transport_options(
    ::google::protobuf::Any* transport_options) {
  if (GetArenaNoVirtual() == NULL) {
    delete transport_options_;
  }
  transport_options_ = transport_options;
  if (transport_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RecvTensorRequest.transport_options)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecvTensorRequest::kStepIdFieldNumber;
const int RecvTensorRequest::kRendezvousKeyFieldNumber;
const int RecvTensorRequest::kDmaOkFieldNumber;
const int RecvTensorRequest::kClientLocalityFieldNumber;
const int RecvTensorRequest::kServerLocalityFieldNumber;
const int RecvTensorRequest::kTransportOptionsFieldNumber;
const int RecvTensorRequest::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecvTensorRequest::RecvTensorRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RecvTensorRequest)
}

RecvTensorRequest::RecvTensorRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RecvTensorRequest)
}

void RecvTensorRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  client_locality_ = const_cast< ::tensorflow::DeviceLocality*>(&::tensorflow::DeviceLocality::default_instance());
  server_locality_ = const_cast< ::tensorflow::DeviceLocality*>(&::tensorflow::DeviceLocality::default_instance());
  transport_options_ = const_cast< ::google::protobuf::Any*>(&::google::protobuf::Any::default_instance());
}

RecvTensorRequest::RecvTensorRequest(const RecvTensorRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.RecvTensorRequest)
}

void RecvTensorRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  step_id_ = GOOGLE_LONGLONG(0);
  rendezvous_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dma_ok_ = false;
  client_locality_ = NULL;
  server_locality_ = NULL;
  transport_options_ = NULL;
  request_id_ = GOOGLE_LONGLONG(0);
}

RecvTensorRequest::~RecvTensorRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.RecvTensorRequest)
  SharedDtor();
}

void RecvTensorRequest::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  rendezvous_key_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
    delete client_locality_;
    delete server_locality_;
    delete transport_options_;
  }
}

void RecvTensorRequest::ArenaDtor(void* object) {
  RecvTensorRequest* _this = reinterpret_cast< RecvTensorRequest* >(object);
  (void)_this;
}
void RecvTensorRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RecvTensorRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecvTensorRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecvTensorRequest_descriptor_;
}

const RecvTensorRequest& RecvTensorRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fworker_2eproto();
  return *default_instance_;
}

RecvTensorRequest* RecvTensorRequest::default_instance_ = NULL;

RecvTensorRequest* RecvTensorRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RecvTensorRequest>(arena);
}

void RecvTensorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RecvTensorRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RecvTensorRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RecvTensorRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(request_id_, dma_ok_);
  step_id_ = GOOGLE_LONGLONG(0);
  rendezvous_key_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && client_locality_ != NULL) delete client_locality_;
  client_locality_ = NULL;
  if (GetArenaNoVirtual() == NULL && server_locality_ != NULL) delete server_locality_;
  server_locality_ = NULL;
  if (GetArenaNoVirtual() == NULL && transport_options_ != NULL) delete transport_options_;
  transport_options_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool RecvTensorRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RecvTensorRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 step_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &step_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rendezvous_key;
        break;
      }

      // optional string rendezvous_key = 2;
      case 2: {
        if (tag == 18) {
         parse_rendezvous_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rendezvous_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rendezvous_key().data(), this->rendezvous_key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.RecvTensorRequest.rendezvous_key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dma_ok;
        break;
      }

      // optional bool dma_ok = 3;
      case 3: {
        if (tag == 24) {
         parse_dma_ok:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dma_ok_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_client_locality;
        break;
      }

      // optional .tensorflow.DeviceLocality client_locality = 4;
      case 4: {
        if (tag == 34) {
         parse_client_locality:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client_locality()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_server_locality;
        break;
      }

      // optional .tensorflow.DeviceLocality server_locality = 5;
      case 5: {
        if (tag == 42) {
         parse_server_locality:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server_locality()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_transport_options;
        break;
      }

      // optional .google.protobuf.Any transport_options = 6;
      case 6: {
        if (tag == 50) {
         parse_transport_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transport_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_request_id;
        break;
      }

      // optional int64 request_id = 7;
      case 7: {
        if (tag == 56) {
         parse_request_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RecvTensorRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RecvTensorRequest)
  return false;
#undef DO_
}

void RecvTensorRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RecvTensorRequest)
  // optional int64 step_id = 1;
  if (this->step_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->step_id(), output);
  }

  // optional string rendezvous_key = 2;
  if (this->rendezvous_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rendezvous_key().data(), this->rendezvous_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RecvTensorRequest.rendezvous_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rendezvous_key(), output);
  }

  // optional bool dma_ok = 3;
  if (this->dma_ok() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->dma_ok(), output);
  }

  // optional .tensorflow.DeviceLocality client_locality = 4;
  if (this->has_client_locality()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->client_locality_, output);
  }

  // optional .tensorflow.DeviceLocality server_locality = 5;
  if (this->has_server_locality()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->server_locality_, output);
  }

  // optional .google.protobuf.Any transport_options = 6;
  if (this->has_transport_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->transport_options_, output);
  }

  // optional int64 request_id = 7;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->request_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.RecvTensorRequest)
}

::google::protobuf::uint8* RecvTensorRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RecvTensorRequest)
  // optional int64 step_id = 1;
  if (this->step_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->step_id(), target);
  }

  // optional string rendezvous_key = 2;
  if (this->rendezvous_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rendezvous_key().data(), this->rendezvous_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RecvTensorRequest.rendezvous_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rendezvous_key(), target);
  }

  // optional bool dma_ok = 3;
  if (this->dma_ok() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->dma_ok(), target);
  }

  // optional .tensorflow.DeviceLocality client_locality = 4;
  if (this->has_client_locality()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->client_locality_, false, target);
  }

  // optional .tensorflow.DeviceLocality server_locality = 5;
  if (this->has_server_locality()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->server_locality_, false, target);
  }

  // optional .google.protobuf.Any transport_options = 6;
  if (this->has_transport_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->transport_options_, false, target);
  }

  // optional int64 request_id = 7;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->request_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RecvTensorRequest)
  return target;
}

int RecvTensorRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RecvTensorRequest)
  int total_size = 0;

  // optional int64 step_id = 1;
  if (this->step_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->step_id());
  }

  // optional string rendezvous_key = 2;
  if (this->rendezvous_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rendezvous_key());
  }

  // optional bool dma_ok = 3;
  if (this->dma_ok() != 0) {
    total_size += 1 + 1;
  }

  // optional .tensorflow.DeviceLocality client_locality = 4;
  if (this->has_client_locality()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->client_locality_);
  }

  // optional .tensorflow.DeviceLocality server_locality = 5;
  if (this->has_server_locality()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->server_locality_);
  }

  // optional .google.protobuf.Any transport_options = 6;
  if (this->has_transport_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transport_options_);
  }

  // optional int64 request_id = 7;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->request_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecvTensorRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RecvTensorRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RecvTensorRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RecvTensorRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RecvTensorRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RecvTensorRequest)
    MergeFrom(*source);
  }
}

void RecvTensorRequest::MergeFrom(const RecvTensorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RecvTensorRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.step_id() != 0) {
    set_step_id(from.step_id());
  }
  if (from.rendezvous_key().size() > 0) {
    set_rendezvous_key(from.rendezvous_key());
  }
  if (from.dma_ok() != 0) {
    set_dma_ok(from.dma_ok());
  }
  if (from.has_client_locality()) {
    mutable_client_locality()->::tensorflow::DeviceLocality::MergeFrom(from.client_locality());
  }
  if (from.has_server_locality()) {
    mutable_server_locality()->::tensorflow::DeviceLocality::MergeFrom(from.server_locality());
  }
  if (from.has_transport_options()) {
    mutable_transport_options()->::google::protobuf::Any::MergeFrom(from.transport_options());
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
}

void RecvTensorRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RecvTensorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecvTensorRequest::CopyFrom(const RecvTensorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RecvTensorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecvTensorRequest::IsInitialized() const {

  return true;
}

void RecvTensorRequest::Swap(RecvTensorRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RecvTensorRequest temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void RecvTensorRequest::UnsafeArenaSwap(RecvTensorRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RecvTensorRequest::InternalSwap(RecvTensorRequest* other) {
  std::swap(step_id_, other->step_id_);
  rendezvous_key_.Swap(&other->rendezvous_key_);
  std::swap(dma_ok_, other->dma_ok_);
  std::swap(client_locality_, other->client_locality_);
  std::swap(server_locality_, other->server_locality_);
  std::swap(transport_options_, other->transport_options_);
  std::swap(request_id_, other->request_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecvTensorRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecvTensorRequest_descriptor_;
  metadata.reflection = RecvTensorRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecvTensorRequest

// optional int64 step_id = 1;
void RecvTensorRequest::clear_step_id() {
  step_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RecvTensorRequest::step_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.RecvTensorRequest.step_id)
  return step_id_;
}
 void RecvTensorRequest::set_step_id(::google::protobuf::int64 value) {
  
  step_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RecvTensorRequest.step_id)
}

// optional string rendezvous_key = 2;
void RecvTensorRequest::clear_rendezvous_key() {
  rendezvous_key_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& RecvTensorRequest::rendezvous_key() const {
  // @@protoc_insertion_point(field_get:tensorflow.RecvTensorRequest.rendezvous_key)
  return rendezvous_key_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecvTensorRequest::set_rendezvous_key(const ::std::string& value) {
  
  rendezvous_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.RecvTensorRequest.rendezvous_key)
}
 void RecvTensorRequest::set_rendezvous_key(const char* value) {
  
  rendezvous_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.RecvTensorRequest.rendezvous_key)
}
 void RecvTensorRequest::set_rendezvous_key(const char* value,
    size_t size) {
  
  rendezvous_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.RecvTensorRequest.rendezvous_key)
}
 ::std::string* RecvTensorRequest::mutable_rendezvous_key() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.RecvTensorRequest.rendezvous_key)
  return rendezvous_key_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* RecvTensorRequest::release_rendezvous_key() {
  // @@protoc_insertion_point(field_release:tensorflow.RecvTensorRequest.rendezvous_key)
  
  return rendezvous_key_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* RecvTensorRequest::unsafe_arena_release_rendezvous_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RecvTensorRequest.rendezvous_key)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return rendezvous_key_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void RecvTensorRequest::set_allocated_rendezvous_key(::std::string* rendezvous_key) {
  if (rendezvous_key != NULL) {
    
  } else {
    
  }
  rendezvous_key_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rendezvous_key,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RecvTensorRequest.rendezvous_key)
}
 void RecvTensorRequest::unsafe_arena_set_allocated_rendezvous_key(
    ::std::string* rendezvous_key) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (rendezvous_key != NULL) {
    
  } else {
    
  }
  rendezvous_key_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      rendezvous_key, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RecvTensorRequest.rendezvous_key)
}

// optional bool dma_ok = 3;
void RecvTensorRequest::clear_dma_ok() {
  dma_ok_ = false;
}
 bool RecvTensorRequest::dma_ok() const {
  // @@protoc_insertion_point(field_get:tensorflow.RecvTensorRequest.dma_ok)
  return dma_ok_;
}
 void RecvTensorRequest::set_dma_ok(bool value) {
  
  dma_ok_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RecvTensorRequest.dma_ok)
}

// optional .tensorflow.DeviceLocality client_locality = 4;
bool RecvTensorRequest::has_client_locality() const {
  return !_is_default_instance_ && client_locality_ != NULL;
}
void RecvTensorRequest::clear_client_locality() {
  if (GetArenaNoVirtual() == NULL && client_locality_ != NULL) delete client_locality_;
  client_locality_ = NULL;
}
const ::tensorflow::DeviceLocality& RecvTensorRequest::client_locality() const {
  // @@protoc_insertion_point(field_get:tensorflow.RecvTensorRequest.client_locality)
  return client_locality_ != NULL ? *client_locality_ : *default_instance_->client_locality_;
}
::tensorflow::DeviceLocality* RecvTensorRequest::mutable_client_locality() {
  
  if (client_locality_ == NULL) {
    _slow_mutable_client_locality();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RecvTensorRequest.client_locality)
  return client_locality_;
}
::tensorflow::DeviceLocality* RecvTensorRequest::release_client_locality() {
  // @@protoc_insertion_point(field_release:tensorflow.RecvTensorRequest.client_locality)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_client_locality();
  } else {
    ::tensorflow::DeviceLocality* temp = client_locality_;
    client_locality_ = NULL;
    return temp;
  }
}
 void RecvTensorRequest::set_allocated_client_locality(::tensorflow::DeviceLocality* client_locality) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete client_locality_;
  }
  if (client_locality != NULL) {
    _slow_set_allocated_client_locality(message_arena, &client_locality);
  }
  client_locality_ = client_locality;
  if (client_locality) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RecvTensorRequest.client_locality)
}

// optional .tensorflow.DeviceLocality server_locality = 5;
bool RecvTensorRequest::has_server_locality() const {
  return !_is_default_instance_ && server_locality_ != NULL;
}
void RecvTensorRequest::clear_server_locality() {
  if (GetArenaNoVirtual() == NULL && server_locality_ != NULL) delete server_locality_;
  server_locality_ = NULL;
}
const ::tensorflow::DeviceLocality& RecvTensorRequest::server_locality() const {
  // @@protoc_insertion_point(field_get:tensorflow.RecvTensorRequest.server_locality)
  return server_locality_ != NULL ? *server_locality_ : *default_instance_->server_locality_;
}
::tensorflow::DeviceLocality* RecvTensorRequest::mutable_server_locality() {
  
  if (server_locality_ == NULL) {
    _slow_mutable_server_locality();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RecvTensorRequest.server_locality)
  return server_locality_;
}
::tensorflow::DeviceLocality* RecvTensorRequest::release_server_locality() {
  // @@protoc_insertion_point(field_release:tensorflow.RecvTensorRequest.server_locality)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_server_locality();
  } else {
    ::tensorflow::DeviceLocality* temp = server_locality_;
    server_locality_ = NULL;
    return temp;
  }
}
 void RecvTensorRequest::set_allocated_server_locality(::tensorflow::DeviceLocality* server_locality) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete server_locality_;
  }
  if (server_locality != NULL) {
    _slow_set_allocated_server_locality(message_arena, &server_locality);
  }
  server_locality_ = server_locality;
  if (server_locality) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RecvTensorRequest.server_locality)
}

// optional .google.protobuf.Any transport_options = 6;
bool RecvTensorRequest::has_transport_options() const {
  return !_is_default_instance_ && transport_options_ != NULL;
}
void RecvTensorRequest::clear_transport_options() {
  if (GetArenaNoVirtual() == NULL && transport_options_ != NULL) delete transport_options_;
  transport_options_ = NULL;
}
const ::google::protobuf::Any& RecvTensorRequest::transport_options() const {
  // @@protoc_insertion_point(field_get:tensorflow.RecvTensorRequest.transport_options)
  return transport_options_ != NULL ? *transport_options_ : *default_instance_->transport_options_;
}
::google::protobuf::Any* RecvTensorRequest::mutable_transport_options() {
  
  if (transport_options_ == NULL) {
    _slow_mutable_transport_options();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RecvTensorRequest.transport_options)
  return transport_options_;
}
::google::protobuf::Any* RecvTensorRequest::release_transport_options() {
  // @@protoc_insertion_point(field_release:tensorflow.RecvTensorRequest.transport_options)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_transport_options();
  } else {
    ::google::protobuf::Any* temp = transport_options_;
    transport_options_ = NULL;
    return temp;
  }
}
 void RecvTensorRequest::set_allocated_transport_options(::google::protobuf::Any* transport_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete transport_options_;
  }
  if (transport_options != NULL) {
    if (message_arena != NULL) {
      message_arena->Own(transport_options);
    }
  }
  transport_options_ = transport_options;
  if (transport_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RecvTensorRequest.transport_options)
}

// optional int64 request_id = 7;
void RecvTensorRequest::clear_request_id() {
  request_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RecvTensorRequest::request_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.RecvTensorRequest.request_id)
  return request_id_;
}
 void RecvTensorRequest::set_request_id(::google::protobuf::int64 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RecvTensorRequest.request_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void RecvTensorResponse::_slow_mutable_tensor() {
  tensor_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::TensorProto >(
      GetArenaNoVirtual());
}
::tensorflow::TensorProto* RecvTensorResponse::_slow_release_tensor() {
  if (tensor_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::TensorProto* temp = new ::tensorflow::TensorProto;
    temp->MergeFrom(*tensor_);
    tensor_ = NULL;
    return temp;
  }
}
::tensorflow::TensorProto* RecvTensorResponse::unsafe_arena_release_tensor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RecvTensorResponse.tensor)
  
  ::tensorflow::TensorProto* temp = tensor_;
  tensor_ = NULL;
  return temp;
}
void RecvTensorResponse::_slow_set_allocated_tensor(
    ::google::protobuf::Arena* message_arena, ::tensorflow::TensorProto** tensor) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*tensor) == NULL) {
      message_arena->Own(*tensor);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*tensor)) {
      ::tensorflow::TensorProto* new_tensor = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::TensorProto >(
            message_arena);
      new_tensor->CopyFrom(**tensor);
      *tensor = new_tensor;
    }
}
void RecvTensorResponse::unsafe_arena_set_allocated_tensor(
    ::tensorflow::TensorProto* tensor) {
  if (GetArenaNoVirtual() == NULL) {
    delete tensor_;
  }
  tensor_ = tensor;
  if (tensor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RecvTensorResponse.tensor)
}
void RecvTensorResponse::_slow_mutable_transport_options() {
  transport_options_ = ::google::protobuf::Arena::Create< ::google::protobuf::Any >(
      GetArenaNoVirtual());
}
::google::protobuf::Any* RecvTensorResponse::_slow_release_transport_options() {
  if (transport_options_ == NULL) {
    return NULL;
  } else {
    ::google::protobuf::Any* temp = new ::google::protobuf::Any;
    temp->MergeFrom(*transport_options_);
    transport_options_ = NULL;
    return temp;
  }
}
::google::protobuf::Any* RecvTensorResponse::unsafe_arena_release_transport_options() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RecvTensorResponse.transport_options)
  
  ::google::protobuf::Any* temp = transport_options_;
  transport_options_ = NULL;
  return temp;
}
void RecvTensorResponse::unsafe_arena_set_allocated_transport_options(
    ::google::protobuf::Any* transport_options) {
  if (GetArenaNoVirtual() == NULL) {
    delete transport_options_;
  }
  transport_options_ = transport_options;
  if (transport_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RecvTensorResponse.transport_options)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecvTensorResponse::kTensorFieldNumber;
const int RecvTensorResponse::kIsDeadFieldNumber;
const int RecvTensorResponse::kSendStartMicrosFieldNumber;
const int RecvTensorResponse::kTransportOptionsFieldNumber;
const int RecvTensorResponse::kRequireAckFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecvTensorResponse::RecvTensorResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RecvTensorResponse)
}

RecvTensorResponse::RecvTensorResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RecvTensorResponse)
}

void RecvTensorResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  tensor_ = const_cast< ::tensorflow::TensorProto*>(&::tensorflow::TensorProto::default_instance());
  transport_options_ = const_cast< ::google::protobuf::Any*>(&::google::protobuf::Any::default_instance());
}

RecvTensorResponse::RecvTensorResponse(const RecvTensorResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.RecvTensorResponse)
}

void RecvTensorResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  tensor_ = NULL;
  is_dead_ = false;
  send_start_micros_ = GOOGLE_LONGLONG(0);
  transport_options_ = NULL;
  require_ack_ = false;
}

RecvTensorResponse::~RecvTensorResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.RecvTensorResponse)
  SharedDtor();
}

void RecvTensorResponse::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
    delete tensor_;
    delete transport_options_;
  }
}

void RecvTensorResponse::ArenaDtor(void* object) {
  RecvTensorResponse* _this = reinterpret_cast< RecvTensorResponse* >(object);
  (void)_this;
}
void RecvTensorResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RecvTensorResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecvTensorResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecvTensorResponse_descriptor_;
}

const RecvTensorResponse& RecvTensorResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fworker_2eproto();
  return *default_instance_;
}

RecvTensorResponse* RecvTensorResponse::default_instance_ = NULL;

RecvTensorResponse* RecvTensorResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RecvTensorResponse>(arena);
}

void RecvTensorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RecvTensorResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RecvTensorResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RecvTensorResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(is_dead_, require_ack_);
  if (GetArenaNoVirtual() == NULL && tensor_ != NULL) delete tensor_;
  tensor_ = NULL;
  send_start_micros_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && transport_options_ != NULL) delete transport_options_;
  transport_options_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool RecvTensorResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RecvTensorResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tensorflow.TensorProto tensor = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tensor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_dead;
        break;
      }

      // optional bool is_dead = 2;
      case 2: {
        if (tag == 16) {
         parse_is_dead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dead_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_send_start_micros;
        break;
      }

      // optional int64 send_start_micros = 3;
      case 3: {
        if (tag == 24) {
         parse_send_start_micros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &send_start_micros_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_transport_options;
        break;
      }

      // optional .google.protobuf.Any transport_options = 4;
      case 4: {
        if (tag == 34) {
         parse_transport_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transport_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_require_ack;
        break;
      }

      // optional bool require_ack = 5;
      case 5: {
        if (tag == 40) {
         parse_require_ack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &require_ack_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RecvTensorResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RecvTensorResponse)
  return false;
#undef DO_
}

void RecvTensorResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RecvTensorResponse)
  // optional .tensorflow.TensorProto tensor = 1;
  if (this->has_tensor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->tensor_, output);
  }

  // optional bool is_dead = 2;
  if (this->is_dead() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_dead(), output);
  }

  // optional int64 send_start_micros = 3;
  if (this->send_start_micros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->send_start_micros(), output);
  }

  // optional .google.protobuf.Any transport_options = 4;
  if (this->has_transport_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->transport_options_, output);
  }

  // optional bool require_ack = 5;
  if (this->require_ack() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->require_ack(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.RecvTensorResponse)
}

::google::protobuf::uint8* RecvTensorResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RecvTensorResponse)
  // optional .tensorflow.TensorProto tensor = 1;
  if (this->has_tensor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->tensor_, false, target);
  }

  // optional bool is_dead = 2;
  if (this->is_dead() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_dead(), target);
  }

  // optional int64 send_start_micros = 3;
  if (this->send_start_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->send_start_micros(), target);
  }

  // optional .google.protobuf.Any transport_options = 4;
  if (this->has_transport_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->transport_options_, false, target);
  }

  // optional bool require_ack = 5;
  if (this->require_ack() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->require_ack(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RecvTensorResponse)
  return target;
}

int RecvTensorResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RecvTensorResponse)
  int total_size = 0;

  // optional .tensorflow.TensorProto tensor = 1;
  if (this->has_tensor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tensor_);
  }

  // optional bool is_dead = 2;
  if (this->is_dead() != 0) {
    total_size += 1 + 1;
  }

  // optional int64 send_start_micros = 3;
  if (this->send_start_micros() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->send_start_micros());
  }

  // optional .google.protobuf.Any transport_options = 4;
  if (this->has_transport_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transport_options_);
  }

  // optional bool require_ack = 5;
  if (this->require_ack() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecvTensorResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RecvTensorResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RecvTensorResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RecvTensorResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RecvTensorResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RecvTensorResponse)
    MergeFrom(*source);
  }
}

void RecvTensorResponse::MergeFrom(const RecvTensorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RecvTensorResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_tensor()) {
    mutable_tensor()->::tensorflow::TensorProto::MergeFrom(from.tensor());
  }
  if (from.is_dead() != 0) {
    set_is_dead(from.is_dead());
  }
  if (from.send_start_micros() != 0) {
    set_send_start_micros(from.send_start_micros());
  }
  if (from.has_transport_options()) {
    mutable_transport_options()->::google::protobuf::Any::MergeFrom(from.transport_options());
  }
  if (from.require_ack() != 0) {
    set_require_ack(from.require_ack());
  }
}

void RecvTensorResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RecvTensorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecvTensorResponse::CopyFrom(const RecvTensorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RecvTensorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecvTensorResponse::IsInitialized() const {

  return true;
}

void RecvTensorResponse::Swap(RecvTensorResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RecvTensorResponse temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void RecvTensorResponse::UnsafeArenaSwap(RecvTensorResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RecvTensorResponse::InternalSwap(RecvTensorResponse* other) {
  std::swap(tensor_, other->tensor_);
  std::swap(is_dead_, other->is_dead_);
  std::swap(send_start_micros_, other->send_start_micros_);
  std::swap(transport_options_, other->transport_options_);
  std::swap(require_ack_, other->require_ack_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecvTensorResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecvTensorResponse_descriptor_;
  metadata.reflection = RecvTensorResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecvTensorResponse

// optional .tensorflow.TensorProto tensor = 1;
bool RecvTensorResponse::has_tensor() const {
  return !_is_default_instance_ && tensor_ != NULL;
}
void RecvTensorResponse::clear_tensor() {
  if (GetArenaNoVirtual() == NULL && tensor_ != NULL) delete tensor_;
  tensor_ = NULL;
}
const ::tensorflow::TensorProto& RecvTensorResponse::tensor() const {
  // @@protoc_insertion_point(field_get:tensorflow.RecvTensorResponse.tensor)
  return tensor_ != NULL ? *tensor_ : *default_instance_->tensor_;
}
::tensorflow::TensorProto* RecvTensorResponse::mutable_tensor() {
  
  if (tensor_ == NULL) {
    _slow_mutable_tensor();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RecvTensorResponse.tensor)
  return tensor_;
}
::tensorflow::TensorProto* RecvTensorResponse::release_tensor() {
  // @@protoc_insertion_point(field_release:tensorflow.RecvTensorResponse.tensor)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_tensor();
  } else {
    ::tensorflow::TensorProto* temp = tensor_;
    tensor_ = NULL;
    return temp;
  }
}
 void RecvTensorResponse::set_allocated_tensor(::tensorflow::TensorProto* tensor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tensor_;
  }
  if (tensor != NULL) {
    _slow_set_allocated_tensor(message_arena, &tensor);
  }
  tensor_ = tensor;
  if (tensor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RecvTensorResponse.tensor)
}

// optional bool is_dead = 2;
void RecvTensorResponse::clear_is_dead() {
  is_dead_ = false;
}
 bool RecvTensorResponse::is_dead() const {
  // @@protoc_insertion_point(field_get:tensorflow.RecvTensorResponse.is_dead)
  return is_dead_;
}
 void RecvTensorResponse::set_is_dead(bool value) {
  
  is_dead_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RecvTensorResponse.is_dead)
}

// optional int64 send_start_micros = 3;
void RecvTensorResponse::clear_send_start_micros() {
  send_start_micros_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RecvTensorResponse::send_start_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.RecvTensorResponse.send_start_micros)
  return send_start_micros_;
}
 void RecvTensorResponse::set_send_start_micros(::google::protobuf::int64 value) {
  
  send_start_micros_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RecvTensorResponse.send_start_micros)
}

// optional .google.protobuf.Any transport_options = 4;
bool RecvTensorResponse::has_transport_options() const {
  return !_is_default_instance_ && transport_options_ != NULL;
}
void RecvTensorResponse::clear_transport_options() {
  if (GetArenaNoVirtual() == NULL && transport_options_ != NULL) delete transport_options_;
  transport_options_ = NULL;
}
const ::google::protobuf::Any& RecvTensorResponse::transport_options() const {
  // @@protoc_insertion_point(field_get:tensorflow.RecvTensorResponse.transport_options)
  return transport_options_ != NULL ? *transport_options_ : *default_instance_->transport_options_;
}
::google::protobuf::Any* RecvTensorResponse::mutable_transport_options() {
  
  if (transport_options_ == NULL) {
    _slow_mutable_transport_options();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RecvTensorResponse.transport_options)
  return transport_options_;
}
::google::protobuf::Any* RecvTensorResponse::release_transport_options() {
  // @@protoc_insertion_point(field_release:tensorflow.RecvTensorResponse.transport_options)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_transport_options();
  } else {
    ::google::protobuf::Any* temp = transport_options_;
    transport_options_ = NULL;
    return temp;
  }
}
 void RecvTensorResponse::set_allocated_transport_options(::google::protobuf::Any* transport_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete transport_options_;
  }
  if (transport_options != NULL) {
    if (message_arena != NULL) {
      message_arena->Own(transport_options);
    }
  }
  transport_options_ = transport_options;
  if (transport_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RecvTensorResponse.transport_options)
}

// optional bool require_ack = 5;
void RecvTensorResponse::clear_require_ack() {
  require_ack_ = false;
}
 bool RecvTensorResponse::require_ack() const {
  // @@protoc_insertion_point(field_get:tensorflow.RecvTensorResponse.require_ack)
  return require_ack_;
}
 void RecvTensorResponse::set_require_ack(bool value) {
  
  require_ack_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RecvTensorResponse.require_ack)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarkRecvFinishedRequest::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarkRecvFinishedRequest::MarkRecvFinishedRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.MarkRecvFinishedRequest)
}

MarkRecvFinishedRequest::MarkRecvFinishedRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MarkRecvFinishedRequest)
}

void MarkRecvFinishedRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MarkRecvFinishedRequest::MarkRecvFinishedRequest(const MarkRecvFinishedRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.MarkRecvFinishedRequest)
}

void MarkRecvFinishedRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  request_id_ = GOOGLE_LONGLONG(0);
}

MarkRecvFinishedRequest::~MarkRecvFinishedRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.MarkRecvFinishedRequest)
  SharedDtor();
}

void MarkRecvFinishedRequest::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void MarkRecvFinishedRequest::ArenaDtor(void* object) {
  MarkRecvFinishedRequest* _this = reinterpret_cast< MarkRecvFinishedRequest* >(object);
  (void)_this;
}
void MarkRecvFinishedRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MarkRecvFinishedRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarkRecvFinishedRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarkRecvFinishedRequest_descriptor_;
}

const MarkRecvFinishedRequest& MarkRecvFinishedRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fworker_2eproto();
  return *default_instance_;
}

MarkRecvFinishedRequest* MarkRecvFinishedRequest::default_instance_ = NULL;

MarkRecvFinishedRequest* MarkRecvFinishedRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<MarkRecvFinishedRequest>(arena);
}

void MarkRecvFinishedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MarkRecvFinishedRequest)
  request_id_ = GOOGLE_LONGLONG(0);
}

bool MarkRecvFinishedRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.MarkRecvFinishedRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 request_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.MarkRecvFinishedRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.MarkRecvFinishedRequest)
  return false;
#undef DO_
}

void MarkRecvFinishedRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.MarkRecvFinishedRequest)
  // optional int64 request_id = 1;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->request_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.MarkRecvFinishedRequest)
}

::google::protobuf::uint8* MarkRecvFinishedRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MarkRecvFinishedRequest)
  // optional int64 request_id = 1;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->request_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MarkRecvFinishedRequest)
  return target;
}

int MarkRecvFinishedRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MarkRecvFinishedRequest)
  int total_size = 0;

  // optional int64 request_id = 1;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->request_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarkRecvFinishedRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.MarkRecvFinishedRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MarkRecvFinishedRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MarkRecvFinishedRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.MarkRecvFinishedRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.MarkRecvFinishedRequest)
    MergeFrom(*source);
  }
}

void MarkRecvFinishedRequest::MergeFrom(const MarkRecvFinishedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MarkRecvFinishedRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
}

void MarkRecvFinishedRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.MarkRecvFinishedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarkRecvFinishedRequest::CopyFrom(const MarkRecvFinishedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MarkRecvFinishedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkRecvFinishedRequest::IsInitialized() const {

  return true;
}

void MarkRecvFinishedRequest::Swap(MarkRecvFinishedRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MarkRecvFinishedRequest temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void MarkRecvFinishedRequest::UnsafeArenaSwap(MarkRecvFinishedRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MarkRecvFinishedRequest::InternalSwap(MarkRecvFinishedRequest* other) {
  std::swap(request_id_, other->request_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MarkRecvFinishedRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarkRecvFinishedRequest_descriptor_;
  metadata.reflection = MarkRecvFinishedRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MarkRecvFinishedRequest

// optional int64 request_id = 1;
void MarkRecvFinishedRequest::clear_request_id() {
  request_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 MarkRecvFinishedRequest::request_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.MarkRecvFinishedRequest.request_id)
  return request_id_;
}
 void MarkRecvFinishedRequest::set_request_id(::google::protobuf::int64 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MarkRecvFinishedRequest.request_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarkRecvFinishedResponse::MarkRecvFinishedResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.MarkRecvFinishedResponse)
}

MarkRecvFinishedResponse::MarkRecvFinishedResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MarkRecvFinishedResponse)
}

void MarkRecvFinishedResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MarkRecvFinishedResponse::MarkRecvFinishedResponse(const MarkRecvFinishedResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.MarkRecvFinishedResponse)
}

void MarkRecvFinishedResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

MarkRecvFinishedResponse::~MarkRecvFinishedResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.MarkRecvFinishedResponse)
  SharedDtor();
}

void MarkRecvFinishedResponse::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void MarkRecvFinishedResponse::ArenaDtor(void* object) {
  MarkRecvFinishedResponse* _this = reinterpret_cast< MarkRecvFinishedResponse* >(object);
  (void)_this;
}
void MarkRecvFinishedResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MarkRecvFinishedResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarkRecvFinishedResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarkRecvFinishedResponse_descriptor_;
}

const MarkRecvFinishedResponse& MarkRecvFinishedResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fworker_2eproto();
  return *default_instance_;
}

MarkRecvFinishedResponse* MarkRecvFinishedResponse::default_instance_ = NULL;

MarkRecvFinishedResponse* MarkRecvFinishedResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<MarkRecvFinishedResponse>(arena);
}

void MarkRecvFinishedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MarkRecvFinishedResponse)
}

bool MarkRecvFinishedResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.MarkRecvFinishedResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.MarkRecvFinishedResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.MarkRecvFinishedResponse)
  return false;
#undef DO_
}

void MarkRecvFinishedResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.MarkRecvFinishedResponse)
  // @@protoc_insertion_point(serialize_end:tensorflow.MarkRecvFinishedResponse)
}

::google::protobuf::uint8* MarkRecvFinishedResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MarkRecvFinishedResponse)
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MarkRecvFinishedResponse)
  return target;
}

int MarkRecvFinishedResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MarkRecvFinishedResponse)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarkRecvFinishedResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.MarkRecvFinishedResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MarkRecvFinishedResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MarkRecvFinishedResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.MarkRecvFinishedResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.MarkRecvFinishedResponse)
    MergeFrom(*source);
  }
}

void MarkRecvFinishedResponse::MergeFrom(const MarkRecvFinishedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MarkRecvFinishedResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void MarkRecvFinishedResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.MarkRecvFinishedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarkRecvFinishedResponse::CopyFrom(const MarkRecvFinishedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MarkRecvFinishedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkRecvFinishedResponse::IsInitialized() const {

  return true;
}

void MarkRecvFinishedResponse::Swap(MarkRecvFinishedResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MarkRecvFinishedResponse temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void MarkRecvFinishedResponse::UnsafeArenaSwap(MarkRecvFinishedResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MarkRecvFinishedResponse::InternalSwap(MarkRecvFinishedResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MarkRecvFinishedResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarkRecvFinishedResponse_descriptor_;
  metadata.reflection = MarkRecvFinishedResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MarkRecvFinishedResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoggingRequest::kEnableRpcLoggingFieldNumber;
const int LoggingRequest::kDisableRpcLoggingFieldNumber;
const int LoggingRequest::kClearFieldNumber;
const int LoggingRequest::kFetchStepIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoggingRequest::LoggingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.LoggingRequest)
}

LoggingRequest::LoggingRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  fetch_step_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.LoggingRequest)
}

void LoggingRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LoggingRequest::LoggingRequest(const LoggingRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.LoggingRequest)
}

void LoggingRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  enable_rpc_logging_ = false;
  disable_rpc_logging_ = false;
  clear_ = false;
}

LoggingRequest::~LoggingRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.LoggingRequest)
  SharedDtor();
}

void LoggingRequest::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void LoggingRequest::ArenaDtor(void* object) {
  LoggingRequest* _this = reinterpret_cast< LoggingRequest* >(object);
  (void)_this;
}
void LoggingRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LoggingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoggingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoggingRequest_descriptor_;
}

const LoggingRequest& LoggingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fworker_2eproto();
  return *default_instance_;
}

LoggingRequest* LoggingRequest::default_instance_ = NULL;

LoggingRequest* LoggingRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<LoggingRequest>(arena);
}

void LoggingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.LoggingRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LoggingRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LoggingRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(enable_rpc_logging_, clear_);

#undef ZR_HELPER_
#undef ZR_

  fetch_step_id_.Clear();
}

bool LoggingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.LoggingRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enable_rpc_logging = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_rpc_logging_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_clear;
        break;
      }

      // optional bool clear = 2;
      case 2: {
        if (tag == 16) {
         parse_clear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clear_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fetch_step_id;
        break;
      }

      // repeated int64 fetch_step_id = 3;
      case 3: {
        if (tag == 26) {
         parse_fetch_step_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_fetch_step_id())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 26, input, this->mutable_fetch_step_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_disable_rpc_logging;
        break;
      }

      // optional bool disable_rpc_logging = 4;
      case 4: {
        if (tag == 32) {
         parse_disable_rpc_logging:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_rpc_logging_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.LoggingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.LoggingRequest)
  return false;
#undef DO_
}

void LoggingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.LoggingRequest)
  // optional bool enable_rpc_logging = 1;
  if (this->enable_rpc_logging() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable_rpc_logging(), output);
  }

  // optional bool clear = 2;
  if (this->clear() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->clear(), output);
  }

  // repeated int64 fetch_step_id = 3;
  if (this->fetch_step_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_fetch_step_id_cached_byte_size_);
  }
  for (int i = 0; i < this->fetch_step_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->fetch_step_id(i), output);
  }

  // optional bool disable_rpc_logging = 4;
  if (this->disable_rpc_logging() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->disable_rpc_logging(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.LoggingRequest)
}

::google::protobuf::uint8* LoggingRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.LoggingRequest)
  // optional bool enable_rpc_logging = 1;
  if (this->enable_rpc_logging() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable_rpc_logging(), target);
  }

  // optional bool clear = 2;
  if (this->clear() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->clear(), target);
  }

  // repeated int64 fetch_step_id = 3;
  if (this->fetch_step_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _fetch_step_id_cached_byte_size_, target);
  }
  for (int i = 0; i < this->fetch_step_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->fetch_step_id(i), target);
  }

  // optional bool disable_rpc_logging = 4;
  if (this->disable_rpc_logging() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->disable_rpc_logging(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.LoggingRequest)
  return target;
}

int LoggingRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.LoggingRequest)
  int total_size = 0;

  // optional bool enable_rpc_logging = 1;
  if (this->enable_rpc_logging() != 0) {
    total_size += 1 + 1;
  }

  // optional bool disable_rpc_logging = 4;
  if (this->disable_rpc_logging() != 0) {
    total_size += 1 + 1;
  }

  // optional bool clear = 2;
  if (this->clear() != 0) {
    total_size += 1 + 1;
  }

  // repeated int64 fetch_step_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->fetch_step_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->fetch_step_id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _fetch_step_id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoggingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.LoggingRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LoggingRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LoggingRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.LoggingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.LoggingRequest)
    MergeFrom(*source);
  }
}

void LoggingRequest::MergeFrom(const LoggingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.LoggingRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  fetch_step_id_.MergeFrom(from.fetch_step_id_);
  if (from.enable_rpc_logging() != 0) {
    set_enable_rpc_logging(from.enable_rpc_logging());
  }
  if (from.disable_rpc_logging() != 0) {
    set_disable_rpc_logging(from.disable_rpc_logging());
  }
  if (from.clear() != 0) {
    set_clear(from.clear());
  }
}

void LoggingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.LoggingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoggingRequest::CopyFrom(const LoggingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.LoggingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoggingRequest::IsInitialized() const {

  return true;
}

void LoggingRequest::Swap(LoggingRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LoggingRequest temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void LoggingRequest::UnsafeArenaSwap(LoggingRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LoggingRequest::InternalSwap(LoggingRequest* other) {
  std::swap(enable_rpc_logging_, other->enable_rpc_logging_);
  std::swap(disable_rpc_logging_, other->disable_rpc_logging_);
  std::swap(clear_, other->clear_);
  fetch_step_id_.UnsafeArenaSwap(&other->fetch_step_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoggingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoggingRequest_descriptor_;
  metadata.reflection = LoggingRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoggingRequest

// optional bool enable_rpc_logging = 1;
void LoggingRequest::clear_enable_rpc_logging() {
  enable_rpc_logging_ = false;
}
 bool LoggingRequest::enable_rpc_logging() const {
  // @@protoc_insertion_point(field_get:tensorflow.LoggingRequest.enable_rpc_logging)
  return enable_rpc_logging_;
}
 void LoggingRequest::set_enable_rpc_logging(bool value) {
  
  enable_rpc_logging_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.LoggingRequest.enable_rpc_logging)
}

// optional bool disable_rpc_logging = 4;
void LoggingRequest::clear_disable_rpc_logging() {
  disable_rpc_logging_ = false;
}
 bool LoggingRequest::disable_rpc_logging() const {
  // @@protoc_insertion_point(field_get:tensorflow.LoggingRequest.disable_rpc_logging)
  return disable_rpc_logging_;
}
 void LoggingRequest::set_disable_rpc_logging(bool value) {
  
  disable_rpc_logging_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.LoggingRequest.disable_rpc_logging)
}

// optional bool clear = 2;
void LoggingRequest::clear_clear() {
  clear_ = false;
}
 bool LoggingRequest::clear() const {
  // @@protoc_insertion_point(field_get:tensorflow.LoggingRequest.clear)
  return clear_;
}
 void LoggingRequest::set_clear(bool value) {
  
  clear_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.LoggingRequest.clear)
}

// repeated int64 fetch_step_id = 3;
int LoggingRequest::fetch_step_id_size() const {
  return fetch_step_id_.size();
}
void LoggingRequest::clear_fetch_step_id() {
  fetch_step_id_.Clear();
}
 ::google::protobuf::int64 LoggingRequest::fetch_step_id(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.LoggingRequest.fetch_step_id)
  return fetch_step_id_.Get(index);
}
 void LoggingRequest::set_fetch_step_id(int index, ::google::protobuf::int64 value) {
  fetch_step_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.LoggingRequest.fetch_step_id)
}
 void LoggingRequest::add_fetch_step_id(::google::protobuf::int64 value) {
  fetch_step_id_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.LoggingRequest.fetch_step_id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
LoggingRequest::fetch_step_id() const {
  // @@protoc_insertion_point(field_list:tensorflow.LoggingRequest.fetch_step_id)
  return fetch_step_id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
LoggingRequest::mutable_fetch_step_id() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.LoggingRequest.fetch_step_id)
  return &fetch_step_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void LabeledStepStats::_slow_mutable_step_stats() {
  step_stats_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::StepStats >(
      GetArenaNoVirtual());
}
::tensorflow::StepStats* LabeledStepStats::_slow_release_step_stats() {
  if (step_stats_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::StepStats* temp = new ::tensorflow::StepStats;
    temp->MergeFrom(*step_stats_);
    step_stats_ = NULL;
    return temp;
  }
}
::tensorflow::StepStats* LabeledStepStats::unsafe_arena_release_step_stats() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.LabeledStepStats.step_stats)
  
  ::tensorflow::StepStats* temp = step_stats_;
  step_stats_ = NULL;
  return temp;
}
void LabeledStepStats::_slow_set_allocated_step_stats(
    ::google::protobuf::Arena* message_arena, ::tensorflow::StepStats** step_stats) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*step_stats) == NULL) {
      message_arena->Own(*step_stats);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*step_stats)) {
      ::tensorflow::StepStats* new_step_stats = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::StepStats >(
            message_arena);
      new_step_stats->CopyFrom(**step_stats);
      *step_stats = new_step_stats;
    }
}
void LabeledStepStats::unsafe_arena_set_allocated_step_stats(
    ::tensorflow::StepStats* step_stats) {
  if (GetArenaNoVirtual() == NULL) {
    delete step_stats_;
  }
  step_stats_ = step_stats;
  if (step_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.LabeledStepStats.step_stats)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LabeledStepStats::kStepIdFieldNumber;
const int LabeledStepStats::kStepStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LabeledStepStats::LabeledStepStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.LabeledStepStats)
}

LabeledStepStats::LabeledStepStats(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.LabeledStepStats)
}

void LabeledStepStats::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  step_stats_ = const_cast< ::tensorflow::StepStats*>(&::tensorflow::StepStats::default_instance());
}

LabeledStepStats::LabeledStepStats(const LabeledStepStats& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.LabeledStepStats)
}

void LabeledStepStats::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  step_id_ = GOOGLE_LONGLONG(0);
  step_stats_ = NULL;
}

LabeledStepStats::~LabeledStepStats() {
  // @@protoc_insertion_point(destructor:tensorflow.LabeledStepStats)
  SharedDtor();
}

void LabeledStepStats::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
    delete step_stats_;
  }
}

void LabeledStepStats::ArenaDtor(void* object) {
  LabeledStepStats* _this = reinterpret_cast< LabeledStepStats* >(object);
  (void)_this;
}
void LabeledStepStats::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LabeledStepStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabeledStepStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LabeledStepStats_descriptor_;
}

const LabeledStepStats& LabeledStepStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fworker_2eproto();
  return *default_instance_;
}

LabeledStepStats* LabeledStepStats::default_instance_ = NULL;

LabeledStepStats* LabeledStepStats::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<LabeledStepStats>(arena);
}

void LabeledStepStats::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.LabeledStepStats)
  step_id_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && step_stats_ != NULL) delete step_stats_;
  step_stats_ = NULL;
}

bool LabeledStepStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.LabeledStepStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 step_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &step_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_step_stats;
        break;
      }

      // optional .tensorflow.StepStats step_stats = 2;
      case 2: {
        if (tag == 18) {
         parse_step_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_step_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.LabeledStepStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.LabeledStepStats)
  return false;
#undef DO_
}

void LabeledStepStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.LabeledStepStats)
  // optional int64 step_id = 1;
  if (this->step_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->step_id(), output);
  }

  // optional .tensorflow.StepStats step_stats = 2;
  if (this->has_step_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->step_stats_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.LabeledStepStats)
}

::google::protobuf::uint8* LabeledStepStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.LabeledStepStats)
  // optional int64 step_id = 1;
  if (this->step_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->step_id(), target);
  }

  // optional .tensorflow.StepStats step_stats = 2;
  if (this->has_step_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->step_stats_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.LabeledStepStats)
  return target;
}

int LabeledStepStats::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.LabeledStepStats)
  int total_size = 0;

  // optional int64 step_id = 1;
  if (this->step_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->step_id());
  }

  // optional .tensorflow.StepStats step_stats = 2;
  if (this->has_step_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->step_stats_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabeledStepStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.LabeledStepStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LabeledStepStats* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LabeledStepStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.LabeledStepStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.LabeledStepStats)
    MergeFrom(*source);
  }
}

void LabeledStepStats::MergeFrom(const LabeledStepStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.LabeledStepStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.step_id() != 0) {
    set_step_id(from.step_id());
  }
  if (from.has_step_stats()) {
    mutable_step_stats()->::tensorflow::StepStats::MergeFrom(from.step_stats());
  }
}

void LabeledStepStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.LabeledStepStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabeledStepStats::CopyFrom(const LabeledStepStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.LabeledStepStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabeledStepStats::IsInitialized() const {

  return true;
}

void LabeledStepStats::Swap(LabeledStepStats* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LabeledStepStats temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void LabeledStepStats::UnsafeArenaSwap(LabeledStepStats* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LabeledStepStats::InternalSwap(LabeledStepStats* other) {
  std::swap(step_id_, other->step_id_);
  std::swap(step_stats_, other->step_stats_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LabeledStepStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LabeledStepStats_descriptor_;
  metadata.reflection = LabeledStepStats_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LabeledStepStats

// optional int64 step_id = 1;
void LabeledStepStats::clear_step_id() {
  step_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 LabeledStepStats::step_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.LabeledStepStats.step_id)
  return step_id_;
}
 void LabeledStepStats::set_step_id(::google::protobuf::int64 value) {
  
  step_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.LabeledStepStats.step_id)
}

// optional .tensorflow.StepStats step_stats = 2;
bool LabeledStepStats::has_step_stats() const {
  return !_is_default_instance_ && step_stats_ != NULL;
}
void LabeledStepStats::clear_step_stats() {
  if (GetArenaNoVirtual() == NULL && step_stats_ != NULL) delete step_stats_;
  step_stats_ = NULL;
}
const ::tensorflow::StepStats& LabeledStepStats::step_stats() const {
  // @@protoc_insertion_point(field_get:tensorflow.LabeledStepStats.step_stats)
  return step_stats_ != NULL ? *step_stats_ : *default_instance_->step_stats_;
}
::tensorflow::StepStats* LabeledStepStats::mutable_step_stats() {
  
  if (step_stats_ == NULL) {
    _slow_mutable_step_stats();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.LabeledStepStats.step_stats)
  return step_stats_;
}
::tensorflow::StepStats* LabeledStepStats::release_step_stats() {
  // @@protoc_insertion_point(field_release:tensorflow.LabeledStepStats.step_stats)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_step_stats();
  } else {
    ::tensorflow::StepStats* temp = step_stats_;
    step_stats_ = NULL;
    return temp;
  }
}
 void LabeledStepStats::set_allocated_step_stats(::tensorflow::StepStats* step_stats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete step_stats_;
  }
  if (step_stats != NULL) {
    _slow_set_allocated_step_stats(message_arena, &step_stats);
  }
  step_stats_ = step_stats;
  if (step_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.LabeledStepStats.step_stats)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoggingResponse::kStepFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoggingResponse::LoggingResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.LoggingResponse)
}

LoggingResponse::LoggingResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  step_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.LoggingResponse)
}

void LoggingResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LoggingResponse::LoggingResponse(const LoggingResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.LoggingResponse)
}

void LoggingResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

LoggingResponse::~LoggingResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.LoggingResponse)
  SharedDtor();
}

void LoggingResponse::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void LoggingResponse::ArenaDtor(void* object) {
  LoggingResponse* _this = reinterpret_cast< LoggingResponse* >(object);
  (void)_this;
}
void LoggingResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LoggingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoggingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoggingResponse_descriptor_;
}

const LoggingResponse& LoggingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fworker_2eproto();
  return *default_instance_;
}

LoggingResponse* LoggingResponse::default_instance_ = NULL;

LoggingResponse* LoggingResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<LoggingResponse>(arena);
}

void LoggingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.LoggingResponse)
  step_.Clear();
}

bool LoggingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.LoggingResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.LabeledStepStats step = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_step:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_step()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_step;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.LoggingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.LoggingResponse)
  return false;
#undef DO_
}

void LoggingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.LoggingResponse)
  // repeated .tensorflow.LabeledStepStats step = 1;
  for (unsigned int i = 0, n = this->step_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->step(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.LoggingResponse)
}

::google::protobuf::uint8* LoggingResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.LoggingResponse)
  // repeated .tensorflow.LabeledStepStats step = 1;
  for (unsigned int i = 0, n = this->step_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->step(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.LoggingResponse)
  return target;
}

int LoggingResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.LoggingResponse)
  int total_size = 0;

  // repeated .tensorflow.LabeledStepStats step = 1;
  total_size += 1 * this->step_size();
  for (int i = 0; i < this->step_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->step(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoggingResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.LoggingResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LoggingResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LoggingResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.LoggingResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.LoggingResponse)
    MergeFrom(*source);
  }
}

void LoggingResponse::MergeFrom(const LoggingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.LoggingResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  step_.MergeFrom(from.step_);
}

void LoggingResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.LoggingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoggingResponse::CopyFrom(const LoggingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.LoggingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoggingResponse::IsInitialized() const {

  return true;
}

void LoggingResponse::Swap(LoggingResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LoggingResponse temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void LoggingResponse::UnsafeArenaSwap(LoggingResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LoggingResponse::InternalSwap(LoggingResponse* other) {
  step_.UnsafeArenaSwap(&other->step_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoggingResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoggingResponse_descriptor_;
  metadata.reflection = LoggingResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoggingResponse

// repeated .tensorflow.LabeledStepStats step = 1;
int LoggingResponse::step_size() const {
  return step_.size();
}
void LoggingResponse::clear_step() {
  step_.Clear();
}
const ::tensorflow::LabeledStepStats& LoggingResponse::step(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.LoggingResponse.step)
  return step_.Get(index);
}
::tensorflow::LabeledStepStats* LoggingResponse::mutable_step(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.LoggingResponse.step)
  return step_.Mutable(index);
}
::tensorflow::LabeledStepStats* LoggingResponse::add_step() {
  // @@protoc_insertion_point(field_add:tensorflow.LoggingResponse.step)
  return step_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::LabeledStepStats >*
LoggingResponse::mutable_step() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.LoggingResponse.step)
  return &step_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::LabeledStepStats >&
LoggingResponse::step() const {
  // @@protoc_insertion_point(field_list:tensorflow.LoggingResponse.step)
  return step_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TraceOpts::kDurationFieldNumber;
const int TraceOpts::kUseStepProfilerFieldNumber;
const int TraceOpts::kUseKernelProfilerFieldNumber;
const int TraceOpts::kUseExtendedProfilerFieldNumber;
const int TraceOpts::kUseGpuProfilerFieldNumber;
const int TraceOpts::kUseSampleProfilerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TraceOpts::TraceOpts()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.TraceOpts)
}

TraceOpts::TraceOpts(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.TraceOpts)
}

void TraceOpts::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TraceOpts::TraceOpts(const TraceOpts& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.TraceOpts)
}

void TraceOpts::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  duration_ = 0;
  use_step_profiler_ = false;
  use_kernel_profiler_ = false;
  use_extended_profiler_ = false;
  use_gpu_profiler_ = false;
  use_sample_profiler_ = false;
}

TraceOpts::~TraceOpts() {
  // @@protoc_insertion_point(destructor:tensorflow.TraceOpts)
  SharedDtor();
}

void TraceOpts::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void TraceOpts::ArenaDtor(void* object) {
  TraceOpts* _this = reinterpret_cast< TraceOpts* >(object);
  (void)_this;
}
void TraceOpts::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TraceOpts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TraceOpts::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TraceOpts_descriptor_;
}

const TraceOpts& TraceOpts::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fworker_2eproto();
  return *default_instance_;
}

TraceOpts* TraceOpts::default_instance_ = NULL;

TraceOpts* TraceOpts::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TraceOpts>(arena);
}

void TraceOpts::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TraceOpts)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TraceOpts, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TraceOpts*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(duration_, use_sample_profiler_);

#undef ZR_HELPER_
#undef ZR_

}

bool TraceOpts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.TraceOpts)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double duration = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &duration_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_use_step_profiler;
        break;
      }

      // optional bool use_step_profiler = 2;
      case 2: {
        if (tag == 16) {
         parse_use_step_profiler:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_step_profiler_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_use_kernel_profiler;
        break;
      }

      // optional bool use_kernel_profiler = 3;
      case 3: {
        if (tag == 24) {
         parse_use_kernel_profiler:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_kernel_profiler_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_use_extended_profiler;
        break;
      }

      // optional bool use_extended_profiler = 4;
      case 4: {
        if (tag == 32) {
         parse_use_extended_profiler:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_extended_profiler_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_use_gpu_profiler;
        break;
      }

      // optional bool use_gpu_profiler = 5;
      case 5: {
        if (tag == 40) {
         parse_use_gpu_profiler:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_gpu_profiler_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_use_sample_profiler;
        break;
      }

      // optional bool use_sample_profiler = 6;
      case 6: {
        if (tag == 48) {
         parse_use_sample_profiler:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_sample_profiler_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.TraceOpts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.TraceOpts)
  return false;
#undef DO_
}

void TraceOpts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.TraceOpts)
  // optional double duration = 1;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->duration(), output);
  }

  // optional bool use_step_profiler = 2;
  if (this->use_step_profiler() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->use_step_profiler(), output);
  }

  // optional bool use_kernel_profiler = 3;
  if (this->use_kernel_profiler() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->use_kernel_profiler(), output);
  }

  // optional bool use_extended_profiler = 4;
  if (this->use_extended_profiler() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->use_extended_profiler(), output);
  }

  // optional bool use_gpu_profiler = 5;
  if (this->use_gpu_profiler() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->use_gpu_profiler(), output);
  }

  // optional bool use_sample_profiler = 6;
  if (this->use_sample_profiler() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->use_sample_profiler(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.TraceOpts)
}

::google::protobuf::uint8* TraceOpts::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TraceOpts)
  // optional double duration = 1;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->duration(), target);
  }

  // optional bool use_step_profiler = 2;
  if (this->use_step_profiler() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->use_step_profiler(), target);
  }

  // optional bool use_kernel_profiler = 3;
  if (this->use_kernel_profiler() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->use_kernel_profiler(), target);
  }

  // optional bool use_extended_profiler = 4;
  if (this->use_extended_profiler() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->use_extended_profiler(), target);
  }

  // optional bool use_gpu_profiler = 5;
  if (this->use_gpu_profiler() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->use_gpu_profiler(), target);
  }

  // optional bool use_sample_profiler = 6;
  if (this->use_sample_profiler() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->use_sample_profiler(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TraceOpts)
  return target;
}

int TraceOpts::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TraceOpts)
  int total_size = 0;

  // optional double duration = 1;
  if (this->duration() != 0) {
    total_size += 1 + 8;
  }

  // optional bool use_step_profiler = 2;
  if (this->use_step_profiler() != 0) {
    total_size += 1 + 1;
  }

  // optional bool use_kernel_profiler = 3;
  if (this->use_kernel_profiler() != 0) {
    total_size += 1 + 1;
  }

  // optional bool use_extended_profiler = 4;
  if (this->use_extended_profiler() != 0) {
    total_size += 1 + 1;
  }

  // optional bool use_gpu_profiler = 5;
  if (this->use_gpu_profiler() != 0) {
    total_size += 1 + 1;
  }

  // optional bool use_sample_profiler = 6;
  if (this->use_sample_profiler() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TraceOpts::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.TraceOpts)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TraceOpts* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TraceOpts>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.TraceOpts)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.TraceOpts)
    MergeFrom(*source);
  }
}

void TraceOpts::MergeFrom(const TraceOpts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TraceOpts)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
  if (from.use_step_profiler() != 0) {
    set_use_step_profiler(from.use_step_profiler());
  }
  if (from.use_kernel_profiler() != 0) {
    set_use_kernel_profiler(from.use_kernel_profiler());
  }
  if (from.use_extended_profiler() != 0) {
    set_use_extended_profiler(from.use_extended_profiler());
  }
  if (from.use_gpu_profiler() != 0) {
    set_use_gpu_profiler(from.use_gpu_profiler());
  }
  if (from.use_sample_profiler() != 0) {
    set_use_sample_profiler(from.use_sample_profiler());
  }
}

void TraceOpts::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.TraceOpts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TraceOpts::CopyFrom(const TraceOpts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TraceOpts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceOpts::IsInitialized() const {

  return true;
}

void TraceOpts::Swap(TraceOpts* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TraceOpts temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void TraceOpts::UnsafeArenaSwap(TraceOpts* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TraceOpts::InternalSwap(TraceOpts* other) {
  std::swap(duration_, other->duration_);
  std::swap(use_step_profiler_, other->use_step_profiler_);
  std::swap(use_kernel_profiler_, other->use_kernel_profiler_);
  std::swap(use_extended_profiler_, other->use_extended_profiler_);
  std::swap(use_gpu_profiler_, other->use_gpu_profiler_);
  std::swap(use_sample_profiler_, other->use_sample_profiler_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TraceOpts::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TraceOpts_descriptor_;
  metadata.reflection = TraceOpts_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TraceOpts

// optional double duration = 1;
void TraceOpts::clear_duration() {
  duration_ = 0;
}
 double TraceOpts::duration() const {
  // @@protoc_insertion_point(field_get:tensorflow.TraceOpts.duration)
  return duration_;
}
 void TraceOpts::set_duration(double value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.TraceOpts.duration)
}

// optional bool use_step_profiler = 2;
void TraceOpts::clear_use_step_profiler() {
  use_step_profiler_ = false;
}
 bool TraceOpts::use_step_profiler() const {
  // @@protoc_insertion_point(field_get:tensorflow.TraceOpts.use_step_profiler)
  return use_step_profiler_;
}
 void TraceOpts::set_use_step_profiler(bool value) {
  
  use_step_profiler_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.TraceOpts.use_step_profiler)
}

// optional bool use_kernel_profiler = 3;
void TraceOpts::clear_use_kernel_profiler() {
  use_kernel_profiler_ = false;
}
 bool TraceOpts::use_kernel_profiler() const {
  // @@protoc_insertion_point(field_get:tensorflow.TraceOpts.use_kernel_profiler)
  return use_kernel_profiler_;
}
 void TraceOpts::set_use_kernel_profiler(bool value) {
  
  use_kernel_profiler_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.TraceOpts.use_kernel_profiler)
}

// optional bool use_extended_profiler = 4;
void TraceOpts::clear_use_extended_profiler() {
  use_extended_profiler_ = false;
}
 bool TraceOpts::use_extended_profiler() const {
  // @@protoc_insertion_point(field_get:tensorflow.TraceOpts.use_extended_profiler)
  return use_extended_profiler_;
}
 void TraceOpts::set_use_extended_profiler(bool value) {
  
  use_extended_profiler_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.TraceOpts.use_extended_profiler)
}

// optional bool use_gpu_profiler = 5;
void TraceOpts::clear_use_gpu_profiler() {
  use_gpu_profiler_ = false;
}
 bool TraceOpts::use_gpu_profiler() const {
  // @@protoc_insertion_point(field_get:tensorflow.TraceOpts.use_gpu_profiler)
  return use_gpu_profiler_;
}
 void TraceOpts::set_use_gpu_profiler(bool value) {
  
  use_gpu_profiler_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.TraceOpts.use_gpu_profiler)
}

// optional bool use_sample_profiler = 6;
void TraceOpts::clear_use_sample_profiler() {
  use_sample_profiler_ = false;
}
 bool TraceOpts::use_sample_profiler() const {
  // @@protoc_insertion_point(field_get:tensorflow.TraceOpts.use_sample_profiler)
  return use_sample_profiler_;
}
 void TraceOpts::set_use_sample_profiler(bool value) {
  
  use_sample_profiler_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.TraceOpts.use_sample_profiler)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void TracingRequest::_slow_mutable_options() {
  options_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::TraceOpts >(
      GetArenaNoVirtual());
}
::tensorflow::TraceOpts* TracingRequest::_slow_release_options() {
  if (options_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::TraceOpts* temp = new ::tensorflow::TraceOpts;
    temp->MergeFrom(*options_);
    options_ = NULL;
    return temp;
  }
}
::tensorflow::TraceOpts* TracingRequest::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.TracingRequest.options)
  
  ::tensorflow::TraceOpts* temp = options_;
  options_ = NULL;
  return temp;
}
void TracingRequest::_slow_set_allocated_options(
    ::google::protobuf::Arena* message_arena, ::tensorflow::TraceOpts** options) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*options) == NULL) {
      message_arena->Own(*options);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*options)) {
      ::tensorflow::TraceOpts* new_options = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::TraceOpts >(
            message_arena);
      new_options->CopyFrom(**options);
      *options = new_options;
    }
}
void TracingRequest::unsafe_arena_set_allocated_options(
    ::tensorflow::TraceOpts* options) {
  if (GetArenaNoVirtual() == NULL) {
    delete options_;
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.TracingRequest.options)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TracingRequest::kOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TracingRequest::TracingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.TracingRequest)
}

TracingRequest::TracingRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.TracingRequest)
}

void TracingRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  options_ = const_cast< ::tensorflow::TraceOpts*>(&::tensorflow::TraceOpts::default_instance());
}

TracingRequest::TracingRequest(const TracingRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.TracingRequest)
}

void TracingRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  options_ = NULL;
}

TracingRequest::~TracingRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.TracingRequest)
  SharedDtor();
}

void TracingRequest::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
    delete options_;
  }
}

void TracingRequest::ArenaDtor(void* object) {
  TracingRequest* _this = reinterpret_cast< TracingRequest* >(object);
  (void)_this;
}
void TracingRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TracingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TracingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TracingRequest_descriptor_;
}

const TracingRequest& TracingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fworker_2eproto();
  return *default_instance_;
}

TracingRequest* TracingRequest::default_instance_ = NULL;

TracingRequest* TracingRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TracingRequest>(arena);
}

void TracingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TracingRequest)
  if (GetArenaNoVirtual() == NULL && options_ != NULL) delete options_;
  options_ = NULL;
}

bool TracingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.TracingRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tensorflow.TraceOpts options = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.TracingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.TracingRequest)
  return false;
#undef DO_
}

void TracingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.TracingRequest)
  // optional .tensorflow.TraceOpts options = 1;
  if (this->has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->options_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.TracingRequest)
}

::google::protobuf::uint8* TracingRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TracingRequest)
  // optional .tensorflow.TraceOpts options = 1;
  if (this->has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->options_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TracingRequest)
  return target;
}

int TracingRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TracingRequest)
  int total_size = 0;

  // optional .tensorflow.TraceOpts options = 1;
  if (this->has_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->options_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TracingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.TracingRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TracingRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TracingRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.TracingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.TracingRequest)
    MergeFrom(*source);
  }
}

void TracingRequest::MergeFrom(const TracingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TracingRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_options()) {
    mutable_options()->::tensorflow::TraceOpts::MergeFrom(from.options());
  }
}

void TracingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.TracingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TracingRequest::CopyFrom(const TracingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TracingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TracingRequest::IsInitialized() const {

  return true;
}

void TracingRequest::Swap(TracingRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TracingRequest temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void TracingRequest::UnsafeArenaSwap(TracingRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TracingRequest::InternalSwap(TracingRequest* other) {
  std::swap(options_, other->options_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TracingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TracingRequest_descriptor_;
  metadata.reflection = TracingRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TracingRequest

// optional .tensorflow.TraceOpts options = 1;
bool TracingRequest::has_options() const {
  return !_is_default_instance_ && options_ != NULL;
}
void TracingRequest::clear_options() {
  if (GetArenaNoVirtual() == NULL && options_ != NULL) delete options_;
  options_ = NULL;
}
const ::tensorflow::TraceOpts& TracingRequest::options() const {
  // @@protoc_insertion_point(field_get:tensorflow.TracingRequest.options)
  return options_ != NULL ? *options_ : *default_instance_->options_;
}
::tensorflow::TraceOpts* TracingRequest::mutable_options() {
  
  if (options_ == NULL) {
    _slow_mutable_options();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.TracingRequest.options)
  return options_;
}
::tensorflow::TraceOpts* TracingRequest::release_options() {
  // @@protoc_insertion_point(field_release:tensorflow.TracingRequest.options)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_options();
  } else {
    ::tensorflow::TraceOpts* temp = options_;
    options_ = NULL;
    return temp;
  }
}
 void TracingRequest::set_allocated_options(::tensorflow::TraceOpts* options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete options_;
  }
  if (options != NULL) {
    _slow_set_allocated_options(message_arena, &options);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TracingRequest.options)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TracingResponse::TracingResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.TracingResponse)
}

TracingResponse::TracingResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.TracingResponse)
}

void TracingResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TracingResponse::TracingResponse(const TracingResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.TracingResponse)
}

void TracingResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

TracingResponse::~TracingResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.TracingResponse)
  SharedDtor();
}

void TracingResponse::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void TracingResponse::ArenaDtor(void* object) {
  TracingResponse* _this = reinterpret_cast< TracingResponse* >(object);
  (void)_this;
}
void TracingResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TracingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TracingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TracingResponse_descriptor_;
}

const TracingResponse& TracingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fworker_2eproto();
  return *default_instance_;
}

TracingResponse* TracingResponse::default_instance_ = NULL;

TracingResponse* TracingResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TracingResponse>(arena);
}

void TracingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TracingResponse)
}

bool TracingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.TracingResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.TracingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.TracingResponse)
  return false;
#undef DO_
}

void TracingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.TracingResponse)
  // @@protoc_insertion_point(serialize_end:tensorflow.TracingResponse)
}

::google::protobuf::uint8* TracingResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TracingResponse)
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TracingResponse)
  return target;
}

int TracingResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TracingResponse)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TracingResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.TracingResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TracingResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TracingResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.TracingResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.TracingResponse)
    MergeFrom(*source);
  }
}

void TracingResponse::MergeFrom(const TracingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TracingResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void TracingResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.TracingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TracingResponse::CopyFrom(const TracingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TracingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TracingResponse::IsInitialized() const {

  return true;
}

void TracingResponse::Swap(TracingResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TracingResponse temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void TracingResponse::UnsafeArenaSwap(TracingResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TracingResponse::InternalSwap(TracingResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TracingResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TracingResponse_descriptor_;
  metadata.reflection = TracingResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TracingResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void RecvBufRequest::_slow_mutable_client_locality() {
  client_locality_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::DeviceLocality >(
      GetArenaNoVirtual());
}
::tensorflow::DeviceLocality* RecvBufRequest::_slow_release_client_locality() {
  if (client_locality_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::DeviceLocality* temp = new ::tensorflow::DeviceLocality;
    temp->MergeFrom(*client_locality_);
    client_locality_ = NULL;
    return temp;
  }
}
::tensorflow::DeviceLocality* RecvBufRequest::unsafe_arena_release_client_locality() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RecvBufRequest.client_locality)
  
  ::tensorflow::DeviceLocality* temp = client_locality_;
  client_locality_ = NULL;
  return temp;
}
void RecvBufRequest::_slow_set_allocated_client_locality(
    ::google::protobuf::Arena* message_arena, ::tensorflow::DeviceLocality** client_locality) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*client_locality) == NULL) {
      message_arena->Own(*client_locality);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*client_locality)) {
      ::tensorflow::DeviceLocality* new_client_locality = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::DeviceLocality >(
            message_arena);
      new_client_locality->CopyFrom(**client_locality);
      *client_locality = new_client_locality;
    }
}
void RecvBufRequest::unsafe_arena_set_allocated_client_locality(
    ::tensorflow::DeviceLocality* client_locality) {
  if (GetArenaNoVirtual() == NULL) {
    delete client_locality_;
  }
  client_locality_ = client_locality;
  if (client_locality) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RecvBufRequest.client_locality)
}
void RecvBufRequest::_slow_mutable_server_locality() {
  server_locality_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::DeviceLocality >(
      GetArenaNoVirtual());
}
::tensorflow::DeviceLocality* RecvBufRequest::_slow_release_server_locality() {
  if (server_locality_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::DeviceLocality* temp = new ::tensorflow::DeviceLocality;
    temp->MergeFrom(*server_locality_);
    server_locality_ = NULL;
    return temp;
  }
}
::tensorflow::DeviceLocality* RecvBufRequest::unsafe_arena_release_server_locality() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RecvBufRequest.server_locality)
  
  ::tensorflow::DeviceLocality* temp = server_locality_;
  server_locality_ = NULL;
  return temp;
}
void RecvBufRequest::_slow_set_allocated_server_locality(
    ::google::protobuf::Arena* message_arena, ::tensorflow::DeviceLocality** server_locality) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*server_locality) == NULL) {
      message_arena->Own(*server_locality);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*server_locality)) {
      ::tensorflow::DeviceLocality* new_server_locality = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::DeviceLocality >(
            message_arena);
      new_server_locality->CopyFrom(**server_locality);
      *server_locality = new_server_locality;
    }
}
void RecvBufRequest::unsafe_arena_set_allocated_server_locality(
    ::tensorflow::DeviceLocality* server_locality) {
  if (GetArenaNoVirtual() == NULL) {
    delete server_locality_;
  }
  server_locality_ = server_locality;
  if (server_locality) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RecvBufRequest.server_locality)
}
void RecvBufRequest::_slow_mutable_transport_options() {
  transport_options_ = ::google::protobuf::Arena::Create< ::google::protobuf::Any >(
      GetArenaNoVirtual());
}
::google::protobuf::Any* RecvBufRequest::_slow_release_transport_options() {
  if (transport_options_ == NULL) {
    return NULL;
  } else {
    ::google::protobuf::Any* temp = new ::google::protobuf::Any;
    temp->MergeFrom(*transport_options_);
    transport_options_ = NULL;
    return temp;
  }
}
::google::protobuf::Any* RecvBufRequest::unsafe_arena_release_transport_options() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RecvBufRequest.transport_options)
  
  ::google::protobuf::Any* temp = transport_options_;
  transport_options_ = NULL;
  return temp;
}
void RecvBufRequest::unsafe_arena_set_allocated_transport_options(
    ::google::protobuf::Any* transport_options) {
  if (GetArenaNoVirtual() == NULL) {
    delete transport_options_;
  }
  transport_options_ = transport_options;
  if (transport_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RecvBufRequest.transport_options)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecvBufRequest::kStepIdFieldNumber;
const int RecvBufRequest::kBufRendezvousKeyFieldNumber;
const int RecvBufRequest::kNumBytesFieldNumber;
const int RecvBufRequest::kBufPtrFieldNumber;
const int RecvBufRequest::kClientLocalityFieldNumber;
const int RecvBufRequest::kServerLocalityFieldNumber;
const int RecvBufRequest::kTransportOptionsFieldNumber;
const int RecvBufRequest::kSrcDeviceFieldNumber;
const int RecvBufRequest::kDstDeviceFieldNumber;
const int RecvBufRequest::kRequestIdFieldNumber;
const int RecvBufRequest::kSrcIncarnationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecvBufRequest::RecvBufRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RecvBufRequest)
}

RecvBufRequest::RecvBufRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RecvBufRequest)
}

void RecvBufRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  client_locality_ = const_cast< ::tensorflow::DeviceLocality*>(&::tensorflow::DeviceLocality::default_instance());
  server_locality_ = const_cast< ::tensorflow::DeviceLocality*>(&::tensorflow::DeviceLocality::default_instance());
  transport_options_ = const_cast< ::google::protobuf::Any*>(&::google::protobuf::Any::default_instance());
}

RecvBufRequest::RecvBufRequest(const RecvBufRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.RecvBufRequest)
}

void RecvBufRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  step_id_ = GOOGLE_LONGLONG(0);
  buf_rendezvous_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_bytes_ = GOOGLE_LONGLONG(0);
  buf_ptr_ = GOOGLE_ULONGLONG(0);
  client_locality_ = NULL;
  server_locality_ = NULL;
  transport_options_ = NULL;
  src_device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dst_device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_ = GOOGLE_LONGLONG(0);
  src_incarnation_ = GOOGLE_ULONGLONG(0);
}

RecvBufRequest::~RecvBufRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.RecvBufRequest)
  SharedDtor();
}

void RecvBufRequest::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  buf_rendezvous_key_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  src_device_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  dst_device_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
    delete client_locality_;
    delete server_locality_;
    delete transport_options_;
  }
}

void RecvBufRequest::ArenaDtor(void* object) {
  RecvBufRequest* _this = reinterpret_cast< RecvBufRequest* >(object);
  (void)_this;
}
void RecvBufRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RecvBufRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecvBufRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecvBufRequest_descriptor_;
}

const RecvBufRequest& RecvBufRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fworker_2eproto();
  return *default_instance_;
}

RecvBufRequest* RecvBufRequest::default_instance_ = NULL;

RecvBufRequest* RecvBufRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RecvBufRequest>(arena);
}

void RecvBufRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RecvBufRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RecvBufRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RecvBufRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(num_bytes_, buf_ptr_);
  step_id_ = GOOGLE_LONGLONG(0);
  buf_rendezvous_key_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && client_locality_ != NULL) delete client_locality_;
  client_locality_ = NULL;
  if (GetArenaNoVirtual() == NULL && server_locality_ != NULL) delete server_locality_;
  server_locality_ = NULL;
  if (GetArenaNoVirtual() == NULL && transport_options_ != NULL) delete transport_options_;
  transport_options_ = NULL;
  src_device_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ZR_(request_id_, src_incarnation_);
  dst_device_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());

#undef ZR_HELPER_
#undef ZR_

}

bool RecvBufRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RecvBufRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 step_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &step_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_buf_rendezvous_key;
        break;
      }

      // optional string buf_rendezvous_key = 2;
      case 2: {
        if (tag == 18) {
         parse_buf_rendezvous_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buf_rendezvous_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->buf_rendezvous_key().data(), this->buf_rendezvous_key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.RecvBufRequest.buf_rendezvous_key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num_bytes;
        break;
      }

      // optional int64 num_bytes = 3;
      case 3: {
        if (tag == 24) {
         parse_num_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_bytes_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_buf_ptr;
        break;
      }

      // optional fixed64 buf_ptr = 4;
      case 4: {
        if (tag == 33) {
         parse_buf_ptr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &buf_ptr_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_client_locality;
        break;
      }

      // optional .tensorflow.DeviceLocality client_locality = 5;
      case 5: {
        if (tag == 42) {
         parse_client_locality:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client_locality()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_server_locality;
        break;
      }

      // optional .tensorflow.DeviceLocality server_locality = 6;
      case 6: {
        if (tag == 50) {
         parse_server_locality:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server_locality()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_transport_options;
        break;
      }

      // optional .google.protobuf.Any transport_options = 7;
      case 7: {
        if (tag == 58) {
         parse_transport_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transport_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_src_device;
        break;
      }

      // optional string src_device = 8;
      case 8: {
        if (tag == 66) {
         parse_src_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_device()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->src_device().data(), this->src_device().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.RecvBufRequest.src_device"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_dst_device;
        break;
      }

      // optional string dst_device = 9;
      case 9: {
        if (tag == 74) {
         parse_dst_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dst_device()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dst_device().data(), this->dst_device().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.RecvBufRequest.dst_device"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_request_id;
        break;
      }

      // optional int64 request_id = 10;
      case 10: {
        if (tag == 80) {
         parse_request_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_src_incarnation;
        break;
      }

      // optional uint64 src_incarnation = 11;
      case 11: {
        if (tag == 88) {
         parse_src_incarnation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &src_incarnation_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RecvBufRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RecvBufRequest)
  return false;
#undef DO_
}

void RecvBufRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RecvBufRequest)
  // optional int64 step_id = 1;
  if (this->step_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->step_id(), output);
  }

  // optional string buf_rendezvous_key = 2;
  if (this->buf_rendezvous_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->buf_rendezvous_key().data(), this->buf_rendezvous_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RecvBufRequest.buf_rendezvous_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->buf_rendezvous_key(), output);
  }

  // optional int64 num_bytes = 3;
  if (this->num_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->num_bytes(), output);
  }

  // optional fixed64 buf_ptr = 4;
  if (this->buf_ptr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->buf_ptr(), output);
  }

  // optional .tensorflow.DeviceLocality client_locality = 5;
  if (this->has_client_locality()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->client_locality_, output);
  }

  // optional .tensorflow.DeviceLocality server_locality = 6;
  if (this->has_server_locality()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->server_locality_, output);
  }

  // optional .google.protobuf.Any transport_options = 7;
  if (this->has_transport_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->transport_options_, output);
  }

  // optional string src_device = 8;
  if (this->src_device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->src_device().data(), this->src_device().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RecvBufRequest.src_device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->src_device(), output);
  }

  // optional string dst_device = 9;
  if (this->dst_device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dst_device().data(), this->dst_device().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RecvBufRequest.dst_device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->dst_device(), output);
  }

  // optional int64 request_id = 10;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->request_id(), output);
  }

  // optional uint64 src_incarnation = 11;
  if (this->src_incarnation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->src_incarnation(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.RecvBufRequest)
}

::google::protobuf::uint8* RecvBufRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RecvBufRequest)
  // optional int64 step_id = 1;
  if (this->step_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->step_id(), target);
  }

  // optional string buf_rendezvous_key = 2;
  if (this->buf_rendezvous_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->buf_rendezvous_key().data(), this->buf_rendezvous_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RecvBufRequest.buf_rendezvous_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->buf_rendezvous_key(), target);
  }

  // optional int64 num_bytes = 3;
  if (this->num_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->num_bytes(), target);
  }

  // optional fixed64 buf_ptr = 4;
  if (this->buf_ptr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->buf_ptr(), target);
  }

  // optional .tensorflow.DeviceLocality client_locality = 5;
  if (this->has_client_locality()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->client_locality_, false, target);
  }

  // optional .tensorflow.DeviceLocality server_locality = 6;
  if (this->has_server_locality()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->server_locality_, false, target);
  }

  // optional .google.protobuf.Any transport_options = 7;
  if (this->has_transport_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->transport_options_, false, target);
  }

  // optional string src_device = 8;
  if (this->src_device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->src_device().data(), this->src_device().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RecvBufRequest.src_device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->src_device(), target);
  }

  // optional string dst_device = 9;
  if (this->dst_device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dst_device().data(), this->dst_device().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RecvBufRequest.dst_device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->dst_device(), target);
  }

  // optional int64 request_id = 10;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->request_id(), target);
  }

  // optional uint64 src_incarnation = 11;
  if (this->src_incarnation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->src_incarnation(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RecvBufRequest)
  return target;
}

int RecvBufRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RecvBufRequest)
  int total_size = 0;

  // optional int64 step_id = 1;
  if (this->step_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->step_id());
  }

  // optional string buf_rendezvous_key = 2;
  if (this->buf_rendezvous_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->buf_rendezvous_key());
  }

  // optional int64 num_bytes = 3;
  if (this->num_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->num_bytes());
  }

  // optional fixed64 buf_ptr = 4;
  if (this->buf_ptr() != 0) {
    total_size += 1 + 8;
  }

  // optional .tensorflow.DeviceLocality client_locality = 5;
  if (this->has_client_locality()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->client_locality_);
  }

  // optional .tensorflow.DeviceLocality server_locality = 6;
  if (this->has_server_locality()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->server_locality_);
  }

  // optional .google.protobuf.Any transport_options = 7;
  if (this->has_transport_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transport_options_);
  }

  // optional string src_device = 8;
  if (this->src_device().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src_device());
  }

  // optional string dst_device = 9;
  if (this->dst_device().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dst_device());
  }

  // optional int64 request_id = 10;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->request_id());
  }

  // optional uint64 src_incarnation = 11;
  if (this->src_incarnation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->src_incarnation());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecvBufRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RecvBufRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RecvBufRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RecvBufRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RecvBufRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RecvBufRequest)
    MergeFrom(*source);
  }
}

void RecvBufRequest::MergeFrom(const RecvBufRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RecvBufRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.step_id() != 0) {
    set_step_id(from.step_id());
  }
  if (from.buf_rendezvous_key().size() > 0) {
    set_buf_rendezvous_key(from.buf_rendezvous_key());
  }
  if (from.num_bytes() != 0) {
    set_num_bytes(from.num_bytes());
  }
  if (from.buf_ptr() != 0) {
    set_buf_ptr(from.buf_ptr());
  }
  if (from.has_client_locality()) {
    mutable_client_locality()->::tensorflow::DeviceLocality::MergeFrom(from.client_locality());
  }
  if (from.has_server_locality()) {
    mutable_server_locality()->::tensorflow::DeviceLocality::MergeFrom(from.server_locality());
  }
  if (from.has_transport_options()) {
    mutable_transport_options()->::google::protobuf::Any::MergeFrom(from.transport_options());
  }
  if (from.src_device().size() > 0) {
    set_src_device(from.src_device());
  }
  if (from.dst_device().size() > 0) {
    set_dst_device(from.dst_device());
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
  if (from.src_incarnation() != 0) {
    set_src_incarnation(from.src_incarnation());
  }
}

void RecvBufRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RecvBufRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecvBufRequest::CopyFrom(const RecvBufRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RecvBufRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecvBufRequest::IsInitialized() const {

  return true;
}

void RecvBufRequest::Swap(RecvBufRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RecvBufRequest temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void RecvBufRequest::UnsafeArenaSwap(RecvBufRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RecvBufRequest::InternalSwap(RecvBufRequest* other) {
  std::swap(step_id_, other->step_id_);
  buf_rendezvous_key_.Swap(&other->buf_rendezvous_key_);
  std::swap(num_bytes_, other->num_bytes_);
  std::swap(buf_ptr_, other->buf_ptr_);
  std::swap(client_locality_, other->client_locality_);
  std::swap(server_locality_, other->server_locality_);
  std::swap(transport_options_, other->transport_options_);
  src_device_.Swap(&other->src_device_);
  dst_device_.Swap(&other->dst_device_);
  std::swap(request_id_, other->request_id_);
  std::swap(src_incarnation_, other->src_incarnation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecvBufRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecvBufRequest_descriptor_;
  metadata.reflection = RecvBufRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecvBufRequest

// optional int64 step_id = 1;
void RecvBufRequest::clear_step_id() {
  step_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RecvBufRequest::step_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.RecvBufRequest.step_id)
  return step_id_;
}
 void RecvBufRequest::set_step_id(::google::protobuf::int64 value) {
  
  step_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RecvBufRequest.step_id)
}

// optional string buf_rendezvous_key = 2;
void RecvBufRequest::clear_buf_rendezvous_key() {
  buf_rendezvous_key_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& RecvBufRequest::buf_rendezvous_key() const {
  // @@protoc_insertion_point(field_get:tensorflow.RecvBufRequest.buf_rendezvous_key)
  return buf_rendezvous_key_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecvBufRequest::set_buf_rendezvous_key(const ::std::string& value) {
  
  buf_rendezvous_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.RecvBufRequest.buf_rendezvous_key)
}
 void RecvBufRequest::set_buf_rendezvous_key(const char* value) {
  
  buf_rendezvous_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.RecvBufRequest.buf_rendezvous_key)
}
 void RecvBufRequest::set_buf_rendezvous_key(const char* value,
    size_t size) {
  
  buf_rendezvous_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.RecvBufRequest.buf_rendezvous_key)
}
 ::std::string* RecvBufRequest::mutable_buf_rendezvous_key() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.RecvBufRequest.buf_rendezvous_key)
  return buf_rendezvous_key_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* RecvBufRequest::release_buf_rendezvous_key() {
  // @@protoc_insertion_point(field_release:tensorflow.RecvBufRequest.buf_rendezvous_key)
  
  return buf_rendezvous_key_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* RecvBufRequest::unsafe_arena_release_buf_rendezvous_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RecvBufRequest.buf_rendezvous_key)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return buf_rendezvous_key_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void RecvBufRequest::set_allocated_buf_rendezvous_key(::std::string* buf_rendezvous_key) {
  if (buf_rendezvous_key != NULL) {
    
  } else {
    
  }
  buf_rendezvous_key_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buf_rendezvous_key,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RecvBufRequest.buf_rendezvous_key)
}
 void RecvBufRequest::unsafe_arena_set_allocated_buf_rendezvous_key(
    ::std::string* buf_rendezvous_key) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (buf_rendezvous_key != NULL) {
    
  } else {
    
  }
  buf_rendezvous_key_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      buf_rendezvous_key, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RecvBufRequest.buf_rendezvous_key)
}

// optional int64 num_bytes = 3;
void RecvBufRequest::clear_num_bytes() {
  num_bytes_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RecvBufRequest::num_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.RecvBufRequest.num_bytes)
  return num_bytes_;
}
 void RecvBufRequest::set_num_bytes(::google::protobuf::int64 value) {
  
  num_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RecvBufRequest.num_bytes)
}

// optional fixed64 buf_ptr = 4;
void RecvBufRequest::clear_buf_ptr() {
  buf_ptr_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 RecvBufRequest::buf_ptr() const {
  // @@protoc_insertion_point(field_get:tensorflow.RecvBufRequest.buf_ptr)
  return buf_ptr_;
}
 void RecvBufRequest::set_buf_ptr(::google::protobuf::uint64 value) {
  
  buf_ptr_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RecvBufRequest.buf_ptr)
}

// optional .tensorflow.DeviceLocality client_locality = 5;
bool RecvBufRequest::has_client_locality() const {
  return !_is_default_instance_ && client_locality_ != NULL;
}
void RecvBufRequest::clear_client_locality() {
  if (GetArenaNoVirtual() == NULL && client_locality_ != NULL) delete client_locality_;
  client_locality_ = NULL;
}
const ::tensorflow::DeviceLocality& RecvBufRequest::client_locality() const {
  // @@protoc_insertion_point(field_get:tensorflow.RecvBufRequest.client_locality)
  return client_locality_ != NULL ? *client_locality_ : *default_instance_->client_locality_;
}
::tensorflow::DeviceLocality* RecvBufRequest::mutable_client_locality() {
  
  if (client_locality_ == NULL) {
    _slow_mutable_client_locality();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RecvBufRequest.client_locality)
  return client_locality_;
}
::tensorflow::DeviceLocality* RecvBufRequest::release_client_locality() {
  // @@protoc_insertion_point(field_release:tensorflow.RecvBufRequest.client_locality)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_client_locality();
  } else {
    ::tensorflow::DeviceLocality* temp = client_locality_;
    client_locality_ = NULL;
    return temp;
  }
}
 void RecvBufRequest::set_allocated_client_locality(::tensorflow::DeviceLocality* client_locality) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete client_locality_;
  }
  if (client_locality != NULL) {
    _slow_set_allocated_client_locality(message_arena, &client_locality);
  }
  client_locality_ = client_locality;
  if (client_locality) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RecvBufRequest.client_locality)
}

// optional .tensorflow.DeviceLocality server_locality = 6;
bool RecvBufRequest::has_server_locality() const {
  return !_is_default_instance_ && server_locality_ != NULL;
}
void RecvBufRequest::clear_server_locality() {
  if (GetArenaNoVirtual() == NULL && server_locality_ != NULL) delete server_locality_;
  server_locality_ = NULL;
}
const ::tensorflow::DeviceLocality& RecvBufRequest::server_locality() const {
  // @@protoc_insertion_point(field_get:tensorflow.RecvBufRequest.server_locality)
  return server_locality_ != NULL ? *server_locality_ : *default_instance_->server_locality_;
}
::tensorflow::DeviceLocality* RecvBufRequest::mutable_server_locality() {
  
  if (server_locality_ == NULL) {
    _slow_mutable_server_locality();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RecvBufRequest.server_locality)
  return server_locality_;
}
::tensorflow::DeviceLocality* RecvBufRequest::release_server_locality() {
  // @@protoc_insertion_point(field_release:tensorflow.RecvBufRequest.server_locality)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_server_locality();
  } else {
    ::tensorflow::DeviceLocality* temp = server_locality_;
    server_locality_ = NULL;
    return temp;
  }
}
 void RecvBufRequest::set_allocated_server_locality(::tensorflow::DeviceLocality* server_locality) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete server_locality_;
  }
  if (server_locality != NULL) {
    _slow_set_allocated_server_locality(message_arena, &server_locality);
  }
  server_locality_ = server_locality;
  if (server_locality) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RecvBufRequest.server_locality)
}

// optional .google.protobuf.Any transport_options = 7;
bool RecvBufRequest::has_transport_options() const {
  return !_is_default_instance_ && transport_options_ != NULL;
}
void RecvBufRequest::clear_transport_options() {
  if (GetArenaNoVirtual() == NULL && transport_options_ != NULL) delete transport_options_;
  transport_options_ = NULL;
}
const ::google::protobuf::Any& RecvBufRequest::transport_options() const {
  // @@protoc_insertion_point(field_get:tensorflow.RecvBufRequest.transport_options)
  return transport_options_ != NULL ? *transport_options_ : *default_instance_->transport_options_;
}
::google::protobuf::Any* RecvBufRequest::mutable_transport_options() {
  
  if (transport_options_ == NULL) {
    _slow_mutable_transport_options();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RecvBufRequest.transport_options)
  return transport_options_;
}
::google::protobuf::Any* RecvBufRequest::release_transport_options() {
  // @@protoc_insertion_point(field_release:tensorflow.RecvBufRequest.transport_options)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_transport_options();
  } else {
    ::google::protobuf::Any* temp = transport_options_;
    transport_options_ = NULL;
    return temp;
  }
}
 void RecvBufRequest::set_allocated_transport_options(::google::protobuf::Any* transport_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete transport_options_;
  }
  if (transport_options != NULL) {
    if (message_arena != NULL) {
      message_arena->Own(transport_options);
    }
  }
  transport_options_ = transport_options;
  if (transport_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RecvBufRequest.transport_options)
}

// optional string src_device = 8;
void RecvBufRequest::clear_src_device() {
  src_device_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& RecvBufRequest::src_device() const {
  // @@protoc_insertion_point(field_get:tensorflow.RecvBufRequest.src_device)
  return src_device_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecvBufRequest::set_src_device(const ::std::string& value) {
  
  src_device_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.RecvBufRequest.src_device)
}
 void RecvBufRequest::set_src_device(const char* value) {
  
  src_device_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.RecvBufRequest.src_device)
}
 void RecvBufRequest::set_src_device(const char* value,
    size_t size) {
  
  src_device_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.RecvBufRequest.src_device)
}
 ::std::string* RecvBufRequest::mutable_src_device() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.RecvBufRequest.src_device)
  return src_device_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* RecvBufRequest::release_src_device() {
  // @@protoc_insertion_point(field_release:tensorflow.RecvBufRequest.src_device)
  
  return src_device_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* RecvBufRequest::unsafe_arena_release_src_device() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RecvBufRequest.src_device)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return src_device_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void RecvBufRequest::set_allocated_src_device(::std::string* src_device) {
  if (src_device != NULL) {
    
  } else {
    
  }
  src_device_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src_device,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RecvBufRequest.src_device)
}
 void RecvBufRequest::unsafe_arena_set_allocated_src_device(
    ::std::string* src_device) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (src_device != NULL) {
    
  } else {
    
  }
  src_device_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      src_device, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RecvBufRequest.src_device)
}

// optional string dst_device = 9;
void RecvBufRequest::clear_dst_device() {
  dst_device_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& RecvBufRequest::dst_device() const {
  // @@protoc_insertion_point(field_get:tensorflow.RecvBufRequest.dst_device)
  return dst_device_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecvBufRequest::set_dst_device(const ::std::string& value) {
  
  dst_device_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.RecvBufRequest.dst_device)
}
 void RecvBufRequest::set_dst_device(const char* value) {
  
  dst_device_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.RecvBufRequest.dst_device)
}
 void RecvBufRequest::set_dst_device(const char* value,
    size_t size) {
  
  dst_device_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.RecvBufRequest.dst_device)
}
 ::std::string* RecvBufRequest::mutable_dst_device() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.RecvBufRequest.dst_device)
  return dst_device_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* RecvBufRequest::release_dst_device() {
  // @@protoc_insertion_point(field_release:tensorflow.RecvBufRequest.dst_device)
  
  return dst_device_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* RecvBufRequest::unsafe_arena_release_dst_device() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RecvBufRequest.dst_device)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return dst_device_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void RecvBufRequest::set_allocated_dst_device(::std::string* dst_device) {
  if (dst_device != NULL) {
    
  } else {
    
  }
  dst_device_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dst_device,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RecvBufRequest.dst_device)
}
 void RecvBufRequest::unsafe_arena_set_allocated_dst_device(
    ::std::string* dst_device) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (dst_device != NULL) {
    
  } else {
    
  }
  dst_device_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      dst_device, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RecvBufRequest.dst_device)
}

// optional int64 request_id = 10;
void RecvBufRequest::clear_request_id() {
  request_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RecvBufRequest::request_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.RecvBufRequest.request_id)
  return request_id_;
}
 void RecvBufRequest::set_request_id(::google::protobuf::int64 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RecvBufRequest.request_id)
}

// optional uint64 src_incarnation = 11;
void RecvBufRequest::clear_src_incarnation() {
  src_incarnation_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 RecvBufRequest::src_incarnation() const {
  // @@protoc_insertion_point(field_get:tensorflow.RecvBufRequest.src_incarnation)
  return src_incarnation_;
}
 void RecvBufRequest::set_src_incarnation(::google::protobuf::uint64 value) {
  
  src_incarnation_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RecvBufRequest.src_incarnation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void RecvBufResponse::_slow_mutable_transport_options() {
  transport_options_ = ::google::protobuf::Arena::Create< ::google::protobuf::Any >(
      GetArenaNoVirtual());
}
::google::protobuf::Any* RecvBufResponse::_slow_release_transport_options() {
  if (transport_options_ == NULL) {
    return NULL;
  } else {
    ::google::protobuf::Any* temp = new ::google::protobuf::Any;
    temp->MergeFrom(*transport_options_);
    transport_options_ = NULL;
    return temp;
  }
}
::google::protobuf::Any* RecvBufResponse::unsafe_arena_release_transport_options() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RecvBufResponse.transport_options)
  
  ::google::protobuf::Any* temp = transport_options_;
  transport_options_ = NULL;
  return temp;
}
void RecvBufResponse::unsafe_arena_set_allocated_transport_options(
    ::google::protobuf::Any* transport_options) {
  if (GetArenaNoVirtual() == NULL) {
    delete transport_options_;
  }
  transport_options_ = transport_options;
  if (transport_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RecvBufResponse.transport_options)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecvBufResponse::kBufPtrFieldNumber;
const int RecvBufResponse::kNumBytesFieldNumber;
const int RecvBufResponse::kIsDeadFieldNumber;
const int RecvBufResponse::kTransportOptionsFieldNumber;
const int RecvBufResponse::kSendStartMicrosFieldNumber;
const int RecvBufResponse::kRequireAckFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecvBufResponse::RecvBufResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RecvBufResponse)
}

RecvBufResponse::RecvBufResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RecvBufResponse)
}

void RecvBufResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  transport_options_ = const_cast< ::google::protobuf::Any*>(&::google::protobuf::Any::default_instance());
}

RecvBufResponse::RecvBufResponse(const RecvBufResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.RecvBufResponse)
}

void RecvBufResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  buf_ptr_ = GOOGLE_ULONGLONG(0);
  num_bytes_ = GOOGLE_LONGLONG(0);
  is_dead_ = false;
  transport_options_ = NULL;
  send_start_micros_ = GOOGLE_LONGLONG(0);
  require_ack_ = false;
}

RecvBufResponse::~RecvBufResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.RecvBufResponse)
  SharedDtor();
}

void RecvBufResponse::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
    delete transport_options_;
  }
}

void RecvBufResponse::ArenaDtor(void* object) {
  RecvBufResponse* _this = reinterpret_cast< RecvBufResponse* >(object);
  (void)_this;
}
void RecvBufResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RecvBufResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecvBufResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecvBufResponse_descriptor_;
}

const RecvBufResponse& RecvBufResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fworker_2eproto();
  return *default_instance_;
}

RecvBufResponse* RecvBufResponse::default_instance_ = NULL;

RecvBufResponse* RecvBufResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RecvBufResponse>(arena);
}

void RecvBufResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RecvBufResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RecvBufResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RecvBufResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(buf_ptr_, num_bytes_);
  ZR_(send_start_micros_, require_ack_);
  if (GetArenaNoVirtual() == NULL && transport_options_ != NULL) delete transport_options_;
  transport_options_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool RecvBufResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RecvBufResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 buf_ptr = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &buf_ptr_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_bytes;
        break;
      }

      // optional int64 num_bytes = 2;
      case 2: {
        if (tag == 16) {
         parse_num_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_bytes_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_dead;
        break;
      }

      // optional bool is_dead = 3;
      case 3: {
        if (tag == 24) {
         parse_is_dead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dead_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_transport_options;
        break;
      }

      // optional .google.protobuf.Any transport_options = 4;
      case 4: {
        if (tag == 34) {
         parse_transport_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transport_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_send_start_micros;
        break;
      }

      // optional int64 send_start_micros = 5;
      case 5: {
        if (tag == 40) {
         parse_send_start_micros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &send_start_micros_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_require_ack;
        break;
      }

      // optional bool require_ack = 6;
      case 6: {
        if (tag == 48) {
         parse_require_ack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &require_ack_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RecvBufResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RecvBufResponse)
  return false;
#undef DO_
}

void RecvBufResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RecvBufResponse)
  // optional fixed64 buf_ptr = 1;
  if (this->buf_ptr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->buf_ptr(), output);
  }

  // optional int64 num_bytes = 2;
  if (this->num_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->num_bytes(), output);
  }

  // optional bool is_dead = 3;
  if (this->is_dead() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_dead(), output);
  }

  // optional .google.protobuf.Any transport_options = 4;
  if (this->has_transport_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->transport_options_, output);
  }

  // optional int64 send_start_micros = 5;
  if (this->send_start_micros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->send_start_micros(), output);
  }

  // optional bool require_ack = 6;
  if (this->require_ack() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->require_ack(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.RecvBufResponse)
}

::google::protobuf::uint8* RecvBufResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RecvBufResponse)
  // optional fixed64 buf_ptr = 1;
  if (this->buf_ptr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->buf_ptr(), target);
  }

  // optional int64 num_bytes = 2;
  if (this->num_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->num_bytes(), target);
  }

  // optional bool is_dead = 3;
  if (this->is_dead() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_dead(), target);
  }

  // optional .google.protobuf.Any transport_options = 4;
  if (this->has_transport_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->transport_options_, false, target);
  }

  // optional int64 send_start_micros = 5;
  if (this->send_start_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->send_start_micros(), target);
  }

  // optional bool require_ack = 6;
  if (this->require_ack() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->require_ack(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RecvBufResponse)
  return target;
}

int RecvBufResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RecvBufResponse)
  int total_size = 0;

  // optional fixed64 buf_ptr = 1;
  if (this->buf_ptr() != 0) {
    total_size += 1 + 8;
  }

  // optional int64 num_bytes = 2;
  if (this->num_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->num_bytes());
  }

  // optional bool is_dead = 3;
  if (this->is_dead() != 0) {
    total_size += 1 + 1;
  }

  // optional .google.protobuf.Any transport_options = 4;
  if (this->has_transport_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transport_options_);
  }

  // optional int64 send_start_micros = 5;
  if (this->send_start_micros() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->send_start_micros());
  }

  // optional bool require_ack = 6;
  if (this->require_ack() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecvBufResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RecvBufResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RecvBufResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RecvBufResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RecvBufResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RecvBufResponse)
    MergeFrom(*source);
  }
}

void RecvBufResponse::MergeFrom(const RecvBufResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RecvBufResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.buf_ptr() != 0) {
    set_buf_ptr(from.buf_ptr());
  }
  if (from.num_bytes() != 0) {
    set_num_bytes(from.num_bytes());
  }
  if (from.is_dead() != 0) {
    set_is_dead(from.is_dead());
  }
  if (from.has_transport_options()) {
    mutable_transport_options()->::google::protobuf::Any::MergeFrom(from.transport_options());
  }
  if (from.send_start_micros() != 0) {
    set_send_start_micros(from.send_start_micros());
  }
  if (from.require_ack() != 0) {
    set_require_ack(from.require_ack());
  }
}

void RecvBufResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RecvBufResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecvBufResponse::CopyFrom(const RecvBufResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RecvBufResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecvBufResponse::IsInitialized() const {

  return true;
}

void RecvBufResponse::Swap(RecvBufResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RecvBufResponse temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void RecvBufResponse::UnsafeArenaSwap(RecvBufResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RecvBufResponse::InternalSwap(RecvBufResponse* other) {
  std::swap(buf_ptr_, other->buf_ptr_);
  std::swap(num_bytes_, other->num_bytes_);
  std::swap(is_dead_, other->is_dead_);
  std::swap(transport_options_, other->transport_options_);
  std::swap(send_start_micros_, other->send_start_micros_);
  std::swap(require_ack_, other->require_ack_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecvBufResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecvBufResponse_descriptor_;
  metadata.reflection = RecvBufResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecvBufResponse

// optional fixed64 buf_ptr = 1;
void RecvBufResponse::clear_buf_ptr() {
  buf_ptr_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 RecvBufResponse::buf_ptr() const {
  // @@protoc_insertion_point(field_get:tensorflow.RecvBufResponse.buf_ptr)
  return buf_ptr_;
}
 void RecvBufResponse::set_buf_ptr(::google::protobuf::uint64 value) {
  
  buf_ptr_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RecvBufResponse.buf_ptr)
}

// optional int64 num_bytes = 2;
void RecvBufResponse::clear_num_bytes() {
  num_bytes_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RecvBufResponse::num_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.RecvBufResponse.num_bytes)
  return num_bytes_;
}
 void RecvBufResponse::set_num_bytes(::google::protobuf::int64 value) {
  
  num_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RecvBufResponse.num_bytes)
}

// optional bool is_dead = 3;
void RecvBufResponse::clear_is_dead() {
  is_dead_ = false;
}
 bool RecvBufResponse::is_dead() const {
  // @@protoc_insertion_point(field_get:tensorflow.RecvBufResponse.is_dead)
  return is_dead_;
}
 void RecvBufResponse::set_is_dead(bool value) {
  
  is_dead_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RecvBufResponse.is_dead)
}

// optional .google.protobuf.Any transport_options = 4;
bool RecvBufResponse::has_transport_options() const {
  return !_is_default_instance_ && transport_options_ != NULL;
}
void RecvBufResponse::clear_transport_options() {
  if (GetArenaNoVirtual() == NULL && transport_options_ != NULL) delete transport_options_;
  transport_options_ = NULL;
}
const ::google::protobuf::Any& RecvBufResponse::transport_options() const {
  // @@protoc_insertion_point(field_get:tensorflow.RecvBufResponse.transport_options)
  return transport_options_ != NULL ? *transport_options_ : *default_instance_->transport_options_;
}
::google::protobuf::Any* RecvBufResponse::mutable_transport_options() {
  
  if (transport_options_ == NULL) {
    _slow_mutable_transport_options();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RecvBufResponse.transport_options)
  return transport_options_;
}
::google::protobuf::Any* RecvBufResponse::release_transport_options() {
  // @@protoc_insertion_point(field_release:tensorflow.RecvBufResponse.transport_options)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_transport_options();
  } else {
    ::google::protobuf::Any* temp = transport_options_;
    transport_options_ = NULL;
    return temp;
  }
}
 void RecvBufResponse::set_allocated_transport_options(::google::protobuf::Any* transport_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete transport_options_;
  }
  if (transport_options != NULL) {
    if (message_arena != NULL) {
      message_arena->Own(transport_options);
    }
  }
  transport_options_ = transport_options;
  if (transport_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RecvBufResponse.transport_options)
}

// optional int64 send_start_micros = 5;
void RecvBufResponse::clear_send_start_micros() {
  send_start_micros_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RecvBufResponse::send_start_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.RecvBufResponse.send_start_micros)
  return send_start_micros_;
}
 void RecvBufResponse::set_send_start_micros(::google::protobuf::int64 value) {
  
  send_start_micros_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RecvBufResponse.send_start_micros)
}

// optional bool require_ack = 6;
void RecvBufResponse::clear_require_ack() {
  require_ack_ = false;
}
 bool RecvBufResponse::require_ack() const {
  // @@protoc_insertion_point(field_get:tensorflow.RecvBufResponse.require_ack)
  return require_ack_;
}
 void RecvBufResponse::set_require_ack(bool value) {
  
  require_ack_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RecvBufResponse.require_ack)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompleteGroupRequest::kGroupKeyFieldNumber;
const int CompleteGroupRequest::kGroupSizeFieldNumber;
const int CompleteGroupRequest::kDeviceTypeFieldNumber;
const int CompleteGroupRequest::kDeviceNameFieldNumber;
const int CompleteGroupRequest::kCollectiveTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompleteGroupRequest::CompleteGroupRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CompleteGroupRequest)
}

CompleteGroupRequest::CompleteGroupRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  device_name_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CompleteGroupRequest)
}

void CompleteGroupRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CompleteGroupRequest::CompleteGroupRequest(const CompleteGroupRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.CompleteGroupRequest)
}

void CompleteGroupRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  group_key_ = 0;
  group_size_ = 0;
  device_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collective_type_ = 0;
}

CompleteGroupRequest::~CompleteGroupRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.CompleteGroupRequest)
  SharedDtor();
}

void CompleteGroupRequest::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  device_type_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void CompleteGroupRequest::ArenaDtor(void* object) {
  CompleteGroupRequest* _this = reinterpret_cast< CompleteGroupRequest* >(object);
  (void)_this;
}
void CompleteGroupRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CompleteGroupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompleteGroupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompleteGroupRequest_descriptor_;
}

const CompleteGroupRequest& CompleteGroupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fworker_2eproto();
  return *default_instance_;
}

CompleteGroupRequest* CompleteGroupRequest::default_instance_ = NULL;

CompleteGroupRequest* CompleteGroupRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CompleteGroupRequest>(arena);
}

void CompleteGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CompleteGroupRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CompleteGroupRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CompleteGroupRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(group_key_, group_size_);
  device_type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  collective_type_ = 0;

#undef ZR_HELPER_
#undef ZR_

  device_name_.Clear();
}

bool CompleteGroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CompleteGroupRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 group_key = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_key_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_size;
        break;
      }

      // optional int32 group_size = 2;
      case 2: {
        if (tag == 16) {
         parse_group_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_device_type;
        break;
      }

      // optional string device_type = 3;
      case 3: {
        if (tag == 26) {
         parse_device_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_type().data(), this->device_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.CompleteGroupRequest.device_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_device_name;
        break;
      }

      // repeated string device_name = 4;
      case 4: {
        if (tag == 34) {
         parse_device_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_device_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_name(this->device_name_size() - 1).data(),
            this->device_name(this->device_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.CompleteGroupRequest.device_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_device_name;
        if (input->ExpectTag(40)) goto parse_collective_type;
        break;
      }

      // optional int32 collective_type = 5;
      case 5: {
        if (tag == 40) {
         parse_collective_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &collective_type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CompleteGroupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CompleteGroupRequest)
  return false;
#undef DO_
}

void CompleteGroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CompleteGroupRequest)
  // optional int32 group_key = 1;
  if (this->group_key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->group_key(), output);
  }

  // optional int32 group_size = 2;
  if (this->group_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->group_size(), output);
  }

  // optional string device_type = 3;
  if (this->device_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_type().data(), this->device_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CompleteGroupRequest.device_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->device_type(), output);
  }

  // repeated string device_name = 4;
  for (int i = 0; i < this->device_name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_name(i).data(), this->device_name(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CompleteGroupRequest.device_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->device_name(i), output);
  }

  // optional int32 collective_type = 5;
  if (this->collective_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->collective_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.CompleteGroupRequest)
}

::google::protobuf::uint8* CompleteGroupRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CompleteGroupRequest)
  // optional int32 group_key = 1;
  if (this->group_key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->group_key(), target);
  }

  // optional int32 group_size = 2;
  if (this->group_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->group_size(), target);
  }

  // optional string device_type = 3;
  if (this->device_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_type().data(), this->device_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CompleteGroupRequest.device_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->device_type(), target);
  }

  // repeated string device_name = 4;
  for (int i = 0; i < this->device_name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_name(i).data(), this->device_name(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CompleteGroupRequest.device_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->device_name(i), target);
  }

  // optional int32 collective_type = 5;
  if (this->collective_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->collective_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CompleteGroupRequest)
  return target;
}

int CompleteGroupRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CompleteGroupRequest)
  int total_size = 0;

  // optional int32 group_key = 1;
  if (this->group_key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group_key());
  }

  // optional int32 group_size = 2;
  if (this->group_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group_size());
  }

  // optional string device_type = 3;
  if (this->device_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_type());
  }

  // optional int32 collective_type = 5;
  if (this->collective_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->collective_type());
  }

  // repeated string device_name = 4;
  total_size += 1 * this->device_name_size();
  for (int i = 0; i < this->device_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->device_name(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompleteGroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CompleteGroupRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CompleteGroupRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CompleteGroupRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CompleteGroupRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CompleteGroupRequest)
    MergeFrom(*source);
  }
}

void CompleteGroupRequest::MergeFrom(const CompleteGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CompleteGroupRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  device_name_.MergeFrom(from.device_name_);
  if (from.group_key() != 0) {
    set_group_key(from.group_key());
  }
  if (from.group_size() != 0) {
    set_group_size(from.group_size());
  }
  if (from.device_type().size() > 0) {
    set_device_type(from.device_type());
  }
  if (from.collective_type() != 0) {
    set_collective_type(from.collective_type());
  }
}

void CompleteGroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CompleteGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompleteGroupRequest::CopyFrom(const CompleteGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CompleteGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompleteGroupRequest::IsInitialized() const {

  return true;
}

void CompleteGroupRequest::Swap(CompleteGroupRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CompleteGroupRequest temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void CompleteGroupRequest::UnsafeArenaSwap(CompleteGroupRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CompleteGroupRequest::InternalSwap(CompleteGroupRequest* other) {
  std::swap(group_key_, other->group_key_);
  std::swap(group_size_, other->group_size_);
  device_type_.Swap(&other->device_type_);
  device_name_.UnsafeArenaSwap(&other->device_name_);
  std::swap(collective_type_, other->collective_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompleteGroupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompleteGroupRequest_descriptor_;
  metadata.reflection = CompleteGroupRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompleteGroupRequest

// optional int32 group_key = 1;
void CompleteGroupRequest::clear_group_key() {
  group_key_ = 0;
}
 ::google::protobuf::int32 CompleteGroupRequest::group_key() const {
  // @@protoc_insertion_point(field_get:tensorflow.CompleteGroupRequest.group_key)
  return group_key_;
}
 void CompleteGroupRequest::set_group_key(::google::protobuf::int32 value) {
  
  group_key_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CompleteGroupRequest.group_key)
}

// optional int32 group_size = 2;
void CompleteGroupRequest::clear_group_size() {
  group_size_ = 0;
}
 ::google::protobuf::int32 CompleteGroupRequest::group_size() const {
  // @@protoc_insertion_point(field_get:tensorflow.CompleteGroupRequest.group_size)
  return group_size_;
}
 void CompleteGroupRequest::set_group_size(::google::protobuf::int32 value) {
  
  group_size_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CompleteGroupRequest.group_size)
}

// optional string device_type = 3;
void CompleteGroupRequest::clear_device_type() {
  device_type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& CompleteGroupRequest::device_type() const {
  // @@protoc_insertion_point(field_get:tensorflow.CompleteGroupRequest.device_type)
  return device_type_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CompleteGroupRequest::set_device_type(const ::std::string& value) {
  
  device_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.CompleteGroupRequest.device_type)
}
 void CompleteGroupRequest::set_device_type(const char* value) {
  
  device_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.CompleteGroupRequest.device_type)
}
 void CompleteGroupRequest::set_device_type(const char* value,
    size_t size) {
  
  device_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.CompleteGroupRequest.device_type)
}
 ::std::string* CompleteGroupRequest::mutable_device_type() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.CompleteGroupRequest.device_type)
  return device_type_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* CompleteGroupRequest::release_device_type() {
  // @@protoc_insertion_point(field_release:tensorflow.CompleteGroupRequest.device_type)
  
  return device_type_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* CompleteGroupRequest::unsafe_arena_release_device_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.CompleteGroupRequest.device_type)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return device_type_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void CompleteGroupRequest::set_allocated_device_type(::std::string* device_type) {
  if (device_type != NULL) {
    
  } else {
    
  }
  device_type_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_type,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CompleteGroupRequest.device_type)
}
 void CompleteGroupRequest::unsafe_arena_set_allocated_device_type(
    ::std::string* device_type) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (device_type != NULL) {
    
  } else {
    
  }
  device_type_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      device_type, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.CompleteGroupRequest.device_type)
}

// repeated string device_name = 4;
int CompleteGroupRequest::device_name_size() const {
  return device_name_.size();
}
void CompleteGroupRequest::clear_device_name() {
  device_name_.Clear();
}
 const ::std::string& CompleteGroupRequest::device_name(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.CompleteGroupRequest.device_name)
  return device_name_.Get(index);
}
 ::std::string* CompleteGroupRequest::mutable_device_name(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.CompleteGroupRequest.device_name)
  return device_name_.Mutable(index);
}
 void CompleteGroupRequest::set_device_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.CompleteGroupRequest.device_name)
  device_name_.Mutable(index)->assign(value);
}
 void CompleteGroupRequest::set_device_name(int index, const char* value) {
  device_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.CompleteGroupRequest.device_name)
}
 void CompleteGroupRequest::set_device_name(int index, const char* value, size_t size) {
  device_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.CompleteGroupRequest.device_name)
}
 ::std::string* CompleteGroupRequest::add_device_name() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.CompleteGroupRequest.device_name)
  return device_name_.Add();
}
 void CompleteGroupRequest::add_device_name(const ::std::string& value) {
  device_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.CompleteGroupRequest.device_name)
}
 void CompleteGroupRequest::add_device_name(const char* value) {
  device_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.CompleteGroupRequest.device_name)
}
 void CompleteGroupRequest::add_device_name(const char* value, size_t size) {
  device_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.CompleteGroupRequest.device_name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
CompleteGroupRequest::device_name() const {
  // @@protoc_insertion_point(field_list:tensorflow.CompleteGroupRequest.device_name)
  return device_name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
CompleteGroupRequest::mutable_device_name() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.CompleteGroupRequest.device_name)
  return &device_name_;
}

// optional int32 collective_type = 5;
void CompleteGroupRequest::clear_collective_type() {
  collective_type_ = 0;
}
 ::google::protobuf::int32 CompleteGroupRequest::collective_type() const {
  // @@protoc_insertion_point(field_get:tensorflow.CompleteGroupRequest.collective_type)
  return collective_type_;
}
 void CompleteGroupRequest::set_collective_type(::google::protobuf::int32 value) {
  
  collective_type_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CompleteGroupRequest.collective_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompleteGroupResponse::kGroupKeyFieldNumber;
const int CompleteGroupResponse::kGroupSizeFieldNumber;
const int CompleteGroupResponse::kDeviceTypeFieldNumber;
const int CompleteGroupResponse::kNumTasksFieldNumber;
const int CompleteGroupResponse::kDeviceNameFieldNumber;
const int CompleteGroupResponse::kTaskNameFieldNumber;
const int CompleteGroupResponse::kCommunicatorKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompleteGroupResponse::CompleteGroupResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CompleteGroupResponse)
}

CompleteGroupResponse::CompleteGroupResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  device_name_(arena),
  task_name_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CompleteGroupResponse)
}

void CompleteGroupResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CompleteGroupResponse::CompleteGroupResponse(const CompleteGroupResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.CompleteGroupResponse)
}

void CompleteGroupResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  group_key_ = 0;
  group_size_ = 0;
  device_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_tasks_ = 0;
  communicator_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CompleteGroupResponse::~CompleteGroupResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.CompleteGroupResponse)
  SharedDtor();
}

void CompleteGroupResponse::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  device_type_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  communicator_key_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void CompleteGroupResponse::ArenaDtor(void* object) {
  CompleteGroupResponse* _this = reinterpret_cast< CompleteGroupResponse* >(object);
  (void)_this;
}
void CompleteGroupResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CompleteGroupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompleteGroupResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompleteGroupResponse_descriptor_;
}

const CompleteGroupResponse& CompleteGroupResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fworker_2eproto();
  return *default_instance_;
}

CompleteGroupResponse* CompleteGroupResponse::default_instance_ = NULL;

CompleteGroupResponse* CompleteGroupResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CompleteGroupResponse>(arena);
}

void CompleteGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CompleteGroupResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CompleteGroupResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CompleteGroupResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(group_key_, group_size_);
  device_type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  num_tasks_ = 0;
  communicator_key_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());

#undef ZR_HELPER_
#undef ZR_

  device_name_.Clear();
  task_name_.Clear();
}

bool CompleteGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CompleteGroupResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 group_key = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_key_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_size;
        break;
      }

      // optional int32 group_size = 2;
      case 2: {
        if (tag == 16) {
         parse_group_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_device_type;
        break;
      }

      // optional string device_type = 3;
      case 3: {
        if (tag == 26) {
         parse_device_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_type().data(), this->device_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.CompleteGroupResponse.device_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num_tasks;
        break;
      }

      // optional int32 num_tasks = 4;
      case 4: {
        if (tag == 32) {
         parse_num_tasks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_tasks_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_device_name;
        break;
      }

      // repeated string device_name = 5;
      case 5: {
        if (tag == 42) {
         parse_device_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_device_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_name(this->device_name_size() - 1).data(),
            this->device_name(this->device_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.CompleteGroupResponse.device_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_device_name;
        if (input->ExpectTag(50)) goto parse_task_name;
        break;
      }

      // repeated string task_name = 6;
      case 6: {
        if (tag == 50) {
         parse_task_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_task_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->task_name(this->task_name_size() - 1).data(),
            this->task_name(this->task_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.CompleteGroupResponse.task_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_task_name;
        if (input->ExpectTag(58)) goto parse_communicator_key;
        break;
      }

      // optional bytes communicator_key = 7;
      case 7: {
        if (tag == 58) {
         parse_communicator_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_communicator_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CompleteGroupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CompleteGroupResponse)
  return false;
#undef DO_
}

void CompleteGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CompleteGroupResponse)
  // optional int32 group_key = 1;
  if (this->group_key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->group_key(), output);
  }

  // optional int32 group_size = 2;
  if (this->group_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->group_size(), output);
  }

  // optional string device_type = 3;
  if (this->device_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_type().data(), this->device_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CompleteGroupResponse.device_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->device_type(), output);
  }

  // optional int32 num_tasks = 4;
  if (this->num_tasks() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_tasks(), output);
  }

  // repeated string device_name = 5;
  for (int i = 0; i < this->device_name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_name(i).data(), this->device_name(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CompleteGroupResponse.device_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->device_name(i), output);
  }

  // repeated string task_name = 6;
  for (int i = 0; i < this->task_name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->task_name(i).data(), this->task_name(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CompleteGroupResponse.task_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->task_name(i), output);
  }

  // optional bytes communicator_key = 7;
  if (this->communicator_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->communicator_key(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.CompleteGroupResponse)
}

::google::protobuf::uint8* CompleteGroupResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CompleteGroupResponse)
  // optional int32 group_key = 1;
  if (this->group_key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->group_key(), target);
  }

  // optional int32 group_size = 2;
  if (this->group_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->group_size(), target);
  }

  // optional string device_type = 3;
  if (this->device_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_type().data(), this->device_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CompleteGroupResponse.device_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->device_type(), target);
  }

  // optional int32 num_tasks = 4;
  if (this->num_tasks() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num_tasks(), target);
  }

  // repeated string device_name = 5;
  for (int i = 0; i < this->device_name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_name(i).data(), this->device_name(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CompleteGroupResponse.device_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->device_name(i), target);
  }

  // repeated string task_name = 6;
  for (int i = 0; i < this->task_name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->task_name(i).data(), this->task_name(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CompleteGroupResponse.task_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->task_name(i), target);
  }

  // optional bytes communicator_key = 7;
  if (this->communicator_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->communicator_key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CompleteGroupResponse)
  return target;
}

int CompleteGroupResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CompleteGroupResponse)
  int total_size = 0;

  // optional int32 group_key = 1;
  if (this->group_key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group_key());
  }

  // optional int32 group_size = 2;
  if (this->group_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group_size());
  }

  // optional string device_type = 3;
  if (this->device_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_type());
  }

  // optional int32 num_tasks = 4;
  if (this->num_tasks() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_tasks());
  }

  // optional bytes communicator_key = 7;
  if (this->communicator_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->communicator_key());
  }

  // repeated string device_name = 5;
  total_size += 1 * this->device_name_size();
  for (int i = 0; i < this->device_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->device_name(i));
  }

  // repeated string task_name = 6;
  total_size += 1 * this->task_name_size();
  for (int i = 0; i < this->task_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->task_name(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompleteGroupResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CompleteGroupResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CompleteGroupResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CompleteGroupResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CompleteGroupResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CompleteGroupResponse)
    MergeFrom(*source);
  }
}

void CompleteGroupResponse::MergeFrom(const CompleteGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CompleteGroupResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  device_name_.MergeFrom(from.device_name_);
  task_name_.MergeFrom(from.task_name_);
  if (from.group_key() != 0) {
    set_group_key(from.group_key());
  }
  if (from.group_size() != 0) {
    set_group_size(from.group_size());
  }
  if (from.device_type().size() > 0) {
    set_device_type(from.device_type());
  }
  if (from.num_tasks() != 0) {
    set_num_tasks(from.num_tasks());
  }
  if (from.communicator_key().size() > 0) {
    set_communicator_key(from.communicator_key());
  }
}

void CompleteGroupResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CompleteGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompleteGroupResponse::CopyFrom(const CompleteGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CompleteGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompleteGroupResponse::IsInitialized() const {

  return true;
}

void CompleteGroupResponse::Swap(CompleteGroupResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CompleteGroupResponse temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void CompleteGroupResponse::UnsafeArenaSwap(CompleteGroupResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CompleteGroupResponse::InternalSwap(CompleteGroupResponse* other) {
  std::swap(group_key_, other->group_key_);
  std::swap(group_size_, other->group_size_);
  device_type_.Swap(&other->device_type_);
  std::swap(num_tasks_, other->num_tasks_);
  device_name_.UnsafeArenaSwap(&other->device_name_);
  task_name_.UnsafeArenaSwap(&other->task_name_);
  communicator_key_.Swap(&other->communicator_key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompleteGroupResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompleteGroupResponse_descriptor_;
  metadata.reflection = CompleteGroupResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompleteGroupResponse

// optional int32 group_key = 1;
void CompleteGroupResponse::clear_group_key() {
  group_key_ = 0;
}
 ::google::protobuf::int32 CompleteGroupResponse::group_key() const {
  // @@protoc_insertion_point(field_get:tensorflow.CompleteGroupResponse.group_key)
  return group_key_;
}
 void CompleteGroupResponse::set_group_key(::google::protobuf::int32 value) {
  
  group_key_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CompleteGroupResponse.group_key)
}

// optional int32 group_size = 2;
void CompleteGroupResponse::clear_group_size() {
  group_size_ = 0;
}
 ::google::protobuf::int32 CompleteGroupResponse::group_size() const {
  // @@protoc_insertion_point(field_get:tensorflow.CompleteGroupResponse.group_size)
  return group_size_;
}
 void CompleteGroupResponse::set_group_size(::google::protobuf::int32 value) {
  
  group_size_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CompleteGroupResponse.group_size)
}

// optional string device_type = 3;
void CompleteGroupResponse::clear_device_type() {
  device_type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& CompleteGroupResponse::device_type() const {
  // @@protoc_insertion_point(field_get:tensorflow.CompleteGroupResponse.device_type)
  return device_type_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CompleteGroupResponse::set_device_type(const ::std::string& value) {
  
  device_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.CompleteGroupResponse.device_type)
}
 void CompleteGroupResponse::set_device_type(const char* value) {
  
  device_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.CompleteGroupResponse.device_type)
}
 void CompleteGroupResponse::set_device_type(const char* value,
    size_t size) {
  
  device_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.CompleteGroupResponse.device_type)
}
 ::std::string* CompleteGroupResponse::mutable_device_type() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.CompleteGroupResponse.device_type)
  return device_type_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* CompleteGroupResponse::release_device_type() {
  // @@protoc_insertion_point(field_release:tensorflow.CompleteGroupResponse.device_type)
  
  return device_type_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* CompleteGroupResponse::unsafe_arena_release_device_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.CompleteGroupResponse.device_type)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return device_type_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void CompleteGroupResponse::set_allocated_device_type(::std::string* device_type) {
  if (device_type != NULL) {
    
  } else {
    
  }
  device_type_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_type,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CompleteGroupResponse.device_type)
}
 void CompleteGroupResponse::unsafe_arena_set_allocated_device_type(
    ::std::string* device_type) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (device_type != NULL) {
    
  } else {
    
  }
  device_type_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      device_type, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.CompleteGroupResponse.device_type)
}

// optional int32 num_tasks = 4;
void CompleteGroupResponse::clear_num_tasks() {
  num_tasks_ = 0;
}
 ::google::protobuf::int32 CompleteGroupResponse::num_tasks() const {
  // @@protoc_insertion_point(field_get:tensorflow.CompleteGroupResponse.num_tasks)
  return num_tasks_;
}
 void CompleteGroupResponse::set_num_tasks(::google::protobuf::int32 value) {
  
  num_tasks_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CompleteGroupResponse.num_tasks)
}

// repeated string device_name = 5;
int CompleteGroupResponse::device_name_size() const {
  return device_name_.size();
}
void CompleteGroupResponse::clear_device_name() {
  device_name_.Clear();
}
 const ::std::string& CompleteGroupResponse::device_name(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.CompleteGroupResponse.device_name)
  return device_name_.Get(index);
}
 ::std::string* CompleteGroupResponse::mutable_device_name(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.CompleteGroupResponse.device_name)
  return device_name_.Mutable(index);
}
 void CompleteGroupResponse::set_device_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.CompleteGroupResponse.device_name)
  device_name_.Mutable(index)->assign(value);
}
 void CompleteGroupResponse::set_device_name(int index, const char* value) {
  device_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.CompleteGroupResponse.device_name)
}
 void CompleteGroupResponse::set_device_name(int index, const char* value, size_t size) {
  device_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.CompleteGroupResponse.device_name)
}
 ::std::string* CompleteGroupResponse::add_device_name() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.CompleteGroupResponse.device_name)
  return device_name_.Add();
}
 void CompleteGroupResponse::add_device_name(const ::std::string& value) {
  device_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.CompleteGroupResponse.device_name)
}
 void CompleteGroupResponse::add_device_name(const char* value) {
  device_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.CompleteGroupResponse.device_name)
}
 void CompleteGroupResponse::add_device_name(const char* value, size_t size) {
  device_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.CompleteGroupResponse.device_name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
CompleteGroupResponse::device_name() const {
  // @@protoc_insertion_point(field_list:tensorflow.CompleteGroupResponse.device_name)
  return device_name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
CompleteGroupResponse::mutable_device_name() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.CompleteGroupResponse.device_name)
  return &device_name_;
}

// repeated string task_name = 6;
int CompleteGroupResponse::task_name_size() const {
  return task_name_.size();
}
void CompleteGroupResponse::clear_task_name() {
  task_name_.Clear();
}
 const ::std::string& CompleteGroupResponse::task_name(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.CompleteGroupResponse.task_name)
  return task_name_.Get(index);
}
 ::std::string* CompleteGroupResponse::mutable_task_name(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.CompleteGroupResponse.task_name)
  return task_name_.Mutable(index);
}
 void CompleteGroupResponse::set_task_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.CompleteGroupResponse.task_name)
  task_name_.Mutable(index)->assign(value);
}
 void CompleteGroupResponse::set_task_name(int index, const char* value) {
  task_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.CompleteGroupResponse.task_name)
}
 void CompleteGroupResponse::set_task_name(int index, const char* value, size_t size) {
  task_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.CompleteGroupResponse.task_name)
}
 ::std::string* CompleteGroupResponse::add_task_name() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.CompleteGroupResponse.task_name)
  return task_name_.Add();
}
 void CompleteGroupResponse::add_task_name(const ::std::string& value) {
  task_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.CompleteGroupResponse.task_name)
}
 void CompleteGroupResponse::add_task_name(const char* value) {
  task_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.CompleteGroupResponse.task_name)
}
 void CompleteGroupResponse::add_task_name(const char* value, size_t size) {
  task_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.CompleteGroupResponse.task_name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
CompleteGroupResponse::task_name() const {
  // @@protoc_insertion_point(field_list:tensorflow.CompleteGroupResponse.task_name)
  return task_name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
CompleteGroupResponse::mutable_task_name() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.CompleteGroupResponse.task_name)
  return &task_name_;
}

// optional bytes communicator_key = 7;
void CompleteGroupResponse::clear_communicator_key() {
  communicator_key_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& CompleteGroupResponse::communicator_key() const {
  // @@protoc_insertion_point(field_get:tensorflow.CompleteGroupResponse.communicator_key)
  return communicator_key_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CompleteGroupResponse::set_communicator_key(const ::std::string& value) {
  
  communicator_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.CompleteGroupResponse.communicator_key)
}
 void CompleteGroupResponse::set_communicator_key(const char* value) {
  
  communicator_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.CompleteGroupResponse.communicator_key)
}
 void CompleteGroupResponse::set_communicator_key(const void* value,
    size_t size) {
  
  communicator_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.CompleteGroupResponse.communicator_key)
}
 ::std::string* CompleteGroupResponse::mutable_communicator_key() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.CompleteGroupResponse.communicator_key)
  return communicator_key_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* CompleteGroupResponse::release_communicator_key() {
  // @@protoc_insertion_point(field_release:tensorflow.CompleteGroupResponse.communicator_key)
  
  return communicator_key_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* CompleteGroupResponse::unsafe_arena_release_communicator_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.CompleteGroupResponse.communicator_key)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return communicator_key_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void CompleteGroupResponse::set_allocated_communicator_key(::std::string* communicator_key) {
  if (communicator_key != NULL) {
    
  } else {
    
  }
  communicator_key_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), communicator_key,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CompleteGroupResponse.communicator_key)
}
 void CompleteGroupResponse::unsafe_arena_set_allocated_communicator_key(
    ::std::string* communicator_key) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (communicator_key != NULL) {
    
  } else {
    
  }
  communicator_key_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      communicator_key, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.CompleteGroupResponse.communicator_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void CompleteInstanceRequest::_slow_mutable_shape() {
  shape_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::TensorShapeProto >(
      GetArenaNoVirtual());
}
::tensorflow::TensorShapeProto* CompleteInstanceRequest::_slow_release_shape() {
  if (shape_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::TensorShapeProto* temp = new ::tensorflow::TensorShapeProto;
    temp->MergeFrom(*shape_);
    shape_ = NULL;
    return temp;
  }
}
::tensorflow::TensorShapeProto* CompleteInstanceRequest::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.CompleteInstanceRequest.shape)
  
  ::tensorflow::TensorShapeProto* temp = shape_;
  shape_ = NULL;
  return temp;
}
void CompleteInstanceRequest::_slow_set_allocated_shape(
    ::google::protobuf::Arena* message_arena, ::tensorflow::TensorShapeProto** shape) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*shape) == NULL) {
      message_arena->Own(*shape);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*shape)) {
      ::tensorflow::TensorShapeProto* new_shape = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::TensorShapeProto >(
            message_arena);
      new_shape->CopyFrom(**shape);
      *shape = new_shape;
    }
}
void CompleteInstanceRequest::unsafe_arena_set_allocated_shape(
    ::tensorflow::TensorShapeProto* shape) {
  if (GetArenaNoVirtual() == NULL) {
    delete shape_;
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.CompleteInstanceRequest.shape)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompleteInstanceRequest::kNameFieldNumber;
const int CompleteInstanceRequest::kTypeFieldNumber;
const int CompleteInstanceRequest::kDataTypeFieldNumber;
const int CompleteInstanceRequest::kShapeFieldNumber;
const int CompleteInstanceRequest::kGroupKeyFieldNumber;
const int CompleteInstanceRequest::kGroupSizeFieldNumber;
const int CompleteInstanceRequest::kInstanceKeyFieldNumber;
const int CompleteInstanceRequest::kDeviceTypeFieldNumber;
const int CompleteInstanceRequest::kSubdivOffsetFieldNumber;
const int CompleteInstanceRequest::kDeviceFieldNumber;
const int CompleteInstanceRequest::kIsSourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompleteInstanceRequest::CompleteInstanceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CompleteInstanceRequest)
}

CompleteInstanceRequest::CompleteInstanceRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  subdiv_offset_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CompleteInstanceRequest)
}

void CompleteInstanceRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  shape_ = const_cast< ::tensorflow::TensorShapeProto*>(&::tensorflow::TensorShapeProto::default_instance());
}

CompleteInstanceRequest::CompleteInstanceRequest(const CompleteInstanceRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.CompleteInstanceRequest)
}

void CompleteInstanceRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  data_type_ = 0;
  shape_ = NULL;
  group_key_ = 0;
  group_size_ = 0;
  instance_key_ = 0;
  device_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_source_ = false;
}

CompleteInstanceRequest::~CompleteInstanceRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.CompleteInstanceRequest)
  SharedDtor();
}

void CompleteInstanceRequest::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  device_type_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  device_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
    delete shape_;
  }
}

void CompleteInstanceRequest::ArenaDtor(void* object) {
  CompleteInstanceRequest* _this = reinterpret_cast< CompleteInstanceRequest* >(object);
  (void)_this;
}
void CompleteInstanceRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CompleteInstanceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompleteInstanceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompleteInstanceRequest_descriptor_;
}

const CompleteInstanceRequest& CompleteInstanceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fworker_2eproto();
  return *default_instance_;
}

CompleteInstanceRequest* CompleteInstanceRequest::default_instance_ = NULL;

CompleteInstanceRequest* CompleteInstanceRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CompleteInstanceRequest>(arena);
}

void CompleteInstanceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CompleteInstanceRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CompleteInstanceRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CompleteInstanceRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, data_type_);
  ZR_(group_key_, group_size_);
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) delete shape_;
  shape_ = NULL;
  instance_key_ = 0;
  device_type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  device_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  is_source_ = false;

#undef ZR_HELPER_
#undef ZR_

  subdiv_offset_.Clear();
}

bool CompleteInstanceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CompleteInstanceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.CompleteInstanceRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_data_type;
        break;
      }

      // optional .tensorflow.DataType data_type = 3;
      case 3: {
        if (tag == 24) {
         parse_data_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_data_type(static_cast< ::tensorflow::DataType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_shape;
        break;
      }

      // optional .tensorflow.TensorShapeProto shape = 4;
      case 4: {
        if (tag == 34) {
         parse_shape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_group_key;
        break;
      }

      // optional int32 group_key = 5;
      case 5: {
        if (tag == 40) {
         parse_group_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_key_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_group_size;
        break;
      }

      // optional int32 group_size = 6;
      case 6: {
        if (tag == 48) {
         parse_group_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_instance_key;
        break;
      }

      // optional int32 instance_key = 7;
      case 7: {
        if (tag == 56) {
         parse_instance_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_key_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_device_type;
        break;
      }

      // optional string device_type = 8;
      case 8: {
        if (tag == 66) {
         parse_device_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_type().data(), this->device_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.CompleteInstanceRequest.device_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_subdiv_offset;
        break;
      }

      // repeated int32 subdiv_offset = 9;
      case 9: {
        if (tag == 74) {
         parse_subdiv_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_subdiv_offset())));
        } else if (tag == 72) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 74, input, this->mutable_subdiv_offset())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_device;
        break;
      }

      // optional string device = 10;
      case 10: {
        if (tag == 82) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.CompleteInstanceRequest.device"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_is_source;
        break;
      }

      // optional bool is_source = 11;
      case 11: {
        if (tag == 88) {
         parse_is_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_source_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CompleteInstanceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CompleteInstanceRequest)
  return false;
#undef DO_
}

void CompleteInstanceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CompleteInstanceRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CompleteInstanceRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional .tensorflow.DataType data_type = 3;
  if (this->data_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->data_type(), output);
  }

  // optional .tensorflow.TensorShapeProto shape = 4;
  if (this->has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->shape_, output);
  }

  // optional int32 group_key = 5;
  if (this->group_key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->group_key(), output);
  }

  // optional int32 group_size = 6;
  if (this->group_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->group_size(), output);
  }

  // optional int32 instance_key = 7;
  if (this->instance_key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->instance_key(), output);
  }

  // optional string device_type = 8;
  if (this->device_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_type().data(), this->device_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CompleteInstanceRequest.device_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->device_type(), output);
  }

  // repeated int32 subdiv_offset = 9;
  if (this->subdiv_offset_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_subdiv_offset_cached_byte_size_);
  }
  for (int i = 0; i < this->subdiv_offset_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->subdiv_offset(i), output);
  }

  // optional string device = 10;
  if (this->device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CompleteInstanceRequest.device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->device(), output);
  }

  // optional bool is_source = 11;
  if (this->is_source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_source(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.CompleteInstanceRequest)
}

::google::protobuf::uint8* CompleteInstanceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CompleteInstanceRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CompleteInstanceRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional .tensorflow.DataType data_type = 3;
  if (this->data_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->data_type(), target);
  }

  // optional .tensorflow.TensorShapeProto shape = 4;
  if (this->has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->shape_, false, target);
  }

  // optional int32 group_key = 5;
  if (this->group_key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->group_key(), target);
  }

  // optional int32 group_size = 6;
  if (this->group_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->group_size(), target);
  }

  // optional int32 instance_key = 7;
  if (this->instance_key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->instance_key(), target);
  }

  // optional string device_type = 8;
  if (this->device_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_type().data(), this->device_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CompleteInstanceRequest.device_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->device_type(), target);
  }

  // repeated int32 subdiv_offset = 9;
  if (this->subdiv_offset_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _subdiv_offset_cached_byte_size_, target);
  }
  for (int i = 0; i < this->subdiv_offset_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->subdiv_offset(i), target);
  }

  // optional string device = 10;
  if (this->device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CompleteInstanceRequest.device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->device(), target);
  }

  // optional bool is_source = 11;
  if (this->is_source() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_source(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CompleteInstanceRequest)
  return target;
}

int CompleteInstanceRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CompleteInstanceRequest)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // optional .tensorflow.DataType data_type = 3;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_type());
  }

  // optional .tensorflow.TensorShapeProto shape = 4;
  if (this->has_shape()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->shape_);
  }

  // optional int32 group_key = 5;
  if (this->group_key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group_key());
  }

  // optional int32 group_size = 6;
  if (this->group_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group_size());
  }

  // optional int32 instance_key = 7;
  if (this->instance_key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->instance_key());
  }

  // optional string device_type = 8;
  if (this->device_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_type());
  }

  // optional string device = 10;
  if (this->device().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device());
  }

  // optional bool is_source = 11;
  if (this->is_source() != 0) {
    total_size += 1 + 1;
  }

  // repeated int32 subdiv_offset = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->subdiv_offset_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->subdiv_offset(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _subdiv_offset_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompleteInstanceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CompleteInstanceRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CompleteInstanceRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CompleteInstanceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CompleteInstanceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CompleteInstanceRequest)
    MergeFrom(*source);
  }
}

void CompleteInstanceRequest::MergeFrom(const CompleteInstanceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CompleteInstanceRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  subdiv_offset_.MergeFrom(from.subdiv_offset_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.data_type() != 0) {
    set_data_type(from.data_type());
  }
  if (from.has_shape()) {
    mutable_shape()->::tensorflow::TensorShapeProto::MergeFrom(from.shape());
  }
  if (from.group_key() != 0) {
    set_group_key(from.group_key());
  }
  if (from.group_size() != 0) {
    set_group_size(from.group_size());
  }
  if (from.instance_key() != 0) {
    set_instance_key(from.instance_key());
  }
  if (from.device_type().size() > 0) {
    set_device_type(from.device_type());
  }
  if (from.device().size() > 0) {
    set_device(from.device());
  }
  if (from.is_source() != 0) {
    set_is_source(from.is_source());
  }
}

void CompleteInstanceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CompleteInstanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompleteInstanceRequest::CopyFrom(const CompleteInstanceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CompleteInstanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompleteInstanceRequest::IsInitialized() const {

  return true;
}

void CompleteInstanceRequest::Swap(CompleteInstanceRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CompleteInstanceRequest temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void CompleteInstanceRequest::UnsafeArenaSwap(CompleteInstanceRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CompleteInstanceRequest::InternalSwap(CompleteInstanceRequest* other) {
  name_.Swap(&other->name_);
  std::swap(type_, other->type_);
  std::swap(data_type_, other->data_type_);
  std::swap(shape_, other->shape_);
  std::swap(group_key_, other->group_key_);
  std::swap(group_size_, other->group_size_);
  std::swap(instance_key_, other->instance_key_);
  device_type_.Swap(&other->device_type_);
  subdiv_offset_.UnsafeArenaSwap(&other->subdiv_offset_);
  device_.Swap(&other->device_);
  std::swap(is_source_, other->is_source_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompleteInstanceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompleteInstanceRequest_descriptor_;
  metadata.reflection = CompleteInstanceRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompleteInstanceRequest

// optional string name = 1;
void CompleteInstanceRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& CompleteInstanceRequest::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.CompleteInstanceRequest.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CompleteInstanceRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.CompleteInstanceRequest.name)
}
 void CompleteInstanceRequest::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.CompleteInstanceRequest.name)
}
 void CompleteInstanceRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.CompleteInstanceRequest.name)
}
 ::std::string* CompleteInstanceRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.CompleteInstanceRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* CompleteInstanceRequest::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.CompleteInstanceRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* CompleteInstanceRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.CompleteInstanceRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void CompleteInstanceRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CompleteInstanceRequest.name)
}
 void CompleteInstanceRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.CompleteInstanceRequest.name)
}

// optional int32 type = 2;
void CompleteInstanceRequest::clear_type() {
  type_ = 0;
}
 ::google::protobuf::int32 CompleteInstanceRequest::type() const {
  // @@protoc_insertion_point(field_get:tensorflow.CompleteInstanceRequest.type)
  return type_;
}
 void CompleteInstanceRequest::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CompleteInstanceRequest.type)
}

// optional .tensorflow.DataType data_type = 3;
void CompleteInstanceRequest::clear_data_type() {
  data_type_ = 0;
}
 ::tensorflow::DataType CompleteInstanceRequest::data_type() const {
  // @@protoc_insertion_point(field_get:tensorflow.CompleteInstanceRequest.data_type)
  return static_cast< ::tensorflow::DataType >(data_type_);
}
 void CompleteInstanceRequest::set_data_type(::tensorflow::DataType value) {
  
  data_type_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CompleteInstanceRequest.data_type)
}

// optional .tensorflow.TensorShapeProto shape = 4;
bool CompleteInstanceRequest::has_shape() const {
  return !_is_default_instance_ && shape_ != NULL;
}
void CompleteInstanceRequest::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) delete shape_;
  shape_ = NULL;
}
const ::tensorflow::TensorShapeProto& CompleteInstanceRequest::shape() const {
  // @@protoc_insertion_point(field_get:tensorflow.CompleteInstanceRequest.shape)
  return shape_ != NULL ? *shape_ : *default_instance_->shape_;
}
::tensorflow::TensorShapeProto* CompleteInstanceRequest::mutable_shape() {
  
  if (shape_ == NULL) {
    _slow_mutable_shape();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.CompleteInstanceRequest.shape)
  return shape_;
}
::tensorflow::TensorShapeProto* CompleteInstanceRequest::release_shape() {
  // @@protoc_insertion_point(field_release:tensorflow.CompleteInstanceRequest.shape)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_shape();
  } else {
    ::tensorflow::TensorShapeProto* temp = shape_;
    shape_ = NULL;
    return temp;
  }
}
 void CompleteInstanceRequest::set_allocated_shape(::tensorflow::TensorShapeProto* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shape_;
  }
  if (shape != NULL) {
    _slow_set_allocated_shape(message_arena, &shape);
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CompleteInstanceRequest.shape)
}

// optional int32 group_key = 5;
void CompleteInstanceRequest::clear_group_key() {
  group_key_ = 0;
}
 ::google::protobuf::int32 CompleteInstanceRequest::group_key() const {
  // @@protoc_insertion_point(field_get:tensorflow.CompleteInstanceRequest.group_key)
  return group_key_;
}
 void CompleteInstanceRequest::set_group_key(::google::protobuf::int32 value) {
  
  group_key_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CompleteInstanceRequest.group_key)
}

// optional int32 group_size = 6;
void CompleteInstanceRequest::clear_group_size() {
  group_size_ = 0;
}
 ::google::protobuf::int32 CompleteInstanceRequest::group_size() const {
  // @@protoc_insertion_point(field_get:tensorflow.CompleteInstanceRequest.group_size)
  return group_size_;
}
 void CompleteInstanceRequest::set_group_size(::google::protobuf::int32 value) {
  
  group_size_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CompleteInstanceRequest.group_size)
}

// optional int32 instance_key = 7;
void CompleteInstanceRequest::clear_instance_key() {
  instance_key_ = 0;
}
 ::google::protobuf::int32 CompleteInstanceRequest::instance_key() const {
  // @@protoc_insertion_point(field_get:tensorflow.CompleteInstanceRequest.instance_key)
  return instance_key_;
}
 void CompleteInstanceRequest::set_instance_key(::google::protobuf::int32 value) {
  
  instance_key_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CompleteInstanceRequest.instance_key)
}

// optional string device_type = 8;
void CompleteInstanceRequest::clear_device_type() {
  device_type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& CompleteInstanceRequest::device_type() const {
  // @@protoc_insertion_point(field_get:tensorflow.CompleteInstanceRequest.device_type)
  return device_type_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CompleteInstanceRequest::set_device_type(const ::std::string& value) {
  
  device_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.CompleteInstanceRequest.device_type)
}
 void CompleteInstanceRequest::set_device_type(const char* value) {
  
  device_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.CompleteInstanceRequest.device_type)
}
 void CompleteInstanceRequest::set_device_type(const char* value,
    size_t size) {
  
  device_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.CompleteInstanceRequest.device_type)
}
 ::std::string* CompleteInstanceRequest::mutable_device_type() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.CompleteInstanceRequest.device_type)
  return device_type_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* CompleteInstanceRequest::release_device_type() {
  // @@protoc_insertion_point(field_release:tensorflow.CompleteInstanceRequest.device_type)
  
  return device_type_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* CompleteInstanceRequest::unsafe_arena_release_device_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.CompleteInstanceRequest.device_type)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return device_type_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void CompleteInstanceRequest::set_allocated_device_type(::std::string* device_type) {
  if (device_type != NULL) {
    
  } else {
    
  }
  device_type_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_type,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CompleteInstanceRequest.device_type)
}
 void CompleteInstanceRequest::unsafe_arena_set_allocated_device_type(
    ::std::string* device_type) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (device_type != NULL) {
    
  } else {
    
  }
  device_type_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      device_type, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.CompleteInstanceRequest.device_type)
}

// repeated int32 subdiv_offset = 9;
int CompleteInstanceRequest::subdiv_offset_size() const {
  return subdiv_offset_.size();
}
void CompleteInstanceRequest::clear_subdiv_offset() {
  subdiv_offset_.Clear();
}
 ::google::protobuf::int32 CompleteInstanceRequest::subdiv_offset(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.CompleteInstanceRequest.subdiv_offset)
  return subdiv_offset_.Get(index);
}
 void CompleteInstanceRequest::set_subdiv_offset(int index, ::google::protobuf::int32 value) {
  subdiv_offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.CompleteInstanceRequest.subdiv_offset)
}
 void CompleteInstanceRequest::add_subdiv_offset(::google::protobuf::int32 value) {
  subdiv_offset_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.CompleteInstanceRequest.subdiv_offset)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CompleteInstanceRequest::subdiv_offset() const {
  // @@protoc_insertion_point(field_list:tensorflow.CompleteInstanceRequest.subdiv_offset)
  return subdiv_offset_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CompleteInstanceRequest::mutable_subdiv_offset() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.CompleteInstanceRequest.subdiv_offset)
  return &subdiv_offset_;
}

// optional string device = 10;
void CompleteInstanceRequest::clear_device() {
  device_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& CompleteInstanceRequest::device() const {
  // @@protoc_insertion_point(field_get:tensorflow.CompleteInstanceRequest.device)
  return device_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CompleteInstanceRequest::set_device(const ::std::string& value) {
  
  device_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.CompleteInstanceRequest.device)
}
 void CompleteInstanceRequest::set_device(const char* value) {
  
  device_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.CompleteInstanceRequest.device)
}
 void CompleteInstanceRequest::set_device(const char* value,
    size_t size) {
  
  device_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.CompleteInstanceRequest.device)
}
 ::std::string* CompleteInstanceRequest::mutable_device() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.CompleteInstanceRequest.device)
  return device_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* CompleteInstanceRequest::release_device() {
  // @@protoc_insertion_point(field_release:tensorflow.CompleteInstanceRequest.device)
  
  return device_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* CompleteInstanceRequest::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.CompleteInstanceRequest.device)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return device_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void CompleteInstanceRequest::set_allocated_device(::std::string* device) {
  if (device != NULL) {
    
  } else {
    
  }
  device_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CompleteInstanceRequest.device)
}
 void CompleteInstanceRequest::unsafe_arena_set_allocated_device(
    ::std::string* device) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (device != NULL) {
    
  } else {
    
  }
  device_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      device, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.CompleteInstanceRequest.device)
}

// optional bool is_source = 11;
void CompleteInstanceRequest::clear_is_source() {
  is_source_ = false;
}
 bool CompleteInstanceRequest::is_source() const {
  // @@protoc_insertion_point(field_get:tensorflow.CompleteInstanceRequest.is_source)
  return is_source_;
}
 void CompleteInstanceRequest::set_is_source(bool value) {
  
  is_source_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CompleteInstanceRequest.is_source)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompleteInstanceResponse::kInstanceKeyFieldNumber;
const int CompleteInstanceResponse::kSourceRankFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompleteInstanceResponse::CompleteInstanceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CompleteInstanceResponse)
}

CompleteInstanceResponse::CompleteInstanceResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CompleteInstanceResponse)
}

void CompleteInstanceResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CompleteInstanceResponse::CompleteInstanceResponse(const CompleteInstanceResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.CompleteInstanceResponse)
}

void CompleteInstanceResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  instance_key_ = 0;
  source_rank_ = 0;
}

CompleteInstanceResponse::~CompleteInstanceResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.CompleteInstanceResponse)
  SharedDtor();
}

void CompleteInstanceResponse::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void CompleteInstanceResponse::ArenaDtor(void* object) {
  CompleteInstanceResponse* _this = reinterpret_cast< CompleteInstanceResponse* >(object);
  (void)_this;
}
void CompleteInstanceResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CompleteInstanceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompleteInstanceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompleteInstanceResponse_descriptor_;
}

const CompleteInstanceResponse& CompleteInstanceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fworker_2eproto();
  return *default_instance_;
}

CompleteInstanceResponse* CompleteInstanceResponse::default_instance_ = NULL;

CompleteInstanceResponse* CompleteInstanceResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CompleteInstanceResponse>(arena);
}

void CompleteInstanceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CompleteInstanceResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CompleteInstanceResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CompleteInstanceResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(instance_key_, source_rank_);

#undef ZR_HELPER_
#undef ZR_

}

bool CompleteInstanceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CompleteInstanceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 instance_key = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_key_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_source_rank;
        break;
      }

      // optional int32 source_rank = 2;
      case 2: {
        if (tag == 16) {
         parse_source_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_rank_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CompleteInstanceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CompleteInstanceResponse)
  return false;
#undef DO_
}

void CompleteInstanceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CompleteInstanceResponse)
  // optional int32 instance_key = 1;
  if (this->instance_key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instance_key(), output);
  }

  // optional int32 source_rank = 2;
  if (this->source_rank() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->source_rank(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.CompleteInstanceResponse)
}

::google::protobuf::uint8* CompleteInstanceResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CompleteInstanceResponse)
  // optional int32 instance_key = 1;
  if (this->instance_key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instance_key(), target);
  }

  // optional int32 source_rank = 2;
  if (this->source_rank() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->source_rank(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CompleteInstanceResponse)
  return target;
}

int CompleteInstanceResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CompleteInstanceResponse)
  int total_size = 0;

  // optional int32 instance_key = 1;
  if (this->instance_key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->instance_key());
  }

  // optional int32 source_rank = 2;
  if (this->source_rank() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source_rank());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompleteInstanceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CompleteInstanceResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CompleteInstanceResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CompleteInstanceResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CompleteInstanceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CompleteInstanceResponse)
    MergeFrom(*source);
  }
}

void CompleteInstanceResponse::MergeFrom(const CompleteInstanceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CompleteInstanceResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.instance_key() != 0) {
    set_instance_key(from.instance_key());
  }
  if (from.source_rank() != 0) {
    set_source_rank(from.source_rank());
  }
}

void CompleteInstanceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CompleteInstanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompleteInstanceResponse::CopyFrom(const CompleteInstanceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CompleteInstanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompleteInstanceResponse::IsInitialized() const {

  return true;
}

void CompleteInstanceResponse::Swap(CompleteInstanceResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CompleteInstanceResponse temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void CompleteInstanceResponse::UnsafeArenaSwap(CompleteInstanceResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CompleteInstanceResponse::InternalSwap(CompleteInstanceResponse* other) {
  std::swap(instance_key_, other->instance_key_);
  std::swap(source_rank_, other->source_rank_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompleteInstanceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompleteInstanceResponse_descriptor_;
  metadata.reflection = CompleteInstanceResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompleteInstanceResponse

// optional int32 instance_key = 1;
void CompleteInstanceResponse::clear_instance_key() {
  instance_key_ = 0;
}
 ::google::protobuf::int32 CompleteInstanceResponse::instance_key() const {
  // @@protoc_insertion_point(field_get:tensorflow.CompleteInstanceResponse.instance_key)
  return instance_key_;
}
 void CompleteInstanceResponse::set_instance_key(::google::protobuf::int32 value) {
  
  instance_key_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CompleteInstanceResponse.instance_key)
}

// optional int32 source_rank = 2;
void CompleteInstanceResponse::clear_source_rank() {
  source_rank_ = 0;
}
 ::google::protobuf::int32 CompleteInstanceResponse::source_rank() const {
  // @@protoc_insertion_point(field_get:tensorflow.CompleteInstanceResponse.source_rank)
  return source_rank_;
}
 void CompleteInstanceResponse::set_source_rank(::google::protobuf::int32 value) {
  
  source_rank_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CompleteInstanceResponse.source_rank)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetStepSequenceRequest::kGraphKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetStepSequenceRequest::GetStepSequenceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GetStepSequenceRequest)
}

GetStepSequenceRequest::GetStepSequenceRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  graph_key_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GetStepSequenceRequest)
}

void GetStepSequenceRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetStepSequenceRequest::GetStepSequenceRequest(const GetStepSequenceRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.GetStepSequenceRequest)
}

void GetStepSequenceRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

GetStepSequenceRequest::~GetStepSequenceRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.GetStepSequenceRequest)
  SharedDtor();
}

void GetStepSequenceRequest::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void GetStepSequenceRequest::ArenaDtor(void* object) {
  GetStepSequenceRequest* _this = reinterpret_cast< GetStepSequenceRequest* >(object);
  (void)_this;
}
void GetStepSequenceRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetStepSequenceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStepSequenceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStepSequenceRequest_descriptor_;
}

const GetStepSequenceRequest& GetStepSequenceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fworker_2eproto();
  return *default_instance_;
}

GetStepSequenceRequest* GetStepSequenceRequest::default_instance_ = NULL;

GetStepSequenceRequest* GetStepSequenceRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetStepSequenceRequest>(arena);
}

void GetStepSequenceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GetStepSequenceRequest)
  graph_key_.Clear();
}

bool GetStepSequenceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GetStepSequenceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 graph_key = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_graph_key())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10, input, this->mutable_graph_key())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GetStepSequenceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GetStepSequenceRequest)
  return false;
#undef DO_
}

void GetStepSequenceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GetStepSequenceRequest)
  // repeated int64 graph_key = 1;
  if (this->graph_key_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_graph_key_cached_byte_size_);
  }
  for (int i = 0; i < this->graph_key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->graph_key(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.GetStepSequenceRequest)
}

::google::protobuf::uint8* GetStepSequenceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GetStepSequenceRequest)
  // repeated int64 graph_key = 1;
  if (this->graph_key_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _graph_key_cached_byte_size_, target);
  }
  for (int i = 0; i < this->graph_key_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->graph_key(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GetStepSequenceRequest)
  return target;
}

int GetStepSequenceRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GetStepSequenceRequest)
  int total_size = 0;

  // repeated int64 graph_key = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->graph_key_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->graph_key(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _graph_key_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStepSequenceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GetStepSequenceRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetStepSequenceRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetStepSequenceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GetStepSequenceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GetStepSequenceRequest)
    MergeFrom(*source);
  }
}

void GetStepSequenceRequest::MergeFrom(const GetStepSequenceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GetStepSequenceRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  graph_key_.MergeFrom(from.graph_key_);
}

void GetStepSequenceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GetStepSequenceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStepSequenceRequest::CopyFrom(const GetStepSequenceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GetStepSequenceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStepSequenceRequest::IsInitialized() const {

  return true;
}

void GetStepSequenceRequest::Swap(GetStepSequenceRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetStepSequenceRequest temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void GetStepSequenceRequest::UnsafeArenaSwap(GetStepSequenceRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetStepSequenceRequest::InternalSwap(GetStepSequenceRequest* other) {
  graph_key_.UnsafeArenaSwap(&other->graph_key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetStepSequenceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStepSequenceRequest_descriptor_;
  metadata.reflection = GetStepSequenceRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetStepSequenceRequest

// repeated int64 graph_key = 1;
int GetStepSequenceRequest::graph_key_size() const {
  return graph_key_.size();
}
void GetStepSequenceRequest::clear_graph_key() {
  graph_key_.Clear();
}
 ::google::protobuf::int64 GetStepSequenceRequest::graph_key(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GetStepSequenceRequest.graph_key)
  return graph_key_.Get(index);
}
 void GetStepSequenceRequest::set_graph_key(int index, ::google::protobuf::int64 value) {
  graph_key_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.GetStepSequenceRequest.graph_key)
}
 void GetStepSequenceRequest::add_graph_key(::google::protobuf::int64 value) {
  graph_key_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.GetStepSequenceRequest.graph_key)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
GetStepSequenceRequest::graph_key() const {
  // @@protoc_insertion_point(field_list:tensorflow.GetStepSequenceRequest.graph_key)
  return graph_key_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
GetStepSequenceRequest::mutable_graph_key() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GetStepSequenceRequest.graph_key)
  return &graph_key_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StepSequence::kGraphKeyFieldNumber;
const int StepSequence::kNextStepIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StepSequence::StepSequence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.StepSequence)
}

StepSequence::StepSequence(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.StepSequence)
}

void StepSequence::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StepSequence::StepSequence(const StepSequence& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.StepSequence)
}

void StepSequence::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  graph_key_ = GOOGLE_LONGLONG(0);
  next_step_id_ = GOOGLE_LONGLONG(0);
}

StepSequence::~StepSequence() {
  // @@protoc_insertion_point(destructor:tensorflow.StepSequence)
  SharedDtor();
}

void StepSequence::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void StepSequence::ArenaDtor(void* object) {
  StepSequence* _this = reinterpret_cast< StepSequence* >(object);
  (void)_this;
}
void StepSequence::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StepSequence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StepSequence::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StepSequence_descriptor_;
}

const StepSequence& StepSequence::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fworker_2eproto();
  return *default_instance_;
}

StepSequence* StepSequence::default_instance_ = NULL;

StepSequence* StepSequence::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<StepSequence>(arena);
}

void StepSequence::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.StepSequence)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StepSequence, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StepSequence*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(graph_key_, next_step_id_);

#undef ZR_HELPER_
#undef ZR_

}

bool StepSequence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.StepSequence)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 graph_key = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &graph_key_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_next_step_id;
        break;
      }

      // optional int64 next_step_id = 2;
      case 2: {
        if (tag == 16) {
         parse_next_step_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &next_step_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.StepSequence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.StepSequence)
  return false;
#undef DO_
}

void StepSequence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.StepSequence)
  // optional int64 graph_key = 1;
  if (this->graph_key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->graph_key(), output);
  }

  // optional int64 next_step_id = 2;
  if (this->next_step_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->next_step_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.StepSequence)
}

::google::protobuf::uint8* StepSequence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.StepSequence)
  // optional int64 graph_key = 1;
  if (this->graph_key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->graph_key(), target);
  }

  // optional int64 next_step_id = 2;
  if (this->next_step_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->next_step_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.StepSequence)
  return target;
}

int StepSequence::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.StepSequence)
  int total_size = 0;

  // optional int64 graph_key = 1;
  if (this->graph_key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->graph_key());
  }

  // optional int64 next_step_id = 2;
  if (this->next_step_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->next_step_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StepSequence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.StepSequence)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StepSequence* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StepSequence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.StepSequence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.StepSequence)
    MergeFrom(*source);
  }
}

void StepSequence::MergeFrom(const StepSequence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.StepSequence)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.graph_key() != 0) {
    set_graph_key(from.graph_key());
  }
  if (from.next_step_id() != 0) {
    set_next_step_id(from.next_step_id());
  }
}

void StepSequence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.StepSequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StepSequence::CopyFrom(const StepSequence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.StepSequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StepSequence::IsInitialized() const {

  return true;
}

void StepSequence::Swap(StepSequence* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StepSequence temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void StepSequence::UnsafeArenaSwap(StepSequence* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StepSequence::InternalSwap(StepSequence* other) {
  std::swap(graph_key_, other->graph_key_);
  std::swap(next_step_id_, other->next_step_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StepSequence::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StepSequence_descriptor_;
  metadata.reflection = StepSequence_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StepSequence

// optional int64 graph_key = 1;
void StepSequence::clear_graph_key() {
  graph_key_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 StepSequence::graph_key() const {
  // @@protoc_insertion_point(field_get:tensorflow.StepSequence.graph_key)
  return graph_key_;
}
 void StepSequence::set_graph_key(::google::protobuf::int64 value) {
  
  graph_key_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.StepSequence.graph_key)
}

// optional int64 next_step_id = 2;
void StepSequence::clear_next_step_id() {
  next_step_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 StepSequence::next_step_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.StepSequence.next_step_id)
  return next_step_id_;
}
 void StepSequence::set_next_step_id(::google::protobuf::int64 value) {
  
  next_step_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.StepSequence.next_step_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetStepSequenceResponse::kStepSequenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetStepSequenceResponse::GetStepSequenceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GetStepSequenceResponse)
}

GetStepSequenceResponse::GetStepSequenceResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  step_sequence_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GetStepSequenceResponse)
}

void GetStepSequenceResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetStepSequenceResponse::GetStepSequenceResponse(const GetStepSequenceResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.GetStepSequenceResponse)
}

void GetStepSequenceResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

GetStepSequenceResponse::~GetStepSequenceResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.GetStepSequenceResponse)
  SharedDtor();
}

void GetStepSequenceResponse::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void GetStepSequenceResponse::ArenaDtor(void* object) {
  GetStepSequenceResponse* _this = reinterpret_cast< GetStepSequenceResponse* >(object);
  (void)_this;
}
void GetStepSequenceResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetStepSequenceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStepSequenceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStepSequenceResponse_descriptor_;
}

const GetStepSequenceResponse& GetStepSequenceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fworker_2eproto();
  return *default_instance_;
}

GetStepSequenceResponse* GetStepSequenceResponse::default_instance_ = NULL;

GetStepSequenceResponse* GetStepSequenceResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetStepSequenceResponse>(arena);
}

void GetStepSequenceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GetStepSequenceResponse)
  step_sequence_.Clear();
}

bool GetStepSequenceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GetStepSequenceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.StepSequence step_sequence = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_step_sequence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_step_sequence()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_step_sequence;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GetStepSequenceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GetStepSequenceResponse)
  return false;
#undef DO_
}

void GetStepSequenceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GetStepSequenceResponse)
  // repeated .tensorflow.StepSequence step_sequence = 1;
  for (unsigned int i = 0, n = this->step_sequence_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->step_sequence(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.GetStepSequenceResponse)
}

::google::protobuf::uint8* GetStepSequenceResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GetStepSequenceResponse)
  // repeated .tensorflow.StepSequence step_sequence = 1;
  for (unsigned int i = 0, n = this->step_sequence_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->step_sequence(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GetStepSequenceResponse)
  return target;
}

int GetStepSequenceResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GetStepSequenceResponse)
  int total_size = 0;

  // repeated .tensorflow.StepSequence step_sequence = 1;
  total_size += 1 * this->step_sequence_size();
  for (int i = 0; i < this->step_sequence_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->step_sequence(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStepSequenceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GetStepSequenceResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetStepSequenceResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetStepSequenceResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GetStepSequenceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GetStepSequenceResponse)
    MergeFrom(*source);
  }
}

void GetStepSequenceResponse::MergeFrom(const GetStepSequenceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GetStepSequenceResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  step_sequence_.MergeFrom(from.step_sequence_);
}

void GetStepSequenceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GetStepSequenceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStepSequenceResponse::CopyFrom(const GetStepSequenceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GetStepSequenceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStepSequenceResponse::IsInitialized() const {

  return true;
}

void GetStepSequenceResponse::Swap(GetStepSequenceResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetStepSequenceResponse temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void GetStepSequenceResponse::UnsafeArenaSwap(GetStepSequenceResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetStepSequenceResponse::InternalSwap(GetStepSequenceResponse* other) {
  step_sequence_.UnsafeArenaSwap(&other->step_sequence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetStepSequenceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStepSequenceResponse_descriptor_;
  metadata.reflection = GetStepSequenceResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetStepSequenceResponse

// repeated .tensorflow.StepSequence step_sequence = 1;
int GetStepSequenceResponse::step_sequence_size() const {
  return step_sequence_.size();
}
void GetStepSequenceResponse::clear_step_sequence() {
  step_sequence_.Clear();
}
const ::tensorflow::StepSequence& GetStepSequenceResponse::step_sequence(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GetStepSequenceResponse.step_sequence)
  return step_sequence_.Get(index);
}
::tensorflow::StepSequence* GetStepSequenceResponse::mutable_step_sequence(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.GetStepSequenceResponse.step_sequence)
  return step_sequence_.Mutable(index);
}
::tensorflow::StepSequence* GetStepSequenceResponse::add_step_sequence() {
  // @@protoc_insertion_point(field_add:tensorflow.GetStepSequenceResponse.step_sequence)
  return step_sequence_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::StepSequence >*
GetStepSequenceResponse::mutable_step_sequence() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GetStepSequenceResponse.step_sequence)
  return &step_sequence_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::StepSequence >&
GetStepSequenceResponse::step_sequence() const {
  // @@protoc_insertion_point(field_list:tensorflow.GetStepSequenceResponse.step_sequence)
  return step_sequence_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
