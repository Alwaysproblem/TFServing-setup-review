// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/struct.proto

#ifndef PROTOBUF_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto__INCLUDED
#define PROTOBUF_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow/core/framework/tensor.pb.h"
#include "tensorflow/core/framework/tensor_shape.pb.h"
#include "tensorflow/core/framework/types.pb.h"
// @@protoc_insertion_point(includes)

namespace tensorflow {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto();
void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto();
void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto();

class BoundedTensorSpecProto;
class DictValue;
class ListValue;
class NamedTupleValue;
class NoneValue;
class PairValue;
class StructuredValue;
class TensorSpecProto;
class TupleValue;
class TypeSpecProto;

enum TypeSpecProto_TypeSpecClass {
  TypeSpecProto_TypeSpecClass_UNKNOWN = 0,
  TypeSpecProto_TypeSpecClass_SPARSE_TENSOR_SPEC = 1,
  TypeSpecProto_TypeSpecClass_INDEXED_SLICES_SPEC = 2,
  TypeSpecProto_TypeSpecClass_RAGGED_TENSOR_SPEC = 3,
  TypeSpecProto_TypeSpecClass_TENSOR_ARRAY_SPEC = 4,
  TypeSpecProto_TypeSpecClass_DATA_DATASET_SPEC = 5,
  TypeSpecProto_TypeSpecClass_DATA_ITERATOR_SPEC = 6,
  TypeSpecProto_TypeSpecClass_OPTIONAL_SPEC = 7,
  TypeSpecProto_TypeSpecClass_PER_REPLICA_SPEC = 8,
  TypeSpecProto_TypeSpecClass_VARIABLE_SPEC = 9,
  TypeSpecProto_TypeSpecClass_ROW_PARTITION_SPEC = 10,
  TypeSpecProto_TypeSpecClass_TypeSpecProto_TypeSpecClass_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TypeSpecProto_TypeSpecClass_TypeSpecProto_TypeSpecClass_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TypeSpecProto_TypeSpecClass_IsValid(int value);
const TypeSpecProto_TypeSpecClass TypeSpecProto_TypeSpecClass_TypeSpecClass_MIN = TypeSpecProto_TypeSpecClass_UNKNOWN;
const TypeSpecProto_TypeSpecClass TypeSpecProto_TypeSpecClass_TypeSpecClass_MAX = TypeSpecProto_TypeSpecClass_ROW_PARTITION_SPEC;
const int TypeSpecProto_TypeSpecClass_TypeSpecClass_ARRAYSIZE = TypeSpecProto_TypeSpecClass_TypeSpecClass_MAX + 1;

const ::google::protobuf::EnumDescriptor* TypeSpecProto_TypeSpecClass_descriptor();
inline const ::std::string& TypeSpecProto_TypeSpecClass_Name(TypeSpecProto_TypeSpecClass value) {
  return ::google::protobuf::internal::NameOfEnum(
    TypeSpecProto_TypeSpecClass_descriptor(), value);
}
inline bool TypeSpecProto_TypeSpecClass_Parse(
    const ::std::string& name, TypeSpecProto_TypeSpecClass* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TypeSpecProto_TypeSpecClass>(
    TypeSpecProto_TypeSpecClass_descriptor(), name, value);
}
// ===================================================================

class StructuredValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.StructuredValue) */ {
 public:
  StructuredValue();
  virtual ~StructuredValue();

  StructuredValue(const StructuredValue& from);

  inline StructuredValue& operator=(const StructuredValue& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StructuredValue& default_instance();

  enum KindCase {
    kNoneValue = 1,
    kFloat64Value = 11,
    kInt64Value = 12,
    kStringValue = 13,
    kBoolValue = 14,
    kTensorShapeValue = 31,
    kTensorDtypeValue = 32,
    kTensorSpecValue = 33,
    kTypeSpecValue = 34,
    kBoundedTensorSpecValue = 35,
    kListValue = 51,
    kTupleValue = 52,
    kDictValue = 53,
    kNamedTupleValue = 54,
    KIND_NOT_SET = 0,
  };

  void Swap(StructuredValue* other);

  // implements Message ----------------------------------------------

  inline StructuredValue* New() const { return New(NULL); }

  StructuredValue* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StructuredValue& from);
  void MergeFrom(const StructuredValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StructuredValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .tensorflow.NoneValue none_value = 1;
  bool has_none_value() const;
  void clear_none_value();
  static const int kNoneValueFieldNumber = 1;
  const ::tensorflow::NoneValue& none_value() const;
  ::tensorflow::NoneValue* mutable_none_value();
  ::tensorflow::NoneValue* release_none_value();
  void set_allocated_none_value(::tensorflow::NoneValue* none_value);

  // optional double float64_value = 11;
  private:
  bool has_float64_value() const;
  public:
  void clear_float64_value();
  static const int kFloat64ValueFieldNumber = 11;
  double float64_value() const;
  void set_float64_value(double value);

  // optional sint64 int64_value = 12;
  private:
  bool has_int64_value() const;
  public:
  void clear_int64_value();
  static const int kInt64ValueFieldNumber = 12;
  ::google::protobuf::int64 int64_value() const;
  void set_int64_value(::google::protobuf::int64 value);

  // optional string string_value = 13;
  private:
  bool has_string_value() const;
  public:
  void clear_string_value();
  static const int kStringValueFieldNumber = 13;
  const ::std::string& string_value() const;
  void set_string_value(const ::std::string& value);
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  ::std::string* mutable_string_value();
  ::std::string* release_string_value();
  void set_allocated_string_value(::std::string* string_value);

  // optional bool bool_value = 14;
  private:
  bool has_bool_value() const;
  public:
  void clear_bool_value();
  static const int kBoolValueFieldNumber = 14;
  bool bool_value() const;
  void set_bool_value(bool value);

  // optional .tensorflow.TensorShapeProto tensor_shape_value = 31;
  bool has_tensor_shape_value() const;
  void clear_tensor_shape_value();
  static const int kTensorShapeValueFieldNumber = 31;
  const ::tensorflow::TensorShapeProto& tensor_shape_value() const;
  ::tensorflow::TensorShapeProto* mutable_tensor_shape_value();
  ::tensorflow::TensorShapeProto* release_tensor_shape_value();
  void set_allocated_tensor_shape_value(::tensorflow::TensorShapeProto* tensor_shape_value);

  // optional .tensorflow.DataType tensor_dtype_value = 32;
  private:
  bool has_tensor_dtype_value() const;
  public:
  void clear_tensor_dtype_value();
  static const int kTensorDtypeValueFieldNumber = 32;
  ::tensorflow::DataType tensor_dtype_value() const;
  void set_tensor_dtype_value(::tensorflow::DataType value);

  // optional .tensorflow.TensorSpecProto tensor_spec_value = 33;
  bool has_tensor_spec_value() const;
  void clear_tensor_spec_value();
  static const int kTensorSpecValueFieldNumber = 33;
  const ::tensorflow::TensorSpecProto& tensor_spec_value() const;
  ::tensorflow::TensorSpecProto* mutable_tensor_spec_value();
  ::tensorflow::TensorSpecProto* release_tensor_spec_value();
  void set_allocated_tensor_spec_value(::tensorflow::TensorSpecProto* tensor_spec_value);

  // optional .tensorflow.TypeSpecProto type_spec_value = 34;
  bool has_type_spec_value() const;
  void clear_type_spec_value();
  static const int kTypeSpecValueFieldNumber = 34;
  const ::tensorflow::TypeSpecProto& type_spec_value() const;
  ::tensorflow::TypeSpecProto* mutable_type_spec_value();
  ::tensorflow::TypeSpecProto* release_type_spec_value();
  void set_allocated_type_spec_value(::tensorflow::TypeSpecProto* type_spec_value);

  // optional .tensorflow.BoundedTensorSpecProto bounded_tensor_spec_value = 35;
  bool has_bounded_tensor_spec_value() const;
  void clear_bounded_tensor_spec_value();
  static const int kBoundedTensorSpecValueFieldNumber = 35;
  const ::tensorflow::BoundedTensorSpecProto& bounded_tensor_spec_value() const;
  ::tensorflow::BoundedTensorSpecProto* mutable_bounded_tensor_spec_value();
  ::tensorflow::BoundedTensorSpecProto* release_bounded_tensor_spec_value();
  void set_allocated_bounded_tensor_spec_value(::tensorflow::BoundedTensorSpecProto* bounded_tensor_spec_value);

  // optional .tensorflow.ListValue list_value = 51;
  bool has_list_value() const;
  void clear_list_value();
  static const int kListValueFieldNumber = 51;
  const ::tensorflow::ListValue& list_value() const;
  ::tensorflow::ListValue* mutable_list_value();
  ::tensorflow::ListValue* release_list_value();
  void set_allocated_list_value(::tensorflow::ListValue* list_value);

  // optional .tensorflow.TupleValue tuple_value = 52;
  bool has_tuple_value() const;
  void clear_tuple_value();
  static const int kTupleValueFieldNumber = 52;
  const ::tensorflow::TupleValue& tuple_value() const;
  ::tensorflow::TupleValue* mutable_tuple_value();
  ::tensorflow::TupleValue* release_tuple_value();
  void set_allocated_tuple_value(::tensorflow::TupleValue* tuple_value);

  // optional .tensorflow.DictValue dict_value = 53;
  bool has_dict_value() const;
  void clear_dict_value();
  static const int kDictValueFieldNumber = 53;
  const ::tensorflow::DictValue& dict_value() const;
  ::tensorflow::DictValue* mutable_dict_value();
  ::tensorflow::DictValue* release_dict_value();
  void set_allocated_dict_value(::tensorflow::DictValue* dict_value);

  // optional .tensorflow.NamedTupleValue named_tuple_value = 54;
  bool has_named_tuple_value() const;
  void clear_named_tuple_value();
  static const int kNamedTupleValueFieldNumber = 54;
  const ::tensorflow::NamedTupleValue& named_tuple_value() const;
  ::tensorflow::NamedTupleValue* mutable_named_tuple_value();
  ::tensorflow::NamedTupleValue* release_named_tuple_value();
  void set_allocated_named_tuple_value(::tensorflow::NamedTupleValue* named_tuple_value);

  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:tensorflow.StructuredValue)
 private:
  inline void set_has_none_value();
  inline void set_has_float64_value();
  inline void set_has_int64_value();
  inline void set_has_string_value();
  inline void set_has_bool_value();
  inline void set_has_tensor_shape_value();
  inline void set_has_tensor_dtype_value();
  inline void set_has_tensor_spec_value();
  inline void set_has_type_spec_value();
  inline void set_has_bounded_tensor_spec_value();
  inline void set_has_list_value();
  inline void set_has_tuple_value();
  inline void set_has_dict_value();
  inline void set_has_named_tuple_value();

  inline bool has_kind() const;
  void clear_kind();
  inline void clear_has_kind();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  union KindUnion {
    KindUnion() {}
    ::tensorflow::NoneValue* none_value_;
    double float64_value_;
    ::google::protobuf::int64 int64_value_;
    ::google::protobuf::internal::ArenaStringPtr string_value_;
    bool bool_value_;
    ::tensorflow::TensorShapeProto* tensor_shape_value_;
    int tensor_dtype_value_;
    ::tensorflow::TensorSpecProto* tensor_spec_value_;
    ::tensorflow::TypeSpecProto* type_spec_value_;
    ::tensorflow::BoundedTensorSpecProto* bounded_tensor_spec_value_;
    ::tensorflow::ListValue* list_value_;
    ::tensorflow::TupleValue* tuple_value_;
    ::tensorflow::DictValue* dict_value_;
    ::tensorflow::NamedTupleValue* named_tuple_value_;
  } kind_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto();

  void InitAsDefaultInstance();
  static StructuredValue* default_instance_;
};
// -------------------------------------------------------------------

class NoneValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.NoneValue) */ {
 public:
  NoneValue();
  virtual ~NoneValue();

  NoneValue(const NoneValue& from);

  inline NoneValue& operator=(const NoneValue& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NoneValue& default_instance();

  void Swap(NoneValue* other);

  // implements Message ----------------------------------------------

  inline NoneValue* New() const { return New(NULL); }

  NoneValue* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NoneValue& from);
  void MergeFrom(const NoneValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NoneValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tensorflow.NoneValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto();

  void InitAsDefaultInstance();
  static NoneValue* default_instance_;
};
// -------------------------------------------------------------------

class ListValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.ListValue) */ {
 public:
  ListValue();
  virtual ~ListValue();

  ListValue(const ListValue& from);

  inline ListValue& operator=(const ListValue& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListValue& default_instance();

  void Swap(ListValue* other);

  // implements Message ----------------------------------------------

  inline ListValue* New() const { return New(NULL); }

  ListValue* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListValue& from);
  void MergeFrom(const ListValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ListValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tensorflow.StructuredValue values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  const ::tensorflow::StructuredValue& values(int index) const;
  ::tensorflow::StructuredValue* mutable_values(int index);
  ::tensorflow::StructuredValue* add_values();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::StructuredValue >*
      mutable_values();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::StructuredValue >&
      values() const;

  // @@protoc_insertion_point(class_scope:tensorflow.ListValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::StructuredValue > values_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto();

  void InitAsDefaultInstance();
  static ListValue* default_instance_;
};
// -------------------------------------------------------------------

class TupleValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.TupleValue) */ {
 public:
  TupleValue();
  virtual ~TupleValue();

  TupleValue(const TupleValue& from);

  inline TupleValue& operator=(const TupleValue& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TupleValue& default_instance();

  void Swap(TupleValue* other);

  // implements Message ----------------------------------------------

  inline TupleValue* New() const { return New(NULL); }

  TupleValue* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TupleValue& from);
  void MergeFrom(const TupleValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TupleValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tensorflow.StructuredValue values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  const ::tensorflow::StructuredValue& values(int index) const;
  ::tensorflow::StructuredValue* mutable_values(int index);
  ::tensorflow::StructuredValue* add_values();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::StructuredValue >*
      mutable_values();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::StructuredValue >&
      values() const;

  // @@protoc_insertion_point(class_scope:tensorflow.TupleValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::StructuredValue > values_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto();

  void InitAsDefaultInstance();
  static TupleValue* default_instance_;
};
// -------------------------------------------------------------------

class DictValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.DictValue) */ {
 public:
  DictValue();
  virtual ~DictValue();

  DictValue(const DictValue& from);

  inline DictValue& operator=(const DictValue& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DictValue& default_instance();

  void Swap(DictValue* other);

  // implements Message ----------------------------------------------

  inline DictValue* New() const { return New(NULL); }

  DictValue* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DictValue& from);
  void MergeFrom(const DictValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DictValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .tensorflow.StructuredValue> fields = 1;
  int fields_size() const;
  void clear_fields();
  static const int kFieldsFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::tensorflow::StructuredValue >&
      fields() const;
  ::google::protobuf::Map< ::std::string, ::tensorflow::StructuredValue >*
      mutable_fields();

  // @@protoc_insertion_point(class_scope:tensorflow.DictValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::tensorflow::StructuredValue,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      DictValue_FieldsEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::tensorflow::StructuredValue,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > fields_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto();

  void InitAsDefaultInstance();
  static DictValue* default_instance_;
};
// -------------------------------------------------------------------

class PairValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.PairValue) */ {
 public:
  PairValue();
  virtual ~PairValue();

  PairValue(const PairValue& from);

  inline PairValue& operator=(const PairValue& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PairValue& default_instance();

  void Swap(PairValue* other);

  // implements Message ----------------------------------------------

  inline PairValue* New() const { return New(NULL); }

  PairValue* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PairValue& from);
  void MergeFrom(const PairValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PairValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional .tensorflow.StructuredValue value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::tensorflow::StructuredValue& value() const;
  ::tensorflow::StructuredValue* mutable_value();
  ::tensorflow::StructuredValue* release_value();
  void set_allocated_value(::tensorflow::StructuredValue* value);

  // @@protoc_insertion_point(class_scope:tensorflow.PairValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::tensorflow::StructuredValue* value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto();

  void InitAsDefaultInstance();
  static PairValue* default_instance_;
};
// -------------------------------------------------------------------

class NamedTupleValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.NamedTupleValue) */ {
 public:
  NamedTupleValue();
  virtual ~NamedTupleValue();

  NamedTupleValue(const NamedTupleValue& from);

  inline NamedTupleValue& operator=(const NamedTupleValue& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NamedTupleValue& default_instance();

  void Swap(NamedTupleValue* other);

  // implements Message ----------------------------------------------

  inline NamedTupleValue* New() const { return New(NULL); }

  NamedTupleValue* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NamedTupleValue& from);
  void MergeFrom(const NamedTupleValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NamedTupleValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated .tensorflow.PairValue values = 2;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 2;
  const ::tensorflow::PairValue& values(int index) const;
  ::tensorflow::PairValue* mutable_values(int index);
  ::tensorflow::PairValue* add_values();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::PairValue >*
      mutable_values();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::PairValue >&
      values() const;

  // @@protoc_insertion_point(class_scope:tensorflow.NamedTupleValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::PairValue > values_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto();

  void InitAsDefaultInstance();
  static NamedTupleValue* default_instance_;
};
// -------------------------------------------------------------------

class TensorSpecProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.TensorSpecProto) */ {
 public:
  TensorSpecProto();
  virtual ~TensorSpecProto();

  TensorSpecProto(const TensorSpecProto& from);

  inline TensorSpecProto& operator=(const TensorSpecProto& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TensorSpecProto& default_instance();

  void Swap(TensorSpecProto* other);

  // implements Message ----------------------------------------------

  inline TensorSpecProto* New() const { return New(NULL); }

  TensorSpecProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TensorSpecProto& from);
  void MergeFrom(const TensorSpecProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TensorSpecProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .tensorflow.TensorShapeProto shape = 2;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 2;
  const ::tensorflow::TensorShapeProto& shape() const;
  ::tensorflow::TensorShapeProto* mutable_shape();
  ::tensorflow::TensorShapeProto* release_shape();
  void set_allocated_shape(::tensorflow::TensorShapeProto* shape);

  // optional .tensorflow.DataType dtype = 3;
  void clear_dtype();
  static const int kDtypeFieldNumber = 3;
  ::tensorflow::DataType dtype() const;
  void set_dtype(::tensorflow::DataType value);

  // @@protoc_insertion_point(class_scope:tensorflow.TensorSpecProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::tensorflow::TensorShapeProto* shape_;
  int dtype_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto();

  void InitAsDefaultInstance();
  static TensorSpecProto* default_instance_;
};
// -------------------------------------------------------------------

class BoundedTensorSpecProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.BoundedTensorSpecProto) */ {
 public:
  BoundedTensorSpecProto();
  virtual ~BoundedTensorSpecProto();

  BoundedTensorSpecProto(const BoundedTensorSpecProto& from);

  inline BoundedTensorSpecProto& operator=(const BoundedTensorSpecProto& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BoundedTensorSpecProto& default_instance();

  void Swap(BoundedTensorSpecProto* other);

  // implements Message ----------------------------------------------

  inline BoundedTensorSpecProto* New() const { return New(NULL); }

  BoundedTensorSpecProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BoundedTensorSpecProto& from);
  void MergeFrom(const BoundedTensorSpecProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BoundedTensorSpecProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .tensorflow.TensorShapeProto shape = 2;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 2;
  const ::tensorflow::TensorShapeProto& shape() const;
  ::tensorflow::TensorShapeProto* mutable_shape();
  ::tensorflow::TensorShapeProto* release_shape();
  void set_allocated_shape(::tensorflow::TensorShapeProto* shape);

  // optional .tensorflow.DataType dtype = 3;
  void clear_dtype();
  static const int kDtypeFieldNumber = 3;
  ::tensorflow::DataType dtype() const;
  void set_dtype(::tensorflow::DataType value);

  // optional .tensorflow.TensorProto minimum = 4;
  bool has_minimum() const;
  void clear_minimum();
  static const int kMinimumFieldNumber = 4;
  const ::tensorflow::TensorProto& minimum() const;
  ::tensorflow::TensorProto* mutable_minimum();
  ::tensorflow::TensorProto* release_minimum();
  void set_allocated_minimum(::tensorflow::TensorProto* minimum);

  // optional .tensorflow.TensorProto maximum = 5;
  bool has_maximum() const;
  void clear_maximum();
  static const int kMaximumFieldNumber = 5;
  const ::tensorflow::TensorProto& maximum() const;
  ::tensorflow::TensorProto* mutable_maximum();
  ::tensorflow::TensorProto* release_maximum();
  void set_allocated_maximum(::tensorflow::TensorProto* maximum);

  // @@protoc_insertion_point(class_scope:tensorflow.BoundedTensorSpecProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::tensorflow::TensorShapeProto* shape_;
  ::tensorflow::TensorProto* minimum_;
  ::tensorflow::TensorProto* maximum_;
  int dtype_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto();

  void InitAsDefaultInstance();
  static BoundedTensorSpecProto* default_instance_;
};
// -------------------------------------------------------------------

class TypeSpecProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.TypeSpecProto) */ {
 public:
  TypeSpecProto();
  virtual ~TypeSpecProto();

  TypeSpecProto(const TypeSpecProto& from);

  inline TypeSpecProto& operator=(const TypeSpecProto& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TypeSpecProto& default_instance();

  void Swap(TypeSpecProto* other);

  // implements Message ----------------------------------------------

  inline TypeSpecProto* New() const { return New(NULL); }

  TypeSpecProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TypeSpecProto& from);
  void MergeFrom(const TypeSpecProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TypeSpecProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TypeSpecProto_TypeSpecClass TypeSpecClass;
  static const TypeSpecClass UNKNOWN =
    TypeSpecProto_TypeSpecClass_UNKNOWN;
  static const TypeSpecClass SPARSE_TENSOR_SPEC =
    TypeSpecProto_TypeSpecClass_SPARSE_TENSOR_SPEC;
  static const TypeSpecClass INDEXED_SLICES_SPEC =
    TypeSpecProto_TypeSpecClass_INDEXED_SLICES_SPEC;
  static const TypeSpecClass RAGGED_TENSOR_SPEC =
    TypeSpecProto_TypeSpecClass_RAGGED_TENSOR_SPEC;
  static const TypeSpecClass TENSOR_ARRAY_SPEC =
    TypeSpecProto_TypeSpecClass_TENSOR_ARRAY_SPEC;
  static const TypeSpecClass DATA_DATASET_SPEC =
    TypeSpecProto_TypeSpecClass_DATA_DATASET_SPEC;
  static const TypeSpecClass DATA_ITERATOR_SPEC =
    TypeSpecProto_TypeSpecClass_DATA_ITERATOR_SPEC;
  static const TypeSpecClass OPTIONAL_SPEC =
    TypeSpecProto_TypeSpecClass_OPTIONAL_SPEC;
  static const TypeSpecClass PER_REPLICA_SPEC =
    TypeSpecProto_TypeSpecClass_PER_REPLICA_SPEC;
  static const TypeSpecClass VARIABLE_SPEC =
    TypeSpecProto_TypeSpecClass_VARIABLE_SPEC;
  static const TypeSpecClass ROW_PARTITION_SPEC =
    TypeSpecProto_TypeSpecClass_ROW_PARTITION_SPEC;
  static inline bool TypeSpecClass_IsValid(int value) {
    return TypeSpecProto_TypeSpecClass_IsValid(value);
  }
  static const TypeSpecClass TypeSpecClass_MIN =
    TypeSpecProto_TypeSpecClass_TypeSpecClass_MIN;
  static const TypeSpecClass TypeSpecClass_MAX =
    TypeSpecProto_TypeSpecClass_TypeSpecClass_MAX;
  static const int TypeSpecClass_ARRAYSIZE =
    TypeSpecProto_TypeSpecClass_TypeSpecClass_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TypeSpecClass_descriptor() {
    return TypeSpecProto_TypeSpecClass_descriptor();
  }
  static inline const ::std::string& TypeSpecClass_Name(TypeSpecClass value) {
    return TypeSpecProto_TypeSpecClass_Name(value);
  }
  static inline bool TypeSpecClass_Parse(const ::std::string& name,
      TypeSpecClass* value) {
    return TypeSpecProto_TypeSpecClass_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .tensorflow.TypeSpecProto.TypeSpecClass type_spec_class = 1;
  void clear_type_spec_class();
  static const int kTypeSpecClassFieldNumber = 1;
  ::tensorflow::TypeSpecProto_TypeSpecClass type_spec_class() const;
  void set_type_spec_class(::tensorflow::TypeSpecProto_TypeSpecClass value);

  // optional .tensorflow.StructuredValue type_state = 2;
  bool has_type_state() const;
  void clear_type_state();
  static const int kTypeStateFieldNumber = 2;
  const ::tensorflow::StructuredValue& type_state() const;
  ::tensorflow::StructuredValue* mutable_type_state();
  ::tensorflow::StructuredValue* release_type_state();
  void set_allocated_type_state(::tensorflow::StructuredValue* type_state);

  // optional string type_spec_class_name = 3;
  void clear_type_spec_class_name();
  static const int kTypeSpecClassNameFieldNumber = 3;
  const ::std::string& type_spec_class_name() const;
  void set_type_spec_class_name(const ::std::string& value);
  void set_type_spec_class_name(const char* value);
  void set_type_spec_class_name(const char* value, size_t size);
  ::std::string* mutable_type_spec_class_name();
  ::std::string* release_type_spec_class_name();
  void set_allocated_type_spec_class_name(::std::string* type_spec_class_name);

  // @@protoc_insertion_point(class_scope:tensorflow.TypeSpecProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::tensorflow::StructuredValue* type_state_;
  ::google::protobuf::internal::ArenaStringPtr type_spec_class_name_;
  int type_spec_class_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto();

  void InitAsDefaultInstance();
  static TypeSpecProto* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// StructuredValue

// optional .tensorflow.NoneValue none_value = 1;
inline bool StructuredValue::has_none_value() const {
  return kind_case() == kNoneValue;
}
inline void StructuredValue::set_has_none_value() {
  _oneof_case_[0] = kNoneValue;
}
inline void StructuredValue::clear_none_value() {
  if (has_none_value()) {
    delete kind_.none_value_;
    clear_has_kind();
  }
}
inline  const ::tensorflow::NoneValue& StructuredValue::none_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.StructuredValue.none_value)
  return has_none_value()
      ? *kind_.none_value_
      : ::tensorflow::NoneValue::default_instance();
}
inline ::tensorflow::NoneValue* StructuredValue::mutable_none_value() {
  if (!has_none_value()) {
    clear_kind();
    set_has_none_value();
    kind_.none_value_ = new ::tensorflow::NoneValue;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.StructuredValue.none_value)
  return kind_.none_value_;
}
inline ::tensorflow::NoneValue* StructuredValue::release_none_value() {
  // @@protoc_insertion_point(field_release:tensorflow.StructuredValue.none_value)
  if (has_none_value()) {
    clear_has_kind();
    ::tensorflow::NoneValue* temp = kind_.none_value_;
    kind_.none_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void StructuredValue::set_allocated_none_value(::tensorflow::NoneValue* none_value) {
  clear_kind();
  if (none_value) {
    set_has_none_value();
    kind_.none_value_ = none_value;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.StructuredValue.none_value)
}

// optional double float64_value = 11;
inline bool StructuredValue::has_float64_value() const {
  return kind_case() == kFloat64Value;
}
inline void StructuredValue::set_has_float64_value() {
  _oneof_case_[0] = kFloat64Value;
}
inline void StructuredValue::clear_float64_value() {
  if (has_float64_value()) {
    kind_.float64_value_ = 0;
    clear_has_kind();
  }
}
inline double StructuredValue::float64_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.StructuredValue.float64_value)
  if (has_float64_value()) {
    return kind_.float64_value_;
  }
  return 0;
}
inline void StructuredValue::set_float64_value(double value) {
  if (!has_float64_value()) {
    clear_kind();
    set_has_float64_value();
  }
  kind_.float64_value_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.StructuredValue.float64_value)
}

// optional sint64 int64_value = 12;
inline bool StructuredValue::has_int64_value() const {
  return kind_case() == kInt64Value;
}
inline void StructuredValue::set_has_int64_value() {
  _oneof_case_[0] = kInt64Value;
}
inline void StructuredValue::clear_int64_value() {
  if (has_int64_value()) {
    kind_.int64_value_ = GOOGLE_LONGLONG(0);
    clear_has_kind();
  }
}
inline ::google::protobuf::int64 StructuredValue::int64_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.StructuredValue.int64_value)
  if (has_int64_value()) {
    return kind_.int64_value_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void StructuredValue::set_int64_value(::google::protobuf::int64 value) {
  if (!has_int64_value()) {
    clear_kind();
    set_has_int64_value();
  }
  kind_.int64_value_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.StructuredValue.int64_value)
}

// optional string string_value = 13;
inline bool StructuredValue::has_string_value() const {
  return kind_case() == kStringValue;
}
inline void StructuredValue::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void StructuredValue::clear_string_value() {
  if (has_string_value()) {
    kind_.string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_kind();
  }
}
inline const ::std::string& StructuredValue::string_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.StructuredValue.string_value)
  if (has_string_value()) {
    return kind_.string_value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void StructuredValue::set_string_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.StructuredValue.string_value)
  if (!has_string_value()) {
    clear_kind();
    set_has_string_value();
    kind_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  kind_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.StructuredValue.string_value)
}
inline void StructuredValue::set_string_value(const char* value) {
  if (!has_string_value()) {
    clear_kind();
    set_has_string_value();
    kind_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  kind_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.StructuredValue.string_value)
}
inline void StructuredValue::set_string_value(const char* value, size_t size) {
  if (!has_string_value()) {
    clear_kind();
    set_has_string_value();
    kind_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  kind_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.StructuredValue.string_value)
}
inline ::std::string* StructuredValue::mutable_string_value() {
  if (!has_string_value()) {
    clear_kind();
    set_has_string_value();
    kind_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.StructuredValue.string_value)
  return kind_.string_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StructuredValue::release_string_value() {
  // @@protoc_insertion_point(field_release:tensorflow.StructuredValue.string_value)
  if (has_string_value()) {
    clear_has_kind();
    return kind_.string_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void StructuredValue::set_allocated_string_value(::std::string* string_value) {
  if (!has_string_value()) {
    kind_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_kind();
  if (string_value != NULL) {
    set_has_string_value();
    kind_.string_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        string_value);
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.StructuredValue.string_value)
}

// optional bool bool_value = 14;
inline bool StructuredValue::has_bool_value() const {
  return kind_case() == kBoolValue;
}
inline void StructuredValue::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
inline void StructuredValue::clear_bool_value() {
  if (has_bool_value()) {
    kind_.bool_value_ = false;
    clear_has_kind();
  }
}
inline bool StructuredValue::bool_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.StructuredValue.bool_value)
  if (has_bool_value()) {
    return kind_.bool_value_;
  }
  return false;
}
inline void StructuredValue::set_bool_value(bool value) {
  if (!has_bool_value()) {
    clear_kind();
    set_has_bool_value();
  }
  kind_.bool_value_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.StructuredValue.bool_value)
}

// optional .tensorflow.TensorShapeProto tensor_shape_value = 31;
inline bool StructuredValue::has_tensor_shape_value() const {
  return kind_case() == kTensorShapeValue;
}
inline void StructuredValue::set_has_tensor_shape_value() {
  _oneof_case_[0] = kTensorShapeValue;
}
inline void StructuredValue::clear_tensor_shape_value() {
  if (has_tensor_shape_value()) {
    delete kind_.tensor_shape_value_;
    clear_has_kind();
  }
}
inline  const ::tensorflow::TensorShapeProto& StructuredValue::tensor_shape_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.StructuredValue.tensor_shape_value)
  return has_tensor_shape_value()
      ? *kind_.tensor_shape_value_
      : ::tensorflow::TensorShapeProto::default_instance();
}
inline ::tensorflow::TensorShapeProto* StructuredValue::mutable_tensor_shape_value() {
  if (!has_tensor_shape_value()) {
    clear_kind();
    set_has_tensor_shape_value();
    kind_.tensor_shape_value_ = new ::tensorflow::TensorShapeProto;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.StructuredValue.tensor_shape_value)
  return kind_.tensor_shape_value_;
}
inline ::tensorflow::TensorShapeProto* StructuredValue::release_tensor_shape_value() {
  // @@protoc_insertion_point(field_release:tensorflow.StructuredValue.tensor_shape_value)
  if (has_tensor_shape_value()) {
    clear_has_kind();
    ::tensorflow::TensorShapeProto* temp = kind_.tensor_shape_value_;
    kind_.tensor_shape_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void StructuredValue::set_allocated_tensor_shape_value(::tensorflow::TensorShapeProto* tensor_shape_value) {
  clear_kind();
  if (tensor_shape_value) {
    if (static_cast< ::tensorflow::TensorShapeProto*>(tensor_shape_value)->GetArena() != NULL) {
      ::tensorflow::TensorShapeProto* new_tensor_shape_value = new ::tensorflow::TensorShapeProto;
      new_tensor_shape_value->CopyFrom(*tensor_shape_value);
      tensor_shape_value = new_tensor_shape_value;
    }
    set_has_tensor_shape_value();
    kind_.tensor_shape_value_ = tensor_shape_value;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.StructuredValue.tensor_shape_value)
}

// optional .tensorflow.DataType tensor_dtype_value = 32;
inline bool StructuredValue::has_tensor_dtype_value() const {
  return kind_case() == kTensorDtypeValue;
}
inline void StructuredValue::set_has_tensor_dtype_value() {
  _oneof_case_[0] = kTensorDtypeValue;
}
inline void StructuredValue::clear_tensor_dtype_value() {
  if (has_tensor_dtype_value()) {
    kind_.tensor_dtype_value_ = 0;
    clear_has_kind();
  }
}
inline ::tensorflow::DataType StructuredValue::tensor_dtype_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.StructuredValue.tensor_dtype_value)
  if (has_tensor_dtype_value()) {
    return static_cast< ::tensorflow::DataType >(kind_.tensor_dtype_value_);
  }
  return static_cast< ::tensorflow::DataType >(0);
}
inline void StructuredValue::set_tensor_dtype_value(::tensorflow::DataType value) {
  if (!has_tensor_dtype_value()) {
    clear_kind();
    set_has_tensor_dtype_value();
  }
  kind_.tensor_dtype_value_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.StructuredValue.tensor_dtype_value)
}

// optional .tensorflow.TensorSpecProto tensor_spec_value = 33;
inline bool StructuredValue::has_tensor_spec_value() const {
  return kind_case() == kTensorSpecValue;
}
inline void StructuredValue::set_has_tensor_spec_value() {
  _oneof_case_[0] = kTensorSpecValue;
}
inline void StructuredValue::clear_tensor_spec_value() {
  if (has_tensor_spec_value()) {
    delete kind_.tensor_spec_value_;
    clear_has_kind();
  }
}
inline  const ::tensorflow::TensorSpecProto& StructuredValue::tensor_spec_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.StructuredValue.tensor_spec_value)
  return has_tensor_spec_value()
      ? *kind_.tensor_spec_value_
      : ::tensorflow::TensorSpecProto::default_instance();
}
inline ::tensorflow::TensorSpecProto* StructuredValue::mutable_tensor_spec_value() {
  if (!has_tensor_spec_value()) {
    clear_kind();
    set_has_tensor_spec_value();
    kind_.tensor_spec_value_ = new ::tensorflow::TensorSpecProto;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.StructuredValue.tensor_spec_value)
  return kind_.tensor_spec_value_;
}
inline ::tensorflow::TensorSpecProto* StructuredValue::release_tensor_spec_value() {
  // @@protoc_insertion_point(field_release:tensorflow.StructuredValue.tensor_spec_value)
  if (has_tensor_spec_value()) {
    clear_has_kind();
    ::tensorflow::TensorSpecProto* temp = kind_.tensor_spec_value_;
    kind_.tensor_spec_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void StructuredValue::set_allocated_tensor_spec_value(::tensorflow::TensorSpecProto* tensor_spec_value) {
  clear_kind();
  if (tensor_spec_value) {
    set_has_tensor_spec_value();
    kind_.tensor_spec_value_ = tensor_spec_value;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.StructuredValue.tensor_spec_value)
}

// optional .tensorflow.TypeSpecProto type_spec_value = 34;
inline bool StructuredValue::has_type_spec_value() const {
  return kind_case() == kTypeSpecValue;
}
inline void StructuredValue::set_has_type_spec_value() {
  _oneof_case_[0] = kTypeSpecValue;
}
inline void StructuredValue::clear_type_spec_value() {
  if (has_type_spec_value()) {
    delete kind_.type_spec_value_;
    clear_has_kind();
  }
}
inline  const ::tensorflow::TypeSpecProto& StructuredValue::type_spec_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.StructuredValue.type_spec_value)
  return has_type_spec_value()
      ? *kind_.type_spec_value_
      : ::tensorflow::TypeSpecProto::default_instance();
}
inline ::tensorflow::TypeSpecProto* StructuredValue::mutable_type_spec_value() {
  if (!has_type_spec_value()) {
    clear_kind();
    set_has_type_spec_value();
    kind_.type_spec_value_ = new ::tensorflow::TypeSpecProto;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.StructuredValue.type_spec_value)
  return kind_.type_spec_value_;
}
inline ::tensorflow::TypeSpecProto* StructuredValue::release_type_spec_value() {
  // @@protoc_insertion_point(field_release:tensorflow.StructuredValue.type_spec_value)
  if (has_type_spec_value()) {
    clear_has_kind();
    ::tensorflow::TypeSpecProto* temp = kind_.type_spec_value_;
    kind_.type_spec_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void StructuredValue::set_allocated_type_spec_value(::tensorflow::TypeSpecProto* type_spec_value) {
  clear_kind();
  if (type_spec_value) {
    set_has_type_spec_value();
    kind_.type_spec_value_ = type_spec_value;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.StructuredValue.type_spec_value)
}

// optional .tensorflow.BoundedTensorSpecProto bounded_tensor_spec_value = 35;
inline bool StructuredValue::has_bounded_tensor_spec_value() const {
  return kind_case() == kBoundedTensorSpecValue;
}
inline void StructuredValue::set_has_bounded_tensor_spec_value() {
  _oneof_case_[0] = kBoundedTensorSpecValue;
}
inline void StructuredValue::clear_bounded_tensor_spec_value() {
  if (has_bounded_tensor_spec_value()) {
    delete kind_.bounded_tensor_spec_value_;
    clear_has_kind();
  }
}
inline  const ::tensorflow::BoundedTensorSpecProto& StructuredValue::bounded_tensor_spec_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.StructuredValue.bounded_tensor_spec_value)
  return has_bounded_tensor_spec_value()
      ? *kind_.bounded_tensor_spec_value_
      : ::tensorflow::BoundedTensorSpecProto::default_instance();
}
inline ::tensorflow::BoundedTensorSpecProto* StructuredValue::mutable_bounded_tensor_spec_value() {
  if (!has_bounded_tensor_spec_value()) {
    clear_kind();
    set_has_bounded_tensor_spec_value();
    kind_.bounded_tensor_spec_value_ = new ::tensorflow::BoundedTensorSpecProto;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.StructuredValue.bounded_tensor_spec_value)
  return kind_.bounded_tensor_spec_value_;
}
inline ::tensorflow::BoundedTensorSpecProto* StructuredValue::release_bounded_tensor_spec_value() {
  // @@protoc_insertion_point(field_release:tensorflow.StructuredValue.bounded_tensor_spec_value)
  if (has_bounded_tensor_spec_value()) {
    clear_has_kind();
    ::tensorflow::BoundedTensorSpecProto* temp = kind_.bounded_tensor_spec_value_;
    kind_.bounded_tensor_spec_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void StructuredValue::set_allocated_bounded_tensor_spec_value(::tensorflow::BoundedTensorSpecProto* bounded_tensor_spec_value) {
  clear_kind();
  if (bounded_tensor_spec_value) {
    set_has_bounded_tensor_spec_value();
    kind_.bounded_tensor_spec_value_ = bounded_tensor_spec_value;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.StructuredValue.bounded_tensor_spec_value)
}

// optional .tensorflow.ListValue list_value = 51;
inline bool StructuredValue::has_list_value() const {
  return kind_case() == kListValue;
}
inline void StructuredValue::set_has_list_value() {
  _oneof_case_[0] = kListValue;
}
inline void StructuredValue::clear_list_value() {
  if (has_list_value()) {
    delete kind_.list_value_;
    clear_has_kind();
  }
}
inline  const ::tensorflow::ListValue& StructuredValue::list_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.StructuredValue.list_value)
  return has_list_value()
      ? *kind_.list_value_
      : ::tensorflow::ListValue::default_instance();
}
inline ::tensorflow::ListValue* StructuredValue::mutable_list_value() {
  if (!has_list_value()) {
    clear_kind();
    set_has_list_value();
    kind_.list_value_ = new ::tensorflow::ListValue;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.StructuredValue.list_value)
  return kind_.list_value_;
}
inline ::tensorflow::ListValue* StructuredValue::release_list_value() {
  // @@protoc_insertion_point(field_release:tensorflow.StructuredValue.list_value)
  if (has_list_value()) {
    clear_has_kind();
    ::tensorflow::ListValue* temp = kind_.list_value_;
    kind_.list_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void StructuredValue::set_allocated_list_value(::tensorflow::ListValue* list_value) {
  clear_kind();
  if (list_value) {
    set_has_list_value();
    kind_.list_value_ = list_value;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.StructuredValue.list_value)
}

// optional .tensorflow.TupleValue tuple_value = 52;
inline bool StructuredValue::has_tuple_value() const {
  return kind_case() == kTupleValue;
}
inline void StructuredValue::set_has_tuple_value() {
  _oneof_case_[0] = kTupleValue;
}
inline void StructuredValue::clear_tuple_value() {
  if (has_tuple_value()) {
    delete kind_.tuple_value_;
    clear_has_kind();
  }
}
inline  const ::tensorflow::TupleValue& StructuredValue::tuple_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.StructuredValue.tuple_value)
  return has_tuple_value()
      ? *kind_.tuple_value_
      : ::tensorflow::TupleValue::default_instance();
}
inline ::tensorflow::TupleValue* StructuredValue::mutable_tuple_value() {
  if (!has_tuple_value()) {
    clear_kind();
    set_has_tuple_value();
    kind_.tuple_value_ = new ::tensorflow::TupleValue;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.StructuredValue.tuple_value)
  return kind_.tuple_value_;
}
inline ::tensorflow::TupleValue* StructuredValue::release_tuple_value() {
  // @@protoc_insertion_point(field_release:tensorflow.StructuredValue.tuple_value)
  if (has_tuple_value()) {
    clear_has_kind();
    ::tensorflow::TupleValue* temp = kind_.tuple_value_;
    kind_.tuple_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void StructuredValue::set_allocated_tuple_value(::tensorflow::TupleValue* tuple_value) {
  clear_kind();
  if (tuple_value) {
    set_has_tuple_value();
    kind_.tuple_value_ = tuple_value;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.StructuredValue.tuple_value)
}

// optional .tensorflow.DictValue dict_value = 53;
inline bool StructuredValue::has_dict_value() const {
  return kind_case() == kDictValue;
}
inline void StructuredValue::set_has_dict_value() {
  _oneof_case_[0] = kDictValue;
}
inline void StructuredValue::clear_dict_value() {
  if (has_dict_value()) {
    delete kind_.dict_value_;
    clear_has_kind();
  }
}
inline  const ::tensorflow::DictValue& StructuredValue::dict_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.StructuredValue.dict_value)
  return has_dict_value()
      ? *kind_.dict_value_
      : ::tensorflow::DictValue::default_instance();
}
inline ::tensorflow::DictValue* StructuredValue::mutable_dict_value() {
  if (!has_dict_value()) {
    clear_kind();
    set_has_dict_value();
    kind_.dict_value_ = new ::tensorflow::DictValue;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.StructuredValue.dict_value)
  return kind_.dict_value_;
}
inline ::tensorflow::DictValue* StructuredValue::release_dict_value() {
  // @@protoc_insertion_point(field_release:tensorflow.StructuredValue.dict_value)
  if (has_dict_value()) {
    clear_has_kind();
    ::tensorflow::DictValue* temp = kind_.dict_value_;
    kind_.dict_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void StructuredValue::set_allocated_dict_value(::tensorflow::DictValue* dict_value) {
  clear_kind();
  if (dict_value) {
    set_has_dict_value();
    kind_.dict_value_ = dict_value;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.StructuredValue.dict_value)
}

// optional .tensorflow.NamedTupleValue named_tuple_value = 54;
inline bool StructuredValue::has_named_tuple_value() const {
  return kind_case() == kNamedTupleValue;
}
inline void StructuredValue::set_has_named_tuple_value() {
  _oneof_case_[0] = kNamedTupleValue;
}
inline void StructuredValue::clear_named_tuple_value() {
  if (has_named_tuple_value()) {
    delete kind_.named_tuple_value_;
    clear_has_kind();
  }
}
inline  const ::tensorflow::NamedTupleValue& StructuredValue::named_tuple_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.StructuredValue.named_tuple_value)
  return has_named_tuple_value()
      ? *kind_.named_tuple_value_
      : ::tensorflow::NamedTupleValue::default_instance();
}
inline ::tensorflow::NamedTupleValue* StructuredValue::mutable_named_tuple_value() {
  if (!has_named_tuple_value()) {
    clear_kind();
    set_has_named_tuple_value();
    kind_.named_tuple_value_ = new ::tensorflow::NamedTupleValue;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.StructuredValue.named_tuple_value)
  return kind_.named_tuple_value_;
}
inline ::tensorflow::NamedTupleValue* StructuredValue::release_named_tuple_value() {
  // @@protoc_insertion_point(field_release:tensorflow.StructuredValue.named_tuple_value)
  if (has_named_tuple_value()) {
    clear_has_kind();
    ::tensorflow::NamedTupleValue* temp = kind_.named_tuple_value_;
    kind_.named_tuple_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void StructuredValue::set_allocated_named_tuple_value(::tensorflow::NamedTupleValue* named_tuple_value) {
  clear_kind();
  if (named_tuple_value) {
    set_has_named_tuple_value();
    kind_.named_tuple_value_ = named_tuple_value;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.StructuredValue.named_tuple_value)
}

inline bool StructuredValue::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void StructuredValue::clear_has_kind() {
  _oneof_case_[0] = KIND_NOT_SET;
}
inline StructuredValue::KindCase StructuredValue::kind_case() const {
  return StructuredValue::KindCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// NoneValue

// -------------------------------------------------------------------

// ListValue

// repeated .tensorflow.StructuredValue values = 1;
inline int ListValue::values_size() const {
  return values_.size();
}
inline void ListValue::clear_values() {
  values_.Clear();
}
inline const ::tensorflow::StructuredValue& ListValue::values(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.ListValue.values)
  return values_.Get(index);
}
inline ::tensorflow::StructuredValue* ListValue::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.ListValue.values)
  return values_.Mutable(index);
}
inline ::tensorflow::StructuredValue* ListValue::add_values() {
  // @@protoc_insertion_point(field_add:tensorflow.ListValue.values)
  return values_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::StructuredValue >*
ListValue::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.ListValue.values)
  return &values_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::StructuredValue >&
ListValue::values() const {
  // @@protoc_insertion_point(field_list:tensorflow.ListValue.values)
  return values_;
}

// -------------------------------------------------------------------

// TupleValue

// repeated .tensorflow.StructuredValue values = 1;
inline int TupleValue::values_size() const {
  return values_.size();
}
inline void TupleValue::clear_values() {
  values_.Clear();
}
inline const ::tensorflow::StructuredValue& TupleValue::values(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.TupleValue.values)
  return values_.Get(index);
}
inline ::tensorflow::StructuredValue* TupleValue::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.TupleValue.values)
  return values_.Mutable(index);
}
inline ::tensorflow::StructuredValue* TupleValue::add_values() {
  // @@protoc_insertion_point(field_add:tensorflow.TupleValue.values)
  return values_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::StructuredValue >*
TupleValue::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.TupleValue.values)
  return &values_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::StructuredValue >&
TupleValue::values() const {
  // @@protoc_insertion_point(field_list:tensorflow.TupleValue.values)
  return values_;
}

// -------------------------------------------------------------------

// DictValue

// map<string, .tensorflow.StructuredValue> fields = 1;
inline int DictValue::fields_size() const {
  return fields_.size();
}
inline void DictValue::clear_fields() {
  fields_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::tensorflow::StructuredValue >&
DictValue::fields() const {
  // @@protoc_insertion_point(field_map:tensorflow.DictValue.fields)
  return fields_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::tensorflow::StructuredValue >*
DictValue::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.DictValue.fields)
  return fields_.MutableMap();
}

// -------------------------------------------------------------------

// PairValue

// optional string key = 1;
inline void PairValue::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PairValue::key() const {
  // @@protoc_insertion_point(field_get:tensorflow.PairValue.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PairValue::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.PairValue.key)
}
inline void PairValue::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.PairValue.key)
}
inline void PairValue::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.PairValue.key)
}
inline ::std::string* PairValue::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.PairValue.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PairValue::release_key() {
  // @@protoc_insertion_point(field_release:tensorflow.PairValue.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PairValue::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.PairValue.key)
}

// optional .tensorflow.StructuredValue value = 2;
inline bool PairValue::has_value() const {
  return !_is_default_instance_ && value_ != NULL;
}
inline void PairValue::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
inline const ::tensorflow::StructuredValue& PairValue::value() const {
  // @@protoc_insertion_point(field_get:tensorflow.PairValue.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::tensorflow::StructuredValue* PairValue::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::tensorflow::StructuredValue;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.PairValue.value)
  return value_;
}
inline ::tensorflow::StructuredValue* PairValue::release_value() {
  // @@protoc_insertion_point(field_release:tensorflow.PairValue.value)
  
  ::tensorflow::StructuredValue* temp = value_;
  value_ = NULL;
  return temp;
}
inline void PairValue::set_allocated_value(::tensorflow::StructuredValue* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.PairValue.value)
}

// -------------------------------------------------------------------

// NamedTupleValue

// optional string name = 1;
inline void NamedTupleValue::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NamedTupleValue::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.NamedTupleValue.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NamedTupleValue::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.NamedTupleValue.name)
}
inline void NamedTupleValue::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.NamedTupleValue.name)
}
inline void NamedTupleValue::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.NamedTupleValue.name)
}
inline ::std::string* NamedTupleValue::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.NamedTupleValue.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NamedTupleValue::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.NamedTupleValue.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NamedTupleValue::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.NamedTupleValue.name)
}

// repeated .tensorflow.PairValue values = 2;
inline int NamedTupleValue::values_size() const {
  return values_.size();
}
inline void NamedTupleValue::clear_values() {
  values_.Clear();
}
inline const ::tensorflow::PairValue& NamedTupleValue::values(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.NamedTupleValue.values)
  return values_.Get(index);
}
inline ::tensorflow::PairValue* NamedTupleValue::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.NamedTupleValue.values)
  return values_.Mutable(index);
}
inline ::tensorflow::PairValue* NamedTupleValue::add_values() {
  // @@protoc_insertion_point(field_add:tensorflow.NamedTupleValue.values)
  return values_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::PairValue >*
NamedTupleValue::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.NamedTupleValue.values)
  return &values_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::PairValue >&
NamedTupleValue::values() const {
  // @@protoc_insertion_point(field_list:tensorflow.NamedTupleValue.values)
  return values_;
}

// -------------------------------------------------------------------

// TensorSpecProto

// optional string name = 1;
inline void TensorSpecProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TensorSpecProto::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.TensorSpecProto.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TensorSpecProto::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.TensorSpecProto.name)
}
inline void TensorSpecProto::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.TensorSpecProto.name)
}
inline void TensorSpecProto::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.TensorSpecProto.name)
}
inline ::std::string* TensorSpecProto::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.TensorSpecProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TensorSpecProto::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.TensorSpecProto.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TensorSpecProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TensorSpecProto.name)
}

// optional .tensorflow.TensorShapeProto shape = 2;
inline bool TensorSpecProto::has_shape() const {
  return !_is_default_instance_ && shape_ != NULL;
}
inline void TensorSpecProto::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) delete shape_;
  shape_ = NULL;
}
inline const ::tensorflow::TensorShapeProto& TensorSpecProto::shape() const {
  // @@protoc_insertion_point(field_get:tensorflow.TensorSpecProto.shape)
  return shape_ != NULL ? *shape_ : *default_instance_->shape_;
}
inline ::tensorflow::TensorShapeProto* TensorSpecProto::mutable_shape() {
  
  if (shape_ == NULL) {
    shape_ = new ::tensorflow::TensorShapeProto;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.TensorSpecProto.shape)
  return shape_;
}
inline ::tensorflow::TensorShapeProto* TensorSpecProto::release_shape() {
  // @@protoc_insertion_point(field_release:tensorflow.TensorSpecProto.shape)
  
  ::tensorflow::TensorShapeProto* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline void TensorSpecProto::set_allocated_shape(::tensorflow::TensorShapeProto* shape) {
  delete shape_;
  if (shape != NULL && shape->GetArena() != NULL) {
    ::tensorflow::TensorShapeProto* new_shape = new ::tensorflow::TensorShapeProto;
    new_shape->CopyFrom(*shape);
    shape = new_shape;
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TensorSpecProto.shape)
}

// optional .tensorflow.DataType dtype = 3;
inline void TensorSpecProto::clear_dtype() {
  dtype_ = 0;
}
inline ::tensorflow::DataType TensorSpecProto::dtype() const {
  // @@protoc_insertion_point(field_get:tensorflow.TensorSpecProto.dtype)
  return static_cast< ::tensorflow::DataType >(dtype_);
}
inline void TensorSpecProto::set_dtype(::tensorflow::DataType value) {
  
  dtype_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.TensorSpecProto.dtype)
}

// -------------------------------------------------------------------

// BoundedTensorSpecProto

// optional string name = 1;
inline void BoundedTensorSpecProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BoundedTensorSpecProto::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.BoundedTensorSpecProto.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BoundedTensorSpecProto::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.BoundedTensorSpecProto.name)
}
inline void BoundedTensorSpecProto::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.BoundedTensorSpecProto.name)
}
inline void BoundedTensorSpecProto::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.BoundedTensorSpecProto.name)
}
inline ::std::string* BoundedTensorSpecProto::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.BoundedTensorSpecProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BoundedTensorSpecProto::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.BoundedTensorSpecProto.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BoundedTensorSpecProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.BoundedTensorSpecProto.name)
}

// optional .tensorflow.TensorShapeProto shape = 2;
inline bool BoundedTensorSpecProto::has_shape() const {
  return !_is_default_instance_ && shape_ != NULL;
}
inline void BoundedTensorSpecProto::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) delete shape_;
  shape_ = NULL;
}
inline const ::tensorflow::TensorShapeProto& BoundedTensorSpecProto::shape() const {
  // @@protoc_insertion_point(field_get:tensorflow.BoundedTensorSpecProto.shape)
  return shape_ != NULL ? *shape_ : *default_instance_->shape_;
}
inline ::tensorflow::TensorShapeProto* BoundedTensorSpecProto::mutable_shape() {
  
  if (shape_ == NULL) {
    shape_ = new ::tensorflow::TensorShapeProto;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.BoundedTensorSpecProto.shape)
  return shape_;
}
inline ::tensorflow::TensorShapeProto* BoundedTensorSpecProto::release_shape() {
  // @@protoc_insertion_point(field_release:tensorflow.BoundedTensorSpecProto.shape)
  
  ::tensorflow::TensorShapeProto* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline void BoundedTensorSpecProto::set_allocated_shape(::tensorflow::TensorShapeProto* shape) {
  delete shape_;
  if (shape != NULL && shape->GetArena() != NULL) {
    ::tensorflow::TensorShapeProto* new_shape = new ::tensorflow::TensorShapeProto;
    new_shape->CopyFrom(*shape);
    shape = new_shape;
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.BoundedTensorSpecProto.shape)
}

// optional .tensorflow.DataType dtype = 3;
inline void BoundedTensorSpecProto::clear_dtype() {
  dtype_ = 0;
}
inline ::tensorflow::DataType BoundedTensorSpecProto::dtype() const {
  // @@protoc_insertion_point(field_get:tensorflow.BoundedTensorSpecProto.dtype)
  return static_cast< ::tensorflow::DataType >(dtype_);
}
inline void BoundedTensorSpecProto::set_dtype(::tensorflow::DataType value) {
  
  dtype_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.BoundedTensorSpecProto.dtype)
}

// optional .tensorflow.TensorProto minimum = 4;
inline bool BoundedTensorSpecProto::has_minimum() const {
  return !_is_default_instance_ && minimum_ != NULL;
}
inline void BoundedTensorSpecProto::clear_minimum() {
  if (GetArenaNoVirtual() == NULL && minimum_ != NULL) delete minimum_;
  minimum_ = NULL;
}
inline const ::tensorflow::TensorProto& BoundedTensorSpecProto::minimum() const {
  // @@protoc_insertion_point(field_get:tensorflow.BoundedTensorSpecProto.minimum)
  return minimum_ != NULL ? *minimum_ : *default_instance_->minimum_;
}
inline ::tensorflow::TensorProto* BoundedTensorSpecProto::mutable_minimum() {
  
  if (minimum_ == NULL) {
    minimum_ = new ::tensorflow::TensorProto;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.BoundedTensorSpecProto.minimum)
  return minimum_;
}
inline ::tensorflow::TensorProto* BoundedTensorSpecProto::release_minimum() {
  // @@protoc_insertion_point(field_release:tensorflow.BoundedTensorSpecProto.minimum)
  
  ::tensorflow::TensorProto* temp = minimum_;
  minimum_ = NULL;
  return temp;
}
inline void BoundedTensorSpecProto::set_allocated_minimum(::tensorflow::TensorProto* minimum) {
  delete minimum_;
  if (minimum != NULL && minimum->GetArena() != NULL) {
    ::tensorflow::TensorProto* new_minimum = new ::tensorflow::TensorProto;
    new_minimum->CopyFrom(*minimum);
    minimum = new_minimum;
  }
  minimum_ = minimum;
  if (minimum) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.BoundedTensorSpecProto.minimum)
}

// optional .tensorflow.TensorProto maximum = 5;
inline bool BoundedTensorSpecProto::has_maximum() const {
  return !_is_default_instance_ && maximum_ != NULL;
}
inline void BoundedTensorSpecProto::clear_maximum() {
  if (GetArenaNoVirtual() == NULL && maximum_ != NULL) delete maximum_;
  maximum_ = NULL;
}
inline const ::tensorflow::TensorProto& BoundedTensorSpecProto::maximum() const {
  // @@protoc_insertion_point(field_get:tensorflow.BoundedTensorSpecProto.maximum)
  return maximum_ != NULL ? *maximum_ : *default_instance_->maximum_;
}
inline ::tensorflow::TensorProto* BoundedTensorSpecProto::mutable_maximum() {
  
  if (maximum_ == NULL) {
    maximum_ = new ::tensorflow::TensorProto;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.BoundedTensorSpecProto.maximum)
  return maximum_;
}
inline ::tensorflow::TensorProto* BoundedTensorSpecProto::release_maximum() {
  // @@protoc_insertion_point(field_release:tensorflow.BoundedTensorSpecProto.maximum)
  
  ::tensorflow::TensorProto* temp = maximum_;
  maximum_ = NULL;
  return temp;
}
inline void BoundedTensorSpecProto::set_allocated_maximum(::tensorflow::TensorProto* maximum) {
  delete maximum_;
  if (maximum != NULL && maximum->GetArena() != NULL) {
    ::tensorflow::TensorProto* new_maximum = new ::tensorflow::TensorProto;
    new_maximum->CopyFrom(*maximum);
    maximum = new_maximum;
  }
  maximum_ = maximum;
  if (maximum) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.BoundedTensorSpecProto.maximum)
}

// -------------------------------------------------------------------

// TypeSpecProto

// optional .tensorflow.TypeSpecProto.TypeSpecClass type_spec_class = 1;
inline void TypeSpecProto::clear_type_spec_class() {
  type_spec_class_ = 0;
}
inline ::tensorflow::TypeSpecProto_TypeSpecClass TypeSpecProto::type_spec_class() const {
  // @@protoc_insertion_point(field_get:tensorflow.TypeSpecProto.type_spec_class)
  return static_cast< ::tensorflow::TypeSpecProto_TypeSpecClass >(type_spec_class_);
}
inline void TypeSpecProto::set_type_spec_class(::tensorflow::TypeSpecProto_TypeSpecClass value) {
  
  type_spec_class_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.TypeSpecProto.type_spec_class)
}

// optional .tensorflow.StructuredValue type_state = 2;
inline bool TypeSpecProto::has_type_state() const {
  return !_is_default_instance_ && type_state_ != NULL;
}
inline void TypeSpecProto::clear_type_state() {
  if (GetArenaNoVirtual() == NULL && type_state_ != NULL) delete type_state_;
  type_state_ = NULL;
}
inline const ::tensorflow::StructuredValue& TypeSpecProto::type_state() const {
  // @@protoc_insertion_point(field_get:tensorflow.TypeSpecProto.type_state)
  return type_state_ != NULL ? *type_state_ : *default_instance_->type_state_;
}
inline ::tensorflow::StructuredValue* TypeSpecProto::mutable_type_state() {
  
  if (type_state_ == NULL) {
    type_state_ = new ::tensorflow::StructuredValue;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.TypeSpecProto.type_state)
  return type_state_;
}
inline ::tensorflow::StructuredValue* TypeSpecProto::release_type_state() {
  // @@protoc_insertion_point(field_release:tensorflow.TypeSpecProto.type_state)
  
  ::tensorflow::StructuredValue* temp = type_state_;
  type_state_ = NULL;
  return temp;
}
inline void TypeSpecProto::set_allocated_type_state(::tensorflow::StructuredValue* type_state) {
  delete type_state_;
  type_state_ = type_state;
  if (type_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TypeSpecProto.type_state)
}

// optional string type_spec_class_name = 3;
inline void TypeSpecProto::clear_type_spec_class_name() {
  type_spec_class_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TypeSpecProto::type_spec_class_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.TypeSpecProto.type_spec_class_name)
  return type_spec_class_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TypeSpecProto::set_type_spec_class_name(const ::std::string& value) {
  
  type_spec_class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.TypeSpecProto.type_spec_class_name)
}
inline void TypeSpecProto::set_type_spec_class_name(const char* value) {
  
  type_spec_class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.TypeSpecProto.type_spec_class_name)
}
inline void TypeSpecProto::set_type_spec_class_name(const char* value, size_t size) {
  
  type_spec_class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.TypeSpecProto.type_spec_class_name)
}
inline ::std::string* TypeSpecProto::mutable_type_spec_class_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.TypeSpecProto.type_spec_class_name)
  return type_spec_class_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TypeSpecProto::release_type_spec_class_name() {
  // @@protoc_insertion_point(field_release:tensorflow.TypeSpecProto.type_spec_class_name)
  
  return type_spec_class_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TypeSpecProto::set_allocated_type_spec_class_name(::std::string* type_spec_class_name) {
  if (type_spec_class_name != NULL) {
    
  } else {
    
  }
  type_spec_class_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type_spec_class_name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TypeSpecProto.type_spec_class_name)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::tensorflow::TypeSpecProto_TypeSpecClass> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tensorflow::TypeSpecProto_TypeSpecClass>() {
  return ::tensorflow::TypeSpecProto_TypeSpecClass_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto__INCLUDED
