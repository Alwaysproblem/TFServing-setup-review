// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/rewriter_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/protobuf/rewriter_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {

namespace {

const ::google::protobuf::Descriptor* AutoParallelOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AutoParallelOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScopedAllocatorOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScopedAllocatorOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewriterConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewriterConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewriterConfig_CustomGraphOptimizer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewriterConfig_CustomGraphOptimizer_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RewriterConfig_Toggle_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RewriterConfig_NumIterationsType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RewriterConfig_MemOptType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto() {
  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow/core/protobuf/rewriter_config.proto");
  GOOGLE_CHECK(file != NULL);
  AutoParallelOptions_descriptor_ = file->message_type(0);
  static const int AutoParallelOptions_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoParallelOptions, enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoParallelOptions, num_replicas_),
  };
  AutoParallelOptions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AutoParallelOptions_descriptor_,
      AutoParallelOptions::default_instance_,
      AutoParallelOptions_offsets_,
      -1,
      -1,
      -1,
      sizeof(AutoParallelOptions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoParallelOptions, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoParallelOptions, _is_default_instance_));
  ScopedAllocatorOptions_descriptor_ = file->message_type(1);
  static const int ScopedAllocatorOptions_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScopedAllocatorOptions, enable_op_),
  };
  ScopedAllocatorOptions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ScopedAllocatorOptions_descriptor_,
      ScopedAllocatorOptions::default_instance_,
      ScopedAllocatorOptions_offsets_,
      -1,
      -1,
      -1,
      sizeof(ScopedAllocatorOptions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScopedAllocatorOptions, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScopedAllocatorOptions, _is_default_instance_));
  RewriterConfig_descriptor_ = file->message_type(2);
  static const int RewriterConfig_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, layout_optimizer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, constant_folding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, shape_optimization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, remapping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, common_subgraph_elimination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, arithmetic_optimization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, dependency_optimization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, loop_optimization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, function_optimization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, debug_stripper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, disable_model_pruning_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, scoped_allocator_optimization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, pin_to_host_optimization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, implementation_selector_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, auto_mixed_precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, auto_mixed_precision_mkl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, disable_meta_optimizer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, meta_optimizer_iterations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, min_graph_nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, memory_optimization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, memory_optimizer_target_node_name_scope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, meta_optimizer_timeout_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, auto_parallel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, fail_on_optimizer_errors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, scoped_allocator_opts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, optimizers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, custom_optimizers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, inter_optimizer_verifier_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, post_optimization_verifier_config_),
  };
  RewriterConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RewriterConfig_descriptor_,
      RewriterConfig::default_instance_,
      RewriterConfig_offsets_,
      -1,
      -1,
      -1,
      sizeof(RewriterConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, _is_default_instance_));
  RewriterConfig_CustomGraphOptimizer_descriptor_ = RewriterConfig_descriptor_->nested_type(0);
  static const int RewriterConfig_CustomGraphOptimizer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig_CustomGraphOptimizer, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig_CustomGraphOptimizer, parameter_map_),
  };
  RewriterConfig_CustomGraphOptimizer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RewriterConfig_CustomGraphOptimizer_descriptor_,
      RewriterConfig_CustomGraphOptimizer::default_instance_,
      RewriterConfig_CustomGraphOptimizer_offsets_,
      -1,
      -1,
      -1,
      sizeof(RewriterConfig_CustomGraphOptimizer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig_CustomGraphOptimizer, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig_CustomGraphOptimizer, _is_default_instance_));
  RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_descriptor_ = RewriterConfig_CustomGraphOptimizer_descriptor_->nested_type(0);
  RewriterConfig_Toggle_descriptor_ = RewriterConfig_descriptor_->enum_type(0);
  RewriterConfig_NumIterationsType_descriptor_ = RewriterConfig_descriptor_->enum_type(1);
  RewriterConfig_MemOptType_descriptor_ = RewriterConfig_descriptor_->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AutoParallelOptions_descriptor_, &AutoParallelOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ScopedAllocatorOptions_descriptor_, &ScopedAllocatorOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RewriterConfig_descriptor_, &RewriterConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RewriterConfig_CustomGraphOptimizer_descriptor_, &RewriterConfig_CustomGraphOptimizer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::tensorflow::AttrValue,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto() {
  delete AutoParallelOptions::default_instance_;
  delete AutoParallelOptions_reflection_;
  delete ScopedAllocatorOptions::default_instance_;
  delete ScopedAllocatorOptions_reflection_;
  delete RewriterConfig::default_instance_;
  delete RewriterConfig_reflection_;
  delete RewriterConfig_CustomGraphOptimizer::default_instance_;
  delete RewriterConfig_CustomGraphOptimizer_reflection_;
}

void protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto();
  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fverifier_5fconfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n.tensorflow/core/protobuf/rewriter_conf"
    "ig.proto\022\ntensorflow\032*tensorflow/core/fr"
    "amework/attr_value.proto\032.tensorflow/cor"
    "e/protobuf/verifier_config.proto\";\n\023Auto"
    "ParallelOptions\022\016\n\006enable\030\001 \001(\010\022\024\n\014num_r"
    "eplicas\030\002 \001(\005\"+\n\026ScopedAllocatorOptions\022"
    "\021\n\tenable_op\030\001 \003(\t\"\225\021\n\016RewriterConfig\022;\n"
    "\020layout_optimizer\030\001 \001(\0162!.tensorflow.Rew"
    "riterConfig.Toggle\022;\n\020constant_folding\030\003"
    " \001(\0162!.tensorflow.RewriterConfig.Toggle\022"
    "=\n\022shape_optimization\030\r \001(\0162!.tensorflow"
    ".RewriterConfig.Toggle\0224\n\tremapping\030\016 \001("
    "\0162!.tensorflow.RewriterConfig.Toggle\022F\n\033"
    "common_subgraph_elimination\030\030 \001(\0162!.tens"
    "orflow.RewriterConfig.Toggle\022B\n\027arithmet"
    "ic_optimization\030\007 \001(\0162!.tensorflow.Rewri"
    "terConfig.Toggle\022B\n\027dependency_optimizat"
    "ion\030\010 \001(\0162!.tensorflow.RewriterConfig.To"
    "ggle\022<\n\021loop_optimization\030\t \001(\0162!.tensor"
    "flow.RewriterConfig.Toggle\022@\n\025function_o"
    "ptimization\030\n \001(\0162!.tensorflow.RewriterC"
    "onfig.Toggle\0229\n\016debug_stripper\030\013 \001(\0162!.t"
    "ensorflow.RewriterConfig.Toggle\022\035\n\025disab"
    "le_model_pruning\030\002 \001(\010\022H\n\035scoped_allocat"
    "or_optimization\030\017 \001(\0162!.tensorflow.Rewri"
    "terConfig.Toggle\022C\n\030pin_to_host_optimiza"
    "tion\030\022 \001(\0162!.tensorflow.RewriterConfig.T"
    "oggle\022B\n\027implementation_selector\030\026 \001(\0162!"
    ".tensorflow.RewriterConfig.Toggle\022\?\n\024aut"
    "o_mixed_precision\030\027 \001(\0162!.tensorflow.Rew"
    "riterConfig.Toggle\022C\n\030auto_mixed_precisi"
    "on_mkl\030\031 \001(\0162!.tensorflow.RewriterConfig"
    ".Toggle\022\036\n\026disable_meta_optimizer\030\023 \001(\010\022"
    "O\n\031meta_optimizer_iterations\030\014 \001(\0162,.ten"
    "sorflow.RewriterConfig.NumIterationsType"
    "\022\027\n\017min_graph_nodes\030\021 \001(\005\022B\n\023memory_opti"
    "mization\030\004 \001(\0162%.tensorflow.RewriterConf"
    "ig.MemOptType\022/\n\'memory_optimizer_target"
    "_node_name_scope\030\006 \001(\t\022!\n\031meta_optimizer"
    "_timeout_ms\030\024 \001(\003\0226\n\rauto_parallel\030\005 \001(\013"
    "2\037.tensorflow.AutoParallelOptions\022 \n\030fai"
    "l_on_optimizer_errors\030\025 \001(\010\022A\n\025scoped_al"
    "locator_opts\030\020 \001(\0132\".tensorflow.ScopedAl"
    "locatorOptions\022\022\n\noptimizers\030d \003(\t\022K\n\021cu"
    "stom_optimizers\030\310\001 \003(\0132/.tensorflow.Rewr"
    "iterConfig.CustomGraphOptimizer\022D\n\037inter"
    "_optimizer_verifier_config\030\254\002 \001(\0132\032.tens"
    "orflow.VerifierConfig\022F\n!post_optimizati"
    "on_verifier_config\030\255\002 \001(\0132\032.tensorflow.V"
    "erifierConfig\032\312\001\n\024CustomGraphOptimizer\022\014"
    "\n\004name\030\001 \001(\t\022X\n\rparameter_map\030\002 \003(\0132A.te"
    "nsorflow.RewriterConfig.CustomGraphOptim"
    "izer.ParameterMapEntry\032J\n\021ParameterMapEn"
    "try\022\013\n\003key\030\001 \001(\t\022$\n\005value\030\002 \001(\0132\025.tensor"
    "flow.AttrValue:\0028\001\"6\n\006Toggle\022\013\n\007DEFAULT\020"
    "\000\022\006\n\002ON\020\001\022\007\n\003OFF\020\002\022\016\n\nAGGRESSIVE\020\003\"<\n\021Nu"
    "mIterationsType\022\025\n\021DEFAULT_NUM_ITERS\020\000\022\007"
    "\n\003ONE\020\001\022\007\n\003TWO\020\002\"\237\001\n\nMemOptType\022\023\n\017DEFAU"
    "LT_MEM_OPT\020\000\022\016\n\nNO_MEM_OPT\020\001\022\n\n\006MANUAL\020\002"
    "\022\027\n\023SWAPPING_HEURISTICS\020\004\022\034\n\030RECOMPUTATI"
    "ON_HEURISTICS\020\005\022\031\n\025SCHEDULING_HEURISTICS"
    "\020\006\022\016\n\nHEURISTICS\020\003B\177\n\030org.tensorflow.fra"
    "meworkB\024RewriterConfigProtosP\001ZHgithub.c"
    "om/tensorflow/tensorflow/tensorflow/go/c"
    "ore/core_protos_go_proto\370\001\001b\006proto3", 2595);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/protobuf/rewriter_config.proto", &protobuf_RegisterTypes);
  AutoParallelOptions::default_instance_ = new AutoParallelOptions();
  ScopedAllocatorOptions::default_instance_ = new ScopedAllocatorOptions();
  RewriterConfig::default_instance_ = new RewriterConfig();
  RewriterConfig_CustomGraphOptimizer::default_instance_ = new RewriterConfig_CustomGraphOptimizer();
  AutoParallelOptions::default_instance_->InitAsDefaultInstance();
  ScopedAllocatorOptions::default_instance_->InitAsDefaultInstance();
  RewriterConfig::default_instance_->InitAsDefaultInstance();
  RewriterConfig_CustomGraphOptimizer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto {
  StaticDescriptorInitializer_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto() {
    protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto();
  }
} static_descriptor_initializer_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutoParallelOptions::kEnableFieldNumber;
const int AutoParallelOptions::kNumReplicasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutoParallelOptions::AutoParallelOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.AutoParallelOptions)
}

AutoParallelOptions::AutoParallelOptions(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.AutoParallelOptions)
}

void AutoParallelOptions::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AutoParallelOptions::AutoParallelOptions(const AutoParallelOptions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.AutoParallelOptions)
}

void AutoParallelOptions::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  enable_ = false;
  num_replicas_ = 0;
}

AutoParallelOptions::~AutoParallelOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.AutoParallelOptions)
  SharedDtor();
}

void AutoParallelOptions::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void AutoParallelOptions::ArenaDtor(void* object) {
  AutoParallelOptions* _this = reinterpret_cast< AutoParallelOptions* >(object);
  (void)_this;
}
void AutoParallelOptions::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void AutoParallelOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutoParallelOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AutoParallelOptions_descriptor_;
}

const AutoParallelOptions& AutoParallelOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto();
  return *default_instance_;
}

AutoParallelOptions* AutoParallelOptions::default_instance_ = NULL;

AutoParallelOptions* AutoParallelOptions::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<AutoParallelOptions>(arena);
}

void AutoParallelOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.AutoParallelOptions)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AutoParallelOptions, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AutoParallelOptions*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(enable_, num_replicas_);

#undef ZR_HELPER_
#undef ZR_

}

bool AutoParallelOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.AutoParallelOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enable = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_replicas;
        break;
      }

      // optional int32 num_replicas = 2;
      case 2: {
        if (tag == 16) {
         parse_num_replicas:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_replicas_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.AutoParallelOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.AutoParallelOptions)
  return false;
#undef DO_
}

void AutoParallelOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.AutoParallelOptions)
  // optional bool enable = 1;
  if (this->enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable(), output);
  }

  // optional int32 num_replicas = 2;
  if (this->num_replicas() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_replicas(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.AutoParallelOptions)
}

::google::protobuf::uint8* AutoParallelOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.AutoParallelOptions)
  // optional bool enable = 1;
  if (this->enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable(), target);
  }

  // optional int32 num_replicas = 2;
  if (this->num_replicas() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_replicas(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.AutoParallelOptions)
  return target;
}

int AutoParallelOptions::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.AutoParallelOptions)
  int total_size = 0;

  // optional bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 num_replicas = 2;
  if (this->num_replicas() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_replicas());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoParallelOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.AutoParallelOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AutoParallelOptions* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AutoParallelOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.AutoParallelOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.AutoParallelOptions)
    MergeFrom(*source);
  }
}

void AutoParallelOptions::MergeFrom(const AutoParallelOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.AutoParallelOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.enable() != 0) {
    set_enable(from.enable());
  }
  if (from.num_replicas() != 0) {
    set_num_replicas(from.num_replicas());
  }
}

void AutoParallelOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.AutoParallelOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoParallelOptions::CopyFrom(const AutoParallelOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.AutoParallelOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoParallelOptions::IsInitialized() const {

  return true;
}

void AutoParallelOptions::Swap(AutoParallelOptions* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    AutoParallelOptions temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void AutoParallelOptions::UnsafeArenaSwap(AutoParallelOptions* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void AutoParallelOptions::InternalSwap(AutoParallelOptions* other) {
  std::swap(enable_, other->enable_);
  std::swap(num_replicas_, other->num_replicas_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AutoParallelOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AutoParallelOptions_descriptor_;
  metadata.reflection = AutoParallelOptions_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AutoParallelOptions

// optional bool enable = 1;
void AutoParallelOptions::clear_enable() {
  enable_ = false;
}
 bool AutoParallelOptions::enable() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutoParallelOptions.enable)
  return enable_;
}
 void AutoParallelOptions::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.AutoParallelOptions.enable)
}

// optional int32 num_replicas = 2;
void AutoParallelOptions::clear_num_replicas() {
  num_replicas_ = 0;
}
 ::google::protobuf::int32 AutoParallelOptions::num_replicas() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutoParallelOptions.num_replicas)
  return num_replicas_;
}
 void AutoParallelOptions::set_num_replicas(::google::protobuf::int32 value) {
  
  num_replicas_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.AutoParallelOptions.num_replicas)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScopedAllocatorOptions::kEnableOpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScopedAllocatorOptions::ScopedAllocatorOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ScopedAllocatorOptions)
}

ScopedAllocatorOptions::ScopedAllocatorOptions(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  enable_op_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ScopedAllocatorOptions)
}

void ScopedAllocatorOptions::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ScopedAllocatorOptions::ScopedAllocatorOptions(const ScopedAllocatorOptions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.ScopedAllocatorOptions)
}

void ScopedAllocatorOptions::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
}

ScopedAllocatorOptions::~ScopedAllocatorOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.ScopedAllocatorOptions)
  SharedDtor();
}

void ScopedAllocatorOptions::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void ScopedAllocatorOptions::ArenaDtor(void* object) {
  ScopedAllocatorOptions* _this = reinterpret_cast< ScopedAllocatorOptions* >(object);
  (void)_this;
}
void ScopedAllocatorOptions::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ScopedAllocatorOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScopedAllocatorOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScopedAllocatorOptions_descriptor_;
}

const ScopedAllocatorOptions& ScopedAllocatorOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto();
  return *default_instance_;
}

ScopedAllocatorOptions* ScopedAllocatorOptions::default_instance_ = NULL;

ScopedAllocatorOptions* ScopedAllocatorOptions::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ScopedAllocatorOptions>(arena);
}

void ScopedAllocatorOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ScopedAllocatorOptions)
  enable_op_.Clear();
}

bool ScopedAllocatorOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.ScopedAllocatorOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string enable_op = 1;
      case 1: {
        if (tag == 10) {
         parse_enable_op:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_enable_op()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->enable_op(this->enable_op_size() - 1).data(),
            this->enable_op(this->enable_op_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.ScopedAllocatorOptions.enable_op"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_enable_op;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.ScopedAllocatorOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.ScopedAllocatorOptions)
  return false;
#undef DO_
}

void ScopedAllocatorOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.ScopedAllocatorOptions)
  // repeated string enable_op = 1;
  for (int i = 0; i < this->enable_op_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->enable_op(i).data(), this->enable_op(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ScopedAllocatorOptions.enable_op");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->enable_op(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.ScopedAllocatorOptions)
}

::google::protobuf::uint8* ScopedAllocatorOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ScopedAllocatorOptions)
  // repeated string enable_op = 1;
  for (int i = 0; i < this->enable_op_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->enable_op(i).data(), this->enable_op(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ScopedAllocatorOptions.enable_op");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->enable_op(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ScopedAllocatorOptions)
  return target;
}

int ScopedAllocatorOptions::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ScopedAllocatorOptions)
  int total_size = 0;

  // repeated string enable_op = 1;
  total_size += 1 * this->enable_op_size();
  for (int i = 0; i < this->enable_op_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->enable_op(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScopedAllocatorOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ScopedAllocatorOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ScopedAllocatorOptions* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ScopedAllocatorOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ScopedAllocatorOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ScopedAllocatorOptions)
    MergeFrom(*source);
  }
}

void ScopedAllocatorOptions::MergeFrom(const ScopedAllocatorOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ScopedAllocatorOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  enable_op_.MergeFrom(from.enable_op_);
}

void ScopedAllocatorOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ScopedAllocatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScopedAllocatorOptions::CopyFrom(const ScopedAllocatorOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ScopedAllocatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScopedAllocatorOptions::IsInitialized() const {

  return true;
}

void ScopedAllocatorOptions::Swap(ScopedAllocatorOptions* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ScopedAllocatorOptions temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ScopedAllocatorOptions::UnsafeArenaSwap(ScopedAllocatorOptions* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ScopedAllocatorOptions::InternalSwap(ScopedAllocatorOptions* other) {
  enable_op_.UnsafeArenaSwap(&other->enable_op_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScopedAllocatorOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScopedAllocatorOptions_descriptor_;
  metadata.reflection = ScopedAllocatorOptions_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScopedAllocatorOptions

// repeated string enable_op = 1;
int ScopedAllocatorOptions::enable_op_size() const {
  return enable_op_.size();
}
void ScopedAllocatorOptions::clear_enable_op() {
  enable_op_.Clear();
}
 const ::std::string& ScopedAllocatorOptions::enable_op(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.ScopedAllocatorOptions.enable_op)
  return enable_op_.Get(index);
}
 ::std::string* ScopedAllocatorOptions::mutable_enable_op(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.ScopedAllocatorOptions.enable_op)
  return enable_op_.Mutable(index);
}
 void ScopedAllocatorOptions::set_enable_op(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.ScopedAllocatorOptions.enable_op)
  enable_op_.Mutable(index)->assign(value);
}
 void ScopedAllocatorOptions::set_enable_op(int index, const char* value) {
  enable_op_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.ScopedAllocatorOptions.enable_op)
}
 void ScopedAllocatorOptions::set_enable_op(int index, const char* value, size_t size) {
  enable_op_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.ScopedAllocatorOptions.enable_op)
}
 ::std::string* ScopedAllocatorOptions::add_enable_op() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.ScopedAllocatorOptions.enable_op)
  return enable_op_.Add();
}
 void ScopedAllocatorOptions::add_enable_op(const ::std::string& value) {
  enable_op_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.ScopedAllocatorOptions.enable_op)
}
 void ScopedAllocatorOptions::add_enable_op(const char* value) {
  enable_op_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.ScopedAllocatorOptions.enable_op)
}
 void ScopedAllocatorOptions::add_enable_op(const char* value, size_t size) {
  enable_op_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.ScopedAllocatorOptions.enable_op)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
ScopedAllocatorOptions::enable_op() const {
  // @@protoc_insertion_point(field_list:tensorflow.ScopedAllocatorOptions.enable_op)
  return enable_op_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
ScopedAllocatorOptions::mutable_enable_op() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.ScopedAllocatorOptions.enable_op)
  return &enable_op_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* RewriterConfig_Toggle_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewriterConfig_Toggle_descriptor_;
}
bool RewriterConfig_Toggle_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RewriterConfig_Toggle RewriterConfig::DEFAULT;
const RewriterConfig_Toggle RewriterConfig::ON;
const RewriterConfig_Toggle RewriterConfig::OFF;
const RewriterConfig_Toggle RewriterConfig::AGGRESSIVE;
const RewriterConfig_Toggle RewriterConfig::Toggle_MIN;
const RewriterConfig_Toggle RewriterConfig::Toggle_MAX;
const int RewriterConfig::Toggle_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RewriterConfig_NumIterationsType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewriterConfig_NumIterationsType_descriptor_;
}
bool RewriterConfig_NumIterationsType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RewriterConfig_NumIterationsType RewriterConfig::DEFAULT_NUM_ITERS;
const RewriterConfig_NumIterationsType RewriterConfig::ONE;
const RewriterConfig_NumIterationsType RewriterConfig::TWO;
const RewriterConfig_NumIterationsType RewriterConfig::NumIterationsType_MIN;
const RewriterConfig_NumIterationsType RewriterConfig::NumIterationsType_MAX;
const int RewriterConfig::NumIterationsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RewriterConfig_MemOptType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewriterConfig_MemOptType_descriptor_;
}
bool RewriterConfig_MemOptType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RewriterConfig_MemOptType RewriterConfig::DEFAULT_MEM_OPT;
const RewriterConfig_MemOptType RewriterConfig::NO_MEM_OPT;
const RewriterConfig_MemOptType RewriterConfig::MANUAL;
const RewriterConfig_MemOptType RewriterConfig::SWAPPING_HEURISTICS;
const RewriterConfig_MemOptType RewriterConfig::RECOMPUTATION_HEURISTICS;
const RewriterConfig_MemOptType RewriterConfig::SCHEDULING_HEURISTICS;
const RewriterConfig_MemOptType RewriterConfig::HEURISTICS;
const RewriterConfig_MemOptType RewriterConfig::MemOptType_MIN;
const RewriterConfig_MemOptType RewriterConfig::MemOptType_MAX;
const int RewriterConfig::MemOptType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RewriterConfig_CustomGraphOptimizer::kNameFieldNumber;
const int RewriterConfig_CustomGraphOptimizer::kParameterMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RewriterConfig_CustomGraphOptimizer::RewriterConfig_CustomGraphOptimizer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RewriterConfig.CustomGraphOptimizer)
}

RewriterConfig_CustomGraphOptimizer::RewriterConfig_CustomGraphOptimizer(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  parameter_map_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RewriterConfig.CustomGraphOptimizer)
}

void RewriterConfig_CustomGraphOptimizer::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RewriterConfig_CustomGraphOptimizer::RewriterConfig_CustomGraphOptimizer(const RewriterConfig_CustomGraphOptimizer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.RewriterConfig.CustomGraphOptimizer)
}

void RewriterConfig_CustomGraphOptimizer::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parameter_map_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  parameter_map_.SetEntryDescriptor(
      &::tensorflow::RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_descriptor_);
}

RewriterConfig_CustomGraphOptimizer::~RewriterConfig_CustomGraphOptimizer() {
  // @@protoc_insertion_point(destructor:tensorflow.RewriterConfig.CustomGraphOptimizer)
  SharedDtor();
}

void RewriterConfig_CustomGraphOptimizer::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void RewriterConfig_CustomGraphOptimizer::ArenaDtor(void* object) {
  RewriterConfig_CustomGraphOptimizer* _this = reinterpret_cast< RewriterConfig_CustomGraphOptimizer* >(object);
  (void)_this;
}
void RewriterConfig_CustomGraphOptimizer::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RewriterConfig_CustomGraphOptimizer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewriterConfig_CustomGraphOptimizer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewriterConfig_CustomGraphOptimizer_descriptor_;
}

const RewriterConfig_CustomGraphOptimizer& RewriterConfig_CustomGraphOptimizer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto();
  return *default_instance_;
}

RewriterConfig_CustomGraphOptimizer* RewriterConfig_CustomGraphOptimizer::default_instance_ = NULL;

RewriterConfig_CustomGraphOptimizer* RewriterConfig_CustomGraphOptimizer::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RewriterConfig_CustomGraphOptimizer>(arena);
}

void RewriterConfig_CustomGraphOptimizer::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RewriterConfig.CustomGraphOptimizer)
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  parameter_map_.Clear();
}

bool RewriterConfig_CustomGraphOptimizer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RewriterConfig.CustomGraphOptimizer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.RewriterConfig.CustomGraphOptimizer.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_parameter_map;
        break;
      }

      // map<string, .tensorflow.AttrValue> parameter_map = 2;
      case 2: {
        if (tag == 18) {
         parse_parameter_map:
          DO_(input->IncrementRecursionDepth());
         parse_loop_parameter_map:
          RewriterConfig_CustomGraphOptimizer_ParameterMapEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::tensorflow::AttrValue,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue > > parser(&parameter_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.RewriterConfig.CustomGraphOptimizer.ParameterMapEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_parameter_map;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RewriterConfig.CustomGraphOptimizer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RewriterConfig.CustomGraphOptimizer)
  return false;
#undef DO_
}

void RewriterConfig_CustomGraphOptimizer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RewriterConfig.CustomGraphOptimizer)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RewriterConfig.CustomGraphOptimizer.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // map<string, .tensorflow.AttrValue> parameter_map = 2;
  if (!this->parameter_map().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.RewriterConfig.CustomGraphOptimizer.ParameterMapEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->parameter_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->parameter_map().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_iterator
          it = this->parameter_map().begin();
          it != this->parameter_map().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<RewriterConfig_CustomGraphOptimizer_ParameterMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(parameter_map_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<RewriterConfig_CustomGraphOptimizer_ParameterMapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_iterator
          it = this->parameter_map().begin();
          it != this->parameter_map().end(); ++it) {
        entry.reset(parameter_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.RewriterConfig.CustomGraphOptimizer)
}

::google::protobuf::uint8* RewriterConfig_CustomGraphOptimizer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RewriterConfig.CustomGraphOptimizer)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RewriterConfig.CustomGraphOptimizer.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // map<string, .tensorflow.AttrValue> parameter_map = 2;
  if (!this->parameter_map().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.RewriterConfig.CustomGraphOptimizer.ParameterMapEntry.key");
      }
    };

    if (deterministic &&
        this->parameter_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->parameter_map().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_iterator
          it = this->parameter_map().begin();
          it != this->parameter_map().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<RewriterConfig_CustomGraphOptimizer_ParameterMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(parameter_map_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<RewriterConfig_CustomGraphOptimizer_ParameterMapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_iterator
          it = this->parameter_map().begin();
          it != this->parameter_map().end(); ++it) {
        entry.reset(parameter_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RewriterConfig.CustomGraphOptimizer)
  return target;
}

int RewriterConfig_CustomGraphOptimizer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RewriterConfig.CustomGraphOptimizer)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // map<string, .tensorflow.AttrValue> parameter_map = 2;
  total_size += 1 * this->parameter_map_size();
  {
    ::google::protobuf::scoped_ptr<RewriterConfig_CustomGraphOptimizer_ParameterMapEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_iterator
        it = this->parameter_map().begin();
        it != this->parameter_map().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(parameter_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewriterConfig_CustomGraphOptimizer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RewriterConfig.CustomGraphOptimizer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RewriterConfig_CustomGraphOptimizer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RewriterConfig_CustomGraphOptimizer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RewriterConfig.CustomGraphOptimizer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RewriterConfig.CustomGraphOptimizer)
    MergeFrom(*source);
  }
}

void RewriterConfig_CustomGraphOptimizer::MergeFrom(const RewriterConfig_CustomGraphOptimizer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RewriterConfig.CustomGraphOptimizer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  parameter_map_.MergeFrom(from.parameter_map_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
}

void RewriterConfig_CustomGraphOptimizer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RewriterConfig.CustomGraphOptimizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewriterConfig_CustomGraphOptimizer::CopyFrom(const RewriterConfig_CustomGraphOptimizer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RewriterConfig.CustomGraphOptimizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewriterConfig_CustomGraphOptimizer::IsInitialized() const {

  return true;
}

void RewriterConfig_CustomGraphOptimizer::Swap(RewriterConfig_CustomGraphOptimizer* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RewriterConfig_CustomGraphOptimizer temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void RewriterConfig_CustomGraphOptimizer::UnsafeArenaSwap(RewriterConfig_CustomGraphOptimizer* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RewriterConfig_CustomGraphOptimizer::InternalSwap(RewriterConfig_CustomGraphOptimizer* other) {
  name_.Swap(&other->name_);
  parameter_map_.Swap(&other->parameter_map_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RewriterConfig_CustomGraphOptimizer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewriterConfig_CustomGraphOptimizer_descriptor_;
  metadata.reflection = RewriterConfig_CustomGraphOptimizer_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

void RewriterConfig::_slow_mutable_auto_parallel() {
  auto_parallel_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::AutoParallelOptions >(
      GetArenaNoVirtual());
}
::tensorflow::AutoParallelOptions* RewriterConfig::_slow_release_auto_parallel() {
  if (auto_parallel_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::AutoParallelOptions* temp = new ::tensorflow::AutoParallelOptions;
    temp->MergeFrom(*auto_parallel_);
    auto_parallel_ = NULL;
    return temp;
  }
}
::tensorflow::AutoParallelOptions* RewriterConfig::unsafe_arena_release_auto_parallel() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RewriterConfig.auto_parallel)
  
  ::tensorflow::AutoParallelOptions* temp = auto_parallel_;
  auto_parallel_ = NULL;
  return temp;
}
void RewriterConfig::_slow_set_allocated_auto_parallel(
    ::google::protobuf::Arena* message_arena, ::tensorflow::AutoParallelOptions** auto_parallel) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*auto_parallel) == NULL) {
      message_arena->Own(*auto_parallel);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*auto_parallel)) {
      ::tensorflow::AutoParallelOptions* new_auto_parallel = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::AutoParallelOptions >(
            message_arena);
      new_auto_parallel->CopyFrom(**auto_parallel);
      *auto_parallel = new_auto_parallel;
    }
}
void RewriterConfig::unsafe_arena_set_allocated_auto_parallel(
    ::tensorflow::AutoParallelOptions* auto_parallel) {
  if (GetArenaNoVirtual() == NULL) {
    delete auto_parallel_;
  }
  auto_parallel_ = auto_parallel;
  if (auto_parallel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RewriterConfig.auto_parallel)
}
void RewriterConfig::_slow_mutable_scoped_allocator_opts() {
  scoped_allocator_opts_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::ScopedAllocatorOptions >(
      GetArenaNoVirtual());
}
::tensorflow::ScopedAllocatorOptions* RewriterConfig::_slow_release_scoped_allocator_opts() {
  if (scoped_allocator_opts_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::ScopedAllocatorOptions* temp = new ::tensorflow::ScopedAllocatorOptions;
    temp->MergeFrom(*scoped_allocator_opts_);
    scoped_allocator_opts_ = NULL;
    return temp;
  }
}
::tensorflow::ScopedAllocatorOptions* RewriterConfig::unsafe_arena_release_scoped_allocator_opts() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RewriterConfig.scoped_allocator_opts)
  
  ::tensorflow::ScopedAllocatorOptions* temp = scoped_allocator_opts_;
  scoped_allocator_opts_ = NULL;
  return temp;
}
void RewriterConfig::_slow_set_allocated_scoped_allocator_opts(
    ::google::protobuf::Arena* message_arena, ::tensorflow::ScopedAllocatorOptions** scoped_allocator_opts) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*scoped_allocator_opts) == NULL) {
      message_arena->Own(*scoped_allocator_opts);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*scoped_allocator_opts)) {
      ::tensorflow::ScopedAllocatorOptions* new_scoped_allocator_opts = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::ScopedAllocatorOptions >(
            message_arena);
      new_scoped_allocator_opts->CopyFrom(**scoped_allocator_opts);
      *scoped_allocator_opts = new_scoped_allocator_opts;
    }
}
void RewriterConfig::unsafe_arena_set_allocated_scoped_allocator_opts(
    ::tensorflow::ScopedAllocatorOptions* scoped_allocator_opts) {
  if (GetArenaNoVirtual() == NULL) {
    delete scoped_allocator_opts_;
  }
  scoped_allocator_opts_ = scoped_allocator_opts;
  if (scoped_allocator_opts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RewriterConfig.scoped_allocator_opts)
}
void RewriterConfig::_slow_mutable_inter_optimizer_verifier_config() {
  inter_optimizer_verifier_config_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::VerifierConfig >(
      GetArenaNoVirtual());
}
::tensorflow::VerifierConfig* RewriterConfig::_slow_release_inter_optimizer_verifier_config() {
  if (inter_optimizer_verifier_config_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::VerifierConfig* temp = new ::tensorflow::VerifierConfig;
    temp->MergeFrom(*inter_optimizer_verifier_config_);
    inter_optimizer_verifier_config_ = NULL;
    return temp;
  }
}
::tensorflow::VerifierConfig* RewriterConfig::unsafe_arena_release_inter_optimizer_verifier_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RewriterConfig.inter_optimizer_verifier_config)
  
  ::tensorflow::VerifierConfig* temp = inter_optimizer_verifier_config_;
  inter_optimizer_verifier_config_ = NULL;
  return temp;
}
void RewriterConfig::_slow_set_allocated_inter_optimizer_verifier_config(
    ::google::protobuf::Arena* message_arena, ::tensorflow::VerifierConfig** inter_optimizer_verifier_config) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*inter_optimizer_verifier_config) == NULL) {
      message_arena->Own(*inter_optimizer_verifier_config);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*inter_optimizer_verifier_config)) {
      ::tensorflow::VerifierConfig* new_inter_optimizer_verifier_config = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::VerifierConfig >(
            message_arena);
      new_inter_optimizer_verifier_config->CopyFrom(**inter_optimizer_verifier_config);
      *inter_optimizer_verifier_config = new_inter_optimizer_verifier_config;
    }
}
void RewriterConfig::unsafe_arena_set_allocated_inter_optimizer_verifier_config(
    ::tensorflow::VerifierConfig* inter_optimizer_verifier_config) {
  if (GetArenaNoVirtual() == NULL) {
    delete inter_optimizer_verifier_config_;
  }
  inter_optimizer_verifier_config_ = inter_optimizer_verifier_config;
  if (inter_optimizer_verifier_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RewriterConfig.inter_optimizer_verifier_config)
}
void RewriterConfig::_slow_mutable_post_optimization_verifier_config() {
  post_optimization_verifier_config_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::VerifierConfig >(
      GetArenaNoVirtual());
}
::tensorflow::VerifierConfig* RewriterConfig::_slow_release_post_optimization_verifier_config() {
  if (post_optimization_verifier_config_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::VerifierConfig* temp = new ::tensorflow::VerifierConfig;
    temp->MergeFrom(*post_optimization_verifier_config_);
    post_optimization_verifier_config_ = NULL;
    return temp;
  }
}
::tensorflow::VerifierConfig* RewriterConfig::unsafe_arena_release_post_optimization_verifier_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RewriterConfig.post_optimization_verifier_config)
  
  ::tensorflow::VerifierConfig* temp = post_optimization_verifier_config_;
  post_optimization_verifier_config_ = NULL;
  return temp;
}
void RewriterConfig::_slow_set_allocated_post_optimization_verifier_config(
    ::google::protobuf::Arena* message_arena, ::tensorflow::VerifierConfig** post_optimization_verifier_config) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*post_optimization_verifier_config) == NULL) {
      message_arena->Own(*post_optimization_verifier_config);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*post_optimization_verifier_config)) {
      ::tensorflow::VerifierConfig* new_post_optimization_verifier_config = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::VerifierConfig >(
            message_arena);
      new_post_optimization_verifier_config->CopyFrom(**post_optimization_verifier_config);
      *post_optimization_verifier_config = new_post_optimization_verifier_config;
    }
}
void RewriterConfig::unsafe_arena_set_allocated_post_optimization_verifier_config(
    ::tensorflow::VerifierConfig* post_optimization_verifier_config) {
  if (GetArenaNoVirtual() == NULL) {
    delete post_optimization_verifier_config_;
  }
  post_optimization_verifier_config_ = post_optimization_verifier_config;
  if (post_optimization_verifier_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RewriterConfig.post_optimization_verifier_config)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RewriterConfig::kLayoutOptimizerFieldNumber;
const int RewriterConfig::kConstantFoldingFieldNumber;
const int RewriterConfig::kShapeOptimizationFieldNumber;
const int RewriterConfig::kRemappingFieldNumber;
const int RewriterConfig::kCommonSubgraphEliminationFieldNumber;
const int RewriterConfig::kArithmeticOptimizationFieldNumber;
const int RewriterConfig::kDependencyOptimizationFieldNumber;
const int RewriterConfig::kLoopOptimizationFieldNumber;
const int RewriterConfig::kFunctionOptimizationFieldNumber;
const int RewriterConfig::kDebugStripperFieldNumber;
const int RewriterConfig::kDisableModelPruningFieldNumber;
const int RewriterConfig::kScopedAllocatorOptimizationFieldNumber;
const int RewriterConfig::kPinToHostOptimizationFieldNumber;
const int RewriterConfig::kImplementationSelectorFieldNumber;
const int RewriterConfig::kAutoMixedPrecisionFieldNumber;
const int RewriterConfig::kAutoMixedPrecisionMklFieldNumber;
const int RewriterConfig::kDisableMetaOptimizerFieldNumber;
const int RewriterConfig::kMetaOptimizerIterationsFieldNumber;
const int RewriterConfig::kMinGraphNodesFieldNumber;
const int RewriterConfig::kMemoryOptimizationFieldNumber;
const int RewriterConfig::kMemoryOptimizerTargetNodeNameScopeFieldNumber;
const int RewriterConfig::kMetaOptimizerTimeoutMsFieldNumber;
const int RewriterConfig::kAutoParallelFieldNumber;
const int RewriterConfig::kFailOnOptimizerErrorsFieldNumber;
const int RewriterConfig::kScopedAllocatorOptsFieldNumber;
const int RewriterConfig::kOptimizersFieldNumber;
const int RewriterConfig::kCustomOptimizersFieldNumber;
const int RewriterConfig::kInterOptimizerVerifierConfigFieldNumber;
const int RewriterConfig::kPostOptimizationVerifierConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RewriterConfig::RewriterConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RewriterConfig)
}

RewriterConfig::RewriterConfig(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  optimizers_(arena),
  custom_optimizers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RewriterConfig)
}

void RewriterConfig::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  auto_parallel_ = const_cast< ::tensorflow::AutoParallelOptions*>(&::tensorflow::AutoParallelOptions::default_instance());
  scoped_allocator_opts_ = const_cast< ::tensorflow::ScopedAllocatorOptions*>(&::tensorflow::ScopedAllocatorOptions::default_instance());
  inter_optimizer_verifier_config_ = const_cast< ::tensorflow::VerifierConfig*>(&::tensorflow::VerifierConfig::default_instance());
  post_optimization_verifier_config_ = const_cast< ::tensorflow::VerifierConfig*>(&::tensorflow::VerifierConfig::default_instance());
}

RewriterConfig::RewriterConfig(const RewriterConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.RewriterConfig)
}

void RewriterConfig::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  layout_optimizer_ = 0;
  constant_folding_ = 0;
  shape_optimization_ = 0;
  remapping_ = 0;
  common_subgraph_elimination_ = 0;
  arithmetic_optimization_ = 0;
  dependency_optimization_ = 0;
  loop_optimization_ = 0;
  function_optimization_ = 0;
  debug_stripper_ = 0;
  disable_model_pruning_ = false;
  scoped_allocator_optimization_ = 0;
  pin_to_host_optimization_ = 0;
  implementation_selector_ = 0;
  auto_mixed_precision_ = 0;
  auto_mixed_precision_mkl_ = 0;
  disable_meta_optimizer_ = false;
  meta_optimizer_iterations_ = 0;
  min_graph_nodes_ = 0;
  memory_optimization_ = 0;
  memory_optimizer_target_node_name_scope_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  meta_optimizer_timeout_ms_ = GOOGLE_LONGLONG(0);
  auto_parallel_ = NULL;
  fail_on_optimizer_errors_ = false;
  scoped_allocator_opts_ = NULL;
  inter_optimizer_verifier_config_ = NULL;
  post_optimization_verifier_config_ = NULL;
}

RewriterConfig::~RewriterConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.RewriterConfig)
  SharedDtor();
}

void RewriterConfig::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  memory_optimizer_target_node_name_scope_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
    delete auto_parallel_;
    delete scoped_allocator_opts_;
    delete inter_optimizer_verifier_config_;
    delete post_optimization_verifier_config_;
  }
}

void RewriterConfig::ArenaDtor(void* object) {
  RewriterConfig* _this = reinterpret_cast< RewriterConfig* >(object);
  (void)_this;
}
void RewriterConfig::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RewriterConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewriterConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewriterConfig_descriptor_;
}

const RewriterConfig& RewriterConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto();
  return *default_instance_;
}

RewriterConfig* RewriterConfig::default_instance_ = NULL;

RewriterConfig* RewriterConfig::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RewriterConfig>(arena);
}

void RewriterConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RewriterConfig)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RewriterConfig, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RewriterConfig*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(layout_optimizer_, loop_optimization_);
  ZR_(function_optimization_, disable_model_pruning_);
  ZR_(disable_meta_optimizer_, min_graph_nodes_);
  memory_optimization_ = 0;
  memory_optimizer_target_node_name_scope_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  meta_optimizer_timeout_ms_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && auto_parallel_ != NULL) delete auto_parallel_;
  auto_parallel_ = NULL;
  if (GetArenaNoVirtual() == NULL && scoped_allocator_opts_ != NULL) delete scoped_allocator_opts_;
  scoped_allocator_opts_ = NULL;
  if (GetArenaNoVirtual() == NULL && inter_optimizer_verifier_config_ != NULL) delete inter_optimizer_verifier_config_;
  inter_optimizer_verifier_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && post_optimization_verifier_config_ != NULL) delete post_optimization_verifier_config_;
  post_optimization_verifier_config_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  optimizers_.Clear();
  custom_optimizers_.Clear();
}

bool RewriterConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RewriterConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tensorflow.RewriterConfig.Toggle layout_optimizer = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_layout_optimizer(static_cast< ::tensorflow::RewriterConfig_Toggle >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_disable_model_pruning;
        break;
      }

      // optional bool disable_model_pruning = 2;
      case 2: {
        if (tag == 16) {
         parse_disable_model_pruning:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_model_pruning_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_constant_folding;
        break;
      }

      // optional .tensorflow.RewriterConfig.Toggle constant_folding = 3;
      case 3: {
        if (tag == 24) {
         parse_constant_folding:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_constant_folding(static_cast< ::tensorflow::RewriterConfig_Toggle >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_memory_optimization;
        break;
      }

      // optional .tensorflow.RewriterConfig.MemOptType memory_optimization = 4;
      case 4: {
        if (tag == 32) {
         parse_memory_optimization:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_memory_optimization(static_cast< ::tensorflow::RewriterConfig_MemOptType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_auto_parallel;
        break;
      }

      // optional .tensorflow.AutoParallelOptions auto_parallel = 5;
      case 5: {
        if (tag == 42) {
         parse_auto_parallel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_auto_parallel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_memory_optimizer_target_node_name_scope;
        break;
      }

      // optional string memory_optimizer_target_node_name_scope = 6;
      case 6: {
        if (tag == 50) {
         parse_memory_optimizer_target_node_name_scope:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_memory_optimizer_target_node_name_scope()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->memory_optimizer_target_node_name_scope().data(), this->memory_optimizer_target_node_name_scope().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_arithmetic_optimization;
        break;
      }

      // optional .tensorflow.RewriterConfig.Toggle arithmetic_optimization = 7;
      case 7: {
        if (tag == 56) {
         parse_arithmetic_optimization:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_arithmetic_optimization(static_cast< ::tensorflow::RewriterConfig_Toggle >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_dependency_optimization;
        break;
      }

      // optional .tensorflow.RewriterConfig.Toggle dependency_optimization = 8;
      case 8: {
        if (tag == 64) {
         parse_dependency_optimization:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dependency_optimization(static_cast< ::tensorflow::RewriterConfig_Toggle >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_loop_optimization;
        break;
      }

      // optional .tensorflow.RewriterConfig.Toggle loop_optimization = 9;
      case 9: {
        if (tag == 72) {
         parse_loop_optimization:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_loop_optimization(static_cast< ::tensorflow::RewriterConfig_Toggle >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_function_optimization;
        break;
      }

      // optional .tensorflow.RewriterConfig.Toggle function_optimization = 10;
      case 10: {
        if (tag == 80) {
         parse_function_optimization:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_function_optimization(static_cast< ::tensorflow::RewriterConfig_Toggle >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_debug_stripper;
        break;
      }

      // optional .tensorflow.RewriterConfig.Toggle debug_stripper = 11;
      case 11: {
        if (tag == 88) {
         parse_debug_stripper:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_debug_stripper(static_cast< ::tensorflow::RewriterConfig_Toggle >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_meta_optimizer_iterations;
        break;
      }

      // optional .tensorflow.RewriterConfig.NumIterationsType meta_optimizer_iterations = 12;
      case 12: {
        if (tag == 96) {
         parse_meta_optimizer_iterations:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_meta_optimizer_iterations(static_cast< ::tensorflow::RewriterConfig_NumIterationsType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_shape_optimization;
        break;
      }

      // optional .tensorflow.RewriterConfig.Toggle shape_optimization = 13;
      case 13: {
        if (tag == 104) {
         parse_shape_optimization:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_shape_optimization(static_cast< ::tensorflow::RewriterConfig_Toggle >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_remapping;
        break;
      }

      // optional .tensorflow.RewriterConfig.Toggle remapping = 14;
      case 14: {
        if (tag == 112) {
         parse_remapping:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_remapping(static_cast< ::tensorflow::RewriterConfig_Toggle >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_scoped_allocator_optimization;
        break;
      }

      // optional .tensorflow.RewriterConfig.Toggle scoped_allocator_optimization = 15;
      case 15: {
        if (tag == 120) {
         parse_scoped_allocator_optimization:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_scoped_allocator_optimization(static_cast< ::tensorflow::RewriterConfig_Toggle >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_scoped_allocator_opts;
        break;
      }

      // optional .tensorflow.ScopedAllocatorOptions scoped_allocator_opts = 16;
      case 16: {
        if (tag == 130) {
         parse_scoped_allocator_opts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scoped_allocator_opts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_min_graph_nodes;
        break;
      }

      // optional int32 min_graph_nodes = 17;
      case 17: {
        if (tag == 136) {
         parse_min_graph_nodes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_graph_nodes_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_pin_to_host_optimization;
        break;
      }

      // optional .tensorflow.RewriterConfig.Toggle pin_to_host_optimization = 18;
      case 18: {
        if (tag == 144) {
         parse_pin_to_host_optimization:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_pin_to_host_optimization(static_cast< ::tensorflow::RewriterConfig_Toggle >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_disable_meta_optimizer;
        break;
      }

      // optional bool disable_meta_optimizer = 19;
      case 19: {
        if (tag == 152) {
         parse_disable_meta_optimizer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_meta_optimizer_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_meta_optimizer_timeout_ms;
        break;
      }

      // optional int64 meta_optimizer_timeout_ms = 20;
      case 20: {
        if (tag == 160) {
         parse_meta_optimizer_timeout_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &meta_optimizer_timeout_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_fail_on_optimizer_errors;
        break;
      }

      // optional bool fail_on_optimizer_errors = 21;
      case 21: {
        if (tag == 168) {
         parse_fail_on_optimizer_errors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fail_on_optimizer_errors_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_implementation_selector;
        break;
      }

      // optional .tensorflow.RewriterConfig.Toggle implementation_selector = 22;
      case 22: {
        if (tag == 176) {
         parse_implementation_selector:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_implementation_selector(static_cast< ::tensorflow::RewriterConfig_Toggle >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_auto_mixed_precision;
        break;
      }

      // optional .tensorflow.RewriterConfig.Toggle auto_mixed_precision = 23;
      case 23: {
        if (tag == 184) {
         parse_auto_mixed_precision:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_auto_mixed_precision(static_cast< ::tensorflow::RewriterConfig_Toggle >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_common_subgraph_elimination;
        break;
      }

      // optional .tensorflow.RewriterConfig.Toggle common_subgraph_elimination = 24;
      case 24: {
        if (tag == 192) {
         parse_common_subgraph_elimination:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_common_subgraph_elimination(static_cast< ::tensorflow::RewriterConfig_Toggle >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_auto_mixed_precision_mkl;
        break;
      }

      // optional .tensorflow.RewriterConfig.Toggle auto_mixed_precision_mkl = 25;
      case 25: {
        if (tag == 200) {
         parse_auto_mixed_precision_mkl:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_auto_mixed_precision_mkl(static_cast< ::tensorflow::RewriterConfig_Toggle >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_optimizers;
        break;
      }

      // repeated string optimizers = 100;
      case 100: {
        if (tag == 802) {
         parse_optimizers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_optimizers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->optimizers(this->optimizers_size() - 1).data(),
            this->optimizers(this->optimizers_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.RewriterConfig.optimizers"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_optimizers;
        if (input->ExpectTag(1602)) goto parse_custom_optimizers;
        break;
      }

      // repeated .tensorflow.RewriterConfig.CustomGraphOptimizer custom_optimizers = 200;
      case 200: {
        if (tag == 1602) {
         parse_custom_optimizers:
          DO_(input->IncrementRecursionDepth());
         parse_loop_custom_optimizers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_custom_optimizers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1602)) goto parse_loop_custom_optimizers;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(2402)) goto parse_inter_optimizer_verifier_config;
        break;
      }

      // optional .tensorflow.VerifierConfig inter_optimizer_verifier_config = 300;
      case 300: {
        if (tag == 2402) {
         parse_inter_optimizer_verifier_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inter_optimizer_verifier_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2410)) goto parse_post_optimization_verifier_config;
        break;
      }

      // optional .tensorflow.VerifierConfig post_optimization_verifier_config = 301;
      case 301: {
        if (tag == 2410) {
         parse_post_optimization_verifier_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_post_optimization_verifier_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RewriterConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RewriterConfig)
  return false;
#undef DO_
}

void RewriterConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RewriterConfig)
  // optional .tensorflow.RewriterConfig.Toggle layout_optimizer = 1;
  if (this->layout_optimizer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->layout_optimizer(), output);
  }

  // optional bool disable_model_pruning = 2;
  if (this->disable_model_pruning() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->disable_model_pruning(), output);
  }

  // optional .tensorflow.RewriterConfig.Toggle constant_folding = 3;
  if (this->constant_folding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->constant_folding(), output);
  }

  // optional .tensorflow.RewriterConfig.MemOptType memory_optimization = 4;
  if (this->memory_optimization() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->memory_optimization(), output);
  }

  // optional .tensorflow.AutoParallelOptions auto_parallel = 5;
  if (this->has_auto_parallel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->auto_parallel_, output);
  }

  // optional string memory_optimizer_target_node_name_scope = 6;
  if (this->memory_optimizer_target_node_name_scope().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->memory_optimizer_target_node_name_scope().data(), this->memory_optimizer_target_node_name_scope().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->memory_optimizer_target_node_name_scope(), output);
  }

  // optional .tensorflow.RewriterConfig.Toggle arithmetic_optimization = 7;
  if (this->arithmetic_optimization() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->arithmetic_optimization(), output);
  }

  // optional .tensorflow.RewriterConfig.Toggle dependency_optimization = 8;
  if (this->dependency_optimization() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->dependency_optimization(), output);
  }

  // optional .tensorflow.RewriterConfig.Toggle loop_optimization = 9;
  if (this->loop_optimization() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->loop_optimization(), output);
  }

  // optional .tensorflow.RewriterConfig.Toggle function_optimization = 10;
  if (this->function_optimization() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->function_optimization(), output);
  }

  // optional .tensorflow.RewriterConfig.Toggle debug_stripper = 11;
  if (this->debug_stripper() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->debug_stripper(), output);
  }

  // optional .tensorflow.RewriterConfig.NumIterationsType meta_optimizer_iterations = 12;
  if (this->meta_optimizer_iterations() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->meta_optimizer_iterations(), output);
  }

  // optional .tensorflow.RewriterConfig.Toggle shape_optimization = 13;
  if (this->shape_optimization() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->shape_optimization(), output);
  }

  // optional .tensorflow.RewriterConfig.Toggle remapping = 14;
  if (this->remapping() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->remapping(), output);
  }

  // optional .tensorflow.RewriterConfig.Toggle scoped_allocator_optimization = 15;
  if (this->scoped_allocator_optimization() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->scoped_allocator_optimization(), output);
  }

  // optional .tensorflow.ScopedAllocatorOptions scoped_allocator_opts = 16;
  if (this->has_scoped_allocator_opts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->scoped_allocator_opts_, output);
  }

  // optional int32 min_graph_nodes = 17;
  if (this->min_graph_nodes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->min_graph_nodes(), output);
  }

  // optional .tensorflow.RewriterConfig.Toggle pin_to_host_optimization = 18;
  if (this->pin_to_host_optimization() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->pin_to_host_optimization(), output);
  }

  // optional bool disable_meta_optimizer = 19;
  if (this->disable_meta_optimizer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->disable_meta_optimizer(), output);
  }

  // optional int64 meta_optimizer_timeout_ms = 20;
  if (this->meta_optimizer_timeout_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->meta_optimizer_timeout_ms(), output);
  }

  // optional bool fail_on_optimizer_errors = 21;
  if (this->fail_on_optimizer_errors() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->fail_on_optimizer_errors(), output);
  }

  // optional .tensorflow.RewriterConfig.Toggle implementation_selector = 22;
  if (this->implementation_selector() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->implementation_selector(), output);
  }

  // optional .tensorflow.RewriterConfig.Toggle auto_mixed_precision = 23;
  if (this->auto_mixed_precision() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->auto_mixed_precision(), output);
  }

  // optional .tensorflow.RewriterConfig.Toggle common_subgraph_elimination = 24;
  if (this->common_subgraph_elimination() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      24, this->common_subgraph_elimination(), output);
  }

  // optional .tensorflow.RewriterConfig.Toggle auto_mixed_precision_mkl = 25;
  if (this->auto_mixed_precision_mkl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      25, this->auto_mixed_precision_mkl(), output);
  }

  // repeated string optimizers = 100;
  for (int i = 0; i < this->optimizers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->optimizers(i).data(), this->optimizers(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RewriterConfig.optimizers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      100, this->optimizers(i), output);
  }

  // repeated .tensorflow.RewriterConfig.CustomGraphOptimizer custom_optimizers = 200;
  for (unsigned int i = 0, n = this->custom_optimizers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      200, this->custom_optimizers(i), output);
  }

  // optional .tensorflow.VerifierConfig inter_optimizer_verifier_config = 300;
  if (this->has_inter_optimizer_verifier_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      300, *this->inter_optimizer_verifier_config_, output);
  }

  // optional .tensorflow.VerifierConfig post_optimization_verifier_config = 301;
  if (this->has_post_optimization_verifier_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      301, *this->post_optimization_verifier_config_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.RewriterConfig)
}

::google::protobuf::uint8* RewriterConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RewriterConfig)
  // optional .tensorflow.RewriterConfig.Toggle layout_optimizer = 1;
  if (this->layout_optimizer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->layout_optimizer(), target);
  }

  // optional bool disable_model_pruning = 2;
  if (this->disable_model_pruning() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->disable_model_pruning(), target);
  }

  // optional .tensorflow.RewriterConfig.Toggle constant_folding = 3;
  if (this->constant_folding() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->constant_folding(), target);
  }

  // optional .tensorflow.RewriterConfig.MemOptType memory_optimization = 4;
  if (this->memory_optimization() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->memory_optimization(), target);
  }

  // optional .tensorflow.AutoParallelOptions auto_parallel = 5;
  if (this->has_auto_parallel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->auto_parallel_, false, target);
  }

  // optional string memory_optimizer_target_node_name_scope = 6;
  if (this->memory_optimizer_target_node_name_scope().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->memory_optimizer_target_node_name_scope().data(), this->memory_optimizer_target_node_name_scope().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->memory_optimizer_target_node_name_scope(), target);
  }

  // optional .tensorflow.RewriterConfig.Toggle arithmetic_optimization = 7;
  if (this->arithmetic_optimization() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->arithmetic_optimization(), target);
  }

  // optional .tensorflow.RewriterConfig.Toggle dependency_optimization = 8;
  if (this->dependency_optimization() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->dependency_optimization(), target);
  }

  // optional .tensorflow.RewriterConfig.Toggle loop_optimization = 9;
  if (this->loop_optimization() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->loop_optimization(), target);
  }

  // optional .tensorflow.RewriterConfig.Toggle function_optimization = 10;
  if (this->function_optimization() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->function_optimization(), target);
  }

  // optional .tensorflow.RewriterConfig.Toggle debug_stripper = 11;
  if (this->debug_stripper() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->debug_stripper(), target);
  }

  // optional .tensorflow.RewriterConfig.NumIterationsType meta_optimizer_iterations = 12;
  if (this->meta_optimizer_iterations() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->meta_optimizer_iterations(), target);
  }

  // optional .tensorflow.RewriterConfig.Toggle shape_optimization = 13;
  if (this->shape_optimization() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->shape_optimization(), target);
  }

  // optional .tensorflow.RewriterConfig.Toggle remapping = 14;
  if (this->remapping() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->remapping(), target);
  }

  // optional .tensorflow.RewriterConfig.Toggle scoped_allocator_optimization = 15;
  if (this->scoped_allocator_optimization() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->scoped_allocator_optimization(), target);
  }

  // optional .tensorflow.ScopedAllocatorOptions scoped_allocator_opts = 16;
  if (this->has_scoped_allocator_opts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->scoped_allocator_opts_, false, target);
  }

  // optional int32 min_graph_nodes = 17;
  if (this->min_graph_nodes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->min_graph_nodes(), target);
  }

  // optional .tensorflow.RewriterConfig.Toggle pin_to_host_optimization = 18;
  if (this->pin_to_host_optimization() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->pin_to_host_optimization(), target);
  }

  // optional bool disable_meta_optimizer = 19;
  if (this->disable_meta_optimizer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->disable_meta_optimizer(), target);
  }

  // optional int64 meta_optimizer_timeout_ms = 20;
  if (this->meta_optimizer_timeout_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->meta_optimizer_timeout_ms(), target);
  }

  // optional bool fail_on_optimizer_errors = 21;
  if (this->fail_on_optimizer_errors() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->fail_on_optimizer_errors(), target);
  }

  // optional .tensorflow.RewriterConfig.Toggle implementation_selector = 22;
  if (this->implementation_selector() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->implementation_selector(), target);
  }

  // optional .tensorflow.RewriterConfig.Toggle auto_mixed_precision = 23;
  if (this->auto_mixed_precision() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->auto_mixed_precision(), target);
  }

  // optional .tensorflow.RewriterConfig.Toggle common_subgraph_elimination = 24;
  if (this->common_subgraph_elimination() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      24, this->common_subgraph_elimination(), target);
  }

  // optional .tensorflow.RewriterConfig.Toggle auto_mixed_precision_mkl = 25;
  if (this->auto_mixed_precision_mkl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      25, this->auto_mixed_precision_mkl(), target);
  }

  // repeated string optimizers = 100;
  for (int i = 0; i < this->optimizers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->optimizers(i).data(), this->optimizers(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RewriterConfig.optimizers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(100, this->optimizers(i), target);
  }

  // repeated .tensorflow.RewriterConfig.CustomGraphOptimizer custom_optimizers = 200;
  for (unsigned int i = 0, n = this->custom_optimizers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        200, this->custom_optimizers(i), false, target);
  }

  // optional .tensorflow.VerifierConfig inter_optimizer_verifier_config = 300;
  if (this->has_inter_optimizer_verifier_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        300, *this->inter_optimizer_verifier_config_, false, target);
  }

  // optional .tensorflow.VerifierConfig post_optimization_verifier_config = 301;
  if (this->has_post_optimization_verifier_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        301, *this->post_optimization_verifier_config_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RewriterConfig)
  return target;
}

int RewriterConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RewriterConfig)
  int total_size = 0;

  // optional .tensorflow.RewriterConfig.Toggle layout_optimizer = 1;
  if (this->layout_optimizer() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->layout_optimizer());
  }

  // optional .tensorflow.RewriterConfig.Toggle constant_folding = 3;
  if (this->constant_folding() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->constant_folding());
  }

  // optional .tensorflow.RewriterConfig.Toggle shape_optimization = 13;
  if (this->shape_optimization() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->shape_optimization());
  }

  // optional .tensorflow.RewriterConfig.Toggle remapping = 14;
  if (this->remapping() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->remapping());
  }

  // optional .tensorflow.RewriterConfig.Toggle common_subgraph_elimination = 24;
  if (this->common_subgraph_elimination() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->common_subgraph_elimination());
  }

  // optional .tensorflow.RewriterConfig.Toggle arithmetic_optimization = 7;
  if (this->arithmetic_optimization() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->arithmetic_optimization());
  }

  // optional .tensorflow.RewriterConfig.Toggle dependency_optimization = 8;
  if (this->dependency_optimization() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dependency_optimization());
  }

  // optional .tensorflow.RewriterConfig.Toggle loop_optimization = 9;
  if (this->loop_optimization() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->loop_optimization());
  }

  // optional .tensorflow.RewriterConfig.Toggle function_optimization = 10;
  if (this->function_optimization() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->function_optimization());
  }

  // optional .tensorflow.RewriterConfig.Toggle debug_stripper = 11;
  if (this->debug_stripper() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->debug_stripper());
  }

  // optional bool disable_model_pruning = 2;
  if (this->disable_model_pruning() != 0) {
    total_size += 1 + 1;
  }

  // optional .tensorflow.RewriterConfig.Toggle scoped_allocator_optimization = 15;
  if (this->scoped_allocator_optimization() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->scoped_allocator_optimization());
  }

  // optional .tensorflow.RewriterConfig.Toggle pin_to_host_optimization = 18;
  if (this->pin_to_host_optimization() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->pin_to_host_optimization());
  }

  // optional .tensorflow.RewriterConfig.Toggle implementation_selector = 22;
  if (this->implementation_selector() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->implementation_selector());
  }

  // optional .tensorflow.RewriterConfig.Toggle auto_mixed_precision = 23;
  if (this->auto_mixed_precision() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->auto_mixed_precision());
  }

  // optional .tensorflow.RewriterConfig.Toggle auto_mixed_precision_mkl = 25;
  if (this->auto_mixed_precision_mkl() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->auto_mixed_precision_mkl());
  }

  // optional bool disable_meta_optimizer = 19;
  if (this->disable_meta_optimizer() != 0) {
    total_size += 2 + 1;
  }

  // optional .tensorflow.RewriterConfig.NumIterationsType meta_optimizer_iterations = 12;
  if (this->meta_optimizer_iterations() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->meta_optimizer_iterations());
  }

  // optional int32 min_graph_nodes = 17;
  if (this->min_graph_nodes() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min_graph_nodes());
  }

  // optional .tensorflow.RewriterConfig.MemOptType memory_optimization = 4;
  if (this->memory_optimization() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->memory_optimization());
  }

  // optional string memory_optimizer_target_node_name_scope = 6;
  if (this->memory_optimizer_target_node_name_scope().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->memory_optimizer_target_node_name_scope());
  }

  // optional int64 meta_optimizer_timeout_ms = 20;
  if (this->meta_optimizer_timeout_ms() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->meta_optimizer_timeout_ms());
  }

  // optional .tensorflow.AutoParallelOptions auto_parallel = 5;
  if (this->has_auto_parallel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->auto_parallel_);
  }

  // optional bool fail_on_optimizer_errors = 21;
  if (this->fail_on_optimizer_errors() != 0) {
    total_size += 2 + 1;
  }

  // optional .tensorflow.ScopedAllocatorOptions scoped_allocator_opts = 16;
  if (this->has_scoped_allocator_opts()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->scoped_allocator_opts_);
  }

  // optional .tensorflow.VerifierConfig inter_optimizer_verifier_config = 300;
  if (this->has_inter_optimizer_verifier_config()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->inter_optimizer_verifier_config_);
  }

  // optional .tensorflow.VerifierConfig post_optimization_verifier_config = 301;
  if (this->has_post_optimization_verifier_config()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->post_optimization_verifier_config_);
  }

  // repeated string optimizers = 100;
  total_size += 2 * this->optimizers_size();
  for (int i = 0; i < this->optimizers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->optimizers(i));
  }

  // repeated .tensorflow.RewriterConfig.CustomGraphOptimizer custom_optimizers = 200;
  total_size += 2 * this->custom_optimizers_size();
  for (int i = 0; i < this->custom_optimizers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->custom_optimizers(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewriterConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RewriterConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RewriterConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RewriterConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RewriterConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RewriterConfig)
    MergeFrom(*source);
  }
}

void RewriterConfig::MergeFrom(const RewriterConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RewriterConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  optimizers_.MergeFrom(from.optimizers_);
  custom_optimizers_.MergeFrom(from.custom_optimizers_);
  if (from.layout_optimizer() != 0) {
    set_layout_optimizer(from.layout_optimizer());
  }
  if (from.constant_folding() != 0) {
    set_constant_folding(from.constant_folding());
  }
  if (from.shape_optimization() != 0) {
    set_shape_optimization(from.shape_optimization());
  }
  if (from.remapping() != 0) {
    set_remapping(from.remapping());
  }
  if (from.common_subgraph_elimination() != 0) {
    set_common_subgraph_elimination(from.common_subgraph_elimination());
  }
  if (from.arithmetic_optimization() != 0) {
    set_arithmetic_optimization(from.arithmetic_optimization());
  }
  if (from.dependency_optimization() != 0) {
    set_dependency_optimization(from.dependency_optimization());
  }
  if (from.loop_optimization() != 0) {
    set_loop_optimization(from.loop_optimization());
  }
  if (from.function_optimization() != 0) {
    set_function_optimization(from.function_optimization());
  }
  if (from.debug_stripper() != 0) {
    set_debug_stripper(from.debug_stripper());
  }
  if (from.disable_model_pruning() != 0) {
    set_disable_model_pruning(from.disable_model_pruning());
  }
  if (from.scoped_allocator_optimization() != 0) {
    set_scoped_allocator_optimization(from.scoped_allocator_optimization());
  }
  if (from.pin_to_host_optimization() != 0) {
    set_pin_to_host_optimization(from.pin_to_host_optimization());
  }
  if (from.implementation_selector() != 0) {
    set_implementation_selector(from.implementation_selector());
  }
  if (from.auto_mixed_precision() != 0) {
    set_auto_mixed_precision(from.auto_mixed_precision());
  }
  if (from.auto_mixed_precision_mkl() != 0) {
    set_auto_mixed_precision_mkl(from.auto_mixed_precision_mkl());
  }
  if (from.disable_meta_optimizer() != 0) {
    set_disable_meta_optimizer(from.disable_meta_optimizer());
  }
  if (from.meta_optimizer_iterations() != 0) {
    set_meta_optimizer_iterations(from.meta_optimizer_iterations());
  }
  if (from.min_graph_nodes() != 0) {
    set_min_graph_nodes(from.min_graph_nodes());
  }
  if (from.memory_optimization() != 0) {
    set_memory_optimization(from.memory_optimization());
  }
  if (from.memory_optimizer_target_node_name_scope().size() > 0) {
    set_memory_optimizer_target_node_name_scope(from.memory_optimizer_target_node_name_scope());
  }
  if (from.meta_optimizer_timeout_ms() != 0) {
    set_meta_optimizer_timeout_ms(from.meta_optimizer_timeout_ms());
  }
  if (from.has_auto_parallel()) {
    mutable_auto_parallel()->::tensorflow::AutoParallelOptions::MergeFrom(from.auto_parallel());
  }
  if (from.fail_on_optimizer_errors() != 0) {
    set_fail_on_optimizer_errors(from.fail_on_optimizer_errors());
  }
  if (from.has_scoped_allocator_opts()) {
    mutable_scoped_allocator_opts()->::tensorflow::ScopedAllocatorOptions::MergeFrom(from.scoped_allocator_opts());
  }
  if (from.has_inter_optimizer_verifier_config()) {
    mutable_inter_optimizer_verifier_config()->::tensorflow::VerifierConfig::MergeFrom(from.inter_optimizer_verifier_config());
  }
  if (from.has_post_optimization_verifier_config()) {
    mutable_post_optimization_verifier_config()->::tensorflow::VerifierConfig::MergeFrom(from.post_optimization_verifier_config());
  }
}

void RewriterConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RewriterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewriterConfig::CopyFrom(const RewriterConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RewriterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewriterConfig::IsInitialized() const {

  return true;
}

void RewriterConfig::Swap(RewriterConfig* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RewriterConfig temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void RewriterConfig::UnsafeArenaSwap(RewriterConfig* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RewriterConfig::InternalSwap(RewriterConfig* other) {
  std::swap(layout_optimizer_, other->layout_optimizer_);
  std::swap(constant_folding_, other->constant_folding_);
  std::swap(shape_optimization_, other->shape_optimization_);
  std::swap(remapping_, other->remapping_);
  std::swap(common_subgraph_elimination_, other->common_subgraph_elimination_);
  std::swap(arithmetic_optimization_, other->arithmetic_optimization_);
  std::swap(dependency_optimization_, other->dependency_optimization_);
  std::swap(loop_optimization_, other->loop_optimization_);
  std::swap(function_optimization_, other->function_optimization_);
  std::swap(debug_stripper_, other->debug_stripper_);
  std::swap(disable_model_pruning_, other->disable_model_pruning_);
  std::swap(scoped_allocator_optimization_, other->scoped_allocator_optimization_);
  std::swap(pin_to_host_optimization_, other->pin_to_host_optimization_);
  std::swap(implementation_selector_, other->implementation_selector_);
  std::swap(auto_mixed_precision_, other->auto_mixed_precision_);
  std::swap(auto_mixed_precision_mkl_, other->auto_mixed_precision_mkl_);
  std::swap(disable_meta_optimizer_, other->disable_meta_optimizer_);
  std::swap(meta_optimizer_iterations_, other->meta_optimizer_iterations_);
  std::swap(min_graph_nodes_, other->min_graph_nodes_);
  std::swap(memory_optimization_, other->memory_optimization_);
  memory_optimizer_target_node_name_scope_.Swap(&other->memory_optimizer_target_node_name_scope_);
  std::swap(meta_optimizer_timeout_ms_, other->meta_optimizer_timeout_ms_);
  std::swap(auto_parallel_, other->auto_parallel_);
  std::swap(fail_on_optimizer_errors_, other->fail_on_optimizer_errors_);
  std::swap(scoped_allocator_opts_, other->scoped_allocator_opts_);
  optimizers_.UnsafeArenaSwap(&other->optimizers_);
  custom_optimizers_.UnsafeArenaSwap(&other->custom_optimizers_);
  std::swap(inter_optimizer_verifier_config_, other->inter_optimizer_verifier_config_);
  std::swap(post_optimization_verifier_config_, other->post_optimization_verifier_config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RewriterConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewriterConfig_descriptor_;
  metadata.reflection = RewriterConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RewriterConfig_CustomGraphOptimizer

// optional string name = 1;
void RewriterConfig_CustomGraphOptimizer::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& RewriterConfig_CustomGraphOptimizer::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.CustomGraphOptimizer.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RewriterConfig_CustomGraphOptimizer::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.CustomGraphOptimizer.name)
}
 void RewriterConfig_CustomGraphOptimizer::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.RewriterConfig.CustomGraphOptimizer.name)
}
 void RewriterConfig_CustomGraphOptimizer::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.RewriterConfig.CustomGraphOptimizer.name)
}
 ::std::string* RewriterConfig_CustomGraphOptimizer::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.RewriterConfig.CustomGraphOptimizer.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* RewriterConfig_CustomGraphOptimizer::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.RewriterConfig.CustomGraphOptimizer.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* RewriterConfig_CustomGraphOptimizer::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RewriterConfig.CustomGraphOptimizer.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void RewriterConfig_CustomGraphOptimizer::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RewriterConfig.CustomGraphOptimizer.name)
}
 void RewriterConfig_CustomGraphOptimizer::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RewriterConfig.CustomGraphOptimizer.name)
}

// map<string, .tensorflow.AttrValue> parameter_map = 2;
int RewriterConfig_CustomGraphOptimizer::parameter_map_size() const {
  return parameter_map_.size();
}
void RewriterConfig_CustomGraphOptimizer::clear_parameter_map() {
  parameter_map_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >&
RewriterConfig_CustomGraphOptimizer::parameter_map() const {
  // @@protoc_insertion_point(field_map:tensorflow.RewriterConfig.CustomGraphOptimizer.parameter_map)
  return parameter_map_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >*
RewriterConfig_CustomGraphOptimizer::mutable_parameter_map() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.RewriterConfig.CustomGraphOptimizer.parameter_map)
  return parameter_map_.MutableMap();
}

// -------------------------------------------------------------------

// RewriterConfig

// optional .tensorflow.RewriterConfig.Toggle layout_optimizer = 1;
void RewriterConfig::clear_layout_optimizer() {
  layout_optimizer_ = 0;
}
 ::tensorflow::RewriterConfig_Toggle RewriterConfig::layout_optimizer() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.layout_optimizer)
  return static_cast< ::tensorflow::RewriterConfig_Toggle >(layout_optimizer_);
}
 void RewriterConfig::set_layout_optimizer(::tensorflow::RewriterConfig_Toggle value) {
  
  layout_optimizer_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.layout_optimizer)
}

// optional .tensorflow.RewriterConfig.Toggle constant_folding = 3;
void RewriterConfig::clear_constant_folding() {
  constant_folding_ = 0;
}
 ::tensorflow::RewriterConfig_Toggle RewriterConfig::constant_folding() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.constant_folding)
  return static_cast< ::tensorflow::RewriterConfig_Toggle >(constant_folding_);
}
 void RewriterConfig::set_constant_folding(::tensorflow::RewriterConfig_Toggle value) {
  
  constant_folding_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.constant_folding)
}

// optional .tensorflow.RewriterConfig.Toggle shape_optimization = 13;
void RewriterConfig::clear_shape_optimization() {
  shape_optimization_ = 0;
}
 ::tensorflow::RewriterConfig_Toggle RewriterConfig::shape_optimization() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.shape_optimization)
  return static_cast< ::tensorflow::RewriterConfig_Toggle >(shape_optimization_);
}
 void RewriterConfig::set_shape_optimization(::tensorflow::RewriterConfig_Toggle value) {
  
  shape_optimization_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.shape_optimization)
}

// optional .tensorflow.RewriterConfig.Toggle remapping = 14;
void RewriterConfig::clear_remapping() {
  remapping_ = 0;
}
 ::tensorflow::RewriterConfig_Toggle RewriterConfig::remapping() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.remapping)
  return static_cast< ::tensorflow::RewriterConfig_Toggle >(remapping_);
}
 void RewriterConfig::set_remapping(::tensorflow::RewriterConfig_Toggle value) {
  
  remapping_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.remapping)
}

// optional .tensorflow.RewriterConfig.Toggle common_subgraph_elimination = 24;
void RewriterConfig::clear_common_subgraph_elimination() {
  common_subgraph_elimination_ = 0;
}
 ::tensorflow::RewriterConfig_Toggle RewriterConfig::common_subgraph_elimination() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.common_subgraph_elimination)
  return static_cast< ::tensorflow::RewriterConfig_Toggle >(common_subgraph_elimination_);
}
 void RewriterConfig::set_common_subgraph_elimination(::tensorflow::RewriterConfig_Toggle value) {
  
  common_subgraph_elimination_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.common_subgraph_elimination)
}

// optional .tensorflow.RewriterConfig.Toggle arithmetic_optimization = 7;
void RewriterConfig::clear_arithmetic_optimization() {
  arithmetic_optimization_ = 0;
}
 ::tensorflow::RewriterConfig_Toggle RewriterConfig::arithmetic_optimization() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.arithmetic_optimization)
  return static_cast< ::tensorflow::RewriterConfig_Toggle >(arithmetic_optimization_);
}
 void RewriterConfig::set_arithmetic_optimization(::tensorflow::RewriterConfig_Toggle value) {
  
  arithmetic_optimization_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.arithmetic_optimization)
}

// optional .tensorflow.RewriterConfig.Toggle dependency_optimization = 8;
void RewriterConfig::clear_dependency_optimization() {
  dependency_optimization_ = 0;
}
 ::tensorflow::RewriterConfig_Toggle RewriterConfig::dependency_optimization() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.dependency_optimization)
  return static_cast< ::tensorflow::RewriterConfig_Toggle >(dependency_optimization_);
}
 void RewriterConfig::set_dependency_optimization(::tensorflow::RewriterConfig_Toggle value) {
  
  dependency_optimization_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.dependency_optimization)
}

// optional .tensorflow.RewriterConfig.Toggle loop_optimization = 9;
void RewriterConfig::clear_loop_optimization() {
  loop_optimization_ = 0;
}
 ::tensorflow::RewriterConfig_Toggle RewriterConfig::loop_optimization() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.loop_optimization)
  return static_cast< ::tensorflow::RewriterConfig_Toggle >(loop_optimization_);
}
 void RewriterConfig::set_loop_optimization(::tensorflow::RewriterConfig_Toggle value) {
  
  loop_optimization_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.loop_optimization)
}

// optional .tensorflow.RewriterConfig.Toggle function_optimization = 10;
void RewriterConfig::clear_function_optimization() {
  function_optimization_ = 0;
}
 ::tensorflow::RewriterConfig_Toggle RewriterConfig::function_optimization() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.function_optimization)
  return static_cast< ::tensorflow::RewriterConfig_Toggle >(function_optimization_);
}
 void RewriterConfig::set_function_optimization(::tensorflow::RewriterConfig_Toggle value) {
  
  function_optimization_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.function_optimization)
}

// optional .tensorflow.RewriterConfig.Toggle debug_stripper = 11;
void RewriterConfig::clear_debug_stripper() {
  debug_stripper_ = 0;
}
 ::tensorflow::RewriterConfig_Toggle RewriterConfig::debug_stripper() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.debug_stripper)
  return static_cast< ::tensorflow::RewriterConfig_Toggle >(debug_stripper_);
}
 void RewriterConfig::set_debug_stripper(::tensorflow::RewriterConfig_Toggle value) {
  
  debug_stripper_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.debug_stripper)
}

// optional bool disable_model_pruning = 2;
void RewriterConfig::clear_disable_model_pruning() {
  disable_model_pruning_ = false;
}
 bool RewriterConfig::disable_model_pruning() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.disable_model_pruning)
  return disable_model_pruning_;
}
 void RewriterConfig::set_disable_model_pruning(bool value) {
  
  disable_model_pruning_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.disable_model_pruning)
}

// optional .tensorflow.RewriterConfig.Toggle scoped_allocator_optimization = 15;
void RewriterConfig::clear_scoped_allocator_optimization() {
  scoped_allocator_optimization_ = 0;
}
 ::tensorflow::RewriterConfig_Toggle RewriterConfig::scoped_allocator_optimization() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.scoped_allocator_optimization)
  return static_cast< ::tensorflow::RewriterConfig_Toggle >(scoped_allocator_optimization_);
}
 void RewriterConfig::set_scoped_allocator_optimization(::tensorflow::RewriterConfig_Toggle value) {
  
  scoped_allocator_optimization_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.scoped_allocator_optimization)
}

// optional .tensorflow.RewriterConfig.Toggle pin_to_host_optimization = 18;
void RewriterConfig::clear_pin_to_host_optimization() {
  pin_to_host_optimization_ = 0;
}
 ::tensorflow::RewriterConfig_Toggle RewriterConfig::pin_to_host_optimization() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.pin_to_host_optimization)
  return static_cast< ::tensorflow::RewriterConfig_Toggle >(pin_to_host_optimization_);
}
 void RewriterConfig::set_pin_to_host_optimization(::tensorflow::RewriterConfig_Toggle value) {
  
  pin_to_host_optimization_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.pin_to_host_optimization)
}

// optional .tensorflow.RewriterConfig.Toggle implementation_selector = 22;
void RewriterConfig::clear_implementation_selector() {
  implementation_selector_ = 0;
}
 ::tensorflow::RewriterConfig_Toggle RewriterConfig::implementation_selector() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.implementation_selector)
  return static_cast< ::tensorflow::RewriterConfig_Toggle >(implementation_selector_);
}
 void RewriterConfig::set_implementation_selector(::tensorflow::RewriterConfig_Toggle value) {
  
  implementation_selector_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.implementation_selector)
}

// optional .tensorflow.RewriterConfig.Toggle auto_mixed_precision = 23;
void RewriterConfig::clear_auto_mixed_precision() {
  auto_mixed_precision_ = 0;
}
 ::tensorflow::RewriterConfig_Toggle RewriterConfig::auto_mixed_precision() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.auto_mixed_precision)
  return static_cast< ::tensorflow::RewriterConfig_Toggle >(auto_mixed_precision_);
}
 void RewriterConfig::set_auto_mixed_precision(::tensorflow::RewriterConfig_Toggle value) {
  
  auto_mixed_precision_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.auto_mixed_precision)
}

// optional .tensorflow.RewriterConfig.Toggle auto_mixed_precision_mkl = 25;
void RewriterConfig::clear_auto_mixed_precision_mkl() {
  auto_mixed_precision_mkl_ = 0;
}
 ::tensorflow::RewriterConfig_Toggle RewriterConfig::auto_mixed_precision_mkl() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.auto_mixed_precision_mkl)
  return static_cast< ::tensorflow::RewriterConfig_Toggle >(auto_mixed_precision_mkl_);
}
 void RewriterConfig::set_auto_mixed_precision_mkl(::tensorflow::RewriterConfig_Toggle value) {
  
  auto_mixed_precision_mkl_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.auto_mixed_precision_mkl)
}

// optional bool disable_meta_optimizer = 19;
void RewriterConfig::clear_disable_meta_optimizer() {
  disable_meta_optimizer_ = false;
}
 bool RewriterConfig::disable_meta_optimizer() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.disable_meta_optimizer)
  return disable_meta_optimizer_;
}
 void RewriterConfig::set_disable_meta_optimizer(bool value) {
  
  disable_meta_optimizer_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.disable_meta_optimizer)
}

// optional .tensorflow.RewriterConfig.NumIterationsType meta_optimizer_iterations = 12;
void RewriterConfig::clear_meta_optimizer_iterations() {
  meta_optimizer_iterations_ = 0;
}
 ::tensorflow::RewriterConfig_NumIterationsType RewriterConfig::meta_optimizer_iterations() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.meta_optimizer_iterations)
  return static_cast< ::tensorflow::RewriterConfig_NumIterationsType >(meta_optimizer_iterations_);
}
 void RewriterConfig::set_meta_optimizer_iterations(::tensorflow::RewriterConfig_NumIterationsType value) {
  
  meta_optimizer_iterations_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.meta_optimizer_iterations)
}

// optional int32 min_graph_nodes = 17;
void RewriterConfig::clear_min_graph_nodes() {
  min_graph_nodes_ = 0;
}
 ::google::protobuf::int32 RewriterConfig::min_graph_nodes() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.min_graph_nodes)
  return min_graph_nodes_;
}
 void RewriterConfig::set_min_graph_nodes(::google::protobuf::int32 value) {
  
  min_graph_nodes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.min_graph_nodes)
}

// optional .tensorflow.RewriterConfig.MemOptType memory_optimization = 4;
void RewriterConfig::clear_memory_optimization() {
  memory_optimization_ = 0;
}
 ::tensorflow::RewriterConfig_MemOptType RewriterConfig::memory_optimization() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.memory_optimization)
  return static_cast< ::tensorflow::RewriterConfig_MemOptType >(memory_optimization_);
}
 void RewriterConfig::set_memory_optimization(::tensorflow::RewriterConfig_MemOptType value) {
  
  memory_optimization_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.memory_optimization)
}

// optional string memory_optimizer_target_node_name_scope = 6;
void RewriterConfig::clear_memory_optimizer_target_node_name_scope() {
  memory_optimizer_target_node_name_scope_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& RewriterConfig::memory_optimizer_target_node_name_scope() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope)
  return memory_optimizer_target_node_name_scope_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RewriterConfig::set_memory_optimizer_target_node_name_scope(const ::std::string& value) {
  
  memory_optimizer_target_node_name_scope_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope)
}
 void RewriterConfig::set_memory_optimizer_target_node_name_scope(const char* value) {
  
  memory_optimizer_target_node_name_scope_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope)
}
 void RewriterConfig::set_memory_optimizer_target_node_name_scope(const char* value,
    size_t size) {
  
  memory_optimizer_target_node_name_scope_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope)
}
 ::std::string* RewriterConfig::mutable_memory_optimizer_target_node_name_scope() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope)
  return memory_optimizer_target_node_name_scope_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* RewriterConfig::release_memory_optimizer_target_node_name_scope() {
  // @@protoc_insertion_point(field_release:tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope)
  
  return memory_optimizer_target_node_name_scope_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* RewriterConfig::unsafe_arena_release_memory_optimizer_target_node_name_scope() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return memory_optimizer_target_node_name_scope_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void RewriterConfig::set_allocated_memory_optimizer_target_node_name_scope(::std::string* memory_optimizer_target_node_name_scope) {
  if (memory_optimizer_target_node_name_scope != NULL) {
    
  } else {
    
  }
  memory_optimizer_target_node_name_scope_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), memory_optimizer_target_node_name_scope,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope)
}
 void RewriterConfig::unsafe_arena_set_allocated_memory_optimizer_target_node_name_scope(
    ::std::string* memory_optimizer_target_node_name_scope) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (memory_optimizer_target_node_name_scope != NULL) {
    
  } else {
    
  }
  memory_optimizer_target_node_name_scope_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      memory_optimizer_target_node_name_scope, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope)
}

// optional int64 meta_optimizer_timeout_ms = 20;
void RewriterConfig::clear_meta_optimizer_timeout_ms() {
  meta_optimizer_timeout_ms_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RewriterConfig::meta_optimizer_timeout_ms() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.meta_optimizer_timeout_ms)
  return meta_optimizer_timeout_ms_;
}
 void RewriterConfig::set_meta_optimizer_timeout_ms(::google::protobuf::int64 value) {
  
  meta_optimizer_timeout_ms_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.meta_optimizer_timeout_ms)
}

// optional .tensorflow.AutoParallelOptions auto_parallel = 5;
bool RewriterConfig::has_auto_parallel() const {
  return !_is_default_instance_ && auto_parallel_ != NULL;
}
void RewriterConfig::clear_auto_parallel() {
  if (GetArenaNoVirtual() == NULL && auto_parallel_ != NULL) delete auto_parallel_;
  auto_parallel_ = NULL;
}
const ::tensorflow::AutoParallelOptions& RewriterConfig::auto_parallel() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.auto_parallel)
  return auto_parallel_ != NULL ? *auto_parallel_ : *default_instance_->auto_parallel_;
}
::tensorflow::AutoParallelOptions* RewriterConfig::mutable_auto_parallel() {
  
  if (auto_parallel_ == NULL) {
    _slow_mutable_auto_parallel();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RewriterConfig.auto_parallel)
  return auto_parallel_;
}
::tensorflow::AutoParallelOptions* RewriterConfig::release_auto_parallel() {
  // @@protoc_insertion_point(field_release:tensorflow.RewriterConfig.auto_parallel)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_auto_parallel();
  } else {
    ::tensorflow::AutoParallelOptions* temp = auto_parallel_;
    auto_parallel_ = NULL;
    return temp;
  }
}
 void RewriterConfig::set_allocated_auto_parallel(::tensorflow::AutoParallelOptions* auto_parallel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete auto_parallel_;
  }
  if (auto_parallel != NULL) {
    _slow_set_allocated_auto_parallel(message_arena, &auto_parallel);
  }
  auto_parallel_ = auto_parallel;
  if (auto_parallel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RewriterConfig.auto_parallel)
}

// optional bool fail_on_optimizer_errors = 21;
void RewriterConfig::clear_fail_on_optimizer_errors() {
  fail_on_optimizer_errors_ = false;
}
 bool RewriterConfig::fail_on_optimizer_errors() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.fail_on_optimizer_errors)
  return fail_on_optimizer_errors_;
}
 void RewriterConfig::set_fail_on_optimizer_errors(bool value) {
  
  fail_on_optimizer_errors_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.fail_on_optimizer_errors)
}

// optional .tensorflow.ScopedAllocatorOptions scoped_allocator_opts = 16;
bool RewriterConfig::has_scoped_allocator_opts() const {
  return !_is_default_instance_ && scoped_allocator_opts_ != NULL;
}
void RewriterConfig::clear_scoped_allocator_opts() {
  if (GetArenaNoVirtual() == NULL && scoped_allocator_opts_ != NULL) delete scoped_allocator_opts_;
  scoped_allocator_opts_ = NULL;
}
const ::tensorflow::ScopedAllocatorOptions& RewriterConfig::scoped_allocator_opts() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.scoped_allocator_opts)
  return scoped_allocator_opts_ != NULL ? *scoped_allocator_opts_ : *default_instance_->scoped_allocator_opts_;
}
::tensorflow::ScopedAllocatorOptions* RewriterConfig::mutable_scoped_allocator_opts() {
  
  if (scoped_allocator_opts_ == NULL) {
    _slow_mutable_scoped_allocator_opts();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RewriterConfig.scoped_allocator_opts)
  return scoped_allocator_opts_;
}
::tensorflow::ScopedAllocatorOptions* RewriterConfig::release_scoped_allocator_opts() {
  // @@protoc_insertion_point(field_release:tensorflow.RewriterConfig.scoped_allocator_opts)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_scoped_allocator_opts();
  } else {
    ::tensorflow::ScopedAllocatorOptions* temp = scoped_allocator_opts_;
    scoped_allocator_opts_ = NULL;
    return temp;
  }
}
 void RewriterConfig::set_allocated_scoped_allocator_opts(::tensorflow::ScopedAllocatorOptions* scoped_allocator_opts) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scoped_allocator_opts_;
  }
  if (scoped_allocator_opts != NULL) {
    _slow_set_allocated_scoped_allocator_opts(message_arena, &scoped_allocator_opts);
  }
  scoped_allocator_opts_ = scoped_allocator_opts;
  if (scoped_allocator_opts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RewriterConfig.scoped_allocator_opts)
}

// repeated string optimizers = 100;
int RewriterConfig::optimizers_size() const {
  return optimizers_.size();
}
void RewriterConfig::clear_optimizers() {
  optimizers_.Clear();
}
 const ::std::string& RewriterConfig::optimizers(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.optimizers)
  return optimizers_.Get(index);
}
 ::std::string* RewriterConfig::mutable_optimizers(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.RewriterConfig.optimizers)
  return optimizers_.Mutable(index);
}
 void RewriterConfig::set_optimizers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.optimizers)
  optimizers_.Mutable(index)->assign(value);
}
 void RewriterConfig::set_optimizers(int index, const char* value) {
  optimizers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.RewriterConfig.optimizers)
}
 void RewriterConfig::set_optimizers(int index, const char* value, size_t size) {
  optimizers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.RewriterConfig.optimizers)
}
 ::std::string* RewriterConfig::add_optimizers() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.RewriterConfig.optimizers)
  return optimizers_.Add();
}
 void RewriterConfig::add_optimizers(const ::std::string& value) {
  optimizers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.RewriterConfig.optimizers)
}
 void RewriterConfig::add_optimizers(const char* value) {
  optimizers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.RewriterConfig.optimizers)
}
 void RewriterConfig::add_optimizers(const char* value, size_t size) {
  optimizers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.RewriterConfig.optimizers)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
RewriterConfig::optimizers() const {
  // @@protoc_insertion_point(field_list:tensorflow.RewriterConfig.optimizers)
  return optimizers_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
RewriterConfig::mutable_optimizers() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.RewriterConfig.optimizers)
  return &optimizers_;
}

// repeated .tensorflow.RewriterConfig.CustomGraphOptimizer custom_optimizers = 200;
int RewriterConfig::custom_optimizers_size() const {
  return custom_optimizers_.size();
}
void RewriterConfig::clear_custom_optimizers() {
  custom_optimizers_.Clear();
}
const ::tensorflow::RewriterConfig_CustomGraphOptimizer& RewriterConfig::custom_optimizers(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.custom_optimizers)
  return custom_optimizers_.Get(index);
}
::tensorflow::RewriterConfig_CustomGraphOptimizer* RewriterConfig::mutable_custom_optimizers(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.RewriterConfig.custom_optimizers)
  return custom_optimizers_.Mutable(index);
}
::tensorflow::RewriterConfig_CustomGraphOptimizer* RewriterConfig::add_custom_optimizers() {
  // @@protoc_insertion_point(field_add:tensorflow.RewriterConfig.custom_optimizers)
  return custom_optimizers_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::RewriterConfig_CustomGraphOptimizer >*
RewriterConfig::mutable_custom_optimizers() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.RewriterConfig.custom_optimizers)
  return &custom_optimizers_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::RewriterConfig_CustomGraphOptimizer >&
RewriterConfig::custom_optimizers() const {
  // @@protoc_insertion_point(field_list:tensorflow.RewriterConfig.custom_optimizers)
  return custom_optimizers_;
}

// optional .tensorflow.VerifierConfig inter_optimizer_verifier_config = 300;
bool RewriterConfig::has_inter_optimizer_verifier_config() const {
  return !_is_default_instance_ && inter_optimizer_verifier_config_ != NULL;
}
void RewriterConfig::clear_inter_optimizer_verifier_config() {
  if (GetArenaNoVirtual() == NULL && inter_optimizer_verifier_config_ != NULL) delete inter_optimizer_verifier_config_;
  inter_optimizer_verifier_config_ = NULL;
}
const ::tensorflow::VerifierConfig& RewriterConfig::inter_optimizer_verifier_config() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.inter_optimizer_verifier_config)
  return inter_optimizer_verifier_config_ != NULL ? *inter_optimizer_verifier_config_ : *default_instance_->inter_optimizer_verifier_config_;
}
::tensorflow::VerifierConfig* RewriterConfig::mutable_inter_optimizer_verifier_config() {
  
  if (inter_optimizer_verifier_config_ == NULL) {
    _slow_mutable_inter_optimizer_verifier_config();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RewriterConfig.inter_optimizer_verifier_config)
  return inter_optimizer_verifier_config_;
}
::tensorflow::VerifierConfig* RewriterConfig::release_inter_optimizer_verifier_config() {
  // @@protoc_insertion_point(field_release:tensorflow.RewriterConfig.inter_optimizer_verifier_config)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_inter_optimizer_verifier_config();
  } else {
    ::tensorflow::VerifierConfig* temp = inter_optimizer_verifier_config_;
    inter_optimizer_verifier_config_ = NULL;
    return temp;
  }
}
 void RewriterConfig::set_allocated_inter_optimizer_verifier_config(::tensorflow::VerifierConfig* inter_optimizer_verifier_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete inter_optimizer_verifier_config_;
  }
  if (inter_optimizer_verifier_config != NULL) {
    _slow_set_allocated_inter_optimizer_verifier_config(message_arena, &inter_optimizer_verifier_config);
  }
  inter_optimizer_verifier_config_ = inter_optimizer_verifier_config;
  if (inter_optimizer_verifier_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RewriterConfig.inter_optimizer_verifier_config)
}

// optional .tensorflow.VerifierConfig post_optimization_verifier_config = 301;
bool RewriterConfig::has_post_optimization_verifier_config() const {
  return !_is_default_instance_ && post_optimization_verifier_config_ != NULL;
}
void RewriterConfig::clear_post_optimization_verifier_config() {
  if (GetArenaNoVirtual() == NULL && post_optimization_verifier_config_ != NULL) delete post_optimization_verifier_config_;
  post_optimization_verifier_config_ = NULL;
}
const ::tensorflow::VerifierConfig& RewriterConfig::post_optimization_verifier_config() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.post_optimization_verifier_config)
  return post_optimization_verifier_config_ != NULL ? *post_optimization_verifier_config_ : *default_instance_->post_optimization_verifier_config_;
}
::tensorflow::VerifierConfig* RewriterConfig::mutable_post_optimization_verifier_config() {
  
  if (post_optimization_verifier_config_ == NULL) {
    _slow_mutable_post_optimization_verifier_config();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RewriterConfig.post_optimization_verifier_config)
  return post_optimization_verifier_config_;
}
::tensorflow::VerifierConfig* RewriterConfig::release_post_optimization_verifier_config() {
  // @@protoc_insertion_point(field_release:tensorflow.RewriterConfig.post_optimization_verifier_config)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_post_optimization_verifier_config();
  } else {
    ::tensorflow::VerifierConfig* temp = post_optimization_verifier_config_;
    post_optimization_verifier_config_ = NULL;
    return temp;
  }
}
 void RewriterConfig::set_allocated_post_optimization_verifier_config(::tensorflow::VerifierConfig* post_optimization_verifier_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete post_optimization_verifier_config_;
  }
  if (post_optimization_verifier_config != NULL) {
    _slow_set_allocated_post_optimization_verifier_config(message_arena, &post_optimization_verifier_config);
  }
  post_optimization_verifier_config_ = post_optimization_verifier_config;
  if (post_optimization_verifier_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RewriterConfig.post_optimization_verifier_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
