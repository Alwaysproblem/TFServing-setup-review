// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/bfc_memory_map.proto

#ifndef PROTOBUF_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto__INCLUDED
#define PROTOBUF_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto();
void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto();
void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto();

class BinSummary;
class MemAllocatorStats;
class MemChunk;
class MemoryDump;
class SnapShot;

// ===================================================================

class MemAllocatorStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.MemAllocatorStats) */ {
 public:
  MemAllocatorStats();
  virtual ~MemAllocatorStats();

  MemAllocatorStats(const MemAllocatorStats& from);

  inline MemAllocatorStats& operator=(const MemAllocatorStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MemAllocatorStats& default_instance();

  void Swap(MemAllocatorStats* other);

  // implements Message ----------------------------------------------

  inline MemAllocatorStats* New() const { return New(NULL); }

  MemAllocatorStats* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MemAllocatorStats& from);
  void MergeFrom(const MemAllocatorStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MemAllocatorStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 num_allocs = 1;
  void clear_num_allocs();
  static const int kNumAllocsFieldNumber = 1;
  ::google::protobuf::int64 num_allocs() const;
  void set_num_allocs(::google::protobuf::int64 value);

  // optional int64 bytes_in_use = 2;
  void clear_bytes_in_use();
  static const int kBytesInUseFieldNumber = 2;
  ::google::protobuf::int64 bytes_in_use() const;
  void set_bytes_in_use(::google::protobuf::int64 value);

  // optional int64 peak_bytes_in_use = 3;
  void clear_peak_bytes_in_use();
  static const int kPeakBytesInUseFieldNumber = 3;
  ::google::protobuf::int64 peak_bytes_in_use() const;
  void set_peak_bytes_in_use(::google::protobuf::int64 value);

  // optional int64 largest_alloc_size = 4;
  void clear_largest_alloc_size();
  static const int kLargestAllocSizeFieldNumber = 4;
  ::google::protobuf::int64 largest_alloc_size() const;
  void set_largest_alloc_size(::google::protobuf::int64 value);

  // optional float fragmentation_metric = 5;
  void clear_fragmentation_metric();
  static const int kFragmentationMetricFieldNumber = 5;
  float fragmentation_metric() const;
  void set_fragmentation_metric(float value);

  // @@protoc_insertion_point(class_scope:tensorflow.MemAllocatorStats)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 num_allocs_;
  ::google::protobuf::int64 bytes_in_use_;
  ::google::protobuf::int64 peak_bytes_in_use_;
  ::google::protobuf::int64 largest_alloc_size_;
  float fragmentation_metric_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto();

  void InitAsDefaultInstance();
  static MemAllocatorStats* default_instance_;
};
// -------------------------------------------------------------------

class MemChunk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.MemChunk) */ {
 public:
  MemChunk();
  virtual ~MemChunk();

  MemChunk(const MemChunk& from);

  inline MemChunk& operator=(const MemChunk& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MemChunk& default_instance();

  void Swap(MemChunk* other);

  // implements Message ----------------------------------------------

  inline MemChunk* New() const { return New(NULL); }

  MemChunk* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MemChunk& from);
  void MergeFrom(const MemChunk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MemChunk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  ::google::protobuf::uint64 address() const;
  void set_address(::google::protobuf::uint64 value);

  // optional int64 size = 2;
  void clear_size();
  static const int kSizeFieldNumber = 2;
  ::google::protobuf::int64 size() const;
  void set_size(::google::protobuf::int64 value);

  // optional int64 requested_size = 3;
  void clear_requested_size();
  static const int kRequestedSizeFieldNumber = 3;
  ::google::protobuf::int64 requested_size() const;
  void set_requested_size(::google::protobuf::int64 value);

  // optional int32 bin = 4;
  void clear_bin();
  static const int kBinFieldNumber = 4;
  ::google::protobuf::int32 bin() const;
  void set_bin(::google::protobuf::int32 value);

  // optional string op_name = 5;
  void clear_op_name();
  static const int kOpNameFieldNumber = 5;
  const ::std::string& op_name() const;
  void set_op_name(const ::std::string& value);
  void set_op_name(const char* value);
  void set_op_name(const char* value, size_t size);
  ::std::string* mutable_op_name();
  ::std::string* release_op_name();
  void set_allocated_op_name(::std::string* op_name);

  // optional uint64 freed_at_count = 6;
  void clear_freed_at_count();
  static const int kFreedAtCountFieldNumber = 6;
  ::google::protobuf::uint64 freed_at_count() const;
  void set_freed_at_count(::google::protobuf::uint64 value);

  // optional uint64 action_count = 7;
  void clear_action_count();
  static const int kActionCountFieldNumber = 7;
  ::google::protobuf::uint64 action_count() const;
  void set_action_count(::google::protobuf::uint64 value);

  // optional bool in_use = 8;
  void clear_in_use();
  static const int kInUseFieldNumber = 8;
  bool in_use() const;
  void set_in_use(bool value);

  // optional uint64 step_id = 9;
  void clear_step_id();
  static const int kStepIdFieldNumber = 9;
  ::google::protobuf::uint64 step_id() const;
  void set_step_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:tensorflow.MemChunk)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 address_;
  ::google::protobuf::int64 size_;
  ::google::protobuf::int64 requested_size_;
  ::google::protobuf::internal::ArenaStringPtr op_name_;
  ::google::protobuf::uint64 freed_at_count_;
  ::google::protobuf::int32 bin_;
  bool in_use_;
  ::google::protobuf::uint64 action_count_;
  ::google::protobuf::uint64 step_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto();

  void InitAsDefaultInstance();
  static MemChunk* default_instance_;
};
// -------------------------------------------------------------------

class BinSummary : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.BinSummary) */ {
 public:
  BinSummary();
  virtual ~BinSummary();

  BinSummary(const BinSummary& from);

  inline BinSummary& operator=(const BinSummary& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BinSummary& default_instance();

  void Swap(BinSummary* other);

  // implements Message ----------------------------------------------

  inline BinSummary* New() const { return New(NULL); }

  BinSummary* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BinSummary& from);
  void MergeFrom(const BinSummary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BinSummary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 bin = 1;
  void clear_bin();
  static const int kBinFieldNumber = 1;
  ::google::protobuf::int32 bin() const;
  void set_bin(::google::protobuf::int32 value);

  // optional int64 total_bytes_in_use = 2;
  void clear_total_bytes_in_use();
  static const int kTotalBytesInUseFieldNumber = 2;
  ::google::protobuf::int64 total_bytes_in_use() const;
  void set_total_bytes_in_use(::google::protobuf::int64 value);

  // optional int64 total_bytes_in_bin = 3;
  void clear_total_bytes_in_bin();
  static const int kTotalBytesInBinFieldNumber = 3;
  ::google::protobuf::int64 total_bytes_in_bin() const;
  void set_total_bytes_in_bin(::google::protobuf::int64 value);

  // optional int64 total_chunks_in_use = 4;
  void clear_total_chunks_in_use();
  static const int kTotalChunksInUseFieldNumber = 4;
  ::google::protobuf::int64 total_chunks_in_use() const;
  void set_total_chunks_in_use(::google::protobuf::int64 value);

  // optional int64 total_chunks_in_bin = 5;
  void clear_total_chunks_in_bin();
  static const int kTotalChunksInBinFieldNumber = 5;
  ::google::protobuf::int64 total_chunks_in_bin() const;
  void set_total_chunks_in_bin(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:tensorflow.BinSummary)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 total_bytes_in_use_;
  ::google::protobuf::int64 total_bytes_in_bin_;
  ::google::protobuf::int64 total_chunks_in_use_;
  ::google::protobuf::int64 total_chunks_in_bin_;
  ::google::protobuf::int32 bin_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto();

  void InitAsDefaultInstance();
  static BinSummary* default_instance_;
};
// -------------------------------------------------------------------

class SnapShot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.SnapShot) */ {
 public:
  SnapShot();
  virtual ~SnapShot();

  SnapShot(const SnapShot& from);

  inline SnapShot& operator=(const SnapShot& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SnapShot& default_instance();

  void Swap(SnapShot* other);

  // implements Message ----------------------------------------------

  inline SnapShot* New() const { return New(NULL); }

  SnapShot* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SnapShot& from);
  void MergeFrom(const SnapShot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SnapShot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 action_count = 1;
  void clear_action_count();
  static const int kActionCountFieldNumber = 1;
  ::google::protobuf::uint64 action_count() const;
  void set_action_count(::google::protobuf::uint64 value);

  // optional int64 size = 2;
  void clear_size();
  static const int kSizeFieldNumber = 2;
  ::google::protobuf::int64 size() const;
  void set_size(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:tensorflow.SnapShot)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 action_count_;
  ::google::protobuf::int64 size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto();

  void InitAsDefaultInstance();
  static SnapShot* default_instance_;
};
// -------------------------------------------------------------------

class MemoryDump : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.MemoryDump) */ {
 public:
  MemoryDump();
  virtual ~MemoryDump();

  MemoryDump(const MemoryDump& from);

  inline MemoryDump& operator=(const MemoryDump& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MemoryDump& default_instance();

  void Swap(MemoryDump* other);

  // implements Message ----------------------------------------------

  inline MemoryDump* New() const { return New(NULL); }

  MemoryDump* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MemoryDump& from);
  void MergeFrom(const MemoryDump& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MemoryDump* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string allocator_name = 1;
  void clear_allocator_name();
  static const int kAllocatorNameFieldNumber = 1;
  const ::std::string& allocator_name() const;
  void set_allocator_name(const ::std::string& value);
  void set_allocator_name(const char* value);
  void set_allocator_name(const char* value, size_t size);
  ::std::string* mutable_allocator_name();
  ::std::string* release_allocator_name();
  void set_allocated_allocator_name(::std::string* allocator_name);

  // repeated .tensorflow.BinSummary bin_summary = 2;
  int bin_summary_size() const;
  void clear_bin_summary();
  static const int kBinSummaryFieldNumber = 2;
  const ::tensorflow::BinSummary& bin_summary(int index) const;
  ::tensorflow::BinSummary* mutable_bin_summary(int index);
  ::tensorflow::BinSummary* add_bin_summary();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::BinSummary >*
      mutable_bin_summary();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::BinSummary >&
      bin_summary() const;

  // repeated .tensorflow.MemChunk chunk = 3;
  int chunk_size() const;
  void clear_chunk();
  static const int kChunkFieldNumber = 3;
  const ::tensorflow::MemChunk& chunk(int index) const;
  ::tensorflow::MemChunk* mutable_chunk(int index);
  ::tensorflow::MemChunk* add_chunk();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::MemChunk >*
      mutable_chunk();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::MemChunk >&
      chunk() const;

  // repeated .tensorflow.SnapShot snap_shot = 4;
  int snap_shot_size() const;
  void clear_snap_shot();
  static const int kSnapShotFieldNumber = 4;
  const ::tensorflow::SnapShot& snap_shot(int index) const;
  ::tensorflow::SnapShot* mutable_snap_shot(int index);
  ::tensorflow::SnapShot* add_snap_shot();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::SnapShot >*
      mutable_snap_shot();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::SnapShot >&
      snap_shot() const;

  // optional .tensorflow.MemAllocatorStats stats = 5;
  bool has_stats() const;
  void clear_stats();
  static const int kStatsFieldNumber = 5;
  const ::tensorflow::MemAllocatorStats& stats() const;
  ::tensorflow::MemAllocatorStats* mutable_stats();
  ::tensorflow::MemAllocatorStats* release_stats();
  void set_allocated_stats(::tensorflow::MemAllocatorStats* stats);

  // @@protoc_insertion_point(class_scope:tensorflow.MemoryDump)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr allocator_name_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::BinSummary > bin_summary_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::MemChunk > chunk_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::SnapShot > snap_shot_;
  ::tensorflow::MemAllocatorStats* stats_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto();

  void InitAsDefaultInstance();
  static MemoryDump* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MemAllocatorStats

// optional int64 num_allocs = 1;
inline void MemAllocatorStats::clear_num_allocs() {
  num_allocs_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MemAllocatorStats::num_allocs() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemAllocatorStats.num_allocs)
  return num_allocs_;
}
inline void MemAllocatorStats::set_num_allocs(::google::protobuf::int64 value) {
  
  num_allocs_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemAllocatorStats.num_allocs)
}

// optional int64 bytes_in_use = 2;
inline void MemAllocatorStats::clear_bytes_in_use() {
  bytes_in_use_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MemAllocatorStats::bytes_in_use() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemAllocatorStats.bytes_in_use)
  return bytes_in_use_;
}
inline void MemAllocatorStats::set_bytes_in_use(::google::protobuf::int64 value) {
  
  bytes_in_use_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemAllocatorStats.bytes_in_use)
}

// optional int64 peak_bytes_in_use = 3;
inline void MemAllocatorStats::clear_peak_bytes_in_use() {
  peak_bytes_in_use_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MemAllocatorStats::peak_bytes_in_use() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemAllocatorStats.peak_bytes_in_use)
  return peak_bytes_in_use_;
}
inline void MemAllocatorStats::set_peak_bytes_in_use(::google::protobuf::int64 value) {
  
  peak_bytes_in_use_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemAllocatorStats.peak_bytes_in_use)
}

// optional int64 largest_alloc_size = 4;
inline void MemAllocatorStats::clear_largest_alloc_size() {
  largest_alloc_size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MemAllocatorStats::largest_alloc_size() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemAllocatorStats.largest_alloc_size)
  return largest_alloc_size_;
}
inline void MemAllocatorStats::set_largest_alloc_size(::google::protobuf::int64 value) {
  
  largest_alloc_size_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemAllocatorStats.largest_alloc_size)
}

// optional float fragmentation_metric = 5;
inline void MemAllocatorStats::clear_fragmentation_metric() {
  fragmentation_metric_ = 0;
}
inline float MemAllocatorStats::fragmentation_metric() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemAllocatorStats.fragmentation_metric)
  return fragmentation_metric_;
}
inline void MemAllocatorStats::set_fragmentation_metric(float value) {
  
  fragmentation_metric_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemAllocatorStats.fragmentation_metric)
}

// -------------------------------------------------------------------

// MemChunk

// optional uint64 address = 1;
inline void MemChunk::clear_address() {
  address_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MemChunk::address() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemChunk.address)
  return address_;
}
inline void MemChunk::set_address(::google::protobuf::uint64 value) {
  
  address_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemChunk.address)
}

// optional int64 size = 2;
inline void MemChunk::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MemChunk::size() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemChunk.size)
  return size_;
}
inline void MemChunk::set_size(::google::protobuf::int64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemChunk.size)
}

// optional int64 requested_size = 3;
inline void MemChunk::clear_requested_size() {
  requested_size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MemChunk::requested_size() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemChunk.requested_size)
  return requested_size_;
}
inline void MemChunk::set_requested_size(::google::protobuf::int64 value) {
  
  requested_size_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemChunk.requested_size)
}

// optional int32 bin = 4;
inline void MemChunk::clear_bin() {
  bin_ = 0;
}
inline ::google::protobuf::int32 MemChunk::bin() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemChunk.bin)
  return bin_;
}
inline void MemChunk::set_bin(::google::protobuf::int32 value) {
  
  bin_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemChunk.bin)
}

// optional string op_name = 5;
inline void MemChunk::clear_op_name() {
  op_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MemChunk::op_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemChunk.op_name)
  return op_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MemChunk::set_op_name(const ::std::string& value) {
  
  op_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.MemChunk.op_name)
}
inline void MemChunk::set_op_name(const char* value) {
  
  op_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.MemChunk.op_name)
}
inline void MemChunk::set_op_name(const char* value, size_t size) {
  
  op_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.MemChunk.op_name)
}
inline ::std::string* MemChunk::mutable_op_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.MemChunk.op_name)
  return op_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MemChunk::release_op_name() {
  // @@protoc_insertion_point(field_release:tensorflow.MemChunk.op_name)
  
  return op_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MemChunk::set_allocated_op_name(::std::string* op_name) {
  if (op_name != NULL) {
    
  } else {
    
  }
  op_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), op_name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MemChunk.op_name)
}

// optional uint64 freed_at_count = 6;
inline void MemChunk::clear_freed_at_count() {
  freed_at_count_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MemChunk::freed_at_count() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemChunk.freed_at_count)
  return freed_at_count_;
}
inline void MemChunk::set_freed_at_count(::google::protobuf::uint64 value) {
  
  freed_at_count_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemChunk.freed_at_count)
}

// optional uint64 action_count = 7;
inline void MemChunk::clear_action_count() {
  action_count_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MemChunk::action_count() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemChunk.action_count)
  return action_count_;
}
inline void MemChunk::set_action_count(::google::protobuf::uint64 value) {
  
  action_count_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemChunk.action_count)
}

// optional bool in_use = 8;
inline void MemChunk::clear_in_use() {
  in_use_ = false;
}
inline bool MemChunk::in_use() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemChunk.in_use)
  return in_use_;
}
inline void MemChunk::set_in_use(bool value) {
  
  in_use_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemChunk.in_use)
}

// optional uint64 step_id = 9;
inline void MemChunk::clear_step_id() {
  step_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MemChunk::step_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemChunk.step_id)
  return step_id_;
}
inline void MemChunk::set_step_id(::google::protobuf::uint64 value) {
  
  step_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemChunk.step_id)
}

// -------------------------------------------------------------------

// BinSummary

// optional int32 bin = 1;
inline void BinSummary::clear_bin() {
  bin_ = 0;
}
inline ::google::protobuf::int32 BinSummary::bin() const {
  // @@protoc_insertion_point(field_get:tensorflow.BinSummary.bin)
  return bin_;
}
inline void BinSummary::set_bin(::google::protobuf::int32 value) {
  
  bin_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.BinSummary.bin)
}

// optional int64 total_bytes_in_use = 2;
inline void BinSummary::clear_total_bytes_in_use() {
  total_bytes_in_use_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BinSummary::total_bytes_in_use() const {
  // @@protoc_insertion_point(field_get:tensorflow.BinSummary.total_bytes_in_use)
  return total_bytes_in_use_;
}
inline void BinSummary::set_total_bytes_in_use(::google::protobuf::int64 value) {
  
  total_bytes_in_use_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.BinSummary.total_bytes_in_use)
}

// optional int64 total_bytes_in_bin = 3;
inline void BinSummary::clear_total_bytes_in_bin() {
  total_bytes_in_bin_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BinSummary::total_bytes_in_bin() const {
  // @@protoc_insertion_point(field_get:tensorflow.BinSummary.total_bytes_in_bin)
  return total_bytes_in_bin_;
}
inline void BinSummary::set_total_bytes_in_bin(::google::protobuf::int64 value) {
  
  total_bytes_in_bin_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.BinSummary.total_bytes_in_bin)
}

// optional int64 total_chunks_in_use = 4;
inline void BinSummary::clear_total_chunks_in_use() {
  total_chunks_in_use_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BinSummary::total_chunks_in_use() const {
  // @@protoc_insertion_point(field_get:tensorflow.BinSummary.total_chunks_in_use)
  return total_chunks_in_use_;
}
inline void BinSummary::set_total_chunks_in_use(::google::protobuf::int64 value) {
  
  total_chunks_in_use_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.BinSummary.total_chunks_in_use)
}

// optional int64 total_chunks_in_bin = 5;
inline void BinSummary::clear_total_chunks_in_bin() {
  total_chunks_in_bin_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BinSummary::total_chunks_in_bin() const {
  // @@protoc_insertion_point(field_get:tensorflow.BinSummary.total_chunks_in_bin)
  return total_chunks_in_bin_;
}
inline void BinSummary::set_total_chunks_in_bin(::google::protobuf::int64 value) {
  
  total_chunks_in_bin_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.BinSummary.total_chunks_in_bin)
}

// -------------------------------------------------------------------

// SnapShot

// optional uint64 action_count = 1;
inline void SnapShot::clear_action_count() {
  action_count_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SnapShot::action_count() const {
  // @@protoc_insertion_point(field_get:tensorflow.SnapShot.action_count)
  return action_count_;
}
inline void SnapShot::set_action_count(::google::protobuf::uint64 value) {
  
  action_count_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.SnapShot.action_count)
}

// optional int64 size = 2;
inline void SnapShot::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SnapShot::size() const {
  // @@protoc_insertion_point(field_get:tensorflow.SnapShot.size)
  return size_;
}
inline void SnapShot::set_size(::google::protobuf::int64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.SnapShot.size)
}

// -------------------------------------------------------------------

// MemoryDump

// optional string allocator_name = 1;
inline void MemoryDump::clear_allocator_name() {
  allocator_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MemoryDump::allocator_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryDump.allocator_name)
  return allocator_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MemoryDump::set_allocator_name(const ::std::string& value) {
  
  allocator_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.MemoryDump.allocator_name)
}
inline void MemoryDump::set_allocator_name(const char* value) {
  
  allocator_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.MemoryDump.allocator_name)
}
inline void MemoryDump::set_allocator_name(const char* value, size_t size) {
  
  allocator_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.MemoryDump.allocator_name)
}
inline ::std::string* MemoryDump::mutable_allocator_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryDump.allocator_name)
  return allocator_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MemoryDump::release_allocator_name() {
  // @@protoc_insertion_point(field_release:tensorflow.MemoryDump.allocator_name)
  
  return allocator_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MemoryDump::set_allocated_allocator_name(::std::string* allocator_name) {
  if (allocator_name != NULL) {
    
  } else {
    
  }
  allocator_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), allocator_name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MemoryDump.allocator_name)
}

// repeated .tensorflow.BinSummary bin_summary = 2;
inline int MemoryDump::bin_summary_size() const {
  return bin_summary_.size();
}
inline void MemoryDump::clear_bin_summary() {
  bin_summary_.Clear();
}
inline const ::tensorflow::BinSummary& MemoryDump::bin_summary(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryDump.bin_summary)
  return bin_summary_.Get(index);
}
inline ::tensorflow::BinSummary* MemoryDump::mutable_bin_summary(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryDump.bin_summary)
  return bin_summary_.Mutable(index);
}
inline ::tensorflow::BinSummary* MemoryDump::add_bin_summary() {
  // @@protoc_insertion_point(field_add:tensorflow.MemoryDump.bin_summary)
  return bin_summary_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::BinSummary >*
MemoryDump::mutable_bin_summary() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.MemoryDump.bin_summary)
  return &bin_summary_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::BinSummary >&
MemoryDump::bin_summary() const {
  // @@protoc_insertion_point(field_list:tensorflow.MemoryDump.bin_summary)
  return bin_summary_;
}

// repeated .tensorflow.MemChunk chunk = 3;
inline int MemoryDump::chunk_size() const {
  return chunk_.size();
}
inline void MemoryDump::clear_chunk() {
  chunk_.Clear();
}
inline const ::tensorflow::MemChunk& MemoryDump::chunk(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryDump.chunk)
  return chunk_.Get(index);
}
inline ::tensorflow::MemChunk* MemoryDump::mutable_chunk(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryDump.chunk)
  return chunk_.Mutable(index);
}
inline ::tensorflow::MemChunk* MemoryDump::add_chunk() {
  // @@protoc_insertion_point(field_add:tensorflow.MemoryDump.chunk)
  return chunk_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::MemChunk >*
MemoryDump::mutable_chunk() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.MemoryDump.chunk)
  return &chunk_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::MemChunk >&
MemoryDump::chunk() const {
  // @@protoc_insertion_point(field_list:tensorflow.MemoryDump.chunk)
  return chunk_;
}

// repeated .tensorflow.SnapShot snap_shot = 4;
inline int MemoryDump::snap_shot_size() const {
  return snap_shot_.size();
}
inline void MemoryDump::clear_snap_shot() {
  snap_shot_.Clear();
}
inline const ::tensorflow::SnapShot& MemoryDump::snap_shot(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryDump.snap_shot)
  return snap_shot_.Get(index);
}
inline ::tensorflow::SnapShot* MemoryDump::mutable_snap_shot(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryDump.snap_shot)
  return snap_shot_.Mutable(index);
}
inline ::tensorflow::SnapShot* MemoryDump::add_snap_shot() {
  // @@protoc_insertion_point(field_add:tensorflow.MemoryDump.snap_shot)
  return snap_shot_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::SnapShot >*
MemoryDump::mutable_snap_shot() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.MemoryDump.snap_shot)
  return &snap_shot_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::SnapShot >&
MemoryDump::snap_shot() const {
  // @@protoc_insertion_point(field_list:tensorflow.MemoryDump.snap_shot)
  return snap_shot_;
}

// optional .tensorflow.MemAllocatorStats stats = 5;
inline bool MemoryDump::has_stats() const {
  return !_is_default_instance_ && stats_ != NULL;
}
inline void MemoryDump::clear_stats() {
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) delete stats_;
  stats_ = NULL;
}
inline const ::tensorflow::MemAllocatorStats& MemoryDump::stats() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryDump.stats)
  return stats_ != NULL ? *stats_ : *default_instance_->stats_;
}
inline ::tensorflow::MemAllocatorStats* MemoryDump::mutable_stats() {
  
  if (stats_ == NULL) {
    stats_ = new ::tensorflow::MemAllocatorStats;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryDump.stats)
  return stats_;
}
inline ::tensorflow::MemAllocatorStats* MemoryDump::release_stats() {
  // @@protoc_insertion_point(field_release:tensorflow.MemoryDump.stats)
  
  ::tensorflow::MemAllocatorStats* temp = stats_;
  stats_ = NULL;
  return temp;
}
inline void MemoryDump::set_allocated_stats(::tensorflow::MemAllocatorStats* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MemoryDump.stats)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto__INCLUDED
