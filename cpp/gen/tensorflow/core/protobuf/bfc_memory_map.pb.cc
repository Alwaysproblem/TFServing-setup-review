// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/bfc_memory_map.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/protobuf/bfc_memory_map.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {

namespace {

const ::google::protobuf::Descriptor* MemAllocatorStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemAllocatorStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemChunk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemChunk_reflection_ = NULL;
const ::google::protobuf::Descriptor* BinSummary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BinSummary_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnapShot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapShot_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemoryDump_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemoryDump_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto() {
  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow/core/protobuf/bfc_memory_map.proto");
  GOOGLE_CHECK(file != NULL);
  MemAllocatorStats_descriptor_ = file->message_type(0);
  static const int MemAllocatorStats_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemAllocatorStats, num_allocs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemAllocatorStats, bytes_in_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemAllocatorStats, peak_bytes_in_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemAllocatorStats, largest_alloc_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemAllocatorStats, fragmentation_metric_),
  };
  MemAllocatorStats_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MemAllocatorStats_descriptor_,
      MemAllocatorStats::default_instance_,
      MemAllocatorStats_offsets_,
      -1,
      -1,
      -1,
      sizeof(MemAllocatorStats),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemAllocatorStats, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemAllocatorStats, _is_default_instance_));
  MemChunk_descriptor_ = file->message_type(1);
  static const int MemChunk_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemChunk, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemChunk, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemChunk, requested_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemChunk, bin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemChunk, op_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemChunk, freed_at_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemChunk, action_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemChunk, in_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemChunk, step_id_),
  };
  MemChunk_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MemChunk_descriptor_,
      MemChunk::default_instance_,
      MemChunk_offsets_,
      -1,
      -1,
      -1,
      sizeof(MemChunk),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemChunk, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemChunk, _is_default_instance_));
  BinSummary_descriptor_ = file->message_type(2);
  static const int BinSummary_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinSummary, bin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinSummary, total_bytes_in_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinSummary, total_bytes_in_bin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinSummary, total_chunks_in_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinSummary, total_chunks_in_bin_),
  };
  BinSummary_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BinSummary_descriptor_,
      BinSummary::default_instance_,
      BinSummary_offsets_,
      -1,
      -1,
      -1,
      sizeof(BinSummary),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinSummary, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinSummary, _is_default_instance_));
  SnapShot_descriptor_ = file->message_type(3);
  static const int SnapShot_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapShot, action_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapShot, size_),
  };
  SnapShot_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SnapShot_descriptor_,
      SnapShot::default_instance_,
      SnapShot_offsets_,
      -1,
      -1,
      -1,
      sizeof(SnapShot),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapShot, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapShot, _is_default_instance_));
  MemoryDump_descriptor_ = file->message_type(4);
  static const int MemoryDump_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryDump, allocator_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryDump, bin_summary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryDump, chunk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryDump, snap_shot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryDump, stats_),
  };
  MemoryDump_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MemoryDump_descriptor_,
      MemoryDump::default_instance_,
      MemoryDump_offsets_,
      -1,
      -1,
      -1,
      sizeof(MemoryDump),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryDump, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryDump, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MemAllocatorStats_descriptor_, &MemAllocatorStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MemChunk_descriptor_, &MemChunk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BinSummary_descriptor_, &BinSummary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SnapShot_descriptor_, &SnapShot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MemoryDump_descriptor_, &MemoryDump::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto() {
  delete MemAllocatorStats::default_instance_;
  delete MemAllocatorStats_reflection_;
  delete MemChunk::default_instance_;
  delete MemChunk_reflection_;
  delete BinSummary::default_instance_;
  delete BinSummary_reflection_;
  delete SnapShot::default_instance_;
  delete SnapShot_reflection_;
  delete MemoryDump::default_instance_;
  delete MemoryDump_reflection_;
}

void protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n-tensorflow/core/protobuf/bfc_memory_ma"
    "p.proto\022\ntensorflow\"\222\001\n\021MemAllocatorStat"
    "s\022\022\n\nnum_allocs\030\001 \001(\003\022\024\n\014bytes_in_use\030\002 "
    "\001(\003\022\031\n\021peak_bytes_in_use\030\003 \001(\003\022\032\n\022larges"
    "t_alloc_size\030\004 \001(\003\022\034\n\024fragmentation_metr"
    "ic\030\005 \001(\002\"\256\001\n\010MemChunk\022\017\n\007address\030\001 \001(\004\022\014"
    "\n\004size\030\002 \001(\003\022\026\n\016requested_size\030\003 \001(\003\022\013\n\003"
    "bin\030\004 \001(\005\022\017\n\007op_name\030\005 \001(\t\022\026\n\016freed_at_c"
    "ount\030\006 \001(\004\022\024\n\014action_count\030\007 \001(\004\022\016\n\006in_u"
    "se\030\010 \001(\010\022\017\n\007step_id\030\t \001(\004\"\213\001\n\nBinSummary"
    "\022\013\n\003bin\030\001 \001(\005\022\032\n\022total_bytes_in_use\030\002 \001("
    "\003\022\032\n\022total_bytes_in_bin\030\003 \001(\003\022\033\n\023total_c"
    "hunks_in_use\030\004 \001(\003\022\033\n\023total_chunks_in_bi"
    "n\030\005 \001(\003\".\n\010SnapShot\022\024\n\014action_count\030\001 \001("
    "\004\022\014\n\004size\030\002 \001(\003\"\315\001\n\nMemoryDump\022\026\n\016alloca"
    "tor_name\030\001 \001(\t\022+\n\013bin_summary\030\002 \003(\0132\026.te"
    "nsorflow.BinSummary\022#\n\005chunk\030\003 \003(\0132\024.ten"
    "sorflow.MemChunk\022\'\n\tsnap_shot\030\004 \003(\0132\024.te"
    "nsorflow.SnapShot\022,\n\005stats\030\005 \001(\0132\035.tenso"
    "rflow.MemAllocatorStatsBJZHgithub.com/te"
    "nsorflow/tensorflow/tensorflow/go/core/c"
    "ore_protos_go_protob\006proto3", 867);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/protobuf/bfc_memory_map.proto", &protobuf_RegisterTypes);
  MemAllocatorStats::default_instance_ = new MemAllocatorStats();
  MemChunk::default_instance_ = new MemChunk();
  BinSummary::default_instance_ = new BinSummary();
  SnapShot::default_instance_ = new SnapShot();
  MemoryDump::default_instance_ = new MemoryDump();
  MemAllocatorStats::default_instance_->InitAsDefaultInstance();
  MemChunk::default_instance_->InitAsDefaultInstance();
  BinSummary::default_instance_->InitAsDefaultInstance();
  SnapShot::default_instance_->InitAsDefaultInstance();
  MemoryDump::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto {
  StaticDescriptorInitializer_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto() {
    protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto();
  }
} static_descriptor_initializer_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemAllocatorStats::kNumAllocsFieldNumber;
const int MemAllocatorStats::kBytesInUseFieldNumber;
const int MemAllocatorStats::kPeakBytesInUseFieldNumber;
const int MemAllocatorStats::kLargestAllocSizeFieldNumber;
const int MemAllocatorStats::kFragmentationMetricFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemAllocatorStats::MemAllocatorStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.MemAllocatorStats)
}

void MemAllocatorStats::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MemAllocatorStats::MemAllocatorStats(const MemAllocatorStats& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.MemAllocatorStats)
}

void MemAllocatorStats::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  num_allocs_ = GOOGLE_LONGLONG(0);
  bytes_in_use_ = GOOGLE_LONGLONG(0);
  peak_bytes_in_use_ = GOOGLE_LONGLONG(0);
  largest_alloc_size_ = GOOGLE_LONGLONG(0);
  fragmentation_metric_ = 0;
}

MemAllocatorStats::~MemAllocatorStats() {
  // @@protoc_insertion_point(destructor:tensorflow.MemAllocatorStats)
  SharedDtor();
}

void MemAllocatorStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MemAllocatorStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemAllocatorStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemAllocatorStats_descriptor_;
}

const MemAllocatorStats& MemAllocatorStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto();
  return *default_instance_;
}

MemAllocatorStats* MemAllocatorStats::default_instance_ = NULL;

MemAllocatorStats* MemAllocatorStats::New(::google::protobuf::Arena* arena) const {
  MemAllocatorStats* n = new MemAllocatorStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MemAllocatorStats::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MemAllocatorStats)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MemAllocatorStats, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MemAllocatorStats*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(num_allocs_, fragmentation_metric_);

#undef ZR_HELPER_
#undef ZR_

}

bool MemAllocatorStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.MemAllocatorStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 num_allocs = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_allocs_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bytes_in_use;
        break;
      }

      // optional int64 bytes_in_use = 2;
      case 2: {
        if (tag == 16) {
         parse_bytes_in_use:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bytes_in_use_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_peak_bytes_in_use;
        break;
      }

      // optional int64 peak_bytes_in_use = 3;
      case 3: {
        if (tag == 24) {
         parse_peak_bytes_in_use:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &peak_bytes_in_use_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_largest_alloc_size;
        break;
      }

      // optional int64 largest_alloc_size = 4;
      case 4: {
        if (tag == 32) {
         parse_largest_alloc_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &largest_alloc_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_fragmentation_metric;
        break;
      }

      // optional float fragmentation_metric = 5;
      case 5: {
        if (tag == 45) {
         parse_fragmentation_metric:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fragmentation_metric_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.MemAllocatorStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.MemAllocatorStats)
  return false;
#undef DO_
}

void MemAllocatorStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.MemAllocatorStats)
  // optional int64 num_allocs = 1;
  if (this->num_allocs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->num_allocs(), output);
  }

  // optional int64 bytes_in_use = 2;
  if (this->bytes_in_use() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->bytes_in_use(), output);
  }

  // optional int64 peak_bytes_in_use = 3;
  if (this->peak_bytes_in_use() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->peak_bytes_in_use(), output);
  }

  // optional int64 largest_alloc_size = 4;
  if (this->largest_alloc_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->largest_alloc_size(), output);
  }

  // optional float fragmentation_metric = 5;
  if (this->fragmentation_metric() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->fragmentation_metric(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.MemAllocatorStats)
}

::google::protobuf::uint8* MemAllocatorStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MemAllocatorStats)
  // optional int64 num_allocs = 1;
  if (this->num_allocs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->num_allocs(), target);
  }

  // optional int64 bytes_in_use = 2;
  if (this->bytes_in_use() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->bytes_in_use(), target);
  }

  // optional int64 peak_bytes_in_use = 3;
  if (this->peak_bytes_in_use() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->peak_bytes_in_use(), target);
  }

  // optional int64 largest_alloc_size = 4;
  if (this->largest_alloc_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->largest_alloc_size(), target);
  }

  // optional float fragmentation_metric = 5;
  if (this->fragmentation_metric() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->fragmentation_metric(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MemAllocatorStats)
  return target;
}

int MemAllocatorStats::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MemAllocatorStats)
  int total_size = 0;

  // optional int64 num_allocs = 1;
  if (this->num_allocs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->num_allocs());
  }

  // optional int64 bytes_in_use = 2;
  if (this->bytes_in_use() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bytes_in_use());
  }

  // optional int64 peak_bytes_in_use = 3;
  if (this->peak_bytes_in_use() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->peak_bytes_in_use());
  }

  // optional int64 largest_alloc_size = 4;
  if (this->largest_alloc_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->largest_alloc_size());
  }

  // optional float fragmentation_metric = 5;
  if (this->fragmentation_metric() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemAllocatorStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.MemAllocatorStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MemAllocatorStats* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MemAllocatorStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.MemAllocatorStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.MemAllocatorStats)
    MergeFrom(*source);
  }
}

void MemAllocatorStats::MergeFrom(const MemAllocatorStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MemAllocatorStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.num_allocs() != 0) {
    set_num_allocs(from.num_allocs());
  }
  if (from.bytes_in_use() != 0) {
    set_bytes_in_use(from.bytes_in_use());
  }
  if (from.peak_bytes_in_use() != 0) {
    set_peak_bytes_in_use(from.peak_bytes_in_use());
  }
  if (from.largest_alloc_size() != 0) {
    set_largest_alloc_size(from.largest_alloc_size());
  }
  if (from.fragmentation_metric() != 0) {
    set_fragmentation_metric(from.fragmentation_metric());
  }
}

void MemAllocatorStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.MemAllocatorStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemAllocatorStats::CopyFrom(const MemAllocatorStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MemAllocatorStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemAllocatorStats::IsInitialized() const {

  return true;
}

void MemAllocatorStats::Swap(MemAllocatorStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemAllocatorStats::InternalSwap(MemAllocatorStats* other) {
  std::swap(num_allocs_, other->num_allocs_);
  std::swap(bytes_in_use_, other->bytes_in_use_);
  std::swap(peak_bytes_in_use_, other->peak_bytes_in_use_);
  std::swap(largest_alloc_size_, other->largest_alloc_size_);
  std::swap(fragmentation_metric_, other->fragmentation_metric_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemAllocatorStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemAllocatorStats_descriptor_;
  metadata.reflection = MemAllocatorStats_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemAllocatorStats

// optional int64 num_allocs = 1;
void MemAllocatorStats::clear_num_allocs() {
  num_allocs_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 MemAllocatorStats::num_allocs() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemAllocatorStats.num_allocs)
  return num_allocs_;
}
 void MemAllocatorStats::set_num_allocs(::google::protobuf::int64 value) {
  
  num_allocs_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemAllocatorStats.num_allocs)
}

// optional int64 bytes_in_use = 2;
void MemAllocatorStats::clear_bytes_in_use() {
  bytes_in_use_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 MemAllocatorStats::bytes_in_use() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemAllocatorStats.bytes_in_use)
  return bytes_in_use_;
}
 void MemAllocatorStats::set_bytes_in_use(::google::protobuf::int64 value) {
  
  bytes_in_use_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemAllocatorStats.bytes_in_use)
}

// optional int64 peak_bytes_in_use = 3;
void MemAllocatorStats::clear_peak_bytes_in_use() {
  peak_bytes_in_use_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 MemAllocatorStats::peak_bytes_in_use() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemAllocatorStats.peak_bytes_in_use)
  return peak_bytes_in_use_;
}
 void MemAllocatorStats::set_peak_bytes_in_use(::google::protobuf::int64 value) {
  
  peak_bytes_in_use_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemAllocatorStats.peak_bytes_in_use)
}

// optional int64 largest_alloc_size = 4;
void MemAllocatorStats::clear_largest_alloc_size() {
  largest_alloc_size_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 MemAllocatorStats::largest_alloc_size() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemAllocatorStats.largest_alloc_size)
  return largest_alloc_size_;
}
 void MemAllocatorStats::set_largest_alloc_size(::google::protobuf::int64 value) {
  
  largest_alloc_size_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemAllocatorStats.largest_alloc_size)
}

// optional float fragmentation_metric = 5;
void MemAllocatorStats::clear_fragmentation_metric() {
  fragmentation_metric_ = 0;
}
 float MemAllocatorStats::fragmentation_metric() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemAllocatorStats.fragmentation_metric)
  return fragmentation_metric_;
}
 void MemAllocatorStats::set_fragmentation_metric(float value) {
  
  fragmentation_metric_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemAllocatorStats.fragmentation_metric)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemChunk::kAddressFieldNumber;
const int MemChunk::kSizeFieldNumber;
const int MemChunk::kRequestedSizeFieldNumber;
const int MemChunk::kBinFieldNumber;
const int MemChunk::kOpNameFieldNumber;
const int MemChunk::kFreedAtCountFieldNumber;
const int MemChunk::kActionCountFieldNumber;
const int MemChunk::kInUseFieldNumber;
const int MemChunk::kStepIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemChunk::MemChunk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.MemChunk)
}

void MemChunk::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MemChunk::MemChunk(const MemChunk& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.MemChunk)
}

void MemChunk::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  address_ = GOOGLE_ULONGLONG(0);
  size_ = GOOGLE_LONGLONG(0);
  requested_size_ = GOOGLE_LONGLONG(0);
  bin_ = 0;
  op_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  freed_at_count_ = GOOGLE_ULONGLONG(0);
  action_count_ = GOOGLE_ULONGLONG(0);
  in_use_ = false;
  step_id_ = GOOGLE_ULONGLONG(0);
}

MemChunk::~MemChunk() {
  // @@protoc_insertion_point(destructor:tensorflow.MemChunk)
  SharedDtor();
}

void MemChunk::SharedDtor() {
  op_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MemChunk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemChunk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemChunk_descriptor_;
}

const MemChunk& MemChunk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto();
  return *default_instance_;
}

MemChunk* MemChunk::default_instance_ = NULL;

MemChunk* MemChunk::New(::google::protobuf::Arena* arena) const {
  MemChunk* n = new MemChunk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MemChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MemChunk)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MemChunk, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MemChunk*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(address_, requested_size_);
  ZR_(freed_at_count_, action_count_);
  op_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  step_id_ = GOOGLE_ULONGLONG(0);

#undef ZR_HELPER_
#undef ZR_

}

bool MemChunk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.MemChunk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 address = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &address_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // optional int64 size = 2;
      case 2: {
        if (tag == 16) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_requested_size;
        break;
      }

      // optional int64 requested_size = 3;
      case 3: {
        if (tag == 24) {
         parse_requested_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &requested_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bin;
        break;
      }

      // optional int32 bin = 4;
      case 4: {
        if (tag == 32) {
         parse_bin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_op_name;
        break;
      }

      // optional string op_name = 5;
      case 5: {
        if (tag == 42) {
         parse_op_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_op_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->op_name().data(), this->op_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.MemChunk.op_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_freed_at_count;
        break;
      }

      // optional uint64 freed_at_count = 6;
      case 6: {
        if (tag == 48) {
         parse_freed_at_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &freed_at_count_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_action_count;
        break;
      }

      // optional uint64 action_count = 7;
      case 7: {
        if (tag == 56) {
         parse_action_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &action_count_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_in_use;
        break;
      }

      // optional bool in_use = 8;
      case 8: {
        if (tag == 64) {
         parse_in_use:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_use_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_step_id;
        break;
      }

      // optional uint64 step_id = 9;
      case 9: {
        if (tag == 72) {
         parse_step_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &step_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.MemChunk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.MemChunk)
  return false;
#undef DO_
}

void MemChunk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.MemChunk)
  // optional uint64 address = 1;
  if (this->address() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->address(), output);
  }

  // optional int64 size = 2;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->size(), output);
  }

  // optional int64 requested_size = 3;
  if (this->requested_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->requested_size(), output);
  }

  // optional int32 bin = 4;
  if (this->bin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bin(), output);
  }

  // optional string op_name = 5;
  if (this->op_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->op_name().data(), this->op_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemChunk.op_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->op_name(), output);
  }

  // optional uint64 freed_at_count = 6;
  if (this->freed_at_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->freed_at_count(), output);
  }

  // optional uint64 action_count = 7;
  if (this->action_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->action_count(), output);
  }

  // optional bool in_use = 8;
  if (this->in_use() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->in_use(), output);
  }

  // optional uint64 step_id = 9;
  if (this->step_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->step_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.MemChunk)
}

::google::protobuf::uint8* MemChunk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MemChunk)
  // optional uint64 address = 1;
  if (this->address() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->address(), target);
  }

  // optional int64 size = 2;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->size(), target);
  }

  // optional int64 requested_size = 3;
  if (this->requested_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->requested_size(), target);
  }

  // optional int32 bin = 4;
  if (this->bin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bin(), target);
  }

  // optional string op_name = 5;
  if (this->op_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->op_name().data(), this->op_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemChunk.op_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->op_name(), target);
  }

  // optional uint64 freed_at_count = 6;
  if (this->freed_at_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->freed_at_count(), target);
  }

  // optional uint64 action_count = 7;
  if (this->action_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->action_count(), target);
  }

  // optional bool in_use = 8;
  if (this->in_use() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->in_use(), target);
  }

  // optional uint64 step_id = 9;
  if (this->step_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->step_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MemChunk)
  return target;
}

int MemChunk::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MemChunk)
  int total_size = 0;

  // optional uint64 address = 1;
  if (this->address() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->address());
  }

  // optional int64 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->size());
  }

  // optional int64 requested_size = 3;
  if (this->requested_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->requested_size());
  }

  // optional int32 bin = 4;
  if (this->bin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bin());
  }

  // optional string op_name = 5;
  if (this->op_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->op_name());
  }

  // optional uint64 freed_at_count = 6;
  if (this->freed_at_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->freed_at_count());
  }

  // optional uint64 action_count = 7;
  if (this->action_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->action_count());
  }

  // optional bool in_use = 8;
  if (this->in_use() != 0) {
    total_size += 1 + 1;
  }

  // optional uint64 step_id = 9;
  if (this->step_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->step_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemChunk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.MemChunk)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MemChunk* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MemChunk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.MemChunk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.MemChunk)
    MergeFrom(*source);
  }
}

void MemChunk::MergeFrom(const MemChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MemChunk)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.address() != 0) {
    set_address(from.address());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.requested_size() != 0) {
    set_requested_size(from.requested_size());
  }
  if (from.bin() != 0) {
    set_bin(from.bin());
  }
  if (from.op_name().size() > 0) {

    op_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.op_name_);
  }
  if (from.freed_at_count() != 0) {
    set_freed_at_count(from.freed_at_count());
  }
  if (from.action_count() != 0) {
    set_action_count(from.action_count());
  }
  if (from.in_use() != 0) {
    set_in_use(from.in_use());
  }
  if (from.step_id() != 0) {
    set_step_id(from.step_id());
  }
}

void MemChunk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.MemChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemChunk::CopyFrom(const MemChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MemChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemChunk::IsInitialized() const {

  return true;
}

void MemChunk::Swap(MemChunk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemChunk::InternalSwap(MemChunk* other) {
  std::swap(address_, other->address_);
  std::swap(size_, other->size_);
  std::swap(requested_size_, other->requested_size_);
  std::swap(bin_, other->bin_);
  op_name_.Swap(&other->op_name_);
  std::swap(freed_at_count_, other->freed_at_count_);
  std::swap(action_count_, other->action_count_);
  std::swap(in_use_, other->in_use_);
  std::swap(step_id_, other->step_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemChunk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemChunk_descriptor_;
  metadata.reflection = MemChunk_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemChunk

// optional uint64 address = 1;
void MemChunk::clear_address() {
  address_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 MemChunk::address() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemChunk.address)
  return address_;
}
 void MemChunk::set_address(::google::protobuf::uint64 value) {
  
  address_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemChunk.address)
}

// optional int64 size = 2;
void MemChunk::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 MemChunk::size() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemChunk.size)
  return size_;
}
 void MemChunk::set_size(::google::protobuf::int64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemChunk.size)
}

// optional int64 requested_size = 3;
void MemChunk::clear_requested_size() {
  requested_size_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 MemChunk::requested_size() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemChunk.requested_size)
  return requested_size_;
}
 void MemChunk::set_requested_size(::google::protobuf::int64 value) {
  
  requested_size_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemChunk.requested_size)
}

// optional int32 bin = 4;
void MemChunk::clear_bin() {
  bin_ = 0;
}
 ::google::protobuf::int32 MemChunk::bin() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemChunk.bin)
  return bin_;
}
 void MemChunk::set_bin(::google::protobuf::int32 value) {
  
  bin_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemChunk.bin)
}

// optional string op_name = 5;
void MemChunk::clear_op_name() {
  op_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MemChunk::op_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemChunk.op_name)
  return op_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MemChunk::set_op_name(const ::std::string& value) {
  
  op_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.MemChunk.op_name)
}
 void MemChunk::set_op_name(const char* value) {
  
  op_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.MemChunk.op_name)
}
 void MemChunk::set_op_name(const char* value, size_t size) {
  
  op_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.MemChunk.op_name)
}
 ::std::string* MemChunk::mutable_op_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.MemChunk.op_name)
  return op_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MemChunk::release_op_name() {
  // @@protoc_insertion_point(field_release:tensorflow.MemChunk.op_name)
  
  return op_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MemChunk::set_allocated_op_name(::std::string* op_name) {
  if (op_name != NULL) {
    
  } else {
    
  }
  op_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), op_name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MemChunk.op_name)
}

// optional uint64 freed_at_count = 6;
void MemChunk::clear_freed_at_count() {
  freed_at_count_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 MemChunk::freed_at_count() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemChunk.freed_at_count)
  return freed_at_count_;
}
 void MemChunk::set_freed_at_count(::google::protobuf::uint64 value) {
  
  freed_at_count_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemChunk.freed_at_count)
}

// optional uint64 action_count = 7;
void MemChunk::clear_action_count() {
  action_count_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 MemChunk::action_count() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemChunk.action_count)
  return action_count_;
}
 void MemChunk::set_action_count(::google::protobuf::uint64 value) {
  
  action_count_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemChunk.action_count)
}

// optional bool in_use = 8;
void MemChunk::clear_in_use() {
  in_use_ = false;
}
 bool MemChunk::in_use() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemChunk.in_use)
  return in_use_;
}
 void MemChunk::set_in_use(bool value) {
  
  in_use_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemChunk.in_use)
}

// optional uint64 step_id = 9;
void MemChunk::clear_step_id() {
  step_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 MemChunk::step_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemChunk.step_id)
  return step_id_;
}
 void MemChunk::set_step_id(::google::protobuf::uint64 value) {
  
  step_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemChunk.step_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BinSummary::kBinFieldNumber;
const int BinSummary::kTotalBytesInUseFieldNumber;
const int BinSummary::kTotalBytesInBinFieldNumber;
const int BinSummary::kTotalChunksInUseFieldNumber;
const int BinSummary::kTotalChunksInBinFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BinSummary::BinSummary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.BinSummary)
}

void BinSummary::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BinSummary::BinSummary(const BinSummary& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.BinSummary)
}

void BinSummary::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  bin_ = 0;
  total_bytes_in_use_ = GOOGLE_LONGLONG(0);
  total_bytes_in_bin_ = GOOGLE_LONGLONG(0);
  total_chunks_in_use_ = GOOGLE_LONGLONG(0);
  total_chunks_in_bin_ = GOOGLE_LONGLONG(0);
}

BinSummary::~BinSummary() {
  // @@protoc_insertion_point(destructor:tensorflow.BinSummary)
  SharedDtor();
}

void BinSummary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BinSummary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BinSummary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BinSummary_descriptor_;
}

const BinSummary& BinSummary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto();
  return *default_instance_;
}

BinSummary* BinSummary::default_instance_ = NULL;

BinSummary* BinSummary::New(::google::protobuf::Arena* arena) const {
  BinSummary* n = new BinSummary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BinSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.BinSummary)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BinSummary, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BinSummary*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(total_bytes_in_use_, bin_);

#undef ZR_HELPER_
#undef ZR_

}

bool BinSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.BinSummary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_total_bytes_in_use;
        break;
      }

      // optional int64 total_bytes_in_use = 2;
      case 2: {
        if (tag == 16) {
         parse_total_bytes_in_use:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_bytes_in_use_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_total_bytes_in_bin;
        break;
      }

      // optional int64 total_bytes_in_bin = 3;
      case 3: {
        if (tag == 24) {
         parse_total_bytes_in_bin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_bytes_in_bin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_total_chunks_in_use;
        break;
      }

      // optional int64 total_chunks_in_use = 4;
      case 4: {
        if (tag == 32) {
         parse_total_chunks_in_use:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_chunks_in_use_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_total_chunks_in_bin;
        break;
      }

      // optional int64 total_chunks_in_bin = 5;
      case 5: {
        if (tag == 40) {
         parse_total_chunks_in_bin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_chunks_in_bin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.BinSummary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.BinSummary)
  return false;
#undef DO_
}

void BinSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.BinSummary)
  // optional int32 bin = 1;
  if (this->bin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bin(), output);
  }

  // optional int64 total_bytes_in_use = 2;
  if (this->total_bytes_in_use() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->total_bytes_in_use(), output);
  }

  // optional int64 total_bytes_in_bin = 3;
  if (this->total_bytes_in_bin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->total_bytes_in_bin(), output);
  }

  // optional int64 total_chunks_in_use = 4;
  if (this->total_chunks_in_use() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->total_chunks_in_use(), output);
  }

  // optional int64 total_chunks_in_bin = 5;
  if (this->total_chunks_in_bin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->total_chunks_in_bin(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.BinSummary)
}

::google::protobuf::uint8* BinSummary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.BinSummary)
  // optional int32 bin = 1;
  if (this->bin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bin(), target);
  }

  // optional int64 total_bytes_in_use = 2;
  if (this->total_bytes_in_use() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->total_bytes_in_use(), target);
  }

  // optional int64 total_bytes_in_bin = 3;
  if (this->total_bytes_in_bin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->total_bytes_in_bin(), target);
  }

  // optional int64 total_chunks_in_use = 4;
  if (this->total_chunks_in_use() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->total_chunks_in_use(), target);
  }

  // optional int64 total_chunks_in_bin = 5;
  if (this->total_chunks_in_bin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->total_chunks_in_bin(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.BinSummary)
  return target;
}

int BinSummary::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.BinSummary)
  int total_size = 0;

  // optional int32 bin = 1;
  if (this->bin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bin());
  }

  // optional int64 total_bytes_in_use = 2;
  if (this->total_bytes_in_use() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_bytes_in_use());
  }

  // optional int64 total_bytes_in_bin = 3;
  if (this->total_bytes_in_bin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_bytes_in_bin());
  }

  // optional int64 total_chunks_in_use = 4;
  if (this->total_chunks_in_use() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_chunks_in_use());
  }

  // optional int64 total_chunks_in_bin = 5;
  if (this->total_chunks_in_bin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_chunks_in_bin());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BinSummary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.BinSummary)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BinSummary* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BinSummary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.BinSummary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.BinSummary)
    MergeFrom(*source);
  }
}

void BinSummary::MergeFrom(const BinSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.BinSummary)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.bin() != 0) {
    set_bin(from.bin());
  }
  if (from.total_bytes_in_use() != 0) {
    set_total_bytes_in_use(from.total_bytes_in_use());
  }
  if (from.total_bytes_in_bin() != 0) {
    set_total_bytes_in_bin(from.total_bytes_in_bin());
  }
  if (from.total_chunks_in_use() != 0) {
    set_total_chunks_in_use(from.total_chunks_in_use());
  }
  if (from.total_chunks_in_bin() != 0) {
    set_total_chunks_in_bin(from.total_chunks_in_bin());
  }
}

void BinSummary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.BinSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinSummary::CopyFrom(const BinSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.BinSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinSummary::IsInitialized() const {

  return true;
}

void BinSummary::Swap(BinSummary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BinSummary::InternalSwap(BinSummary* other) {
  std::swap(bin_, other->bin_);
  std::swap(total_bytes_in_use_, other->total_bytes_in_use_);
  std::swap(total_bytes_in_bin_, other->total_bytes_in_bin_);
  std::swap(total_chunks_in_use_, other->total_chunks_in_use_);
  std::swap(total_chunks_in_bin_, other->total_chunks_in_bin_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BinSummary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BinSummary_descriptor_;
  metadata.reflection = BinSummary_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BinSummary

// optional int32 bin = 1;
void BinSummary::clear_bin() {
  bin_ = 0;
}
 ::google::protobuf::int32 BinSummary::bin() const {
  // @@protoc_insertion_point(field_get:tensorflow.BinSummary.bin)
  return bin_;
}
 void BinSummary::set_bin(::google::protobuf::int32 value) {
  
  bin_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.BinSummary.bin)
}

// optional int64 total_bytes_in_use = 2;
void BinSummary::clear_total_bytes_in_use() {
  total_bytes_in_use_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 BinSummary::total_bytes_in_use() const {
  // @@protoc_insertion_point(field_get:tensorflow.BinSummary.total_bytes_in_use)
  return total_bytes_in_use_;
}
 void BinSummary::set_total_bytes_in_use(::google::protobuf::int64 value) {
  
  total_bytes_in_use_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.BinSummary.total_bytes_in_use)
}

// optional int64 total_bytes_in_bin = 3;
void BinSummary::clear_total_bytes_in_bin() {
  total_bytes_in_bin_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 BinSummary::total_bytes_in_bin() const {
  // @@protoc_insertion_point(field_get:tensorflow.BinSummary.total_bytes_in_bin)
  return total_bytes_in_bin_;
}
 void BinSummary::set_total_bytes_in_bin(::google::protobuf::int64 value) {
  
  total_bytes_in_bin_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.BinSummary.total_bytes_in_bin)
}

// optional int64 total_chunks_in_use = 4;
void BinSummary::clear_total_chunks_in_use() {
  total_chunks_in_use_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 BinSummary::total_chunks_in_use() const {
  // @@protoc_insertion_point(field_get:tensorflow.BinSummary.total_chunks_in_use)
  return total_chunks_in_use_;
}
 void BinSummary::set_total_chunks_in_use(::google::protobuf::int64 value) {
  
  total_chunks_in_use_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.BinSummary.total_chunks_in_use)
}

// optional int64 total_chunks_in_bin = 5;
void BinSummary::clear_total_chunks_in_bin() {
  total_chunks_in_bin_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 BinSummary::total_chunks_in_bin() const {
  // @@protoc_insertion_point(field_get:tensorflow.BinSummary.total_chunks_in_bin)
  return total_chunks_in_bin_;
}
 void BinSummary::set_total_chunks_in_bin(::google::protobuf::int64 value) {
  
  total_chunks_in_bin_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.BinSummary.total_chunks_in_bin)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnapShot::kActionCountFieldNumber;
const int SnapShot::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnapShot::SnapShot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.SnapShot)
}

void SnapShot::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SnapShot::SnapShot(const SnapShot& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.SnapShot)
}

void SnapShot::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  action_count_ = GOOGLE_ULONGLONG(0);
  size_ = GOOGLE_LONGLONG(0);
}

SnapShot::~SnapShot() {
  // @@protoc_insertion_point(destructor:tensorflow.SnapShot)
  SharedDtor();
}

void SnapShot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SnapShot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapShot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapShot_descriptor_;
}

const SnapShot& SnapShot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto();
  return *default_instance_;
}

SnapShot* SnapShot::default_instance_ = NULL;

SnapShot* SnapShot::New(::google::protobuf::Arena* arena) const {
  SnapShot* n = new SnapShot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnapShot::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.SnapShot)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SnapShot, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SnapShot*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(action_count_, size_);

#undef ZR_HELPER_
#undef ZR_

}

bool SnapShot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.SnapShot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 action_count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &action_count_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // optional int64 size = 2;
      case 2: {
        if (tag == 16) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.SnapShot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.SnapShot)
  return false;
#undef DO_
}

void SnapShot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.SnapShot)
  // optional uint64 action_count = 1;
  if (this->action_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->action_count(), output);
  }

  // optional int64 size = 2;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->size(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.SnapShot)
}

::google::protobuf::uint8* SnapShot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.SnapShot)
  // optional uint64 action_count = 1;
  if (this->action_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->action_count(), target);
  }

  // optional int64 size = 2;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.SnapShot)
  return target;
}

int SnapShot::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.SnapShot)
  int total_size = 0;

  // optional uint64 action_count = 1;
  if (this->action_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->action_count());
  }

  // optional int64 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->size());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapShot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.SnapShot)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SnapShot* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SnapShot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.SnapShot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.SnapShot)
    MergeFrom(*source);
  }
}

void SnapShot::MergeFrom(const SnapShot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.SnapShot)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.action_count() != 0) {
    set_action_count(from.action_count());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
}

void SnapShot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.SnapShot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapShot::CopyFrom(const SnapShot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.SnapShot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapShot::IsInitialized() const {

  return true;
}

void SnapShot::Swap(SnapShot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnapShot::InternalSwap(SnapShot* other) {
  std::swap(action_count_, other->action_count_);
  std::swap(size_, other->size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnapShot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapShot_descriptor_;
  metadata.reflection = SnapShot_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnapShot

// optional uint64 action_count = 1;
void SnapShot::clear_action_count() {
  action_count_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 SnapShot::action_count() const {
  // @@protoc_insertion_point(field_get:tensorflow.SnapShot.action_count)
  return action_count_;
}
 void SnapShot::set_action_count(::google::protobuf::uint64 value) {
  
  action_count_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.SnapShot.action_count)
}

// optional int64 size = 2;
void SnapShot::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 SnapShot::size() const {
  // @@protoc_insertion_point(field_get:tensorflow.SnapShot.size)
  return size_;
}
 void SnapShot::set_size(::google::protobuf::int64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.SnapShot.size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemoryDump::kAllocatorNameFieldNumber;
const int MemoryDump::kBinSummaryFieldNumber;
const int MemoryDump::kChunkFieldNumber;
const int MemoryDump::kSnapShotFieldNumber;
const int MemoryDump::kStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemoryDump::MemoryDump()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.MemoryDump)
}

void MemoryDump::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  stats_ = const_cast< ::tensorflow::MemAllocatorStats*>(&::tensorflow::MemAllocatorStats::default_instance());
}

MemoryDump::MemoryDump(const MemoryDump& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.MemoryDump)
}

void MemoryDump::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  allocator_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stats_ = NULL;
}

MemoryDump::~MemoryDump() {
  // @@protoc_insertion_point(destructor:tensorflow.MemoryDump)
  SharedDtor();
}

void MemoryDump::SharedDtor() {
  allocator_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete stats_;
  }
}

void MemoryDump::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemoryDump::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemoryDump_descriptor_;
}

const MemoryDump& MemoryDump::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto();
  return *default_instance_;
}

MemoryDump* MemoryDump::default_instance_ = NULL;

MemoryDump* MemoryDump::New(::google::protobuf::Arena* arena) const {
  MemoryDump* n = new MemoryDump;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MemoryDump::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MemoryDump)
  allocator_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) delete stats_;
  stats_ = NULL;
  bin_summary_.Clear();
  chunk_.Clear();
  snap_shot_.Clear();
}

bool MemoryDump::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.MemoryDump)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string allocator_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_allocator_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->allocator_name().data(), this->allocator_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.MemoryDump.allocator_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bin_summary;
        break;
      }

      // repeated .tensorflow.BinSummary bin_summary = 2;
      case 2: {
        if (tag == 18) {
         parse_bin_summary:
          DO_(input->IncrementRecursionDepth());
         parse_loop_bin_summary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_bin_summary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_bin_summary;
        if (input->ExpectTag(26)) goto parse_loop_chunk;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .tensorflow.MemChunk chunk = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_chunk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_chunk()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_chunk;
        if (input->ExpectTag(34)) goto parse_loop_snap_shot;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .tensorflow.SnapShot snap_shot = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_snap_shot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_snap_shot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_snap_shot;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_stats;
        break;
      }

      // optional .tensorflow.MemAllocatorStats stats = 5;
      case 5: {
        if (tag == 42) {
         parse_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.MemoryDump)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.MemoryDump)
  return false;
#undef DO_
}

void MemoryDump::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.MemoryDump)
  // optional string allocator_name = 1;
  if (this->allocator_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->allocator_name().data(), this->allocator_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemoryDump.allocator_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->allocator_name(), output);
  }

  // repeated .tensorflow.BinSummary bin_summary = 2;
  for (unsigned int i = 0, n = this->bin_summary_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bin_summary(i), output);
  }

  // repeated .tensorflow.MemChunk chunk = 3;
  for (unsigned int i = 0, n = this->chunk_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->chunk(i), output);
  }

  // repeated .tensorflow.SnapShot snap_shot = 4;
  for (unsigned int i = 0, n = this->snap_shot_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->snap_shot(i), output);
  }

  // optional .tensorflow.MemAllocatorStats stats = 5;
  if (this->has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->stats_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.MemoryDump)
}

::google::protobuf::uint8* MemoryDump::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MemoryDump)
  // optional string allocator_name = 1;
  if (this->allocator_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->allocator_name().data(), this->allocator_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemoryDump.allocator_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->allocator_name(), target);
  }

  // repeated .tensorflow.BinSummary bin_summary = 2;
  for (unsigned int i = 0, n = this->bin_summary_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->bin_summary(i), false, target);
  }

  // repeated .tensorflow.MemChunk chunk = 3;
  for (unsigned int i = 0, n = this->chunk_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->chunk(i), false, target);
  }

  // repeated .tensorflow.SnapShot snap_shot = 4;
  for (unsigned int i = 0, n = this->snap_shot_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->snap_shot(i), false, target);
  }

  // optional .tensorflow.MemAllocatorStats stats = 5;
  if (this->has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->stats_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MemoryDump)
  return target;
}

int MemoryDump::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MemoryDump)
  int total_size = 0;

  // optional string allocator_name = 1;
  if (this->allocator_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->allocator_name());
  }

  // optional .tensorflow.MemAllocatorStats stats = 5;
  if (this->has_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stats_);
  }

  // repeated .tensorflow.BinSummary bin_summary = 2;
  total_size += 1 * this->bin_summary_size();
  for (int i = 0; i < this->bin_summary_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bin_summary(i));
  }

  // repeated .tensorflow.MemChunk chunk = 3;
  total_size += 1 * this->chunk_size();
  for (int i = 0; i < this->chunk_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chunk(i));
  }

  // repeated .tensorflow.SnapShot snap_shot = 4;
  total_size += 1 * this->snap_shot_size();
  for (int i = 0; i < this->snap_shot_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->snap_shot(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemoryDump::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.MemoryDump)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MemoryDump* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MemoryDump>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.MemoryDump)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.MemoryDump)
    MergeFrom(*source);
  }
}

void MemoryDump::MergeFrom(const MemoryDump& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MemoryDump)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  bin_summary_.MergeFrom(from.bin_summary_);
  chunk_.MergeFrom(from.chunk_);
  snap_shot_.MergeFrom(from.snap_shot_);
  if (from.allocator_name().size() > 0) {

    allocator_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.allocator_name_);
  }
  if (from.has_stats()) {
    mutable_stats()->::tensorflow::MemAllocatorStats::MergeFrom(from.stats());
  }
}

void MemoryDump::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.MemoryDump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryDump::CopyFrom(const MemoryDump& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MemoryDump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryDump::IsInitialized() const {

  return true;
}

void MemoryDump::Swap(MemoryDump* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemoryDump::InternalSwap(MemoryDump* other) {
  allocator_name_.Swap(&other->allocator_name_);
  bin_summary_.UnsafeArenaSwap(&other->bin_summary_);
  chunk_.UnsafeArenaSwap(&other->chunk_);
  snap_shot_.UnsafeArenaSwap(&other->snap_shot_);
  std::swap(stats_, other->stats_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemoryDump::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemoryDump_descriptor_;
  metadata.reflection = MemoryDump_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemoryDump

// optional string allocator_name = 1;
void MemoryDump::clear_allocator_name() {
  allocator_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MemoryDump::allocator_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryDump.allocator_name)
  return allocator_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MemoryDump::set_allocator_name(const ::std::string& value) {
  
  allocator_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.MemoryDump.allocator_name)
}
 void MemoryDump::set_allocator_name(const char* value) {
  
  allocator_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.MemoryDump.allocator_name)
}
 void MemoryDump::set_allocator_name(const char* value, size_t size) {
  
  allocator_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.MemoryDump.allocator_name)
}
 ::std::string* MemoryDump::mutable_allocator_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryDump.allocator_name)
  return allocator_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MemoryDump::release_allocator_name() {
  // @@protoc_insertion_point(field_release:tensorflow.MemoryDump.allocator_name)
  
  return allocator_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MemoryDump::set_allocated_allocator_name(::std::string* allocator_name) {
  if (allocator_name != NULL) {
    
  } else {
    
  }
  allocator_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), allocator_name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MemoryDump.allocator_name)
}

// repeated .tensorflow.BinSummary bin_summary = 2;
int MemoryDump::bin_summary_size() const {
  return bin_summary_.size();
}
void MemoryDump::clear_bin_summary() {
  bin_summary_.Clear();
}
const ::tensorflow::BinSummary& MemoryDump::bin_summary(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryDump.bin_summary)
  return bin_summary_.Get(index);
}
::tensorflow::BinSummary* MemoryDump::mutable_bin_summary(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryDump.bin_summary)
  return bin_summary_.Mutable(index);
}
::tensorflow::BinSummary* MemoryDump::add_bin_summary() {
  // @@protoc_insertion_point(field_add:tensorflow.MemoryDump.bin_summary)
  return bin_summary_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::BinSummary >*
MemoryDump::mutable_bin_summary() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.MemoryDump.bin_summary)
  return &bin_summary_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::BinSummary >&
MemoryDump::bin_summary() const {
  // @@protoc_insertion_point(field_list:tensorflow.MemoryDump.bin_summary)
  return bin_summary_;
}

// repeated .tensorflow.MemChunk chunk = 3;
int MemoryDump::chunk_size() const {
  return chunk_.size();
}
void MemoryDump::clear_chunk() {
  chunk_.Clear();
}
const ::tensorflow::MemChunk& MemoryDump::chunk(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryDump.chunk)
  return chunk_.Get(index);
}
::tensorflow::MemChunk* MemoryDump::mutable_chunk(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryDump.chunk)
  return chunk_.Mutable(index);
}
::tensorflow::MemChunk* MemoryDump::add_chunk() {
  // @@protoc_insertion_point(field_add:tensorflow.MemoryDump.chunk)
  return chunk_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::MemChunk >*
MemoryDump::mutable_chunk() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.MemoryDump.chunk)
  return &chunk_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::MemChunk >&
MemoryDump::chunk() const {
  // @@protoc_insertion_point(field_list:tensorflow.MemoryDump.chunk)
  return chunk_;
}

// repeated .tensorflow.SnapShot snap_shot = 4;
int MemoryDump::snap_shot_size() const {
  return snap_shot_.size();
}
void MemoryDump::clear_snap_shot() {
  snap_shot_.Clear();
}
const ::tensorflow::SnapShot& MemoryDump::snap_shot(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryDump.snap_shot)
  return snap_shot_.Get(index);
}
::tensorflow::SnapShot* MemoryDump::mutable_snap_shot(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryDump.snap_shot)
  return snap_shot_.Mutable(index);
}
::tensorflow::SnapShot* MemoryDump::add_snap_shot() {
  // @@protoc_insertion_point(field_add:tensorflow.MemoryDump.snap_shot)
  return snap_shot_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::SnapShot >*
MemoryDump::mutable_snap_shot() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.MemoryDump.snap_shot)
  return &snap_shot_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::SnapShot >&
MemoryDump::snap_shot() const {
  // @@protoc_insertion_point(field_list:tensorflow.MemoryDump.snap_shot)
  return snap_shot_;
}

// optional .tensorflow.MemAllocatorStats stats = 5;
bool MemoryDump::has_stats() const {
  return !_is_default_instance_ && stats_ != NULL;
}
void MemoryDump::clear_stats() {
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) delete stats_;
  stats_ = NULL;
}
const ::tensorflow::MemAllocatorStats& MemoryDump::stats() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryDump.stats)
  return stats_ != NULL ? *stats_ : *default_instance_->stats_;
}
::tensorflow::MemAllocatorStats* MemoryDump::mutable_stats() {
  
  if (stats_ == NULL) {
    stats_ = new ::tensorflow::MemAllocatorStats;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryDump.stats)
  return stats_;
}
::tensorflow::MemAllocatorStats* MemoryDump::release_stats() {
  // @@protoc_insertion_point(field_release:tensorflow.MemoryDump.stats)
  
  ::tensorflow::MemAllocatorStats* temp = stats_;
  stats_ = NULL;
  return temp;
}
void MemoryDump::set_allocated_stats(::tensorflow::MemAllocatorStats* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MemoryDump.stats)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
