// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/replay_log.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/protobuf/replay_log.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {

namespace {

const ::google::protobuf::Descriptor* NewReplaySession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewReplaySession_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplayOp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplayOp_reflection_ = NULL;
struct ReplayOpOneofInstance {
  const ::tensorflow::CreateSessionRequest* create_session_;
  const ::tensorflow::ExtendSessionRequest* extend_session_;
  const ::tensorflow::PartialRunSetupRequest* partial_run_setup_;
  const ::tensorflow::RunStepRequest* run_step_;
  const ::tensorflow::CloseSessionRequest* close_session_;
  const ::tensorflow::ListDevicesRequest* list_devices_;
  const ::tensorflow::ResetRequest* reset_request_;
  const ::tensorflow::MakeCallableRequest* make_callable_;
  const ::tensorflow::RunCallableRequest* run_callable_;
  const ::tensorflow::ReleaseCallableRequest* release_callable_;
  const ::tensorflow::NewReplaySession* new_replay_session_;
  const ::tensorflow::CreateSessionResponse* create_session_response_;
  const ::tensorflow::ExtendSessionResponse* extend_session_response_;
  const ::tensorflow::PartialRunSetupResponse* partial_run_setup_response_;
  const ::tensorflow::RunStepResponse* run_step_response_;
  const ::tensorflow::CloseSessionResponse* close_session_response_;
  const ::tensorflow::ListDevicesResponse* list_devices_response_;
  const ::tensorflow::ResetResponse* reset_request_response_;
  const ::tensorflow::MakeCallableResponse* make_callable_response_;
  const ::tensorflow::RunCallableResponse* run_callable_response_;
  const ::tensorflow::ReleaseCallableResponse* release_callable_response_;
}* ReplayOp_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto() {
  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow/core/protobuf/replay_log.proto");
  GOOGLE_CHECK(file != NULL);
  NewReplaySession_descriptor_ = file->message_type(0);
  static const int NewReplaySession_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewReplaySession, devices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewReplaySession, session_handle_),
  };
  NewReplaySession_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NewReplaySession_descriptor_,
      NewReplaySession::default_instance_,
      NewReplaySession_offsets_,
      -1,
      -1,
      -1,
      sizeof(NewReplaySession),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewReplaySession, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewReplaySession, _is_default_instance_));
  ReplayOp_descriptor_ = file->message_type(1);
  static const int ReplayOp_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayOp, start_time_us_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayOp, end_time_us_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReplayOp_default_oneof_instance_, create_session_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReplayOp_default_oneof_instance_, extend_session_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReplayOp_default_oneof_instance_, partial_run_setup_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReplayOp_default_oneof_instance_, run_step_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReplayOp_default_oneof_instance_, close_session_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReplayOp_default_oneof_instance_, list_devices_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReplayOp_default_oneof_instance_, reset_request_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReplayOp_default_oneof_instance_, make_callable_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReplayOp_default_oneof_instance_, run_callable_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReplayOp_default_oneof_instance_, release_callable_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReplayOp_default_oneof_instance_, new_replay_session_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReplayOp_default_oneof_instance_, create_session_response_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReplayOp_default_oneof_instance_, extend_session_response_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReplayOp_default_oneof_instance_, partial_run_setup_response_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReplayOp_default_oneof_instance_, run_step_response_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReplayOp_default_oneof_instance_, close_session_response_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReplayOp_default_oneof_instance_, list_devices_response_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReplayOp_default_oneof_instance_, reset_request_response_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReplayOp_default_oneof_instance_, make_callable_response_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReplayOp_default_oneof_instance_, run_callable_response_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReplayOp_default_oneof_instance_, release_callable_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayOp, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayOp, response_),
  };
  ReplayOp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReplayOp_descriptor_,
      ReplayOp::default_instance_,
      ReplayOp_offsets_,
      -1,
      -1,
      -1,
      ReplayOp_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayOp, _oneof_case_[0]),
      sizeof(ReplayOp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayOp, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayOp, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NewReplaySession_descriptor_, &NewReplaySession::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReplayOp_descriptor_, &ReplayOp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto() {
  delete NewReplaySession::default_instance_;
  delete NewReplaySession_reflection_;
  delete ReplayOp::default_instance_;
  delete ReplayOp_default_oneof_instance_;
  delete ReplayOp_reflection_;
}

void protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n)tensorflow/core/protobuf/replay_log.pr"
    "oto\022\ntensorflow\032%tensorflow/core/protobu"
    "f/master.proto\"\\\n\020NewReplaySession\0220\n\007de"
    "vices\030\001 \001(\0132\037.tensorflow.ListDevicesResp"
    "onse\022\026\n\016session_handle\030\002 \001(\t\"\350\n\n\010ReplayO"
    "p\022\025\n\rstart_time_us\030\037 \001(\001\022\023\n\013end_time_us\030"
    "  \001(\001\022:\n\016create_session\030\001 \001(\0132 .tensorfl"
    "ow.CreateSessionRequestH\000\022:\n\016extend_sess"
    "ion\030\002 \001(\0132 .tensorflow.ExtendSessionRequ"
    "estH\000\022\?\n\021partial_run_setup\030\003 \001(\0132\".tenso"
    "rflow.PartialRunSetupRequestH\000\022.\n\010run_st"
    "ep\030\004 \001(\0132\032.tensorflow.RunStepRequestH\000\0228"
    "\n\rclose_session\030\005 \001(\0132\037.tensorflow.Close"
    "SessionRequestH\000\0226\n\014list_devices\030\006 \001(\0132\036"
    ".tensorflow.ListDevicesRequestH\000\0221\n\rrese"
    "t_request\030\007 \001(\0132\030.tensorflow.ResetReques"
    "tH\000\0228\n\rmake_callable\030\010 \001(\0132\037.tensorflow."
    "MakeCallableRequestH\000\0226\n\014run_callable\030\t "
    "\001(\0132\036.tensorflow.RunCallableRequestH\000\022>\n"
    "\020release_callable\030\n \001(\0132\".tensorflow.Rel"
    "easeCallableRequestH\000\022:\n\022new_replay_sess"
    "ion\030\013 \001(\0132\034.tensorflow.NewReplaySessionH"
    "\000\022D\n\027create_session_response\030\025 \001(\0132!.ten"
    "sorflow.CreateSessionResponseH\001\022D\n\027exten"
    "d_session_response\030\026 \001(\0132!.tensorflow.Ex"
    "tendSessionResponseH\001\022I\n\032partial_run_set"
    "up_response\030\027 \001(\0132#.tensorflow.PartialRu"
    "nSetupResponseH\001\0228\n\021run_step_response\030\030 "
    "\001(\0132\033.tensorflow.RunStepResponseH\001\022B\n\026cl"
    "ose_session_response\030\031 \001(\0132 .tensorflow."
    "CloseSessionResponseH\001\022@\n\025list_devices_r"
    "esponse\030\032 \001(\0132\037.tensorflow.ListDevicesRe"
    "sponseH\001\022;\n\026reset_request_response\030\033 \001(\013"
    "2\031.tensorflow.ResetResponseH\001\022B\n\026make_ca"
    "llable_response\030\034 \001(\0132 .tensorflow.MakeC"
    "allableResponseH\001\022@\n\025run_callable_respon"
    "se\030\035 \001(\0132\037.tensorflow.RunCallableRespons"
    "eH\001\022H\n\031release_callable_response\030\036 \001(\0132#"
    ".tensorflow.ReleaseCallableResponseH\001B\004\n"
    "\002opB\n\n\010responseBMZHgithub.com/tensorflow"
    "/tensorflow/tensorflow/go/core/core_prot"
    "os_go_proto\370\001\001b\006proto3", 1662);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/protobuf/replay_log.proto", &protobuf_RegisterTypes);
  NewReplaySession::default_instance_ = new NewReplaySession();
  ReplayOp::default_instance_ = new ReplayOp();
  ReplayOp_default_oneof_instance_ = new ReplayOpOneofInstance();
  NewReplaySession::default_instance_->InitAsDefaultInstance();
  ReplayOp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto {
  StaticDescriptorInitializer_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto() {
    protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto();
  }
} static_descriptor_initializer_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto_;

// ===================================================================

void NewReplaySession::_slow_mutable_devices() {
  devices_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::ListDevicesResponse >(
      GetArenaNoVirtual());
}
::tensorflow::ListDevicesResponse* NewReplaySession::_slow_release_devices() {
  if (devices_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::ListDevicesResponse* temp = new ::tensorflow::ListDevicesResponse;
    temp->MergeFrom(*devices_);
    devices_ = NULL;
    return temp;
  }
}
::tensorflow::ListDevicesResponse* NewReplaySession::unsafe_arena_release_devices() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.NewReplaySession.devices)
  
  ::tensorflow::ListDevicesResponse* temp = devices_;
  devices_ = NULL;
  return temp;
}
void NewReplaySession::_slow_set_allocated_devices(
    ::google::protobuf::Arena* message_arena, ::tensorflow::ListDevicesResponse** devices) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*devices) == NULL) {
      message_arena->Own(*devices);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*devices)) {
      ::tensorflow::ListDevicesResponse* new_devices = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::ListDevicesResponse >(
            message_arena);
      new_devices->CopyFrom(**devices);
      *devices = new_devices;
    }
}
void NewReplaySession::unsafe_arena_set_allocated_devices(
    ::tensorflow::ListDevicesResponse* devices) {
  if (GetArenaNoVirtual() == NULL) {
    delete devices_;
  }
  devices_ = devices;
  if (devices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.NewReplaySession.devices)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewReplaySession::kDevicesFieldNumber;
const int NewReplaySession::kSessionHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewReplaySession::NewReplaySession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.NewReplaySession)
}

NewReplaySession::NewReplaySession(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.NewReplaySession)
}

void NewReplaySession::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  devices_ = const_cast< ::tensorflow::ListDevicesResponse*>(&::tensorflow::ListDevicesResponse::default_instance());
}

NewReplaySession::NewReplaySession(const NewReplaySession& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.NewReplaySession)
}

void NewReplaySession::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  devices_ = NULL;
  session_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NewReplaySession::~NewReplaySession() {
  // @@protoc_insertion_point(destructor:tensorflow.NewReplaySession)
  SharedDtor();
}

void NewReplaySession::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  session_handle_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
    delete devices_;
  }
}

void NewReplaySession::ArenaDtor(void* object) {
  NewReplaySession* _this = reinterpret_cast< NewReplaySession* >(object);
  (void)_this;
}
void NewReplaySession::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NewReplaySession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewReplaySession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewReplaySession_descriptor_;
}

const NewReplaySession& NewReplaySession::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto();
  return *default_instance_;
}

NewReplaySession* NewReplaySession::default_instance_ = NULL;

NewReplaySession* NewReplaySession::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<NewReplaySession>(arena);
}

void NewReplaySession::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.NewReplaySession)
  if (GetArenaNoVirtual() == NULL && devices_ != NULL) delete devices_;
  devices_ = NULL;
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool NewReplaySession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.NewReplaySession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tensorflow.ListDevicesResponse devices = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_devices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_session_handle;
        break;
      }

      // optional string session_handle = 2;
      case 2: {
        if (tag == 18) {
         parse_session_handle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_handle().data(), this->session_handle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.NewReplaySession.session_handle"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.NewReplaySession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.NewReplaySession)
  return false;
#undef DO_
}

void NewReplaySession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.NewReplaySession)
  // optional .tensorflow.ListDevicesResponse devices = 1;
  if (this->has_devices()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->devices_, output);
  }

  // optional string session_handle = 2;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.NewReplaySession.session_handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session_handle(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.NewReplaySession)
}

::google::protobuf::uint8* NewReplaySession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.NewReplaySession)
  // optional .tensorflow.ListDevicesResponse devices = 1;
  if (this->has_devices()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->devices_, false, target);
  }

  // optional string session_handle = 2;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.NewReplaySession.session_handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_handle(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.NewReplaySession)
  return target;
}

int NewReplaySession::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.NewReplaySession)
  int total_size = 0;

  // optional .tensorflow.ListDevicesResponse devices = 1;
  if (this->has_devices()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->devices_);
  }

  // optional string session_handle = 2;
  if (this->session_handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_handle());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewReplaySession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.NewReplaySession)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NewReplaySession* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NewReplaySession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.NewReplaySession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.NewReplaySession)
    MergeFrom(*source);
  }
}

void NewReplaySession::MergeFrom(const NewReplaySession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.NewReplaySession)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_devices()) {
    mutable_devices()->::tensorflow::ListDevicesResponse::MergeFrom(from.devices());
  }
  if (from.session_handle().size() > 0) {
    set_session_handle(from.session_handle());
  }
}

void NewReplaySession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.NewReplaySession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewReplaySession::CopyFrom(const NewReplaySession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.NewReplaySession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewReplaySession::IsInitialized() const {

  return true;
}

void NewReplaySession::Swap(NewReplaySession* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NewReplaySession temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void NewReplaySession::UnsafeArenaSwap(NewReplaySession* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NewReplaySession::InternalSwap(NewReplaySession* other) {
  std::swap(devices_, other->devices_);
  session_handle_.Swap(&other->session_handle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NewReplaySession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewReplaySession_descriptor_;
  metadata.reflection = NewReplaySession_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NewReplaySession

// optional .tensorflow.ListDevicesResponse devices = 1;
bool NewReplaySession::has_devices() const {
  return !_is_default_instance_ && devices_ != NULL;
}
void NewReplaySession::clear_devices() {
  if (GetArenaNoVirtual() == NULL && devices_ != NULL) delete devices_;
  devices_ = NULL;
}
const ::tensorflow::ListDevicesResponse& NewReplaySession::devices() const {
  // @@protoc_insertion_point(field_get:tensorflow.NewReplaySession.devices)
  return devices_ != NULL ? *devices_ : *default_instance_->devices_;
}
::tensorflow::ListDevicesResponse* NewReplaySession::mutable_devices() {
  
  if (devices_ == NULL) {
    _slow_mutable_devices();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.NewReplaySession.devices)
  return devices_;
}
::tensorflow::ListDevicesResponse* NewReplaySession::release_devices() {
  // @@protoc_insertion_point(field_release:tensorflow.NewReplaySession.devices)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_devices();
  } else {
    ::tensorflow::ListDevicesResponse* temp = devices_;
    devices_ = NULL;
    return temp;
  }
}
 void NewReplaySession::set_allocated_devices(::tensorflow::ListDevicesResponse* devices) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete devices_;
  }
  if (devices != NULL) {
    _slow_set_allocated_devices(message_arena, &devices);
  }
  devices_ = devices;
  if (devices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.NewReplaySession.devices)
}

// optional string session_handle = 2;
void NewReplaySession::clear_session_handle() {
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& NewReplaySession::session_handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.NewReplaySession.session_handle)
  return session_handle_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NewReplaySession::set_session_handle(const ::std::string& value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.NewReplaySession.session_handle)
}
 void NewReplaySession::set_session_handle(const char* value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.NewReplaySession.session_handle)
}
 void NewReplaySession::set_session_handle(const char* value,
    size_t size) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.NewReplaySession.session_handle)
}
 ::std::string* NewReplaySession::mutable_session_handle() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.NewReplaySession.session_handle)
  return session_handle_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* NewReplaySession::release_session_handle() {
  // @@protoc_insertion_point(field_release:tensorflow.NewReplaySession.session_handle)
  
  return session_handle_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* NewReplaySession::unsafe_arena_release_session_handle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.NewReplaySession.session_handle)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return session_handle_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void NewReplaySession::set_allocated_session_handle(::std::string* session_handle) {
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_handle,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.NewReplaySession.session_handle)
}
 void NewReplaySession::unsafe_arena_set_allocated_session_handle(
    ::std::string* session_handle) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      session_handle, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.NewReplaySession.session_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReplayOp::kStartTimeUsFieldNumber;
const int ReplayOp::kEndTimeUsFieldNumber;
const int ReplayOp::kCreateSessionFieldNumber;
const int ReplayOp::kExtendSessionFieldNumber;
const int ReplayOp::kPartialRunSetupFieldNumber;
const int ReplayOp::kRunStepFieldNumber;
const int ReplayOp::kCloseSessionFieldNumber;
const int ReplayOp::kListDevicesFieldNumber;
const int ReplayOp::kResetRequestFieldNumber;
const int ReplayOp::kMakeCallableFieldNumber;
const int ReplayOp::kRunCallableFieldNumber;
const int ReplayOp::kReleaseCallableFieldNumber;
const int ReplayOp::kNewReplaySessionFieldNumber;
const int ReplayOp::kCreateSessionResponseFieldNumber;
const int ReplayOp::kExtendSessionResponseFieldNumber;
const int ReplayOp::kPartialRunSetupResponseFieldNumber;
const int ReplayOp::kRunStepResponseFieldNumber;
const int ReplayOp::kCloseSessionResponseFieldNumber;
const int ReplayOp::kListDevicesResponseFieldNumber;
const int ReplayOp::kResetRequestResponseFieldNumber;
const int ReplayOp::kMakeCallableResponseFieldNumber;
const int ReplayOp::kRunCallableResponseFieldNumber;
const int ReplayOp::kReleaseCallableResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReplayOp::ReplayOp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ReplayOp)
}

ReplayOp::ReplayOp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ReplayOp)
}

void ReplayOp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  ReplayOp_default_oneof_instance_->create_session_ = const_cast< ::tensorflow::CreateSessionRequest*>(&::tensorflow::CreateSessionRequest::default_instance());
  ReplayOp_default_oneof_instance_->extend_session_ = const_cast< ::tensorflow::ExtendSessionRequest*>(&::tensorflow::ExtendSessionRequest::default_instance());
  ReplayOp_default_oneof_instance_->partial_run_setup_ = const_cast< ::tensorflow::PartialRunSetupRequest*>(&::tensorflow::PartialRunSetupRequest::default_instance());
  ReplayOp_default_oneof_instance_->run_step_ = const_cast< ::tensorflow::RunStepRequest*>(&::tensorflow::RunStepRequest::default_instance());
  ReplayOp_default_oneof_instance_->close_session_ = const_cast< ::tensorflow::CloseSessionRequest*>(&::tensorflow::CloseSessionRequest::default_instance());
  ReplayOp_default_oneof_instance_->list_devices_ = const_cast< ::tensorflow::ListDevicesRequest*>(&::tensorflow::ListDevicesRequest::default_instance());
  ReplayOp_default_oneof_instance_->reset_request_ = const_cast< ::tensorflow::ResetRequest*>(&::tensorflow::ResetRequest::default_instance());
  ReplayOp_default_oneof_instance_->make_callable_ = const_cast< ::tensorflow::MakeCallableRequest*>(&::tensorflow::MakeCallableRequest::default_instance());
  ReplayOp_default_oneof_instance_->run_callable_ = const_cast< ::tensorflow::RunCallableRequest*>(&::tensorflow::RunCallableRequest::default_instance());
  ReplayOp_default_oneof_instance_->release_callable_ = const_cast< ::tensorflow::ReleaseCallableRequest*>(&::tensorflow::ReleaseCallableRequest::default_instance());
  ReplayOp_default_oneof_instance_->new_replay_session_ = const_cast< ::tensorflow::NewReplaySession*>(&::tensorflow::NewReplaySession::default_instance());
  ReplayOp_default_oneof_instance_->create_session_response_ = const_cast< ::tensorflow::CreateSessionResponse*>(&::tensorflow::CreateSessionResponse::default_instance());
  ReplayOp_default_oneof_instance_->extend_session_response_ = const_cast< ::tensorflow::ExtendSessionResponse*>(&::tensorflow::ExtendSessionResponse::default_instance());
  ReplayOp_default_oneof_instance_->partial_run_setup_response_ = const_cast< ::tensorflow::PartialRunSetupResponse*>(&::tensorflow::PartialRunSetupResponse::default_instance());
  ReplayOp_default_oneof_instance_->run_step_response_ = const_cast< ::tensorflow::RunStepResponse*>(&::tensorflow::RunStepResponse::default_instance());
  ReplayOp_default_oneof_instance_->close_session_response_ = const_cast< ::tensorflow::CloseSessionResponse*>(&::tensorflow::CloseSessionResponse::default_instance());
  ReplayOp_default_oneof_instance_->list_devices_response_ = const_cast< ::tensorflow::ListDevicesResponse*>(&::tensorflow::ListDevicesResponse::default_instance());
  ReplayOp_default_oneof_instance_->reset_request_response_ = const_cast< ::tensorflow::ResetResponse*>(&::tensorflow::ResetResponse::default_instance());
  ReplayOp_default_oneof_instance_->make_callable_response_ = const_cast< ::tensorflow::MakeCallableResponse*>(&::tensorflow::MakeCallableResponse::default_instance());
  ReplayOp_default_oneof_instance_->run_callable_response_ = const_cast< ::tensorflow::RunCallableResponse*>(&::tensorflow::RunCallableResponse::default_instance());
  ReplayOp_default_oneof_instance_->release_callable_response_ = const_cast< ::tensorflow::ReleaseCallableResponse*>(&::tensorflow::ReleaseCallableResponse::default_instance());
}

ReplayOp::ReplayOp(const ReplayOp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.ReplayOp)
}

void ReplayOp::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  start_time_us_ = 0;
  end_time_us_ = 0;
  clear_has_op();
  clear_has_response();
}

ReplayOp::~ReplayOp() {
  // @@protoc_insertion_point(destructor:tensorflow.ReplayOp)
  SharedDtor();
}

void ReplayOp::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (has_op()) {
    clear_op();
  }
  if (has_response()) {
    clear_response();
  }
  if (this != default_instance_) {
  }
}

void ReplayOp::ArenaDtor(void* object) {
  ReplayOp* _this = reinterpret_cast< ReplayOp* >(object);
  (void)_this;
}
void ReplayOp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ReplayOp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplayOp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplayOp_descriptor_;
}

const ReplayOp& ReplayOp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto();
  return *default_instance_;
}

ReplayOp* ReplayOp::default_instance_ = NULL;

ReplayOp* ReplayOp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ReplayOp>(arena);
}

void ReplayOp::clear_op() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.ReplayOp)
  switch(op_case()) {
    case kCreateSession: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.create_session_;
      }
      break;
    }
    case kExtendSession: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.extend_session_;
      }
      break;
    }
    case kPartialRunSetup: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.partial_run_setup_;
      }
      break;
    }
    case kRunStep: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.run_step_;
      }
      break;
    }
    case kCloseSession: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.close_session_;
      }
      break;
    }
    case kListDevices: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.list_devices_;
      }
      break;
    }
    case kResetRequest: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.reset_request_;
      }
      break;
    }
    case kMakeCallable: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.make_callable_;
      }
      break;
    }
    case kRunCallable: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.run_callable_;
      }
      break;
    }
    case kReleaseCallable: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.release_callable_;
      }
      break;
    }
    case kNewReplaySession: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.new_replay_session_;
      }
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OP_NOT_SET;
}

void ReplayOp::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.ReplayOp)
  switch(response_case()) {
    case kCreateSessionResponse: {
      if (GetArenaNoVirtual() == NULL) {
        delete response_.create_session_response_;
      }
      break;
    }
    case kExtendSessionResponse: {
      if (GetArenaNoVirtual() == NULL) {
        delete response_.extend_session_response_;
      }
      break;
    }
    case kPartialRunSetupResponse: {
      if (GetArenaNoVirtual() == NULL) {
        delete response_.partial_run_setup_response_;
      }
      break;
    }
    case kRunStepResponse: {
      if (GetArenaNoVirtual() == NULL) {
        delete response_.run_step_response_;
      }
      break;
    }
    case kCloseSessionResponse: {
      if (GetArenaNoVirtual() == NULL) {
        delete response_.close_session_response_;
      }
      break;
    }
    case kListDevicesResponse: {
      if (GetArenaNoVirtual() == NULL) {
        delete response_.list_devices_response_;
      }
      break;
    }
    case kResetRequestResponse: {
      if (GetArenaNoVirtual() == NULL) {
        delete response_.reset_request_response_;
      }
      break;
    }
    case kMakeCallableResponse: {
      if (GetArenaNoVirtual() == NULL) {
        delete response_.make_callable_response_;
      }
      break;
    }
    case kRunCallableResponse: {
      if (GetArenaNoVirtual() == NULL) {
        delete response_.run_callable_response_;
      }
      break;
    }
    case kReleaseCallableResponse: {
      if (GetArenaNoVirtual() == NULL) {
        delete response_.release_callable_response_;
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = RESPONSE_NOT_SET;
}


void ReplayOp::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ReplayOp)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReplayOp, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReplayOp*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(start_time_us_, end_time_us_);

#undef ZR_HELPER_
#undef ZR_

  clear_op();
  clear_response();
}

bool ReplayOp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.ReplayOp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tensorflow.CreateSessionRequest create_session = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_session()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_extend_session;
        break;
      }

      // optional .tensorflow.ExtendSessionRequest extend_session = 2;
      case 2: {
        if (tag == 18) {
         parse_extend_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extend_session()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_partial_run_setup;
        break;
      }

      // optional .tensorflow.PartialRunSetupRequest partial_run_setup = 3;
      case 3: {
        if (tag == 26) {
         parse_partial_run_setup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_partial_run_setup()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_run_step;
        break;
      }

      // optional .tensorflow.RunStepRequest run_step = 4;
      case 4: {
        if (tag == 34) {
         parse_run_step:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_run_step()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_close_session;
        break;
      }

      // optional .tensorflow.CloseSessionRequest close_session = 5;
      case 5: {
        if (tag == 42) {
         parse_close_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_close_session()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_list_devices;
        break;
      }

      // optional .tensorflow.ListDevicesRequest list_devices = 6;
      case 6: {
        if (tag == 50) {
         parse_list_devices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list_devices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_reset_request;
        break;
      }

      // optional .tensorflow.ResetRequest reset_request = 7;
      case 7: {
        if (tag == 58) {
         parse_reset_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reset_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_make_callable;
        break;
      }

      // optional .tensorflow.MakeCallableRequest make_callable = 8;
      case 8: {
        if (tag == 66) {
         parse_make_callable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_make_callable()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_run_callable;
        break;
      }

      // optional .tensorflow.RunCallableRequest run_callable = 9;
      case 9: {
        if (tag == 74) {
         parse_run_callable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_run_callable()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_release_callable;
        break;
      }

      // optional .tensorflow.ReleaseCallableRequest release_callable = 10;
      case 10: {
        if (tag == 82) {
         parse_release_callable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_release_callable()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_new_replay_session;
        break;
      }

      // optional .tensorflow.NewReplaySession new_replay_session = 11;
      case 11: {
        if (tag == 90) {
         parse_new_replay_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_replay_session()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_create_session_response;
        break;
      }

      // optional .tensorflow.CreateSessionResponse create_session_response = 21;
      case 21: {
        if (tag == 170) {
         parse_create_session_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_session_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_extend_session_response;
        break;
      }

      // optional .tensorflow.ExtendSessionResponse extend_session_response = 22;
      case 22: {
        if (tag == 178) {
         parse_extend_session_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extend_session_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_partial_run_setup_response;
        break;
      }

      // optional .tensorflow.PartialRunSetupResponse partial_run_setup_response = 23;
      case 23: {
        if (tag == 186) {
         parse_partial_run_setup_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_partial_run_setup_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_run_step_response;
        break;
      }

      // optional .tensorflow.RunStepResponse run_step_response = 24;
      case 24: {
        if (tag == 194) {
         parse_run_step_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_run_step_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_close_session_response;
        break;
      }

      // optional .tensorflow.CloseSessionResponse close_session_response = 25;
      case 25: {
        if (tag == 202) {
         parse_close_session_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_close_session_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_list_devices_response;
        break;
      }

      // optional .tensorflow.ListDevicesResponse list_devices_response = 26;
      case 26: {
        if (tag == 210) {
         parse_list_devices_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list_devices_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_reset_request_response;
        break;
      }

      // optional .tensorflow.ResetResponse reset_request_response = 27;
      case 27: {
        if (tag == 218) {
         parse_reset_request_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reset_request_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_make_callable_response;
        break;
      }

      // optional .tensorflow.MakeCallableResponse make_callable_response = 28;
      case 28: {
        if (tag == 226) {
         parse_make_callable_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_make_callable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_run_callable_response;
        break;
      }

      // optional .tensorflow.RunCallableResponse run_callable_response = 29;
      case 29: {
        if (tag == 234) {
         parse_run_callable_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_run_callable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_release_callable_response;
        break;
      }

      // optional .tensorflow.ReleaseCallableResponse release_callable_response = 30;
      case 30: {
        if (tag == 242) {
         parse_release_callable_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_release_callable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(249)) goto parse_start_time_us;
        break;
      }

      // optional double start_time_us = 31;
      case 31: {
        if (tag == 249) {
         parse_start_time_us:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_time_us_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(257)) goto parse_end_time_us;
        break;
      }

      // optional double end_time_us = 32;
      case 32: {
        if (tag == 257) {
         parse_end_time_us:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_time_us_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.ReplayOp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.ReplayOp)
  return false;
#undef DO_
}

void ReplayOp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.ReplayOp)
  // optional .tensorflow.CreateSessionRequest create_session = 1;
  if (has_create_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *op_.create_session_, output);
  }

  // optional .tensorflow.ExtendSessionRequest extend_session = 2;
  if (has_extend_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *op_.extend_session_, output);
  }

  // optional .tensorflow.PartialRunSetupRequest partial_run_setup = 3;
  if (has_partial_run_setup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *op_.partial_run_setup_, output);
  }

  // optional .tensorflow.RunStepRequest run_step = 4;
  if (has_run_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *op_.run_step_, output);
  }

  // optional .tensorflow.CloseSessionRequest close_session = 5;
  if (has_close_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *op_.close_session_, output);
  }

  // optional .tensorflow.ListDevicesRequest list_devices = 6;
  if (has_list_devices()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *op_.list_devices_, output);
  }

  // optional .tensorflow.ResetRequest reset_request = 7;
  if (has_reset_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *op_.reset_request_, output);
  }

  // optional .tensorflow.MakeCallableRequest make_callable = 8;
  if (has_make_callable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *op_.make_callable_, output);
  }

  // optional .tensorflow.RunCallableRequest run_callable = 9;
  if (has_run_callable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *op_.run_callable_, output);
  }

  // optional .tensorflow.ReleaseCallableRequest release_callable = 10;
  if (has_release_callable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *op_.release_callable_, output);
  }

  // optional .tensorflow.NewReplaySession new_replay_session = 11;
  if (has_new_replay_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *op_.new_replay_session_, output);
  }

  // optional .tensorflow.CreateSessionResponse create_session_response = 21;
  if (has_create_session_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *response_.create_session_response_, output);
  }

  // optional .tensorflow.ExtendSessionResponse extend_session_response = 22;
  if (has_extend_session_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *response_.extend_session_response_, output);
  }

  // optional .tensorflow.PartialRunSetupResponse partial_run_setup_response = 23;
  if (has_partial_run_setup_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *response_.partial_run_setup_response_, output);
  }

  // optional .tensorflow.RunStepResponse run_step_response = 24;
  if (has_run_step_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *response_.run_step_response_, output);
  }

  // optional .tensorflow.CloseSessionResponse close_session_response = 25;
  if (has_close_session_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *response_.close_session_response_, output);
  }

  // optional .tensorflow.ListDevicesResponse list_devices_response = 26;
  if (has_list_devices_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *response_.list_devices_response_, output);
  }

  // optional .tensorflow.ResetResponse reset_request_response = 27;
  if (has_reset_request_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, *response_.reset_request_response_, output);
  }

  // optional .tensorflow.MakeCallableResponse make_callable_response = 28;
  if (has_make_callable_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, *response_.make_callable_response_, output);
  }

  // optional .tensorflow.RunCallableResponse run_callable_response = 29;
  if (has_run_callable_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, *response_.run_callable_response_, output);
  }

  // optional .tensorflow.ReleaseCallableResponse release_callable_response = 30;
  if (has_release_callable_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *response_.release_callable_response_, output);
  }

  // optional double start_time_us = 31;
  if (this->start_time_us() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->start_time_us(), output);
  }

  // optional double end_time_us = 32;
  if (this->end_time_us() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->end_time_us(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.ReplayOp)
}

::google::protobuf::uint8* ReplayOp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ReplayOp)
  // optional .tensorflow.CreateSessionRequest create_session = 1;
  if (has_create_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *op_.create_session_, false, target);
  }

  // optional .tensorflow.ExtendSessionRequest extend_session = 2;
  if (has_extend_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *op_.extend_session_, false, target);
  }

  // optional .tensorflow.PartialRunSetupRequest partial_run_setup = 3;
  if (has_partial_run_setup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *op_.partial_run_setup_, false, target);
  }

  // optional .tensorflow.RunStepRequest run_step = 4;
  if (has_run_step()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *op_.run_step_, false, target);
  }

  // optional .tensorflow.CloseSessionRequest close_session = 5;
  if (has_close_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *op_.close_session_, false, target);
  }

  // optional .tensorflow.ListDevicesRequest list_devices = 6;
  if (has_list_devices()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *op_.list_devices_, false, target);
  }

  // optional .tensorflow.ResetRequest reset_request = 7;
  if (has_reset_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *op_.reset_request_, false, target);
  }

  // optional .tensorflow.MakeCallableRequest make_callable = 8;
  if (has_make_callable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *op_.make_callable_, false, target);
  }

  // optional .tensorflow.RunCallableRequest run_callable = 9;
  if (has_run_callable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *op_.run_callable_, false, target);
  }

  // optional .tensorflow.ReleaseCallableRequest release_callable = 10;
  if (has_release_callable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *op_.release_callable_, false, target);
  }

  // optional .tensorflow.NewReplaySession new_replay_session = 11;
  if (has_new_replay_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *op_.new_replay_session_, false, target);
  }

  // optional .tensorflow.CreateSessionResponse create_session_response = 21;
  if (has_create_session_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *response_.create_session_response_, false, target);
  }

  // optional .tensorflow.ExtendSessionResponse extend_session_response = 22;
  if (has_extend_session_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *response_.extend_session_response_, false, target);
  }

  // optional .tensorflow.PartialRunSetupResponse partial_run_setup_response = 23;
  if (has_partial_run_setup_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, *response_.partial_run_setup_response_, false, target);
  }

  // optional .tensorflow.RunStepResponse run_step_response = 24;
  if (has_run_step_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, *response_.run_step_response_, false, target);
  }

  // optional .tensorflow.CloseSessionResponse close_session_response = 25;
  if (has_close_session_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, *response_.close_session_response_, false, target);
  }

  // optional .tensorflow.ListDevicesResponse list_devices_response = 26;
  if (has_list_devices_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        26, *response_.list_devices_response_, false, target);
  }

  // optional .tensorflow.ResetResponse reset_request_response = 27;
  if (has_reset_request_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        27, *response_.reset_request_response_, false, target);
  }

  // optional .tensorflow.MakeCallableResponse make_callable_response = 28;
  if (has_make_callable_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        28, *response_.make_callable_response_, false, target);
  }

  // optional .tensorflow.RunCallableResponse run_callable_response = 29;
  if (has_run_callable_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        29, *response_.run_callable_response_, false, target);
  }

  // optional .tensorflow.ReleaseCallableResponse release_callable_response = 30;
  if (has_release_callable_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        30, *response_.release_callable_response_, false, target);
  }

  // optional double start_time_us = 31;
  if (this->start_time_us() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->start_time_us(), target);
  }

  // optional double end_time_us = 32;
  if (this->end_time_us() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->end_time_us(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ReplayOp)
  return target;
}

int ReplayOp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ReplayOp)
  int total_size = 0;

  // optional double start_time_us = 31;
  if (this->start_time_us() != 0) {
    total_size += 2 + 8;
  }

  // optional double end_time_us = 32;
  if (this->end_time_us() != 0) {
    total_size += 2 + 8;
  }

  switch (op_case()) {
    // optional .tensorflow.CreateSessionRequest create_session = 1;
    case kCreateSession: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.create_session_);
      break;
    }
    // optional .tensorflow.ExtendSessionRequest extend_session = 2;
    case kExtendSession: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.extend_session_);
      break;
    }
    // optional .tensorflow.PartialRunSetupRequest partial_run_setup = 3;
    case kPartialRunSetup: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.partial_run_setup_);
      break;
    }
    // optional .tensorflow.RunStepRequest run_step = 4;
    case kRunStep: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.run_step_);
      break;
    }
    // optional .tensorflow.CloseSessionRequest close_session = 5;
    case kCloseSession: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.close_session_);
      break;
    }
    // optional .tensorflow.ListDevicesRequest list_devices = 6;
    case kListDevices: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.list_devices_);
      break;
    }
    // optional .tensorflow.ResetRequest reset_request = 7;
    case kResetRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.reset_request_);
      break;
    }
    // optional .tensorflow.MakeCallableRequest make_callable = 8;
    case kMakeCallable: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.make_callable_);
      break;
    }
    // optional .tensorflow.RunCallableRequest run_callable = 9;
    case kRunCallable: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.run_callable_);
      break;
    }
    // optional .tensorflow.ReleaseCallableRequest release_callable = 10;
    case kReleaseCallable: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.release_callable_);
      break;
    }
    // optional .tensorflow.NewReplaySession new_replay_session = 11;
    case kNewReplaySession: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.new_replay_session_);
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  switch (response_case()) {
    // optional .tensorflow.CreateSessionResponse create_session_response = 21;
    case kCreateSessionResponse: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.create_session_response_);
      break;
    }
    // optional .tensorflow.ExtendSessionResponse extend_session_response = 22;
    case kExtendSessionResponse: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.extend_session_response_);
      break;
    }
    // optional .tensorflow.PartialRunSetupResponse partial_run_setup_response = 23;
    case kPartialRunSetupResponse: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.partial_run_setup_response_);
      break;
    }
    // optional .tensorflow.RunStepResponse run_step_response = 24;
    case kRunStepResponse: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.run_step_response_);
      break;
    }
    // optional .tensorflow.CloseSessionResponse close_session_response = 25;
    case kCloseSessionResponse: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.close_session_response_);
      break;
    }
    // optional .tensorflow.ListDevicesResponse list_devices_response = 26;
    case kListDevicesResponse: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.list_devices_response_);
      break;
    }
    // optional .tensorflow.ResetResponse reset_request_response = 27;
    case kResetRequestResponse: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.reset_request_response_);
      break;
    }
    // optional .tensorflow.MakeCallableResponse make_callable_response = 28;
    case kMakeCallableResponse: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.make_callable_response_);
      break;
    }
    // optional .tensorflow.RunCallableResponse run_callable_response = 29;
    case kRunCallableResponse: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.run_callable_response_);
      break;
    }
    // optional .tensorflow.ReleaseCallableResponse release_callable_response = 30;
    case kReleaseCallableResponse: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.release_callable_response_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplayOp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ReplayOp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReplayOp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReplayOp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ReplayOp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ReplayOp)
    MergeFrom(*source);
  }
}

void ReplayOp::MergeFrom(const ReplayOp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ReplayOp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.op_case()) {
    case kCreateSession: {
      mutable_create_session()->::tensorflow::CreateSessionRequest::MergeFrom(from.create_session());
      break;
    }
    case kExtendSession: {
      mutable_extend_session()->::tensorflow::ExtendSessionRequest::MergeFrom(from.extend_session());
      break;
    }
    case kPartialRunSetup: {
      mutable_partial_run_setup()->::tensorflow::PartialRunSetupRequest::MergeFrom(from.partial_run_setup());
      break;
    }
    case kRunStep: {
      mutable_run_step()->::tensorflow::RunStepRequest::MergeFrom(from.run_step());
      break;
    }
    case kCloseSession: {
      mutable_close_session()->::tensorflow::CloseSessionRequest::MergeFrom(from.close_session());
      break;
    }
    case kListDevices: {
      mutable_list_devices()->::tensorflow::ListDevicesRequest::MergeFrom(from.list_devices());
      break;
    }
    case kResetRequest: {
      mutable_reset_request()->::tensorflow::ResetRequest::MergeFrom(from.reset_request());
      break;
    }
    case kMakeCallable: {
      mutable_make_callable()->::tensorflow::MakeCallableRequest::MergeFrom(from.make_callable());
      break;
    }
    case kRunCallable: {
      mutable_run_callable()->::tensorflow::RunCallableRequest::MergeFrom(from.run_callable());
      break;
    }
    case kReleaseCallable: {
      mutable_release_callable()->::tensorflow::ReleaseCallableRequest::MergeFrom(from.release_callable());
      break;
    }
    case kNewReplaySession: {
      mutable_new_replay_session()->::tensorflow::NewReplaySession::MergeFrom(from.new_replay_session());
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  switch (from.response_case()) {
    case kCreateSessionResponse: {
      mutable_create_session_response()->::tensorflow::CreateSessionResponse::MergeFrom(from.create_session_response());
      break;
    }
    case kExtendSessionResponse: {
      mutable_extend_session_response()->::tensorflow::ExtendSessionResponse::MergeFrom(from.extend_session_response());
      break;
    }
    case kPartialRunSetupResponse: {
      mutable_partial_run_setup_response()->::tensorflow::PartialRunSetupResponse::MergeFrom(from.partial_run_setup_response());
      break;
    }
    case kRunStepResponse: {
      mutable_run_step_response()->::tensorflow::RunStepResponse::MergeFrom(from.run_step_response());
      break;
    }
    case kCloseSessionResponse: {
      mutable_close_session_response()->::tensorflow::CloseSessionResponse::MergeFrom(from.close_session_response());
      break;
    }
    case kListDevicesResponse: {
      mutable_list_devices_response()->::tensorflow::ListDevicesResponse::MergeFrom(from.list_devices_response());
      break;
    }
    case kResetRequestResponse: {
      mutable_reset_request_response()->::tensorflow::ResetResponse::MergeFrom(from.reset_request_response());
      break;
    }
    case kMakeCallableResponse: {
      mutable_make_callable_response()->::tensorflow::MakeCallableResponse::MergeFrom(from.make_callable_response());
      break;
    }
    case kRunCallableResponse: {
      mutable_run_callable_response()->::tensorflow::RunCallableResponse::MergeFrom(from.run_callable_response());
      break;
    }
    case kReleaseCallableResponse: {
      mutable_release_callable_response()->::tensorflow::ReleaseCallableResponse::MergeFrom(from.release_callable_response());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  if (from.start_time_us() != 0) {
    set_start_time_us(from.start_time_us());
  }
  if (from.end_time_us() != 0) {
    set_end_time_us(from.end_time_us());
  }
}

void ReplayOp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ReplayOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplayOp::CopyFrom(const ReplayOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ReplayOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplayOp::IsInitialized() const {

  return true;
}

void ReplayOp::Swap(ReplayOp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ReplayOp temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ReplayOp::UnsafeArenaSwap(ReplayOp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ReplayOp::InternalSwap(ReplayOp* other) {
  std::swap(start_time_us_, other->start_time_us_);
  std::swap(end_time_us_, other->end_time_us_);
  std::swap(op_, other->op_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(response_, other->response_);
  std::swap(_oneof_case_[1], other->_oneof_case_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReplayOp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplayOp_descriptor_;
  metadata.reflection = ReplayOp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReplayOp

// optional double start_time_us = 31;
void ReplayOp::clear_start_time_us() {
  start_time_us_ = 0;
}
 double ReplayOp::start_time_us() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.start_time_us)
  return start_time_us_;
}
 void ReplayOp::set_start_time_us(double value) {
  
  start_time_us_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ReplayOp.start_time_us)
}

// optional double end_time_us = 32;
void ReplayOp::clear_end_time_us() {
  end_time_us_ = 0;
}
 double ReplayOp::end_time_us() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.end_time_us)
  return end_time_us_;
}
 void ReplayOp::set_end_time_us(double value) {
  
  end_time_us_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ReplayOp.end_time_us)
}

// optional .tensorflow.CreateSessionRequest create_session = 1;
bool ReplayOp::has_create_session() const {
  return op_case() == kCreateSession;
}
void ReplayOp::set_has_create_session() {
  _oneof_case_[0] = kCreateSession;
}
void ReplayOp::clear_create_session() {
  if (has_create_session()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.create_session_;
    }
    clear_has_op();
  }
}
 const ::tensorflow::CreateSessionRequest& ReplayOp::create_session() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.create_session)
  return has_create_session()
      ? *op_.create_session_
      : ::tensorflow::CreateSessionRequest::default_instance();
}
::tensorflow::CreateSessionRequest* ReplayOp::mutable_create_session() {
  if (!has_create_session()) {
    clear_op();
    set_has_create_session();
    op_.create_session_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::CreateSessionRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.create_session)
  return op_.create_session_;
}
::tensorflow::CreateSessionRequest* ReplayOp::release_create_session() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.create_session)
  if (has_create_session()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::CreateSessionRequest* temp = new ::tensorflow::CreateSessionRequest;
      temp->MergeFrom(*op_.create_session_);
      op_.create_session_ = NULL;
      return temp;
    } else {
      ::tensorflow::CreateSessionRequest* temp = op_.create_session_;
      op_.create_session_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void ReplayOp::set_allocated_create_session(::tensorflow::CreateSessionRequest* create_session) {
  clear_op();
  if (create_session) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(create_session) == NULL) {
      GetArenaNoVirtual()->Own(create_session);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(create_session)) {
      ::tensorflow::CreateSessionRequest* new_create_session = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::CreateSessionRequest >(
          GetArenaNoVirtual());
      new_create_session->CopyFrom(*create_session);
      create_session = new_create_session;
    }
    set_has_create_session();
    op_.create_session_ = create_session;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.create_session)
}
 ::tensorflow::CreateSessionRequest* ReplayOp::unsafe_arena_release_create_session() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.create_session)
  if (has_create_session()) {
    clear_has_op();
    ::tensorflow::CreateSessionRequest* temp = op_.create_session_;
    op_.create_session_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ReplayOp::unsafe_arena_set_allocated_create_session(::tensorflow::CreateSessionRequest* create_session) {
  clear_op();
  if (create_session) {
    set_has_create_session();
    op_.create_session_ = create_session;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.create_session)
}

// optional .tensorflow.ExtendSessionRequest extend_session = 2;
bool ReplayOp::has_extend_session() const {
  return op_case() == kExtendSession;
}
void ReplayOp::set_has_extend_session() {
  _oneof_case_[0] = kExtendSession;
}
void ReplayOp::clear_extend_session() {
  if (has_extend_session()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.extend_session_;
    }
    clear_has_op();
  }
}
 const ::tensorflow::ExtendSessionRequest& ReplayOp::extend_session() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.extend_session)
  return has_extend_session()
      ? *op_.extend_session_
      : ::tensorflow::ExtendSessionRequest::default_instance();
}
::tensorflow::ExtendSessionRequest* ReplayOp::mutable_extend_session() {
  if (!has_extend_session()) {
    clear_op();
    set_has_extend_session();
    op_.extend_session_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::ExtendSessionRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.extend_session)
  return op_.extend_session_;
}
::tensorflow::ExtendSessionRequest* ReplayOp::release_extend_session() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.extend_session)
  if (has_extend_session()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::ExtendSessionRequest* temp = new ::tensorflow::ExtendSessionRequest;
      temp->MergeFrom(*op_.extend_session_);
      op_.extend_session_ = NULL;
      return temp;
    } else {
      ::tensorflow::ExtendSessionRequest* temp = op_.extend_session_;
      op_.extend_session_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void ReplayOp::set_allocated_extend_session(::tensorflow::ExtendSessionRequest* extend_session) {
  clear_op();
  if (extend_session) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(extend_session) == NULL) {
      GetArenaNoVirtual()->Own(extend_session);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(extend_session)) {
      ::tensorflow::ExtendSessionRequest* new_extend_session = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::ExtendSessionRequest >(
          GetArenaNoVirtual());
      new_extend_session->CopyFrom(*extend_session);
      extend_session = new_extend_session;
    }
    set_has_extend_session();
    op_.extend_session_ = extend_session;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.extend_session)
}
 ::tensorflow::ExtendSessionRequest* ReplayOp::unsafe_arena_release_extend_session() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.extend_session)
  if (has_extend_session()) {
    clear_has_op();
    ::tensorflow::ExtendSessionRequest* temp = op_.extend_session_;
    op_.extend_session_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ReplayOp::unsafe_arena_set_allocated_extend_session(::tensorflow::ExtendSessionRequest* extend_session) {
  clear_op();
  if (extend_session) {
    set_has_extend_session();
    op_.extend_session_ = extend_session;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.extend_session)
}

// optional .tensorflow.PartialRunSetupRequest partial_run_setup = 3;
bool ReplayOp::has_partial_run_setup() const {
  return op_case() == kPartialRunSetup;
}
void ReplayOp::set_has_partial_run_setup() {
  _oneof_case_[0] = kPartialRunSetup;
}
void ReplayOp::clear_partial_run_setup() {
  if (has_partial_run_setup()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.partial_run_setup_;
    }
    clear_has_op();
  }
}
 const ::tensorflow::PartialRunSetupRequest& ReplayOp::partial_run_setup() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.partial_run_setup)
  return has_partial_run_setup()
      ? *op_.partial_run_setup_
      : ::tensorflow::PartialRunSetupRequest::default_instance();
}
::tensorflow::PartialRunSetupRequest* ReplayOp::mutable_partial_run_setup() {
  if (!has_partial_run_setup()) {
    clear_op();
    set_has_partial_run_setup();
    op_.partial_run_setup_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::PartialRunSetupRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.partial_run_setup)
  return op_.partial_run_setup_;
}
::tensorflow::PartialRunSetupRequest* ReplayOp::release_partial_run_setup() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.partial_run_setup)
  if (has_partial_run_setup()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::PartialRunSetupRequest* temp = new ::tensorflow::PartialRunSetupRequest;
      temp->MergeFrom(*op_.partial_run_setup_);
      op_.partial_run_setup_ = NULL;
      return temp;
    } else {
      ::tensorflow::PartialRunSetupRequest* temp = op_.partial_run_setup_;
      op_.partial_run_setup_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void ReplayOp::set_allocated_partial_run_setup(::tensorflow::PartialRunSetupRequest* partial_run_setup) {
  clear_op();
  if (partial_run_setup) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(partial_run_setup) == NULL) {
      GetArenaNoVirtual()->Own(partial_run_setup);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(partial_run_setup)) {
      ::tensorflow::PartialRunSetupRequest* new_partial_run_setup = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::PartialRunSetupRequest >(
          GetArenaNoVirtual());
      new_partial_run_setup->CopyFrom(*partial_run_setup);
      partial_run_setup = new_partial_run_setup;
    }
    set_has_partial_run_setup();
    op_.partial_run_setup_ = partial_run_setup;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.partial_run_setup)
}
 ::tensorflow::PartialRunSetupRequest* ReplayOp::unsafe_arena_release_partial_run_setup() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.partial_run_setup)
  if (has_partial_run_setup()) {
    clear_has_op();
    ::tensorflow::PartialRunSetupRequest* temp = op_.partial_run_setup_;
    op_.partial_run_setup_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ReplayOp::unsafe_arena_set_allocated_partial_run_setup(::tensorflow::PartialRunSetupRequest* partial_run_setup) {
  clear_op();
  if (partial_run_setup) {
    set_has_partial_run_setup();
    op_.partial_run_setup_ = partial_run_setup;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.partial_run_setup)
}

// optional .tensorflow.RunStepRequest run_step = 4;
bool ReplayOp::has_run_step() const {
  return op_case() == kRunStep;
}
void ReplayOp::set_has_run_step() {
  _oneof_case_[0] = kRunStep;
}
void ReplayOp::clear_run_step() {
  if (has_run_step()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.run_step_;
    }
    clear_has_op();
  }
}
 const ::tensorflow::RunStepRequest& ReplayOp::run_step() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.run_step)
  return has_run_step()
      ? *op_.run_step_
      : ::tensorflow::RunStepRequest::default_instance();
}
::tensorflow::RunStepRequest* ReplayOp::mutable_run_step() {
  if (!has_run_step()) {
    clear_op();
    set_has_run_step();
    op_.run_step_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::RunStepRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.run_step)
  return op_.run_step_;
}
::tensorflow::RunStepRequest* ReplayOp::release_run_step() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.run_step)
  if (has_run_step()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::RunStepRequest* temp = new ::tensorflow::RunStepRequest;
      temp->MergeFrom(*op_.run_step_);
      op_.run_step_ = NULL;
      return temp;
    } else {
      ::tensorflow::RunStepRequest* temp = op_.run_step_;
      op_.run_step_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void ReplayOp::set_allocated_run_step(::tensorflow::RunStepRequest* run_step) {
  clear_op();
  if (run_step) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(run_step) == NULL) {
      GetArenaNoVirtual()->Own(run_step);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(run_step)) {
      ::tensorflow::RunStepRequest* new_run_step = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::RunStepRequest >(
          GetArenaNoVirtual());
      new_run_step->CopyFrom(*run_step);
      run_step = new_run_step;
    }
    set_has_run_step();
    op_.run_step_ = run_step;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.run_step)
}
 ::tensorflow::RunStepRequest* ReplayOp::unsafe_arena_release_run_step() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.run_step)
  if (has_run_step()) {
    clear_has_op();
    ::tensorflow::RunStepRequest* temp = op_.run_step_;
    op_.run_step_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ReplayOp::unsafe_arena_set_allocated_run_step(::tensorflow::RunStepRequest* run_step) {
  clear_op();
  if (run_step) {
    set_has_run_step();
    op_.run_step_ = run_step;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.run_step)
}

// optional .tensorflow.CloseSessionRequest close_session = 5;
bool ReplayOp::has_close_session() const {
  return op_case() == kCloseSession;
}
void ReplayOp::set_has_close_session() {
  _oneof_case_[0] = kCloseSession;
}
void ReplayOp::clear_close_session() {
  if (has_close_session()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.close_session_;
    }
    clear_has_op();
  }
}
 const ::tensorflow::CloseSessionRequest& ReplayOp::close_session() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.close_session)
  return has_close_session()
      ? *op_.close_session_
      : ::tensorflow::CloseSessionRequest::default_instance();
}
::tensorflow::CloseSessionRequest* ReplayOp::mutable_close_session() {
  if (!has_close_session()) {
    clear_op();
    set_has_close_session();
    op_.close_session_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::CloseSessionRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.close_session)
  return op_.close_session_;
}
::tensorflow::CloseSessionRequest* ReplayOp::release_close_session() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.close_session)
  if (has_close_session()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::CloseSessionRequest* temp = new ::tensorflow::CloseSessionRequest;
      temp->MergeFrom(*op_.close_session_);
      op_.close_session_ = NULL;
      return temp;
    } else {
      ::tensorflow::CloseSessionRequest* temp = op_.close_session_;
      op_.close_session_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void ReplayOp::set_allocated_close_session(::tensorflow::CloseSessionRequest* close_session) {
  clear_op();
  if (close_session) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(close_session) == NULL) {
      GetArenaNoVirtual()->Own(close_session);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(close_session)) {
      ::tensorflow::CloseSessionRequest* new_close_session = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::CloseSessionRequest >(
          GetArenaNoVirtual());
      new_close_session->CopyFrom(*close_session);
      close_session = new_close_session;
    }
    set_has_close_session();
    op_.close_session_ = close_session;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.close_session)
}
 ::tensorflow::CloseSessionRequest* ReplayOp::unsafe_arena_release_close_session() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.close_session)
  if (has_close_session()) {
    clear_has_op();
    ::tensorflow::CloseSessionRequest* temp = op_.close_session_;
    op_.close_session_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ReplayOp::unsafe_arena_set_allocated_close_session(::tensorflow::CloseSessionRequest* close_session) {
  clear_op();
  if (close_session) {
    set_has_close_session();
    op_.close_session_ = close_session;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.close_session)
}

// optional .tensorflow.ListDevicesRequest list_devices = 6;
bool ReplayOp::has_list_devices() const {
  return op_case() == kListDevices;
}
void ReplayOp::set_has_list_devices() {
  _oneof_case_[0] = kListDevices;
}
void ReplayOp::clear_list_devices() {
  if (has_list_devices()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.list_devices_;
    }
    clear_has_op();
  }
}
 const ::tensorflow::ListDevicesRequest& ReplayOp::list_devices() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.list_devices)
  return has_list_devices()
      ? *op_.list_devices_
      : ::tensorflow::ListDevicesRequest::default_instance();
}
::tensorflow::ListDevicesRequest* ReplayOp::mutable_list_devices() {
  if (!has_list_devices()) {
    clear_op();
    set_has_list_devices();
    op_.list_devices_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::ListDevicesRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.list_devices)
  return op_.list_devices_;
}
::tensorflow::ListDevicesRequest* ReplayOp::release_list_devices() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.list_devices)
  if (has_list_devices()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::ListDevicesRequest* temp = new ::tensorflow::ListDevicesRequest;
      temp->MergeFrom(*op_.list_devices_);
      op_.list_devices_ = NULL;
      return temp;
    } else {
      ::tensorflow::ListDevicesRequest* temp = op_.list_devices_;
      op_.list_devices_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void ReplayOp::set_allocated_list_devices(::tensorflow::ListDevicesRequest* list_devices) {
  clear_op();
  if (list_devices) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(list_devices) == NULL) {
      GetArenaNoVirtual()->Own(list_devices);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(list_devices)) {
      ::tensorflow::ListDevicesRequest* new_list_devices = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::ListDevicesRequest >(
          GetArenaNoVirtual());
      new_list_devices->CopyFrom(*list_devices);
      list_devices = new_list_devices;
    }
    set_has_list_devices();
    op_.list_devices_ = list_devices;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.list_devices)
}
 ::tensorflow::ListDevicesRequest* ReplayOp::unsafe_arena_release_list_devices() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.list_devices)
  if (has_list_devices()) {
    clear_has_op();
    ::tensorflow::ListDevicesRequest* temp = op_.list_devices_;
    op_.list_devices_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ReplayOp::unsafe_arena_set_allocated_list_devices(::tensorflow::ListDevicesRequest* list_devices) {
  clear_op();
  if (list_devices) {
    set_has_list_devices();
    op_.list_devices_ = list_devices;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.list_devices)
}

// optional .tensorflow.ResetRequest reset_request = 7;
bool ReplayOp::has_reset_request() const {
  return op_case() == kResetRequest;
}
void ReplayOp::set_has_reset_request() {
  _oneof_case_[0] = kResetRequest;
}
void ReplayOp::clear_reset_request() {
  if (has_reset_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.reset_request_;
    }
    clear_has_op();
  }
}
 const ::tensorflow::ResetRequest& ReplayOp::reset_request() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.reset_request)
  return has_reset_request()
      ? *op_.reset_request_
      : ::tensorflow::ResetRequest::default_instance();
}
::tensorflow::ResetRequest* ReplayOp::mutable_reset_request() {
  if (!has_reset_request()) {
    clear_op();
    set_has_reset_request();
    op_.reset_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::ResetRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.reset_request)
  return op_.reset_request_;
}
::tensorflow::ResetRequest* ReplayOp::release_reset_request() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.reset_request)
  if (has_reset_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::ResetRequest* temp = new ::tensorflow::ResetRequest;
      temp->MergeFrom(*op_.reset_request_);
      op_.reset_request_ = NULL;
      return temp;
    } else {
      ::tensorflow::ResetRequest* temp = op_.reset_request_;
      op_.reset_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void ReplayOp::set_allocated_reset_request(::tensorflow::ResetRequest* reset_request) {
  clear_op();
  if (reset_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(reset_request) == NULL) {
      GetArenaNoVirtual()->Own(reset_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(reset_request)) {
      ::tensorflow::ResetRequest* new_reset_request = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::ResetRequest >(
          GetArenaNoVirtual());
      new_reset_request->CopyFrom(*reset_request);
      reset_request = new_reset_request;
    }
    set_has_reset_request();
    op_.reset_request_ = reset_request;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.reset_request)
}
 ::tensorflow::ResetRequest* ReplayOp::unsafe_arena_release_reset_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.reset_request)
  if (has_reset_request()) {
    clear_has_op();
    ::tensorflow::ResetRequest* temp = op_.reset_request_;
    op_.reset_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ReplayOp::unsafe_arena_set_allocated_reset_request(::tensorflow::ResetRequest* reset_request) {
  clear_op();
  if (reset_request) {
    set_has_reset_request();
    op_.reset_request_ = reset_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.reset_request)
}

// optional .tensorflow.MakeCallableRequest make_callable = 8;
bool ReplayOp::has_make_callable() const {
  return op_case() == kMakeCallable;
}
void ReplayOp::set_has_make_callable() {
  _oneof_case_[0] = kMakeCallable;
}
void ReplayOp::clear_make_callable() {
  if (has_make_callable()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.make_callable_;
    }
    clear_has_op();
  }
}
 const ::tensorflow::MakeCallableRequest& ReplayOp::make_callable() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.make_callable)
  return has_make_callable()
      ? *op_.make_callable_
      : ::tensorflow::MakeCallableRequest::default_instance();
}
::tensorflow::MakeCallableRequest* ReplayOp::mutable_make_callable() {
  if (!has_make_callable()) {
    clear_op();
    set_has_make_callable();
    op_.make_callable_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::MakeCallableRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.make_callable)
  return op_.make_callable_;
}
::tensorflow::MakeCallableRequest* ReplayOp::release_make_callable() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.make_callable)
  if (has_make_callable()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::MakeCallableRequest* temp = new ::tensorflow::MakeCallableRequest;
      temp->MergeFrom(*op_.make_callable_);
      op_.make_callable_ = NULL;
      return temp;
    } else {
      ::tensorflow::MakeCallableRequest* temp = op_.make_callable_;
      op_.make_callable_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void ReplayOp::set_allocated_make_callable(::tensorflow::MakeCallableRequest* make_callable) {
  clear_op();
  if (make_callable) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(make_callable) == NULL) {
      GetArenaNoVirtual()->Own(make_callable);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(make_callable)) {
      ::tensorflow::MakeCallableRequest* new_make_callable = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::MakeCallableRequest >(
          GetArenaNoVirtual());
      new_make_callable->CopyFrom(*make_callable);
      make_callable = new_make_callable;
    }
    set_has_make_callable();
    op_.make_callable_ = make_callable;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.make_callable)
}
 ::tensorflow::MakeCallableRequest* ReplayOp::unsafe_arena_release_make_callable() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.make_callable)
  if (has_make_callable()) {
    clear_has_op();
    ::tensorflow::MakeCallableRequest* temp = op_.make_callable_;
    op_.make_callable_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ReplayOp::unsafe_arena_set_allocated_make_callable(::tensorflow::MakeCallableRequest* make_callable) {
  clear_op();
  if (make_callable) {
    set_has_make_callable();
    op_.make_callable_ = make_callable;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.make_callable)
}

// optional .tensorflow.RunCallableRequest run_callable = 9;
bool ReplayOp::has_run_callable() const {
  return op_case() == kRunCallable;
}
void ReplayOp::set_has_run_callable() {
  _oneof_case_[0] = kRunCallable;
}
void ReplayOp::clear_run_callable() {
  if (has_run_callable()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.run_callable_;
    }
    clear_has_op();
  }
}
 const ::tensorflow::RunCallableRequest& ReplayOp::run_callable() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.run_callable)
  return has_run_callable()
      ? *op_.run_callable_
      : ::tensorflow::RunCallableRequest::default_instance();
}
::tensorflow::RunCallableRequest* ReplayOp::mutable_run_callable() {
  if (!has_run_callable()) {
    clear_op();
    set_has_run_callable();
    op_.run_callable_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::RunCallableRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.run_callable)
  return op_.run_callable_;
}
::tensorflow::RunCallableRequest* ReplayOp::release_run_callable() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.run_callable)
  if (has_run_callable()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::RunCallableRequest* temp = new ::tensorflow::RunCallableRequest;
      temp->MergeFrom(*op_.run_callable_);
      op_.run_callable_ = NULL;
      return temp;
    } else {
      ::tensorflow::RunCallableRequest* temp = op_.run_callable_;
      op_.run_callable_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void ReplayOp::set_allocated_run_callable(::tensorflow::RunCallableRequest* run_callable) {
  clear_op();
  if (run_callable) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(run_callable) == NULL) {
      GetArenaNoVirtual()->Own(run_callable);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(run_callable)) {
      ::tensorflow::RunCallableRequest* new_run_callable = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::RunCallableRequest >(
          GetArenaNoVirtual());
      new_run_callable->CopyFrom(*run_callable);
      run_callable = new_run_callable;
    }
    set_has_run_callable();
    op_.run_callable_ = run_callable;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.run_callable)
}
 ::tensorflow::RunCallableRequest* ReplayOp::unsafe_arena_release_run_callable() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.run_callable)
  if (has_run_callable()) {
    clear_has_op();
    ::tensorflow::RunCallableRequest* temp = op_.run_callable_;
    op_.run_callable_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ReplayOp::unsafe_arena_set_allocated_run_callable(::tensorflow::RunCallableRequest* run_callable) {
  clear_op();
  if (run_callable) {
    set_has_run_callable();
    op_.run_callable_ = run_callable;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.run_callable)
}

// optional .tensorflow.ReleaseCallableRequest release_callable = 10;
bool ReplayOp::has_release_callable() const {
  return op_case() == kReleaseCallable;
}
void ReplayOp::set_has_release_callable() {
  _oneof_case_[0] = kReleaseCallable;
}
void ReplayOp::clear_release_callable() {
  if (has_release_callable()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.release_callable_;
    }
    clear_has_op();
  }
}
 const ::tensorflow::ReleaseCallableRequest& ReplayOp::release_callable() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.release_callable)
  return has_release_callable()
      ? *op_.release_callable_
      : ::tensorflow::ReleaseCallableRequest::default_instance();
}
::tensorflow::ReleaseCallableRequest* ReplayOp::mutable_release_callable() {
  if (!has_release_callable()) {
    clear_op();
    set_has_release_callable();
    op_.release_callable_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::ReleaseCallableRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.release_callable)
  return op_.release_callable_;
}
::tensorflow::ReleaseCallableRequest* ReplayOp::release_release_callable() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.release_callable)
  if (has_release_callable()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::ReleaseCallableRequest* temp = new ::tensorflow::ReleaseCallableRequest;
      temp->MergeFrom(*op_.release_callable_);
      op_.release_callable_ = NULL;
      return temp;
    } else {
      ::tensorflow::ReleaseCallableRequest* temp = op_.release_callable_;
      op_.release_callable_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void ReplayOp::set_allocated_release_callable(::tensorflow::ReleaseCallableRequest* release_callable) {
  clear_op();
  if (release_callable) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(release_callable) == NULL) {
      GetArenaNoVirtual()->Own(release_callable);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(release_callable)) {
      ::tensorflow::ReleaseCallableRequest* new_release_callable = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::ReleaseCallableRequest >(
          GetArenaNoVirtual());
      new_release_callable->CopyFrom(*release_callable);
      release_callable = new_release_callable;
    }
    set_has_release_callable();
    op_.release_callable_ = release_callable;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.release_callable)
}
 ::tensorflow::ReleaseCallableRequest* ReplayOp::unsafe_arena_release_release_callable() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.release_callable)
  if (has_release_callable()) {
    clear_has_op();
    ::tensorflow::ReleaseCallableRequest* temp = op_.release_callable_;
    op_.release_callable_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ReplayOp::unsafe_arena_set_allocated_release_callable(::tensorflow::ReleaseCallableRequest* release_callable) {
  clear_op();
  if (release_callable) {
    set_has_release_callable();
    op_.release_callable_ = release_callable;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.release_callable)
}

// optional .tensorflow.NewReplaySession new_replay_session = 11;
bool ReplayOp::has_new_replay_session() const {
  return op_case() == kNewReplaySession;
}
void ReplayOp::set_has_new_replay_session() {
  _oneof_case_[0] = kNewReplaySession;
}
void ReplayOp::clear_new_replay_session() {
  if (has_new_replay_session()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.new_replay_session_;
    }
    clear_has_op();
  }
}
 const ::tensorflow::NewReplaySession& ReplayOp::new_replay_session() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.new_replay_session)
  return has_new_replay_session()
      ? *op_.new_replay_session_
      : ::tensorflow::NewReplaySession::default_instance();
}
::tensorflow::NewReplaySession* ReplayOp::mutable_new_replay_session() {
  if (!has_new_replay_session()) {
    clear_op();
    set_has_new_replay_session();
    op_.new_replay_session_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::NewReplaySession >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.new_replay_session)
  return op_.new_replay_session_;
}
::tensorflow::NewReplaySession* ReplayOp::release_new_replay_session() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.new_replay_session)
  if (has_new_replay_session()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::NewReplaySession* temp = new ::tensorflow::NewReplaySession;
      temp->MergeFrom(*op_.new_replay_session_);
      op_.new_replay_session_ = NULL;
      return temp;
    } else {
      ::tensorflow::NewReplaySession* temp = op_.new_replay_session_;
      op_.new_replay_session_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void ReplayOp::set_allocated_new_replay_session(::tensorflow::NewReplaySession* new_replay_session) {
  clear_op();
  if (new_replay_session) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(new_replay_session) == NULL) {
      GetArenaNoVirtual()->Own(new_replay_session);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(new_replay_session)) {
      ::tensorflow::NewReplaySession* new_new_replay_session = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::NewReplaySession >(
          GetArenaNoVirtual());
      new_new_replay_session->CopyFrom(*new_replay_session);
      new_replay_session = new_new_replay_session;
    }
    set_has_new_replay_session();
    op_.new_replay_session_ = new_replay_session;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.new_replay_session)
}
 ::tensorflow::NewReplaySession* ReplayOp::unsafe_arena_release_new_replay_session() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.new_replay_session)
  if (has_new_replay_session()) {
    clear_has_op();
    ::tensorflow::NewReplaySession* temp = op_.new_replay_session_;
    op_.new_replay_session_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ReplayOp::unsafe_arena_set_allocated_new_replay_session(::tensorflow::NewReplaySession* new_replay_session) {
  clear_op();
  if (new_replay_session) {
    set_has_new_replay_session();
    op_.new_replay_session_ = new_replay_session;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.new_replay_session)
}

// optional .tensorflow.CreateSessionResponse create_session_response = 21;
bool ReplayOp::has_create_session_response() const {
  return response_case() == kCreateSessionResponse;
}
void ReplayOp::set_has_create_session_response() {
  _oneof_case_[1] = kCreateSessionResponse;
}
void ReplayOp::clear_create_session_response() {
  if (has_create_session_response()) {
    if (GetArenaNoVirtual() == NULL) {
      delete response_.create_session_response_;
    }
    clear_has_response();
  }
}
 const ::tensorflow::CreateSessionResponse& ReplayOp::create_session_response() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.create_session_response)
  return has_create_session_response()
      ? *response_.create_session_response_
      : ::tensorflow::CreateSessionResponse::default_instance();
}
::tensorflow::CreateSessionResponse* ReplayOp::mutable_create_session_response() {
  if (!has_create_session_response()) {
    clear_response();
    set_has_create_session_response();
    response_.create_session_response_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::CreateSessionResponse >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.create_session_response)
  return response_.create_session_response_;
}
::tensorflow::CreateSessionResponse* ReplayOp::release_create_session_response() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.create_session_response)
  if (has_create_session_response()) {
    clear_has_response();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::CreateSessionResponse* temp = new ::tensorflow::CreateSessionResponse;
      temp->MergeFrom(*response_.create_session_response_);
      response_.create_session_response_ = NULL;
      return temp;
    } else {
      ::tensorflow::CreateSessionResponse* temp = response_.create_session_response_;
      response_.create_session_response_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void ReplayOp::set_allocated_create_session_response(::tensorflow::CreateSessionResponse* create_session_response) {
  clear_response();
  if (create_session_response) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(create_session_response) == NULL) {
      GetArenaNoVirtual()->Own(create_session_response);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(create_session_response)) {
      ::tensorflow::CreateSessionResponse* new_create_session_response = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::CreateSessionResponse >(
          GetArenaNoVirtual());
      new_create_session_response->CopyFrom(*create_session_response);
      create_session_response = new_create_session_response;
    }
    set_has_create_session_response();
    response_.create_session_response_ = create_session_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.create_session_response)
}
 ::tensorflow::CreateSessionResponse* ReplayOp::unsafe_arena_release_create_session_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.create_session_response)
  if (has_create_session_response()) {
    clear_has_response();
    ::tensorflow::CreateSessionResponse* temp = response_.create_session_response_;
    response_.create_session_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ReplayOp::unsafe_arena_set_allocated_create_session_response(::tensorflow::CreateSessionResponse* create_session_response) {
  clear_response();
  if (create_session_response) {
    set_has_create_session_response();
    response_.create_session_response_ = create_session_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.create_session_response)
}

// optional .tensorflow.ExtendSessionResponse extend_session_response = 22;
bool ReplayOp::has_extend_session_response() const {
  return response_case() == kExtendSessionResponse;
}
void ReplayOp::set_has_extend_session_response() {
  _oneof_case_[1] = kExtendSessionResponse;
}
void ReplayOp::clear_extend_session_response() {
  if (has_extend_session_response()) {
    if (GetArenaNoVirtual() == NULL) {
      delete response_.extend_session_response_;
    }
    clear_has_response();
  }
}
 const ::tensorflow::ExtendSessionResponse& ReplayOp::extend_session_response() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.extend_session_response)
  return has_extend_session_response()
      ? *response_.extend_session_response_
      : ::tensorflow::ExtendSessionResponse::default_instance();
}
::tensorflow::ExtendSessionResponse* ReplayOp::mutable_extend_session_response() {
  if (!has_extend_session_response()) {
    clear_response();
    set_has_extend_session_response();
    response_.extend_session_response_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::ExtendSessionResponse >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.extend_session_response)
  return response_.extend_session_response_;
}
::tensorflow::ExtendSessionResponse* ReplayOp::release_extend_session_response() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.extend_session_response)
  if (has_extend_session_response()) {
    clear_has_response();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::ExtendSessionResponse* temp = new ::tensorflow::ExtendSessionResponse;
      temp->MergeFrom(*response_.extend_session_response_);
      response_.extend_session_response_ = NULL;
      return temp;
    } else {
      ::tensorflow::ExtendSessionResponse* temp = response_.extend_session_response_;
      response_.extend_session_response_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void ReplayOp::set_allocated_extend_session_response(::tensorflow::ExtendSessionResponse* extend_session_response) {
  clear_response();
  if (extend_session_response) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(extend_session_response) == NULL) {
      GetArenaNoVirtual()->Own(extend_session_response);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(extend_session_response)) {
      ::tensorflow::ExtendSessionResponse* new_extend_session_response = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::ExtendSessionResponse >(
          GetArenaNoVirtual());
      new_extend_session_response->CopyFrom(*extend_session_response);
      extend_session_response = new_extend_session_response;
    }
    set_has_extend_session_response();
    response_.extend_session_response_ = extend_session_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.extend_session_response)
}
 ::tensorflow::ExtendSessionResponse* ReplayOp::unsafe_arena_release_extend_session_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.extend_session_response)
  if (has_extend_session_response()) {
    clear_has_response();
    ::tensorflow::ExtendSessionResponse* temp = response_.extend_session_response_;
    response_.extend_session_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ReplayOp::unsafe_arena_set_allocated_extend_session_response(::tensorflow::ExtendSessionResponse* extend_session_response) {
  clear_response();
  if (extend_session_response) {
    set_has_extend_session_response();
    response_.extend_session_response_ = extend_session_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.extend_session_response)
}

// optional .tensorflow.PartialRunSetupResponse partial_run_setup_response = 23;
bool ReplayOp::has_partial_run_setup_response() const {
  return response_case() == kPartialRunSetupResponse;
}
void ReplayOp::set_has_partial_run_setup_response() {
  _oneof_case_[1] = kPartialRunSetupResponse;
}
void ReplayOp::clear_partial_run_setup_response() {
  if (has_partial_run_setup_response()) {
    if (GetArenaNoVirtual() == NULL) {
      delete response_.partial_run_setup_response_;
    }
    clear_has_response();
  }
}
 const ::tensorflow::PartialRunSetupResponse& ReplayOp::partial_run_setup_response() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.partial_run_setup_response)
  return has_partial_run_setup_response()
      ? *response_.partial_run_setup_response_
      : ::tensorflow::PartialRunSetupResponse::default_instance();
}
::tensorflow::PartialRunSetupResponse* ReplayOp::mutable_partial_run_setup_response() {
  if (!has_partial_run_setup_response()) {
    clear_response();
    set_has_partial_run_setup_response();
    response_.partial_run_setup_response_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::PartialRunSetupResponse >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.partial_run_setup_response)
  return response_.partial_run_setup_response_;
}
::tensorflow::PartialRunSetupResponse* ReplayOp::release_partial_run_setup_response() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.partial_run_setup_response)
  if (has_partial_run_setup_response()) {
    clear_has_response();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::PartialRunSetupResponse* temp = new ::tensorflow::PartialRunSetupResponse;
      temp->MergeFrom(*response_.partial_run_setup_response_);
      response_.partial_run_setup_response_ = NULL;
      return temp;
    } else {
      ::tensorflow::PartialRunSetupResponse* temp = response_.partial_run_setup_response_;
      response_.partial_run_setup_response_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void ReplayOp::set_allocated_partial_run_setup_response(::tensorflow::PartialRunSetupResponse* partial_run_setup_response) {
  clear_response();
  if (partial_run_setup_response) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(partial_run_setup_response) == NULL) {
      GetArenaNoVirtual()->Own(partial_run_setup_response);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(partial_run_setup_response)) {
      ::tensorflow::PartialRunSetupResponse* new_partial_run_setup_response = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::PartialRunSetupResponse >(
          GetArenaNoVirtual());
      new_partial_run_setup_response->CopyFrom(*partial_run_setup_response);
      partial_run_setup_response = new_partial_run_setup_response;
    }
    set_has_partial_run_setup_response();
    response_.partial_run_setup_response_ = partial_run_setup_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.partial_run_setup_response)
}
 ::tensorflow::PartialRunSetupResponse* ReplayOp::unsafe_arena_release_partial_run_setup_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.partial_run_setup_response)
  if (has_partial_run_setup_response()) {
    clear_has_response();
    ::tensorflow::PartialRunSetupResponse* temp = response_.partial_run_setup_response_;
    response_.partial_run_setup_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ReplayOp::unsafe_arena_set_allocated_partial_run_setup_response(::tensorflow::PartialRunSetupResponse* partial_run_setup_response) {
  clear_response();
  if (partial_run_setup_response) {
    set_has_partial_run_setup_response();
    response_.partial_run_setup_response_ = partial_run_setup_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.partial_run_setup_response)
}

// optional .tensorflow.RunStepResponse run_step_response = 24;
bool ReplayOp::has_run_step_response() const {
  return response_case() == kRunStepResponse;
}
void ReplayOp::set_has_run_step_response() {
  _oneof_case_[1] = kRunStepResponse;
}
void ReplayOp::clear_run_step_response() {
  if (has_run_step_response()) {
    if (GetArenaNoVirtual() == NULL) {
      delete response_.run_step_response_;
    }
    clear_has_response();
  }
}
 const ::tensorflow::RunStepResponse& ReplayOp::run_step_response() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.run_step_response)
  return has_run_step_response()
      ? *response_.run_step_response_
      : ::tensorflow::RunStepResponse::default_instance();
}
::tensorflow::RunStepResponse* ReplayOp::mutable_run_step_response() {
  if (!has_run_step_response()) {
    clear_response();
    set_has_run_step_response();
    response_.run_step_response_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::RunStepResponse >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.run_step_response)
  return response_.run_step_response_;
}
::tensorflow::RunStepResponse* ReplayOp::release_run_step_response() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.run_step_response)
  if (has_run_step_response()) {
    clear_has_response();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::RunStepResponse* temp = new ::tensorflow::RunStepResponse;
      temp->MergeFrom(*response_.run_step_response_);
      response_.run_step_response_ = NULL;
      return temp;
    } else {
      ::tensorflow::RunStepResponse* temp = response_.run_step_response_;
      response_.run_step_response_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void ReplayOp::set_allocated_run_step_response(::tensorflow::RunStepResponse* run_step_response) {
  clear_response();
  if (run_step_response) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(run_step_response) == NULL) {
      GetArenaNoVirtual()->Own(run_step_response);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(run_step_response)) {
      ::tensorflow::RunStepResponse* new_run_step_response = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::RunStepResponse >(
          GetArenaNoVirtual());
      new_run_step_response->CopyFrom(*run_step_response);
      run_step_response = new_run_step_response;
    }
    set_has_run_step_response();
    response_.run_step_response_ = run_step_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.run_step_response)
}
 ::tensorflow::RunStepResponse* ReplayOp::unsafe_arena_release_run_step_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.run_step_response)
  if (has_run_step_response()) {
    clear_has_response();
    ::tensorflow::RunStepResponse* temp = response_.run_step_response_;
    response_.run_step_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ReplayOp::unsafe_arena_set_allocated_run_step_response(::tensorflow::RunStepResponse* run_step_response) {
  clear_response();
  if (run_step_response) {
    set_has_run_step_response();
    response_.run_step_response_ = run_step_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.run_step_response)
}

// optional .tensorflow.CloseSessionResponse close_session_response = 25;
bool ReplayOp::has_close_session_response() const {
  return response_case() == kCloseSessionResponse;
}
void ReplayOp::set_has_close_session_response() {
  _oneof_case_[1] = kCloseSessionResponse;
}
void ReplayOp::clear_close_session_response() {
  if (has_close_session_response()) {
    if (GetArenaNoVirtual() == NULL) {
      delete response_.close_session_response_;
    }
    clear_has_response();
  }
}
 const ::tensorflow::CloseSessionResponse& ReplayOp::close_session_response() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.close_session_response)
  return has_close_session_response()
      ? *response_.close_session_response_
      : ::tensorflow::CloseSessionResponse::default_instance();
}
::tensorflow::CloseSessionResponse* ReplayOp::mutable_close_session_response() {
  if (!has_close_session_response()) {
    clear_response();
    set_has_close_session_response();
    response_.close_session_response_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::CloseSessionResponse >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.close_session_response)
  return response_.close_session_response_;
}
::tensorflow::CloseSessionResponse* ReplayOp::release_close_session_response() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.close_session_response)
  if (has_close_session_response()) {
    clear_has_response();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::CloseSessionResponse* temp = new ::tensorflow::CloseSessionResponse;
      temp->MergeFrom(*response_.close_session_response_);
      response_.close_session_response_ = NULL;
      return temp;
    } else {
      ::tensorflow::CloseSessionResponse* temp = response_.close_session_response_;
      response_.close_session_response_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void ReplayOp::set_allocated_close_session_response(::tensorflow::CloseSessionResponse* close_session_response) {
  clear_response();
  if (close_session_response) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(close_session_response) == NULL) {
      GetArenaNoVirtual()->Own(close_session_response);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(close_session_response)) {
      ::tensorflow::CloseSessionResponse* new_close_session_response = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::CloseSessionResponse >(
          GetArenaNoVirtual());
      new_close_session_response->CopyFrom(*close_session_response);
      close_session_response = new_close_session_response;
    }
    set_has_close_session_response();
    response_.close_session_response_ = close_session_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.close_session_response)
}
 ::tensorflow::CloseSessionResponse* ReplayOp::unsafe_arena_release_close_session_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.close_session_response)
  if (has_close_session_response()) {
    clear_has_response();
    ::tensorflow::CloseSessionResponse* temp = response_.close_session_response_;
    response_.close_session_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ReplayOp::unsafe_arena_set_allocated_close_session_response(::tensorflow::CloseSessionResponse* close_session_response) {
  clear_response();
  if (close_session_response) {
    set_has_close_session_response();
    response_.close_session_response_ = close_session_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.close_session_response)
}

// optional .tensorflow.ListDevicesResponse list_devices_response = 26;
bool ReplayOp::has_list_devices_response() const {
  return response_case() == kListDevicesResponse;
}
void ReplayOp::set_has_list_devices_response() {
  _oneof_case_[1] = kListDevicesResponse;
}
void ReplayOp::clear_list_devices_response() {
  if (has_list_devices_response()) {
    if (GetArenaNoVirtual() == NULL) {
      delete response_.list_devices_response_;
    }
    clear_has_response();
  }
}
 const ::tensorflow::ListDevicesResponse& ReplayOp::list_devices_response() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.list_devices_response)
  return has_list_devices_response()
      ? *response_.list_devices_response_
      : ::tensorflow::ListDevicesResponse::default_instance();
}
::tensorflow::ListDevicesResponse* ReplayOp::mutable_list_devices_response() {
  if (!has_list_devices_response()) {
    clear_response();
    set_has_list_devices_response();
    response_.list_devices_response_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::ListDevicesResponse >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.list_devices_response)
  return response_.list_devices_response_;
}
::tensorflow::ListDevicesResponse* ReplayOp::release_list_devices_response() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.list_devices_response)
  if (has_list_devices_response()) {
    clear_has_response();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::ListDevicesResponse* temp = new ::tensorflow::ListDevicesResponse;
      temp->MergeFrom(*response_.list_devices_response_);
      response_.list_devices_response_ = NULL;
      return temp;
    } else {
      ::tensorflow::ListDevicesResponse* temp = response_.list_devices_response_;
      response_.list_devices_response_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void ReplayOp::set_allocated_list_devices_response(::tensorflow::ListDevicesResponse* list_devices_response) {
  clear_response();
  if (list_devices_response) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(list_devices_response) == NULL) {
      GetArenaNoVirtual()->Own(list_devices_response);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(list_devices_response)) {
      ::tensorflow::ListDevicesResponse* new_list_devices_response = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::ListDevicesResponse >(
          GetArenaNoVirtual());
      new_list_devices_response->CopyFrom(*list_devices_response);
      list_devices_response = new_list_devices_response;
    }
    set_has_list_devices_response();
    response_.list_devices_response_ = list_devices_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.list_devices_response)
}
 ::tensorflow::ListDevicesResponse* ReplayOp::unsafe_arena_release_list_devices_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.list_devices_response)
  if (has_list_devices_response()) {
    clear_has_response();
    ::tensorflow::ListDevicesResponse* temp = response_.list_devices_response_;
    response_.list_devices_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ReplayOp::unsafe_arena_set_allocated_list_devices_response(::tensorflow::ListDevicesResponse* list_devices_response) {
  clear_response();
  if (list_devices_response) {
    set_has_list_devices_response();
    response_.list_devices_response_ = list_devices_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.list_devices_response)
}

// optional .tensorflow.ResetResponse reset_request_response = 27;
bool ReplayOp::has_reset_request_response() const {
  return response_case() == kResetRequestResponse;
}
void ReplayOp::set_has_reset_request_response() {
  _oneof_case_[1] = kResetRequestResponse;
}
void ReplayOp::clear_reset_request_response() {
  if (has_reset_request_response()) {
    if (GetArenaNoVirtual() == NULL) {
      delete response_.reset_request_response_;
    }
    clear_has_response();
  }
}
 const ::tensorflow::ResetResponse& ReplayOp::reset_request_response() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.reset_request_response)
  return has_reset_request_response()
      ? *response_.reset_request_response_
      : ::tensorflow::ResetResponse::default_instance();
}
::tensorflow::ResetResponse* ReplayOp::mutable_reset_request_response() {
  if (!has_reset_request_response()) {
    clear_response();
    set_has_reset_request_response();
    response_.reset_request_response_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::ResetResponse >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.reset_request_response)
  return response_.reset_request_response_;
}
::tensorflow::ResetResponse* ReplayOp::release_reset_request_response() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.reset_request_response)
  if (has_reset_request_response()) {
    clear_has_response();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::ResetResponse* temp = new ::tensorflow::ResetResponse;
      temp->MergeFrom(*response_.reset_request_response_);
      response_.reset_request_response_ = NULL;
      return temp;
    } else {
      ::tensorflow::ResetResponse* temp = response_.reset_request_response_;
      response_.reset_request_response_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void ReplayOp::set_allocated_reset_request_response(::tensorflow::ResetResponse* reset_request_response) {
  clear_response();
  if (reset_request_response) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(reset_request_response) == NULL) {
      GetArenaNoVirtual()->Own(reset_request_response);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(reset_request_response)) {
      ::tensorflow::ResetResponse* new_reset_request_response = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::ResetResponse >(
          GetArenaNoVirtual());
      new_reset_request_response->CopyFrom(*reset_request_response);
      reset_request_response = new_reset_request_response;
    }
    set_has_reset_request_response();
    response_.reset_request_response_ = reset_request_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.reset_request_response)
}
 ::tensorflow::ResetResponse* ReplayOp::unsafe_arena_release_reset_request_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.reset_request_response)
  if (has_reset_request_response()) {
    clear_has_response();
    ::tensorflow::ResetResponse* temp = response_.reset_request_response_;
    response_.reset_request_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ReplayOp::unsafe_arena_set_allocated_reset_request_response(::tensorflow::ResetResponse* reset_request_response) {
  clear_response();
  if (reset_request_response) {
    set_has_reset_request_response();
    response_.reset_request_response_ = reset_request_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.reset_request_response)
}

// optional .tensorflow.MakeCallableResponse make_callable_response = 28;
bool ReplayOp::has_make_callable_response() const {
  return response_case() == kMakeCallableResponse;
}
void ReplayOp::set_has_make_callable_response() {
  _oneof_case_[1] = kMakeCallableResponse;
}
void ReplayOp::clear_make_callable_response() {
  if (has_make_callable_response()) {
    if (GetArenaNoVirtual() == NULL) {
      delete response_.make_callable_response_;
    }
    clear_has_response();
  }
}
 const ::tensorflow::MakeCallableResponse& ReplayOp::make_callable_response() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.make_callable_response)
  return has_make_callable_response()
      ? *response_.make_callable_response_
      : ::tensorflow::MakeCallableResponse::default_instance();
}
::tensorflow::MakeCallableResponse* ReplayOp::mutable_make_callable_response() {
  if (!has_make_callable_response()) {
    clear_response();
    set_has_make_callable_response();
    response_.make_callable_response_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::MakeCallableResponse >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.make_callable_response)
  return response_.make_callable_response_;
}
::tensorflow::MakeCallableResponse* ReplayOp::release_make_callable_response() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.make_callable_response)
  if (has_make_callable_response()) {
    clear_has_response();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::MakeCallableResponse* temp = new ::tensorflow::MakeCallableResponse;
      temp->MergeFrom(*response_.make_callable_response_);
      response_.make_callable_response_ = NULL;
      return temp;
    } else {
      ::tensorflow::MakeCallableResponse* temp = response_.make_callable_response_;
      response_.make_callable_response_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void ReplayOp::set_allocated_make_callable_response(::tensorflow::MakeCallableResponse* make_callable_response) {
  clear_response();
  if (make_callable_response) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(make_callable_response) == NULL) {
      GetArenaNoVirtual()->Own(make_callable_response);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(make_callable_response)) {
      ::tensorflow::MakeCallableResponse* new_make_callable_response = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::MakeCallableResponse >(
          GetArenaNoVirtual());
      new_make_callable_response->CopyFrom(*make_callable_response);
      make_callable_response = new_make_callable_response;
    }
    set_has_make_callable_response();
    response_.make_callable_response_ = make_callable_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.make_callable_response)
}
 ::tensorflow::MakeCallableResponse* ReplayOp::unsafe_arena_release_make_callable_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.make_callable_response)
  if (has_make_callable_response()) {
    clear_has_response();
    ::tensorflow::MakeCallableResponse* temp = response_.make_callable_response_;
    response_.make_callable_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ReplayOp::unsafe_arena_set_allocated_make_callable_response(::tensorflow::MakeCallableResponse* make_callable_response) {
  clear_response();
  if (make_callable_response) {
    set_has_make_callable_response();
    response_.make_callable_response_ = make_callable_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.make_callable_response)
}

// optional .tensorflow.RunCallableResponse run_callable_response = 29;
bool ReplayOp::has_run_callable_response() const {
  return response_case() == kRunCallableResponse;
}
void ReplayOp::set_has_run_callable_response() {
  _oneof_case_[1] = kRunCallableResponse;
}
void ReplayOp::clear_run_callable_response() {
  if (has_run_callable_response()) {
    if (GetArenaNoVirtual() == NULL) {
      delete response_.run_callable_response_;
    }
    clear_has_response();
  }
}
 const ::tensorflow::RunCallableResponse& ReplayOp::run_callable_response() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.run_callable_response)
  return has_run_callable_response()
      ? *response_.run_callable_response_
      : ::tensorflow::RunCallableResponse::default_instance();
}
::tensorflow::RunCallableResponse* ReplayOp::mutable_run_callable_response() {
  if (!has_run_callable_response()) {
    clear_response();
    set_has_run_callable_response();
    response_.run_callable_response_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::RunCallableResponse >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.run_callable_response)
  return response_.run_callable_response_;
}
::tensorflow::RunCallableResponse* ReplayOp::release_run_callable_response() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.run_callable_response)
  if (has_run_callable_response()) {
    clear_has_response();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::RunCallableResponse* temp = new ::tensorflow::RunCallableResponse;
      temp->MergeFrom(*response_.run_callable_response_);
      response_.run_callable_response_ = NULL;
      return temp;
    } else {
      ::tensorflow::RunCallableResponse* temp = response_.run_callable_response_;
      response_.run_callable_response_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void ReplayOp::set_allocated_run_callable_response(::tensorflow::RunCallableResponse* run_callable_response) {
  clear_response();
  if (run_callable_response) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(run_callable_response) == NULL) {
      GetArenaNoVirtual()->Own(run_callable_response);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(run_callable_response)) {
      ::tensorflow::RunCallableResponse* new_run_callable_response = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::RunCallableResponse >(
          GetArenaNoVirtual());
      new_run_callable_response->CopyFrom(*run_callable_response);
      run_callable_response = new_run_callable_response;
    }
    set_has_run_callable_response();
    response_.run_callable_response_ = run_callable_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.run_callable_response)
}
 ::tensorflow::RunCallableResponse* ReplayOp::unsafe_arena_release_run_callable_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.run_callable_response)
  if (has_run_callable_response()) {
    clear_has_response();
    ::tensorflow::RunCallableResponse* temp = response_.run_callable_response_;
    response_.run_callable_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ReplayOp::unsafe_arena_set_allocated_run_callable_response(::tensorflow::RunCallableResponse* run_callable_response) {
  clear_response();
  if (run_callable_response) {
    set_has_run_callable_response();
    response_.run_callable_response_ = run_callable_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.run_callable_response)
}

// optional .tensorflow.ReleaseCallableResponse release_callable_response = 30;
bool ReplayOp::has_release_callable_response() const {
  return response_case() == kReleaseCallableResponse;
}
void ReplayOp::set_has_release_callable_response() {
  _oneof_case_[1] = kReleaseCallableResponse;
}
void ReplayOp::clear_release_callable_response() {
  if (has_release_callable_response()) {
    if (GetArenaNoVirtual() == NULL) {
      delete response_.release_callable_response_;
    }
    clear_has_response();
  }
}
 const ::tensorflow::ReleaseCallableResponse& ReplayOp::release_callable_response() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.release_callable_response)
  return has_release_callable_response()
      ? *response_.release_callable_response_
      : ::tensorflow::ReleaseCallableResponse::default_instance();
}
::tensorflow::ReleaseCallableResponse* ReplayOp::mutable_release_callable_response() {
  if (!has_release_callable_response()) {
    clear_response();
    set_has_release_callable_response();
    response_.release_callable_response_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::ReleaseCallableResponse >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.release_callable_response)
  return response_.release_callable_response_;
}
::tensorflow::ReleaseCallableResponse* ReplayOp::release_release_callable_response() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.release_callable_response)
  if (has_release_callable_response()) {
    clear_has_response();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::ReleaseCallableResponse* temp = new ::tensorflow::ReleaseCallableResponse;
      temp->MergeFrom(*response_.release_callable_response_);
      response_.release_callable_response_ = NULL;
      return temp;
    } else {
      ::tensorflow::ReleaseCallableResponse* temp = response_.release_callable_response_;
      response_.release_callable_response_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void ReplayOp::set_allocated_release_callable_response(::tensorflow::ReleaseCallableResponse* release_callable_response) {
  clear_response();
  if (release_callable_response) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(release_callable_response) == NULL) {
      GetArenaNoVirtual()->Own(release_callable_response);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(release_callable_response)) {
      ::tensorflow::ReleaseCallableResponse* new_release_callable_response = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::ReleaseCallableResponse >(
          GetArenaNoVirtual());
      new_release_callable_response->CopyFrom(*release_callable_response);
      release_callable_response = new_release_callable_response;
    }
    set_has_release_callable_response();
    response_.release_callable_response_ = release_callable_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.release_callable_response)
}
 ::tensorflow::ReleaseCallableResponse* ReplayOp::unsafe_arena_release_release_callable_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.release_callable_response)
  if (has_release_callable_response()) {
    clear_has_response();
    ::tensorflow::ReleaseCallableResponse* temp = response_.release_callable_response_;
    response_.release_callable_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ReplayOp::unsafe_arena_set_allocated_release_callable_response(::tensorflow::ReleaseCallableResponse* release_callable_response) {
  clear_response();
  if (release_callable_response) {
    set_has_release_callable_response();
    response_.release_callable_response_ = release_callable_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.release_callable_response)
}

bool ReplayOp::has_op() const {
  return op_case() != OP_NOT_SET;
}
void ReplayOp::clear_has_op() {
  _oneof_case_[0] = OP_NOT_SET;
}
bool ReplayOp::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
void ReplayOp::clear_has_response() {
  _oneof_case_[1] = RESPONSE_NOT_SET;
}
ReplayOp::OpCase ReplayOp::op_case() const {
  return ReplayOp::OpCase(_oneof_case_[0]);
}
ReplayOp::ResponseCase ReplayOp::response_case() const {
  return ReplayOp::ResponseCase(_oneof_case_[1]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
