// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/conv_autotuning.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/protobuf/conv_autotuning.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {

namespace {

const ::google::protobuf::Descriptor* ConvolutionProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConvolutionProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto() {
  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow/core/protobuf/conv_autotuning.proto");
  GOOGLE_CHECK(file != NULL);
  ConvolutionProto_descriptor_ = file->message_type(0);
  static const int ConvolutionProto_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionProto, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionProto, input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionProto, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionProto, output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionProto, conv_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionProto, conv_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionProto, side_value_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionProto, activation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionProto, input_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionProto, filter_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionProto, output_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionProto, bias_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionProto, side_input_address_),
  };
  ConvolutionProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConvolutionProto_descriptor_,
      ConvolutionProto::default_instance_,
      ConvolutionProto_offsets_,
      -1,
      -1,
      -1,
      sizeof(ConvolutionProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionProto, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionProto, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConvolutionProto_descriptor_, &ConvolutionProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto() {
  delete ConvolutionProto::default_instance_;
  delete ConvolutionProto_reflection_;
}

void protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::stream_executor::dnn::protobuf_AddDesc_tensorflow_2fstream_5fexecutor_2fdnn_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n.tensorflow/core/protobuf/conv_autotuni"
    "ng.proto\022\ntensorflow\032$tensorflow/stream_"
    "executor/dnn.proto\"\235\004\n\020ConvolutionProto\022"
    "2\n\004kind\030\001 \001(\0162$.stream_executor.dnn.Conv"
    "olutionKind\0229\n\005input\030\002 \001(\0132*.stream_exec"
    "utor.dnn.TensorDescriptorProto\022:\n\006filter"
    "\030\003 \001(\0132*.stream_executor.dnn.TensorDescr"
    "iptorProto\022:\n\006output\030\004 \001(\0132*.stream_exec"
    "utor.dnn.TensorDescriptorProto\022B\n\tconv_d"
    "esc\030\005 \001(\0132/.stream_executor.dnn.Convolut"
    "ionDescriptorProto\022\022\n\nconv_scale\030\006 \001(\001\022\030"
    "\n\020side_value_scale\030\007 \001(\001\0227\n\nactivation\030\010"
    " \001(\0162#.stream_executor.dnn.ActivationMod"
    "e\022\025\n\rinput_address\030\t \001(\003\022\026\n\016filter_addre"
    "ss\030\n \001(\003\022\026\n\016output_address\030\013 \001(\003\022\024\n\014bias"
    "_address\030\014 \001(\003\022\032\n\022side_input_address\030\r \001"
    "(\003BJZHgithub.com/tensorflow/tensorflow/t"
    "ensorflow/go/core/core_protos_go_protob\006"
    "proto3", 726);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/protobuf/conv_autotuning.proto", &protobuf_RegisterTypes);
  ConvolutionProto::default_instance_ = new ConvolutionProto();
  ConvolutionProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto {
  StaticDescriptorInitializer_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto() {
    protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto();
  }
} static_descriptor_initializer_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConvolutionProto::kKindFieldNumber;
const int ConvolutionProto::kInputFieldNumber;
const int ConvolutionProto::kFilterFieldNumber;
const int ConvolutionProto::kOutputFieldNumber;
const int ConvolutionProto::kConvDescFieldNumber;
const int ConvolutionProto::kConvScaleFieldNumber;
const int ConvolutionProto::kSideValueScaleFieldNumber;
const int ConvolutionProto::kActivationFieldNumber;
const int ConvolutionProto::kInputAddressFieldNumber;
const int ConvolutionProto::kFilterAddressFieldNumber;
const int ConvolutionProto::kOutputAddressFieldNumber;
const int ConvolutionProto::kBiasAddressFieldNumber;
const int ConvolutionProto::kSideInputAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConvolutionProto::ConvolutionProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ConvolutionProto)
}

void ConvolutionProto::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  input_ = const_cast< ::stream_executor::dnn::TensorDescriptorProto*>(&::stream_executor::dnn::TensorDescriptorProto::default_instance());
  filter_ = const_cast< ::stream_executor::dnn::TensorDescriptorProto*>(&::stream_executor::dnn::TensorDescriptorProto::default_instance());
  output_ = const_cast< ::stream_executor::dnn::TensorDescriptorProto*>(&::stream_executor::dnn::TensorDescriptorProto::default_instance());
  conv_desc_ = const_cast< ::stream_executor::dnn::ConvolutionDescriptorProto*>(&::stream_executor::dnn::ConvolutionDescriptorProto::default_instance());
}

ConvolutionProto::ConvolutionProto(const ConvolutionProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.ConvolutionProto)
}

void ConvolutionProto::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  kind_ = 0;
  input_ = NULL;
  filter_ = NULL;
  output_ = NULL;
  conv_desc_ = NULL;
  conv_scale_ = 0;
  side_value_scale_ = 0;
  activation_ = 0;
  input_address_ = GOOGLE_LONGLONG(0);
  filter_address_ = GOOGLE_LONGLONG(0);
  output_address_ = GOOGLE_LONGLONG(0);
  bias_address_ = GOOGLE_LONGLONG(0);
  side_input_address_ = GOOGLE_LONGLONG(0);
}

ConvolutionProto::~ConvolutionProto() {
  // @@protoc_insertion_point(destructor:tensorflow.ConvolutionProto)
  SharedDtor();
}

void ConvolutionProto::SharedDtor() {
  if (this != default_instance_) {
    delete input_;
    delete filter_;
    delete output_;
    delete conv_desc_;
  }
}

void ConvolutionProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConvolutionProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConvolutionProto_descriptor_;
}

const ConvolutionProto& ConvolutionProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto();
  return *default_instance_;
}

ConvolutionProto* ConvolutionProto::default_instance_ = NULL;

ConvolutionProto* ConvolutionProto::New(::google::protobuf::Arena* arena) const {
  ConvolutionProto* n = new ConvolutionProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConvolutionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ConvolutionProto)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ConvolutionProto, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ConvolutionProto*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(kind_, activation_);
  ZR_(conv_scale_, side_value_scale_);
  if (GetArenaNoVirtual() == NULL && input_ != NULL) delete input_;
  input_ = NULL;
  if (GetArenaNoVirtual() == NULL && filter_ != NULL) delete filter_;
  filter_ = NULL;
  if (GetArenaNoVirtual() == NULL && output_ != NULL) delete output_;
  output_ = NULL;
  if (GetArenaNoVirtual() == NULL && conv_desc_ != NULL) delete conv_desc_;
  conv_desc_ = NULL;
  ZR_(input_address_, side_input_address_);

#undef ZR_HELPER_
#undef ZR_

}

bool ConvolutionProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.ConvolutionProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .stream_executor.dnn.ConvolutionKind kind = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_kind(static_cast< ::stream_executor::dnn::ConvolutionKind >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_input;
        break;
      }

      // optional .stream_executor.dnn.TensorDescriptorProto input = 2;
      case 2: {
        if (tag == 18) {
         parse_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_filter;
        break;
      }

      // optional .stream_executor.dnn.TensorDescriptorProto filter = 3;
      case 3: {
        if (tag == 26) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_output;
        break;
      }

      // optional .stream_executor.dnn.TensorDescriptorProto output = 4;
      case 4: {
        if (tag == 34) {
         parse_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_output()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_conv_desc;
        break;
      }

      // optional .stream_executor.dnn.ConvolutionDescriptorProto conv_desc = 5;
      case 5: {
        if (tag == 42) {
         parse_conv_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conv_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_conv_scale;
        break;
      }

      // optional double conv_scale = 6;
      case 6: {
        if (tag == 49) {
         parse_conv_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &conv_scale_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_side_value_scale;
        break;
      }

      // optional double side_value_scale = 7;
      case 7: {
        if (tag == 57) {
         parse_side_value_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &side_value_scale_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_activation;
        break;
      }

      // optional .stream_executor.dnn.ActivationMode activation = 8;
      case 8: {
        if (tag == 64) {
         parse_activation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_activation(static_cast< ::stream_executor::dnn::ActivationMode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_input_address;
        break;
      }

      // optional int64 input_address = 9;
      case 9: {
        if (tag == 72) {
         parse_input_address:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &input_address_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_filter_address;
        break;
      }

      // optional int64 filter_address = 10;
      case 10: {
        if (tag == 80) {
         parse_filter_address:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &filter_address_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_output_address;
        break;
      }

      // optional int64 output_address = 11;
      case 11: {
        if (tag == 88) {
         parse_output_address:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &output_address_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_bias_address;
        break;
      }

      // optional int64 bias_address = 12;
      case 12: {
        if (tag == 96) {
         parse_bias_address:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bias_address_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_side_input_address;
        break;
      }

      // optional int64 side_input_address = 13;
      case 13: {
        if (tag == 104) {
         parse_side_input_address:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &side_input_address_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.ConvolutionProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.ConvolutionProto)
  return false;
#undef DO_
}

void ConvolutionProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.ConvolutionProto)
  // optional .stream_executor.dnn.ConvolutionKind kind = 1;
  if (this->kind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->kind(), output);
  }

  // optional .stream_executor.dnn.TensorDescriptorProto input = 2;
  if (this->has_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->input_, output);
  }

  // optional .stream_executor.dnn.TensorDescriptorProto filter = 3;
  if (this->has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->filter_, output);
  }

  // optional .stream_executor.dnn.TensorDescriptorProto output = 4;
  if (this->has_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->output_, output);
  }

  // optional .stream_executor.dnn.ConvolutionDescriptorProto conv_desc = 5;
  if (this->has_conv_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->conv_desc_, output);
  }

  // optional double conv_scale = 6;
  if (this->conv_scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->conv_scale(), output);
  }

  // optional double side_value_scale = 7;
  if (this->side_value_scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->side_value_scale(), output);
  }

  // optional .stream_executor.dnn.ActivationMode activation = 8;
  if (this->activation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->activation(), output);
  }

  // optional int64 input_address = 9;
  if (this->input_address() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->input_address(), output);
  }

  // optional int64 filter_address = 10;
  if (this->filter_address() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->filter_address(), output);
  }

  // optional int64 output_address = 11;
  if (this->output_address() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->output_address(), output);
  }

  // optional int64 bias_address = 12;
  if (this->bias_address() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->bias_address(), output);
  }

  // optional int64 side_input_address = 13;
  if (this->side_input_address() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->side_input_address(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.ConvolutionProto)
}

::google::protobuf::uint8* ConvolutionProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ConvolutionProto)
  // optional .stream_executor.dnn.ConvolutionKind kind = 1;
  if (this->kind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->kind(), target);
  }

  // optional .stream_executor.dnn.TensorDescriptorProto input = 2;
  if (this->has_input()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->input_, false, target);
  }

  // optional .stream_executor.dnn.TensorDescriptorProto filter = 3;
  if (this->has_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->filter_, false, target);
  }

  // optional .stream_executor.dnn.TensorDescriptorProto output = 4;
  if (this->has_output()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->output_, false, target);
  }

  // optional .stream_executor.dnn.ConvolutionDescriptorProto conv_desc = 5;
  if (this->has_conv_desc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->conv_desc_, false, target);
  }

  // optional double conv_scale = 6;
  if (this->conv_scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->conv_scale(), target);
  }

  // optional double side_value_scale = 7;
  if (this->side_value_scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->side_value_scale(), target);
  }

  // optional .stream_executor.dnn.ActivationMode activation = 8;
  if (this->activation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->activation(), target);
  }

  // optional int64 input_address = 9;
  if (this->input_address() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->input_address(), target);
  }

  // optional int64 filter_address = 10;
  if (this->filter_address() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->filter_address(), target);
  }

  // optional int64 output_address = 11;
  if (this->output_address() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->output_address(), target);
  }

  // optional int64 bias_address = 12;
  if (this->bias_address() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->bias_address(), target);
  }

  // optional int64 side_input_address = 13;
  if (this->side_input_address() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->side_input_address(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ConvolutionProto)
  return target;
}

int ConvolutionProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ConvolutionProto)
  int total_size = 0;

  // optional .stream_executor.dnn.ConvolutionKind kind = 1;
  if (this->kind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
  }

  // optional .stream_executor.dnn.TensorDescriptorProto input = 2;
  if (this->has_input()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->input_);
  }

  // optional .stream_executor.dnn.TensorDescriptorProto filter = 3;
  if (this->has_filter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->filter_);
  }

  // optional .stream_executor.dnn.TensorDescriptorProto output = 4;
  if (this->has_output()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->output_);
  }

  // optional .stream_executor.dnn.ConvolutionDescriptorProto conv_desc = 5;
  if (this->has_conv_desc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->conv_desc_);
  }

  // optional double conv_scale = 6;
  if (this->conv_scale() != 0) {
    total_size += 1 + 8;
  }

  // optional double side_value_scale = 7;
  if (this->side_value_scale() != 0) {
    total_size += 1 + 8;
  }

  // optional .stream_executor.dnn.ActivationMode activation = 8;
  if (this->activation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->activation());
  }

  // optional int64 input_address = 9;
  if (this->input_address() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->input_address());
  }

  // optional int64 filter_address = 10;
  if (this->filter_address() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->filter_address());
  }

  // optional int64 output_address = 11;
  if (this->output_address() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->output_address());
  }

  // optional int64 bias_address = 12;
  if (this->bias_address() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bias_address());
  }

  // optional int64 side_input_address = 13;
  if (this->side_input_address() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->side_input_address());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConvolutionProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ConvolutionProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ConvolutionProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConvolutionProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ConvolutionProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ConvolutionProto)
    MergeFrom(*source);
  }
}

void ConvolutionProto::MergeFrom(const ConvolutionProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ConvolutionProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.kind() != 0) {
    set_kind(from.kind());
  }
  if (from.has_input()) {
    mutable_input()->::stream_executor::dnn::TensorDescriptorProto::MergeFrom(from.input());
  }
  if (from.has_filter()) {
    mutable_filter()->::stream_executor::dnn::TensorDescriptorProto::MergeFrom(from.filter());
  }
  if (from.has_output()) {
    mutable_output()->::stream_executor::dnn::TensorDescriptorProto::MergeFrom(from.output());
  }
  if (from.has_conv_desc()) {
    mutable_conv_desc()->::stream_executor::dnn::ConvolutionDescriptorProto::MergeFrom(from.conv_desc());
  }
  if (from.conv_scale() != 0) {
    set_conv_scale(from.conv_scale());
  }
  if (from.side_value_scale() != 0) {
    set_side_value_scale(from.side_value_scale());
  }
  if (from.activation() != 0) {
    set_activation(from.activation());
  }
  if (from.input_address() != 0) {
    set_input_address(from.input_address());
  }
  if (from.filter_address() != 0) {
    set_filter_address(from.filter_address());
  }
  if (from.output_address() != 0) {
    set_output_address(from.output_address());
  }
  if (from.bias_address() != 0) {
    set_bias_address(from.bias_address());
  }
  if (from.side_input_address() != 0) {
    set_side_input_address(from.side_input_address());
  }
}

void ConvolutionProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ConvolutionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvolutionProto::CopyFrom(const ConvolutionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ConvolutionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvolutionProto::IsInitialized() const {

  return true;
}

void ConvolutionProto::Swap(ConvolutionProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConvolutionProto::InternalSwap(ConvolutionProto* other) {
  std::swap(kind_, other->kind_);
  std::swap(input_, other->input_);
  std::swap(filter_, other->filter_);
  std::swap(output_, other->output_);
  std::swap(conv_desc_, other->conv_desc_);
  std::swap(conv_scale_, other->conv_scale_);
  std::swap(side_value_scale_, other->side_value_scale_);
  std::swap(activation_, other->activation_);
  std::swap(input_address_, other->input_address_);
  std::swap(filter_address_, other->filter_address_);
  std::swap(output_address_, other->output_address_);
  std::swap(bias_address_, other->bias_address_);
  std::swap(side_input_address_, other->side_input_address_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConvolutionProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConvolutionProto_descriptor_;
  metadata.reflection = ConvolutionProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConvolutionProto

// optional .stream_executor.dnn.ConvolutionKind kind = 1;
void ConvolutionProto::clear_kind() {
  kind_ = 0;
}
 ::stream_executor::dnn::ConvolutionKind ConvolutionProto::kind() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvolutionProto.kind)
  return static_cast< ::stream_executor::dnn::ConvolutionKind >(kind_);
}
 void ConvolutionProto::set_kind(::stream_executor::dnn::ConvolutionKind value) {
  
  kind_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConvolutionProto.kind)
}

// optional .stream_executor.dnn.TensorDescriptorProto input = 2;
bool ConvolutionProto::has_input() const {
  return !_is_default_instance_ && input_ != NULL;
}
void ConvolutionProto::clear_input() {
  if (GetArenaNoVirtual() == NULL && input_ != NULL) delete input_;
  input_ = NULL;
}
const ::stream_executor::dnn::TensorDescriptorProto& ConvolutionProto::input() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvolutionProto.input)
  return input_ != NULL ? *input_ : *default_instance_->input_;
}
::stream_executor::dnn::TensorDescriptorProto* ConvolutionProto::mutable_input() {
  
  if (input_ == NULL) {
    input_ = new ::stream_executor::dnn::TensorDescriptorProto;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ConvolutionProto.input)
  return input_;
}
::stream_executor::dnn::TensorDescriptorProto* ConvolutionProto::release_input() {
  // @@protoc_insertion_point(field_release:tensorflow.ConvolutionProto.input)
  
  ::stream_executor::dnn::TensorDescriptorProto* temp = input_;
  input_ = NULL;
  return temp;
}
void ConvolutionProto::set_allocated_input(::stream_executor::dnn::TensorDescriptorProto* input) {
  delete input_;
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ConvolutionProto.input)
}

// optional .stream_executor.dnn.TensorDescriptorProto filter = 3;
bool ConvolutionProto::has_filter() const {
  return !_is_default_instance_ && filter_ != NULL;
}
void ConvolutionProto::clear_filter() {
  if (GetArenaNoVirtual() == NULL && filter_ != NULL) delete filter_;
  filter_ = NULL;
}
const ::stream_executor::dnn::TensorDescriptorProto& ConvolutionProto::filter() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvolutionProto.filter)
  return filter_ != NULL ? *filter_ : *default_instance_->filter_;
}
::stream_executor::dnn::TensorDescriptorProto* ConvolutionProto::mutable_filter() {
  
  if (filter_ == NULL) {
    filter_ = new ::stream_executor::dnn::TensorDescriptorProto;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ConvolutionProto.filter)
  return filter_;
}
::stream_executor::dnn::TensorDescriptorProto* ConvolutionProto::release_filter() {
  // @@protoc_insertion_point(field_release:tensorflow.ConvolutionProto.filter)
  
  ::stream_executor::dnn::TensorDescriptorProto* temp = filter_;
  filter_ = NULL;
  return temp;
}
void ConvolutionProto::set_allocated_filter(::stream_executor::dnn::TensorDescriptorProto* filter) {
  delete filter_;
  filter_ = filter;
  if (filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ConvolutionProto.filter)
}

// optional .stream_executor.dnn.TensorDescriptorProto output = 4;
bool ConvolutionProto::has_output() const {
  return !_is_default_instance_ && output_ != NULL;
}
void ConvolutionProto::clear_output() {
  if (GetArenaNoVirtual() == NULL && output_ != NULL) delete output_;
  output_ = NULL;
}
const ::stream_executor::dnn::TensorDescriptorProto& ConvolutionProto::output() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvolutionProto.output)
  return output_ != NULL ? *output_ : *default_instance_->output_;
}
::stream_executor::dnn::TensorDescriptorProto* ConvolutionProto::mutable_output() {
  
  if (output_ == NULL) {
    output_ = new ::stream_executor::dnn::TensorDescriptorProto;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ConvolutionProto.output)
  return output_;
}
::stream_executor::dnn::TensorDescriptorProto* ConvolutionProto::release_output() {
  // @@protoc_insertion_point(field_release:tensorflow.ConvolutionProto.output)
  
  ::stream_executor::dnn::TensorDescriptorProto* temp = output_;
  output_ = NULL;
  return temp;
}
void ConvolutionProto::set_allocated_output(::stream_executor::dnn::TensorDescriptorProto* output) {
  delete output_;
  output_ = output;
  if (output) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ConvolutionProto.output)
}

// optional .stream_executor.dnn.ConvolutionDescriptorProto conv_desc = 5;
bool ConvolutionProto::has_conv_desc() const {
  return !_is_default_instance_ && conv_desc_ != NULL;
}
void ConvolutionProto::clear_conv_desc() {
  if (GetArenaNoVirtual() == NULL && conv_desc_ != NULL) delete conv_desc_;
  conv_desc_ = NULL;
}
const ::stream_executor::dnn::ConvolutionDescriptorProto& ConvolutionProto::conv_desc() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvolutionProto.conv_desc)
  return conv_desc_ != NULL ? *conv_desc_ : *default_instance_->conv_desc_;
}
::stream_executor::dnn::ConvolutionDescriptorProto* ConvolutionProto::mutable_conv_desc() {
  
  if (conv_desc_ == NULL) {
    conv_desc_ = new ::stream_executor::dnn::ConvolutionDescriptorProto;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ConvolutionProto.conv_desc)
  return conv_desc_;
}
::stream_executor::dnn::ConvolutionDescriptorProto* ConvolutionProto::release_conv_desc() {
  // @@protoc_insertion_point(field_release:tensorflow.ConvolutionProto.conv_desc)
  
  ::stream_executor::dnn::ConvolutionDescriptorProto* temp = conv_desc_;
  conv_desc_ = NULL;
  return temp;
}
void ConvolutionProto::set_allocated_conv_desc(::stream_executor::dnn::ConvolutionDescriptorProto* conv_desc) {
  delete conv_desc_;
  conv_desc_ = conv_desc;
  if (conv_desc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ConvolutionProto.conv_desc)
}

// optional double conv_scale = 6;
void ConvolutionProto::clear_conv_scale() {
  conv_scale_ = 0;
}
 double ConvolutionProto::conv_scale() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvolutionProto.conv_scale)
  return conv_scale_;
}
 void ConvolutionProto::set_conv_scale(double value) {
  
  conv_scale_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConvolutionProto.conv_scale)
}

// optional double side_value_scale = 7;
void ConvolutionProto::clear_side_value_scale() {
  side_value_scale_ = 0;
}
 double ConvolutionProto::side_value_scale() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvolutionProto.side_value_scale)
  return side_value_scale_;
}
 void ConvolutionProto::set_side_value_scale(double value) {
  
  side_value_scale_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConvolutionProto.side_value_scale)
}

// optional .stream_executor.dnn.ActivationMode activation = 8;
void ConvolutionProto::clear_activation() {
  activation_ = 0;
}
 ::stream_executor::dnn::ActivationMode ConvolutionProto::activation() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvolutionProto.activation)
  return static_cast< ::stream_executor::dnn::ActivationMode >(activation_);
}
 void ConvolutionProto::set_activation(::stream_executor::dnn::ActivationMode value) {
  
  activation_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConvolutionProto.activation)
}

// optional int64 input_address = 9;
void ConvolutionProto::clear_input_address() {
  input_address_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ConvolutionProto::input_address() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvolutionProto.input_address)
  return input_address_;
}
 void ConvolutionProto::set_input_address(::google::protobuf::int64 value) {
  
  input_address_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConvolutionProto.input_address)
}

// optional int64 filter_address = 10;
void ConvolutionProto::clear_filter_address() {
  filter_address_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ConvolutionProto::filter_address() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvolutionProto.filter_address)
  return filter_address_;
}
 void ConvolutionProto::set_filter_address(::google::protobuf::int64 value) {
  
  filter_address_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConvolutionProto.filter_address)
}

// optional int64 output_address = 11;
void ConvolutionProto::clear_output_address() {
  output_address_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ConvolutionProto::output_address() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvolutionProto.output_address)
  return output_address_;
}
 void ConvolutionProto::set_output_address(::google::protobuf::int64 value) {
  
  output_address_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConvolutionProto.output_address)
}

// optional int64 bias_address = 12;
void ConvolutionProto::clear_bias_address() {
  bias_address_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ConvolutionProto::bias_address() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvolutionProto.bias_address)
  return bias_address_;
}
 void ConvolutionProto::set_bias_address(::google::protobuf::int64 value) {
  
  bias_address_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConvolutionProto.bias_address)
}

// optional int64 side_input_address = 13;
void ConvolutionProto::clear_side_input_address() {
  side_input_address_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ConvolutionProto::side_input_address() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvolutionProto.side_input_address)
  return side_input_address_;
}
 void ConvolutionProto::set_side_input_address(::google::protobuf::int64 value) {
  
  side_input_address_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConvolutionProto.side_input_address)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
