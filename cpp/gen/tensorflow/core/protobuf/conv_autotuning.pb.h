// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/conv_autotuning.proto

#ifndef PROTOBUF_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto__INCLUDED
#define PROTOBUF_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow/stream_executor/dnn.pb.h"
// @@protoc_insertion_point(includes)

namespace tensorflow {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto();
void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto();
void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto();

class ConvolutionProto;

// ===================================================================

class ConvolutionProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.ConvolutionProto) */ {
 public:
  ConvolutionProto();
  virtual ~ConvolutionProto();

  ConvolutionProto(const ConvolutionProto& from);

  inline ConvolutionProto& operator=(const ConvolutionProto& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConvolutionProto& default_instance();

  void Swap(ConvolutionProto* other);

  // implements Message ----------------------------------------------

  inline ConvolutionProto* New() const { return New(NULL); }

  ConvolutionProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConvolutionProto& from);
  void MergeFrom(const ConvolutionProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConvolutionProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .stream_executor.dnn.ConvolutionKind kind = 1;
  void clear_kind();
  static const int kKindFieldNumber = 1;
  ::stream_executor::dnn::ConvolutionKind kind() const;
  void set_kind(::stream_executor::dnn::ConvolutionKind value);

  // optional .stream_executor.dnn.TensorDescriptorProto input = 2;
  bool has_input() const;
  void clear_input();
  static const int kInputFieldNumber = 2;
  const ::stream_executor::dnn::TensorDescriptorProto& input() const;
  ::stream_executor::dnn::TensorDescriptorProto* mutable_input();
  ::stream_executor::dnn::TensorDescriptorProto* release_input();
  void set_allocated_input(::stream_executor::dnn::TensorDescriptorProto* input);

  // optional .stream_executor.dnn.TensorDescriptorProto filter = 3;
  bool has_filter() const;
  void clear_filter();
  static const int kFilterFieldNumber = 3;
  const ::stream_executor::dnn::TensorDescriptorProto& filter() const;
  ::stream_executor::dnn::TensorDescriptorProto* mutable_filter();
  ::stream_executor::dnn::TensorDescriptorProto* release_filter();
  void set_allocated_filter(::stream_executor::dnn::TensorDescriptorProto* filter);

  // optional .stream_executor.dnn.TensorDescriptorProto output = 4;
  bool has_output() const;
  void clear_output();
  static const int kOutputFieldNumber = 4;
  const ::stream_executor::dnn::TensorDescriptorProto& output() const;
  ::stream_executor::dnn::TensorDescriptorProto* mutable_output();
  ::stream_executor::dnn::TensorDescriptorProto* release_output();
  void set_allocated_output(::stream_executor::dnn::TensorDescriptorProto* output);

  // optional .stream_executor.dnn.ConvolutionDescriptorProto conv_desc = 5;
  bool has_conv_desc() const;
  void clear_conv_desc();
  static const int kConvDescFieldNumber = 5;
  const ::stream_executor::dnn::ConvolutionDescriptorProto& conv_desc() const;
  ::stream_executor::dnn::ConvolutionDescriptorProto* mutable_conv_desc();
  ::stream_executor::dnn::ConvolutionDescriptorProto* release_conv_desc();
  void set_allocated_conv_desc(::stream_executor::dnn::ConvolutionDescriptorProto* conv_desc);

  // optional double conv_scale = 6;
  void clear_conv_scale();
  static const int kConvScaleFieldNumber = 6;
  double conv_scale() const;
  void set_conv_scale(double value);

  // optional double side_value_scale = 7;
  void clear_side_value_scale();
  static const int kSideValueScaleFieldNumber = 7;
  double side_value_scale() const;
  void set_side_value_scale(double value);

  // optional .stream_executor.dnn.ActivationMode activation = 8;
  void clear_activation();
  static const int kActivationFieldNumber = 8;
  ::stream_executor::dnn::ActivationMode activation() const;
  void set_activation(::stream_executor::dnn::ActivationMode value);

  // optional int64 input_address = 9;
  void clear_input_address();
  static const int kInputAddressFieldNumber = 9;
  ::google::protobuf::int64 input_address() const;
  void set_input_address(::google::protobuf::int64 value);

  // optional int64 filter_address = 10;
  void clear_filter_address();
  static const int kFilterAddressFieldNumber = 10;
  ::google::protobuf::int64 filter_address() const;
  void set_filter_address(::google::protobuf::int64 value);

  // optional int64 output_address = 11;
  void clear_output_address();
  static const int kOutputAddressFieldNumber = 11;
  ::google::protobuf::int64 output_address() const;
  void set_output_address(::google::protobuf::int64 value);

  // optional int64 bias_address = 12;
  void clear_bias_address();
  static const int kBiasAddressFieldNumber = 12;
  ::google::protobuf::int64 bias_address() const;
  void set_bias_address(::google::protobuf::int64 value);

  // optional int64 side_input_address = 13;
  void clear_side_input_address();
  static const int kSideInputAddressFieldNumber = 13;
  ::google::protobuf::int64 side_input_address() const;
  void set_side_input_address(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:tensorflow.ConvolutionProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::stream_executor::dnn::TensorDescriptorProto* input_;
  ::stream_executor::dnn::TensorDescriptorProto* filter_;
  ::stream_executor::dnn::TensorDescriptorProto* output_;
  int kind_;
  int activation_;
  ::stream_executor::dnn::ConvolutionDescriptorProto* conv_desc_;
  double conv_scale_;
  double side_value_scale_;
  ::google::protobuf::int64 input_address_;
  ::google::protobuf::int64 filter_address_;
  ::google::protobuf::int64 output_address_;
  ::google::protobuf::int64 bias_address_;
  ::google::protobuf::int64 side_input_address_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto();

  void InitAsDefaultInstance();
  static ConvolutionProto* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ConvolutionProto

// optional .stream_executor.dnn.ConvolutionKind kind = 1;
inline void ConvolutionProto::clear_kind() {
  kind_ = 0;
}
inline ::stream_executor::dnn::ConvolutionKind ConvolutionProto::kind() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvolutionProto.kind)
  return static_cast< ::stream_executor::dnn::ConvolutionKind >(kind_);
}
inline void ConvolutionProto::set_kind(::stream_executor::dnn::ConvolutionKind value) {
  
  kind_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConvolutionProto.kind)
}

// optional .stream_executor.dnn.TensorDescriptorProto input = 2;
inline bool ConvolutionProto::has_input() const {
  return !_is_default_instance_ && input_ != NULL;
}
inline void ConvolutionProto::clear_input() {
  if (GetArenaNoVirtual() == NULL && input_ != NULL) delete input_;
  input_ = NULL;
}
inline const ::stream_executor::dnn::TensorDescriptorProto& ConvolutionProto::input() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvolutionProto.input)
  return input_ != NULL ? *input_ : *default_instance_->input_;
}
inline ::stream_executor::dnn::TensorDescriptorProto* ConvolutionProto::mutable_input() {
  
  if (input_ == NULL) {
    input_ = new ::stream_executor::dnn::TensorDescriptorProto;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ConvolutionProto.input)
  return input_;
}
inline ::stream_executor::dnn::TensorDescriptorProto* ConvolutionProto::release_input() {
  // @@protoc_insertion_point(field_release:tensorflow.ConvolutionProto.input)
  
  ::stream_executor::dnn::TensorDescriptorProto* temp = input_;
  input_ = NULL;
  return temp;
}
inline void ConvolutionProto::set_allocated_input(::stream_executor::dnn::TensorDescriptorProto* input) {
  delete input_;
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ConvolutionProto.input)
}

// optional .stream_executor.dnn.TensorDescriptorProto filter = 3;
inline bool ConvolutionProto::has_filter() const {
  return !_is_default_instance_ && filter_ != NULL;
}
inline void ConvolutionProto::clear_filter() {
  if (GetArenaNoVirtual() == NULL && filter_ != NULL) delete filter_;
  filter_ = NULL;
}
inline const ::stream_executor::dnn::TensorDescriptorProto& ConvolutionProto::filter() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvolutionProto.filter)
  return filter_ != NULL ? *filter_ : *default_instance_->filter_;
}
inline ::stream_executor::dnn::TensorDescriptorProto* ConvolutionProto::mutable_filter() {
  
  if (filter_ == NULL) {
    filter_ = new ::stream_executor::dnn::TensorDescriptorProto;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ConvolutionProto.filter)
  return filter_;
}
inline ::stream_executor::dnn::TensorDescriptorProto* ConvolutionProto::release_filter() {
  // @@protoc_insertion_point(field_release:tensorflow.ConvolutionProto.filter)
  
  ::stream_executor::dnn::TensorDescriptorProto* temp = filter_;
  filter_ = NULL;
  return temp;
}
inline void ConvolutionProto::set_allocated_filter(::stream_executor::dnn::TensorDescriptorProto* filter) {
  delete filter_;
  filter_ = filter;
  if (filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ConvolutionProto.filter)
}

// optional .stream_executor.dnn.TensorDescriptorProto output = 4;
inline bool ConvolutionProto::has_output() const {
  return !_is_default_instance_ && output_ != NULL;
}
inline void ConvolutionProto::clear_output() {
  if (GetArenaNoVirtual() == NULL && output_ != NULL) delete output_;
  output_ = NULL;
}
inline const ::stream_executor::dnn::TensorDescriptorProto& ConvolutionProto::output() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvolutionProto.output)
  return output_ != NULL ? *output_ : *default_instance_->output_;
}
inline ::stream_executor::dnn::TensorDescriptorProto* ConvolutionProto::mutable_output() {
  
  if (output_ == NULL) {
    output_ = new ::stream_executor::dnn::TensorDescriptorProto;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ConvolutionProto.output)
  return output_;
}
inline ::stream_executor::dnn::TensorDescriptorProto* ConvolutionProto::release_output() {
  // @@protoc_insertion_point(field_release:tensorflow.ConvolutionProto.output)
  
  ::stream_executor::dnn::TensorDescriptorProto* temp = output_;
  output_ = NULL;
  return temp;
}
inline void ConvolutionProto::set_allocated_output(::stream_executor::dnn::TensorDescriptorProto* output) {
  delete output_;
  output_ = output;
  if (output) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ConvolutionProto.output)
}

// optional .stream_executor.dnn.ConvolutionDescriptorProto conv_desc = 5;
inline bool ConvolutionProto::has_conv_desc() const {
  return !_is_default_instance_ && conv_desc_ != NULL;
}
inline void ConvolutionProto::clear_conv_desc() {
  if (GetArenaNoVirtual() == NULL && conv_desc_ != NULL) delete conv_desc_;
  conv_desc_ = NULL;
}
inline const ::stream_executor::dnn::ConvolutionDescriptorProto& ConvolutionProto::conv_desc() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvolutionProto.conv_desc)
  return conv_desc_ != NULL ? *conv_desc_ : *default_instance_->conv_desc_;
}
inline ::stream_executor::dnn::ConvolutionDescriptorProto* ConvolutionProto::mutable_conv_desc() {
  
  if (conv_desc_ == NULL) {
    conv_desc_ = new ::stream_executor::dnn::ConvolutionDescriptorProto;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ConvolutionProto.conv_desc)
  return conv_desc_;
}
inline ::stream_executor::dnn::ConvolutionDescriptorProto* ConvolutionProto::release_conv_desc() {
  // @@protoc_insertion_point(field_release:tensorflow.ConvolutionProto.conv_desc)
  
  ::stream_executor::dnn::ConvolutionDescriptorProto* temp = conv_desc_;
  conv_desc_ = NULL;
  return temp;
}
inline void ConvolutionProto::set_allocated_conv_desc(::stream_executor::dnn::ConvolutionDescriptorProto* conv_desc) {
  delete conv_desc_;
  conv_desc_ = conv_desc;
  if (conv_desc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ConvolutionProto.conv_desc)
}

// optional double conv_scale = 6;
inline void ConvolutionProto::clear_conv_scale() {
  conv_scale_ = 0;
}
inline double ConvolutionProto::conv_scale() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvolutionProto.conv_scale)
  return conv_scale_;
}
inline void ConvolutionProto::set_conv_scale(double value) {
  
  conv_scale_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConvolutionProto.conv_scale)
}

// optional double side_value_scale = 7;
inline void ConvolutionProto::clear_side_value_scale() {
  side_value_scale_ = 0;
}
inline double ConvolutionProto::side_value_scale() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvolutionProto.side_value_scale)
  return side_value_scale_;
}
inline void ConvolutionProto::set_side_value_scale(double value) {
  
  side_value_scale_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConvolutionProto.side_value_scale)
}

// optional .stream_executor.dnn.ActivationMode activation = 8;
inline void ConvolutionProto::clear_activation() {
  activation_ = 0;
}
inline ::stream_executor::dnn::ActivationMode ConvolutionProto::activation() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvolutionProto.activation)
  return static_cast< ::stream_executor::dnn::ActivationMode >(activation_);
}
inline void ConvolutionProto::set_activation(::stream_executor::dnn::ActivationMode value) {
  
  activation_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConvolutionProto.activation)
}

// optional int64 input_address = 9;
inline void ConvolutionProto::clear_input_address() {
  input_address_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ConvolutionProto::input_address() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvolutionProto.input_address)
  return input_address_;
}
inline void ConvolutionProto::set_input_address(::google::protobuf::int64 value) {
  
  input_address_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConvolutionProto.input_address)
}

// optional int64 filter_address = 10;
inline void ConvolutionProto::clear_filter_address() {
  filter_address_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ConvolutionProto::filter_address() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvolutionProto.filter_address)
  return filter_address_;
}
inline void ConvolutionProto::set_filter_address(::google::protobuf::int64 value) {
  
  filter_address_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConvolutionProto.filter_address)
}

// optional int64 output_address = 11;
inline void ConvolutionProto::clear_output_address() {
  output_address_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ConvolutionProto::output_address() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvolutionProto.output_address)
  return output_address_;
}
inline void ConvolutionProto::set_output_address(::google::protobuf::int64 value) {
  
  output_address_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConvolutionProto.output_address)
}

// optional int64 bias_address = 12;
inline void ConvolutionProto::clear_bias_address() {
  bias_address_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ConvolutionProto::bias_address() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvolutionProto.bias_address)
  return bias_address_;
}
inline void ConvolutionProto::set_bias_address(::google::protobuf::int64 value) {
  
  bias_address_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConvolutionProto.bias_address)
}

// optional int64 side_input_address = 13;
inline void ConvolutionProto::clear_side_input_address() {
  side_input_address_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ConvolutionProto::side_input_address() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvolutionProto.side_input_address)
  return side_input_address_;
}
inline void ConvolutionProto::set_side_input_address(::google::protobuf::int64 value) {
  
  side_input_address_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConvolutionProto.side_input_address)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto__INCLUDED
