// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/trackable_object_graph.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/protobuf/trackable_object_graph.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {

namespace {

const ::google::protobuf::Descriptor* TrackableObjectGraph_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackableObjectGraph_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrackableObjectGraph_TrackableObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackableObjectGraph_TrackableObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrackableObjectGraph_TrackableObject_ObjectReference_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackableObjectGraph_TrackableObject_ObjectReference_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrackableObjectGraph_TrackableObject_SerializedTensor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackableObjectGraph_TrackableObject_SerializedTensor_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrackableObjectGraph_TrackableObject_SlotVariableReference_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackableObjectGraph_TrackableObject_SlotVariableReference_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto() {
  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow/core/protobuf/trackable_object_graph.proto");
  GOOGLE_CHECK(file != NULL);
  TrackableObjectGraph_descriptor_ = file->message_type(0);
  static const int TrackableObjectGraph_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackableObjectGraph, nodes_),
  };
  TrackableObjectGraph_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrackableObjectGraph_descriptor_,
      TrackableObjectGraph::default_instance_,
      TrackableObjectGraph_offsets_,
      -1,
      -1,
      -1,
      sizeof(TrackableObjectGraph),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackableObjectGraph, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackableObjectGraph, _is_default_instance_));
  TrackableObjectGraph_TrackableObject_descriptor_ = TrackableObjectGraph_descriptor_->nested_type(0);
  static const int TrackableObjectGraph_TrackableObject_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackableObjectGraph_TrackableObject, children_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackableObjectGraph_TrackableObject, attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackableObjectGraph_TrackableObject, slot_variables_),
  };
  TrackableObjectGraph_TrackableObject_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrackableObjectGraph_TrackableObject_descriptor_,
      TrackableObjectGraph_TrackableObject::default_instance_,
      TrackableObjectGraph_TrackableObject_offsets_,
      -1,
      -1,
      -1,
      sizeof(TrackableObjectGraph_TrackableObject),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackableObjectGraph_TrackableObject, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackableObjectGraph_TrackableObject, _is_default_instance_));
  TrackableObjectGraph_TrackableObject_ObjectReference_descriptor_ = TrackableObjectGraph_TrackableObject_descriptor_->nested_type(0);
  static const int TrackableObjectGraph_TrackableObject_ObjectReference_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackableObjectGraph_TrackableObject_ObjectReference, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackableObjectGraph_TrackableObject_ObjectReference, local_name_),
  };
  TrackableObjectGraph_TrackableObject_ObjectReference_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrackableObjectGraph_TrackableObject_ObjectReference_descriptor_,
      TrackableObjectGraph_TrackableObject_ObjectReference::default_instance_,
      TrackableObjectGraph_TrackableObject_ObjectReference_offsets_,
      -1,
      -1,
      -1,
      sizeof(TrackableObjectGraph_TrackableObject_ObjectReference),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackableObjectGraph_TrackableObject_ObjectReference, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackableObjectGraph_TrackableObject_ObjectReference, _is_default_instance_));
  TrackableObjectGraph_TrackableObject_SerializedTensor_descriptor_ = TrackableObjectGraph_TrackableObject_descriptor_->nested_type(1);
  static const int TrackableObjectGraph_TrackableObject_SerializedTensor_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackableObjectGraph_TrackableObject_SerializedTensor, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackableObjectGraph_TrackableObject_SerializedTensor, full_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackableObjectGraph_TrackableObject_SerializedTensor, checkpoint_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackableObjectGraph_TrackableObject_SerializedTensor, optional_restore_),
  };
  TrackableObjectGraph_TrackableObject_SerializedTensor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrackableObjectGraph_TrackableObject_SerializedTensor_descriptor_,
      TrackableObjectGraph_TrackableObject_SerializedTensor::default_instance_,
      TrackableObjectGraph_TrackableObject_SerializedTensor_offsets_,
      -1,
      -1,
      -1,
      sizeof(TrackableObjectGraph_TrackableObject_SerializedTensor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackableObjectGraph_TrackableObject_SerializedTensor, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackableObjectGraph_TrackableObject_SerializedTensor, _is_default_instance_));
  TrackableObjectGraph_TrackableObject_SlotVariableReference_descriptor_ = TrackableObjectGraph_TrackableObject_descriptor_->nested_type(2);
  static const int TrackableObjectGraph_TrackableObject_SlotVariableReference_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackableObjectGraph_TrackableObject_SlotVariableReference, original_variable_node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackableObjectGraph_TrackableObject_SlotVariableReference, slot_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackableObjectGraph_TrackableObject_SlotVariableReference, slot_variable_node_id_),
  };
  TrackableObjectGraph_TrackableObject_SlotVariableReference_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrackableObjectGraph_TrackableObject_SlotVariableReference_descriptor_,
      TrackableObjectGraph_TrackableObject_SlotVariableReference::default_instance_,
      TrackableObjectGraph_TrackableObject_SlotVariableReference_offsets_,
      -1,
      -1,
      -1,
      sizeof(TrackableObjectGraph_TrackableObject_SlotVariableReference),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackableObjectGraph_TrackableObject_SlotVariableReference, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackableObjectGraph_TrackableObject_SlotVariableReference, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrackableObjectGraph_descriptor_, &TrackableObjectGraph::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrackableObjectGraph_TrackableObject_descriptor_, &TrackableObjectGraph_TrackableObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrackableObjectGraph_TrackableObject_ObjectReference_descriptor_, &TrackableObjectGraph_TrackableObject_ObjectReference::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrackableObjectGraph_TrackableObject_SerializedTensor_descriptor_, &TrackableObjectGraph_TrackableObject_SerializedTensor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrackableObjectGraph_TrackableObject_SlotVariableReference_descriptor_, &TrackableObjectGraph_TrackableObject_SlotVariableReference::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto() {
  delete TrackableObjectGraph::default_instance_;
  delete TrackableObjectGraph_reflection_;
  delete TrackableObjectGraph_TrackableObject::default_instance_;
  delete TrackableObjectGraph_TrackableObject_reflection_;
  delete TrackableObjectGraph_TrackableObject_ObjectReference::default_instance_;
  delete TrackableObjectGraph_TrackableObject_ObjectReference_reflection_;
  delete TrackableObjectGraph_TrackableObject_SerializedTensor::default_instance_;
  delete TrackableObjectGraph_TrackableObject_SerializedTensor_reflection_;
  delete TrackableObjectGraph_TrackableObject_SlotVariableReference::default_instance_;
  delete TrackableObjectGraph_TrackableObject_SlotVariableReference_reflection_;
}

void protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n5tensorflow/core/protobuf/trackable_obj"
    "ect_graph.proto\022\ntensorflow\"\203\005\n\024Trackabl"
    "eObjectGraph\022\?\n\005nodes\030\001 \003(\01320.tensorflow"
    ".TrackableObjectGraph.TrackableObject\032\251\004"
    "\n\017TrackableObject\022R\n\010children\030\001 \003(\0132@.te"
    "nsorflow.TrackableObjectGraph.TrackableO"
    "bject.ObjectReference\022U\n\nattributes\030\002 \003("
    "\0132A.tensorflow.TrackableObjectGraph.Trac"
    "kableObject.SerializedTensor\022^\n\016slot_var"
    "iables\030\003 \003(\0132F.tensorflow.TrackableObjec"
    "tGraph.TrackableObject.SlotVariableRefer"
    "ence\0326\n\017ObjectReference\022\017\n\007node_id\030\001 \001(\005"
    "\022\022\n\nlocal_name\030\002 \001(\t\032e\n\020SerializedTensor"
    "\022\014\n\004name\030\001 \001(\t\022\021\n\tfull_name\030\002 \001(\t\022\026\n\016che"
    "ckpoint_key\030\003 \001(\t\022\030\n\020optional_restore\030\004 "
    "\001(\010\032l\n\025SlotVariableReference\022!\n\031original"
    "_variable_node_id\030\001 \001(\005\022\021\n\tslot_name\030\002 \001"
    "(\t\022\035\n\025slot_variable_node_id\030\003 \001(\005BMZHgit"
    "hub.com/tensorflow/tensorflow/tensorflow"
    "/go/core/core_protos_go_proto\370\001\001b\006proto3", 800);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/protobuf/trackable_object_graph.proto", &protobuf_RegisterTypes);
  TrackableObjectGraph::default_instance_ = new TrackableObjectGraph();
  TrackableObjectGraph_TrackableObject::default_instance_ = new TrackableObjectGraph_TrackableObject();
  TrackableObjectGraph_TrackableObject_ObjectReference::default_instance_ = new TrackableObjectGraph_TrackableObject_ObjectReference();
  TrackableObjectGraph_TrackableObject_SerializedTensor::default_instance_ = new TrackableObjectGraph_TrackableObject_SerializedTensor();
  TrackableObjectGraph_TrackableObject_SlotVariableReference::default_instance_ = new TrackableObjectGraph_TrackableObject_SlotVariableReference();
  TrackableObjectGraph::default_instance_->InitAsDefaultInstance();
  TrackableObjectGraph_TrackableObject::default_instance_->InitAsDefaultInstance();
  TrackableObjectGraph_TrackableObject_ObjectReference::default_instance_->InitAsDefaultInstance();
  TrackableObjectGraph_TrackableObject_SerializedTensor::default_instance_->InitAsDefaultInstance();
  TrackableObjectGraph_TrackableObject_SlotVariableReference::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto {
  StaticDescriptorInitializer_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto() {
    protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto();
  }
} static_descriptor_initializer_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackableObjectGraph_TrackableObject_ObjectReference::kNodeIdFieldNumber;
const int TrackableObjectGraph_TrackableObject_ObjectReference::kLocalNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackableObjectGraph_TrackableObject_ObjectReference::TrackableObjectGraph_TrackableObject_ObjectReference()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
}

TrackableObjectGraph_TrackableObject_ObjectReference::TrackableObjectGraph_TrackableObject_ObjectReference(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
}

void TrackableObjectGraph_TrackableObject_ObjectReference::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TrackableObjectGraph_TrackableObject_ObjectReference::TrackableObjectGraph_TrackableObject_ObjectReference(const TrackableObjectGraph_TrackableObject_ObjectReference& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
}

void TrackableObjectGraph_TrackableObject_ObjectReference::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  node_id_ = 0;
  local_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TrackableObjectGraph_TrackableObject_ObjectReference::~TrackableObjectGraph_TrackableObject_ObjectReference() {
  // @@protoc_insertion_point(destructor:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
  SharedDtor();
}

void TrackableObjectGraph_TrackableObject_ObjectReference::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  local_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void TrackableObjectGraph_TrackableObject_ObjectReference::ArenaDtor(void* object) {
  TrackableObjectGraph_TrackableObject_ObjectReference* _this = reinterpret_cast< TrackableObjectGraph_TrackableObject_ObjectReference* >(object);
  (void)_this;
}
void TrackableObjectGraph_TrackableObject_ObjectReference::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TrackableObjectGraph_TrackableObject_ObjectReference::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackableObjectGraph_TrackableObject_ObjectReference::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackableObjectGraph_TrackableObject_ObjectReference_descriptor_;
}

const TrackableObjectGraph_TrackableObject_ObjectReference& TrackableObjectGraph_TrackableObject_ObjectReference::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto();
  return *default_instance_;
}

TrackableObjectGraph_TrackableObject_ObjectReference* TrackableObjectGraph_TrackableObject_ObjectReference::default_instance_ = NULL;

TrackableObjectGraph_TrackableObject_ObjectReference* TrackableObjectGraph_TrackableObject_ObjectReference::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TrackableObjectGraph_TrackableObject_ObjectReference>(arena);
}

void TrackableObjectGraph_TrackableObject_ObjectReference::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
  node_id_ = 0;
  local_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool TrackableObjectGraph_TrackableObject_ObjectReference::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 node_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_local_name;
        break;
      }

      // optional string local_name = 2;
      case 2: {
        if (tag == 18) {
         parse_local_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_local_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->local_name().data(), this->local_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference.local_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
  return false;
#undef DO_
}

void TrackableObjectGraph_TrackableObject_ObjectReference::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
  // optional int32 node_id = 1;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node_id(), output);
  }

  // optional string local_name = 2;
  if (this->local_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->local_name().data(), this->local_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference.local_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->local_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
}

::google::protobuf::uint8* TrackableObjectGraph_TrackableObject_ObjectReference::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
  // optional int32 node_id = 1;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->node_id(), target);
  }

  // optional string local_name = 2;
  if (this->local_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->local_name().data(), this->local_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference.local_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->local_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
  return target;
}

int TrackableObjectGraph_TrackableObject_ObjectReference::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
  int total_size = 0;

  // optional int32 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_id());
  }

  // optional string local_name = 2;
  if (this->local_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->local_name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackableObjectGraph_TrackableObject_ObjectReference::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TrackableObjectGraph_TrackableObject_ObjectReference* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrackableObjectGraph_TrackableObject_ObjectReference>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
    MergeFrom(*source);
  }
}

void TrackableObjectGraph_TrackableObject_ObjectReference::MergeFrom(const TrackableObjectGraph_TrackableObject_ObjectReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
  if (from.local_name().size() > 0) {
    set_local_name(from.local_name());
  }
}

void TrackableObjectGraph_TrackableObject_ObjectReference::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackableObjectGraph_TrackableObject_ObjectReference::CopyFrom(const TrackableObjectGraph_TrackableObject_ObjectReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackableObjectGraph_TrackableObject_ObjectReference::IsInitialized() const {

  return true;
}

void TrackableObjectGraph_TrackableObject_ObjectReference::Swap(TrackableObjectGraph_TrackableObject_ObjectReference* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TrackableObjectGraph_TrackableObject_ObjectReference temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void TrackableObjectGraph_TrackableObject_ObjectReference::UnsafeArenaSwap(TrackableObjectGraph_TrackableObject_ObjectReference* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TrackableObjectGraph_TrackableObject_ObjectReference::InternalSwap(TrackableObjectGraph_TrackableObject_ObjectReference* other) {
  std::swap(node_id_, other->node_id_);
  local_name_.Swap(&other->local_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrackableObjectGraph_TrackableObject_ObjectReference::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackableObjectGraph_TrackableObject_ObjectReference_descriptor_;
  metadata.reflection = TrackableObjectGraph_TrackableObject_ObjectReference_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackableObjectGraph_TrackableObject_SerializedTensor::kNameFieldNumber;
const int TrackableObjectGraph_TrackableObject_SerializedTensor::kFullNameFieldNumber;
const int TrackableObjectGraph_TrackableObject_SerializedTensor::kCheckpointKeyFieldNumber;
const int TrackableObjectGraph_TrackableObject_SerializedTensor::kOptionalRestoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackableObjectGraph_TrackableObject_SerializedTensor::TrackableObjectGraph_TrackableObject_SerializedTensor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
}

TrackableObjectGraph_TrackableObject_SerializedTensor::TrackableObjectGraph_TrackableObject_SerializedTensor(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
}

void TrackableObjectGraph_TrackableObject_SerializedTensor::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TrackableObjectGraph_TrackableObject_SerializedTensor::TrackableObjectGraph_TrackableObject_SerializedTensor(const TrackableObjectGraph_TrackableObject_SerializedTensor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
}

void TrackableObjectGraph_TrackableObject_SerializedTensor::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  full_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  checkpoint_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optional_restore_ = false;
}

TrackableObjectGraph_TrackableObject_SerializedTensor::~TrackableObjectGraph_TrackableObject_SerializedTensor() {
  // @@protoc_insertion_point(destructor:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
  SharedDtor();
}

void TrackableObjectGraph_TrackableObject_SerializedTensor::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  full_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  checkpoint_key_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void TrackableObjectGraph_TrackableObject_SerializedTensor::ArenaDtor(void* object) {
  TrackableObjectGraph_TrackableObject_SerializedTensor* _this = reinterpret_cast< TrackableObjectGraph_TrackableObject_SerializedTensor* >(object);
  (void)_this;
}
void TrackableObjectGraph_TrackableObject_SerializedTensor::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TrackableObjectGraph_TrackableObject_SerializedTensor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackableObjectGraph_TrackableObject_SerializedTensor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackableObjectGraph_TrackableObject_SerializedTensor_descriptor_;
}

const TrackableObjectGraph_TrackableObject_SerializedTensor& TrackableObjectGraph_TrackableObject_SerializedTensor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto();
  return *default_instance_;
}

TrackableObjectGraph_TrackableObject_SerializedTensor* TrackableObjectGraph_TrackableObject_SerializedTensor::default_instance_ = NULL;

TrackableObjectGraph_TrackableObject_SerializedTensor* TrackableObjectGraph_TrackableObject_SerializedTensor::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TrackableObjectGraph_TrackableObject_SerializedTensor>(arena);
}

void TrackableObjectGraph_TrackableObject_SerializedTensor::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  full_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  checkpoint_key_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  optional_restore_ = false;
}

bool TrackableObjectGraph_TrackableObject_SerializedTensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_full_name;
        break;
      }

      // optional string full_name = 2;
      case 2: {
        if (tag == 18) {
         parse_full_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_full_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->full_name().data(), this->full_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.full_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_checkpoint_key;
        break;
      }

      // optional string checkpoint_key = 3;
      case 3: {
        if (tag == 26) {
         parse_checkpoint_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_checkpoint_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->checkpoint_key().data(), this->checkpoint_key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.checkpoint_key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_optional_restore;
        break;
      }

      // optional bool optional_restore = 4;
      case 4: {
        if (tag == 32) {
         parse_optional_restore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &optional_restore_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
  return false;
#undef DO_
}

void TrackableObjectGraph_TrackableObject_SerializedTensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string full_name = 2;
  if (this->full_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->full_name().data(), this->full_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.full_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->full_name(), output);
  }

  // optional string checkpoint_key = 3;
  if (this->checkpoint_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->checkpoint_key().data(), this->checkpoint_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.checkpoint_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->checkpoint_key(), output);
  }

  // optional bool optional_restore = 4;
  if (this->optional_restore() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->optional_restore(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
}

::google::protobuf::uint8* TrackableObjectGraph_TrackableObject_SerializedTensor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string full_name = 2;
  if (this->full_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->full_name().data(), this->full_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.full_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->full_name(), target);
  }

  // optional string checkpoint_key = 3;
  if (this->checkpoint_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->checkpoint_key().data(), this->checkpoint_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.checkpoint_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->checkpoint_key(), target);
  }

  // optional bool optional_restore = 4;
  if (this->optional_restore() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->optional_restore(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
  return target;
}

int TrackableObjectGraph_TrackableObject_SerializedTensor::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string full_name = 2;
  if (this->full_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->full_name());
  }

  // optional string checkpoint_key = 3;
  if (this->checkpoint_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->checkpoint_key());
  }

  // optional bool optional_restore = 4;
  if (this->optional_restore() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackableObjectGraph_TrackableObject_SerializedTensor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TrackableObjectGraph_TrackableObject_SerializedTensor* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrackableObjectGraph_TrackableObject_SerializedTensor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
    MergeFrom(*source);
  }
}

void TrackableObjectGraph_TrackableObject_SerializedTensor::MergeFrom(const TrackableObjectGraph_TrackableObject_SerializedTensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.full_name().size() > 0) {
    set_full_name(from.full_name());
  }
  if (from.checkpoint_key().size() > 0) {
    set_checkpoint_key(from.checkpoint_key());
  }
  if (from.optional_restore() != 0) {
    set_optional_restore(from.optional_restore());
  }
}

void TrackableObjectGraph_TrackableObject_SerializedTensor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackableObjectGraph_TrackableObject_SerializedTensor::CopyFrom(const TrackableObjectGraph_TrackableObject_SerializedTensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackableObjectGraph_TrackableObject_SerializedTensor::IsInitialized() const {

  return true;
}

void TrackableObjectGraph_TrackableObject_SerializedTensor::Swap(TrackableObjectGraph_TrackableObject_SerializedTensor* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TrackableObjectGraph_TrackableObject_SerializedTensor temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void TrackableObjectGraph_TrackableObject_SerializedTensor::UnsafeArenaSwap(TrackableObjectGraph_TrackableObject_SerializedTensor* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TrackableObjectGraph_TrackableObject_SerializedTensor::InternalSwap(TrackableObjectGraph_TrackableObject_SerializedTensor* other) {
  name_.Swap(&other->name_);
  full_name_.Swap(&other->full_name_);
  checkpoint_key_.Swap(&other->checkpoint_key_);
  std::swap(optional_restore_, other->optional_restore_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrackableObjectGraph_TrackableObject_SerializedTensor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackableObjectGraph_TrackableObject_SerializedTensor_descriptor_;
  metadata.reflection = TrackableObjectGraph_TrackableObject_SerializedTensor_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackableObjectGraph_TrackableObject_SlotVariableReference::kOriginalVariableNodeIdFieldNumber;
const int TrackableObjectGraph_TrackableObject_SlotVariableReference::kSlotNameFieldNumber;
const int TrackableObjectGraph_TrackableObject_SlotVariableReference::kSlotVariableNodeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackableObjectGraph_TrackableObject_SlotVariableReference::TrackableObjectGraph_TrackableObject_SlotVariableReference()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
}

TrackableObjectGraph_TrackableObject_SlotVariableReference::TrackableObjectGraph_TrackableObject_SlotVariableReference(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
}

void TrackableObjectGraph_TrackableObject_SlotVariableReference::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TrackableObjectGraph_TrackableObject_SlotVariableReference::TrackableObjectGraph_TrackableObject_SlotVariableReference(const TrackableObjectGraph_TrackableObject_SlotVariableReference& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
}

void TrackableObjectGraph_TrackableObject_SlotVariableReference::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  original_variable_node_id_ = 0;
  slot_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  slot_variable_node_id_ = 0;
}

TrackableObjectGraph_TrackableObject_SlotVariableReference::~TrackableObjectGraph_TrackableObject_SlotVariableReference() {
  // @@protoc_insertion_point(destructor:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
  SharedDtor();
}

void TrackableObjectGraph_TrackableObject_SlotVariableReference::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  slot_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void TrackableObjectGraph_TrackableObject_SlotVariableReference::ArenaDtor(void* object) {
  TrackableObjectGraph_TrackableObject_SlotVariableReference* _this = reinterpret_cast< TrackableObjectGraph_TrackableObject_SlotVariableReference* >(object);
  (void)_this;
}
void TrackableObjectGraph_TrackableObject_SlotVariableReference::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TrackableObjectGraph_TrackableObject_SlotVariableReference::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackableObjectGraph_TrackableObject_SlotVariableReference::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackableObjectGraph_TrackableObject_SlotVariableReference_descriptor_;
}

const TrackableObjectGraph_TrackableObject_SlotVariableReference& TrackableObjectGraph_TrackableObject_SlotVariableReference::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto();
  return *default_instance_;
}

TrackableObjectGraph_TrackableObject_SlotVariableReference* TrackableObjectGraph_TrackableObject_SlotVariableReference::default_instance_ = NULL;

TrackableObjectGraph_TrackableObject_SlotVariableReference* TrackableObjectGraph_TrackableObject_SlotVariableReference::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TrackableObjectGraph_TrackableObject_SlotVariableReference>(arena);
}

void TrackableObjectGraph_TrackableObject_SlotVariableReference::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TrackableObjectGraph_TrackableObject_SlotVariableReference, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TrackableObjectGraph_TrackableObject_SlotVariableReference*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(original_variable_node_id_, slot_variable_node_id_);
  slot_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());

#undef ZR_HELPER_
#undef ZR_

}

bool TrackableObjectGraph_TrackableObject_SlotVariableReference::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 original_variable_node_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &original_variable_node_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_slot_name;
        break;
      }

      // optional string slot_name = 2;
      case 2: {
        if (tag == 18) {
         parse_slot_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_slot_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->slot_name().data(), this->slot_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference.slot_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_slot_variable_node_id;
        break;
      }

      // optional int32 slot_variable_node_id = 3;
      case 3: {
        if (tag == 24) {
         parse_slot_variable_node_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_variable_node_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
  return false;
#undef DO_
}

void TrackableObjectGraph_TrackableObject_SlotVariableReference::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
  // optional int32 original_variable_node_id = 1;
  if (this->original_variable_node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->original_variable_node_id(), output);
  }

  // optional string slot_name = 2;
  if (this->slot_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->slot_name().data(), this->slot_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference.slot_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->slot_name(), output);
  }

  // optional int32 slot_variable_node_id = 3;
  if (this->slot_variable_node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->slot_variable_node_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
}

::google::protobuf::uint8* TrackableObjectGraph_TrackableObject_SlotVariableReference::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
  // optional int32 original_variable_node_id = 1;
  if (this->original_variable_node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->original_variable_node_id(), target);
  }

  // optional string slot_name = 2;
  if (this->slot_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->slot_name().data(), this->slot_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference.slot_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->slot_name(), target);
  }

  // optional int32 slot_variable_node_id = 3;
  if (this->slot_variable_node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->slot_variable_node_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
  return target;
}

int TrackableObjectGraph_TrackableObject_SlotVariableReference::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
  int total_size = 0;

  // optional int32 original_variable_node_id = 1;
  if (this->original_variable_node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->original_variable_node_id());
  }

  // optional string slot_name = 2;
  if (this->slot_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->slot_name());
  }

  // optional int32 slot_variable_node_id = 3;
  if (this->slot_variable_node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->slot_variable_node_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackableObjectGraph_TrackableObject_SlotVariableReference::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TrackableObjectGraph_TrackableObject_SlotVariableReference* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrackableObjectGraph_TrackableObject_SlotVariableReference>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
    MergeFrom(*source);
  }
}

void TrackableObjectGraph_TrackableObject_SlotVariableReference::MergeFrom(const TrackableObjectGraph_TrackableObject_SlotVariableReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.original_variable_node_id() != 0) {
    set_original_variable_node_id(from.original_variable_node_id());
  }
  if (from.slot_name().size() > 0) {
    set_slot_name(from.slot_name());
  }
  if (from.slot_variable_node_id() != 0) {
    set_slot_variable_node_id(from.slot_variable_node_id());
  }
}

void TrackableObjectGraph_TrackableObject_SlotVariableReference::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackableObjectGraph_TrackableObject_SlotVariableReference::CopyFrom(const TrackableObjectGraph_TrackableObject_SlotVariableReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackableObjectGraph_TrackableObject_SlotVariableReference::IsInitialized() const {

  return true;
}

void TrackableObjectGraph_TrackableObject_SlotVariableReference::Swap(TrackableObjectGraph_TrackableObject_SlotVariableReference* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TrackableObjectGraph_TrackableObject_SlotVariableReference temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void TrackableObjectGraph_TrackableObject_SlotVariableReference::UnsafeArenaSwap(TrackableObjectGraph_TrackableObject_SlotVariableReference* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TrackableObjectGraph_TrackableObject_SlotVariableReference::InternalSwap(TrackableObjectGraph_TrackableObject_SlotVariableReference* other) {
  std::swap(original_variable_node_id_, other->original_variable_node_id_);
  slot_name_.Swap(&other->slot_name_);
  std::swap(slot_variable_node_id_, other->slot_variable_node_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrackableObjectGraph_TrackableObject_SlotVariableReference::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackableObjectGraph_TrackableObject_SlotVariableReference_descriptor_;
  metadata.reflection = TrackableObjectGraph_TrackableObject_SlotVariableReference_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackableObjectGraph_TrackableObject::kChildrenFieldNumber;
const int TrackableObjectGraph_TrackableObject::kAttributesFieldNumber;
const int TrackableObjectGraph_TrackableObject::kSlotVariablesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackableObjectGraph_TrackableObject::TrackableObjectGraph_TrackableObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.TrackableObjectGraph.TrackableObject)
}

TrackableObjectGraph_TrackableObject::TrackableObjectGraph_TrackableObject(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  children_(arena),
  attributes_(arena),
  slot_variables_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.TrackableObjectGraph.TrackableObject)
}

void TrackableObjectGraph_TrackableObject::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TrackableObjectGraph_TrackableObject::TrackableObjectGraph_TrackableObject(const TrackableObjectGraph_TrackableObject& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.TrackableObjectGraph.TrackableObject)
}

void TrackableObjectGraph_TrackableObject::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

TrackableObjectGraph_TrackableObject::~TrackableObjectGraph_TrackableObject() {
  // @@protoc_insertion_point(destructor:tensorflow.TrackableObjectGraph.TrackableObject)
  SharedDtor();
}

void TrackableObjectGraph_TrackableObject::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void TrackableObjectGraph_TrackableObject::ArenaDtor(void* object) {
  TrackableObjectGraph_TrackableObject* _this = reinterpret_cast< TrackableObjectGraph_TrackableObject* >(object);
  (void)_this;
}
void TrackableObjectGraph_TrackableObject::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TrackableObjectGraph_TrackableObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackableObjectGraph_TrackableObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackableObjectGraph_TrackableObject_descriptor_;
}

const TrackableObjectGraph_TrackableObject& TrackableObjectGraph_TrackableObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto();
  return *default_instance_;
}

TrackableObjectGraph_TrackableObject* TrackableObjectGraph_TrackableObject::default_instance_ = NULL;

TrackableObjectGraph_TrackableObject* TrackableObjectGraph_TrackableObject::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TrackableObjectGraph_TrackableObject>(arena);
}

void TrackableObjectGraph_TrackableObject::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TrackableObjectGraph.TrackableObject)
  children_.Clear();
  attributes_.Clear();
  slot_variables_.Clear();
}

bool TrackableObjectGraph_TrackableObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.TrackableObjectGraph.TrackableObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference children = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_children:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_children()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_children;
        if (input->ExpectTag(18)) goto parse_loop_attributes;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor attributes = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_attributes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_attributes;
        if (input->ExpectTag(26)) goto parse_loop_slot_variables;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference slot_variables = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_slot_variables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_slot_variables()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_slot_variables;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.TrackableObjectGraph.TrackableObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.TrackableObjectGraph.TrackableObject)
  return false;
#undef DO_
}

void TrackableObjectGraph_TrackableObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.TrackableObjectGraph.TrackableObject)
  // repeated .tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference children = 1;
  for (unsigned int i = 0, n = this->children_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->children(i), output);
  }

  // repeated .tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor attributes = 2;
  for (unsigned int i = 0, n = this->attributes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attributes(i), output);
  }

  // repeated .tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference slot_variables = 3;
  for (unsigned int i = 0, n = this->slot_variables_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->slot_variables(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.TrackableObjectGraph.TrackableObject)
}

::google::protobuf::uint8* TrackableObjectGraph_TrackableObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TrackableObjectGraph.TrackableObject)
  // repeated .tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference children = 1;
  for (unsigned int i = 0, n = this->children_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->children(i), false, target);
  }

  // repeated .tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor attributes = 2;
  for (unsigned int i = 0, n = this->attributes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->attributes(i), false, target);
  }

  // repeated .tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference slot_variables = 3;
  for (unsigned int i = 0, n = this->slot_variables_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->slot_variables(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TrackableObjectGraph.TrackableObject)
  return target;
}

int TrackableObjectGraph_TrackableObject::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TrackableObjectGraph.TrackableObject)
  int total_size = 0;

  // repeated .tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference children = 1;
  total_size += 1 * this->children_size();
  for (int i = 0; i < this->children_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->children(i));
  }

  // repeated .tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor attributes = 2;
  total_size += 1 * this->attributes_size();
  for (int i = 0; i < this->attributes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attributes(i));
  }

  // repeated .tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference slot_variables = 3;
  total_size += 1 * this->slot_variables_size();
  for (int i = 0; i < this->slot_variables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slot_variables(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackableObjectGraph_TrackableObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.TrackableObjectGraph.TrackableObject)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TrackableObjectGraph_TrackableObject* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrackableObjectGraph_TrackableObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.TrackableObjectGraph.TrackableObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.TrackableObjectGraph.TrackableObject)
    MergeFrom(*source);
  }
}

void TrackableObjectGraph_TrackableObject::MergeFrom(const TrackableObjectGraph_TrackableObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TrackableObjectGraph.TrackableObject)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  children_.MergeFrom(from.children_);
  attributes_.MergeFrom(from.attributes_);
  slot_variables_.MergeFrom(from.slot_variables_);
}

void TrackableObjectGraph_TrackableObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.TrackableObjectGraph.TrackableObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackableObjectGraph_TrackableObject::CopyFrom(const TrackableObjectGraph_TrackableObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TrackableObjectGraph.TrackableObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackableObjectGraph_TrackableObject::IsInitialized() const {

  return true;
}

void TrackableObjectGraph_TrackableObject::Swap(TrackableObjectGraph_TrackableObject* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TrackableObjectGraph_TrackableObject temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void TrackableObjectGraph_TrackableObject::UnsafeArenaSwap(TrackableObjectGraph_TrackableObject* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TrackableObjectGraph_TrackableObject::InternalSwap(TrackableObjectGraph_TrackableObject* other) {
  children_.UnsafeArenaSwap(&other->children_);
  attributes_.UnsafeArenaSwap(&other->attributes_);
  slot_variables_.UnsafeArenaSwap(&other->slot_variables_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrackableObjectGraph_TrackableObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackableObjectGraph_TrackableObject_descriptor_;
  metadata.reflection = TrackableObjectGraph_TrackableObject_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackableObjectGraph::kNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackableObjectGraph::TrackableObjectGraph()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.TrackableObjectGraph)
}

TrackableObjectGraph::TrackableObjectGraph(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  nodes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.TrackableObjectGraph)
}

void TrackableObjectGraph::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TrackableObjectGraph::TrackableObjectGraph(const TrackableObjectGraph& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.TrackableObjectGraph)
}

void TrackableObjectGraph::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

TrackableObjectGraph::~TrackableObjectGraph() {
  // @@protoc_insertion_point(destructor:tensorflow.TrackableObjectGraph)
  SharedDtor();
}

void TrackableObjectGraph::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void TrackableObjectGraph::ArenaDtor(void* object) {
  TrackableObjectGraph* _this = reinterpret_cast< TrackableObjectGraph* >(object);
  (void)_this;
}
void TrackableObjectGraph::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TrackableObjectGraph::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackableObjectGraph::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackableObjectGraph_descriptor_;
}

const TrackableObjectGraph& TrackableObjectGraph::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto();
  return *default_instance_;
}

TrackableObjectGraph* TrackableObjectGraph::default_instance_ = NULL;

TrackableObjectGraph* TrackableObjectGraph::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TrackableObjectGraph>(arena);
}

void TrackableObjectGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TrackableObjectGraph)
  nodes_.Clear();
}

bool TrackableObjectGraph::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.TrackableObjectGraph)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.TrackableObjectGraph.TrackableObject nodes = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_nodes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.TrackableObjectGraph)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.TrackableObjectGraph)
  return false;
#undef DO_
}

void TrackableObjectGraph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.TrackableObjectGraph)
  // repeated .tensorflow.TrackableObjectGraph.TrackableObject nodes = 1;
  for (unsigned int i = 0, n = this->nodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nodes(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.TrackableObjectGraph)
}

::google::protobuf::uint8* TrackableObjectGraph::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TrackableObjectGraph)
  // repeated .tensorflow.TrackableObjectGraph.TrackableObject nodes = 1;
  for (unsigned int i = 0, n = this->nodes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->nodes(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TrackableObjectGraph)
  return target;
}

int TrackableObjectGraph::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TrackableObjectGraph)
  int total_size = 0;

  // repeated .tensorflow.TrackableObjectGraph.TrackableObject nodes = 1;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackableObjectGraph::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.TrackableObjectGraph)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TrackableObjectGraph* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrackableObjectGraph>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.TrackableObjectGraph)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.TrackableObjectGraph)
    MergeFrom(*source);
  }
}

void TrackableObjectGraph::MergeFrom(const TrackableObjectGraph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TrackableObjectGraph)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  nodes_.MergeFrom(from.nodes_);
}

void TrackableObjectGraph::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.TrackableObjectGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackableObjectGraph::CopyFrom(const TrackableObjectGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TrackableObjectGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackableObjectGraph::IsInitialized() const {

  return true;
}

void TrackableObjectGraph::Swap(TrackableObjectGraph* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TrackableObjectGraph temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void TrackableObjectGraph::UnsafeArenaSwap(TrackableObjectGraph* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TrackableObjectGraph::InternalSwap(TrackableObjectGraph* other) {
  nodes_.UnsafeArenaSwap(&other->nodes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrackableObjectGraph::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackableObjectGraph_descriptor_;
  metadata.reflection = TrackableObjectGraph_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrackableObjectGraph_TrackableObject_ObjectReference

// optional int32 node_id = 1;
void TrackableObjectGraph_TrackableObject_ObjectReference::clear_node_id() {
  node_id_ = 0;
}
 ::google::protobuf::int32 TrackableObjectGraph_TrackableObject_ObjectReference::node_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference.node_id)
  return node_id_;
}
 void TrackableObjectGraph_TrackableObject_ObjectReference::set_node_id(::google::protobuf::int32 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference.node_id)
}

// optional string local_name = 2;
void TrackableObjectGraph_TrackableObject_ObjectReference::clear_local_name() {
  local_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& TrackableObjectGraph_TrackableObject_ObjectReference::local_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference.local_name)
  return local_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TrackableObjectGraph_TrackableObject_ObjectReference::set_local_name(const ::std::string& value) {
  
  local_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference.local_name)
}
 void TrackableObjectGraph_TrackableObject_ObjectReference::set_local_name(const char* value) {
  
  local_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference.local_name)
}
 void TrackableObjectGraph_TrackableObject_ObjectReference::set_local_name(const char* value,
    size_t size) {
  
  local_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference.local_name)
}
 ::std::string* TrackableObjectGraph_TrackableObject_ObjectReference::mutable_local_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference.local_name)
  return local_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* TrackableObjectGraph_TrackableObject_ObjectReference::release_local_name() {
  // @@protoc_insertion_point(field_release:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference.local_name)
  
  return local_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* TrackableObjectGraph_TrackableObject_ObjectReference::unsafe_arena_release_local_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference.local_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return local_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void TrackableObjectGraph_TrackableObject_ObjectReference::set_allocated_local_name(::std::string* local_name) {
  if (local_name != NULL) {
    
  } else {
    
  }
  local_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), local_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference.local_name)
}
 void TrackableObjectGraph_TrackableObject_ObjectReference::unsafe_arena_set_allocated_local_name(
    ::std::string* local_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (local_name != NULL) {
    
  } else {
    
  }
  local_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      local_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference.local_name)
}

// -------------------------------------------------------------------

// TrackableObjectGraph_TrackableObject_SerializedTensor

// optional string name = 1;
void TrackableObjectGraph_TrackableObject_SerializedTensor::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& TrackableObjectGraph_TrackableObject_SerializedTensor::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TrackableObjectGraph_TrackableObject_SerializedTensor::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.name)
}
 void TrackableObjectGraph_TrackableObject_SerializedTensor::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.name)
}
 void TrackableObjectGraph_TrackableObject_SerializedTensor::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.name)
}
 ::std::string* TrackableObjectGraph_TrackableObject_SerializedTensor::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* TrackableObjectGraph_TrackableObject_SerializedTensor::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* TrackableObjectGraph_TrackableObject_SerializedTensor::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void TrackableObjectGraph_TrackableObject_SerializedTensor::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.name)
}
 void TrackableObjectGraph_TrackableObject_SerializedTensor::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.name)
}

// optional string full_name = 2;
void TrackableObjectGraph_TrackableObject_SerializedTensor::clear_full_name() {
  full_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& TrackableObjectGraph_TrackableObject_SerializedTensor::full_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.full_name)
  return full_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TrackableObjectGraph_TrackableObject_SerializedTensor::set_full_name(const ::std::string& value) {
  
  full_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.full_name)
}
 void TrackableObjectGraph_TrackableObject_SerializedTensor::set_full_name(const char* value) {
  
  full_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.full_name)
}
 void TrackableObjectGraph_TrackableObject_SerializedTensor::set_full_name(const char* value,
    size_t size) {
  
  full_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.full_name)
}
 ::std::string* TrackableObjectGraph_TrackableObject_SerializedTensor::mutable_full_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.full_name)
  return full_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* TrackableObjectGraph_TrackableObject_SerializedTensor::release_full_name() {
  // @@protoc_insertion_point(field_release:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.full_name)
  
  return full_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* TrackableObjectGraph_TrackableObject_SerializedTensor::unsafe_arena_release_full_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.full_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return full_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void TrackableObjectGraph_TrackableObject_SerializedTensor::set_allocated_full_name(::std::string* full_name) {
  if (full_name != NULL) {
    
  } else {
    
  }
  full_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), full_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.full_name)
}
 void TrackableObjectGraph_TrackableObject_SerializedTensor::unsafe_arena_set_allocated_full_name(
    ::std::string* full_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (full_name != NULL) {
    
  } else {
    
  }
  full_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      full_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.full_name)
}

// optional string checkpoint_key = 3;
void TrackableObjectGraph_TrackableObject_SerializedTensor::clear_checkpoint_key() {
  checkpoint_key_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& TrackableObjectGraph_TrackableObject_SerializedTensor::checkpoint_key() const {
  // @@protoc_insertion_point(field_get:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.checkpoint_key)
  return checkpoint_key_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TrackableObjectGraph_TrackableObject_SerializedTensor::set_checkpoint_key(const ::std::string& value) {
  
  checkpoint_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.checkpoint_key)
}
 void TrackableObjectGraph_TrackableObject_SerializedTensor::set_checkpoint_key(const char* value) {
  
  checkpoint_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.checkpoint_key)
}
 void TrackableObjectGraph_TrackableObject_SerializedTensor::set_checkpoint_key(const char* value,
    size_t size) {
  
  checkpoint_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.checkpoint_key)
}
 ::std::string* TrackableObjectGraph_TrackableObject_SerializedTensor::mutable_checkpoint_key() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.checkpoint_key)
  return checkpoint_key_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* TrackableObjectGraph_TrackableObject_SerializedTensor::release_checkpoint_key() {
  // @@protoc_insertion_point(field_release:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.checkpoint_key)
  
  return checkpoint_key_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* TrackableObjectGraph_TrackableObject_SerializedTensor::unsafe_arena_release_checkpoint_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.checkpoint_key)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return checkpoint_key_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void TrackableObjectGraph_TrackableObject_SerializedTensor::set_allocated_checkpoint_key(::std::string* checkpoint_key) {
  if (checkpoint_key != NULL) {
    
  } else {
    
  }
  checkpoint_key_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), checkpoint_key,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.checkpoint_key)
}
 void TrackableObjectGraph_TrackableObject_SerializedTensor::unsafe_arena_set_allocated_checkpoint_key(
    ::std::string* checkpoint_key) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (checkpoint_key != NULL) {
    
  } else {
    
  }
  checkpoint_key_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      checkpoint_key, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.checkpoint_key)
}

// optional bool optional_restore = 4;
void TrackableObjectGraph_TrackableObject_SerializedTensor::clear_optional_restore() {
  optional_restore_ = false;
}
 bool TrackableObjectGraph_TrackableObject_SerializedTensor::optional_restore() const {
  // @@protoc_insertion_point(field_get:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.optional_restore)
  return optional_restore_;
}
 void TrackableObjectGraph_TrackableObject_SerializedTensor::set_optional_restore(bool value) {
  
  optional_restore_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.optional_restore)
}

// -------------------------------------------------------------------

// TrackableObjectGraph_TrackableObject_SlotVariableReference

// optional int32 original_variable_node_id = 1;
void TrackableObjectGraph_TrackableObject_SlotVariableReference::clear_original_variable_node_id() {
  original_variable_node_id_ = 0;
}
 ::google::protobuf::int32 TrackableObjectGraph_TrackableObject_SlotVariableReference::original_variable_node_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference.original_variable_node_id)
  return original_variable_node_id_;
}
 void TrackableObjectGraph_TrackableObject_SlotVariableReference::set_original_variable_node_id(::google::protobuf::int32 value) {
  
  original_variable_node_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference.original_variable_node_id)
}

// optional string slot_name = 2;
void TrackableObjectGraph_TrackableObject_SlotVariableReference::clear_slot_name() {
  slot_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& TrackableObjectGraph_TrackableObject_SlotVariableReference::slot_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference.slot_name)
  return slot_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TrackableObjectGraph_TrackableObject_SlotVariableReference::set_slot_name(const ::std::string& value) {
  
  slot_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference.slot_name)
}
 void TrackableObjectGraph_TrackableObject_SlotVariableReference::set_slot_name(const char* value) {
  
  slot_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference.slot_name)
}
 void TrackableObjectGraph_TrackableObject_SlotVariableReference::set_slot_name(const char* value,
    size_t size) {
  
  slot_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference.slot_name)
}
 ::std::string* TrackableObjectGraph_TrackableObject_SlotVariableReference::mutable_slot_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference.slot_name)
  return slot_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* TrackableObjectGraph_TrackableObject_SlotVariableReference::release_slot_name() {
  // @@protoc_insertion_point(field_release:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference.slot_name)
  
  return slot_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* TrackableObjectGraph_TrackableObject_SlotVariableReference::unsafe_arena_release_slot_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference.slot_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return slot_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void TrackableObjectGraph_TrackableObject_SlotVariableReference::set_allocated_slot_name(::std::string* slot_name) {
  if (slot_name != NULL) {
    
  } else {
    
  }
  slot_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), slot_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference.slot_name)
}
 void TrackableObjectGraph_TrackableObject_SlotVariableReference::unsafe_arena_set_allocated_slot_name(
    ::std::string* slot_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (slot_name != NULL) {
    
  } else {
    
  }
  slot_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      slot_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference.slot_name)
}

// optional int32 slot_variable_node_id = 3;
void TrackableObjectGraph_TrackableObject_SlotVariableReference::clear_slot_variable_node_id() {
  slot_variable_node_id_ = 0;
}
 ::google::protobuf::int32 TrackableObjectGraph_TrackableObject_SlotVariableReference::slot_variable_node_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference.slot_variable_node_id)
  return slot_variable_node_id_;
}
 void TrackableObjectGraph_TrackableObject_SlotVariableReference::set_slot_variable_node_id(::google::protobuf::int32 value) {
  
  slot_variable_node_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference.slot_variable_node_id)
}

// -------------------------------------------------------------------

// TrackableObjectGraph_TrackableObject

// repeated .tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference children = 1;
int TrackableObjectGraph_TrackableObject::children_size() const {
  return children_.size();
}
void TrackableObjectGraph_TrackableObject::clear_children() {
  children_.Clear();
}
const ::tensorflow::TrackableObjectGraph_TrackableObject_ObjectReference& TrackableObjectGraph_TrackableObject::children(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.TrackableObjectGraph.TrackableObject.children)
  return children_.Get(index);
}
::tensorflow::TrackableObjectGraph_TrackableObject_ObjectReference* TrackableObjectGraph_TrackableObject::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.TrackableObjectGraph.TrackableObject.children)
  return children_.Mutable(index);
}
::tensorflow::TrackableObjectGraph_TrackableObject_ObjectReference* TrackableObjectGraph_TrackableObject::add_children() {
  // @@protoc_insertion_point(field_add:tensorflow.TrackableObjectGraph.TrackableObject.children)
  return children_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::TrackableObjectGraph_TrackableObject_ObjectReference >*
TrackableObjectGraph_TrackableObject::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.TrackableObjectGraph.TrackableObject.children)
  return &children_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::TrackableObjectGraph_TrackableObject_ObjectReference >&
TrackableObjectGraph_TrackableObject::children() const {
  // @@protoc_insertion_point(field_list:tensorflow.TrackableObjectGraph.TrackableObject.children)
  return children_;
}

// repeated .tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor attributes = 2;
int TrackableObjectGraph_TrackableObject::attributes_size() const {
  return attributes_.size();
}
void TrackableObjectGraph_TrackableObject::clear_attributes() {
  attributes_.Clear();
}
const ::tensorflow::TrackableObjectGraph_TrackableObject_SerializedTensor& TrackableObjectGraph_TrackableObject::attributes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.TrackableObjectGraph.TrackableObject.attributes)
  return attributes_.Get(index);
}
::tensorflow::TrackableObjectGraph_TrackableObject_SerializedTensor* TrackableObjectGraph_TrackableObject::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.TrackableObjectGraph.TrackableObject.attributes)
  return attributes_.Mutable(index);
}
::tensorflow::TrackableObjectGraph_TrackableObject_SerializedTensor* TrackableObjectGraph_TrackableObject::add_attributes() {
  // @@protoc_insertion_point(field_add:tensorflow.TrackableObjectGraph.TrackableObject.attributes)
  return attributes_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::TrackableObjectGraph_TrackableObject_SerializedTensor >*
TrackableObjectGraph_TrackableObject::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.TrackableObjectGraph.TrackableObject.attributes)
  return &attributes_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::TrackableObjectGraph_TrackableObject_SerializedTensor >&
TrackableObjectGraph_TrackableObject::attributes() const {
  // @@protoc_insertion_point(field_list:tensorflow.TrackableObjectGraph.TrackableObject.attributes)
  return attributes_;
}

// repeated .tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference slot_variables = 3;
int TrackableObjectGraph_TrackableObject::slot_variables_size() const {
  return slot_variables_.size();
}
void TrackableObjectGraph_TrackableObject::clear_slot_variables() {
  slot_variables_.Clear();
}
const ::tensorflow::TrackableObjectGraph_TrackableObject_SlotVariableReference& TrackableObjectGraph_TrackableObject::slot_variables(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.TrackableObjectGraph.TrackableObject.slot_variables)
  return slot_variables_.Get(index);
}
::tensorflow::TrackableObjectGraph_TrackableObject_SlotVariableReference* TrackableObjectGraph_TrackableObject::mutable_slot_variables(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.TrackableObjectGraph.TrackableObject.slot_variables)
  return slot_variables_.Mutable(index);
}
::tensorflow::TrackableObjectGraph_TrackableObject_SlotVariableReference* TrackableObjectGraph_TrackableObject::add_slot_variables() {
  // @@protoc_insertion_point(field_add:tensorflow.TrackableObjectGraph.TrackableObject.slot_variables)
  return slot_variables_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::TrackableObjectGraph_TrackableObject_SlotVariableReference >*
TrackableObjectGraph_TrackableObject::mutable_slot_variables() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.TrackableObjectGraph.TrackableObject.slot_variables)
  return &slot_variables_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::TrackableObjectGraph_TrackableObject_SlotVariableReference >&
TrackableObjectGraph_TrackableObject::slot_variables() const {
  // @@protoc_insertion_point(field_list:tensorflow.TrackableObjectGraph.TrackableObject.slot_variables)
  return slot_variables_;
}

// -------------------------------------------------------------------

// TrackableObjectGraph

// repeated .tensorflow.TrackableObjectGraph.TrackableObject nodes = 1;
int TrackableObjectGraph::nodes_size() const {
  return nodes_.size();
}
void TrackableObjectGraph::clear_nodes() {
  nodes_.Clear();
}
const ::tensorflow::TrackableObjectGraph_TrackableObject& TrackableObjectGraph::nodes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.TrackableObjectGraph.nodes)
  return nodes_.Get(index);
}
::tensorflow::TrackableObjectGraph_TrackableObject* TrackableObjectGraph::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.TrackableObjectGraph.nodes)
  return nodes_.Mutable(index);
}
::tensorflow::TrackableObjectGraph_TrackableObject* TrackableObjectGraph::add_nodes() {
  // @@protoc_insertion_point(field_add:tensorflow.TrackableObjectGraph.nodes)
  return nodes_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::TrackableObjectGraph_TrackableObject >*
TrackableObjectGraph::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.TrackableObjectGraph.nodes)
  return &nodes_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::TrackableObjectGraph_TrackableObject >&
TrackableObjectGraph::nodes() const {
  // @@protoc_insertion_point(field_list:tensorflow.TrackableObjectGraph.nodes)
  return nodes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
