// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/debug_event.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/protobuf/debug_event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {

namespace {

const ::google::protobuf::Descriptor* DebugEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugEvent_reflection_ = NULL;
struct DebugEventOneofInstance {
  const ::tensorflow::DebugMetadata* debug_metadata_;
  const ::tensorflow::SourceFile* source_file_;
  const ::tensorflow::StackFrameWithId* stack_frame_with_id_;
  const ::tensorflow::GraphOpCreation* graph_op_creation_;
  const ::tensorflow::DebuggedGraph* debugged_graph_;
  const ::tensorflow::Execution* execution_;
  const ::tensorflow::GraphExecutionTrace* graph_execution_trace_;
  ::google::protobuf::internal::ArenaStringPtr graph_id_;
  const ::tensorflow::DebuggedDevice* debugged_device_;
}* DebugEvent_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* DebugMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* SourceFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SourceFile_reflection_ = NULL;
const ::google::protobuf::Descriptor* StackFrameWithId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StackFrameWithId_reflection_ = NULL;
const ::google::protobuf::Descriptor* CodeLocation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CodeLocation_reflection_ = NULL;
const ::google::protobuf::Descriptor* GraphOpCreation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GraphOpCreation_reflection_ = NULL;
const ::google::protobuf::Descriptor* DebuggedGraph_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebuggedGraph_reflection_ = NULL;
const ::google::protobuf::Descriptor* DebuggedDevice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebuggedDevice_reflection_ = NULL;
const ::google::protobuf::Descriptor* Execution_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Execution_reflection_ = NULL;
const ::google::protobuf::Descriptor* GraphExecutionTrace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GraphExecutionTrace_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TensorDebugMode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto() {
  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow/core/protobuf/debug_event.proto");
  GOOGLE_CHECK(file != NULL);
  DebugEvent_descriptor_ = file->message_type(0);
  static const int DebugEvent_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugEvent, wall_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugEvent, step_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DebugEvent_default_oneof_instance_, debug_metadata_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DebugEvent_default_oneof_instance_, source_file_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DebugEvent_default_oneof_instance_, stack_frame_with_id_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DebugEvent_default_oneof_instance_, graph_op_creation_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DebugEvent_default_oneof_instance_, debugged_graph_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DebugEvent_default_oneof_instance_, execution_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DebugEvent_default_oneof_instance_, graph_execution_trace_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DebugEvent_default_oneof_instance_, graph_id_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DebugEvent_default_oneof_instance_, debugged_device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugEvent, what_),
  };
  DebugEvent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DebugEvent_descriptor_,
      DebugEvent::default_instance_,
      DebugEvent_offsets_,
      -1,
      -1,
      -1,
      DebugEvent_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugEvent, _oneof_case_[0]),
      sizeof(DebugEvent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugEvent, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugEvent, _is_default_instance_));
  DebugMetadata_descriptor_ = file->message_type(1);
  static const int DebugMetadata_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugMetadata, tensorflow_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugMetadata, file_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugMetadata, tfdbg_run_id_),
  };
  DebugMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DebugMetadata_descriptor_,
      DebugMetadata::default_instance_,
      DebugMetadata_offsets_,
      -1,
      -1,
      -1,
      sizeof(DebugMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugMetadata, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugMetadata, _is_default_instance_));
  SourceFile_descriptor_ = file->message_type(2);
  static const int SourceFile_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceFile, file_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceFile, host_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceFile, lines_),
  };
  SourceFile_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SourceFile_descriptor_,
      SourceFile::default_instance_,
      SourceFile_offsets_,
      -1,
      -1,
      -1,
      sizeof(SourceFile),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceFile, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceFile, _is_default_instance_));
  StackFrameWithId_descriptor_ = file->message_type(3);
  static const int StackFrameWithId_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StackFrameWithId, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StackFrameWithId, file_line_col_),
  };
  StackFrameWithId_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StackFrameWithId_descriptor_,
      StackFrameWithId::default_instance_,
      StackFrameWithId_offsets_,
      -1,
      -1,
      -1,
      sizeof(StackFrameWithId),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StackFrameWithId, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StackFrameWithId, _is_default_instance_));
  CodeLocation_descriptor_ = file->message_type(4);
  static const int CodeLocation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeLocation, host_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeLocation, stack_frame_ids_),
  };
  CodeLocation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CodeLocation_descriptor_,
      CodeLocation::default_instance_,
      CodeLocation_offsets_,
      -1,
      -1,
      -1,
      sizeof(CodeLocation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeLocation, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeLocation, _is_default_instance_));
  GraphOpCreation_descriptor_ = file->message_type(5);
  static const int GraphOpCreation_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphOpCreation, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphOpCreation, op_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphOpCreation, graph_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphOpCreation, graph_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphOpCreation, device_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphOpCreation, input_names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphOpCreation, num_outputs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphOpCreation, code_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphOpCreation, output_tensor_ids_),
  };
  GraphOpCreation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GraphOpCreation_descriptor_,
      GraphOpCreation::default_instance_,
      GraphOpCreation_offsets_,
      -1,
      -1,
      -1,
      sizeof(GraphOpCreation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphOpCreation, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphOpCreation, _is_default_instance_));
  DebuggedGraph_descriptor_ = file->message_type(6);
  static const int DebuggedGraph_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebuggedGraph, graph_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebuggedGraph, graph_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebuggedGraph, instrumented_ops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebuggedGraph, original_graph_def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebuggedGraph, instrumented_graph_def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebuggedGraph, outer_context_id_),
  };
  DebuggedGraph_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DebuggedGraph_descriptor_,
      DebuggedGraph::default_instance_,
      DebuggedGraph_offsets_,
      -1,
      -1,
      -1,
      sizeof(DebuggedGraph),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebuggedGraph, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebuggedGraph, _is_default_instance_));
  DebuggedDevice_descriptor_ = file->message_type(7);
  static const int DebuggedDevice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebuggedDevice, device_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebuggedDevice, device_id_),
  };
  DebuggedDevice_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DebuggedDevice_descriptor_,
      DebuggedDevice::default_instance_,
      DebuggedDevice_offsets_,
      -1,
      -1,
      -1,
      sizeof(DebuggedDevice),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebuggedDevice, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebuggedDevice, _is_default_instance_));
  Execution_descriptor_ = file->message_type(8);
  static const int Execution_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Execution, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Execution, num_outputs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Execution, graph_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Execution, input_tensor_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Execution, output_tensor_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Execution, tensor_debug_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Execution, tensor_protos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Execution, code_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Execution, output_tensor_device_ids_),
  };
  Execution_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Execution_descriptor_,
      Execution::default_instance_,
      Execution_offsets_,
      -1,
      -1,
      -1,
      sizeof(Execution),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Execution, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Execution, _is_default_instance_));
  GraphExecutionTrace_descriptor_ = file->message_type(9);
  static const int GraphExecutionTrace_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphExecutionTrace, tfdbg_context_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphExecutionTrace, op_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphExecutionTrace, output_slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphExecutionTrace, tensor_debug_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphExecutionTrace, tensor_proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphExecutionTrace, device_name_),
  };
  GraphExecutionTrace_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GraphExecutionTrace_descriptor_,
      GraphExecutionTrace::default_instance_,
      GraphExecutionTrace_offsets_,
      -1,
      -1,
      -1,
      sizeof(GraphExecutionTrace),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphExecutionTrace, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphExecutionTrace, _is_default_instance_));
  TensorDebugMode_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DebugEvent_descriptor_, &DebugEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DebugMetadata_descriptor_, &DebugMetadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SourceFile_descriptor_, &SourceFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StackFrameWithId_descriptor_, &StackFrameWithId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CodeLocation_descriptor_, &CodeLocation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GraphOpCreation_descriptor_, &GraphOpCreation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DebuggedGraph_descriptor_, &DebuggedGraph::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DebuggedDevice_descriptor_, &DebuggedDevice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Execution_descriptor_, &Execution::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GraphExecutionTrace_descriptor_, &GraphExecutionTrace::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto() {
  delete DebugEvent::default_instance_;
  delete DebugEvent_default_oneof_instance_;
  delete DebugEvent_reflection_;
  delete DebugMetadata::default_instance_;
  delete DebugMetadata_reflection_;
  delete SourceFile::default_instance_;
  delete SourceFile_reflection_;
  delete StackFrameWithId::default_instance_;
  delete StackFrameWithId_reflection_;
  delete CodeLocation::default_instance_;
  delete CodeLocation_reflection_;
  delete GraphOpCreation::default_instance_;
  delete GraphOpCreation_reflection_;
  delete DebuggedGraph::default_instance_;
  delete DebuggedGraph_reflection_;
  delete DebuggedDevice::default_instance_;
  delete DebuggedDevice_reflection_;
  delete Execution::default_instance_;
  delete Execution_reflection_;
  delete GraphExecutionTrace::default_instance_;
  delete GraphExecutionTrace_reflection_;
}

void protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2ftensor_2eproto();
  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n*tensorflow/core/protobuf/debug_event.p"
    "roto\022\ntensorflow\032&tensorflow/core/framew"
    "ork/tensor.proto\032/tensorflow/core/protob"
    "uf/graph_debug_info.proto\"\376\003\n\nDebugEvent"
    "\022\021\n\twall_time\030\001 \001(\001\022\014\n\004step\030\002 \001(\003\0223\n\016deb"
    "ug_metadata\030\003 \001(\0132\031.tensorflow.DebugMeta"
    "dataH\000\022-\n\013source_file\030\004 \001(\0132\026.tensorflow"
    ".SourceFileH\000\022;\n\023stack_frame_with_id\030\006 \001"
    "(\0132\034.tensorflow.StackFrameWithIdH\000\0228\n\021gr"
    "aph_op_creation\030\007 \001(\0132\033.tensorflow.Graph"
    "OpCreationH\000\0223\n\016debugged_graph\030\010 \001(\0132\031.t"
    "ensorflow.DebuggedGraphH\000\022*\n\texecution\030\t"
    " \001(\0132\025.tensorflow.ExecutionH\000\022@\n\025graph_e"
    "xecution_trace\030\n \001(\0132\037.tensorflow.GraphE"
    "xecutionTraceH\000\022\022\n\010graph_id\030\013 \001(\tH\000\0225\n\017d"
    "ebugged_device\030\014 \001(\0132\032.tensorflow.Debugg"
    "edDeviceH\000B\006\n\004what\"W\n\rDebugMetadata\022\032\n\022t"
    "ensorflow_version\030\001 \001(\t\022\024\n\014file_version\030"
    "\002 \001(\t\022\024\n\014tfdbg_run_id\030\003 \001(\t\"A\n\nSourceFil"
    "e\022\021\n\tfile_path\030\001 \001(\t\022\021\n\thost_name\030\002 \001(\t\022"
    "\r\n\005lines\030\003 \003(\t\"]\n\020StackFrameWithId\022\n\n\002id"
    "\030\001 \001(\t\022=\n\rfile_line_col\030\002 \001(\0132&.tensorfl"
    "ow.GraphDebugInfo.FileLineCol\":\n\014CodeLoc"
    "ation\022\021\n\thost_name\030\001 \001(\t\022\027\n\017stack_frame_"
    "ids\030\002 \003(\t\"\344\001\n\017GraphOpCreation\022\017\n\007op_type"
    "\030\001 \001(\t\022\017\n\007op_name\030\002 \001(\t\022\022\n\ngraph_name\030\003 "
    "\001(\t\022\020\n\010graph_id\030\004 \001(\t\022\023\n\013device_name\030\005 \001"
    "(\t\022\023\n\013input_names\030\006 \003(\t\022\023\n\013num_outputs\030\007"
    " \001(\005\022/\n\rcode_location\030\010 \001(\0132\030.tensorflow"
    ".CodeLocation\022\031\n\021output_tensor_ids\030\t \003(\005"
    "\"\245\001\n\rDebuggedGraph\022\020\n\010graph_id\030\001 \001(\t\022\022\n\n"
    "graph_name\030\002 \001(\t\022\030\n\020instrumented_ops\030\003 \003"
    "(\t\022\032\n\022original_graph_def\030\004 \001(\014\022\036\n\026instru"
    "mented_graph_def\030\005 \001(\014\022\030\n\020outer_context_"
    "id\030\006 \001(\t\"8\n\016DebuggedDevice\022\023\n\013device_nam"
    "e\030\001 \001(\t\022\021\n\tdevice_id\030\002 \001(\005\"\263\002\n\tExecution"
    "\022\017\n\007op_type\030\001 \001(\t\022\023\n\013num_outputs\030\002 \001(\005\022\020"
    "\n\010graph_id\030\003 \001(\t\022\030\n\020input_tensor_ids\030\004 \003"
    "(\003\022\031\n\021output_tensor_ids\030\005 \003(\003\0226\n\021tensor_"
    "debug_mode\030\006 \001(\0162\033.tensorflow.TensorDebu"
    "gMode\022.\n\rtensor_protos\030\007 \003(\0132\027.tensorflo"
    "w.TensorProto\022/\n\rcode_location\030\010 \001(\0132\030.t"
    "ensorflow.CodeLocation\022 \n\030output_tensor_"
    "device_ids\030\t \003(\005\"\321\001\n\023GraphExecutionTrace"
    "\022\030\n\020tfdbg_context_id\030\001 \001(\t\022\017\n\007op_name\030\002 "
    "\001(\t\022\023\n\013output_slot\030\003 \001(\005\0226\n\021tensor_debug"
    "_mode\030\004 \001(\0162\033.tensorflow.TensorDebugMode"
    "\022-\n\014tensor_proto\030\005 \001(\0132\027.tensorflow.Tens"
    "orProto\022\023\n\013device_name\030\006 \001(\t*\266\001\n\017TensorD"
    "ebugMode\022\017\n\013UNSPECIFIED\020\000\022\r\n\tNO_TENSOR\020\001"
    "\022\017\n\013CURT_HEALTH\020\002\022\022\n\016CONCISE_HEALTH\020\003\022\017\n"
    "\013FULL_HEALTH\020\004\022\t\n\005SHAPE\020\005\022\021\n\rFULL_NUMERI"
    "CS\020\006\022\017\n\013FULL_TENSOR\020\007\022\036\n\032REDUCE_INF_NAN_"
    "THREE_SLOTS\020\010Bv\n\023org.tensorflow.utilB\020De"
    "bugEventProtosP\001ZHgithub.com/tensorflow/"
    "tensorflow/tensorflow/go/core/core_proto"
    "s_go_proto\370\001\001b\006proto3", 2261);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/protobuf/debug_event.proto", &protobuf_RegisterTypes);
  DebugEvent::default_instance_ = new DebugEvent();
  DebugEvent_default_oneof_instance_ = new DebugEventOneofInstance();
  DebugMetadata::default_instance_ = new DebugMetadata();
  SourceFile::default_instance_ = new SourceFile();
  StackFrameWithId::default_instance_ = new StackFrameWithId();
  CodeLocation::default_instance_ = new CodeLocation();
  GraphOpCreation::default_instance_ = new GraphOpCreation();
  DebuggedGraph::default_instance_ = new DebuggedGraph();
  DebuggedDevice::default_instance_ = new DebuggedDevice();
  Execution::default_instance_ = new Execution();
  GraphExecutionTrace::default_instance_ = new GraphExecutionTrace();
  DebugEvent::default_instance_->InitAsDefaultInstance();
  DebugMetadata::default_instance_->InitAsDefaultInstance();
  SourceFile::default_instance_->InitAsDefaultInstance();
  StackFrameWithId::default_instance_->InitAsDefaultInstance();
  CodeLocation::default_instance_->InitAsDefaultInstance();
  GraphOpCreation::default_instance_->InitAsDefaultInstance();
  DebuggedGraph::default_instance_->InitAsDefaultInstance();
  DebuggedDevice::default_instance_->InitAsDefaultInstance();
  Execution::default_instance_->InitAsDefaultInstance();
  GraphExecutionTrace::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto {
  StaticDescriptorInitializer_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto() {
    protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto();
  }
} static_descriptor_initializer_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto_;
const ::google::protobuf::EnumDescriptor* TensorDebugMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TensorDebugMode_descriptor_;
}
bool TensorDebugMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugEvent::kWallTimeFieldNumber;
const int DebugEvent::kStepFieldNumber;
const int DebugEvent::kDebugMetadataFieldNumber;
const int DebugEvent::kSourceFileFieldNumber;
const int DebugEvent::kStackFrameWithIdFieldNumber;
const int DebugEvent::kGraphOpCreationFieldNumber;
const int DebugEvent::kDebuggedGraphFieldNumber;
const int DebugEvent::kExecutionFieldNumber;
const int DebugEvent::kGraphExecutionTraceFieldNumber;
const int DebugEvent::kGraphIdFieldNumber;
const int DebugEvent::kDebuggedDeviceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugEvent::DebugEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.DebugEvent)
}

DebugEvent::DebugEvent(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DebugEvent)
}

void DebugEvent::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  DebugEvent_default_oneof_instance_->debug_metadata_ = const_cast< ::tensorflow::DebugMetadata*>(&::tensorflow::DebugMetadata::default_instance());
  DebugEvent_default_oneof_instance_->source_file_ = const_cast< ::tensorflow::SourceFile*>(&::tensorflow::SourceFile::default_instance());
  DebugEvent_default_oneof_instance_->stack_frame_with_id_ = const_cast< ::tensorflow::StackFrameWithId*>(&::tensorflow::StackFrameWithId::default_instance());
  DebugEvent_default_oneof_instance_->graph_op_creation_ = const_cast< ::tensorflow::GraphOpCreation*>(&::tensorflow::GraphOpCreation::default_instance());
  DebugEvent_default_oneof_instance_->debugged_graph_ = const_cast< ::tensorflow::DebuggedGraph*>(&::tensorflow::DebuggedGraph::default_instance());
  DebugEvent_default_oneof_instance_->execution_ = const_cast< ::tensorflow::Execution*>(&::tensorflow::Execution::default_instance());
  DebugEvent_default_oneof_instance_->graph_execution_trace_ = const_cast< ::tensorflow::GraphExecutionTrace*>(&::tensorflow::GraphExecutionTrace::default_instance());
  DebugEvent_default_oneof_instance_->graph_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  DebugEvent_default_oneof_instance_->debugged_device_ = const_cast< ::tensorflow::DebuggedDevice*>(&::tensorflow::DebuggedDevice::default_instance());
}

DebugEvent::DebugEvent(const DebugEvent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.DebugEvent)
}

void DebugEvent::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  wall_time_ = 0;
  step_ = GOOGLE_LONGLONG(0);
  clear_has_what();
}

DebugEvent::~DebugEvent() {
  // @@protoc_insertion_point(destructor:tensorflow.DebugEvent)
  SharedDtor();
}

void DebugEvent::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (has_what()) {
    clear_what();
  }
  if (this != default_instance_) {
  }
}

void DebugEvent::ArenaDtor(void* object) {
  DebugEvent* _this = reinterpret_cast< DebugEvent* >(object);
  (void)_this;
}
void DebugEvent::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DebugEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugEvent_descriptor_;
}

const DebugEvent& DebugEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto();
  return *default_instance_;
}

DebugEvent* DebugEvent::default_instance_ = NULL;

DebugEvent* DebugEvent::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DebugEvent>(arena);
}

void DebugEvent::clear_what() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.DebugEvent)
  switch(what_case()) {
    case kDebugMetadata: {
      if (GetArenaNoVirtual() == NULL) {
        delete what_.debug_metadata_;
      }
      break;
    }
    case kSourceFile: {
      if (GetArenaNoVirtual() == NULL) {
        delete what_.source_file_;
      }
      break;
    }
    case kStackFrameWithId: {
      if (GetArenaNoVirtual() == NULL) {
        delete what_.stack_frame_with_id_;
      }
      break;
    }
    case kGraphOpCreation: {
      if (GetArenaNoVirtual() == NULL) {
        delete what_.graph_op_creation_;
      }
      break;
    }
    case kDebuggedGraph: {
      if (GetArenaNoVirtual() == NULL) {
        delete what_.debugged_graph_;
      }
      break;
    }
    case kExecution: {
      if (GetArenaNoVirtual() == NULL) {
        delete what_.execution_;
      }
      break;
    }
    case kGraphExecutionTrace: {
      if (GetArenaNoVirtual() == NULL) {
        delete what_.graph_execution_trace_;
      }
      break;
    }
    case kGraphId: {
      what_.graph_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case kDebuggedDevice: {
      if (GetArenaNoVirtual() == NULL) {
        delete what_.debugged_device_;
      }
      break;
    }
    case WHAT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = WHAT_NOT_SET;
}


void DebugEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DebugEvent)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DebugEvent, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DebugEvent*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(wall_time_, step_);

#undef ZR_HELPER_
#undef ZR_

  clear_what();
}

bool DebugEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.DebugEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double wall_time = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wall_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_step;
        break;
      }

      // optional int64 step = 2;
      case 2: {
        if (tag == 16) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &step_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_debug_metadata;
        break;
      }

      // optional .tensorflow.DebugMetadata debug_metadata = 3;
      case 3: {
        if (tag == 26) {
         parse_debug_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_debug_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_source_file;
        break;
      }

      // optional .tensorflow.SourceFile source_file = 4;
      case 4: {
        if (tag == 34) {
         parse_source_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source_file()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_stack_frame_with_id;
        break;
      }

      // optional .tensorflow.StackFrameWithId stack_frame_with_id = 6;
      case 6: {
        if (tag == 50) {
         parse_stack_frame_with_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stack_frame_with_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_graph_op_creation;
        break;
      }

      // optional .tensorflow.GraphOpCreation graph_op_creation = 7;
      case 7: {
        if (tag == 58) {
         parse_graph_op_creation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_graph_op_creation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_debugged_graph;
        break;
      }

      // optional .tensorflow.DebuggedGraph debugged_graph = 8;
      case 8: {
        if (tag == 66) {
         parse_debugged_graph:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_debugged_graph()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_execution;
        break;
      }

      // optional .tensorflow.Execution execution = 9;
      case 9: {
        if (tag == 74) {
         parse_execution:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_execution()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_graph_execution_trace;
        break;
      }

      // optional .tensorflow.GraphExecutionTrace graph_execution_trace = 10;
      case 10: {
        if (tag == 82) {
         parse_graph_execution_trace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_graph_execution_trace()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_graph_id;
        break;
      }

      // optional string graph_id = 11;
      case 11: {
        if (tag == 90) {
         parse_graph_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_graph_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->graph_id().data(), this->graph_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.DebugEvent.graph_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_debugged_device;
        break;
      }

      // optional .tensorflow.DebuggedDevice debugged_device = 12;
      case 12: {
        if (tag == 98) {
         parse_debugged_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_debugged_device()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.DebugEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.DebugEvent)
  return false;
#undef DO_
}

void DebugEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.DebugEvent)
  // optional double wall_time = 1;
  if (this->wall_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->wall_time(), output);
  }

  // optional int64 step = 2;
  if (this->step() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->step(), output);
  }

  // optional .tensorflow.DebugMetadata debug_metadata = 3;
  if (has_debug_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *what_.debug_metadata_, output);
  }

  // optional .tensorflow.SourceFile source_file = 4;
  if (has_source_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *what_.source_file_, output);
  }

  // optional .tensorflow.StackFrameWithId stack_frame_with_id = 6;
  if (has_stack_frame_with_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *what_.stack_frame_with_id_, output);
  }

  // optional .tensorflow.GraphOpCreation graph_op_creation = 7;
  if (has_graph_op_creation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *what_.graph_op_creation_, output);
  }

  // optional .tensorflow.DebuggedGraph debugged_graph = 8;
  if (has_debugged_graph()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *what_.debugged_graph_, output);
  }

  // optional .tensorflow.Execution execution = 9;
  if (has_execution()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *what_.execution_, output);
  }

  // optional .tensorflow.GraphExecutionTrace graph_execution_trace = 10;
  if (has_graph_execution_trace()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *what_.graph_execution_trace_, output);
  }

  // optional string graph_id = 11;
  if (has_graph_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->graph_id().data(), this->graph_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebugEvent.graph_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->graph_id(), output);
  }

  // optional .tensorflow.DebuggedDevice debugged_device = 12;
  if (has_debugged_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *what_.debugged_device_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.DebugEvent)
}

::google::protobuf::uint8* DebugEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DebugEvent)
  // optional double wall_time = 1;
  if (this->wall_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->wall_time(), target);
  }

  // optional int64 step = 2;
  if (this->step() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->step(), target);
  }

  // optional .tensorflow.DebugMetadata debug_metadata = 3;
  if (has_debug_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *what_.debug_metadata_, false, target);
  }

  // optional .tensorflow.SourceFile source_file = 4;
  if (has_source_file()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *what_.source_file_, false, target);
  }

  // optional .tensorflow.StackFrameWithId stack_frame_with_id = 6;
  if (has_stack_frame_with_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *what_.stack_frame_with_id_, false, target);
  }

  // optional .tensorflow.GraphOpCreation graph_op_creation = 7;
  if (has_graph_op_creation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *what_.graph_op_creation_, false, target);
  }

  // optional .tensorflow.DebuggedGraph debugged_graph = 8;
  if (has_debugged_graph()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *what_.debugged_graph_, false, target);
  }

  // optional .tensorflow.Execution execution = 9;
  if (has_execution()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *what_.execution_, false, target);
  }

  // optional .tensorflow.GraphExecutionTrace graph_execution_trace = 10;
  if (has_graph_execution_trace()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *what_.graph_execution_trace_, false, target);
  }

  // optional string graph_id = 11;
  if (has_graph_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->graph_id().data(), this->graph_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebugEvent.graph_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->graph_id(), target);
  }

  // optional .tensorflow.DebuggedDevice debugged_device = 12;
  if (has_debugged_device()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *what_.debugged_device_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DebugEvent)
  return target;
}

int DebugEvent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DebugEvent)
  int total_size = 0;

  // optional double wall_time = 1;
  if (this->wall_time() != 0) {
    total_size += 1 + 8;
  }

  // optional int64 step = 2;
  if (this->step() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->step());
  }

  switch (what_case()) {
    // optional .tensorflow.DebugMetadata debug_metadata = 3;
    case kDebugMetadata: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *what_.debug_metadata_);
      break;
    }
    // optional .tensorflow.SourceFile source_file = 4;
    case kSourceFile: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *what_.source_file_);
      break;
    }
    // optional .tensorflow.StackFrameWithId stack_frame_with_id = 6;
    case kStackFrameWithId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *what_.stack_frame_with_id_);
      break;
    }
    // optional .tensorflow.GraphOpCreation graph_op_creation = 7;
    case kGraphOpCreation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *what_.graph_op_creation_);
      break;
    }
    // optional .tensorflow.DebuggedGraph debugged_graph = 8;
    case kDebuggedGraph: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *what_.debugged_graph_);
      break;
    }
    // optional .tensorflow.Execution execution = 9;
    case kExecution: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *what_.execution_);
      break;
    }
    // optional .tensorflow.GraphExecutionTrace graph_execution_trace = 10;
    case kGraphExecutionTrace: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *what_.graph_execution_trace_);
      break;
    }
    // optional string graph_id = 11;
    case kGraphId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->graph_id());
      break;
    }
    // optional .tensorflow.DebuggedDevice debugged_device = 12;
    case kDebuggedDevice: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *what_.debugged_device_);
      break;
    }
    case WHAT_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.DebugEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DebugEvent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.DebugEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.DebugEvent)
    MergeFrom(*source);
  }
}

void DebugEvent::MergeFrom(const DebugEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DebugEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.what_case()) {
    case kDebugMetadata: {
      mutable_debug_metadata()->::tensorflow::DebugMetadata::MergeFrom(from.debug_metadata());
      break;
    }
    case kSourceFile: {
      mutable_source_file()->::tensorflow::SourceFile::MergeFrom(from.source_file());
      break;
    }
    case kStackFrameWithId: {
      mutable_stack_frame_with_id()->::tensorflow::StackFrameWithId::MergeFrom(from.stack_frame_with_id());
      break;
    }
    case kGraphOpCreation: {
      mutable_graph_op_creation()->::tensorflow::GraphOpCreation::MergeFrom(from.graph_op_creation());
      break;
    }
    case kDebuggedGraph: {
      mutable_debugged_graph()->::tensorflow::DebuggedGraph::MergeFrom(from.debugged_graph());
      break;
    }
    case kExecution: {
      mutable_execution()->::tensorflow::Execution::MergeFrom(from.execution());
      break;
    }
    case kGraphExecutionTrace: {
      mutable_graph_execution_trace()->::tensorflow::GraphExecutionTrace::MergeFrom(from.graph_execution_trace());
      break;
    }
    case kGraphId: {
      set_graph_id(from.graph_id());
      break;
    }
    case kDebuggedDevice: {
      mutable_debugged_device()->::tensorflow::DebuggedDevice::MergeFrom(from.debugged_device());
      break;
    }
    case WHAT_NOT_SET: {
      break;
    }
  }
  if (from.wall_time() != 0) {
    set_wall_time(from.wall_time());
  }
  if (from.step() != 0) {
    set_step(from.step());
  }
}

void DebugEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.DebugEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugEvent::CopyFrom(const DebugEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DebugEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugEvent::IsInitialized() const {

  return true;
}

void DebugEvent::Swap(DebugEvent* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DebugEvent temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void DebugEvent::UnsafeArenaSwap(DebugEvent* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DebugEvent::InternalSwap(DebugEvent* other) {
  std::swap(wall_time_, other->wall_time_);
  std::swap(step_, other->step_);
  std::swap(what_, other->what_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugEvent_descriptor_;
  metadata.reflection = DebugEvent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DebugEvent

// optional double wall_time = 1;
void DebugEvent::clear_wall_time() {
  wall_time_ = 0;
}
 double DebugEvent::wall_time() const {
  // @@protoc_insertion_point(field_get:tensorflow.DebugEvent.wall_time)
  return wall_time_;
}
 void DebugEvent::set_wall_time(double value) {
  
  wall_time_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.DebugEvent.wall_time)
}

// optional int64 step = 2;
void DebugEvent::clear_step() {
  step_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 DebugEvent::step() const {
  // @@protoc_insertion_point(field_get:tensorflow.DebugEvent.step)
  return step_;
}
 void DebugEvent::set_step(::google::protobuf::int64 value) {
  
  step_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.DebugEvent.step)
}

// optional .tensorflow.DebugMetadata debug_metadata = 3;
bool DebugEvent::has_debug_metadata() const {
  return what_case() == kDebugMetadata;
}
void DebugEvent::set_has_debug_metadata() {
  _oneof_case_[0] = kDebugMetadata;
}
void DebugEvent::clear_debug_metadata() {
  if (has_debug_metadata()) {
    if (GetArenaNoVirtual() == NULL) {
      delete what_.debug_metadata_;
    }
    clear_has_what();
  }
}
 const ::tensorflow::DebugMetadata& DebugEvent::debug_metadata() const {
  // @@protoc_insertion_point(field_get:tensorflow.DebugEvent.debug_metadata)
  return has_debug_metadata()
      ? *what_.debug_metadata_
      : ::tensorflow::DebugMetadata::default_instance();
}
::tensorflow::DebugMetadata* DebugEvent::mutable_debug_metadata() {
  if (!has_debug_metadata()) {
    clear_what();
    set_has_debug_metadata();
    what_.debug_metadata_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::DebugMetadata >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.DebugEvent.debug_metadata)
  return what_.debug_metadata_;
}
::tensorflow::DebugMetadata* DebugEvent::release_debug_metadata() {
  // @@protoc_insertion_point(field_release:tensorflow.DebugEvent.debug_metadata)
  if (has_debug_metadata()) {
    clear_has_what();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::DebugMetadata* temp = new ::tensorflow::DebugMetadata;
      temp->MergeFrom(*what_.debug_metadata_);
      what_.debug_metadata_ = NULL;
      return temp;
    } else {
      ::tensorflow::DebugMetadata* temp = what_.debug_metadata_;
      what_.debug_metadata_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void DebugEvent::set_allocated_debug_metadata(::tensorflow::DebugMetadata* debug_metadata) {
  clear_what();
  if (debug_metadata) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(debug_metadata) == NULL) {
      GetArenaNoVirtual()->Own(debug_metadata);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(debug_metadata)) {
      ::tensorflow::DebugMetadata* new_debug_metadata = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::DebugMetadata >(
          GetArenaNoVirtual());
      new_debug_metadata->CopyFrom(*debug_metadata);
      debug_metadata = new_debug_metadata;
    }
    set_has_debug_metadata();
    what_.debug_metadata_ = debug_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DebugEvent.debug_metadata)
}
 ::tensorflow::DebugMetadata* DebugEvent::unsafe_arena_release_debug_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.DebugEvent.debug_metadata)
  if (has_debug_metadata()) {
    clear_has_what();
    ::tensorflow::DebugMetadata* temp = what_.debug_metadata_;
    what_.debug_metadata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void DebugEvent::unsafe_arena_set_allocated_debug_metadata(::tensorflow::DebugMetadata* debug_metadata) {
  clear_what();
  if (debug_metadata) {
    set_has_debug_metadata();
    what_.debug_metadata_ = debug_metadata;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.DebugEvent.debug_metadata)
}

// optional .tensorflow.SourceFile source_file = 4;
bool DebugEvent::has_source_file() const {
  return what_case() == kSourceFile;
}
void DebugEvent::set_has_source_file() {
  _oneof_case_[0] = kSourceFile;
}
void DebugEvent::clear_source_file() {
  if (has_source_file()) {
    if (GetArenaNoVirtual() == NULL) {
      delete what_.source_file_;
    }
    clear_has_what();
  }
}
 const ::tensorflow::SourceFile& DebugEvent::source_file() const {
  // @@protoc_insertion_point(field_get:tensorflow.DebugEvent.source_file)
  return has_source_file()
      ? *what_.source_file_
      : ::tensorflow::SourceFile::default_instance();
}
::tensorflow::SourceFile* DebugEvent::mutable_source_file() {
  if (!has_source_file()) {
    clear_what();
    set_has_source_file();
    what_.source_file_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::SourceFile >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.DebugEvent.source_file)
  return what_.source_file_;
}
::tensorflow::SourceFile* DebugEvent::release_source_file() {
  // @@protoc_insertion_point(field_release:tensorflow.DebugEvent.source_file)
  if (has_source_file()) {
    clear_has_what();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::SourceFile* temp = new ::tensorflow::SourceFile;
      temp->MergeFrom(*what_.source_file_);
      what_.source_file_ = NULL;
      return temp;
    } else {
      ::tensorflow::SourceFile* temp = what_.source_file_;
      what_.source_file_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void DebugEvent::set_allocated_source_file(::tensorflow::SourceFile* source_file) {
  clear_what();
  if (source_file) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(source_file) == NULL) {
      GetArenaNoVirtual()->Own(source_file);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(source_file)) {
      ::tensorflow::SourceFile* new_source_file = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::SourceFile >(
          GetArenaNoVirtual());
      new_source_file->CopyFrom(*source_file);
      source_file = new_source_file;
    }
    set_has_source_file();
    what_.source_file_ = source_file;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DebugEvent.source_file)
}
 ::tensorflow::SourceFile* DebugEvent::unsafe_arena_release_source_file() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.DebugEvent.source_file)
  if (has_source_file()) {
    clear_has_what();
    ::tensorflow::SourceFile* temp = what_.source_file_;
    what_.source_file_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void DebugEvent::unsafe_arena_set_allocated_source_file(::tensorflow::SourceFile* source_file) {
  clear_what();
  if (source_file) {
    set_has_source_file();
    what_.source_file_ = source_file;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.DebugEvent.source_file)
}

// optional .tensorflow.StackFrameWithId stack_frame_with_id = 6;
bool DebugEvent::has_stack_frame_with_id() const {
  return what_case() == kStackFrameWithId;
}
void DebugEvent::set_has_stack_frame_with_id() {
  _oneof_case_[0] = kStackFrameWithId;
}
void DebugEvent::clear_stack_frame_with_id() {
  if (has_stack_frame_with_id()) {
    if (GetArenaNoVirtual() == NULL) {
      delete what_.stack_frame_with_id_;
    }
    clear_has_what();
  }
}
 const ::tensorflow::StackFrameWithId& DebugEvent::stack_frame_with_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.DebugEvent.stack_frame_with_id)
  return has_stack_frame_with_id()
      ? *what_.stack_frame_with_id_
      : ::tensorflow::StackFrameWithId::default_instance();
}
::tensorflow::StackFrameWithId* DebugEvent::mutable_stack_frame_with_id() {
  if (!has_stack_frame_with_id()) {
    clear_what();
    set_has_stack_frame_with_id();
    what_.stack_frame_with_id_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::StackFrameWithId >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.DebugEvent.stack_frame_with_id)
  return what_.stack_frame_with_id_;
}
::tensorflow::StackFrameWithId* DebugEvent::release_stack_frame_with_id() {
  // @@protoc_insertion_point(field_release:tensorflow.DebugEvent.stack_frame_with_id)
  if (has_stack_frame_with_id()) {
    clear_has_what();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::StackFrameWithId* temp = new ::tensorflow::StackFrameWithId;
      temp->MergeFrom(*what_.stack_frame_with_id_);
      what_.stack_frame_with_id_ = NULL;
      return temp;
    } else {
      ::tensorflow::StackFrameWithId* temp = what_.stack_frame_with_id_;
      what_.stack_frame_with_id_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void DebugEvent::set_allocated_stack_frame_with_id(::tensorflow::StackFrameWithId* stack_frame_with_id) {
  clear_what();
  if (stack_frame_with_id) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(stack_frame_with_id) == NULL) {
      GetArenaNoVirtual()->Own(stack_frame_with_id);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(stack_frame_with_id)) {
      ::tensorflow::StackFrameWithId* new_stack_frame_with_id = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::StackFrameWithId >(
          GetArenaNoVirtual());
      new_stack_frame_with_id->CopyFrom(*stack_frame_with_id);
      stack_frame_with_id = new_stack_frame_with_id;
    }
    set_has_stack_frame_with_id();
    what_.stack_frame_with_id_ = stack_frame_with_id;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DebugEvent.stack_frame_with_id)
}
 ::tensorflow::StackFrameWithId* DebugEvent::unsafe_arena_release_stack_frame_with_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.DebugEvent.stack_frame_with_id)
  if (has_stack_frame_with_id()) {
    clear_has_what();
    ::tensorflow::StackFrameWithId* temp = what_.stack_frame_with_id_;
    what_.stack_frame_with_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void DebugEvent::unsafe_arena_set_allocated_stack_frame_with_id(::tensorflow::StackFrameWithId* stack_frame_with_id) {
  clear_what();
  if (stack_frame_with_id) {
    set_has_stack_frame_with_id();
    what_.stack_frame_with_id_ = stack_frame_with_id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.DebugEvent.stack_frame_with_id)
}

// optional .tensorflow.GraphOpCreation graph_op_creation = 7;
bool DebugEvent::has_graph_op_creation() const {
  return what_case() == kGraphOpCreation;
}
void DebugEvent::set_has_graph_op_creation() {
  _oneof_case_[0] = kGraphOpCreation;
}
void DebugEvent::clear_graph_op_creation() {
  if (has_graph_op_creation()) {
    if (GetArenaNoVirtual() == NULL) {
      delete what_.graph_op_creation_;
    }
    clear_has_what();
  }
}
 const ::tensorflow::GraphOpCreation& DebugEvent::graph_op_creation() const {
  // @@protoc_insertion_point(field_get:tensorflow.DebugEvent.graph_op_creation)
  return has_graph_op_creation()
      ? *what_.graph_op_creation_
      : ::tensorflow::GraphOpCreation::default_instance();
}
::tensorflow::GraphOpCreation* DebugEvent::mutable_graph_op_creation() {
  if (!has_graph_op_creation()) {
    clear_what();
    set_has_graph_op_creation();
    what_.graph_op_creation_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::GraphOpCreation >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.DebugEvent.graph_op_creation)
  return what_.graph_op_creation_;
}
::tensorflow::GraphOpCreation* DebugEvent::release_graph_op_creation() {
  // @@protoc_insertion_point(field_release:tensorflow.DebugEvent.graph_op_creation)
  if (has_graph_op_creation()) {
    clear_has_what();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::GraphOpCreation* temp = new ::tensorflow::GraphOpCreation;
      temp->MergeFrom(*what_.graph_op_creation_);
      what_.graph_op_creation_ = NULL;
      return temp;
    } else {
      ::tensorflow::GraphOpCreation* temp = what_.graph_op_creation_;
      what_.graph_op_creation_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void DebugEvent::set_allocated_graph_op_creation(::tensorflow::GraphOpCreation* graph_op_creation) {
  clear_what();
  if (graph_op_creation) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(graph_op_creation) == NULL) {
      GetArenaNoVirtual()->Own(graph_op_creation);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(graph_op_creation)) {
      ::tensorflow::GraphOpCreation* new_graph_op_creation = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::GraphOpCreation >(
          GetArenaNoVirtual());
      new_graph_op_creation->CopyFrom(*graph_op_creation);
      graph_op_creation = new_graph_op_creation;
    }
    set_has_graph_op_creation();
    what_.graph_op_creation_ = graph_op_creation;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DebugEvent.graph_op_creation)
}
 ::tensorflow::GraphOpCreation* DebugEvent::unsafe_arena_release_graph_op_creation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.DebugEvent.graph_op_creation)
  if (has_graph_op_creation()) {
    clear_has_what();
    ::tensorflow::GraphOpCreation* temp = what_.graph_op_creation_;
    what_.graph_op_creation_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void DebugEvent::unsafe_arena_set_allocated_graph_op_creation(::tensorflow::GraphOpCreation* graph_op_creation) {
  clear_what();
  if (graph_op_creation) {
    set_has_graph_op_creation();
    what_.graph_op_creation_ = graph_op_creation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.DebugEvent.graph_op_creation)
}

// optional .tensorflow.DebuggedGraph debugged_graph = 8;
bool DebugEvent::has_debugged_graph() const {
  return what_case() == kDebuggedGraph;
}
void DebugEvent::set_has_debugged_graph() {
  _oneof_case_[0] = kDebuggedGraph;
}
void DebugEvent::clear_debugged_graph() {
  if (has_debugged_graph()) {
    if (GetArenaNoVirtual() == NULL) {
      delete what_.debugged_graph_;
    }
    clear_has_what();
  }
}
 const ::tensorflow::DebuggedGraph& DebugEvent::debugged_graph() const {
  // @@protoc_insertion_point(field_get:tensorflow.DebugEvent.debugged_graph)
  return has_debugged_graph()
      ? *what_.debugged_graph_
      : ::tensorflow::DebuggedGraph::default_instance();
}
::tensorflow::DebuggedGraph* DebugEvent::mutable_debugged_graph() {
  if (!has_debugged_graph()) {
    clear_what();
    set_has_debugged_graph();
    what_.debugged_graph_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::DebuggedGraph >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.DebugEvent.debugged_graph)
  return what_.debugged_graph_;
}
::tensorflow::DebuggedGraph* DebugEvent::release_debugged_graph() {
  // @@protoc_insertion_point(field_release:tensorflow.DebugEvent.debugged_graph)
  if (has_debugged_graph()) {
    clear_has_what();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::DebuggedGraph* temp = new ::tensorflow::DebuggedGraph;
      temp->MergeFrom(*what_.debugged_graph_);
      what_.debugged_graph_ = NULL;
      return temp;
    } else {
      ::tensorflow::DebuggedGraph* temp = what_.debugged_graph_;
      what_.debugged_graph_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void DebugEvent::set_allocated_debugged_graph(::tensorflow::DebuggedGraph* debugged_graph) {
  clear_what();
  if (debugged_graph) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(debugged_graph) == NULL) {
      GetArenaNoVirtual()->Own(debugged_graph);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(debugged_graph)) {
      ::tensorflow::DebuggedGraph* new_debugged_graph = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::DebuggedGraph >(
          GetArenaNoVirtual());
      new_debugged_graph->CopyFrom(*debugged_graph);
      debugged_graph = new_debugged_graph;
    }
    set_has_debugged_graph();
    what_.debugged_graph_ = debugged_graph;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DebugEvent.debugged_graph)
}
 ::tensorflow::DebuggedGraph* DebugEvent::unsafe_arena_release_debugged_graph() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.DebugEvent.debugged_graph)
  if (has_debugged_graph()) {
    clear_has_what();
    ::tensorflow::DebuggedGraph* temp = what_.debugged_graph_;
    what_.debugged_graph_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void DebugEvent::unsafe_arena_set_allocated_debugged_graph(::tensorflow::DebuggedGraph* debugged_graph) {
  clear_what();
  if (debugged_graph) {
    set_has_debugged_graph();
    what_.debugged_graph_ = debugged_graph;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.DebugEvent.debugged_graph)
}

// optional .tensorflow.Execution execution = 9;
bool DebugEvent::has_execution() const {
  return what_case() == kExecution;
}
void DebugEvent::set_has_execution() {
  _oneof_case_[0] = kExecution;
}
void DebugEvent::clear_execution() {
  if (has_execution()) {
    if (GetArenaNoVirtual() == NULL) {
      delete what_.execution_;
    }
    clear_has_what();
  }
}
 const ::tensorflow::Execution& DebugEvent::execution() const {
  // @@protoc_insertion_point(field_get:tensorflow.DebugEvent.execution)
  return has_execution()
      ? *what_.execution_
      : ::tensorflow::Execution::default_instance();
}
::tensorflow::Execution* DebugEvent::mutable_execution() {
  if (!has_execution()) {
    clear_what();
    set_has_execution();
    what_.execution_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::Execution >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.DebugEvent.execution)
  return what_.execution_;
}
::tensorflow::Execution* DebugEvent::release_execution() {
  // @@protoc_insertion_point(field_release:tensorflow.DebugEvent.execution)
  if (has_execution()) {
    clear_has_what();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::Execution* temp = new ::tensorflow::Execution;
      temp->MergeFrom(*what_.execution_);
      what_.execution_ = NULL;
      return temp;
    } else {
      ::tensorflow::Execution* temp = what_.execution_;
      what_.execution_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void DebugEvent::set_allocated_execution(::tensorflow::Execution* execution) {
  clear_what();
  if (execution) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(execution) == NULL) {
      GetArenaNoVirtual()->Own(execution);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(execution)) {
      ::tensorflow::Execution* new_execution = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::Execution >(
          GetArenaNoVirtual());
      new_execution->CopyFrom(*execution);
      execution = new_execution;
    }
    set_has_execution();
    what_.execution_ = execution;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DebugEvent.execution)
}
 ::tensorflow::Execution* DebugEvent::unsafe_arena_release_execution() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.DebugEvent.execution)
  if (has_execution()) {
    clear_has_what();
    ::tensorflow::Execution* temp = what_.execution_;
    what_.execution_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void DebugEvent::unsafe_arena_set_allocated_execution(::tensorflow::Execution* execution) {
  clear_what();
  if (execution) {
    set_has_execution();
    what_.execution_ = execution;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.DebugEvent.execution)
}

// optional .tensorflow.GraphExecutionTrace graph_execution_trace = 10;
bool DebugEvent::has_graph_execution_trace() const {
  return what_case() == kGraphExecutionTrace;
}
void DebugEvent::set_has_graph_execution_trace() {
  _oneof_case_[0] = kGraphExecutionTrace;
}
void DebugEvent::clear_graph_execution_trace() {
  if (has_graph_execution_trace()) {
    if (GetArenaNoVirtual() == NULL) {
      delete what_.graph_execution_trace_;
    }
    clear_has_what();
  }
}
 const ::tensorflow::GraphExecutionTrace& DebugEvent::graph_execution_trace() const {
  // @@protoc_insertion_point(field_get:tensorflow.DebugEvent.graph_execution_trace)
  return has_graph_execution_trace()
      ? *what_.graph_execution_trace_
      : ::tensorflow::GraphExecutionTrace::default_instance();
}
::tensorflow::GraphExecutionTrace* DebugEvent::mutable_graph_execution_trace() {
  if (!has_graph_execution_trace()) {
    clear_what();
    set_has_graph_execution_trace();
    what_.graph_execution_trace_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::GraphExecutionTrace >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.DebugEvent.graph_execution_trace)
  return what_.graph_execution_trace_;
}
::tensorflow::GraphExecutionTrace* DebugEvent::release_graph_execution_trace() {
  // @@protoc_insertion_point(field_release:tensorflow.DebugEvent.graph_execution_trace)
  if (has_graph_execution_trace()) {
    clear_has_what();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::GraphExecutionTrace* temp = new ::tensorflow::GraphExecutionTrace;
      temp->MergeFrom(*what_.graph_execution_trace_);
      what_.graph_execution_trace_ = NULL;
      return temp;
    } else {
      ::tensorflow::GraphExecutionTrace* temp = what_.graph_execution_trace_;
      what_.graph_execution_trace_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void DebugEvent::set_allocated_graph_execution_trace(::tensorflow::GraphExecutionTrace* graph_execution_trace) {
  clear_what();
  if (graph_execution_trace) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(graph_execution_trace) == NULL) {
      GetArenaNoVirtual()->Own(graph_execution_trace);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(graph_execution_trace)) {
      ::tensorflow::GraphExecutionTrace* new_graph_execution_trace = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::GraphExecutionTrace >(
          GetArenaNoVirtual());
      new_graph_execution_trace->CopyFrom(*graph_execution_trace);
      graph_execution_trace = new_graph_execution_trace;
    }
    set_has_graph_execution_trace();
    what_.graph_execution_trace_ = graph_execution_trace;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DebugEvent.graph_execution_trace)
}
 ::tensorflow::GraphExecutionTrace* DebugEvent::unsafe_arena_release_graph_execution_trace() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.DebugEvent.graph_execution_trace)
  if (has_graph_execution_trace()) {
    clear_has_what();
    ::tensorflow::GraphExecutionTrace* temp = what_.graph_execution_trace_;
    what_.graph_execution_trace_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void DebugEvent::unsafe_arena_set_allocated_graph_execution_trace(::tensorflow::GraphExecutionTrace* graph_execution_trace) {
  clear_what();
  if (graph_execution_trace) {
    set_has_graph_execution_trace();
    what_.graph_execution_trace_ = graph_execution_trace;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.DebugEvent.graph_execution_trace)
}

// optional string graph_id = 11;
bool DebugEvent::has_graph_id() const {
  return what_case() == kGraphId;
}
void DebugEvent::set_has_graph_id() {
  _oneof_case_[0] = kGraphId;
}
void DebugEvent::clear_graph_id() {
  if (has_graph_id()) {
    what_.graph_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_what();
  }
}
 const ::std::string& DebugEvent::graph_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.DebugEvent.graph_id)
  if (has_graph_id()) {
    return what_.graph_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void DebugEvent::set_graph_id(const ::std::string& value) {
  if (!has_graph_id()) {
    clear_what();
    set_has_graph_id();
    what_.graph_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  what_.graph_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.DebugEvent.graph_id)
}
 void DebugEvent::set_graph_id(const char* value) {
  if (!has_graph_id()) {
    clear_what();
    set_has_graph_id();
    what_.graph_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  what_.graph_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.DebugEvent.graph_id)
}
 void DebugEvent::set_graph_id(const char* value,
                             size_t size) {
  if (!has_graph_id()) {
    clear_what();
    set_has_graph_id();
    what_.graph_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  what_.graph_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.DebugEvent.graph_id)
}
 ::std::string* DebugEvent::mutable_graph_id() {
  if (!has_graph_id()) {
    clear_what();
    set_has_graph_id();
    what_.graph_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return what_.graph_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:tensorflow.DebugEvent.graph_id)
}
 ::std::string* DebugEvent::release_graph_id() {
  // @@protoc_insertion_point(field_release:tensorflow.DebugEvent.graph_id)
  if (has_graph_id()) {
    clear_has_what();
    return what_.graph_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
 ::std::string* DebugEvent::unsafe_arena_release_graph_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.DebugEvent.graph_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (has_graph_id()) {
    clear_has_what();
    return what_.graph_id_.UnsafeArenaRelease(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
 void DebugEvent::set_allocated_graph_id(::std::string* graph_id) {
  if (!has_graph_id()) {
    what_.graph_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_what();
  if (graph_id != NULL) {
    set_has_graph_id();
    what_.graph_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), graph_id,
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DebugEvent.graph_id)
}
 void DebugEvent::unsafe_arena_set_allocated_graph_id(::std::string* graph_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (!has_graph_id()) {
    what_.graph_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_what();
  if (graph_id) {
    set_has_graph_id();
    what_.graph_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), graph_id, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.DebugEvent.graph_id)
}

// optional .tensorflow.DebuggedDevice debugged_device = 12;
bool DebugEvent::has_debugged_device() const {
  return what_case() == kDebuggedDevice;
}
void DebugEvent::set_has_debugged_device() {
  _oneof_case_[0] = kDebuggedDevice;
}
void DebugEvent::clear_debugged_device() {
  if (has_debugged_device()) {
    if (GetArenaNoVirtual() == NULL) {
      delete what_.debugged_device_;
    }
    clear_has_what();
  }
}
 const ::tensorflow::DebuggedDevice& DebugEvent::debugged_device() const {
  // @@protoc_insertion_point(field_get:tensorflow.DebugEvent.debugged_device)
  return has_debugged_device()
      ? *what_.debugged_device_
      : ::tensorflow::DebuggedDevice::default_instance();
}
::tensorflow::DebuggedDevice* DebugEvent::mutable_debugged_device() {
  if (!has_debugged_device()) {
    clear_what();
    set_has_debugged_device();
    what_.debugged_device_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::DebuggedDevice >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.DebugEvent.debugged_device)
  return what_.debugged_device_;
}
::tensorflow::DebuggedDevice* DebugEvent::release_debugged_device() {
  // @@protoc_insertion_point(field_release:tensorflow.DebugEvent.debugged_device)
  if (has_debugged_device()) {
    clear_has_what();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::DebuggedDevice* temp = new ::tensorflow::DebuggedDevice;
      temp->MergeFrom(*what_.debugged_device_);
      what_.debugged_device_ = NULL;
      return temp;
    } else {
      ::tensorflow::DebuggedDevice* temp = what_.debugged_device_;
      what_.debugged_device_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void DebugEvent::set_allocated_debugged_device(::tensorflow::DebuggedDevice* debugged_device) {
  clear_what();
  if (debugged_device) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(debugged_device) == NULL) {
      GetArenaNoVirtual()->Own(debugged_device);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(debugged_device)) {
      ::tensorflow::DebuggedDevice* new_debugged_device = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::DebuggedDevice >(
          GetArenaNoVirtual());
      new_debugged_device->CopyFrom(*debugged_device);
      debugged_device = new_debugged_device;
    }
    set_has_debugged_device();
    what_.debugged_device_ = debugged_device;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DebugEvent.debugged_device)
}
 ::tensorflow::DebuggedDevice* DebugEvent::unsafe_arena_release_debugged_device() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.DebugEvent.debugged_device)
  if (has_debugged_device()) {
    clear_has_what();
    ::tensorflow::DebuggedDevice* temp = what_.debugged_device_;
    what_.debugged_device_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void DebugEvent::unsafe_arena_set_allocated_debugged_device(::tensorflow::DebuggedDevice* debugged_device) {
  clear_what();
  if (debugged_device) {
    set_has_debugged_device();
    what_.debugged_device_ = debugged_device;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.DebugEvent.debugged_device)
}

bool DebugEvent::has_what() const {
  return what_case() != WHAT_NOT_SET;
}
void DebugEvent::clear_has_what() {
  _oneof_case_[0] = WHAT_NOT_SET;
}
DebugEvent::WhatCase DebugEvent::what_case() const {
  return DebugEvent::WhatCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugMetadata::kTensorflowVersionFieldNumber;
const int DebugMetadata::kFileVersionFieldNumber;
const int DebugMetadata::kTfdbgRunIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugMetadata::DebugMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.DebugMetadata)
}

DebugMetadata::DebugMetadata(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DebugMetadata)
}

void DebugMetadata::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DebugMetadata::DebugMetadata(const DebugMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.DebugMetadata)
}

void DebugMetadata::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tensorflow_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tfdbg_run_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DebugMetadata::~DebugMetadata() {
  // @@protoc_insertion_point(destructor:tensorflow.DebugMetadata)
  SharedDtor();
}

void DebugMetadata::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  tensorflow_version_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  file_version_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  tfdbg_run_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void DebugMetadata::ArenaDtor(void* object) {
  DebugMetadata* _this = reinterpret_cast< DebugMetadata* >(object);
  (void)_this;
}
void DebugMetadata::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DebugMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugMetadata_descriptor_;
}

const DebugMetadata& DebugMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto();
  return *default_instance_;
}

DebugMetadata* DebugMetadata::default_instance_ = NULL;

DebugMetadata* DebugMetadata::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DebugMetadata>(arena);
}

void DebugMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DebugMetadata)
  tensorflow_version_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  file_version_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  tfdbg_run_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool DebugMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.DebugMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tensorflow_version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tensorflow_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tensorflow_version().data(), this->tensorflow_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.DebugMetadata.tensorflow_version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_file_version;
        break;
      }

      // optional string file_version = 2;
      case 2: {
        if (tag == 18) {
         parse_file_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_version().data(), this->file_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.DebugMetadata.file_version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tfdbg_run_id;
        break;
      }

      // optional string tfdbg_run_id = 3;
      case 3: {
        if (tag == 26) {
         parse_tfdbg_run_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tfdbg_run_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tfdbg_run_id().data(), this->tfdbg_run_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.DebugMetadata.tfdbg_run_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.DebugMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.DebugMetadata)
  return false;
#undef DO_
}

void DebugMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.DebugMetadata)
  // optional string tensorflow_version = 1;
  if (this->tensorflow_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tensorflow_version().data(), this->tensorflow_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebugMetadata.tensorflow_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tensorflow_version(), output);
  }

  // optional string file_version = 2;
  if (this->file_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_version().data(), this->file_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebugMetadata.file_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file_version(), output);
  }

  // optional string tfdbg_run_id = 3;
  if (this->tfdbg_run_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tfdbg_run_id().data(), this->tfdbg_run_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebugMetadata.tfdbg_run_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tfdbg_run_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.DebugMetadata)
}

::google::protobuf::uint8* DebugMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DebugMetadata)
  // optional string tensorflow_version = 1;
  if (this->tensorflow_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tensorflow_version().data(), this->tensorflow_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebugMetadata.tensorflow_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tensorflow_version(), target);
  }

  // optional string file_version = 2;
  if (this->file_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_version().data(), this->file_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebugMetadata.file_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_version(), target);
  }

  // optional string tfdbg_run_id = 3;
  if (this->tfdbg_run_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tfdbg_run_id().data(), this->tfdbg_run_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebugMetadata.tfdbg_run_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tfdbg_run_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DebugMetadata)
  return target;
}

int DebugMetadata::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DebugMetadata)
  int total_size = 0;

  // optional string tensorflow_version = 1;
  if (this->tensorflow_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tensorflow_version());
  }

  // optional string file_version = 2;
  if (this->file_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_version());
  }

  // optional string tfdbg_run_id = 3;
  if (this->tfdbg_run_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tfdbg_run_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.DebugMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DebugMetadata* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.DebugMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.DebugMetadata)
    MergeFrom(*source);
  }
}

void DebugMetadata::MergeFrom(const DebugMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DebugMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.tensorflow_version().size() > 0) {
    set_tensorflow_version(from.tensorflow_version());
  }
  if (from.file_version().size() > 0) {
    set_file_version(from.file_version());
  }
  if (from.tfdbg_run_id().size() > 0) {
    set_tfdbg_run_id(from.tfdbg_run_id());
  }
}

void DebugMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.DebugMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugMetadata::CopyFrom(const DebugMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DebugMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugMetadata::IsInitialized() const {

  return true;
}

void DebugMetadata::Swap(DebugMetadata* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DebugMetadata temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void DebugMetadata::UnsafeArenaSwap(DebugMetadata* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DebugMetadata::InternalSwap(DebugMetadata* other) {
  tensorflow_version_.Swap(&other->tensorflow_version_);
  file_version_.Swap(&other->file_version_);
  tfdbg_run_id_.Swap(&other->tfdbg_run_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugMetadata_descriptor_;
  metadata.reflection = DebugMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DebugMetadata

// optional string tensorflow_version = 1;
void DebugMetadata::clear_tensorflow_version() {
  tensorflow_version_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& DebugMetadata::tensorflow_version() const {
  // @@protoc_insertion_point(field_get:tensorflow.DebugMetadata.tensorflow_version)
  return tensorflow_version_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DebugMetadata::set_tensorflow_version(const ::std::string& value) {
  
  tensorflow_version_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.DebugMetadata.tensorflow_version)
}
 void DebugMetadata::set_tensorflow_version(const char* value) {
  
  tensorflow_version_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.DebugMetadata.tensorflow_version)
}
 void DebugMetadata::set_tensorflow_version(const char* value,
    size_t size) {
  
  tensorflow_version_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.DebugMetadata.tensorflow_version)
}
 ::std::string* DebugMetadata::mutable_tensorflow_version() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.DebugMetadata.tensorflow_version)
  return tensorflow_version_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* DebugMetadata::release_tensorflow_version() {
  // @@protoc_insertion_point(field_release:tensorflow.DebugMetadata.tensorflow_version)
  
  return tensorflow_version_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* DebugMetadata::unsafe_arena_release_tensorflow_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.DebugMetadata.tensorflow_version)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return tensorflow_version_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void DebugMetadata::set_allocated_tensorflow_version(::std::string* tensorflow_version) {
  if (tensorflow_version != NULL) {
    
  } else {
    
  }
  tensorflow_version_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tensorflow_version,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DebugMetadata.tensorflow_version)
}
 void DebugMetadata::unsafe_arena_set_allocated_tensorflow_version(
    ::std::string* tensorflow_version) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (tensorflow_version != NULL) {
    
  } else {
    
  }
  tensorflow_version_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      tensorflow_version, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.DebugMetadata.tensorflow_version)
}

// optional string file_version = 2;
void DebugMetadata::clear_file_version() {
  file_version_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& DebugMetadata::file_version() const {
  // @@protoc_insertion_point(field_get:tensorflow.DebugMetadata.file_version)
  return file_version_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DebugMetadata::set_file_version(const ::std::string& value) {
  
  file_version_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.DebugMetadata.file_version)
}
 void DebugMetadata::set_file_version(const char* value) {
  
  file_version_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.DebugMetadata.file_version)
}
 void DebugMetadata::set_file_version(const char* value,
    size_t size) {
  
  file_version_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.DebugMetadata.file_version)
}
 ::std::string* DebugMetadata::mutable_file_version() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.DebugMetadata.file_version)
  return file_version_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* DebugMetadata::release_file_version() {
  // @@protoc_insertion_point(field_release:tensorflow.DebugMetadata.file_version)
  
  return file_version_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* DebugMetadata::unsafe_arena_release_file_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.DebugMetadata.file_version)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return file_version_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void DebugMetadata::set_allocated_file_version(::std::string* file_version) {
  if (file_version != NULL) {
    
  } else {
    
  }
  file_version_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_version,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DebugMetadata.file_version)
}
 void DebugMetadata::unsafe_arena_set_allocated_file_version(
    ::std::string* file_version) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (file_version != NULL) {
    
  } else {
    
  }
  file_version_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      file_version, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.DebugMetadata.file_version)
}

// optional string tfdbg_run_id = 3;
void DebugMetadata::clear_tfdbg_run_id() {
  tfdbg_run_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& DebugMetadata::tfdbg_run_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.DebugMetadata.tfdbg_run_id)
  return tfdbg_run_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DebugMetadata::set_tfdbg_run_id(const ::std::string& value) {
  
  tfdbg_run_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.DebugMetadata.tfdbg_run_id)
}
 void DebugMetadata::set_tfdbg_run_id(const char* value) {
  
  tfdbg_run_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.DebugMetadata.tfdbg_run_id)
}
 void DebugMetadata::set_tfdbg_run_id(const char* value,
    size_t size) {
  
  tfdbg_run_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.DebugMetadata.tfdbg_run_id)
}
 ::std::string* DebugMetadata::mutable_tfdbg_run_id() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.DebugMetadata.tfdbg_run_id)
  return tfdbg_run_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* DebugMetadata::release_tfdbg_run_id() {
  // @@protoc_insertion_point(field_release:tensorflow.DebugMetadata.tfdbg_run_id)
  
  return tfdbg_run_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* DebugMetadata::unsafe_arena_release_tfdbg_run_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.DebugMetadata.tfdbg_run_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return tfdbg_run_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void DebugMetadata::set_allocated_tfdbg_run_id(::std::string* tfdbg_run_id) {
  if (tfdbg_run_id != NULL) {
    
  } else {
    
  }
  tfdbg_run_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tfdbg_run_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DebugMetadata.tfdbg_run_id)
}
 void DebugMetadata::unsafe_arena_set_allocated_tfdbg_run_id(
    ::std::string* tfdbg_run_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (tfdbg_run_id != NULL) {
    
  } else {
    
  }
  tfdbg_run_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      tfdbg_run_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.DebugMetadata.tfdbg_run_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SourceFile::kFilePathFieldNumber;
const int SourceFile::kHostNameFieldNumber;
const int SourceFile::kLinesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SourceFile::SourceFile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.SourceFile)
}

SourceFile::SourceFile(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  lines_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.SourceFile)
}

void SourceFile::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SourceFile::SourceFile(const SourceFile& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.SourceFile)
}

void SourceFile::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SourceFile::~SourceFile() {
  // @@protoc_insertion_point(destructor:tensorflow.SourceFile)
  SharedDtor();
}

void SourceFile::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  file_path_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  host_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void SourceFile::ArenaDtor(void* object) {
  SourceFile* _this = reinterpret_cast< SourceFile* >(object);
  (void)_this;
}
void SourceFile::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SourceFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SourceFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SourceFile_descriptor_;
}

const SourceFile& SourceFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto();
  return *default_instance_;
}

SourceFile* SourceFile::default_instance_ = NULL;

SourceFile* SourceFile::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SourceFile>(arena);
}

void SourceFile::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.SourceFile)
  file_path_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  host_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  lines_.Clear();
}

bool SourceFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.SourceFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_path().data(), this->file_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.SourceFile.file_path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_host_name;
        break;
      }

      // optional string host_name = 2;
      case 2: {
        if (tag == 18) {
         parse_host_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host_name().data(), this->host_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.SourceFile.host_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_lines;
        break;
      }

      // repeated string lines = 3;
      case 3: {
        if (tag == 26) {
         parse_lines:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_lines()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lines(this->lines_size() - 1).data(),
            this->lines(this->lines_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.SourceFile.lines"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_lines;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.SourceFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.SourceFile)
  return false;
#undef DO_
}

void SourceFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.SourceFile)
  // optional string file_path = 1;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SourceFile.file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_path(), output);
  }

  // optional string host_name = 2;
  if (this->host_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host_name().data(), this->host_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SourceFile.host_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->host_name(), output);
  }

  // repeated string lines = 3;
  for (int i = 0; i < this->lines_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lines(i).data(), this->lines(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SourceFile.lines");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lines(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.SourceFile)
}

::google::protobuf::uint8* SourceFile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.SourceFile)
  // optional string file_path = 1;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SourceFile.file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_path(), target);
  }

  // optional string host_name = 2;
  if (this->host_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host_name().data(), this->host_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SourceFile.host_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->host_name(), target);
  }

  // repeated string lines = 3;
  for (int i = 0; i < this->lines_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lines(i).data(), this->lines(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SourceFile.lines");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->lines(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.SourceFile)
  return target;
}

int SourceFile::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.SourceFile)
  int total_size = 0;

  // optional string file_path = 1;
  if (this->file_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_path());
  }

  // optional string host_name = 2;
  if (this->host_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host_name());
  }

  // repeated string lines = 3;
  total_size += 1 * this->lines_size();
  for (int i = 0; i < this->lines_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->lines(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.SourceFile)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SourceFile* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SourceFile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.SourceFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.SourceFile)
    MergeFrom(*source);
  }
}

void SourceFile::MergeFrom(const SourceFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.SourceFile)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  lines_.MergeFrom(from.lines_);
  if (from.file_path().size() > 0) {
    set_file_path(from.file_path());
  }
  if (from.host_name().size() > 0) {
    set_host_name(from.host_name());
  }
}

void SourceFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.SourceFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceFile::CopyFrom(const SourceFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.SourceFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceFile::IsInitialized() const {

  return true;
}

void SourceFile::Swap(SourceFile* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SourceFile temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void SourceFile::UnsafeArenaSwap(SourceFile* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SourceFile::InternalSwap(SourceFile* other) {
  file_path_.Swap(&other->file_path_);
  host_name_.Swap(&other->host_name_);
  lines_.UnsafeArenaSwap(&other->lines_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SourceFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SourceFile_descriptor_;
  metadata.reflection = SourceFile_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SourceFile

// optional string file_path = 1;
void SourceFile::clear_file_path() {
  file_path_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& SourceFile::file_path() const {
  // @@protoc_insertion_point(field_get:tensorflow.SourceFile.file_path)
  return file_path_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SourceFile::set_file_path(const ::std::string& value) {
  
  file_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.SourceFile.file_path)
}
 void SourceFile::set_file_path(const char* value) {
  
  file_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.SourceFile.file_path)
}
 void SourceFile::set_file_path(const char* value,
    size_t size) {
  
  file_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.SourceFile.file_path)
}
 ::std::string* SourceFile::mutable_file_path() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.SourceFile.file_path)
  return file_path_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* SourceFile::release_file_path() {
  // @@protoc_insertion_point(field_release:tensorflow.SourceFile.file_path)
  
  return file_path_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* SourceFile::unsafe_arena_release_file_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.SourceFile.file_path)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return file_path_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void SourceFile::set_allocated_file_path(::std::string* file_path) {
  if (file_path != NULL) {
    
  } else {
    
  }
  file_path_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_path,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.SourceFile.file_path)
}
 void SourceFile::unsafe_arena_set_allocated_file_path(
    ::std::string* file_path) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (file_path != NULL) {
    
  } else {
    
  }
  file_path_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      file_path, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.SourceFile.file_path)
}

// optional string host_name = 2;
void SourceFile::clear_host_name() {
  host_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& SourceFile::host_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.SourceFile.host_name)
  return host_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SourceFile::set_host_name(const ::std::string& value) {
  
  host_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.SourceFile.host_name)
}
 void SourceFile::set_host_name(const char* value) {
  
  host_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.SourceFile.host_name)
}
 void SourceFile::set_host_name(const char* value,
    size_t size) {
  
  host_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.SourceFile.host_name)
}
 ::std::string* SourceFile::mutable_host_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.SourceFile.host_name)
  return host_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* SourceFile::release_host_name() {
  // @@protoc_insertion_point(field_release:tensorflow.SourceFile.host_name)
  
  return host_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* SourceFile::unsafe_arena_release_host_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.SourceFile.host_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return host_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void SourceFile::set_allocated_host_name(::std::string* host_name) {
  if (host_name != NULL) {
    
  } else {
    
  }
  host_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.SourceFile.host_name)
}
 void SourceFile::unsafe_arena_set_allocated_host_name(
    ::std::string* host_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (host_name != NULL) {
    
  } else {
    
  }
  host_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      host_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.SourceFile.host_name)
}

// repeated string lines = 3;
int SourceFile::lines_size() const {
  return lines_.size();
}
void SourceFile::clear_lines() {
  lines_.Clear();
}
 const ::std::string& SourceFile::lines(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.SourceFile.lines)
  return lines_.Get(index);
}
 ::std::string* SourceFile::mutable_lines(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.SourceFile.lines)
  return lines_.Mutable(index);
}
 void SourceFile::set_lines(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.SourceFile.lines)
  lines_.Mutable(index)->assign(value);
}
 void SourceFile::set_lines(int index, const char* value) {
  lines_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.SourceFile.lines)
}
 void SourceFile::set_lines(int index, const char* value, size_t size) {
  lines_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.SourceFile.lines)
}
 ::std::string* SourceFile::add_lines() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.SourceFile.lines)
  return lines_.Add();
}
 void SourceFile::add_lines(const ::std::string& value) {
  lines_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.SourceFile.lines)
}
 void SourceFile::add_lines(const char* value) {
  lines_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.SourceFile.lines)
}
 void SourceFile::add_lines(const char* value, size_t size) {
  lines_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.SourceFile.lines)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
SourceFile::lines() const {
  // @@protoc_insertion_point(field_list:tensorflow.SourceFile.lines)
  return lines_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
SourceFile::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.SourceFile.lines)
  return &lines_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void StackFrameWithId::_slow_mutable_file_line_col() {
  file_line_col_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::GraphDebugInfo_FileLineCol >(
      GetArenaNoVirtual());
}
::tensorflow::GraphDebugInfo_FileLineCol* StackFrameWithId::_slow_release_file_line_col() {
  if (file_line_col_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::GraphDebugInfo_FileLineCol* temp = new ::tensorflow::GraphDebugInfo_FileLineCol;
    temp->MergeFrom(*file_line_col_);
    file_line_col_ = NULL;
    return temp;
  }
}
::tensorflow::GraphDebugInfo_FileLineCol* StackFrameWithId::unsafe_arena_release_file_line_col() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.StackFrameWithId.file_line_col)
  
  ::tensorflow::GraphDebugInfo_FileLineCol* temp = file_line_col_;
  file_line_col_ = NULL;
  return temp;
}
void StackFrameWithId::_slow_set_allocated_file_line_col(
    ::google::protobuf::Arena* message_arena, ::tensorflow::GraphDebugInfo_FileLineCol** file_line_col) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*file_line_col) == NULL) {
      message_arena->Own(*file_line_col);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*file_line_col)) {
      ::tensorflow::GraphDebugInfo_FileLineCol* new_file_line_col = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::GraphDebugInfo_FileLineCol >(
            message_arena);
      new_file_line_col->CopyFrom(**file_line_col);
      *file_line_col = new_file_line_col;
    }
}
void StackFrameWithId::unsafe_arena_set_allocated_file_line_col(
    ::tensorflow::GraphDebugInfo_FileLineCol* file_line_col) {
  if (GetArenaNoVirtual() == NULL) {
    delete file_line_col_;
  }
  file_line_col_ = file_line_col;
  if (file_line_col) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.StackFrameWithId.file_line_col)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StackFrameWithId::kIdFieldNumber;
const int StackFrameWithId::kFileLineColFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StackFrameWithId::StackFrameWithId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.StackFrameWithId)
}

StackFrameWithId::StackFrameWithId(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.StackFrameWithId)
}

void StackFrameWithId::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  file_line_col_ = const_cast< ::tensorflow::GraphDebugInfo_FileLineCol*>(&::tensorflow::GraphDebugInfo_FileLineCol::default_instance());
}

StackFrameWithId::StackFrameWithId(const StackFrameWithId& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.StackFrameWithId)
}

void StackFrameWithId::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_line_col_ = NULL;
}

StackFrameWithId::~StackFrameWithId() {
  // @@protoc_insertion_point(destructor:tensorflow.StackFrameWithId)
  SharedDtor();
}

void StackFrameWithId::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
    delete file_line_col_;
  }
}

void StackFrameWithId::ArenaDtor(void* object) {
  StackFrameWithId* _this = reinterpret_cast< StackFrameWithId* >(object);
  (void)_this;
}
void StackFrameWithId::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StackFrameWithId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StackFrameWithId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StackFrameWithId_descriptor_;
}

const StackFrameWithId& StackFrameWithId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto();
  return *default_instance_;
}

StackFrameWithId* StackFrameWithId::default_instance_ = NULL;

StackFrameWithId* StackFrameWithId::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<StackFrameWithId>(arena);
}

void StackFrameWithId::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.StackFrameWithId)
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && file_line_col_ != NULL) delete file_line_col_;
  file_line_col_ = NULL;
}

bool StackFrameWithId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.StackFrameWithId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.StackFrameWithId.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_file_line_col;
        break;
      }

      // optional .tensorflow.GraphDebugInfo.FileLineCol file_line_col = 2;
      case 2: {
        if (tag == 18) {
         parse_file_line_col:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file_line_col()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.StackFrameWithId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.StackFrameWithId)
  return false;
#undef DO_
}

void StackFrameWithId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.StackFrameWithId)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.StackFrameWithId.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional .tensorflow.GraphDebugInfo.FileLineCol file_line_col = 2;
  if (this->has_file_line_col()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->file_line_col_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.StackFrameWithId)
}

::google::protobuf::uint8* StackFrameWithId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.StackFrameWithId)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.StackFrameWithId.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional .tensorflow.GraphDebugInfo.FileLineCol file_line_col = 2;
  if (this->has_file_line_col()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->file_line_col_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.StackFrameWithId)
  return target;
}

int StackFrameWithId::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.StackFrameWithId)
  int total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional .tensorflow.GraphDebugInfo.FileLineCol file_line_col = 2;
  if (this->has_file_line_col()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->file_line_col_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StackFrameWithId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.StackFrameWithId)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StackFrameWithId* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StackFrameWithId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.StackFrameWithId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.StackFrameWithId)
    MergeFrom(*source);
  }
}

void StackFrameWithId::MergeFrom(const StackFrameWithId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.StackFrameWithId)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id().size() > 0) {
    set_id(from.id());
  }
  if (from.has_file_line_col()) {
    mutable_file_line_col()->::tensorflow::GraphDebugInfo_FileLineCol::MergeFrom(from.file_line_col());
  }
}

void StackFrameWithId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.StackFrameWithId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StackFrameWithId::CopyFrom(const StackFrameWithId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.StackFrameWithId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StackFrameWithId::IsInitialized() const {

  return true;
}

void StackFrameWithId::Swap(StackFrameWithId* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StackFrameWithId temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void StackFrameWithId::UnsafeArenaSwap(StackFrameWithId* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StackFrameWithId::InternalSwap(StackFrameWithId* other) {
  id_.Swap(&other->id_);
  std::swap(file_line_col_, other->file_line_col_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StackFrameWithId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StackFrameWithId_descriptor_;
  metadata.reflection = StackFrameWithId_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StackFrameWithId

// optional string id = 1;
void StackFrameWithId::clear_id() {
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& StackFrameWithId::id() const {
  // @@protoc_insertion_point(field_get:tensorflow.StackFrameWithId.id)
  return id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StackFrameWithId::set_id(const ::std::string& value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.StackFrameWithId.id)
}
 void StackFrameWithId::set_id(const char* value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.StackFrameWithId.id)
}
 void StackFrameWithId::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.StackFrameWithId.id)
}
 ::std::string* StackFrameWithId::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.StackFrameWithId.id)
  return id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* StackFrameWithId::release_id() {
  // @@protoc_insertion_point(field_release:tensorflow.StackFrameWithId.id)
  
  return id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* StackFrameWithId::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.StackFrameWithId.id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void StackFrameWithId::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.StackFrameWithId.id)
}
 void StackFrameWithId::unsafe_arena_set_allocated_id(
    ::std::string* id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (id != NULL) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.StackFrameWithId.id)
}

// optional .tensorflow.GraphDebugInfo.FileLineCol file_line_col = 2;
bool StackFrameWithId::has_file_line_col() const {
  return !_is_default_instance_ && file_line_col_ != NULL;
}
void StackFrameWithId::clear_file_line_col() {
  if (GetArenaNoVirtual() == NULL && file_line_col_ != NULL) delete file_line_col_;
  file_line_col_ = NULL;
}
const ::tensorflow::GraphDebugInfo_FileLineCol& StackFrameWithId::file_line_col() const {
  // @@protoc_insertion_point(field_get:tensorflow.StackFrameWithId.file_line_col)
  return file_line_col_ != NULL ? *file_line_col_ : *default_instance_->file_line_col_;
}
::tensorflow::GraphDebugInfo_FileLineCol* StackFrameWithId::mutable_file_line_col() {
  
  if (file_line_col_ == NULL) {
    _slow_mutable_file_line_col();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.StackFrameWithId.file_line_col)
  return file_line_col_;
}
::tensorflow::GraphDebugInfo_FileLineCol* StackFrameWithId::release_file_line_col() {
  // @@protoc_insertion_point(field_release:tensorflow.StackFrameWithId.file_line_col)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_file_line_col();
  } else {
    ::tensorflow::GraphDebugInfo_FileLineCol* temp = file_line_col_;
    file_line_col_ = NULL;
    return temp;
  }
}
 void StackFrameWithId::set_allocated_file_line_col(::tensorflow::GraphDebugInfo_FileLineCol* file_line_col) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete file_line_col_;
  }
  if (file_line_col != NULL) {
    _slow_set_allocated_file_line_col(message_arena, &file_line_col);
  }
  file_line_col_ = file_line_col;
  if (file_line_col) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.StackFrameWithId.file_line_col)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CodeLocation::kHostNameFieldNumber;
const int CodeLocation::kStackFrameIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CodeLocation::CodeLocation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CodeLocation)
}

CodeLocation::CodeLocation(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  stack_frame_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CodeLocation)
}

void CodeLocation::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CodeLocation::CodeLocation(const CodeLocation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.CodeLocation)
}

void CodeLocation::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  host_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CodeLocation::~CodeLocation() {
  // @@protoc_insertion_point(destructor:tensorflow.CodeLocation)
  SharedDtor();
}

void CodeLocation::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  host_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void CodeLocation::ArenaDtor(void* object) {
  CodeLocation* _this = reinterpret_cast< CodeLocation* >(object);
  (void)_this;
}
void CodeLocation::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CodeLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CodeLocation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CodeLocation_descriptor_;
}

const CodeLocation& CodeLocation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto();
  return *default_instance_;
}

CodeLocation* CodeLocation::default_instance_ = NULL;

CodeLocation* CodeLocation::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CodeLocation>(arena);
}

void CodeLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CodeLocation)
  host_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  stack_frame_ids_.Clear();
}

bool CodeLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CodeLocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string host_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host_name().data(), this->host_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.CodeLocation.host_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_stack_frame_ids;
        break;
      }

      // repeated string stack_frame_ids = 2;
      case 2: {
        if (tag == 18) {
         parse_stack_frame_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_stack_frame_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stack_frame_ids(this->stack_frame_ids_size() - 1).data(),
            this->stack_frame_ids(this->stack_frame_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.CodeLocation.stack_frame_ids"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_stack_frame_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CodeLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CodeLocation)
  return false;
#undef DO_
}

void CodeLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CodeLocation)
  // optional string host_name = 1;
  if (this->host_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host_name().data(), this->host_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CodeLocation.host_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host_name(), output);
  }

  // repeated string stack_frame_ids = 2;
  for (int i = 0; i < this->stack_frame_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stack_frame_ids(i).data(), this->stack_frame_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CodeLocation.stack_frame_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->stack_frame_ids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.CodeLocation)
}

::google::protobuf::uint8* CodeLocation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CodeLocation)
  // optional string host_name = 1;
  if (this->host_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host_name().data(), this->host_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CodeLocation.host_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host_name(), target);
  }

  // repeated string stack_frame_ids = 2;
  for (int i = 0; i < this->stack_frame_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stack_frame_ids(i).data(), this->stack_frame_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CodeLocation.stack_frame_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->stack_frame_ids(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CodeLocation)
  return target;
}

int CodeLocation::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CodeLocation)
  int total_size = 0;

  // optional string host_name = 1;
  if (this->host_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host_name());
  }

  // repeated string stack_frame_ids = 2;
  total_size += 1 * this->stack_frame_ids_size();
  for (int i = 0; i < this->stack_frame_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->stack_frame_ids(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CodeLocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CodeLocation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CodeLocation* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CodeLocation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CodeLocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CodeLocation)
    MergeFrom(*source);
  }
}

void CodeLocation::MergeFrom(const CodeLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CodeLocation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  stack_frame_ids_.MergeFrom(from.stack_frame_ids_);
  if (from.host_name().size() > 0) {
    set_host_name(from.host_name());
  }
}

void CodeLocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CodeLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CodeLocation::CopyFrom(const CodeLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CodeLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CodeLocation::IsInitialized() const {

  return true;
}

void CodeLocation::Swap(CodeLocation* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CodeLocation temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void CodeLocation::UnsafeArenaSwap(CodeLocation* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CodeLocation::InternalSwap(CodeLocation* other) {
  host_name_.Swap(&other->host_name_);
  stack_frame_ids_.UnsafeArenaSwap(&other->stack_frame_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CodeLocation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CodeLocation_descriptor_;
  metadata.reflection = CodeLocation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CodeLocation

// optional string host_name = 1;
void CodeLocation::clear_host_name() {
  host_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& CodeLocation::host_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.CodeLocation.host_name)
  return host_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CodeLocation::set_host_name(const ::std::string& value) {
  
  host_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.CodeLocation.host_name)
}
 void CodeLocation::set_host_name(const char* value) {
  
  host_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.CodeLocation.host_name)
}
 void CodeLocation::set_host_name(const char* value,
    size_t size) {
  
  host_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.CodeLocation.host_name)
}
 ::std::string* CodeLocation::mutable_host_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.CodeLocation.host_name)
  return host_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* CodeLocation::release_host_name() {
  // @@protoc_insertion_point(field_release:tensorflow.CodeLocation.host_name)
  
  return host_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* CodeLocation::unsafe_arena_release_host_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.CodeLocation.host_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return host_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void CodeLocation::set_allocated_host_name(::std::string* host_name) {
  if (host_name != NULL) {
    
  } else {
    
  }
  host_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CodeLocation.host_name)
}
 void CodeLocation::unsafe_arena_set_allocated_host_name(
    ::std::string* host_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (host_name != NULL) {
    
  } else {
    
  }
  host_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      host_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.CodeLocation.host_name)
}

// repeated string stack_frame_ids = 2;
int CodeLocation::stack_frame_ids_size() const {
  return stack_frame_ids_.size();
}
void CodeLocation::clear_stack_frame_ids() {
  stack_frame_ids_.Clear();
}
 const ::std::string& CodeLocation::stack_frame_ids(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.CodeLocation.stack_frame_ids)
  return stack_frame_ids_.Get(index);
}
 ::std::string* CodeLocation::mutable_stack_frame_ids(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.CodeLocation.stack_frame_ids)
  return stack_frame_ids_.Mutable(index);
}
 void CodeLocation::set_stack_frame_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.CodeLocation.stack_frame_ids)
  stack_frame_ids_.Mutable(index)->assign(value);
}
 void CodeLocation::set_stack_frame_ids(int index, const char* value) {
  stack_frame_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.CodeLocation.stack_frame_ids)
}
 void CodeLocation::set_stack_frame_ids(int index, const char* value, size_t size) {
  stack_frame_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.CodeLocation.stack_frame_ids)
}
 ::std::string* CodeLocation::add_stack_frame_ids() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.CodeLocation.stack_frame_ids)
  return stack_frame_ids_.Add();
}
 void CodeLocation::add_stack_frame_ids(const ::std::string& value) {
  stack_frame_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.CodeLocation.stack_frame_ids)
}
 void CodeLocation::add_stack_frame_ids(const char* value) {
  stack_frame_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.CodeLocation.stack_frame_ids)
}
 void CodeLocation::add_stack_frame_ids(const char* value, size_t size) {
  stack_frame_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.CodeLocation.stack_frame_ids)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
CodeLocation::stack_frame_ids() const {
  // @@protoc_insertion_point(field_list:tensorflow.CodeLocation.stack_frame_ids)
  return stack_frame_ids_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
CodeLocation::mutable_stack_frame_ids() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.CodeLocation.stack_frame_ids)
  return &stack_frame_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void GraphOpCreation::_slow_mutable_code_location() {
  code_location_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::CodeLocation >(
      GetArenaNoVirtual());
}
::tensorflow::CodeLocation* GraphOpCreation::_slow_release_code_location() {
  if (code_location_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::CodeLocation* temp = new ::tensorflow::CodeLocation;
    temp->MergeFrom(*code_location_);
    code_location_ = NULL;
    return temp;
  }
}
::tensorflow::CodeLocation* GraphOpCreation::unsafe_arena_release_code_location() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.GraphOpCreation.code_location)
  
  ::tensorflow::CodeLocation* temp = code_location_;
  code_location_ = NULL;
  return temp;
}
void GraphOpCreation::_slow_set_allocated_code_location(
    ::google::protobuf::Arena* message_arena, ::tensorflow::CodeLocation** code_location) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*code_location) == NULL) {
      message_arena->Own(*code_location);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*code_location)) {
      ::tensorflow::CodeLocation* new_code_location = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::CodeLocation >(
            message_arena);
      new_code_location->CopyFrom(**code_location);
      *code_location = new_code_location;
    }
}
void GraphOpCreation::unsafe_arena_set_allocated_code_location(
    ::tensorflow::CodeLocation* code_location) {
  if (GetArenaNoVirtual() == NULL) {
    delete code_location_;
  }
  code_location_ = code_location;
  if (code_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GraphOpCreation.code_location)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GraphOpCreation::kOpTypeFieldNumber;
const int GraphOpCreation::kOpNameFieldNumber;
const int GraphOpCreation::kGraphNameFieldNumber;
const int GraphOpCreation::kGraphIdFieldNumber;
const int GraphOpCreation::kDeviceNameFieldNumber;
const int GraphOpCreation::kInputNamesFieldNumber;
const int GraphOpCreation::kNumOutputsFieldNumber;
const int GraphOpCreation::kCodeLocationFieldNumber;
const int GraphOpCreation::kOutputTensorIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GraphOpCreation::GraphOpCreation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GraphOpCreation)
}

GraphOpCreation::GraphOpCreation(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  input_names_(arena),
  output_tensor_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphOpCreation)
}

void GraphOpCreation::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  code_location_ = const_cast< ::tensorflow::CodeLocation*>(&::tensorflow::CodeLocation::default_instance());
}

GraphOpCreation::GraphOpCreation(const GraphOpCreation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphOpCreation)
}

void GraphOpCreation::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  op_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  op_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  graph_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  graph_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_outputs_ = 0;
  code_location_ = NULL;
}

GraphOpCreation::~GraphOpCreation() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphOpCreation)
  SharedDtor();
}

void GraphOpCreation::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  op_type_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  op_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  graph_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  graph_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  device_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
    delete code_location_;
  }
}

void GraphOpCreation::ArenaDtor(void* object) {
  GraphOpCreation* _this = reinterpret_cast< GraphOpCreation* >(object);
  (void)_this;
}
void GraphOpCreation::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GraphOpCreation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GraphOpCreation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GraphOpCreation_descriptor_;
}

const GraphOpCreation& GraphOpCreation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto();
  return *default_instance_;
}

GraphOpCreation* GraphOpCreation::default_instance_ = NULL;

GraphOpCreation* GraphOpCreation::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GraphOpCreation>(arena);
}

void GraphOpCreation::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphOpCreation)
  op_type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  op_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  graph_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  graph_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  device_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  num_outputs_ = 0;
  if (GetArenaNoVirtual() == NULL && code_location_ != NULL) delete code_location_;
  code_location_ = NULL;
  input_names_.Clear();
  output_tensor_ids_.Clear();
}

bool GraphOpCreation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GraphOpCreation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string op_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_op_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->op_type().data(), this->op_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.GraphOpCreation.op_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_op_name;
        break;
      }

      // optional string op_name = 2;
      case 2: {
        if (tag == 18) {
         parse_op_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_op_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->op_name().data(), this->op_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.GraphOpCreation.op_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_graph_name;
        break;
      }

      // optional string graph_name = 3;
      case 3: {
        if (tag == 26) {
         parse_graph_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_graph_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->graph_name().data(), this->graph_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.GraphOpCreation.graph_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_graph_id;
        break;
      }

      // optional string graph_id = 4;
      case 4: {
        if (tag == 34) {
         parse_graph_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_graph_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->graph_id().data(), this->graph_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.GraphOpCreation.graph_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_device_name;
        break;
      }

      // optional string device_name = 5;
      case 5: {
        if (tag == 42) {
         parse_device_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_name().data(), this->device_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.GraphOpCreation.device_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_input_names;
        break;
      }

      // repeated string input_names = 6;
      case 6: {
        if (tag == 50) {
         parse_input_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_input_names()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->input_names(this->input_names_size() - 1).data(),
            this->input_names(this->input_names_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.GraphOpCreation.input_names"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_input_names;
        if (input->ExpectTag(56)) goto parse_num_outputs;
        break;
      }

      // optional int32 num_outputs = 7;
      case 7: {
        if (tag == 56) {
         parse_num_outputs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_outputs_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_code_location;
        break;
      }

      // optional .tensorflow.CodeLocation code_location = 8;
      case 8: {
        if (tag == 66) {
         parse_code_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_code_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_output_tensor_ids;
        break;
      }

      // repeated int32 output_tensor_ids = 9;
      case 9: {
        if (tag == 74) {
         parse_output_tensor_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_output_tensor_ids())));
        } else if (tag == 72) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 74, input, this->mutable_output_tensor_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GraphOpCreation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GraphOpCreation)
  return false;
#undef DO_
}

void GraphOpCreation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GraphOpCreation)
  // optional string op_type = 1;
  if (this->op_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->op_type().data(), this->op_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphOpCreation.op_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->op_type(), output);
  }

  // optional string op_name = 2;
  if (this->op_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->op_name().data(), this->op_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphOpCreation.op_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->op_name(), output);
  }

  // optional string graph_name = 3;
  if (this->graph_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->graph_name().data(), this->graph_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphOpCreation.graph_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->graph_name(), output);
  }

  // optional string graph_id = 4;
  if (this->graph_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->graph_id().data(), this->graph_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphOpCreation.graph_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->graph_id(), output);
  }

  // optional string device_name = 5;
  if (this->device_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphOpCreation.device_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->device_name(), output);
  }

  // repeated string input_names = 6;
  for (int i = 0; i < this->input_names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_names(i).data(), this->input_names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphOpCreation.input_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->input_names(i), output);
  }

  // optional int32 num_outputs = 7;
  if (this->num_outputs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->num_outputs(), output);
  }

  // optional .tensorflow.CodeLocation code_location = 8;
  if (this->has_code_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->code_location_, output);
  }

  // repeated int32 output_tensor_ids = 9;
  if (this->output_tensor_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_output_tensor_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->output_tensor_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->output_tensor_ids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.GraphOpCreation)
}

::google::protobuf::uint8* GraphOpCreation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphOpCreation)
  // optional string op_type = 1;
  if (this->op_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->op_type().data(), this->op_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphOpCreation.op_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->op_type(), target);
  }

  // optional string op_name = 2;
  if (this->op_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->op_name().data(), this->op_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphOpCreation.op_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->op_name(), target);
  }

  // optional string graph_name = 3;
  if (this->graph_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->graph_name().data(), this->graph_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphOpCreation.graph_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->graph_name(), target);
  }

  // optional string graph_id = 4;
  if (this->graph_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->graph_id().data(), this->graph_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphOpCreation.graph_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->graph_id(), target);
  }

  // optional string device_name = 5;
  if (this->device_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphOpCreation.device_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->device_name(), target);
  }

  // repeated string input_names = 6;
  for (int i = 0; i < this->input_names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_names(i).data(), this->input_names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphOpCreation.input_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->input_names(i), target);
  }

  // optional int32 num_outputs = 7;
  if (this->num_outputs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->num_outputs(), target);
  }

  // optional .tensorflow.CodeLocation code_location = 8;
  if (this->has_code_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->code_location_, false, target);
  }

  // repeated int32 output_tensor_ids = 9;
  if (this->output_tensor_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _output_tensor_ids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->output_tensor_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->output_tensor_ids(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphOpCreation)
  return target;
}

int GraphOpCreation::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphOpCreation)
  int total_size = 0;

  // optional string op_type = 1;
  if (this->op_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->op_type());
  }

  // optional string op_name = 2;
  if (this->op_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->op_name());
  }

  // optional string graph_name = 3;
  if (this->graph_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->graph_name());
  }

  // optional string graph_id = 4;
  if (this->graph_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->graph_id());
  }

  // optional string device_name = 5;
  if (this->device_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_name());
  }

  // optional int32 num_outputs = 7;
  if (this->num_outputs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_outputs());
  }

  // optional .tensorflow.CodeLocation code_location = 8;
  if (this->has_code_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->code_location_);
  }

  // repeated string input_names = 6;
  total_size += 1 * this->input_names_size();
  for (int i = 0; i < this->input_names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->input_names(i));
  }

  // repeated int32 output_tensor_ids = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->output_tensor_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->output_tensor_ids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _output_tensor_ids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GraphOpCreation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GraphOpCreation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GraphOpCreation* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GraphOpCreation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GraphOpCreation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GraphOpCreation)
    MergeFrom(*source);
  }
}

void GraphOpCreation::MergeFrom(const GraphOpCreation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphOpCreation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  input_names_.MergeFrom(from.input_names_);
  output_tensor_ids_.MergeFrom(from.output_tensor_ids_);
  if (from.op_type().size() > 0) {
    set_op_type(from.op_type());
  }
  if (from.op_name().size() > 0) {
    set_op_name(from.op_name());
  }
  if (from.graph_name().size() > 0) {
    set_graph_name(from.graph_name());
  }
  if (from.graph_id().size() > 0) {
    set_graph_id(from.graph_id());
  }
  if (from.device_name().size() > 0) {
    set_device_name(from.device_name());
  }
  if (from.num_outputs() != 0) {
    set_num_outputs(from.num_outputs());
  }
  if (from.has_code_location()) {
    mutable_code_location()->::tensorflow::CodeLocation::MergeFrom(from.code_location());
  }
}

void GraphOpCreation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GraphOpCreation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphOpCreation::CopyFrom(const GraphOpCreation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphOpCreation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphOpCreation::IsInitialized() const {

  return true;
}

void GraphOpCreation::Swap(GraphOpCreation* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GraphOpCreation temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void GraphOpCreation::UnsafeArenaSwap(GraphOpCreation* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GraphOpCreation::InternalSwap(GraphOpCreation* other) {
  op_type_.Swap(&other->op_type_);
  op_name_.Swap(&other->op_name_);
  graph_name_.Swap(&other->graph_name_);
  graph_id_.Swap(&other->graph_id_);
  device_name_.Swap(&other->device_name_);
  input_names_.UnsafeArenaSwap(&other->input_names_);
  std::swap(num_outputs_, other->num_outputs_);
  std::swap(code_location_, other->code_location_);
  output_tensor_ids_.UnsafeArenaSwap(&other->output_tensor_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GraphOpCreation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GraphOpCreation_descriptor_;
  metadata.reflection = GraphOpCreation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GraphOpCreation

// optional string op_type = 1;
void GraphOpCreation::clear_op_type() {
  op_type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& GraphOpCreation::op_type() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphOpCreation.op_type)
  return op_type_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GraphOpCreation::set_op_type(const ::std::string& value) {
  
  op_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.GraphOpCreation.op_type)
}
 void GraphOpCreation::set_op_type(const char* value) {
  
  op_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.GraphOpCreation.op_type)
}
 void GraphOpCreation::set_op_type(const char* value,
    size_t size) {
  
  op_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.GraphOpCreation.op_type)
}
 ::std::string* GraphOpCreation::mutable_op_type() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphOpCreation.op_type)
  return op_type_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* GraphOpCreation::release_op_type() {
  // @@protoc_insertion_point(field_release:tensorflow.GraphOpCreation.op_type)
  
  return op_type_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* GraphOpCreation::unsafe_arena_release_op_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.GraphOpCreation.op_type)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return op_type_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void GraphOpCreation::set_allocated_op_type(::std::string* op_type) {
  if (op_type != NULL) {
    
  } else {
    
  }
  op_type_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), op_type,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GraphOpCreation.op_type)
}
 void GraphOpCreation::unsafe_arena_set_allocated_op_type(
    ::std::string* op_type) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (op_type != NULL) {
    
  } else {
    
  }
  op_type_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      op_type, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GraphOpCreation.op_type)
}

// optional string op_name = 2;
void GraphOpCreation::clear_op_name() {
  op_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& GraphOpCreation::op_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphOpCreation.op_name)
  return op_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GraphOpCreation::set_op_name(const ::std::string& value) {
  
  op_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.GraphOpCreation.op_name)
}
 void GraphOpCreation::set_op_name(const char* value) {
  
  op_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.GraphOpCreation.op_name)
}
 void GraphOpCreation::set_op_name(const char* value,
    size_t size) {
  
  op_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.GraphOpCreation.op_name)
}
 ::std::string* GraphOpCreation::mutable_op_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphOpCreation.op_name)
  return op_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* GraphOpCreation::release_op_name() {
  // @@protoc_insertion_point(field_release:tensorflow.GraphOpCreation.op_name)
  
  return op_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* GraphOpCreation::unsafe_arena_release_op_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.GraphOpCreation.op_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return op_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void GraphOpCreation::set_allocated_op_name(::std::string* op_name) {
  if (op_name != NULL) {
    
  } else {
    
  }
  op_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), op_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GraphOpCreation.op_name)
}
 void GraphOpCreation::unsafe_arena_set_allocated_op_name(
    ::std::string* op_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (op_name != NULL) {
    
  } else {
    
  }
  op_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      op_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GraphOpCreation.op_name)
}

// optional string graph_name = 3;
void GraphOpCreation::clear_graph_name() {
  graph_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& GraphOpCreation::graph_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphOpCreation.graph_name)
  return graph_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GraphOpCreation::set_graph_name(const ::std::string& value) {
  
  graph_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.GraphOpCreation.graph_name)
}
 void GraphOpCreation::set_graph_name(const char* value) {
  
  graph_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.GraphOpCreation.graph_name)
}
 void GraphOpCreation::set_graph_name(const char* value,
    size_t size) {
  
  graph_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.GraphOpCreation.graph_name)
}
 ::std::string* GraphOpCreation::mutable_graph_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphOpCreation.graph_name)
  return graph_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* GraphOpCreation::release_graph_name() {
  // @@protoc_insertion_point(field_release:tensorflow.GraphOpCreation.graph_name)
  
  return graph_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* GraphOpCreation::unsafe_arena_release_graph_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.GraphOpCreation.graph_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return graph_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void GraphOpCreation::set_allocated_graph_name(::std::string* graph_name) {
  if (graph_name != NULL) {
    
  } else {
    
  }
  graph_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), graph_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GraphOpCreation.graph_name)
}
 void GraphOpCreation::unsafe_arena_set_allocated_graph_name(
    ::std::string* graph_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (graph_name != NULL) {
    
  } else {
    
  }
  graph_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      graph_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GraphOpCreation.graph_name)
}

// optional string graph_id = 4;
void GraphOpCreation::clear_graph_id() {
  graph_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& GraphOpCreation::graph_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphOpCreation.graph_id)
  return graph_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GraphOpCreation::set_graph_id(const ::std::string& value) {
  
  graph_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.GraphOpCreation.graph_id)
}
 void GraphOpCreation::set_graph_id(const char* value) {
  
  graph_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.GraphOpCreation.graph_id)
}
 void GraphOpCreation::set_graph_id(const char* value,
    size_t size) {
  
  graph_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.GraphOpCreation.graph_id)
}
 ::std::string* GraphOpCreation::mutable_graph_id() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphOpCreation.graph_id)
  return graph_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* GraphOpCreation::release_graph_id() {
  // @@protoc_insertion_point(field_release:tensorflow.GraphOpCreation.graph_id)
  
  return graph_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* GraphOpCreation::unsafe_arena_release_graph_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.GraphOpCreation.graph_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return graph_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void GraphOpCreation::set_allocated_graph_id(::std::string* graph_id) {
  if (graph_id != NULL) {
    
  } else {
    
  }
  graph_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), graph_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GraphOpCreation.graph_id)
}
 void GraphOpCreation::unsafe_arena_set_allocated_graph_id(
    ::std::string* graph_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (graph_id != NULL) {
    
  } else {
    
  }
  graph_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      graph_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GraphOpCreation.graph_id)
}

// optional string device_name = 5;
void GraphOpCreation::clear_device_name() {
  device_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& GraphOpCreation::device_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphOpCreation.device_name)
  return device_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GraphOpCreation::set_device_name(const ::std::string& value) {
  
  device_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.GraphOpCreation.device_name)
}
 void GraphOpCreation::set_device_name(const char* value) {
  
  device_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.GraphOpCreation.device_name)
}
 void GraphOpCreation::set_device_name(const char* value,
    size_t size) {
  
  device_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.GraphOpCreation.device_name)
}
 ::std::string* GraphOpCreation::mutable_device_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphOpCreation.device_name)
  return device_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* GraphOpCreation::release_device_name() {
  // @@protoc_insertion_point(field_release:tensorflow.GraphOpCreation.device_name)
  
  return device_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* GraphOpCreation::unsafe_arena_release_device_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.GraphOpCreation.device_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return device_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void GraphOpCreation::set_allocated_device_name(::std::string* device_name) {
  if (device_name != NULL) {
    
  } else {
    
  }
  device_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GraphOpCreation.device_name)
}
 void GraphOpCreation::unsafe_arena_set_allocated_device_name(
    ::std::string* device_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (device_name != NULL) {
    
  } else {
    
  }
  device_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      device_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GraphOpCreation.device_name)
}

// repeated string input_names = 6;
int GraphOpCreation::input_names_size() const {
  return input_names_.size();
}
void GraphOpCreation::clear_input_names() {
  input_names_.Clear();
}
 const ::std::string& GraphOpCreation::input_names(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphOpCreation.input_names)
  return input_names_.Get(index);
}
 ::std::string* GraphOpCreation::mutable_input_names(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphOpCreation.input_names)
  return input_names_.Mutable(index);
}
 void GraphOpCreation::set_input_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.GraphOpCreation.input_names)
  input_names_.Mutable(index)->assign(value);
}
 void GraphOpCreation::set_input_names(int index, const char* value) {
  input_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.GraphOpCreation.input_names)
}
 void GraphOpCreation::set_input_names(int index, const char* value, size_t size) {
  input_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.GraphOpCreation.input_names)
}
 ::std::string* GraphOpCreation::add_input_names() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.GraphOpCreation.input_names)
  return input_names_.Add();
}
 void GraphOpCreation::add_input_names(const ::std::string& value) {
  input_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.GraphOpCreation.input_names)
}
 void GraphOpCreation::add_input_names(const char* value) {
  input_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.GraphOpCreation.input_names)
}
 void GraphOpCreation::add_input_names(const char* value, size_t size) {
  input_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.GraphOpCreation.input_names)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
GraphOpCreation::input_names() const {
  // @@protoc_insertion_point(field_list:tensorflow.GraphOpCreation.input_names)
  return input_names_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
GraphOpCreation::mutable_input_names() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GraphOpCreation.input_names)
  return &input_names_;
}

// optional int32 num_outputs = 7;
void GraphOpCreation::clear_num_outputs() {
  num_outputs_ = 0;
}
 ::google::protobuf::int32 GraphOpCreation::num_outputs() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphOpCreation.num_outputs)
  return num_outputs_;
}
 void GraphOpCreation::set_num_outputs(::google::protobuf::int32 value) {
  
  num_outputs_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphOpCreation.num_outputs)
}

// optional .tensorflow.CodeLocation code_location = 8;
bool GraphOpCreation::has_code_location() const {
  return !_is_default_instance_ && code_location_ != NULL;
}
void GraphOpCreation::clear_code_location() {
  if (GetArenaNoVirtual() == NULL && code_location_ != NULL) delete code_location_;
  code_location_ = NULL;
}
const ::tensorflow::CodeLocation& GraphOpCreation::code_location() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphOpCreation.code_location)
  return code_location_ != NULL ? *code_location_ : *default_instance_->code_location_;
}
::tensorflow::CodeLocation* GraphOpCreation::mutable_code_location() {
  
  if (code_location_ == NULL) {
    _slow_mutable_code_location();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphOpCreation.code_location)
  return code_location_;
}
::tensorflow::CodeLocation* GraphOpCreation::release_code_location() {
  // @@protoc_insertion_point(field_release:tensorflow.GraphOpCreation.code_location)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_code_location();
  } else {
    ::tensorflow::CodeLocation* temp = code_location_;
    code_location_ = NULL;
    return temp;
  }
}
 void GraphOpCreation::set_allocated_code_location(::tensorflow::CodeLocation* code_location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete code_location_;
  }
  if (code_location != NULL) {
    _slow_set_allocated_code_location(message_arena, &code_location);
  }
  code_location_ = code_location;
  if (code_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GraphOpCreation.code_location)
}

// repeated int32 output_tensor_ids = 9;
int GraphOpCreation::output_tensor_ids_size() const {
  return output_tensor_ids_.size();
}
void GraphOpCreation::clear_output_tensor_ids() {
  output_tensor_ids_.Clear();
}
 ::google::protobuf::int32 GraphOpCreation::output_tensor_ids(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphOpCreation.output_tensor_ids)
  return output_tensor_ids_.Get(index);
}
 void GraphOpCreation::set_output_tensor_ids(int index, ::google::protobuf::int32 value) {
  output_tensor_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.GraphOpCreation.output_tensor_ids)
}
 void GraphOpCreation::add_output_tensor_ids(::google::protobuf::int32 value) {
  output_tensor_ids_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.GraphOpCreation.output_tensor_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GraphOpCreation::output_tensor_ids() const {
  // @@protoc_insertion_point(field_list:tensorflow.GraphOpCreation.output_tensor_ids)
  return output_tensor_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GraphOpCreation::mutable_output_tensor_ids() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GraphOpCreation.output_tensor_ids)
  return &output_tensor_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebuggedGraph::kGraphIdFieldNumber;
const int DebuggedGraph::kGraphNameFieldNumber;
const int DebuggedGraph::kInstrumentedOpsFieldNumber;
const int DebuggedGraph::kOriginalGraphDefFieldNumber;
const int DebuggedGraph::kInstrumentedGraphDefFieldNumber;
const int DebuggedGraph::kOuterContextIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebuggedGraph::DebuggedGraph()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.DebuggedGraph)
}

DebuggedGraph::DebuggedGraph(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  instrumented_ops_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DebuggedGraph)
}

void DebuggedGraph::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DebuggedGraph::DebuggedGraph(const DebuggedGraph& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.DebuggedGraph)
}

void DebuggedGraph::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  graph_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  graph_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  original_graph_def_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrumented_graph_def_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  outer_context_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DebuggedGraph::~DebuggedGraph() {
  // @@protoc_insertion_point(destructor:tensorflow.DebuggedGraph)
  SharedDtor();
}

void DebuggedGraph::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  graph_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  graph_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  original_graph_def_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  instrumented_graph_def_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  outer_context_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void DebuggedGraph::ArenaDtor(void* object) {
  DebuggedGraph* _this = reinterpret_cast< DebuggedGraph* >(object);
  (void)_this;
}
void DebuggedGraph::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DebuggedGraph::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebuggedGraph::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebuggedGraph_descriptor_;
}

const DebuggedGraph& DebuggedGraph::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto();
  return *default_instance_;
}

DebuggedGraph* DebuggedGraph::default_instance_ = NULL;

DebuggedGraph* DebuggedGraph::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DebuggedGraph>(arena);
}

void DebuggedGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DebuggedGraph)
  graph_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  graph_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  original_graph_def_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  instrumented_graph_def_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  outer_context_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  instrumented_ops_.Clear();
}

bool DebuggedGraph::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.DebuggedGraph)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string graph_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_graph_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->graph_id().data(), this->graph_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.DebuggedGraph.graph_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_graph_name;
        break;
      }

      // optional string graph_name = 2;
      case 2: {
        if (tag == 18) {
         parse_graph_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_graph_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->graph_name().data(), this->graph_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.DebuggedGraph.graph_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_instrumented_ops;
        break;
      }

      // repeated string instrumented_ops = 3;
      case 3: {
        if (tag == 26) {
         parse_instrumented_ops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_instrumented_ops()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instrumented_ops(this->instrumented_ops_size() - 1).data(),
            this->instrumented_ops(this->instrumented_ops_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.DebuggedGraph.instrumented_ops"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_instrumented_ops;
        if (input->ExpectTag(34)) goto parse_original_graph_def;
        break;
      }

      // optional bytes original_graph_def = 4;
      case 4: {
        if (tag == 34) {
         parse_original_graph_def:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_original_graph_def()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_instrumented_graph_def;
        break;
      }

      // optional bytes instrumented_graph_def = 5;
      case 5: {
        if (tag == 42) {
         parse_instrumented_graph_def:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_instrumented_graph_def()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_outer_context_id;
        break;
      }

      // optional string outer_context_id = 6;
      case 6: {
        if (tag == 50) {
         parse_outer_context_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_outer_context_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->outer_context_id().data(), this->outer_context_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.DebuggedGraph.outer_context_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.DebuggedGraph)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.DebuggedGraph)
  return false;
#undef DO_
}

void DebuggedGraph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.DebuggedGraph)
  // optional string graph_id = 1;
  if (this->graph_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->graph_id().data(), this->graph_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebuggedGraph.graph_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->graph_id(), output);
  }

  // optional string graph_name = 2;
  if (this->graph_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->graph_name().data(), this->graph_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebuggedGraph.graph_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->graph_name(), output);
  }

  // repeated string instrumented_ops = 3;
  for (int i = 0; i < this->instrumented_ops_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrumented_ops(i).data(), this->instrumented_ops(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebuggedGraph.instrumented_ops");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->instrumented_ops(i), output);
  }

  // optional bytes original_graph_def = 4;
  if (this->original_graph_def().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->original_graph_def(), output);
  }

  // optional bytes instrumented_graph_def = 5;
  if (this->instrumented_graph_def().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->instrumented_graph_def(), output);
  }

  // optional string outer_context_id = 6;
  if (this->outer_context_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->outer_context_id().data(), this->outer_context_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebuggedGraph.outer_context_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->outer_context_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.DebuggedGraph)
}

::google::protobuf::uint8* DebuggedGraph::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DebuggedGraph)
  // optional string graph_id = 1;
  if (this->graph_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->graph_id().data(), this->graph_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebuggedGraph.graph_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->graph_id(), target);
  }

  // optional string graph_name = 2;
  if (this->graph_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->graph_name().data(), this->graph_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebuggedGraph.graph_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->graph_name(), target);
  }

  // repeated string instrumented_ops = 3;
  for (int i = 0; i < this->instrumented_ops_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrumented_ops(i).data(), this->instrumented_ops(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebuggedGraph.instrumented_ops");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->instrumented_ops(i), target);
  }

  // optional bytes original_graph_def = 4;
  if (this->original_graph_def().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->original_graph_def(), target);
  }

  // optional bytes instrumented_graph_def = 5;
  if (this->instrumented_graph_def().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->instrumented_graph_def(), target);
  }

  // optional string outer_context_id = 6;
  if (this->outer_context_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->outer_context_id().data(), this->outer_context_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebuggedGraph.outer_context_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->outer_context_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DebuggedGraph)
  return target;
}

int DebuggedGraph::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DebuggedGraph)
  int total_size = 0;

  // optional string graph_id = 1;
  if (this->graph_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->graph_id());
  }

  // optional string graph_name = 2;
  if (this->graph_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->graph_name());
  }

  // optional bytes original_graph_def = 4;
  if (this->original_graph_def().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->original_graph_def());
  }

  // optional bytes instrumented_graph_def = 5;
  if (this->instrumented_graph_def().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->instrumented_graph_def());
  }

  // optional string outer_context_id = 6;
  if (this->outer_context_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->outer_context_id());
  }

  // repeated string instrumented_ops = 3;
  total_size += 1 * this->instrumented_ops_size();
  for (int i = 0; i < this->instrumented_ops_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->instrumented_ops(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebuggedGraph::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.DebuggedGraph)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DebuggedGraph* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DebuggedGraph>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.DebuggedGraph)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.DebuggedGraph)
    MergeFrom(*source);
  }
}

void DebuggedGraph::MergeFrom(const DebuggedGraph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DebuggedGraph)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  instrumented_ops_.MergeFrom(from.instrumented_ops_);
  if (from.graph_id().size() > 0) {
    set_graph_id(from.graph_id());
  }
  if (from.graph_name().size() > 0) {
    set_graph_name(from.graph_name());
  }
  if (from.original_graph_def().size() > 0) {
    set_original_graph_def(from.original_graph_def());
  }
  if (from.instrumented_graph_def().size() > 0) {
    set_instrumented_graph_def(from.instrumented_graph_def());
  }
  if (from.outer_context_id().size() > 0) {
    set_outer_context_id(from.outer_context_id());
  }
}

void DebuggedGraph::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.DebuggedGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebuggedGraph::CopyFrom(const DebuggedGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DebuggedGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebuggedGraph::IsInitialized() const {

  return true;
}

void DebuggedGraph::Swap(DebuggedGraph* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DebuggedGraph temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void DebuggedGraph::UnsafeArenaSwap(DebuggedGraph* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DebuggedGraph::InternalSwap(DebuggedGraph* other) {
  graph_id_.Swap(&other->graph_id_);
  graph_name_.Swap(&other->graph_name_);
  instrumented_ops_.UnsafeArenaSwap(&other->instrumented_ops_);
  original_graph_def_.Swap(&other->original_graph_def_);
  instrumented_graph_def_.Swap(&other->instrumented_graph_def_);
  outer_context_id_.Swap(&other->outer_context_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebuggedGraph::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebuggedGraph_descriptor_;
  metadata.reflection = DebuggedGraph_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DebuggedGraph

// optional string graph_id = 1;
void DebuggedGraph::clear_graph_id() {
  graph_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& DebuggedGraph::graph_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.DebuggedGraph.graph_id)
  return graph_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DebuggedGraph::set_graph_id(const ::std::string& value) {
  
  graph_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.DebuggedGraph.graph_id)
}
 void DebuggedGraph::set_graph_id(const char* value) {
  
  graph_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.DebuggedGraph.graph_id)
}
 void DebuggedGraph::set_graph_id(const char* value,
    size_t size) {
  
  graph_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.DebuggedGraph.graph_id)
}
 ::std::string* DebuggedGraph::mutable_graph_id() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.DebuggedGraph.graph_id)
  return graph_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* DebuggedGraph::release_graph_id() {
  // @@protoc_insertion_point(field_release:tensorflow.DebuggedGraph.graph_id)
  
  return graph_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* DebuggedGraph::unsafe_arena_release_graph_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.DebuggedGraph.graph_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return graph_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void DebuggedGraph::set_allocated_graph_id(::std::string* graph_id) {
  if (graph_id != NULL) {
    
  } else {
    
  }
  graph_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), graph_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DebuggedGraph.graph_id)
}
 void DebuggedGraph::unsafe_arena_set_allocated_graph_id(
    ::std::string* graph_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (graph_id != NULL) {
    
  } else {
    
  }
  graph_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      graph_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.DebuggedGraph.graph_id)
}

// optional string graph_name = 2;
void DebuggedGraph::clear_graph_name() {
  graph_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& DebuggedGraph::graph_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.DebuggedGraph.graph_name)
  return graph_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DebuggedGraph::set_graph_name(const ::std::string& value) {
  
  graph_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.DebuggedGraph.graph_name)
}
 void DebuggedGraph::set_graph_name(const char* value) {
  
  graph_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.DebuggedGraph.graph_name)
}
 void DebuggedGraph::set_graph_name(const char* value,
    size_t size) {
  
  graph_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.DebuggedGraph.graph_name)
}
 ::std::string* DebuggedGraph::mutable_graph_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.DebuggedGraph.graph_name)
  return graph_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* DebuggedGraph::release_graph_name() {
  // @@protoc_insertion_point(field_release:tensorflow.DebuggedGraph.graph_name)
  
  return graph_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* DebuggedGraph::unsafe_arena_release_graph_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.DebuggedGraph.graph_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return graph_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void DebuggedGraph::set_allocated_graph_name(::std::string* graph_name) {
  if (graph_name != NULL) {
    
  } else {
    
  }
  graph_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), graph_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DebuggedGraph.graph_name)
}
 void DebuggedGraph::unsafe_arena_set_allocated_graph_name(
    ::std::string* graph_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (graph_name != NULL) {
    
  } else {
    
  }
  graph_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      graph_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.DebuggedGraph.graph_name)
}

// repeated string instrumented_ops = 3;
int DebuggedGraph::instrumented_ops_size() const {
  return instrumented_ops_.size();
}
void DebuggedGraph::clear_instrumented_ops() {
  instrumented_ops_.Clear();
}
 const ::std::string& DebuggedGraph::instrumented_ops(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.DebuggedGraph.instrumented_ops)
  return instrumented_ops_.Get(index);
}
 ::std::string* DebuggedGraph::mutable_instrumented_ops(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.DebuggedGraph.instrumented_ops)
  return instrumented_ops_.Mutable(index);
}
 void DebuggedGraph::set_instrumented_ops(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.DebuggedGraph.instrumented_ops)
  instrumented_ops_.Mutable(index)->assign(value);
}
 void DebuggedGraph::set_instrumented_ops(int index, const char* value) {
  instrumented_ops_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.DebuggedGraph.instrumented_ops)
}
 void DebuggedGraph::set_instrumented_ops(int index, const char* value, size_t size) {
  instrumented_ops_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.DebuggedGraph.instrumented_ops)
}
 ::std::string* DebuggedGraph::add_instrumented_ops() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.DebuggedGraph.instrumented_ops)
  return instrumented_ops_.Add();
}
 void DebuggedGraph::add_instrumented_ops(const ::std::string& value) {
  instrumented_ops_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.DebuggedGraph.instrumented_ops)
}
 void DebuggedGraph::add_instrumented_ops(const char* value) {
  instrumented_ops_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.DebuggedGraph.instrumented_ops)
}
 void DebuggedGraph::add_instrumented_ops(const char* value, size_t size) {
  instrumented_ops_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.DebuggedGraph.instrumented_ops)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
DebuggedGraph::instrumented_ops() const {
  // @@protoc_insertion_point(field_list:tensorflow.DebuggedGraph.instrumented_ops)
  return instrumented_ops_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
DebuggedGraph::mutable_instrumented_ops() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.DebuggedGraph.instrumented_ops)
  return &instrumented_ops_;
}

// optional bytes original_graph_def = 4;
void DebuggedGraph::clear_original_graph_def() {
  original_graph_def_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& DebuggedGraph::original_graph_def() const {
  // @@protoc_insertion_point(field_get:tensorflow.DebuggedGraph.original_graph_def)
  return original_graph_def_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DebuggedGraph::set_original_graph_def(const ::std::string& value) {
  
  original_graph_def_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.DebuggedGraph.original_graph_def)
}
 void DebuggedGraph::set_original_graph_def(const char* value) {
  
  original_graph_def_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.DebuggedGraph.original_graph_def)
}
 void DebuggedGraph::set_original_graph_def(const void* value,
    size_t size) {
  
  original_graph_def_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.DebuggedGraph.original_graph_def)
}
 ::std::string* DebuggedGraph::mutable_original_graph_def() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.DebuggedGraph.original_graph_def)
  return original_graph_def_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* DebuggedGraph::release_original_graph_def() {
  // @@protoc_insertion_point(field_release:tensorflow.DebuggedGraph.original_graph_def)
  
  return original_graph_def_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* DebuggedGraph::unsafe_arena_release_original_graph_def() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.DebuggedGraph.original_graph_def)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return original_graph_def_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void DebuggedGraph::set_allocated_original_graph_def(::std::string* original_graph_def) {
  if (original_graph_def != NULL) {
    
  } else {
    
  }
  original_graph_def_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), original_graph_def,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DebuggedGraph.original_graph_def)
}
 void DebuggedGraph::unsafe_arena_set_allocated_original_graph_def(
    ::std::string* original_graph_def) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (original_graph_def != NULL) {
    
  } else {
    
  }
  original_graph_def_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      original_graph_def, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.DebuggedGraph.original_graph_def)
}

// optional bytes instrumented_graph_def = 5;
void DebuggedGraph::clear_instrumented_graph_def() {
  instrumented_graph_def_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& DebuggedGraph::instrumented_graph_def() const {
  // @@protoc_insertion_point(field_get:tensorflow.DebuggedGraph.instrumented_graph_def)
  return instrumented_graph_def_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DebuggedGraph::set_instrumented_graph_def(const ::std::string& value) {
  
  instrumented_graph_def_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.DebuggedGraph.instrumented_graph_def)
}
 void DebuggedGraph::set_instrumented_graph_def(const char* value) {
  
  instrumented_graph_def_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.DebuggedGraph.instrumented_graph_def)
}
 void DebuggedGraph::set_instrumented_graph_def(const void* value,
    size_t size) {
  
  instrumented_graph_def_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.DebuggedGraph.instrumented_graph_def)
}
 ::std::string* DebuggedGraph::mutable_instrumented_graph_def() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.DebuggedGraph.instrumented_graph_def)
  return instrumented_graph_def_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* DebuggedGraph::release_instrumented_graph_def() {
  // @@protoc_insertion_point(field_release:tensorflow.DebuggedGraph.instrumented_graph_def)
  
  return instrumented_graph_def_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* DebuggedGraph::unsafe_arena_release_instrumented_graph_def() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.DebuggedGraph.instrumented_graph_def)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return instrumented_graph_def_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void DebuggedGraph::set_allocated_instrumented_graph_def(::std::string* instrumented_graph_def) {
  if (instrumented_graph_def != NULL) {
    
  } else {
    
  }
  instrumented_graph_def_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumented_graph_def,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DebuggedGraph.instrumented_graph_def)
}
 void DebuggedGraph::unsafe_arena_set_allocated_instrumented_graph_def(
    ::std::string* instrumented_graph_def) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (instrumented_graph_def != NULL) {
    
  } else {
    
  }
  instrumented_graph_def_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      instrumented_graph_def, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.DebuggedGraph.instrumented_graph_def)
}

// optional string outer_context_id = 6;
void DebuggedGraph::clear_outer_context_id() {
  outer_context_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& DebuggedGraph::outer_context_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.DebuggedGraph.outer_context_id)
  return outer_context_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DebuggedGraph::set_outer_context_id(const ::std::string& value) {
  
  outer_context_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.DebuggedGraph.outer_context_id)
}
 void DebuggedGraph::set_outer_context_id(const char* value) {
  
  outer_context_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.DebuggedGraph.outer_context_id)
}
 void DebuggedGraph::set_outer_context_id(const char* value,
    size_t size) {
  
  outer_context_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.DebuggedGraph.outer_context_id)
}
 ::std::string* DebuggedGraph::mutable_outer_context_id() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.DebuggedGraph.outer_context_id)
  return outer_context_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* DebuggedGraph::release_outer_context_id() {
  // @@protoc_insertion_point(field_release:tensorflow.DebuggedGraph.outer_context_id)
  
  return outer_context_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* DebuggedGraph::unsafe_arena_release_outer_context_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.DebuggedGraph.outer_context_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return outer_context_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void DebuggedGraph::set_allocated_outer_context_id(::std::string* outer_context_id) {
  if (outer_context_id != NULL) {
    
  } else {
    
  }
  outer_context_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), outer_context_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DebuggedGraph.outer_context_id)
}
 void DebuggedGraph::unsafe_arena_set_allocated_outer_context_id(
    ::std::string* outer_context_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (outer_context_id != NULL) {
    
  } else {
    
  }
  outer_context_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      outer_context_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.DebuggedGraph.outer_context_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebuggedDevice::kDeviceNameFieldNumber;
const int DebuggedDevice::kDeviceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebuggedDevice::DebuggedDevice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.DebuggedDevice)
}

DebuggedDevice::DebuggedDevice(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DebuggedDevice)
}

void DebuggedDevice::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DebuggedDevice::DebuggedDevice(const DebuggedDevice& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.DebuggedDevice)
}

void DebuggedDevice::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_id_ = 0;
}

DebuggedDevice::~DebuggedDevice() {
  // @@protoc_insertion_point(destructor:tensorflow.DebuggedDevice)
  SharedDtor();
}

void DebuggedDevice::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  device_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void DebuggedDevice::ArenaDtor(void* object) {
  DebuggedDevice* _this = reinterpret_cast< DebuggedDevice* >(object);
  (void)_this;
}
void DebuggedDevice::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DebuggedDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebuggedDevice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebuggedDevice_descriptor_;
}

const DebuggedDevice& DebuggedDevice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto();
  return *default_instance_;
}

DebuggedDevice* DebuggedDevice::default_instance_ = NULL;

DebuggedDevice* DebuggedDevice::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DebuggedDevice>(arena);
}

void DebuggedDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DebuggedDevice)
  device_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  device_id_ = 0;
}

bool DebuggedDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.DebuggedDevice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_name().data(), this->device_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.DebuggedDevice.device_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_device_id;
        break;
      }

      // optional int32 device_id = 2;
      case 2: {
        if (tag == 16) {
         parse_device_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &device_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.DebuggedDevice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.DebuggedDevice)
  return false;
#undef DO_
}

void DebuggedDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.DebuggedDevice)
  // optional string device_name = 1;
  if (this->device_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebuggedDevice.device_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->device_name(), output);
  }

  // optional int32 device_id = 2;
  if (this->device_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->device_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.DebuggedDevice)
}

::google::protobuf::uint8* DebuggedDevice::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DebuggedDevice)
  // optional string device_name = 1;
  if (this->device_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebuggedDevice.device_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_name(), target);
  }

  // optional int32 device_id = 2;
  if (this->device_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->device_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DebuggedDevice)
  return target;
}

int DebuggedDevice::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DebuggedDevice)
  int total_size = 0;

  // optional string device_name = 1;
  if (this->device_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_name());
  }

  // optional int32 device_id = 2;
  if (this->device_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->device_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebuggedDevice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.DebuggedDevice)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DebuggedDevice* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DebuggedDevice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.DebuggedDevice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.DebuggedDevice)
    MergeFrom(*source);
  }
}

void DebuggedDevice::MergeFrom(const DebuggedDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DebuggedDevice)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.device_name().size() > 0) {
    set_device_name(from.device_name());
  }
  if (from.device_id() != 0) {
    set_device_id(from.device_id());
  }
}

void DebuggedDevice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.DebuggedDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebuggedDevice::CopyFrom(const DebuggedDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DebuggedDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebuggedDevice::IsInitialized() const {

  return true;
}

void DebuggedDevice::Swap(DebuggedDevice* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DebuggedDevice temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void DebuggedDevice::UnsafeArenaSwap(DebuggedDevice* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DebuggedDevice::InternalSwap(DebuggedDevice* other) {
  device_name_.Swap(&other->device_name_);
  std::swap(device_id_, other->device_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebuggedDevice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebuggedDevice_descriptor_;
  metadata.reflection = DebuggedDevice_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DebuggedDevice

// optional string device_name = 1;
void DebuggedDevice::clear_device_name() {
  device_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& DebuggedDevice::device_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.DebuggedDevice.device_name)
  return device_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DebuggedDevice::set_device_name(const ::std::string& value) {
  
  device_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.DebuggedDevice.device_name)
}
 void DebuggedDevice::set_device_name(const char* value) {
  
  device_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.DebuggedDevice.device_name)
}
 void DebuggedDevice::set_device_name(const char* value,
    size_t size) {
  
  device_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.DebuggedDevice.device_name)
}
 ::std::string* DebuggedDevice::mutable_device_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.DebuggedDevice.device_name)
  return device_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* DebuggedDevice::release_device_name() {
  // @@protoc_insertion_point(field_release:tensorflow.DebuggedDevice.device_name)
  
  return device_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* DebuggedDevice::unsafe_arena_release_device_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.DebuggedDevice.device_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return device_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void DebuggedDevice::set_allocated_device_name(::std::string* device_name) {
  if (device_name != NULL) {
    
  } else {
    
  }
  device_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DebuggedDevice.device_name)
}
 void DebuggedDevice::unsafe_arena_set_allocated_device_name(
    ::std::string* device_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (device_name != NULL) {
    
  } else {
    
  }
  device_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      device_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.DebuggedDevice.device_name)
}

// optional int32 device_id = 2;
void DebuggedDevice::clear_device_id() {
  device_id_ = 0;
}
 ::google::protobuf::int32 DebuggedDevice::device_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.DebuggedDevice.device_id)
  return device_id_;
}
 void DebuggedDevice::set_device_id(::google::protobuf::int32 value) {
  
  device_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.DebuggedDevice.device_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void Execution::_slow_mutable_code_location() {
  code_location_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::CodeLocation >(
      GetArenaNoVirtual());
}
::tensorflow::CodeLocation* Execution::_slow_release_code_location() {
  if (code_location_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::CodeLocation* temp = new ::tensorflow::CodeLocation;
    temp->MergeFrom(*code_location_);
    code_location_ = NULL;
    return temp;
  }
}
::tensorflow::CodeLocation* Execution::unsafe_arena_release_code_location() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.Execution.code_location)
  
  ::tensorflow::CodeLocation* temp = code_location_;
  code_location_ = NULL;
  return temp;
}
void Execution::_slow_set_allocated_code_location(
    ::google::protobuf::Arena* message_arena, ::tensorflow::CodeLocation** code_location) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*code_location) == NULL) {
      message_arena->Own(*code_location);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*code_location)) {
      ::tensorflow::CodeLocation* new_code_location = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::CodeLocation >(
            message_arena);
      new_code_location->CopyFrom(**code_location);
      *code_location = new_code_location;
    }
}
void Execution::unsafe_arena_set_allocated_code_location(
    ::tensorflow::CodeLocation* code_location) {
  if (GetArenaNoVirtual() == NULL) {
    delete code_location_;
  }
  code_location_ = code_location;
  if (code_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.Execution.code_location)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Execution::kOpTypeFieldNumber;
const int Execution::kNumOutputsFieldNumber;
const int Execution::kGraphIdFieldNumber;
const int Execution::kInputTensorIdsFieldNumber;
const int Execution::kOutputTensorIdsFieldNumber;
const int Execution::kTensorDebugModeFieldNumber;
const int Execution::kTensorProtosFieldNumber;
const int Execution::kCodeLocationFieldNumber;
const int Execution::kOutputTensorDeviceIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Execution::Execution()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.Execution)
}

Execution::Execution(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  input_tensor_ids_(arena),
  output_tensor_ids_(arena),
  tensor_protos_(arena),
  output_tensor_device_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.Execution)
}

void Execution::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  code_location_ = const_cast< ::tensorflow::CodeLocation*>(&::tensorflow::CodeLocation::default_instance());
}

Execution::Execution(const Execution& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.Execution)
}

void Execution::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  op_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_outputs_ = 0;
  graph_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tensor_debug_mode_ = 0;
  code_location_ = NULL;
}

Execution::~Execution() {
  // @@protoc_insertion_point(destructor:tensorflow.Execution)
  SharedDtor();
}

void Execution::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  op_type_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  graph_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
    delete code_location_;
  }
}

void Execution::ArenaDtor(void* object) {
  Execution* _this = reinterpret_cast< Execution* >(object);
  (void)_this;
}
void Execution::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Execution::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Execution::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Execution_descriptor_;
}

const Execution& Execution::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto();
  return *default_instance_;
}

Execution* Execution::default_instance_ = NULL;

Execution* Execution::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Execution>(arena);
}

void Execution::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.Execution)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Execution, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Execution*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(num_outputs_, tensor_debug_mode_);
  op_type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  graph_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && code_location_ != NULL) delete code_location_;
  code_location_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  input_tensor_ids_.Clear();
  output_tensor_ids_.Clear();
  tensor_protos_.Clear();
  output_tensor_device_ids_.Clear();
}

bool Execution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.Execution)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string op_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_op_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->op_type().data(), this->op_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.Execution.op_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_outputs;
        break;
      }

      // optional int32 num_outputs = 2;
      case 2: {
        if (tag == 16) {
         parse_num_outputs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_outputs_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_graph_id;
        break;
      }

      // optional string graph_id = 3;
      case 3: {
        if (tag == 26) {
         parse_graph_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_graph_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->graph_id().data(), this->graph_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.Execution.graph_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_input_tensor_ids;
        break;
      }

      // repeated int64 input_tensor_ids = 4;
      case 4: {
        if (tag == 34) {
         parse_input_tensor_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_input_tensor_ids())));
        } else if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 34, input, this->mutable_input_tensor_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_output_tensor_ids;
        break;
      }

      // repeated int64 output_tensor_ids = 5;
      case 5: {
        if (tag == 42) {
         parse_output_tensor_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_output_tensor_ids())));
        } else if (tag == 40) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 42, input, this->mutable_output_tensor_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_tensor_debug_mode;
        break;
      }

      // optional .tensorflow.TensorDebugMode tensor_debug_mode = 6;
      case 6: {
        if (tag == 48) {
         parse_tensor_debug_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_tensor_debug_mode(static_cast< ::tensorflow::TensorDebugMode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_tensor_protos;
        break;
      }

      // repeated .tensorflow.TensorProto tensor_protos = 7;
      case 7: {
        if (tag == 58) {
         parse_tensor_protos:
          DO_(input->IncrementRecursionDepth());
         parse_loop_tensor_protos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tensor_protos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_tensor_protos;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(66)) goto parse_code_location;
        break;
      }

      // optional .tensorflow.CodeLocation code_location = 8;
      case 8: {
        if (tag == 66) {
         parse_code_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_code_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_output_tensor_device_ids;
        break;
      }

      // repeated int32 output_tensor_device_ids = 9;
      case 9: {
        if (tag == 74) {
         parse_output_tensor_device_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_output_tensor_device_ids())));
        } else if (tag == 72) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 74, input, this->mutable_output_tensor_device_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.Execution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.Execution)
  return false;
#undef DO_
}

void Execution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.Execution)
  // optional string op_type = 1;
  if (this->op_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->op_type().data(), this->op_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.Execution.op_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->op_type(), output);
  }

  // optional int32 num_outputs = 2;
  if (this->num_outputs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_outputs(), output);
  }

  // optional string graph_id = 3;
  if (this->graph_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->graph_id().data(), this->graph_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.Execution.graph_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->graph_id(), output);
  }

  // repeated int64 input_tensor_ids = 4;
  if (this->input_tensor_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_input_tensor_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->input_tensor_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->input_tensor_ids(i), output);
  }

  // repeated int64 output_tensor_ids = 5;
  if (this->output_tensor_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_output_tensor_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->output_tensor_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->output_tensor_ids(i), output);
  }

  // optional .tensorflow.TensorDebugMode tensor_debug_mode = 6;
  if (this->tensor_debug_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->tensor_debug_mode(), output);
  }

  // repeated .tensorflow.TensorProto tensor_protos = 7;
  for (unsigned int i = 0, n = this->tensor_protos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->tensor_protos(i), output);
  }

  // optional .tensorflow.CodeLocation code_location = 8;
  if (this->has_code_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->code_location_, output);
  }

  // repeated int32 output_tensor_device_ids = 9;
  if (this->output_tensor_device_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_output_tensor_device_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->output_tensor_device_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->output_tensor_device_ids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.Execution)
}

::google::protobuf::uint8* Execution::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.Execution)
  // optional string op_type = 1;
  if (this->op_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->op_type().data(), this->op_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.Execution.op_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->op_type(), target);
  }

  // optional int32 num_outputs = 2;
  if (this->num_outputs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_outputs(), target);
  }

  // optional string graph_id = 3;
  if (this->graph_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->graph_id().data(), this->graph_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.Execution.graph_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->graph_id(), target);
  }

  // repeated int64 input_tensor_ids = 4;
  if (this->input_tensor_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _input_tensor_ids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->input_tensor_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->input_tensor_ids(i), target);
  }

  // repeated int64 output_tensor_ids = 5;
  if (this->output_tensor_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _output_tensor_ids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->output_tensor_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->output_tensor_ids(i), target);
  }

  // optional .tensorflow.TensorDebugMode tensor_debug_mode = 6;
  if (this->tensor_debug_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->tensor_debug_mode(), target);
  }

  // repeated .tensorflow.TensorProto tensor_protos = 7;
  for (unsigned int i = 0, n = this->tensor_protos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->tensor_protos(i), false, target);
  }

  // optional .tensorflow.CodeLocation code_location = 8;
  if (this->has_code_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->code_location_, false, target);
  }

  // repeated int32 output_tensor_device_ids = 9;
  if (this->output_tensor_device_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _output_tensor_device_ids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->output_tensor_device_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->output_tensor_device_ids(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.Execution)
  return target;
}

int Execution::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.Execution)
  int total_size = 0;

  // optional string op_type = 1;
  if (this->op_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->op_type());
  }

  // optional int32 num_outputs = 2;
  if (this->num_outputs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_outputs());
  }

  // optional string graph_id = 3;
  if (this->graph_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->graph_id());
  }

  // optional .tensorflow.TensorDebugMode tensor_debug_mode = 6;
  if (this->tensor_debug_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tensor_debug_mode());
  }

  // optional .tensorflow.CodeLocation code_location = 8;
  if (this->has_code_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->code_location_);
  }

  // repeated int64 input_tensor_ids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->input_tensor_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->input_tensor_ids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _input_tensor_ids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int64 output_tensor_ids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->output_tensor_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->output_tensor_ids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _output_tensor_ids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .tensorflow.TensorProto tensor_protos = 7;
  total_size += 1 * this->tensor_protos_size();
  for (int i = 0; i < this->tensor_protos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tensor_protos(i));
  }

  // repeated int32 output_tensor_device_ids = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->output_tensor_device_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->output_tensor_device_ids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _output_tensor_device_ids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Execution::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.Execution)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Execution* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Execution>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.Execution)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.Execution)
    MergeFrom(*source);
  }
}

void Execution::MergeFrom(const Execution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.Execution)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  input_tensor_ids_.MergeFrom(from.input_tensor_ids_);
  output_tensor_ids_.MergeFrom(from.output_tensor_ids_);
  tensor_protos_.MergeFrom(from.tensor_protos_);
  output_tensor_device_ids_.MergeFrom(from.output_tensor_device_ids_);
  if (from.op_type().size() > 0) {
    set_op_type(from.op_type());
  }
  if (from.num_outputs() != 0) {
    set_num_outputs(from.num_outputs());
  }
  if (from.graph_id().size() > 0) {
    set_graph_id(from.graph_id());
  }
  if (from.tensor_debug_mode() != 0) {
    set_tensor_debug_mode(from.tensor_debug_mode());
  }
  if (from.has_code_location()) {
    mutable_code_location()->::tensorflow::CodeLocation::MergeFrom(from.code_location());
  }
}

void Execution::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.Execution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Execution::CopyFrom(const Execution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.Execution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Execution::IsInitialized() const {

  return true;
}

void Execution::Swap(Execution* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Execution temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void Execution::UnsafeArenaSwap(Execution* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Execution::InternalSwap(Execution* other) {
  op_type_.Swap(&other->op_type_);
  std::swap(num_outputs_, other->num_outputs_);
  graph_id_.Swap(&other->graph_id_);
  input_tensor_ids_.UnsafeArenaSwap(&other->input_tensor_ids_);
  output_tensor_ids_.UnsafeArenaSwap(&other->output_tensor_ids_);
  std::swap(tensor_debug_mode_, other->tensor_debug_mode_);
  tensor_protos_.UnsafeArenaSwap(&other->tensor_protos_);
  std::swap(code_location_, other->code_location_);
  output_tensor_device_ids_.UnsafeArenaSwap(&other->output_tensor_device_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Execution::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Execution_descriptor_;
  metadata.reflection = Execution_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Execution

// optional string op_type = 1;
void Execution::clear_op_type() {
  op_type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& Execution::op_type() const {
  // @@protoc_insertion_point(field_get:tensorflow.Execution.op_type)
  return op_type_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Execution::set_op_type(const ::std::string& value) {
  
  op_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.Execution.op_type)
}
 void Execution::set_op_type(const char* value) {
  
  op_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.Execution.op_type)
}
 void Execution::set_op_type(const char* value,
    size_t size) {
  
  op_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.Execution.op_type)
}
 ::std::string* Execution::mutable_op_type() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.Execution.op_type)
  return op_type_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* Execution::release_op_type() {
  // @@protoc_insertion_point(field_release:tensorflow.Execution.op_type)
  
  return op_type_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* Execution::unsafe_arena_release_op_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.Execution.op_type)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return op_type_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void Execution::set_allocated_op_type(::std::string* op_type) {
  if (op_type != NULL) {
    
  } else {
    
  }
  op_type_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), op_type,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.Execution.op_type)
}
 void Execution::unsafe_arena_set_allocated_op_type(
    ::std::string* op_type) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (op_type != NULL) {
    
  } else {
    
  }
  op_type_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      op_type, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.Execution.op_type)
}

// optional int32 num_outputs = 2;
void Execution::clear_num_outputs() {
  num_outputs_ = 0;
}
 ::google::protobuf::int32 Execution::num_outputs() const {
  // @@protoc_insertion_point(field_get:tensorflow.Execution.num_outputs)
  return num_outputs_;
}
 void Execution::set_num_outputs(::google::protobuf::int32 value) {
  
  num_outputs_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.Execution.num_outputs)
}

// optional string graph_id = 3;
void Execution::clear_graph_id() {
  graph_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& Execution::graph_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.Execution.graph_id)
  return graph_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Execution::set_graph_id(const ::std::string& value) {
  
  graph_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.Execution.graph_id)
}
 void Execution::set_graph_id(const char* value) {
  
  graph_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.Execution.graph_id)
}
 void Execution::set_graph_id(const char* value,
    size_t size) {
  
  graph_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.Execution.graph_id)
}
 ::std::string* Execution::mutable_graph_id() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.Execution.graph_id)
  return graph_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* Execution::release_graph_id() {
  // @@protoc_insertion_point(field_release:tensorflow.Execution.graph_id)
  
  return graph_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* Execution::unsafe_arena_release_graph_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.Execution.graph_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return graph_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void Execution::set_allocated_graph_id(::std::string* graph_id) {
  if (graph_id != NULL) {
    
  } else {
    
  }
  graph_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), graph_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.Execution.graph_id)
}
 void Execution::unsafe_arena_set_allocated_graph_id(
    ::std::string* graph_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (graph_id != NULL) {
    
  } else {
    
  }
  graph_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      graph_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.Execution.graph_id)
}

// repeated int64 input_tensor_ids = 4;
int Execution::input_tensor_ids_size() const {
  return input_tensor_ids_.size();
}
void Execution::clear_input_tensor_ids() {
  input_tensor_ids_.Clear();
}
 ::google::protobuf::int64 Execution::input_tensor_ids(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.Execution.input_tensor_ids)
  return input_tensor_ids_.Get(index);
}
 void Execution::set_input_tensor_ids(int index, ::google::protobuf::int64 value) {
  input_tensor_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.Execution.input_tensor_ids)
}
 void Execution::add_input_tensor_ids(::google::protobuf::int64 value) {
  input_tensor_ids_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.Execution.input_tensor_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Execution::input_tensor_ids() const {
  // @@protoc_insertion_point(field_list:tensorflow.Execution.input_tensor_ids)
  return input_tensor_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Execution::mutable_input_tensor_ids() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.Execution.input_tensor_ids)
  return &input_tensor_ids_;
}

// repeated int64 output_tensor_ids = 5;
int Execution::output_tensor_ids_size() const {
  return output_tensor_ids_.size();
}
void Execution::clear_output_tensor_ids() {
  output_tensor_ids_.Clear();
}
 ::google::protobuf::int64 Execution::output_tensor_ids(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.Execution.output_tensor_ids)
  return output_tensor_ids_.Get(index);
}
 void Execution::set_output_tensor_ids(int index, ::google::protobuf::int64 value) {
  output_tensor_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.Execution.output_tensor_ids)
}
 void Execution::add_output_tensor_ids(::google::protobuf::int64 value) {
  output_tensor_ids_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.Execution.output_tensor_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Execution::output_tensor_ids() const {
  // @@protoc_insertion_point(field_list:tensorflow.Execution.output_tensor_ids)
  return output_tensor_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Execution::mutable_output_tensor_ids() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.Execution.output_tensor_ids)
  return &output_tensor_ids_;
}

// optional .tensorflow.TensorDebugMode tensor_debug_mode = 6;
void Execution::clear_tensor_debug_mode() {
  tensor_debug_mode_ = 0;
}
 ::tensorflow::TensorDebugMode Execution::tensor_debug_mode() const {
  // @@protoc_insertion_point(field_get:tensorflow.Execution.tensor_debug_mode)
  return static_cast< ::tensorflow::TensorDebugMode >(tensor_debug_mode_);
}
 void Execution::set_tensor_debug_mode(::tensorflow::TensorDebugMode value) {
  
  tensor_debug_mode_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.Execution.tensor_debug_mode)
}

// repeated .tensorflow.TensorProto tensor_protos = 7;
int Execution::tensor_protos_size() const {
  return tensor_protos_.size();
}
void Execution::clear_tensor_protos() {
  tensor_protos_.Clear();
}
const ::tensorflow::TensorProto& Execution::tensor_protos(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.Execution.tensor_protos)
  return tensor_protos_.Get(index);
}
::tensorflow::TensorProto* Execution::mutable_tensor_protos(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.Execution.tensor_protos)
  return tensor_protos_.Mutable(index);
}
::tensorflow::TensorProto* Execution::add_tensor_protos() {
  // @@protoc_insertion_point(field_add:tensorflow.Execution.tensor_protos)
  return tensor_protos_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::TensorProto >*
Execution::mutable_tensor_protos() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.Execution.tensor_protos)
  return &tensor_protos_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorProto >&
Execution::tensor_protos() const {
  // @@protoc_insertion_point(field_list:tensorflow.Execution.tensor_protos)
  return tensor_protos_;
}

// optional .tensorflow.CodeLocation code_location = 8;
bool Execution::has_code_location() const {
  return !_is_default_instance_ && code_location_ != NULL;
}
void Execution::clear_code_location() {
  if (GetArenaNoVirtual() == NULL && code_location_ != NULL) delete code_location_;
  code_location_ = NULL;
}
const ::tensorflow::CodeLocation& Execution::code_location() const {
  // @@protoc_insertion_point(field_get:tensorflow.Execution.code_location)
  return code_location_ != NULL ? *code_location_ : *default_instance_->code_location_;
}
::tensorflow::CodeLocation* Execution::mutable_code_location() {
  
  if (code_location_ == NULL) {
    _slow_mutable_code_location();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.Execution.code_location)
  return code_location_;
}
::tensorflow::CodeLocation* Execution::release_code_location() {
  // @@protoc_insertion_point(field_release:tensorflow.Execution.code_location)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_code_location();
  } else {
    ::tensorflow::CodeLocation* temp = code_location_;
    code_location_ = NULL;
    return temp;
  }
}
 void Execution::set_allocated_code_location(::tensorflow::CodeLocation* code_location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete code_location_;
  }
  if (code_location != NULL) {
    _slow_set_allocated_code_location(message_arena, &code_location);
  }
  code_location_ = code_location;
  if (code_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.Execution.code_location)
}

// repeated int32 output_tensor_device_ids = 9;
int Execution::output_tensor_device_ids_size() const {
  return output_tensor_device_ids_.size();
}
void Execution::clear_output_tensor_device_ids() {
  output_tensor_device_ids_.Clear();
}
 ::google::protobuf::int32 Execution::output_tensor_device_ids(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.Execution.output_tensor_device_ids)
  return output_tensor_device_ids_.Get(index);
}
 void Execution::set_output_tensor_device_ids(int index, ::google::protobuf::int32 value) {
  output_tensor_device_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.Execution.output_tensor_device_ids)
}
 void Execution::add_output_tensor_device_ids(::google::protobuf::int32 value) {
  output_tensor_device_ids_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.Execution.output_tensor_device_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Execution::output_tensor_device_ids() const {
  // @@protoc_insertion_point(field_list:tensorflow.Execution.output_tensor_device_ids)
  return output_tensor_device_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Execution::mutable_output_tensor_device_ids() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.Execution.output_tensor_device_ids)
  return &output_tensor_device_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void GraphExecutionTrace::_slow_mutable_tensor_proto() {
  tensor_proto_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::TensorProto >(
      GetArenaNoVirtual());
}
::tensorflow::TensorProto* GraphExecutionTrace::_slow_release_tensor_proto() {
  if (tensor_proto_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::TensorProto* temp = new ::tensorflow::TensorProto;
    temp->MergeFrom(*tensor_proto_);
    tensor_proto_ = NULL;
    return temp;
  }
}
::tensorflow::TensorProto* GraphExecutionTrace::unsafe_arena_release_tensor_proto() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.GraphExecutionTrace.tensor_proto)
  
  ::tensorflow::TensorProto* temp = tensor_proto_;
  tensor_proto_ = NULL;
  return temp;
}
void GraphExecutionTrace::_slow_set_allocated_tensor_proto(
    ::google::protobuf::Arena* message_arena, ::tensorflow::TensorProto** tensor_proto) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*tensor_proto) == NULL) {
      message_arena->Own(*tensor_proto);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*tensor_proto)) {
      ::tensorflow::TensorProto* new_tensor_proto = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::TensorProto >(
            message_arena);
      new_tensor_proto->CopyFrom(**tensor_proto);
      *tensor_proto = new_tensor_proto;
    }
}
void GraphExecutionTrace::unsafe_arena_set_allocated_tensor_proto(
    ::tensorflow::TensorProto* tensor_proto) {
  if (GetArenaNoVirtual() == NULL) {
    delete tensor_proto_;
  }
  tensor_proto_ = tensor_proto;
  if (tensor_proto) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GraphExecutionTrace.tensor_proto)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GraphExecutionTrace::kTfdbgContextIdFieldNumber;
const int GraphExecutionTrace::kOpNameFieldNumber;
const int GraphExecutionTrace::kOutputSlotFieldNumber;
const int GraphExecutionTrace::kTensorDebugModeFieldNumber;
const int GraphExecutionTrace::kTensorProtoFieldNumber;
const int GraphExecutionTrace::kDeviceNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GraphExecutionTrace::GraphExecutionTrace()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GraphExecutionTrace)
}

GraphExecutionTrace::GraphExecutionTrace(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphExecutionTrace)
}

void GraphExecutionTrace::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  tensor_proto_ = const_cast< ::tensorflow::TensorProto*>(&::tensorflow::TensorProto::default_instance());
}

GraphExecutionTrace::GraphExecutionTrace(const GraphExecutionTrace& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphExecutionTrace)
}

void GraphExecutionTrace::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tfdbg_context_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  op_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_slot_ = 0;
  tensor_debug_mode_ = 0;
  tensor_proto_ = NULL;
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GraphExecutionTrace::~GraphExecutionTrace() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphExecutionTrace)
  SharedDtor();
}

void GraphExecutionTrace::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  tfdbg_context_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  op_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  device_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
    delete tensor_proto_;
  }
}

void GraphExecutionTrace::ArenaDtor(void* object) {
  GraphExecutionTrace* _this = reinterpret_cast< GraphExecutionTrace* >(object);
  (void)_this;
}
void GraphExecutionTrace::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GraphExecutionTrace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GraphExecutionTrace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GraphExecutionTrace_descriptor_;
}

const GraphExecutionTrace& GraphExecutionTrace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto();
  return *default_instance_;
}

GraphExecutionTrace* GraphExecutionTrace::default_instance_ = NULL;

GraphExecutionTrace* GraphExecutionTrace::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GraphExecutionTrace>(arena);
}

void GraphExecutionTrace::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphExecutionTrace)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GraphExecutionTrace, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GraphExecutionTrace*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(output_slot_, tensor_debug_mode_);
  tfdbg_context_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  op_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && tensor_proto_ != NULL) delete tensor_proto_;
  tensor_proto_ = NULL;
  device_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());

#undef ZR_HELPER_
#undef ZR_

}

bool GraphExecutionTrace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GraphExecutionTrace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tfdbg_context_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tfdbg_context_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tfdbg_context_id().data(), this->tfdbg_context_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.GraphExecutionTrace.tfdbg_context_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_op_name;
        break;
      }

      // optional string op_name = 2;
      case 2: {
        if (tag == 18) {
         parse_op_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_op_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->op_name().data(), this->op_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.GraphExecutionTrace.op_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_output_slot;
        break;
      }

      // optional int32 output_slot = 3;
      case 3: {
        if (tag == 24) {
         parse_output_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &output_slot_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_tensor_debug_mode;
        break;
      }

      // optional .tensorflow.TensorDebugMode tensor_debug_mode = 4;
      case 4: {
        if (tag == 32) {
         parse_tensor_debug_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_tensor_debug_mode(static_cast< ::tensorflow::TensorDebugMode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_tensor_proto;
        break;
      }

      // optional .tensorflow.TensorProto tensor_proto = 5;
      case 5: {
        if (tag == 42) {
         parse_tensor_proto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tensor_proto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_device_name;
        break;
      }

      // optional string device_name = 6;
      case 6: {
        if (tag == 50) {
         parse_device_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_name().data(), this->device_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.GraphExecutionTrace.device_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GraphExecutionTrace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GraphExecutionTrace)
  return false;
#undef DO_
}

void GraphExecutionTrace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GraphExecutionTrace)
  // optional string tfdbg_context_id = 1;
  if (this->tfdbg_context_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tfdbg_context_id().data(), this->tfdbg_context_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphExecutionTrace.tfdbg_context_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tfdbg_context_id(), output);
  }

  // optional string op_name = 2;
  if (this->op_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->op_name().data(), this->op_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphExecutionTrace.op_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->op_name(), output);
  }

  // optional int32 output_slot = 3;
  if (this->output_slot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->output_slot(), output);
  }

  // optional .tensorflow.TensorDebugMode tensor_debug_mode = 4;
  if (this->tensor_debug_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->tensor_debug_mode(), output);
  }

  // optional .tensorflow.TensorProto tensor_proto = 5;
  if (this->has_tensor_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->tensor_proto_, output);
  }

  // optional string device_name = 6;
  if (this->device_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphExecutionTrace.device_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->device_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.GraphExecutionTrace)
}

::google::protobuf::uint8* GraphExecutionTrace::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphExecutionTrace)
  // optional string tfdbg_context_id = 1;
  if (this->tfdbg_context_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tfdbg_context_id().data(), this->tfdbg_context_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphExecutionTrace.tfdbg_context_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tfdbg_context_id(), target);
  }

  // optional string op_name = 2;
  if (this->op_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->op_name().data(), this->op_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphExecutionTrace.op_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->op_name(), target);
  }

  // optional int32 output_slot = 3;
  if (this->output_slot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->output_slot(), target);
  }

  // optional .tensorflow.TensorDebugMode tensor_debug_mode = 4;
  if (this->tensor_debug_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->tensor_debug_mode(), target);
  }

  // optional .tensorflow.TensorProto tensor_proto = 5;
  if (this->has_tensor_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->tensor_proto_, false, target);
  }

  // optional string device_name = 6;
  if (this->device_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphExecutionTrace.device_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->device_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphExecutionTrace)
  return target;
}

int GraphExecutionTrace::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphExecutionTrace)
  int total_size = 0;

  // optional string tfdbg_context_id = 1;
  if (this->tfdbg_context_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tfdbg_context_id());
  }

  // optional string op_name = 2;
  if (this->op_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->op_name());
  }

  // optional int32 output_slot = 3;
  if (this->output_slot() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->output_slot());
  }

  // optional .tensorflow.TensorDebugMode tensor_debug_mode = 4;
  if (this->tensor_debug_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tensor_debug_mode());
  }

  // optional .tensorflow.TensorProto tensor_proto = 5;
  if (this->has_tensor_proto()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tensor_proto_);
  }

  // optional string device_name = 6;
  if (this->device_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GraphExecutionTrace::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GraphExecutionTrace)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GraphExecutionTrace* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GraphExecutionTrace>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GraphExecutionTrace)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GraphExecutionTrace)
    MergeFrom(*source);
  }
}

void GraphExecutionTrace::MergeFrom(const GraphExecutionTrace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphExecutionTrace)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.tfdbg_context_id().size() > 0) {
    set_tfdbg_context_id(from.tfdbg_context_id());
  }
  if (from.op_name().size() > 0) {
    set_op_name(from.op_name());
  }
  if (from.output_slot() != 0) {
    set_output_slot(from.output_slot());
  }
  if (from.tensor_debug_mode() != 0) {
    set_tensor_debug_mode(from.tensor_debug_mode());
  }
  if (from.has_tensor_proto()) {
    mutable_tensor_proto()->::tensorflow::TensorProto::MergeFrom(from.tensor_proto());
  }
  if (from.device_name().size() > 0) {
    set_device_name(from.device_name());
  }
}

void GraphExecutionTrace::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GraphExecutionTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphExecutionTrace::CopyFrom(const GraphExecutionTrace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphExecutionTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphExecutionTrace::IsInitialized() const {

  return true;
}

void GraphExecutionTrace::Swap(GraphExecutionTrace* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GraphExecutionTrace temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void GraphExecutionTrace::UnsafeArenaSwap(GraphExecutionTrace* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GraphExecutionTrace::InternalSwap(GraphExecutionTrace* other) {
  tfdbg_context_id_.Swap(&other->tfdbg_context_id_);
  op_name_.Swap(&other->op_name_);
  std::swap(output_slot_, other->output_slot_);
  std::swap(tensor_debug_mode_, other->tensor_debug_mode_);
  std::swap(tensor_proto_, other->tensor_proto_);
  device_name_.Swap(&other->device_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GraphExecutionTrace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GraphExecutionTrace_descriptor_;
  metadata.reflection = GraphExecutionTrace_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GraphExecutionTrace

// optional string tfdbg_context_id = 1;
void GraphExecutionTrace::clear_tfdbg_context_id() {
  tfdbg_context_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& GraphExecutionTrace::tfdbg_context_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphExecutionTrace.tfdbg_context_id)
  return tfdbg_context_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GraphExecutionTrace::set_tfdbg_context_id(const ::std::string& value) {
  
  tfdbg_context_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.GraphExecutionTrace.tfdbg_context_id)
}
 void GraphExecutionTrace::set_tfdbg_context_id(const char* value) {
  
  tfdbg_context_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.GraphExecutionTrace.tfdbg_context_id)
}
 void GraphExecutionTrace::set_tfdbg_context_id(const char* value,
    size_t size) {
  
  tfdbg_context_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.GraphExecutionTrace.tfdbg_context_id)
}
 ::std::string* GraphExecutionTrace::mutable_tfdbg_context_id() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphExecutionTrace.tfdbg_context_id)
  return tfdbg_context_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* GraphExecutionTrace::release_tfdbg_context_id() {
  // @@protoc_insertion_point(field_release:tensorflow.GraphExecutionTrace.tfdbg_context_id)
  
  return tfdbg_context_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* GraphExecutionTrace::unsafe_arena_release_tfdbg_context_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.GraphExecutionTrace.tfdbg_context_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return tfdbg_context_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void GraphExecutionTrace::set_allocated_tfdbg_context_id(::std::string* tfdbg_context_id) {
  if (tfdbg_context_id != NULL) {
    
  } else {
    
  }
  tfdbg_context_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tfdbg_context_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GraphExecutionTrace.tfdbg_context_id)
}
 void GraphExecutionTrace::unsafe_arena_set_allocated_tfdbg_context_id(
    ::std::string* tfdbg_context_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (tfdbg_context_id != NULL) {
    
  } else {
    
  }
  tfdbg_context_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      tfdbg_context_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GraphExecutionTrace.tfdbg_context_id)
}

// optional string op_name = 2;
void GraphExecutionTrace::clear_op_name() {
  op_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& GraphExecutionTrace::op_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphExecutionTrace.op_name)
  return op_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GraphExecutionTrace::set_op_name(const ::std::string& value) {
  
  op_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.GraphExecutionTrace.op_name)
}
 void GraphExecutionTrace::set_op_name(const char* value) {
  
  op_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.GraphExecutionTrace.op_name)
}
 void GraphExecutionTrace::set_op_name(const char* value,
    size_t size) {
  
  op_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.GraphExecutionTrace.op_name)
}
 ::std::string* GraphExecutionTrace::mutable_op_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphExecutionTrace.op_name)
  return op_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* GraphExecutionTrace::release_op_name() {
  // @@protoc_insertion_point(field_release:tensorflow.GraphExecutionTrace.op_name)
  
  return op_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* GraphExecutionTrace::unsafe_arena_release_op_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.GraphExecutionTrace.op_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return op_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void GraphExecutionTrace::set_allocated_op_name(::std::string* op_name) {
  if (op_name != NULL) {
    
  } else {
    
  }
  op_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), op_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GraphExecutionTrace.op_name)
}
 void GraphExecutionTrace::unsafe_arena_set_allocated_op_name(
    ::std::string* op_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (op_name != NULL) {
    
  } else {
    
  }
  op_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      op_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GraphExecutionTrace.op_name)
}

// optional int32 output_slot = 3;
void GraphExecutionTrace::clear_output_slot() {
  output_slot_ = 0;
}
 ::google::protobuf::int32 GraphExecutionTrace::output_slot() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphExecutionTrace.output_slot)
  return output_slot_;
}
 void GraphExecutionTrace::set_output_slot(::google::protobuf::int32 value) {
  
  output_slot_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphExecutionTrace.output_slot)
}

// optional .tensorflow.TensorDebugMode tensor_debug_mode = 4;
void GraphExecutionTrace::clear_tensor_debug_mode() {
  tensor_debug_mode_ = 0;
}
 ::tensorflow::TensorDebugMode GraphExecutionTrace::tensor_debug_mode() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphExecutionTrace.tensor_debug_mode)
  return static_cast< ::tensorflow::TensorDebugMode >(tensor_debug_mode_);
}
 void GraphExecutionTrace::set_tensor_debug_mode(::tensorflow::TensorDebugMode value) {
  
  tensor_debug_mode_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphExecutionTrace.tensor_debug_mode)
}

// optional .tensorflow.TensorProto tensor_proto = 5;
bool GraphExecutionTrace::has_tensor_proto() const {
  return !_is_default_instance_ && tensor_proto_ != NULL;
}
void GraphExecutionTrace::clear_tensor_proto() {
  if (GetArenaNoVirtual() == NULL && tensor_proto_ != NULL) delete tensor_proto_;
  tensor_proto_ = NULL;
}
const ::tensorflow::TensorProto& GraphExecutionTrace::tensor_proto() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphExecutionTrace.tensor_proto)
  return tensor_proto_ != NULL ? *tensor_proto_ : *default_instance_->tensor_proto_;
}
::tensorflow::TensorProto* GraphExecutionTrace::mutable_tensor_proto() {
  
  if (tensor_proto_ == NULL) {
    _slow_mutable_tensor_proto();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphExecutionTrace.tensor_proto)
  return tensor_proto_;
}
::tensorflow::TensorProto* GraphExecutionTrace::release_tensor_proto() {
  // @@protoc_insertion_point(field_release:tensorflow.GraphExecutionTrace.tensor_proto)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_tensor_proto();
  } else {
    ::tensorflow::TensorProto* temp = tensor_proto_;
    tensor_proto_ = NULL;
    return temp;
  }
}
 void GraphExecutionTrace::set_allocated_tensor_proto(::tensorflow::TensorProto* tensor_proto) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tensor_proto_;
  }
  if (tensor_proto != NULL) {
    _slow_set_allocated_tensor_proto(message_arena, &tensor_proto);
  }
  tensor_proto_ = tensor_proto;
  if (tensor_proto) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GraphExecutionTrace.tensor_proto)
}

// optional string device_name = 6;
void GraphExecutionTrace::clear_device_name() {
  device_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& GraphExecutionTrace::device_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphExecutionTrace.device_name)
  return device_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GraphExecutionTrace::set_device_name(const ::std::string& value) {
  
  device_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.GraphExecutionTrace.device_name)
}
 void GraphExecutionTrace::set_device_name(const char* value) {
  
  device_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.GraphExecutionTrace.device_name)
}
 void GraphExecutionTrace::set_device_name(const char* value,
    size_t size) {
  
  device_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.GraphExecutionTrace.device_name)
}
 ::std::string* GraphExecutionTrace::mutable_device_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphExecutionTrace.device_name)
  return device_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* GraphExecutionTrace::release_device_name() {
  // @@protoc_insertion_point(field_release:tensorflow.GraphExecutionTrace.device_name)
  
  return device_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* GraphExecutionTrace::unsafe_arena_release_device_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.GraphExecutionTrace.device_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return device_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void GraphExecutionTrace::set_allocated_device_name(::std::string* device_name) {
  if (device_name != NULL) {
    
  } else {
    
  }
  device_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GraphExecutionTrace.device_name)
}
 void GraphExecutionTrace::unsafe_arena_set_allocated_device_name(
    ::std::string* device_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (device_name != NULL) {
    
  } else {
    
  }
  device_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      device_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GraphExecutionTrace.device_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
