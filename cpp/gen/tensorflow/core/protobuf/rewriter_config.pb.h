// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/rewriter_config.proto

#ifndef PROTOBUF_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto__INCLUDED
#define PROTOBUF_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow/core/framework/attr_value.pb.h"
#include "tensorflow/core/protobuf/verifier_config.pb.h"
// @@protoc_insertion_point(includes)

namespace tensorflow {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto();
void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto();
void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto();

class AutoParallelOptions;
class RewriterConfig;
class RewriterConfig_CustomGraphOptimizer;
class ScopedAllocatorOptions;

enum RewriterConfig_Toggle {
  RewriterConfig_Toggle_DEFAULT = 0,
  RewriterConfig_Toggle_ON = 1,
  RewriterConfig_Toggle_OFF = 2,
  RewriterConfig_Toggle_AGGRESSIVE = 3,
  RewriterConfig_Toggle_RewriterConfig_Toggle_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RewriterConfig_Toggle_RewriterConfig_Toggle_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RewriterConfig_Toggle_IsValid(int value);
const RewriterConfig_Toggle RewriterConfig_Toggle_Toggle_MIN = RewriterConfig_Toggle_DEFAULT;
const RewriterConfig_Toggle RewriterConfig_Toggle_Toggle_MAX = RewriterConfig_Toggle_AGGRESSIVE;
const int RewriterConfig_Toggle_Toggle_ARRAYSIZE = RewriterConfig_Toggle_Toggle_MAX + 1;

const ::google::protobuf::EnumDescriptor* RewriterConfig_Toggle_descriptor();
inline const ::std::string& RewriterConfig_Toggle_Name(RewriterConfig_Toggle value) {
  return ::google::protobuf::internal::NameOfEnum(
    RewriterConfig_Toggle_descriptor(), value);
}
inline bool RewriterConfig_Toggle_Parse(
    const ::std::string& name, RewriterConfig_Toggle* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RewriterConfig_Toggle>(
    RewriterConfig_Toggle_descriptor(), name, value);
}
enum RewriterConfig_NumIterationsType {
  RewriterConfig_NumIterationsType_DEFAULT_NUM_ITERS = 0,
  RewriterConfig_NumIterationsType_ONE = 1,
  RewriterConfig_NumIterationsType_TWO = 2,
  RewriterConfig_NumIterationsType_RewriterConfig_NumIterationsType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RewriterConfig_NumIterationsType_RewriterConfig_NumIterationsType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RewriterConfig_NumIterationsType_IsValid(int value);
const RewriterConfig_NumIterationsType RewriterConfig_NumIterationsType_NumIterationsType_MIN = RewriterConfig_NumIterationsType_DEFAULT_NUM_ITERS;
const RewriterConfig_NumIterationsType RewriterConfig_NumIterationsType_NumIterationsType_MAX = RewriterConfig_NumIterationsType_TWO;
const int RewriterConfig_NumIterationsType_NumIterationsType_ARRAYSIZE = RewriterConfig_NumIterationsType_NumIterationsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RewriterConfig_NumIterationsType_descriptor();
inline const ::std::string& RewriterConfig_NumIterationsType_Name(RewriterConfig_NumIterationsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RewriterConfig_NumIterationsType_descriptor(), value);
}
inline bool RewriterConfig_NumIterationsType_Parse(
    const ::std::string& name, RewriterConfig_NumIterationsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RewriterConfig_NumIterationsType>(
    RewriterConfig_NumIterationsType_descriptor(), name, value);
}
enum RewriterConfig_MemOptType {
  RewriterConfig_MemOptType_DEFAULT_MEM_OPT = 0,
  RewriterConfig_MemOptType_NO_MEM_OPT = 1,
  RewriterConfig_MemOptType_MANUAL = 2,
  RewriterConfig_MemOptType_SWAPPING_HEURISTICS = 4,
  RewriterConfig_MemOptType_RECOMPUTATION_HEURISTICS = 5,
  RewriterConfig_MemOptType_SCHEDULING_HEURISTICS = 6,
  RewriterConfig_MemOptType_HEURISTICS = 3,
  RewriterConfig_MemOptType_RewriterConfig_MemOptType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RewriterConfig_MemOptType_RewriterConfig_MemOptType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RewriterConfig_MemOptType_IsValid(int value);
const RewriterConfig_MemOptType RewriterConfig_MemOptType_MemOptType_MIN = RewriterConfig_MemOptType_DEFAULT_MEM_OPT;
const RewriterConfig_MemOptType RewriterConfig_MemOptType_MemOptType_MAX = RewriterConfig_MemOptType_SCHEDULING_HEURISTICS;
const int RewriterConfig_MemOptType_MemOptType_ARRAYSIZE = RewriterConfig_MemOptType_MemOptType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RewriterConfig_MemOptType_descriptor();
inline const ::std::string& RewriterConfig_MemOptType_Name(RewriterConfig_MemOptType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RewriterConfig_MemOptType_descriptor(), value);
}
inline bool RewriterConfig_MemOptType_Parse(
    const ::std::string& name, RewriterConfig_MemOptType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RewriterConfig_MemOptType>(
    RewriterConfig_MemOptType_descriptor(), name, value);
}
// ===================================================================

class AutoParallelOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.AutoParallelOptions) */ {
 public:
  AutoParallelOptions();
  virtual ~AutoParallelOptions();

  AutoParallelOptions(const AutoParallelOptions& from);

  inline AutoParallelOptions& operator=(const AutoParallelOptions& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const AutoParallelOptions& default_instance();

  void UnsafeArenaSwap(AutoParallelOptions* other);
  void Swap(AutoParallelOptions* other);

  // implements Message ----------------------------------------------

  inline AutoParallelOptions* New() const { return New(NULL); }

  AutoParallelOptions* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AutoParallelOptions& from);
  void MergeFrom(const AutoParallelOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AutoParallelOptions* other);
  protected:
  explicit AutoParallelOptions(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool enable = 1;
  void clear_enable();
  static const int kEnableFieldNumber = 1;
  bool enable() const;
  void set_enable(bool value);

  // optional int32 num_replicas = 2;
  void clear_num_replicas();
  static const int kNumReplicasFieldNumber = 2;
  ::google::protobuf::int32 num_replicas() const;
  void set_num_replicas(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tensorflow.AutoParallelOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  bool enable_;
  ::google::protobuf::int32 num_replicas_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static AutoParallelOptions* default_instance_;
};
// -------------------------------------------------------------------

class ScopedAllocatorOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.ScopedAllocatorOptions) */ {
 public:
  ScopedAllocatorOptions();
  virtual ~ScopedAllocatorOptions();

  ScopedAllocatorOptions(const ScopedAllocatorOptions& from);

  inline ScopedAllocatorOptions& operator=(const ScopedAllocatorOptions& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScopedAllocatorOptions& default_instance();

  void UnsafeArenaSwap(ScopedAllocatorOptions* other);
  void Swap(ScopedAllocatorOptions* other);

  // implements Message ----------------------------------------------

  inline ScopedAllocatorOptions* New() const { return New(NULL); }

  ScopedAllocatorOptions* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScopedAllocatorOptions& from);
  void MergeFrom(const ScopedAllocatorOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ScopedAllocatorOptions* other);
  protected:
  explicit ScopedAllocatorOptions(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string enable_op = 1;
  int enable_op_size() const;
  void clear_enable_op();
  static const int kEnableOpFieldNumber = 1;
  const ::std::string& enable_op(int index) const;
  ::std::string* mutable_enable_op(int index);
  void set_enable_op(int index, const ::std::string& value);
  void set_enable_op(int index, const char* value);
  void set_enable_op(int index, const char* value, size_t size);
  ::std::string* add_enable_op();
  void add_enable_op(const ::std::string& value);
  void add_enable_op(const char* value);
  void add_enable_op(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& enable_op() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_enable_op();

  // @@protoc_insertion_point(class_scope:tensorflow.ScopedAllocatorOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> enable_op_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static ScopedAllocatorOptions* default_instance_;
};
// -------------------------------------------------------------------

class RewriterConfig_CustomGraphOptimizer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.RewriterConfig.CustomGraphOptimizer) */ {
 public:
  RewriterConfig_CustomGraphOptimizer();
  virtual ~RewriterConfig_CustomGraphOptimizer();

  RewriterConfig_CustomGraphOptimizer(const RewriterConfig_CustomGraphOptimizer& from);

  inline RewriterConfig_CustomGraphOptimizer& operator=(const RewriterConfig_CustomGraphOptimizer& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const RewriterConfig_CustomGraphOptimizer& default_instance();

  void UnsafeArenaSwap(RewriterConfig_CustomGraphOptimizer* other);
  void Swap(RewriterConfig_CustomGraphOptimizer* other);

  // implements Message ----------------------------------------------

  inline RewriterConfig_CustomGraphOptimizer* New() const { return New(NULL); }

  RewriterConfig_CustomGraphOptimizer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RewriterConfig_CustomGraphOptimizer& from);
  void MergeFrom(const RewriterConfig_CustomGraphOptimizer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RewriterConfig_CustomGraphOptimizer* other);
  protected:
  explicit RewriterConfig_CustomGraphOptimizer(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  ::std::string* unsafe_arena_release_name();
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // map<string, .tensorflow.AttrValue> parameter_map = 2;
  int parameter_map_size() const;
  void clear_parameter_map();
  static const int kParameterMapFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >&
      parameter_map() const;
  ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >*
      mutable_parameter_map();

  // @@protoc_insertion_point(class_scope:tensorflow.RewriterConfig.CustomGraphOptimizer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::tensorflow::AttrValue,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      RewriterConfig_CustomGraphOptimizer_ParameterMapEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::tensorflow::AttrValue,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > parameter_map_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static RewriterConfig_CustomGraphOptimizer* default_instance_;
};
// -------------------------------------------------------------------

class RewriterConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.RewriterConfig) */ {
 public:
  RewriterConfig();
  virtual ~RewriterConfig();

  RewriterConfig(const RewriterConfig& from);

  inline RewriterConfig& operator=(const RewriterConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const RewriterConfig& default_instance();

  void UnsafeArenaSwap(RewriterConfig* other);
  void Swap(RewriterConfig* other);

  // implements Message ----------------------------------------------

  inline RewriterConfig* New() const { return New(NULL); }

  RewriterConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RewriterConfig& from);
  void MergeFrom(const RewriterConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RewriterConfig* other);
  protected:
  explicit RewriterConfig(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RewriterConfig_CustomGraphOptimizer CustomGraphOptimizer;

  typedef RewriterConfig_Toggle Toggle;
  static const Toggle DEFAULT =
    RewriterConfig_Toggle_DEFAULT;
  static const Toggle ON =
    RewriterConfig_Toggle_ON;
  static const Toggle OFF =
    RewriterConfig_Toggle_OFF;
  static const Toggle AGGRESSIVE =
    RewriterConfig_Toggle_AGGRESSIVE;
  static inline bool Toggle_IsValid(int value) {
    return RewriterConfig_Toggle_IsValid(value);
  }
  static const Toggle Toggle_MIN =
    RewriterConfig_Toggle_Toggle_MIN;
  static const Toggle Toggle_MAX =
    RewriterConfig_Toggle_Toggle_MAX;
  static const int Toggle_ARRAYSIZE =
    RewriterConfig_Toggle_Toggle_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Toggle_descriptor() {
    return RewriterConfig_Toggle_descriptor();
  }
  static inline const ::std::string& Toggle_Name(Toggle value) {
    return RewriterConfig_Toggle_Name(value);
  }
  static inline bool Toggle_Parse(const ::std::string& name,
      Toggle* value) {
    return RewriterConfig_Toggle_Parse(name, value);
  }

  typedef RewriterConfig_NumIterationsType NumIterationsType;
  static const NumIterationsType DEFAULT_NUM_ITERS =
    RewriterConfig_NumIterationsType_DEFAULT_NUM_ITERS;
  static const NumIterationsType ONE =
    RewriterConfig_NumIterationsType_ONE;
  static const NumIterationsType TWO =
    RewriterConfig_NumIterationsType_TWO;
  static inline bool NumIterationsType_IsValid(int value) {
    return RewriterConfig_NumIterationsType_IsValid(value);
  }
  static const NumIterationsType NumIterationsType_MIN =
    RewriterConfig_NumIterationsType_NumIterationsType_MIN;
  static const NumIterationsType NumIterationsType_MAX =
    RewriterConfig_NumIterationsType_NumIterationsType_MAX;
  static const int NumIterationsType_ARRAYSIZE =
    RewriterConfig_NumIterationsType_NumIterationsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NumIterationsType_descriptor() {
    return RewriterConfig_NumIterationsType_descriptor();
  }
  static inline const ::std::string& NumIterationsType_Name(NumIterationsType value) {
    return RewriterConfig_NumIterationsType_Name(value);
  }
  static inline bool NumIterationsType_Parse(const ::std::string& name,
      NumIterationsType* value) {
    return RewriterConfig_NumIterationsType_Parse(name, value);
  }

  typedef RewriterConfig_MemOptType MemOptType;
  static const MemOptType DEFAULT_MEM_OPT =
    RewriterConfig_MemOptType_DEFAULT_MEM_OPT;
  static const MemOptType NO_MEM_OPT =
    RewriterConfig_MemOptType_NO_MEM_OPT;
  static const MemOptType MANUAL =
    RewriterConfig_MemOptType_MANUAL;
  static const MemOptType SWAPPING_HEURISTICS =
    RewriterConfig_MemOptType_SWAPPING_HEURISTICS;
  static const MemOptType RECOMPUTATION_HEURISTICS =
    RewriterConfig_MemOptType_RECOMPUTATION_HEURISTICS;
  static const MemOptType SCHEDULING_HEURISTICS =
    RewriterConfig_MemOptType_SCHEDULING_HEURISTICS;
  static const MemOptType HEURISTICS =
    RewriterConfig_MemOptType_HEURISTICS;
  static inline bool MemOptType_IsValid(int value) {
    return RewriterConfig_MemOptType_IsValid(value);
  }
  static const MemOptType MemOptType_MIN =
    RewriterConfig_MemOptType_MemOptType_MIN;
  static const MemOptType MemOptType_MAX =
    RewriterConfig_MemOptType_MemOptType_MAX;
  static const int MemOptType_ARRAYSIZE =
    RewriterConfig_MemOptType_MemOptType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MemOptType_descriptor() {
    return RewriterConfig_MemOptType_descriptor();
  }
  static inline const ::std::string& MemOptType_Name(MemOptType value) {
    return RewriterConfig_MemOptType_Name(value);
  }
  static inline bool MemOptType_Parse(const ::std::string& name,
      MemOptType* value) {
    return RewriterConfig_MemOptType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .tensorflow.RewriterConfig.Toggle layout_optimizer = 1;
  void clear_layout_optimizer();
  static const int kLayoutOptimizerFieldNumber = 1;
  ::tensorflow::RewriterConfig_Toggle layout_optimizer() const;
  void set_layout_optimizer(::tensorflow::RewriterConfig_Toggle value);

  // optional .tensorflow.RewriterConfig.Toggle constant_folding = 3;
  void clear_constant_folding();
  static const int kConstantFoldingFieldNumber = 3;
  ::tensorflow::RewriterConfig_Toggle constant_folding() const;
  void set_constant_folding(::tensorflow::RewriterConfig_Toggle value);

  // optional .tensorflow.RewriterConfig.Toggle shape_optimization = 13;
  void clear_shape_optimization();
  static const int kShapeOptimizationFieldNumber = 13;
  ::tensorflow::RewriterConfig_Toggle shape_optimization() const;
  void set_shape_optimization(::tensorflow::RewriterConfig_Toggle value);

  // optional .tensorflow.RewriterConfig.Toggle remapping = 14;
  void clear_remapping();
  static const int kRemappingFieldNumber = 14;
  ::tensorflow::RewriterConfig_Toggle remapping() const;
  void set_remapping(::tensorflow::RewriterConfig_Toggle value);

  // optional .tensorflow.RewriterConfig.Toggle common_subgraph_elimination = 24;
  void clear_common_subgraph_elimination();
  static const int kCommonSubgraphEliminationFieldNumber = 24;
  ::tensorflow::RewriterConfig_Toggle common_subgraph_elimination() const;
  void set_common_subgraph_elimination(::tensorflow::RewriterConfig_Toggle value);

  // optional .tensorflow.RewriterConfig.Toggle arithmetic_optimization = 7;
  void clear_arithmetic_optimization();
  static const int kArithmeticOptimizationFieldNumber = 7;
  ::tensorflow::RewriterConfig_Toggle arithmetic_optimization() const;
  void set_arithmetic_optimization(::tensorflow::RewriterConfig_Toggle value);

  // optional .tensorflow.RewriterConfig.Toggle dependency_optimization = 8;
  void clear_dependency_optimization();
  static const int kDependencyOptimizationFieldNumber = 8;
  ::tensorflow::RewriterConfig_Toggle dependency_optimization() const;
  void set_dependency_optimization(::tensorflow::RewriterConfig_Toggle value);

  // optional .tensorflow.RewriterConfig.Toggle loop_optimization = 9;
  void clear_loop_optimization();
  static const int kLoopOptimizationFieldNumber = 9;
  ::tensorflow::RewriterConfig_Toggle loop_optimization() const;
  void set_loop_optimization(::tensorflow::RewriterConfig_Toggle value);

  // optional .tensorflow.RewriterConfig.Toggle function_optimization = 10;
  void clear_function_optimization();
  static const int kFunctionOptimizationFieldNumber = 10;
  ::tensorflow::RewriterConfig_Toggle function_optimization() const;
  void set_function_optimization(::tensorflow::RewriterConfig_Toggle value);

  // optional .tensorflow.RewriterConfig.Toggle debug_stripper = 11;
  void clear_debug_stripper();
  static const int kDebugStripperFieldNumber = 11;
  ::tensorflow::RewriterConfig_Toggle debug_stripper() const;
  void set_debug_stripper(::tensorflow::RewriterConfig_Toggle value);

  // optional bool disable_model_pruning = 2;
  void clear_disable_model_pruning();
  static const int kDisableModelPruningFieldNumber = 2;
  bool disable_model_pruning() const;
  void set_disable_model_pruning(bool value);

  // optional .tensorflow.RewriterConfig.Toggle scoped_allocator_optimization = 15;
  void clear_scoped_allocator_optimization();
  static const int kScopedAllocatorOptimizationFieldNumber = 15;
  ::tensorflow::RewriterConfig_Toggle scoped_allocator_optimization() const;
  void set_scoped_allocator_optimization(::tensorflow::RewriterConfig_Toggle value);

  // optional .tensorflow.RewriterConfig.Toggle pin_to_host_optimization = 18;
  void clear_pin_to_host_optimization();
  static const int kPinToHostOptimizationFieldNumber = 18;
  ::tensorflow::RewriterConfig_Toggle pin_to_host_optimization() const;
  void set_pin_to_host_optimization(::tensorflow::RewriterConfig_Toggle value);

  // optional .tensorflow.RewriterConfig.Toggle implementation_selector = 22;
  void clear_implementation_selector();
  static const int kImplementationSelectorFieldNumber = 22;
  ::tensorflow::RewriterConfig_Toggle implementation_selector() const;
  void set_implementation_selector(::tensorflow::RewriterConfig_Toggle value);

  // optional .tensorflow.RewriterConfig.Toggle auto_mixed_precision = 23;
  void clear_auto_mixed_precision();
  static const int kAutoMixedPrecisionFieldNumber = 23;
  ::tensorflow::RewriterConfig_Toggle auto_mixed_precision() const;
  void set_auto_mixed_precision(::tensorflow::RewriterConfig_Toggle value);

  // optional .tensorflow.RewriterConfig.Toggle auto_mixed_precision_mkl = 25;
  void clear_auto_mixed_precision_mkl();
  static const int kAutoMixedPrecisionMklFieldNumber = 25;
  ::tensorflow::RewriterConfig_Toggle auto_mixed_precision_mkl() const;
  void set_auto_mixed_precision_mkl(::tensorflow::RewriterConfig_Toggle value);

  // optional bool disable_meta_optimizer = 19;
  void clear_disable_meta_optimizer();
  static const int kDisableMetaOptimizerFieldNumber = 19;
  bool disable_meta_optimizer() const;
  void set_disable_meta_optimizer(bool value);

  // optional .tensorflow.RewriterConfig.NumIterationsType meta_optimizer_iterations = 12;
  void clear_meta_optimizer_iterations();
  static const int kMetaOptimizerIterationsFieldNumber = 12;
  ::tensorflow::RewriterConfig_NumIterationsType meta_optimizer_iterations() const;
  void set_meta_optimizer_iterations(::tensorflow::RewriterConfig_NumIterationsType value);

  // optional int32 min_graph_nodes = 17;
  void clear_min_graph_nodes();
  static const int kMinGraphNodesFieldNumber = 17;
  ::google::protobuf::int32 min_graph_nodes() const;
  void set_min_graph_nodes(::google::protobuf::int32 value);

  // optional .tensorflow.RewriterConfig.MemOptType memory_optimization = 4;
  void clear_memory_optimization();
  static const int kMemoryOptimizationFieldNumber = 4;
  ::tensorflow::RewriterConfig_MemOptType memory_optimization() const;
  void set_memory_optimization(::tensorflow::RewriterConfig_MemOptType value);

  // optional string memory_optimizer_target_node_name_scope = 6;
  void clear_memory_optimizer_target_node_name_scope();
  static const int kMemoryOptimizerTargetNodeNameScopeFieldNumber = 6;
  const ::std::string& memory_optimizer_target_node_name_scope() const;
  void set_memory_optimizer_target_node_name_scope(const ::std::string& value);
  void set_memory_optimizer_target_node_name_scope(const char* value);
  void set_memory_optimizer_target_node_name_scope(const char* value, size_t size);
  ::std::string* mutable_memory_optimizer_target_node_name_scope();
  ::std::string* release_memory_optimizer_target_node_name_scope();
  void set_allocated_memory_optimizer_target_node_name_scope(::std::string* memory_optimizer_target_node_name_scope);
  ::std::string* unsafe_arena_release_memory_optimizer_target_node_name_scope();
  void unsafe_arena_set_allocated_memory_optimizer_target_node_name_scope(
      ::std::string* memory_optimizer_target_node_name_scope);

  // optional int64 meta_optimizer_timeout_ms = 20;
  void clear_meta_optimizer_timeout_ms();
  static const int kMetaOptimizerTimeoutMsFieldNumber = 20;
  ::google::protobuf::int64 meta_optimizer_timeout_ms() const;
  void set_meta_optimizer_timeout_ms(::google::protobuf::int64 value);

  // optional .tensorflow.AutoParallelOptions auto_parallel = 5;
  bool has_auto_parallel() const;
  void clear_auto_parallel();
  static const int kAutoParallelFieldNumber = 5;
  private:
  void _slow_mutable_auto_parallel();
  void _slow_set_allocated_auto_parallel(
      ::google::protobuf::Arena* message_arena, ::tensorflow::AutoParallelOptions** auto_parallel);
  ::tensorflow::AutoParallelOptions* _slow_release_auto_parallel();
  public:
  const ::tensorflow::AutoParallelOptions& auto_parallel() const;
  ::tensorflow::AutoParallelOptions* mutable_auto_parallel();
  ::tensorflow::AutoParallelOptions* release_auto_parallel();
  void set_allocated_auto_parallel(::tensorflow::AutoParallelOptions* auto_parallel);
  ::tensorflow::AutoParallelOptions* unsafe_arena_release_auto_parallel();
  void unsafe_arena_set_allocated_auto_parallel(
      ::tensorflow::AutoParallelOptions* auto_parallel);

  // optional bool fail_on_optimizer_errors = 21;
  void clear_fail_on_optimizer_errors();
  static const int kFailOnOptimizerErrorsFieldNumber = 21;
  bool fail_on_optimizer_errors() const;
  void set_fail_on_optimizer_errors(bool value);

  // optional .tensorflow.ScopedAllocatorOptions scoped_allocator_opts = 16;
  bool has_scoped_allocator_opts() const;
  void clear_scoped_allocator_opts();
  static const int kScopedAllocatorOptsFieldNumber = 16;
  private:
  void _slow_mutable_scoped_allocator_opts();
  void _slow_set_allocated_scoped_allocator_opts(
      ::google::protobuf::Arena* message_arena, ::tensorflow::ScopedAllocatorOptions** scoped_allocator_opts);
  ::tensorflow::ScopedAllocatorOptions* _slow_release_scoped_allocator_opts();
  public:
  const ::tensorflow::ScopedAllocatorOptions& scoped_allocator_opts() const;
  ::tensorflow::ScopedAllocatorOptions* mutable_scoped_allocator_opts();
  ::tensorflow::ScopedAllocatorOptions* release_scoped_allocator_opts();
  void set_allocated_scoped_allocator_opts(::tensorflow::ScopedAllocatorOptions* scoped_allocator_opts);
  ::tensorflow::ScopedAllocatorOptions* unsafe_arena_release_scoped_allocator_opts();
  void unsafe_arena_set_allocated_scoped_allocator_opts(
      ::tensorflow::ScopedAllocatorOptions* scoped_allocator_opts);

  // repeated string optimizers = 100;
  int optimizers_size() const;
  void clear_optimizers();
  static const int kOptimizersFieldNumber = 100;
  const ::std::string& optimizers(int index) const;
  ::std::string* mutable_optimizers(int index);
  void set_optimizers(int index, const ::std::string& value);
  void set_optimizers(int index, const char* value);
  void set_optimizers(int index, const char* value, size_t size);
  ::std::string* add_optimizers();
  void add_optimizers(const ::std::string& value);
  void add_optimizers(const char* value);
  void add_optimizers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& optimizers() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_optimizers();

  // repeated .tensorflow.RewriterConfig.CustomGraphOptimizer custom_optimizers = 200;
  int custom_optimizers_size() const;
  void clear_custom_optimizers();
  static const int kCustomOptimizersFieldNumber = 200;
  const ::tensorflow::RewriterConfig_CustomGraphOptimizer& custom_optimizers(int index) const;
  ::tensorflow::RewriterConfig_CustomGraphOptimizer* mutable_custom_optimizers(int index);
  ::tensorflow::RewriterConfig_CustomGraphOptimizer* add_custom_optimizers();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::RewriterConfig_CustomGraphOptimizer >*
      mutable_custom_optimizers();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::RewriterConfig_CustomGraphOptimizer >&
      custom_optimizers() const;

  // optional .tensorflow.VerifierConfig inter_optimizer_verifier_config = 300;
  bool has_inter_optimizer_verifier_config() const;
  void clear_inter_optimizer_verifier_config();
  static const int kInterOptimizerVerifierConfigFieldNumber = 300;
  private:
  void _slow_mutable_inter_optimizer_verifier_config();
  void _slow_set_allocated_inter_optimizer_verifier_config(
      ::google::protobuf::Arena* message_arena, ::tensorflow::VerifierConfig** inter_optimizer_verifier_config);
  ::tensorflow::VerifierConfig* _slow_release_inter_optimizer_verifier_config();
  public:
  const ::tensorflow::VerifierConfig& inter_optimizer_verifier_config() const;
  ::tensorflow::VerifierConfig* mutable_inter_optimizer_verifier_config();
  ::tensorflow::VerifierConfig* release_inter_optimizer_verifier_config();
  void set_allocated_inter_optimizer_verifier_config(::tensorflow::VerifierConfig* inter_optimizer_verifier_config);
  ::tensorflow::VerifierConfig* unsafe_arena_release_inter_optimizer_verifier_config();
  void unsafe_arena_set_allocated_inter_optimizer_verifier_config(
      ::tensorflow::VerifierConfig* inter_optimizer_verifier_config);

  // optional .tensorflow.VerifierConfig post_optimization_verifier_config = 301;
  bool has_post_optimization_verifier_config() const;
  void clear_post_optimization_verifier_config();
  static const int kPostOptimizationVerifierConfigFieldNumber = 301;
  private:
  void _slow_mutable_post_optimization_verifier_config();
  void _slow_set_allocated_post_optimization_verifier_config(
      ::google::protobuf::Arena* message_arena, ::tensorflow::VerifierConfig** post_optimization_verifier_config);
  ::tensorflow::VerifierConfig* _slow_release_post_optimization_verifier_config();
  public:
  const ::tensorflow::VerifierConfig& post_optimization_verifier_config() const;
  ::tensorflow::VerifierConfig* mutable_post_optimization_verifier_config();
  ::tensorflow::VerifierConfig* release_post_optimization_verifier_config();
  void set_allocated_post_optimization_verifier_config(::tensorflow::VerifierConfig* post_optimization_verifier_config);
  ::tensorflow::VerifierConfig* unsafe_arena_release_post_optimization_verifier_config();
  void unsafe_arena_set_allocated_post_optimization_verifier_config(
      ::tensorflow::VerifierConfig* post_optimization_verifier_config);

  // @@protoc_insertion_point(class_scope:tensorflow.RewriterConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  int layout_optimizer_;
  int constant_folding_;
  int shape_optimization_;
  int remapping_;
  int common_subgraph_elimination_;
  int arithmetic_optimization_;
  int dependency_optimization_;
  int loop_optimization_;
  int function_optimization_;
  int debug_stripper_;
  int scoped_allocator_optimization_;
  int pin_to_host_optimization_;
  int implementation_selector_;
  int auto_mixed_precision_;
  int auto_mixed_precision_mkl_;
  bool disable_model_pruning_;
  bool disable_meta_optimizer_;
  bool fail_on_optimizer_errors_;
  int meta_optimizer_iterations_;
  ::google::protobuf::int32 min_graph_nodes_;
  ::google::protobuf::internal::ArenaStringPtr memory_optimizer_target_node_name_scope_;
  ::google::protobuf::int64 meta_optimizer_timeout_ms_;
  ::tensorflow::AutoParallelOptions* auto_parallel_;
  ::tensorflow::ScopedAllocatorOptions* scoped_allocator_opts_;
  ::google::protobuf::RepeatedPtrField< ::std::string> optimizers_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::RewriterConfig_CustomGraphOptimizer > custom_optimizers_;
  ::tensorflow::VerifierConfig* inter_optimizer_verifier_config_;
  ::tensorflow::VerifierConfig* post_optimization_verifier_config_;
  int memory_optimization_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static RewriterConfig* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// AutoParallelOptions

// optional bool enable = 1;
inline void AutoParallelOptions::clear_enable() {
  enable_ = false;
}
inline bool AutoParallelOptions::enable() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutoParallelOptions.enable)
  return enable_;
}
inline void AutoParallelOptions::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.AutoParallelOptions.enable)
}

// optional int32 num_replicas = 2;
inline void AutoParallelOptions::clear_num_replicas() {
  num_replicas_ = 0;
}
inline ::google::protobuf::int32 AutoParallelOptions::num_replicas() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutoParallelOptions.num_replicas)
  return num_replicas_;
}
inline void AutoParallelOptions::set_num_replicas(::google::protobuf::int32 value) {
  
  num_replicas_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.AutoParallelOptions.num_replicas)
}

// -------------------------------------------------------------------

// ScopedAllocatorOptions

// repeated string enable_op = 1;
inline int ScopedAllocatorOptions::enable_op_size() const {
  return enable_op_.size();
}
inline void ScopedAllocatorOptions::clear_enable_op() {
  enable_op_.Clear();
}
inline const ::std::string& ScopedAllocatorOptions::enable_op(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.ScopedAllocatorOptions.enable_op)
  return enable_op_.Get(index);
}
inline ::std::string* ScopedAllocatorOptions::mutable_enable_op(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.ScopedAllocatorOptions.enable_op)
  return enable_op_.Mutable(index);
}
inline void ScopedAllocatorOptions::set_enable_op(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.ScopedAllocatorOptions.enable_op)
  enable_op_.Mutable(index)->assign(value);
}
inline void ScopedAllocatorOptions::set_enable_op(int index, const char* value) {
  enable_op_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.ScopedAllocatorOptions.enable_op)
}
inline void ScopedAllocatorOptions::set_enable_op(int index, const char* value, size_t size) {
  enable_op_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.ScopedAllocatorOptions.enable_op)
}
inline ::std::string* ScopedAllocatorOptions::add_enable_op() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.ScopedAllocatorOptions.enable_op)
  return enable_op_.Add();
}
inline void ScopedAllocatorOptions::add_enable_op(const ::std::string& value) {
  enable_op_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.ScopedAllocatorOptions.enable_op)
}
inline void ScopedAllocatorOptions::add_enable_op(const char* value) {
  enable_op_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.ScopedAllocatorOptions.enable_op)
}
inline void ScopedAllocatorOptions::add_enable_op(const char* value, size_t size) {
  enable_op_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.ScopedAllocatorOptions.enable_op)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ScopedAllocatorOptions::enable_op() const {
  // @@protoc_insertion_point(field_list:tensorflow.ScopedAllocatorOptions.enable_op)
  return enable_op_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ScopedAllocatorOptions::mutable_enable_op() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.ScopedAllocatorOptions.enable_op)
  return &enable_op_;
}

// -------------------------------------------------------------------

// RewriterConfig_CustomGraphOptimizer

// optional string name = 1;
inline void RewriterConfig_CustomGraphOptimizer::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& RewriterConfig_CustomGraphOptimizer::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.CustomGraphOptimizer.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RewriterConfig_CustomGraphOptimizer::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.CustomGraphOptimizer.name)
}
inline void RewriterConfig_CustomGraphOptimizer::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.RewriterConfig.CustomGraphOptimizer.name)
}
inline void RewriterConfig_CustomGraphOptimizer::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.RewriterConfig.CustomGraphOptimizer.name)
}
inline ::std::string* RewriterConfig_CustomGraphOptimizer::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.RewriterConfig.CustomGraphOptimizer.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RewriterConfig_CustomGraphOptimizer::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.RewriterConfig.CustomGraphOptimizer.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RewriterConfig_CustomGraphOptimizer::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RewriterConfig.CustomGraphOptimizer.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void RewriterConfig_CustomGraphOptimizer::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RewriterConfig.CustomGraphOptimizer.name)
}
inline void RewriterConfig_CustomGraphOptimizer::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RewriterConfig.CustomGraphOptimizer.name)
}

// map<string, .tensorflow.AttrValue> parameter_map = 2;
inline int RewriterConfig_CustomGraphOptimizer::parameter_map_size() const {
  return parameter_map_.size();
}
inline void RewriterConfig_CustomGraphOptimizer::clear_parameter_map() {
  parameter_map_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >&
RewriterConfig_CustomGraphOptimizer::parameter_map() const {
  // @@protoc_insertion_point(field_map:tensorflow.RewriterConfig.CustomGraphOptimizer.parameter_map)
  return parameter_map_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >*
RewriterConfig_CustomGraphOptimizer::mutable_parameter_map() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.RewriterConfig.CustomGraphOptimizer.parameter_map)
  return parameter_map_.MutableMap();
}

// -------------------------------------------------------------------

// RewriterConfig

// optional .tensorflow.RewriterConfig.Toggle layout_optimizer = 1;
inline void RewriterConfig::clear_layout_optimizer() {
  layout_optimizer_ = 0;
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::layout_optimizer() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.layout_optimizer)
  return static_cast< ::tensorflow::RewriterConfig_Toggle >(layout_optimizer_);
}
inline void RewriterConfig::set_layout_optimizer(::tensorflow::RewriterConfig_Toggle value) {
  
  layout_optimizer_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.layout_optimizer)
}

// optional .tensorflow.RewriterConfig.Toggle constant_folding = 3;
inline void RewriterConfig::clear_constant_folding() {
  constant_folding_ = 0;
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::constant_folding() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.constant_folding)
  return static_cast< ::tensorflow::RewriterConfig_Toggle >(constant_folding_);
}
inline void RewriterConfig::set_constant_folding(::tensorflow::RewriterConfig_Toggle value) {
  
  constant_folding_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.constant_folding)
}

// optional .tensorflow.RewriterConfig.Toggle shape_optimization = 13;
inline void RewriterConfig::clear_shape_optimization() {
  shape_optimization_ = 0;
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::shape_optimization() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.shape_optimization)
  return static_cast< ::tensorflow::RewriterConfig_Toggle >(shape_optimization_);
}
inline void RewriterConfig::set_shape_optimization(::tensorflow::RewriterConfig_Toggle value) {
  
  shape_optimization_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.shape_optimization)
}

// optional .tensorflow.RewriterConfig.Toggle remapping = 14;
inline void RewriterConfig::clear_remapping() {
  remapping_ = 0;
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::remapping() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.remapping)
  return static_cast< ::tensorflow::RewriterConfig_Toggle >(remapping_);
}
inline void RewriterConfig::set_remapping(::tensorflow::RewriterConfig_Toggle value) {
  
  remapping_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.remapping)
}

// optional .tensorflow.RewriterConfig.Toggle common_subgraph_elimination = 24;
inline void RewriterConfig::clear_common_subgraph_elimination() {
  common_subgraph_elimination_ = 0;
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::common_subgraph_elimination() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.common_subgraph_elimination)
  return static_cast< ::tensorflow::RewriterConfig_Toggle >(common_subgraph_elimination_);
}
inline void RewriterConfig::set_common_subgraph_elimination(::tensorflow::RewriterConfig_Toggle value) {
  
  common_subgraph_elimination_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.common_subgraph_elimination)
}

// optional .tensorflow.RewriterConfig.Toggle arithmetic_optimization = 7;
inline void RewriterConfig::clear_arithmetic_optimization() {
  arithmetic_optimization_ = 0;
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::arithmetic_optimization() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.arithmetic_optimization)
  return static_cast< ::tensorflow::RewriterConfig_Toggle >(arithmetic_optimization_);
}
inline void RewriterConfig::set_arithmetic_optimization(::tensorflow::RewriterConfig_Toggle value) {
  
  arithmetic_optimization_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.arithmetic_optimization)
}

// optional .tensorflow.RewriterConfig.Toggle dependency_optimization = 8;
inline void RewriterConfig::clear_dependency_optimization() {
  dependency_optimization_ = 0;
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::dependency_optimization() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.dependency_optimization)
  return static_cast< ::tensorflow::RewriterConfig_Toggle >(dependency_optimization_);
}
inline void RewriterConfig::set_dependency_optimization(::tensorflow::RewriterConfig_Toggle value) {
  
  dependency_optimization_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.dependency_optimization)
}

// optional .tensorflow.RewriterConfig.Toggle loop_optimization = 9;
inline void RewriterConfig::clear_loop_optimization() {
  loop_optimization_ = 0;
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::loop_optimization() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.loop_optimization)
  return static_cast< ::tensorflow::RewriterConfig_Toggle >(loop_optimization_);
}
inline void RewriterConfig::set_loop_optimization(::tensorflow::RewriterConfig_Toggle value) {
  
  loop_optimization_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.loop_optimization)
}

// optional .tensorflow.RewriterConfig.Toggle function_optimization = 10;
inline void RewriterConfig::clear_function_optimization() {
  function_optimization_ = 0;
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::function_optimization() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.function_optimization)
  return static_cast< ::tensorflow::RewriterConfig_Toggle >(function_optimization_);
}
inline void RewriterConfig::set_function_optimization(::tensorflow::RewriterConfig_Toggle value) {
  
  function_optimization_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.function_optimization)
}

// optional .tensorflow.RewriterConfig.Toggle debug_stripper = 11;
inline void RewriterConfig::clear_debug_stripper() {
  debug_stripper_ = 0;
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::debug_stripper() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.debug_stripper)
  return static_cast< ::tensorflow::RewriterConfig_Toggle >(debug_stripper_);
}
inline void RewriterConfig::set_debug_stripper(::tensorflow::RewriterConfig_Toggle value) {
  
  debug_stripper_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.debug_stripper)
}

// optional bool disable_model_pruning = 2;
inline void RewriterConfig::clear_disable_model_pruning() {
  disable_model_pruning_ = false;
}
inline bool RewriterConfig::disable_model_pruning() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.disable_model_pruning)
  return disable_model_pruning_;
}
inline void RewriterConfig::set_disable_model_pruning(bool value) {
  
  disable_model_pruning_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.disable_model_pruning)
}

// optional .tensorflow.RewriterConfig.Toggle scoped_allocator_optimization = 15;
inline void RewriterConfig::clear_scoped_allocator_optimization() {
  scoped_allocator_optimization_ = 0;
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::scoped_allocator_optimization() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.scoped_allocator_optimization)
  return static_cast< ::tensorflow::RewriterConfig_Toggle >(scoped_allocator_optimization_);
}
inline void RewriterConfig::set_scoped_allocator_optimization(::tensorflow::RewriterConfig_Toggle value) {
  
  scoped_allocator_optimization_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.scoped_allocator_optimization)
}

// optional .tensorflow.RewriterConfig.Toggle pin_to_host_optimization = 18;
inline void RewriterConfig::clear_pin_to_host_optimization() {
  pin_to_host_optimization_ = 0;
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::pin_to_host_optimization() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.pin_to_host_optimization)
  return static_cast< ::tensorflow::RewriterConfig_Toggle >(pin_to_host_optimization_);
}
inline void RewriterConfig::set_pin_to_host_optimization(::tensorflow::RewriterConfig_Toggle value) {
  
  pin_to_host_optimization_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.pin_to_host_optimization)
}

// optional .tensorflow.RewriterConfig.Toggle implementation_selector = 22;
inline void RewriterConfig::clear_implementation_selector() {
  implementation_selector_ = 0;
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::implementation_selector() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.implementation_selector)
  return static_cast< ::tensorflow::RewriterConfig_Toggle >(implementation_selector_);
}
inline void RewriterConfig::set_implementation_selector(::tensorflow::RewriterConfig_Toggle value) {
  
  implementation_selector_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.implementation_selector)
}

// optional .tensorflow.RewriterConfig.Toggle auto_mixed_precision = 23;
inline void RewriterConfig::clear_auto_mixed_precision() {
  auto_mixed_precision_ = 0;
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::auto_mixed_precision() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.auto_mixed_precision)
  return static_cast< ::tensorflow::RewriterConfig_Toggle >(auto_mixed_precision_);
}
inline void RewriterConfig::set_auto_mixed_precision(::tensorflow::RewriterConfig_Toggle value) {
  
  auto_mixed_precision_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.auto_mixed_precision)
}

// optional .tensorflow.RewriterConfig.Toggle auto_mixed_precision_mkl = 25;
inline void RewriterConfig::clear_auto_mixed_precision_mkl() {
  auto_mixed_precision_mkl_ = 0;
}
inline ::tensorflow::RewriterConfig_Toggle RewriterConfig::auto_mixed_precision_mkl() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.auto_mixed_precision_mkl)
  return static_cast< ::tensorflow::RewriterConfig_Toggle >(auto_mixed_precision_mkl_);
}
inline void RewriterConfig::set_auto_mixed_precision_mkl(::tensorflow::RewriterConfig_Toggle value) {
  
  auto_mixed_precision_mkl_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.auto_mixed_precision_mkl)
}

// optional bool disable_meta_optimizer = 19;
inline void RewriterConfig::clear_disable_meta_optimizer() {
  disable_meta_optimizer_ = false;
}
inline bool RewriterConfig::disable_meta_optimizer() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.disable_meta_optimizer)
  return disable_meta_optimizer_;
}
inline void RewriterConfig::set_disable_meta_optimizer(bool value) {
  
  disable_meta_optimizer_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.disable_meta_optimizer)
}

// optional .tensorflow.RewriterConfig.NumIterationsType meta_optimizer_iterations = 12;
inline void RewriterConfig::clear_meta_optimizer_iterations() {
  meta_optimizer_iterations_ = 0;
}
inline ::tensorflow::RewriterConfig_NumIterationsType RewriterConfig::meta_optimizer_iterations() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.meta_optimizer_iterations)
  return static_cast< ::tensorflow::RewriterConfig_NumIterationsType >(meta_optimizer_iterations_);
}
inline void RewriterConfig::set_meta_optimizer_iterations(::tensorflow::RewriterConfig_NumIterationsType value) {
  
  meta_optimizer_iterations_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.meta_optimizer_iterations)
}

// optional int32 min_graph_nodes = 17;
inline void RewriterConfig::clear_min_graph_nodes() {
  min_graph_nodes_ = 0;
}
inline ::google::protobuf::int32 RewriterConfig::min_graph_nodes() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.min_graph_nodes)
  return min_graph_nodes_;
}
inline void RewriterConfig::set_min_graph_nodes(::google::protobuf::int32 value) {
  
  min_graph_nodes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.min_graph_nodes)
}

// optional .tensorflow.RewriterConfig.MemOptType memory_optimization = 4;
inline void RewriterConfig::clear_memory_optimization() {
  memory_optimization_ = 0;
}
inline ::tensorflow::RewriterConfig_MemOptType RewriterConfig::memory_optimization() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.memory_optimization)
  return static_cast< ::tensorflow::RewriterConfig_MemOptType >(memory_optimization_);
}
inline void RewriterConfig::set_memory_optimization(::tensorflow::RewriterConfig_MemOptType value) {
  
  memory_optimization_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.memory_optimization)
}

// optional string memory_optimizer_target_node_name_scope = 6;
inline void RewriterConfig::clear_memory_optimizer_target_node_name_scope() {
  memory_optimizer_target_node_name_scope_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& RewriterConfig::memory_optimizer_target_node_name_scope() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope)
  return memory_optimizer_target_node_name_scope_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RewriterConfig::set_memory_optimizer_target_node_name_scope(const ::std::string& value) {
  
  memory_optimizer_target_node_name_scope_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope)
}
inline void RewriterConfig::set_memory_optimizer_target_node_name_scope(const char* value) {
  
  memory_optimizer_target_node_name_scope_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope)
}
inline void RewriterConfig::set_memory_optimizer_target_node_name_scope(const char* value,
    size_t size) {
  
  memory_optimizer_target_node_name_scope_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope)
}
inline ::std::string* RewriterConfig::mutable_memory_optimizer_target_node_name_scope() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope)
  return memory_optimizer_target_node_name_scope_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RewriterConfig::release_memory_optimizer_target_node_name_scope() {
  // @@protoc_insertion_point(field_release:tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope)
  
  return memory_optimizer_target_node_name_scope_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RewriterConfig::unsafe_arena_release_memory_optimizer_target_node_name_scope() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return memory_optimizer_target_node_name_scope_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void RewriterConfig::set_allocated_memory_optimizer_target_node_name_scope(::std::string* memory_optimizer_target_node_name_scope) {
  if (memory_optimizer_target_node_name_scope != NULL) {
    
  } else {
    
  }
  memory_optimizer_target_node_name_scope_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), memory_optimizer_target_node_name_scope,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope)
}
inline void RewriterConfig::unsafe_arena_set_allocated_memory_optimizer_target_node_name_scope(
    ::std::string* memory_optimizer_target_node_name_scope) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (memory_optimizer_target_node_name_scope != NULL) {
    
  } else {
    
  }
  memory_optimizer_target_node_name_scope_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      memory_optimizer_target_node_name_scope, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope)
}

// optional int64 meta_optimizer_timeout_ms = 20;
inline void RewriterConfig::clear_meta_optimizer_timeout_ms() {
  meta_optimizer_timeout_ms_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RewriterConfig::meta_optimizer_timeout_ms() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.meta_optimizer_timeout_ms)
  return meta_optimizer_timeout_ms_;
}
inline void RewriterConfig::set_meta_optimizer_timeout_ms(::google::protobuf::int64 value) {
  
  meta_optimizer_timeout_ms_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.meta_optimizer_timeout_ms)
}

// optional .tensorflow.AutoParallelOptions auto_parallel = 5;
inline bool RewriterConfig::has_auto_parallel() const {
  return !_is_default_instance_ && auto_parallel_ != NULL;
}
inline void RewriterConfig::clear_auto_parallel() {
  if (GetArenaNoVirtual() == NULL && auto_parallel_ != NULL) delete auto_parallel_;
  auto_parallel_ = NULL;
}
inline const ::tensorflow::AutoParallelOptions& RewriterConfig::auto_parallel() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.auto_parallel)
  return auto_parallel_ != NULL ? *auto_parallel_ : *default_instance_->auto_parallel_;
}
inline ::tensorflow::AutoParallelOptions* RewriterConfig::mutable_auto_parallel() {
  
  if (auto_parallel_ == NULL) {
    _slow_mutable_auto_parallel();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RewriterConfig.auto_parallel)
  return auto_parallel_;
}
inline ::tensorflow::AutoParallelOptions* RewriterConfig::release_auto_parallel() {
  // @@protoc_insertion_point(field_release:tensorflow.RewriterConfig.auto_parallel)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_auto_parallel();
  } else {
    ::tensorflow::AutoParallelOptions* temp = auto_parallel_;
    auto_parallel_ = NULL;
    return temp;
  }
}
inline  void RewriterConfig::set_allocated_auto_parallel(::tensorflow::AutoParallelOptions* auto_parallel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete auto_parallel_;
  }
  if (auto_parallel != NULL) {
    _slow_set_allocated_auto_parallel(message_arena, &auto_parallel);
  }
  auto_parallel_ = auto_parallel;
  if (auto_parallel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RewriterConfig.auto_parallel)
}

// optional bool fail_on_optimizer_errors = 21;
inline void RewriterConfig::clear_fail_on_optimizer_errors() {
  fail_on_optimizer_errors_ = false;
}
inline bool RewriterConfig::fail_on_optimizer_errors() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.fail_on_optimizer_errors)
  return fail_on_optimizer_errors_;
}
inline void RewriterConfig::set_fail_on_optimizer_errors(bool value) {
  
  fail_on_optimizer_errors_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.fail_on_optimizer_errors)
}

// optional .tensorflow.ScopedAllocatorOptions scoped_allocator_opts = 16;
inline bool RewriterConfig::has_scoped_allocator_opts() const {
  return !_is_default_instance_ && scoped_allocator_opts_ != NULL;
}
inline void RewriterConfig::clear_scoped_allocator_opts() {
  if (GetArenaNoVirtual() == NULL && scoped_allocator_opts_ != NULL) delete scoped_allocator_opts_;
  scoped_allocator_opts_ = NULL;
}
inline const ::tensorflow::ScopedAllocatorOptions& RewriterConfig::scoped_allocator_opts() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.scoped_allocator_opts)
  return scoped_allocator_opts_ != NULL ? *scoped_allocator_opts_ : *default_instance_->scoped_allocator_opts_;
}
inline ::tensorflow::ScopedAllocatorOptions* RewriterConfig::mutable_scoped_allocator_opts() {
  
  if (scoped_allocator_opts_ == NULL) {
    _slow_mutable_scoped_allocator_opts();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RewriterConfig.scoped_allocator_opts)
  return scoped_allocator_opts_;
}
inline ::tensorflow::ScopedAllocatorOptions* RewriterConfig::release_scoped_allocator_opts() {
  // @@protoc_insertion_point(field_release:tensorflow.RewriterConfig.scoped_allocator_opts)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_scoped_allocator_opts();
  } else {
    ::tensorflow::ScopedAllocatorOptions* temp = scoped_allocator_opts_;
    scoped_allocator_opts_ = NULL;
    return temp;
  }
}
inline  void RewriterConfig::set_allocated_scoped_allocator_opts(::tensorflow::ScopedAllocatorOptions* scoped_allocator_opts) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scoped_allocator_opts_;
  }
  if (scoped_allocator_opts != NULL) {
    _slow_set_allocated_scoped_allocator_opts(message_arena, &scoped_allocator_opts);
  }
  scoped_allocator_opts_ = scoped_allocator_opts;
  if (scoped_allocator_opts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RewriterConfig.scoped_allocator_opts)
}

// repeated string optimizers = 100;
inline int RewriterConfig::optimizers_size() const {
  return optimizers_.size();
}
inline void RewriterConfig::clear_optimizers() {
  optimizers_.Clear();
}
inline const ::std::string& RewriterConfig::optimizers(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.optimizers)
  return optimizers_.Get(index);
}
inline ::std::string* RewriterConfig::mutable_optimizers(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.RewriterConfig.optimizers)
  return optimizers_.Mutable(index);
}
inline void RewriterConfig::set_optimizers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.optimizers)
  optimizers_.Mutable(index)->assign(value);
}
inline void RewriterConfig::set_optimizers(int index, const char* value) {
  optimizers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.RewriterConfig.optimizers)
}
inline void RewriterConfig::set_optimizers(int index, const char* value, size_t size) {
  optimizers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.RewriterConfig.optimizers)
}
inline ::std::string* RewriterConfig::add_optimizers() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.RewriterConfig.optimizers)
  return optimizers_.Add();
}
inline void RewriterConfig::add_optimizers(const ::std::string& value) {
  optimizers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.RewriterConfig.optimizers)
}
inline void RewriterConfig::add_optimizers(const char* value) {
  optimizers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.RewriterConfig.optimizers)
}
inline void RewriterConfig::add_optimizers(const char* value, size_t size) {
  optimizers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.RewriterConfig.optimizers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RewriterConfig::optimizers() const {
  // @@protoc_insertion_point(field_list:tensorflow.RewriterConfig.optimizers)
  return optimizers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RewriterConfig::mutable_optimizers() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.RewriterConfig.optimizers)
  return &optimizers_;
}

// repeated .tensorflow.RewriterConfig.CustomGraphOptimizer custom_optimizers = 200;
inline int RewriterConfig::custom_optimizers_size() const {
  return custom_optimizers_.size();
}
inline void RewriterConfig::clear_custom_optimizers() {
  custom_optimizers_.Clear();
}
inline const ::tensorflow::RewriterConfig_CustomGraphOptimizer& RewriterConfig::custom_optimizers(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.custom_optimizers)
  return custom_optimizers_.Get(index);
}
inline ::tensorflow::RewriterConfig_CustomGraphOptimizer* RewriterConfig::mutable_custom_optimizers(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.RewriterConfig.custom_optimizers)
  return custom_optimizers_.Mutable(index);
}
inline ::tensorflow::RewriterConfig_CustomGraphOptimizer* RewriterConfig::add_custom_optimizers() {
  // @@protoc_insertion_point(field_add:tensorflow.RewriterConfig.custom_optimizers)
  return custom_optimizers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::RewriterConfig_CustomGraphOptimizer >*
RewriterConfig::mutable_custom_optimizers() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.RewriterConfig.custom_optimizers)
  return &custom_optimizers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::RewriterConfig_CustomGraphOptimizer >&
RewriterConfig::custom_optimizers() const {
  // @@protoc_insertion_point(field_list:tensorflow.RewriterConfig.custom_optimizers)
  return custom_optimizers_;
}

// optional .tensorflow.VerifierConfig inter_optimizer_verifier_config = 300;
inline bool RewriterConfig::has_inter_optimizer_verifier_config() const {
  return !_is_default_instance_ && inter_optimizer_verifier_config_ != NULL;
}
inline void RewriterConfig::clear_inter_optimizer_verifier_config() {
  if (GetArenaNoVirtual() == NULL && inter_optimizer_verifier_config_ != NULL) delete inter_optimizer_verifier_config_;
  inter_optimizer_verifier_config_ = NULL;
}
inline const ::tensorflow::VerifierConfig& RewriterConfig::inter_optimizer_verifier_config() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.inter_optimizer_verifier_config)
  return inter_optimizer_verifier_config_ != NULL ? *inter_optimizer_verifier_config_ : *default_instance_->inter_optimizer_verifier_config_;
}
inline ::tensorflow::VerifierConfig* RewriterConfig::mutable_inter_optimizer_verifier_config() {
  
  if (inter_optimizer_verifier_config_ == NULL) {
    _slow_mutable_inter_optimizer_verifier_config();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RewriterConfig.inter_optimizer_verifier_config)
  return inter_optimizer_verifier_config_;
}
inline ::tensorflow::VerifierConfig* RewriterConfig::release_inter_optimizer_verifier_config() {
  // @@protoc_insertion_point(field_release:tensorflow.RewriterConfig.inter_optimizer_verifier_config)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_inter_optimizer_verifier_config();
  } else {
    ::tensorflow::VerifierConfig* temp = inter_optimizer_verifier_config_;
    inter_optimizer_verifier_config_ = NULL;
    return temp;
  }
}
inline  void RewriterConfig::set_allocated_inter_optimizer_verifier_config(::tensorflow::VerifierConfig* inter_optimizer_verifier_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete inter_optimizer_verifier_config_;
  }
  if (inter_optimizer_verifier_config != NULL) {
    _slow_set_allocated_inter_optimizer_verifier_config(message_arena, &inter_optimizer_verifier_config);
  }
  inter_optimizer_verifier_config_ = inter_optimizer_verifier_config;
  if (inter_optimizer_verifier_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RewriterConfig.inter_optimizer_verifier_config)
}

// optional .tensorflow.VerifierConfig post_optimization_verifier_config = 301;
inline bool RewriterConfig::has_post_optimization_verifier_config() const {
  return !_is_default_instance_ && post_optimization_verifier_config_ != NULL;
}
inline void RewriterConfig::clear_post_optimization_verifier_config() {
  if (GetArenaNoVirtual() == NULL && post_optimization_verifier_config_ != NULL) delete post_optimization_verifier_config_;
  post_optimization_verifier_config_ = NULL;
}
inline const ::tensorflow::VerifierConfig& RewriterConfig::post_optimization_verifier_config() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.post_optimization_verifier_config)
  return post_optimization_verifier_config_ != NULL ? *post_optimization_verifier_config_ : *default_instance_->post_optimization_verifier_config_;
}
inline ::tensorflow::VerifierConfig* RewriterConfig::mutable_post_optimization_verifier_config() {
  
  if (post_optimization_verifier_config_ == NULL) {
    _slow_mutable_post_optimization_verifier_config();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RewriterConfig.post_optimization_verifier_config)
  return post_optimization_verifier_config_;
}
inline ::tensorflow::VerifierConfig* RewriterConfig::release_post_optimization_verifier_config() {
  // @@protoc_insertion_point(field_release:tensorflow.RewriterConfig.post_optimization_verifier_config)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_post_optimization_verifier_config();
  } else {
    ::tensorflow::VerifierConfig* temp = post_optimization_verifier_config_;
    post_optimization_verifier_config_ = NULL;
    return temp;
  }
}
inline  void RewriterConfig::set_allocated_post_optimization_verifier_config(::tensorflow::VerifierConfig* post_optimization_verifier_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete post_optimization_verifier_config_;
  }
  if (post_optimization_verifier_config != NULL) {
    _slow_set_allocated_post_optimization_verifier_config(message_arena, &post_optimization_verifier_config);
  }
  post_optimization_verifier_config_ = post_optimization_verifier_config;
  if (post_optimization_verifier_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RewriterConfig.post_optimization_verifier_config)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::tensorflow::RewriterConfig_Toggle> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tensorflow::RewriterConfig_Toggle>() {
  return ::tensorflow::RewriterConfig_Toggle_descriptor();
}
template <> struct is_proto_enum< ::tensorflow::RewriterConfig_NumIterationsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tensorflow::RewriterConfig_NumIterationsType>() {
  return ::tensorflow::RewriterConfig_NumIterationsType_descriptor();
}
template <> struct is_proto_enum< ::tensorflow::RewriterConfig_MemOptType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tensorflow::RewriterConfig_MemOptType>() {
  return ::tensorflow::RewriterConfig_MemOptType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto__INCLUDED
