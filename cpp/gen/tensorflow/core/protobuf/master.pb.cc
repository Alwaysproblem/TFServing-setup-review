// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/master.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/protobuf/master.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {

namespace {

const ::google::protobuf::Descriptor* CreateSessionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateSessionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateSessionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateSessionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExtendSessionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExtendSessionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExtendSessionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExtendSessionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RunStepRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunStepRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RunStepResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunStepResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PartialRunSetupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PartialRunSetupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PartialRunSetupResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PartialRunSetupResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CloseSessionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloseSessionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CloseSessionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloseSessionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResetResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListDevicesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListDevicesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListDevicesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListDevicesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MakeCallableRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MakeCallableRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MakeCallableResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MakeCallableResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RunCallableRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunCallableRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RunCallableResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunCallableResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReleaseCallableRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReleaseCallableRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReleaseCallableResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReleaseCallableResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto() {
  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow/core/protobuf/master.proto");
  GOOGLE_CHECK(file != NULL);
  CreateSessionRequest_descriptor_ = file->message_type(0);
  static const int CreateSessionRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionRequest, graph_def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionRequest, config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionRequest, target_),
  };
  CreateSessionRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateSessionRequest_descriptor_,
      CreateSessionRequest::default_instance_,
      CreateSessionRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreateSessionRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionRequest, _is_default_instance_));
  CreateSessionResponse_descriptor_ = file->message_type(1);
  static const int CreateSessionResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionResponse, session_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionResponse, graph_version_),
  };
  CreateSessionResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateSessionResponse_descriptor_,
      CreateSessionResponse::default_instance_,
      CreateSessionResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreateSessionResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionResponse, _is_default_instance_));
  ExtendSessionRequest_descriptor_ = file->message_type(2);
  static const int ExtendSessionRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendSessionRequest, session_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendSessionRequest, graph_def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendSessionRequest, current_graph_version_),
  };
  ExtendSessionRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExtendSessionRequest_descriptor_,
      ExtendSessionRequest::default_instance_,
      ExtendSessionRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ExtendSessionRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendSessionRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendSessionRequest, _is_default_instance_));
  ExtendSessionResponse_descriptor_ = file->message_type(3);
  static const int ExtendSessionResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendSessionResponse, new_graph_version_),
  };
  ExtendSessionResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExtendSessionResponse_descriptor_,
      ExtendSessionResponse::default_instance_,
      ExtendSessionResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ExtendSessionResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendSessionResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendSessionResponse, _is_default_instance_));
  RunStepRequest_descriptor_ = file->message_type(4);
  static const int RunStepRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunStepRequest, session_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunStepRequest, feed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunStepRequest, fetch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunStepRequest, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunStepRequest, options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunStepRequest, partial_run_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunStepRequest, store_errors_in_response_body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunStepRequest, request_id_),
  };
  RunStepRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RunStepRequest_descriptor_,
      RunStepRequest::default_instance_,
      RunStepRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(RunStepRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunStepRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunStepRequest, _is_default_instance_));
  RunStepResponse_descriptor_ = file->message_type(5);
  static const int RunStepResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunStepResponse, tensor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunStepResponse, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunStepResponse, status_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunStepResponse, status_error_message_),
  };
  RunStepResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RunStepResponse_descriptor_,
      RunStepResponse::default_instance_,
      RunStepResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(RunStepResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunStepResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunStepResponse, _is_default_instance_));
  PartialRunSetupRequest_descriptor_ = file->message_type(6);
  static const int PartialRunSetupRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartialRunSetupRequest, session_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartialRunSetupRequest, feed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartialRunSetupRequest, fetch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartialRunSetupRequest, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartialRunSetupRequest, request_id_),
  };
  PartialRunSetupRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PartialRunSetupRequest_descriptor_,
      PartialRunSetupRequest::default_instance_,
      PartialRunSetupRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(PartialRunSetupRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartialRunSetupRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartialRunSetupRequest, _is_default_instance_));
  PartialRunSetupResponse_descriptor_ = file->message_type(7);
  static const int PartialRunSetupResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartialRunSetupResponse, partial_run_handle_),
  };
  PartialRunSetupResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PartialRunSetupResponse_descriptor_,
      PartialRunSetupResponse::default_instance_,
      PartialRunSetupResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(PartialRunSetupResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartialRunSetupResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartialRunSetupResponse, _is_default_instance_));
  CloseSessionRequest_descriptor_ = file->message_type(8);
  static const int CloseSessionRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseSessionRequest, session_handle_),
  };
  CloseSessionRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CloseSessionRequest_descriptor_,
      CloseSessionRequest::default_instance_,
      CloseSessionRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CloseSessionRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseSessionRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseSessionRequest, _is_default_instance_));
  CloseSessionResponse_descriptor_ = file->message_type(9);
  static const int CloseSessionResponse_offsets_[1] = {
  };
  CloseSessionResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CloseSessionResponse_descriptor_,
      CloseSessionResponse::default_instance_,
      CloseSessionResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CloseSessionResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseSessionResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseSessionResponse, _is_default_instance_));
  ResetRequest_descriptor_ = file->message_type(10);
  static const int ResetRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetRequest, container_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetRequest, device_filters_),
  };
  ResetRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResetRequest_descriptor_,
      ResetRequest::default_instance_,
      ResetRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ResetRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetRequest, _is_default_instance_));
  ResetResponse_descriptor_ = file->message_type(11);
  static const int ResetResponse_offsets_[1] = {
  };
  ResetResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResetResponse_descriptor_,
      ResetResponse::default_instance_,
      ResetResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ResetResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetResponse, _is_default_instance_));
  ListDevicesRequest_descriptor_ = file->message_type(12);
  static const int ListDevicesRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDevicesRequest, session_handle_),
  };
  ListDevicesRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListDevicesRequest_descriptor_,
      ListDevicesRequest::default_instance_,
      ListDevicesRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListDevicesRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDevicesRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDevicesRequest, _is_default_instance_));
  ListDevicesResponse_descriptor_ = file->message_type(13);
  static const int ListDevicesResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDevicesResponse, local_device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDevicesResponse, remote_device_),
  };
  ListDevicesResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListDevicesResponse_descriptor_,
      ListDevicesResponse::default_instance_,
      ListDevicesResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListDevicesResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDevicesResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDevicesResponse, _is_default_instance_));
  MakeCallableRequest_descriptor_ = file->message_type(14);
  static const int MakeCallableRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeCallableRequest, session_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeCallableRequest, options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeCallableRequest, request_id_),
  };
  MakeCallableRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MakeCallableRequest_descriptor_,
      MakeCallableRequest::default_instance_,
      MakeCallableRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(MakeCallableRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeCallableRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeCallableRequest, _is_default_instance_));
  MakeCallableResponse_descriptor_ = file->message_type(15);
  static const int MakeCallableResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeCallableResponse, handle_),
  };
  MakeCallableResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MakeCallableResponse_descriptor_,
      MakeCallableResponse::default_instance_,
      MakeCallableResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(MakeCallableResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeCallableResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeCallableResponse, _is_default_instance_));
  RunCallableRequest_descriptor_ = file->message_type(16);
  static const int RunCallableRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunCallableRequest, session_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunCallableRequest, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunCallableRequest, feed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunCallableRequest, request_id_),
  };
  RunCallableRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RunCallableRequest_descriptor_,
      RunCallableRequest::default_instance_,
      RunCallableRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(RunCallableRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunCallableRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunCallableRequest, _is_default_instance_));
  RunCallableResponse_descriptor_ = file->message_type(17);
  static const int RunCallableResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunCallableResponse, fetch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunCallableResponse, metadata_),
  };
  RunCallableResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RunCallableResponse_descriptor_,
      RunCallableResponse::default_instance_,
      RunCallableResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(RunCallableResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunCallableResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunCallableResponse, _is_default_instance_));
  ReleaseCallableRequest_descriptor_ = file->message_type(18);
  static const int ReleaseCallableRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseCallableRequest, session_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseCallableRequest, handle_),
  };
  ReleaseCallableRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReleaseCallableRequest_descriptor_,
      ReleaseCallableRequest::default_instance_,
      ReleaseCallableRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReleaseCallableRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseCallableRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseCallableRequest, _is_default_instance_));
  ReleaseCallableResponse_descriptor_ = file->message_type(19);
  static const int ReleaseCallableResponse_offsets_[1] = {
  };
  ReleaseCallableResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReleaseCallableResponse_descriptor_,
      ReleaseCallableResponse::default_instance_,
      ReleaseCallableResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReleaseCallableResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseCallableResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseCallableResponse, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateSessionRequest_descriptor_, &CreateSessionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateSessionResponse_descriptor_, &CreateSessionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExtendSessionRequest_descriptor_, &ExtendSessionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExtendSessionResponse_descriptor_, &ExtendSessionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RunStepRequest_descriptor_, &RunStepRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RunStepResponse_descriptor_, &RunStepResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PartialRunSetupRequest_descriptor_, &PartialRunSetupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PartialRunSetupResponse_descriptor_, &PartialRunSetupResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CloseSessionRequest_descriptor_, &CloseSessionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CloseSessionResponse_descriptor_, &CloseSessionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResetRequest_descriptor_, &ResetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResetResponse_descriptor_, &ResetResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListDevicesRequest_descriptor_, &ListDevicesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListDevicesResponse_descriptor_, &ListDevicesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MakeCallableRequest_descriptor_, &MakeCallableRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MakeCallableResponse_descriptor_, &MakeCallableResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RunCallableRequest_descriptor_, &RunCallableRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RunCallableResponse_descriptor_, &RunCallableResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReleaseCallableRequest_descriptor_, &ReleaseCallableRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReleaseCallableResponse_descriptor_, &ReleaseCallableResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto() {
  delete CreateSessionRequest::default_instance_;
  delete CreateSessionRequest_reflection_;
  delete CreateSessionResponse::default_instance_;
  delete CreateSessionResponse_reflection_;
  delete ExtendSessionRequest::default_instance_;
  delete ExtendSessionRequest_reflection_;
  delete ExtendSessionResponse::default_instance_;
  delete ExtendSessionResponse_reflection_;
  delete RunStepRequest::default_instance_;
  delete RunStepRequest_reflection_;
  delete RunStepResponse::default_instance_;
  delete RunStepResponse_reflection_;
  delete PartialRunSetupRequest::default_instance_;
  delete PartialRunSetupRequest_reflection_;
  delete PartialRunSetupResponse::default_instance_;
  delete PartialRunSetupResponse_reflection_;
  delete CloseSessionRequest::default_instance_;
  delete CloseSessionRequest_reflection_;
  delete CloseSessionResponse::default_instance_;
  delete CloseSessionResponse_reflection_;
  delete ResetRequest::default_instance_;
  delete ResetRequest_reflection_;
  delete ResetResponse::default_instance_;
  delete ResetResponse_reflection_;
  delete ListDevicesRequest::default_instance_;
  delete ListDevicesRequest_reflection_;
  delete ListDevicesResponse::default_instance_;
  delete ListDevicesResponse_reflection_;
  delete MakeCallableRequest::default_instance_;
  delete MakeCallableRequest_reflection_;
  delete MakeCallableResponse::default_instance_;
  delete MakeCallableResponse_reflection_;
  delete RunCallableRequest::default_instance_;
  delete RunCallableRequest_reflection_;
  delete RunCallableResponse::default_instance_;
  delete RunCallableResponse_reflection_;
  delete ReleaseCallableRequest::default_instance_;
  delete ReleaseCallableRequest_reflection_;
  delete ReleaseCallableResponse::default_instance_;
  delete ReleaseCallableResponse_reflection_;
}

void protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto();
  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2fgraph_2eproto();
  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2ftensor_2eproto();
  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  ::tensorflow::error::protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2ferror_5fcodes_2eproto();
  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fnamed_5ftensor_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n%tensorflow/core/protobuf/master.proto\022"
    "\ntensorflow\0321tensorflow/core/framework/d"
    "evice_attributes.proto\032%tensorflow/core/"
    "framework/graph.proto\032&tensorflow/core/f"
    "ramework/tensor.proto\032%tensorflow/core/p"
    "rotobuf/config.proto\032*tensorflow/core/pr"
    "otobuf/error_codes.proto\032+tensorflow/cor"
    "e/protobuf/named_tensor.proto\"x\n\024CreateS"
    "essionRequest\022\'\n\tgraph_def\030\001 \001(\0132\024.tenso"
    "rflow.GraphDef\022\'\n\006config\030\002 \001(\0132\027.tensorf"
    "low.ConfigProto\022\016\n\006target\030\003 \001(\t\"F\n\025Creat"
    "eSessionResponse\022\026\n\016session_handle\030\001 \001(\t"
    "\022\025\n\rgraph_version\030\002 \001(\003\"v\n\024ExtendSession"
    "Request\022\026\n\016session_handle\030\001 \001(\t\022\'\n\tgraph"
    "_def\030\002 \001(\0132\024.tensorflow.GraphDef\022\035\n\025curr"
    "ent_graph_version\030\003 \001(\003\"2\n\025ExtendSession"
    "Response\022\031\n\021new_graph_version\030\004 \001(\003\"\363\001\n\016"
    "RunStepRequest\022\026\n\016session_handle\030\001 \001(\t\022*"
    "\n\004feed\030\002 \003(\0132\034.tensorflow.NamedTensorPro"
    "to\022\r\n\005fetch\030\003 \003(\t\022\016\n\006target\030\004 \003(\t\022\'\n\007opt"
    "ions\030\005 \001(\0132\026.tensorflow.RunOptions\022\032\n\022pa"
    "rtial_run_handle\030\006 \001(\t\022%\n\035store_errors_i"
    "n_response_body\030\007 \001(\010\022\022\n\nrequest_id\030\010 \001("
    "\003\"\265\001\n\017RunStepResponse\022,\n\006tensor\030\001 \003(\0132\034."
    "tensorflow.NamedTensorProto\022)\n\010metadata\030"
    "\002 \001(\0132\027.tensorflow.RunMetadata\022+\n\013status"
    "_code\030\003 \001(\0162\026.tensorflow.error.Code\022\034\n\024s"
    "tatus_error_message\030\004 \001(\t\"q\n\026PartialRunS"
    "etupRequest\022\026\n\016session_handle\030\001 \001(\t\022\014\n\004f"
    "eed\030\002 \003(\t\022\r\n\005fetch\030\003 \003(\t\022\016\n\006target\030\004 \003(\t"
    "\022\022\n\nrequest_id\030\005 \001(\003\"5\n\027PartialRunSetupR"
    "esponse\022\032\n\022partial_run_handle\030\001 \001(\t\"-\n\023C"
    "loseSessionRequest\022\026\n\016session_handle\030\001 \001"
    "(\t\"\026\n\024CloseSessionResponse\"9\n\014ResetReque"
    "st\022\021\n\tcontainer\030\001 \003(\t\022\026\n\016device_filters\030"
    "\002 \003(\t\"\017\n\rResetResponse\",\n\022ListDevicesReq"
    "uest\022\026\n\016session_handle\030\001 \001(\t\"~\n\023ListDevi"
    "cesResponse\0222\n\014local_device\030\001 \003(\0132\034.tens"
    "orflow.DeviceAttributes\0223\n\rremote_device"
    "\030\002 \003(\0132\034.tensorflow.DeviceAttributes\"o\n\023"
    "MakeCallableRequest\022\026\n\016session_handle\030\001 "
    "\001(\t\022,\n\007options\030\002 \001(\0132\033.tensorflow.Callab"
    "leOptions\022\022\n\nrequest_id\030\003 \001(\003\"&\n\024MakeCal"
    "lableResponse\022\016\n\006handle\030\001 \001(\003\"w\n\022RunCall"
    "ableRequest\022\026\n\016session_handle\030\001 \001(\t\022\016\n\006h"
    "andle\030\002 \001(\003\022%\n\004feed\030\003 \003(\0132\027.tensorflow.T"
    "ensorProto\022\022\n\nrequest_id\030\004 \001(\003\"h\n\023RunCal"
    "lableResponse\022&\n\005fetch\030\001 \003(\0132\027.tensorflo"
    "w.TensorProto\022)\n\010metadata\030\002 \001(\0132\027.tensor"
    "flow.RunMetadata\"@\n\026ReleaseCallableReque"
    "st\022\026\n\016session_handle\030\001 \001(\t\022\016\n\006handle\030\002 \001"
    "(\003\"\031\n\027ReleaseCallableResponseB\205\001\n\032org.te"
    "nsorflow.distruntimeB\030DistributedRuntime"
    "ProtosP\001ZHgithub.com/tensorflow/tensorfl"
    "ow/tensorflow/go/core/core_protos_go_pro"
    "to\370\001\001b\006proto3", 2213);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/protobuf/master.proto", &protobuf_RegisterTypes);
  CreateSessionRequest::default_instance_ = new CreateSessionRequest();
  CreateSessionResponse::default_instance_ = new CreateSessionResponse();
  ExtendSessionRequest::default_instance_ = new ExtendSessionRequest();
  ExtendSessionResponse::default_instance_ = new ExtendSessionResponse();
  RunStepRequest::default_instance_ = new RunStepRequest();
  RunStepResponse::default_instance_ = new RunStepResponse();
  PartialRunSetupRequest::default_instance_ = new PartialRunSetupRequest();
  PartialRunSetupResponse::default_instance_ = new PartialRunSetupResponse();
  CloseSessionRequest::default_instance_ = new CloseSessionRequest();
  CloseSessionResponse::default_instance_ = new CloseSessionResponse();
  ResetRequest::default_instance_ = new ResetRequest();
  ResetResponse::default_instance_ = new ResetResponse();
  ListDevicesRequest::default_instance_ = new ListDevicesRequest();
  ListDevicesResponse::default_instance_ = new ListDevicesResponse();
  MakeCallableRequest::default_instance_ = new MakeCallableRequest();
  MakeCallableResponse::default_instance_ = new MakeCallableResponse();
  RunCallableRequest::default_instance_ = new RunCallableRequest();
  RunCallableResponse::default_instance_ = new RunCallableResponse();
  ReleaseCallableRequest::default_instance_ = new ReleaseCallableRequest();
  ReleaseCallableResponse::default_instance_ = new ReleaseCallableResponse();
  CreateSessionRequest::default_instance_->InitAsDefaultInstance();
  CreateSessionResponse::default_instance_->InitAsDefaultInstance();
  ExtendSessionRequest::default_instance_->InitAsDefaultInstance();
  ExtendSessionResponse::default_instance_->InitAsDefaultInstance();
  RunStepRequest::default_instance_->InitAsDefaultInstance();
  RunStepResponse::default_instance_->InitAsDefaultInstance();
  PartialRunSetupRequest::default_instance_->InitAsDefaultInstance();
  PartialRunSetupResponse::default_instance_->InitAsDefaultInstance();
  CloseSessionRequest::default_instance_->InitAsDefaultInstance();
  CloseSessionResponse::default_instance_->InitAsDefaultInstance();
  ResetRequest::default_instance_->InitAsDefaultInstance();
  ResetResponse::default_instance_->InitAsDefaultInstance();
  ListDevicesRequest::default_instance_->InitAsDefaultInstance();
  ListDevicesResponse::default_instance_->InitAsDefaultInstance();
  MakeCallableRequest::default_instance_->InitAsDefaultInstance();
  MakeCallableResponse::default_instance_->InitAsDefaultInstance();
  RunCallableRequest::default_instance_->InitAsDefaultInstance();
  RunCallableResponse::default_instance_->InitAsDefaultInstance();
  ReleaseCallableRequest::default_instance_->InitAsDefaultInstance();
  ReleaseCallableResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto {
  StaticDescriptorInitializer_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto() {
    protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto();
  }
} static_descriptor_initializer_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_;

// ===================================================================

void CreateSessionRequest::_slow_mutable_graph_def() {
  graph_def_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::GraphDef >(
      GetArenaNoVirtual());
}
::tensorflow::GraphDef* CreateSessionRequest::_slow_release_graph_def() {
  if (graph_def_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::GraphDef* temp = new ::tensorflow::GraphDef;
    temp->MergeFrom(*graph_def_);
    graph_def_ = NULL;
    return temp;
  }
}
::tensorflow::GraphDef* CreateSessionRequest::unsafe_arena_release_graph_def() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.CreateSessionRequest.graph_def)
  
  ::tensorflow::GraphDef* temp = graph_def_;
  graph_def_ = NULL;
  return temp;
}
void CreateSessionRequest::_slow_set_allocated_graph_def(
    ::google::protobuf::Arena* message_arena, ::tensorflow::GraphDef** graph_def) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*graph_def) == NULL) {
      message_arena->Own(*graph_def);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*graph_def)) {
      ::tensorflow::GraphDef* new_graph_def = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::GraphDef >(
            message_arena);
      new_graph_def->CopyFrom(**graph_def);
      *graph_def = new_graph_def;
    }
}
void CreateSessionRequest::unsafe_arena_set_allocated_graph_def(
    ::tensorflow::GraphDef* graph_def) {
  if (GetArenaNoVirtual() == NULL) {
    delete graph_def_;
  }
  graph_def_ = graph_def;
  if (graph_def) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.CreateSessionRequest.graph_def)
}
void CreateSessionRequest::_slow_mutable_config() {
  config_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::ConfigProto >(
      GetArenaNoVirtual());
}
::tensorflow::ConfigProto* CreateSessionRequest::_slow_release_config() {
  if (config_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::ConfigProto* temp = new ::tensorflow::ConfigProto;
    temp->MergeFrom(*config_);
    config_ = NULL;
    return temp;
  }
}
::tensorflow::ConfigProto* CreateSessionRequest::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.CreateSessionRequest.config)
  
  ::tensorflow::ConfigProto* temp = config_;
  config_ = NULL;
  return temp;
}
void CreateSessionRequest::_slow_set_allocated_config(
    ::google::protobuf::Arena* message_arena, ::tensorflow::ConfigProto** config) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*config) == NULL) {
      message_arena->Own(*config);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*config)) {
      ::tensorflow::ConfigProto* new_config = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::ConfigProto >(
            message_arena);
      new_config->CopyFrom(**config);
      *config = new_config;
    }
}
void CreateSessionRequest::unsafe_arena_set_allocated_config(
    ::tensorflow::ConfigProto* config) {
  if (GetArenaNoVirtual() == NULL) {
    delete config_;
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.CreateSessionRequest.config)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateSessionRequest::kGraphDefFieldNumber;
const int CreateSessionRequest::kConfigFieldNumber;
const int CreateSessionRequest::kTargetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateSessionRequest::CreateSessionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CreateSessionRequest)
}

CreateSessionRequest::CreateSessionRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CreateSessionRequest)
}

void CreateSessionRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  graph_def_ = const_cast< ::tensorflow::GraphDef*>(&::tensorflow::GraphDef::default_instance());
  config_ = const_cast< ::tensorflow::ConfigProto*>(&::tensorflow::ConfigProto::default_instance());
}

CreateSessionRequest::CreateSessionRequest(const CreateSessionRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.CreateSessionRequest)
}

void CreateSessionRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  graph_def_ = NULL;
  config_ = NULL;
  target_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CreateSessionRequest::~CreateSessionRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.CreateSessionRequest)
  SharedDtor();
}

void CreateSessionRequest::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  target_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
    delete graph_def_;
    delete config_;
  }
}

void CreateSessionRequest::ArenaDtor(void* object) {
  CreateSessionRequest* _this = reinterpret_cast< CreateSessionRequest* >(object);
  (void)_this;
}
void CreateSessionRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CreateSessionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateSessionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateSessionRequest_descriptor_;
}

const CreateSessionRequest& CreateSessionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto();
  return *default_instance_;
}

CreateSessionRequest* CreateSessionRequest::default_instance_ = NULL;

CreateSessionRequest* CreateSessionRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CreateSessionRequest>(arena);
}

void CreateSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CreateSessionRequest)
  if (GetArenaNoVirtual() == NULL && graph_def_ != NULL) delete graph_def_;
  graph_def_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
  target_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool CreateSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CreateSessionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tensorflow.GraphDef graph_def = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_graph_def()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_config;
        break;
      }

      // optional .tensorflow.ConfigProto config = 2;
      case 2: {
        if (tag == 18) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_target;
        break;
      }

      // optional string target = 3;
      case 3: {
        if (tag == 26) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->target().data(), this->target().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.CreateSessionRequest.target"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CreateSessionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CreateSessionRequest)
  return false;
#undef DO_
}

void CreateSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CreateSessionRequest)
  // optional .tensorflow.GraphDef graph_def = 1;
  if (this->has_graph_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->graph_def_, output);
  }

  // optional .tensorflow.ConfigProto config = 2;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->config_, output);
  }

  // optional string target = 3;
  if (this->target().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CreateSessionRequest.target");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->target(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.CreateSessionRequest)
}

::google::protobuf::uint8* CreateSessionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CreateSessionRequest)
  // optional .tensorflow.GraphDef graph_def = 1;
  if (this->has_graph_def()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->graph_def_, false, target);
  }

  // optional .tensorflow.ConfigProto config = 2;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->config_, false, target);
  }

  // optional string target = 3;
  if (this->target().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CreateSessionRequest.target");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->target(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CreateSessionRequest)
  return target;
}

int CreateSessionRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CreateSessionRequest)
  int total_size = 0;

  // optional .tensorflow.GraphDef graph_def = 1;
  if (this->has_graph_def()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->graph_def_);
  }

  // optional .tensorflow.ConfigProto config = 2;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_);
  }

  // optional string target = 3;
  if (this->target().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->target());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateSessionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CreateSessionRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CreateSessionRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateSessionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CreateSessionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CreateSessionRequest)
    MergeFrom(*source);
  }
}

void CreateSessionRequest::MergeFrom(const CreateSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CreateSessionRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_graph_def()) {
    mutable_graph_def()->::tensorflow::GraphDef::MergeFrom(from.graph_def());
  }
  if (from.has_config()) {
    mutable_config()->::tensorflow::ConfigProto::MergeFrom(from.config());
  }
  if (from.target().size() > 0) {
    set_target(from.target());
  }
}

void CreateSessionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CreateSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSessionRequest::CopyFrom(const CreateSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CreateSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSessionRequest::IsInitialized() const {

  return true;
}

void CreateSessionRequest::Swap(CreateSessionRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CreateSessionRequest temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void CreateSessionRequest::UnsafeArenaSwap(CreateSessionRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CreateSessionRequest::InternalSwap(CreateSessionRequest* other) {
  std::swap(graph_def_, other->graph_def_);
  std::swap(config_, other->config_);
  target_.Swap(&other->target_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateSessionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateSessionRequest_descriptor_;
  metadata.reflection = CreateSessionRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateSessionRequest

// optional .tensorflow.GraphDef graph_def = 1;
bool CreateSessionRequest::has_graph_def() const {
  return !_is_default_instance_ && graph_def_ != NULL;
}
void CreateSessionRequest::clear_graph_def() {
  if (GetArenaNoVirtual() == NULL && graph_def_ != NULL) delete graph_def_;
  graph_def_ = NULL;
}
const ::tensorflow::GraphDef& CreateSessionRequest::graph_def() const {
  // @@protoc_insertion_point(field_get:tensorflow.CreateSessionRequest.graph_def)
  return graph_def_ != NULL ? *graph_def_ : *default_instance_->graph_def_;
}
::tensorflow::GraphDef* CreateSessionRequest::mutable_graph_def() {
  
  if (graph_def_ == NULL) {
    _slow_mutable_graph_def();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.CreateSessionRequest.graph_def)
  return graph_def_;
}
::tensorflow::GraphDef* CreateSessionRequest::release_graph_def() {
  // @@protoc_insertion_point(field_release:tensorflow.CreateSessionRequest.graph_def)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_graph_def();
  } else {
    ::tensorflow::GraphDef* temp = graph_def_;
    graph_def_ = NULL;
    return temp;
  }
}
 void CreateSessionRequest::set_allocated_graph_def(::tensorflow::GraphDef* graph_def) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete graph_def_;
  }
  if (graph_def != NULL) {
    _slow_set_allocated_graph_def(message_arena, &graph_def);
  }
  graph_def_ = graph_def;
  if (graph_def) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CreateSessionRequest.graph_def)
}

// optional .tensorflow.ConfigProto config = 2;
bool CreateSessionRequest::has_config() const {
  return !_is_default_instance_ && config_ != NULL;
}
void CreateSessionRequest::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}
const ::tensorflow::ConfigProto& CreateSessionRequest::config() const {
  // @@protoc_insertion_point(field_get:tensorflow.CreateSessionRequest.config)
  return config_ != NULL ? *config_ : *default_instance_->config_;
}
::tensorflow::ConfigProto* CreateSessionRequest::mutable_config() {
  
  if (config_ == NULL) {
    _slow_mutable_config();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.CreateSessionRequest.config)
  return config_;
}
::tensorflow::ConfigProto* CreateSessionRequest::release_config() {
  // @@protoc_insertion_point(field_release:tensorflow.CreateSessionRequest.config)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_config();
  } else {
    ::tensorflow::ConfigProto* temp = config_;
    config_ = NULL;
    return temp;
  }
}
 void CreateSessionRequest::set_allocated_config(::tensorflow::ConfigProto* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config != NULL) {
    _slow_set_allocated_config(message_arena, &config);
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CreateSessionRequest.config)
}

// optional string target = 3;
void CreateSessionRequest::clear_target() {
  target_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& CreateSessionRequest::target() const {
  // @@protoc_insertion_point(field_get:tensorflow.CreateSessionRequest.target)
  return target_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateSessionRequest::set_target(const ::std::string& value) {
  
  target_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.CreateSessionRequest.target)
}
 void CreateSessionRequest::set_target(const char* value) {
  
  target_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.CreateSessionRequest.target)
}
 void CreateSessionRequest::set_target(const char* value,
    size_t size) {
  
  target_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.CreateSessionRequest.target)
}
 ::std::string* CreateSessionRequest::mutable_target() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.CreateSessionRequest.target)
  return target_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* CreateSessionRequest::release_target() {
  // @@protoc_insertion_point(field_release:tensorflow.CreateSessionRequest.target)
  
  return target_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* CreateSessionRequest::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.CreateSessionRequest.target)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return target_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void CreateSessionRequest::set_allocated_target(::std::string* target) {
  if (target != NULL) {
    
  } else {
    
  }
  target_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CreateSessionRequest.target)
}
 void CreateSessionRequest::unsafe_arena_set_allocated_target(
    ::std::string* target) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (target != NULL) {
    
  } else {
    
  }
  target_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      target, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.CreateSessionRequest.target)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateSessionResponse::kSessionHandleFieldNumber;
const int CreateSessionResponse::kGraphVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateSessionResponse::CreateSessionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CreateSessionResponse)
}

CreateSessionResponse::CreateSessionResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CreateSessionResponse)
}

void CreateSessionResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CreateSessionResponse::CreateSessionResponse(const CreateSessionResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.CreateSessionResponse)
}

void CreateSessionResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  session_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  graph_version_ = GOOGLE_LONGLONG(0);
}

CreateSessionResponse::~CreateSessionResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.CreateSessionResponse)
  SharedDtor();
}

void CreateSessionResponse::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  session_handle_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void CreateSessionResponse::ArenaDtor(void* object) {
  CreateSessionResponse* _this = reinterpret_cast< CreateSessionResponse* >(object);
  (void)_this;
}
void CreateSessionResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CreateSessionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateSessionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateSessionResponse_descriptor_;
}

const CreateSessionResponse& CreateSessionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto();
  return *default_instance_;
}

CreateSessionResponse* CreateSessionResponse::default_instance_ = NULL;

CreateSessionResponse* CreateSessionResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CreateSessionResponse>(arena);
}

void CreateSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CreateSessionResponse)
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  graph_version_ = GOOGLE_LONGLONG(0);
}

bool CreateSessionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CreateSessionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string session_handle = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_handle().data(), this->session_handle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.CreateSessionResponse.session_handle"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_graph_version;
        break;
      }

      // optional int64 graph_version = 2;
      case 2: {
        if (tag == 16) {
         parse_graph_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &graph_version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CreateSessionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CreateSessionResponse)
  return false;
#undef DO_
}

void CreateSessionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CreateSessionResponse)
  // optional string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CreateSessionResponse.session_handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_handle(), output);
  }

  // optional int64 graph_version = 2;
  if (this->graph_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->graph_version(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.CreateSessionResponse)
}

::google::protobuf::uint8* CreateSessionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CreateSessionResponse)
  // optional string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CreateSessionResponse.session_handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session_handle(), target);
  }

  // optional int64 graph_version = 2;
  if (this->graph_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->graph_version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CreateSessionResponse)
  return target;
}

int CreateSessionResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CreateSessionResponse)
  int total_size = 0;

  // optional string session_handle = 1;
  if (this->session_handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_handle());
  }

  // optional int64 graph_version = 2;
  if (this->graph_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->graph_version());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateSessionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CreateSessionResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CreateSessionResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateSessionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CreateSessionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CreateSessionResponse)
    MergeFrom(*source);
  }
}

void CreateSessionResponse::MergeFrom(const CreateSessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CreateSessionResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.session_handle().size() > 0) {
    set_session_handle(from.session_handle());
  }
  if (from.graph_version() != 0) {
    set_graph_version(from.graph_version());
  }
}

void CreateSessionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CreateSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSessionResponse::CopyFrom(const CreateSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CreateSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSessionResponse::IsInitialized() const {

  return true;
}

void CreateSessionResponse::Swap(CreateSessionResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CreateSessionResponse temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void CreateSessionResponse::UnsafeArenaSwap(CreateSessionResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CreateSessionResponse::InternalSwap(CreateSessionResponse* other) {
  session_handle_.Swap(&other->session_handle_);
  std::swap(graph_version_, other->graph_version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateSessionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateSessionResponse_descriptor_;
  metadata.reflection = CreateSessionResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateSessionResponse

// optional string session_handle = 1;
void CreateSessionResponse::clear_session_handle() {
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& CreateSessionResponse::session_handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.CreateSessionResponse.session_handle)
  return session_handle_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateSessionResponse::set_session_handle(const ::std::string& value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.CreateSessionResponse.session_handle)
}
 void CreateSessionResponse::set_session_handle(const char* value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.CreateSessionResponse.session_handle)
}
 void CreateSessionResponse::set_session_handle(const char* value,
    size_t size) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.CreateSessionResponse.session_handle)
}
 ::std::string* CreateSessionResponse::mutable_session_handle() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.CreateSessionResponse.session_handle)
  return session_handle_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* CreateSessionResponse::release_session_handle() {
  // @@protoc_insertion_point(field_release:tensorflow.CreateSessionResponse.session_handle)
  
  return session_handle_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* CreateSessionResponse::unsafe_arena_release_session_handle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.CreateSessionResponse.session_handle)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return session_handle_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void CreateSessionResponse::set_allocated_session_handle(::std::string* session_handle) {
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_handle,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CreateSessionResponse.session_handle)
}
 void CreateSessionResponse::unsafe_arena_set_allocated_session_handle(
    ::std::string* session_handle) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      session_handle, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.CreateSessionResponse.session_handle)
}

// optional int64 graph_version = 2;
void CreateSessionResponse::clear_graph_version() {
  graph_version_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 CreateSessionResponse::graph_version() const {
  // @@protoc_insertion_point(field_get:tensorflow.CreateSessionResponse.graph_version)
  return graph_version_;
}
 void CreateSessionResponse::set_graph_version(::google::protobuf::int64 value) {
  
  graph_version_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CreateSessionResponse.graph_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void ExtendSessionRequest::_slow_mutable_graph_def() {
  graph_def_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::GraphDef >(
      GetArenaNoVirtual());
}
::tensorflow::GraphDef* ExtendSessionRequest::_slow_release_graph_def() {
  if (graph_def_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::GraphDef* temp = new ::tensorflow::GraphDef;
    temp->MergeFrom(*graph_def_);
    graph_def_ = NULL;
    return temp;
  }
}
::tensorflow::GraphDef* ExtendSessionRequest::unsafe_arena_release_graph_def() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ExtendSessionRequest.graph_def)
  
  ::tensorflow::GraphDef* temp = graph_def_;
  graph_def_ = NULL;
  return temp;
}
void ExtendSessionRequest::_slow_set_allocated_graph_def(
    ::google::protobuf::Arena* message_arena, ::tensorflow::GraphDef** graph_def) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*graph_def) == NULL) {
      message_arena->Own(*graph_def);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*graph_def)) {
      ::tensorflow::GraphDef* new_graph_def = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::GraphDef >(
            message_arena);
      new_graph_def->CopyFrom(**graph_def);
      *graph_def = new_graph_def;
    }
}
void ExtendSessionRequest::unsafe_arena_set_allocated_graph_def(
    ::tensorflow::GraphDef* graph_def) {
  if (GetArenaNoVirtual() == NULL) {
    delete graph_def_;
  }
  graph_def_ = graph_def;
  if (graph_def) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ExtendSessionRequest.graph_def)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExtendSessionRequest::kSessionHandleFieldNumber;
const int ExtendSessionRequest::kGraphDefFieldNumber;
const int ExtendSessionRequest::kCurrentGraphVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExtendSessionRequest::ExtendSessionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ExtendSessionRequest)
}

ExtendSessionRequest::ExtendSessionRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ExtendSessionRequest)
}

void ExtendSessionRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  graph_def_ = const_cast< ::tensorflow::GraphDef*>(&::tensorflow::GraphDef::default_instance());
}

ExtendSessionRequest::ExtendSessionRequest(const ExtendSessionRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.ExtendSessionRequest)
}

void ExtendSessionRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  session_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  graph_def_ = NULL;
  current_graph_version_ = GOOGLE_LONGLONG(0);
}

ExtendSessionRequest::~ExtendSessionRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.ExtendSessionRequest)
  SharedDtor();
}

void ExtendSessionRequest::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  session_handle_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
    delete graph_def_;
  }
}

void ExtendSessionRequest::ArenaDtor(void* object) {
  ExtendSessionRequest* _this = reinterpret_cast< ExtendSessionRequest* >(object);
  (void)_this;
}
void ExtendSessionRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ExtendSessionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExtendSessionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtendSessionRequest_descriptor_;
}

const ExtendSessionRequest& ExtendSessionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto();
  return *default_instance_;
}

ExtendSessionRequest* ExtendSessionRequest::default_instance_ = NULL;

ExtendSessionRequest* ExtendSessionRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ExtendSessionRequest>(arena);
}

void ExtendSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ExtendSessionRequest)
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && graph_def_ != NULL) delete graph_def_;
  graph_def_ = NULL;
  current_graph_version_ = GOOGLE_LONGLONG(0);
}

bool ExtendSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.ExtendSessionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string session_handle = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_handle().data(), this->session_handle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.ExtendSessionRequest.session_handle"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_graph_def;
        break;
      }

      // optional .tensorflow.GraphDef graph_def = 2;
      case 2: {
        if (tag == 18) {
         parse_graph_def:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_graph_def()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_current_graph_version;
        break;
      }

      // optional int64 current_graph_version = 3;
      case 3: {
        if (tag == 24) {
         parse_current_graph_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &current_graph_version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.ExtendSessionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.ExtendSessionRequest)
  return false;
#undef DO_
}

void ExtendSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.ExtendSessionRequest)
  // optional string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ExtendSessionRequest.session_handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_handle(), output);
  }

  // optional .tensorflow.GraphDef graph_def = 2;
  if (this->has_graph_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->graph_def_, output);
  }

  // optional int64 current_graph_version = 3;
  if (this->current_graph_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->current_graph_version(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.ExtendSessionRequest)
}

::google::protobuf::uint8* ExtendSessionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ExtendSessionRequest)
  // optional string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ExtendSessionRequest.session_handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session_handle(), target);
  }

  // optional .tensorflow.GraphDef graph_def = 2;
  if (this->has_graph_def()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->graph_def_, false, target);
  }

  // optional int64 current_graph_version = 3;
  if (this->current_graph_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->current_graph_version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ExtendSessionRequest)
  return target;
}

int ExtendSessionRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ExtendSessionRequest)
  int total_size = 0;

  // optional string session_handle = 1;
  if (this->session_handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_handle());
  }

  // optional .tensorflow.GraphDef graph_def = 2;
  if (this->has_graph_def()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->graph_def_);
  }

  // optional int64 current_graph_version = 3;
  if (this->current_graph_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->current_graph_version());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtendSessionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ExtendSessionRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ExtendSessionRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ExtendSessionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ExtendSessionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ExtendSessionRequest)
    MergeFrom(*source);
  }
}

void ExtendSessionRequest::MergeFrom(const ExtendSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ExtendSessionRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.session_handle().size() > 0) {
    set_session_handle(from.session_handle());
  }
  if (from.has_graph_def()) {
    mutable_graph_def()->::tensorflow::GraphDef::MergeFrom(from.graph_def());
  }
  if (from.current_graph_version() != 0) {
    set_current_graph_version(from.current_graph_version());
  }
}

void ExtendSessionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ExtendSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtendSessionRequest::CopyFrom(const ExtendSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ExtendSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtendSessionRequest::IsInitialized() const {

  return true;
}

void ExtendSessionRequest::Swap(ExtendSessionRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ExtendSessionRequest temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ExtendSessionRequest::UnsafeArenaSwap(ExtendSessionRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ExtendSessionRequest::InternalSwap(ExtendSessionRequest* other) {
  session_handle_.Swap(&other->session_handle_);
  std::swap(graph_def_, other->graph_def_);
  std::swap(current_graph_version_, other->current_graph_version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExtendSessionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExtendSessionRequest_descriptor_;
  metadata.reflection = ExtendSessionRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExtendSessionRequest

// optional string session_handle = 1;
void ExtendSessionRequest::clear_session_handle() {
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& ExtendSessionRequest::session_handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.ExtendSessionRequest.session_handle)
  return session_handle_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExtendSessionRequest::set_session_handle(const ::std::string& value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.ExtendSessionRequest.session_handle)
}
 void ExtendSessionRequest::set_session_handle(const char* value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.ExtendSessionRequest.session_handle)
}
 void ExtendSessionRequest::set_session_handle(const char* value,
    size_t size) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.ExtendSessionRequest.session_handle)
}
 ::std::string* ExtendSessionRequest::mutable_session_handle() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.ExtendSessionRequest.session_handle)
  return session_handle_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* ExtendSessionRequest::release_session_handle() {
  // @@protoc_insertion_point(field_release:tensorflow.ExtendSessionRequest.session_handle)
  
  return session_handle_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* ExtendSessionRequest::unsafe_arena_release_session_handle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ExtendSessionRequest.session_handle)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return session_handle_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void ExtendSessionRequest::set_allocated_session_handle(::std::string* session_handle) {
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_handle,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ExtendSessionRequest.session_handle)
}
 void ExtendSessionRequest::unsafe_arena_set_allocated_session_handle(
    ::std::string* session_handle) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      session_handle, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ExtendSessionRequest.session_handle)
}

// optional .tensorflow.GraphDef graph_def = 2;
bool ExtendSessionRequest::has_graph_def() const {
  return !_is_default_instance_ && graph_def_ != NULL;
}
void ExtendSessionRequest::clear_graph_def() {
  if (GetArenaNoVirtual() == NULL && graph_def_ != NULL) delete graph_def_;
  graph_def_ = NULL;
}
const ::tensorflow::GraphDef& ExtendSessionRequest::graph_def() const {
  // @@protoc_insertion_point(field_get:tensorflow.ExtendSessionRequest.graph_def)
  return graph_def_ != NULL ? *graph_def_ : *default_instance_->graph_def_;
}
::tensorflow::GraphDef* ExtendSessionRequest::mutable_graph_def() {
  
  if (graph_def_ == NULL) {
    _slow_mutable_graph_def();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ExtendSessionRequest.graph_def)
  return graph_def_;
}
::tensorflow::GraphDef* ExtendSessionRequest::release_graph_def() {
  // @@protoc_insertion_point(field_release:tensorflow.ExtendSessionRequest.graph_def)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_graph_def();
  } else {
    ::tensorflow::GraphDef* temp = graph_def_;
    graph_def_ = NULL;
    return temp;
  }
}
 void ExtendSessionRequest::set_allocated_graph_def(::tensorflow::GraphDef* graph_def) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete graph_def_;
  }
  if (graph_def != NULL) {
    _slow_set_allocated_graph_def(message_arena, &graph_def);
  }
  graph_def_ = graph_def;
  if (graph_def) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ExtendSessionRequest.graph_def)
}

// optional int64 current_graph_version = 3;
void ExtendSessionRequest::clear_current_graph_version() {
  current_graph_version_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ExtendSessionRequest::current_graph_version() const {
  // @@protoc_insertion_point(field_get:tensorflow.ExtendSessionRequest.current_graph_version)
  return current_graph_version_;
}
 void ExtendSessionRequest::set_current_graph_version(::google::protobuf::int64 value) {
  
  current_graph_version_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ExtendSessionRequest.current_graph_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExtendSessionResponse::kNewGraphVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExtendSessionResponse::ExtendSessionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ExtendSessionResponse)
}

ExtendSessionResponse::ExtendSessionResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ExtendSessionResponse)
}

void ExtendSessionResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ExtendSessionResponse::ExtendSessionResponse(const ExtendSessionResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.ExtendSessionResponse)
}

void ExtendSessionResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  new_graph_version_ = GOOGLE_LONGLONG(0);
}

ExtendSessionResponse::~ExtendSessionResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.ExtendSessionResponse)
  SharedDtor();
}

void ExtendSessionResponse::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void ExtendSessionResponse::ArenaDtor(void* object) {
  ExtendSessionResponse* _this = reinterpret_cast< ExtendSessionResponse* >(object);
  (void)_this;
}
void ExtendSessionResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ExtendSessionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExtendSessionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtendSessionResponse_descriptor_;
}

const ExtendSessionResponse& ExtendSessionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto();
  return *default_instance_;
}

ExtendSessionResponse* ExtendSessionResponse::default_instance_ = NULL;

ExtendSessionResponse* ExtendSessionResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ExtendSessionResponse>(arena);
}

void ExtendSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ExtendSessionResponse)
  new_graph_version_ = GOOGLE_LONGLONG(0);
}

bool ExtendSessionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.ExtendSessionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 new_graph_version = 4;
      case 4: {
        if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &new_graph_version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.ExtendSessionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.ExtendSessionResponse)
  return false;
#undef DO_
}

void ExtendSessionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.ExtendSessionResponse)
  // optional int64 new_graph_version = 4;
  if (this->new_graph_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->new_graph_version(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.ExtendSessionResponse)
}

::google::protobuf::uint8* ExtendSessionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ExtendSessionResponse)
  // optional int64 new_graph_version = 4;
  if (this->new_graph_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->new_graph_version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ExtendSessionResponse)
  return target;
}

int ExtendSessionResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ExtendSessionResponse)
  int total_size = 0;

  // optional int64 new_graph_version = 4;
  if (this->new_graph_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->new_graph_version());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtendSessionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ExtendSessionResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ExtendSessionResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ExtendSessionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ExtendSessionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ExtendSessionResponse)
    MergeFrom(*source);
  }
}

void ExtendSessionResponse::MergeFrom(const ExtendSessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ExtendSessionResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.new_graph_version() != 0) {
    set_new_graph_version(from.new_graph_version());
  }
}

void ExtendSessionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ExtendSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtendSessionResponse::CopyFrom(const ExtendSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ExtendSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtendSessionResponse::IsInitialized() const {

  return true;
}

void ExtendSessionResponse::Swap(ExtendSessionResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ExtendSessionResponse temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ExtendSessionResponse::UnsafeArenaSwap(ExtendSessionResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ExtendSessionResponse::InternalSwap(ExtendSessionResponse* other) {
  std::swap(new_graph_version_, other->new_graph_version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExtendSessionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExtendSessionResponse_descriptor_;
  metadata.reflection = ExtendSessionResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExtendSessionResponse

// optional int64 new_graph_version = 4;
void ExtendSessionResponse::clear_new_graph_version() {
  new_graph_version_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ExtendSessionResponse::new_graph_version() const {
  // @@protoc_insertion_point(field_get:tensorflow.ExtendSessionResponse.new_graph_version)
  return new_graph_version_;
}
 void ExtendSessionResponse::set_new_graph_version(::google::protobuf::int64 value) {
  
  new_graph_version_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ExtendSessionResponse.new_graph_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void RunStepRequest::_slow_mutable_options() {
  options_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::RunOptions >(
      GetArenaNoVirtual());
}
::tensorflow::RunOptions* RunStepRequest::_slow_release_options() {
  if (options_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::RunOptions* temp = new ::tensorflow::RunOptions;
    temp->MergeFrom(*options_);
    options_ = NULL;
    return temp;
  }
}
::tensorflow::RunOptions* RunStepRequest::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RunStepRequest.options)
  
  ::tensorflow::RunOptions* temp = options_;
  options_ = NULL;
  return temp;
}
void RunStepRequest::_slow_set_allocated_options(
    ::google::protobuf::Arena* message_arena, ::tensorflow::RunOptions** options) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*options) == NULL) {
      message_arena->Own(*options);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*options)) {
      ::tensorflow::RunOptions* new_options = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::RunOptions >(
            message_arena);
      new_options->CopyFrom(**options);
      *options = new_options;
    }
}
void RunStepRequest::unsafe_arena_set_allocated_options(
    ::tensorflow::RunOptions* options) {
  if (GetArenaNoVirtual() == NULL) {
    delete options_;
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RunStepRequest.options)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunStepRequest::kSessionHandleFieldNumber;
const int RunStepRequest::kFeedFieldNumber;
const int RunStepRequest::kFetchFieldNumber;
const int RunStepRequest::kTargetFieldNumber;
const int RunStepRequest::kOptionsFieldNumber;
const int RunStepRequest::kPartialRunHandleFieldNumber;
const int RunStepRequest::kStoreErrorsInResponseBodyFieldNumber;
const int RunStepRequest::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunStepRequest::RunStepRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RunStepRequest)
}

RunStepRequest::RunStepRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  feed_(arena),
  fetch_(arena),
  target_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RunStepRequest)
}

void RunStepRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  options_ = const_cast< ::tensorflow::RunOptions*>(&::tensorflow::RunOptions::default_instance());
}

RunStepRequest::RunStepRequest(const RunStepRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.RunStepRequest)
}

void RunStepRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  session_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  options_ = NULL;
  partial_run_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  store_errors_in_response_body_ = false;
  request_id_ = GOOGLE_LONGLONG(0);
}

RunStepRequest::~RunStepRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.RunStepRequest)
  SharedDtor();
}

void RunStepRequest::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  session_handle_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  partial_run_handle_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
    delete options_;
  }
}

void RunStepRequest::ArenaDtor(void* object) {
  RunStepRequest* _this = reinterpret_cast< RunStepRequest* >(object);
  (void)_this;
}
void RunStepRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RunStepRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunStepRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunStepRequest_descriptor_;
}

const RunStepRequest& RunStepRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto();
  return *default_instance_;
}

RunStepRequest* RunStepRequest::default_instance_ = NULL;

RunStepRequest* RunStepRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RunStepRequest>(arena);
}

void RunStepRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RunStepRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RunStepRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RunStepRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(request_id_, store_errors_in_response_body_);
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && options_ != NULL) delete options_;
  options_ = NULL;
  partial_run_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());

#undef ZR_HELPER_
#undef ZR_

  feed_.Clear();
  fetch_.Clear();
  target_.Clear();
}

bool RunStepRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RunStepRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string session_handle = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_handle().data(), this->session_handle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.RunStepRequest.session_handle"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_feed;
        break;
      }

      // repeated .tensorflow.NamedTensorProto feed = 2;
      case 2: {
        if (tag == 18) {
         parse_feed:
          DO_(input->IncrementRecursionDepth());
         parse_loop_feed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_feed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_feed;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_fetch;
        break;
      }

      // repeated string fetch = 3;
      case 3: {
        if (tag == 26) {
         parse_fetch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fetch()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fetch(this->fetch_size() - 1).data(),
            this->fetch(this->fetch_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.RunStepRequest.fetch"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fetch;
        if (input->ExpectTag(34)) goto parse_target;
        break;
      }

      // repeated string target = 4;
      case 4: {
        if (tag == 34) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_target()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->target(this->target_size() - 1).data(),
            this->target(this->target_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.RunStepRequest.target"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_target;
        if (input->ExpectTag(42)) goto parse_options;
        break;
      }

      // optional .tensorflow.RunOptions options = 5;
      case 5: {
        if (tag == 42) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_partial_run_handle;
        break;
      }

      // optional string partial_run_handle = 6;
      case 6: {
        if (tag == 50) {
         parse_partial_run_handle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partial_run_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partial_run_handle().data(), this->partial_run_handle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.RunStepRequest.partial_run_handle"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_store_errors_in_response_body;
        break;
      }

      // optional bool store_errors_in_response_body = 7;
      case 7: {
        if (tag == 56) {
         parse_store_errors_in_response_body:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &store_errors_in_response_body_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_request_id;
        break;
      }

      // optional int64 request_id = 8;
      case 8: {
        if (tag == 64) {
         parse_request_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RunStepRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RunStepRequest)
  return false;
#undef DO_
}

void RunStepRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RunStepRequest)
  // optional string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunStepRequest.session_handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_handle(), output);
  }

  // repeated .tensorflow.NamedTensorProto feed = 2;
  for (unsigned int i = 0, n = this->feed_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->feed(i), output);
  }

  // repeated string fetch = 3;
  for (int i = 0; i < this->fetch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fetch(i).data(), this->fetch(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunStepRequest.fetch");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->fetch(i), output);
  }

  // repeated string target = 4;
  for (int i = 0; i < this->target_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target(i).data(), this->target(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunStepRequest.target");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->target(i), output);
  }

  // optional .tensorflow.RunOptions options = 5;
  if (this->has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->options_, output);
  }

  // optional string partial_run_handle = 6;
  if (this->partial_run_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partial_run_handle().data(), this->partial_run_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunStepRequest.partial_run_handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->partial_run_handle(), output);
  }

  // optional bool store_errors_in_response_body = 7;
  if (this->store_errors_in_response_body() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->store_errors_in_response_body(), output);
  }

  // optional int64 request_id = 8;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->request_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.RunStepRequest)
}

::google::protobuf::uint8* RunStepRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RunStepRequest)
  // optional string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunStepRequest.session_handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session_handle(), target);
  }

  // repeated .tensorflow.NamedTensorProto feed = 2;
  for (unsigned int i = 0, n = this->feed_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->feed(i), false, target);
  }

  // repeated string fetch = 3;
  for (int i = 0; i < this->fetch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fetch(i).data(), this->fetch(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunStepRequest.fetch");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->fetch(i), target);
  }

  // repeated string target = 4;
  for (int i = 0; i < this->target_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target(i).data(), this->target(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunStepRequest.target");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->target(i), target);
  }

  // optional .tensorflow.RunOptions options = 5;
  if (this->has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->options_, false, target);
  }

  // optional string partial_run_handle = 6;
  if (this->partial_run_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partial_run_handle().data(), this->partial_run_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunStepRequest.partial_run_handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->partial_run_handle(), target);
  }

  // optional bool store_errors_in_response_body = 7;
  if (this->store_errors_in_response_body() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->store_errors_in_response_body(), target);
  }

  // optional int64 request_id = 8;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->request_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RunStepRequest)
  return target;
}

int RunStepRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RunStepRequest)
  int total_size = 0;

  // optional string session_handle = 1;
  if (this->session_handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_handle());
  }

  // optional .tensorflow.RunOptions options = 5;
  if (this->has_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->options_);
  }

  // optional string partial_run_handle = 6;
  if (this->partial_run_handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partial_run_handle());
  }

  // optional bool store_errors_in_response_body = 7;
  if (this->store_errors_in_response_body() != 0) {
    total_size += 1 + 1;
  }

  // optional int64 request_id = 8;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->request_id());
  }

  // repeated .tensorflow.NamedTensorProto feed = 2;
  total_size += 1 * this->feed_size();
  for (int i = 0; i < this->feed_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->feed(i));
  }

  // repeated string fetch = 3;
  total_size += 1 * this->fetch_size();
  for (int i = 0; i < this->fetch_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fetch(i));
  }

  // repeated string target = 4;
  total_size += 1 * this->target_size();
  for (int i = 0; i < this->target_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->target(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunStepRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RunStepRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RunStepRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RunStepRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RunStepRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RunStepRequest)
    MergeFrom(*source);
  }
}

void RunStepRequest::MergeFrom(const RunStepRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RunStepRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  feed_.MergeFrom(from.feed_);
  fetch_.MergeFrom(from.fetch_);
  target_.MergeFrom(from.target_);
  if (from.session_handle().size() > 0) {
    set_session_handle(from.session_handle());
  }
  if (from.has_options()) {
    mutable_options()->::tensorflow::RunOptions::MergeFrom(from.options());
  }
  if (from.partial_run_handle().size() > 0) {
    set_partial_run_handle(from.partial_run_handle());
  }
  if (from.store_errors_in_response_body() != 0) {
    set_store_errors_in_response_body(from.store_errors_in_response_body());
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
}

void RunStepRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RunStepRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunStepRequest::CopyFrom(const RunStepRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RunStepRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunStepRequest::IsInitialized() const {

  return true;
}

void RunStepRequest::Swap(RunStepRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RunStepRequest temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void RunStepRequest::UnsafeArenaSwap(RunStepRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RunStepRequest::InternalSwap(RunStepRequest* other) {
  session_handle_.Swap(&other->session_handle_);
  feed_.UnsafeArenaSwap(&other->feed_);
  fetch_.UnsafeArenaSwap(&other->fetch_);
  target_.UnsafeArenaSwap(&other->target_);
  std::swap(options_, other->options_);
  partial_run_handle_.Swap(&other->partial_run_handle_);
  std::swap(store_errors_in_response_body_, other->store_errors_in_response_body_);
  std::swap(request_id_, other->request_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RunStepRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunStepRequest_descriptor_;
  metadata.reflection = RunStepRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RunStepRequest

// optional string session_handle = 1;
void RunStepRequest::clear_session_handle() {
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& RunStepRequest::session_handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunStepRequest.session_handle)
  return session_handle_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RunStepRequest::set_session_handle(const ::std::string& value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.RunStepRequest.session_handle)
}
 void RunStepRequest::set_session_handle(const char* value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.RunStepRequest.session_handle)
}
 void RunStepRequest::set_session_handle(const char* value,
    size_t size) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.RunStepRequest.session_handle)
}
 ::std::string* RunStepRequest::mutable_session_handle() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.RunStepRequest.session_handle)
  return session_handle_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* RunStepRequest::release_session_handle() {
  // @@protoc_insertion_point(field_release:tensorflow.RunStepRequest.session_handle)
  
  return session_handle_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* RunStepRequest::unsafe_arena_release_session_handle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RunStepRequest.session_handle)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return session_handle_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void RunStepRequest::set_allocated_session_handle(::std::string* session_handle) {
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_handle,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunStepRequest.session_handle)
}
 void RunStepRequest::unsafe_arena_set_allocated_session_handle(
    ::std::string* session_handle) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      session_handle, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RunStepRequest.session_handle)
}

// repeated .tensorflow.NamedTensorProto feed = 2;
int RunStepRequest::feed_size() const {
  return feed_.size();
}
void RunStepRequest::clear_feed() {
  feed_.Clear();
}
const ::tensorflow::NamedTensorProto& RunStepRequest::feed(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.RunStepRequest.feed)
  return feed_.Get(index);
}
::tensorflow::NamedTensorProto* RunStepRequest::mutable_feed(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.RunStepRequest.feed)
  return feed_.Mutable(index);
}
::tensorflow::NamedTensorProto* RunStepRequest::add_feed() {
  // @@protoc_insertion_point(field_add:tensorflow.RunStepRequest.feed)
  return feed_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::NamedTensorProto >*
RunStepRequest::mutable_feed() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.RunStepRequest.feed)
  return &feed_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::NamedTensorProto >&
RunStepRequest::feed() const {
  // @@protoc_insertion_point(field_list:tensorflow.RunStepRequest.feed)
  return feed_;
}

// repeated string fetch = 3;
int RunStepRequest::fetch_size() const {
  return fetch_.size();
}
void RunStepRequest::clear_fetch() {
  fetch_.Clear();
}
 const ::std::string& RunStepRequest::fetch(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.RunStepRequest.fetch)
  return fetch_.Get(index);
}
 ::std::string* RunStepRequest::mutable_fetch(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.RunStepRequest.fetch)
  return fetch_.Mutable(index);
}
 void RunStepRequest::set_fetch(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.RunStepRequest.fetch)
  fetch_.Mutable(index)->assign(value);
}
 void RunStepRequest::set_fetch(int index, const char* value) {
  fetch_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.RunStepRequest.fetch)
}
 void RunStepRequest::set_fetch(int index, const char* value, size_t size) {
  fetch_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.RunStepRequest.fetch)
}
 ::std::string* RunStepRequest::add_fetch() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.RunStepRequest.fetch)
  return fetch_.Add();
}
 void RunStepRequest::add_fetch(const ::std::string& value) {
  fetch_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.RunStepRequest.fetch)
}
 void RunStepRequest::add_fetch(const char* value) {
  fetch_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.RunStepRequest.fetch)
}
 void RunStepRequest::add_fetch(const char* value, size_t size) {
  fetch_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.RunStepRequest.fetch)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
RunStepRequest::fetch() const {
  // @@protoc_insertion_point(field_list:tensorflow.RunStepRequest.fetch)
  return fetch_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
RunStepRequest::mutable_fetch() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.RunStepRequest.fetch)
  return &fetch_;
}

// repeated string target = 4;
int RunStepRequest::target_size() const {
  return target_.size();
}
void RunStepRequest::clear_target() {
  target_.Clear();
}
 const ::std::string& RunStepRequest::target(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.RunStepRequest.target)
  return target_.Get(index);
}
 ::std::string* RunStepRequest::mutable_target(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.RunStepRequest.target)
  return target_.Mutable(index);
}
 void RunStepRequest::set_target(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.RunStepRequest.target)
  target_.Mutable(index)->assign(value);
}
 void RunStepRequest::set_target(int index, const char* value) {
  target_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.RunStepRequest.target)
}
 void RunStepRequest::set_target(int index, const char* value, size_t size) {
  target_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.RunStepRequest.target)
}
 ::std::string* RunStepRequest::add_target() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.RunStepRequest.target)
  return target_.Add();
}
 void RunStepRequest::add_target(const ::std::string& value) {
  target_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.RunStepRequest.target)
}
 void RunStepRequest::add_target(const char* value) {
  target_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.RunStepRequest.target)
}
 void RunStepRequest::add_target(const char* value, size_t size) {
  target_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.RunStepRequest.target)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
RunStepRequest::target() const {
  // @@protoc_insertion_point(field_list:tensorflow.RunStepRequest.target)
  return target_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
RunStepRequest::mutable_target() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.RunStepRequest.target)
  return &target_;
}

// optional .tensorflow.RunOptions options = 5;
bool RunStepRequest::has_options() const {
  return !_is_default_instance_ && options_ != NULL;
}
void RunStepRequest::clear_options() {
  if (GetArenaNoVirtual() == NULL && options_ != NULL) delete options_;
  options_ = NULL;
}
const ::tensorflow::RunOptions& RunStepRequest::options() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunStepRequest.options)
  return options_ != NULL ? *options_ : *default_instance_->options_;
}
::tensorflow::RunOptions* RunStepRequest::mutable_options() {
  
  if (options_ == NULL) {
    _slow_mutable_options();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RunStepRequest.options)
  return options_;
}
::tensorflow::RunOptions* RunStepRequest::release_options() {
  // @@protoc_insertion_point(field_release:tensorflow.RunStepRequest.options)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_options();
  } else {
    ::tensorflow::RunOptions* temp = options_;
    options_ = NULL;
    return temp;
  }
}
 void RunStepRequest::set_allocated_options(::tensorflow::RunOptions* options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete options_;
  }
  if (options != NULL) {
    _slow_set_allocated_options(message_arena, &options);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunStepRequest.options)
}

// optional string partial_run_handle = 6;
void RunStepRequest::clear_partial_run_handle() {
  partial_run_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& RunStepRequest::partial_run_handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunStepRequest.partial_run_handle)
  return partial_run_handle_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RunStepRequest::set_partial_run_handle(const ::std::string& value) {
  
  partial_run_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.RunStepRequest.partial_run_handle)
}
 void RunStepRequest::set_partial_run_handle(const char* value) {
  
  partial_run_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.RunStepRequest.partial_run_handle)
}
 void RunStepRequest::set_partial_run_handle(const char* value,
    size_t size) {
  
  partial_run_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.RunStepRequest.partial_run_handle)
}
 ::std::string* RunStepRequest::mutable_partial_run_handle() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.RunStepRequest.partial_run_handle)
  return partial_run_handle_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* RunStepRequest::release_partial_run_handle() {
  // @@protoc_insertion_point(field_release:tensorflow.RunStepRequest.partial_run_handle)
  
  return partial_run_handle_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* RunStepRequest::unsafe_arena_release_partial_run_handle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RunStepRequest.partial_run_handle)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return partial_run_handle_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void RunStepRequest::set_allocated_partial_run_handle(::std::string* partial_run_handle) {
  if (partial_run_handle != NULL) {
    
  } else {
    
  }
  partial_run_handle_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), partial_run_handle,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunStepRequest.partial_run_handle)
}
 void RunStepRequest::unsafe_arena_set_allocated_partial_run_handle(
    ::std::string* partial_run_handle) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (partial_run_handle != NULL) {
    
  } else {
    
  }
  partial_run_handle_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      partial_run_handle, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RunStepRequest.partial_run_handle)
}

// optional bool store_errors_in_response_body = 7;
void RunStepRequest::clear_store_errors_in_response_body() {
  store_errors_in_response_body_ = false;
}
 bool RunStepRequest::store_errors_in_response_body() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunStepRequest.store_errors_in_response_body)
  return store_errors_in_response_body_;
}
 void RunStepRequest::set_store_errors_in_response_body(bool value) {
  
  store_errors_in_response_body_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RunStepRequest.store_errors_in_response_body)
}

// optional int64 request_id = 8;
void RunStepRequest::clear_request_id() {
  request_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RunStepRequest::request_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunStepRequest.request_id)
  return request_id_;
}
 void RunStepRequest::set_request_id(::google::protobuf::int64 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RunStepRequest.request_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void RunStepResponse::_slow_mutable_metadata() {
  metadata_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::RunMetadata >(
      GetArenaNoVirtual());
}
::tensorflow::RunMetadata* RunStepResponse::_slow_release_metadata() {
  if (metadata_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::RunMetadata* temp = new ::tensorflow::RunMetadata;
    temp->MergeFrom(*metadata_);
    metadata_ = NULL;
    return temp;
  }
}
::tensorflow::RunMetadata* RunStepResponse::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RunStepResponse.metadata)
  
  ::tensorflow::RunMetadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
void RunStepResponse::_slow_set_allocated_metadata(
    ::google::protobuf::Arena* message_arena, ::tensorflow::RunMetadata** metadata) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*metadata) == NULL) {
      message_arena->Own(*metadata);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*metadata)) {
      ::tensorflow::RunMetadata* new_metadata = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::RunMetadata >(
            message_arena);
      new_metadata->CopyFrom(**metadata);
      *metadata = new_metadata;
    }
}
void RunStepResponse::unsafe_arena_set_allocated_metadata(
    ::tensorflow::RunMetadata* metadata) {
  if (GetArenaNoVirtual() == NULL) {
    delete metadata_;
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RunStepResponse.metadata)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunStepResponse::kTensorFieldNumber;
const int RunStepResponse::kMetadataFieldNumber;
const int RunStepResponse::kStatusCodeFieldNumber;
const int RunStepResponse::kStatusErrorMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunStepResponse::RunStepResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RunStepResponse)
}

RunStepResponse::RunStepResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  tensor_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RunStepResponse)
}

void RunStepResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  metadata_ = const_cast< ::tensorflow::RunMetadata*>(&::tensorflow::RunMetadata::default_instance());
}

RunStepResponse::RunStepResponse(const RunStepResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.RunStepResponse)
}

void RunStepResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  metadata_ = NULL;
  status_code_ = 0;
  status_error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RunStepResponse::~RunStepResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.RunStepResponse)
  SharedDtor();
}

void RunStepResponse::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  status_error_message_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
    delete metadata_;
  }
}

void RunStepResponse::ArenaDtor(void* object) {
  RunStepResponse* _this = reinterpret_cast< RunStepResponse* >(object);
  (void)_this;
}
void RunStepResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RunStepResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunStepResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunStepResponse_descriptor_;
}

const RunStepResponse& RunStepResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto();
  return *default_instance_;
}

RunStepResponse* RunStepResponse::default_instance_ = NULL;

RunStepResponse* RunStepResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RunStepResponse>(arena);
}

void RunStepResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RunStepResponse)
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
  status_code_ = 0;
  status_error_message_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  tensor_.Clear();
}

bool RunStepResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RunStepResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.NamedTensorProto tensor = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_tensor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tensor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_tensor;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_metadata;
        break;
      }

      // optional .tensorflow.RunMetadata metadata = 2;
      case 2: {
        if (tag == 18) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status_code;
        break;
      }

      // optional .tensorflow.error.Code status_code = 3;
      case 3: {
        if (tag == 24) {
         parse_status_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status_code(static_cast< ::tensorflow::error::Code >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_status_error_message;
        break;
      }

      // optional string status_error_message = 4;
      case 4: {
        if (tag == 34) {
         parse_status_error_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status_error_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status_error_message().data(), this->status_error_message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.RunStepResponse.status_error_message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RunStepResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RunStepResponse)
  return false;
#undef DO_
}

void RunStepResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RunStepResponse)
  // repeated .tensorflow.NamedTensorProto tensor = 1;
  for (unsigned int i = 0, n = this->tensor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tensor(i), output);
  }

  // optional .tensorflow.RunMetadata metadata = 2;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->metadata_, output);
  }

  // optional .tensorflow.error.Code status_code = 3;
  if (this->status_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status_code(), output);
  }

  // optional string status_error_message = 4;
  if (this->status_error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status_error_message().data(), this->status_error_message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunStepResponse.status_error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->status_error_message(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.RunStepResponse)
}

::google::protobuf::uint8* RunStepResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RunStepResponse)
  // repeated .tensorflow.NamedTensorProto tensor = 1;
  for (unsigned int i = 0, n = this->tensor_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->tensor(i), false, target);
  }

  // optional .tensorflow.RunMetadata metadata = 2;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->metadata_, false, target);
  }

  // optional .tensorflow.error.Code status_code = 3;
  if (this->status_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status_code(), target);
  }

  // optional string status_error_message = 4;
  if (this->status_error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status_error_message().data(), this->status_error_message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunStepResponse.status_error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->status_error_message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RunStepResponse)
  return target;
}

int RunStepResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RunStepResponse)
  int total_size = 0;

  // optional .tensorflow.RunMetadata metadata = 2;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->metadata_);
  }

  // optional .tensorflow.error.Code status_code = 3;
  if (this->status_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status_code());
  }

  // optional string status_error_message = 4;
  if (this->status_error_message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status_error_message());
  }

  // repeated .tensorflow.NamedTensorProto tensor = 1;
  total_size += 1 * this->tensor_size();
  for (int i = 0; i < this->tensor_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tensor(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunStepResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RunStepResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RunStepResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RunStepResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RunStepResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RunStepResponse)
    MergeFrom(*source);
  }
}

void RunStepResponse::MergeFrom(const RunStepResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RunStepResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  tensor_.MergeFrom(from.tensor_);
  if (from.has_metadata()) {
    mutable_metadata()->::tensorflow::RunMetadata::MergeFrom(from.metadata());
  }
  if (from.status_code() != 0) {
    set_status_code(from.status_code());
  }
  if (from.status_error_message().size() > 0) {
    set_status_error_message(from.status_error_message());
  }
}

void RunStepResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RunStepResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunStepResponse::CopyFrom(const RunStepResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RunStepResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunStepResponse::IsInitialized() const {

  return true;
}

void RunStepResponse::Swap(RunStepResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RunStepResponse temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void RunStepResponse::UnsafeArenaSwap(RunStepResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RunStepResponse::InternalSwap(RunStepResponse* other) {
  tensor_.UnsafeArenaSwap(&other->tensor_);
  std::swap(metadata_, other->metadata_);
  std::swap(status_code_, other->status_code_);
  status_error_message_.Swap(&other->status_error_message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RunStepResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunStepResponse_descriptor_;
  metadata.reflection = RunStepResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RunStepResponse

// repeated .tensorflow.NamedTensorProto tensor = 1;
int RunStepResponse::tensor_size() const {
  return tensor_.size();
}
void RunStepResponse::clear_tensor() {
  tensor_.Clear();
}
const ::tensorflow::NamedTensorProto& RunStepResponse::tensor(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.RunStepResponse.tensor)
  return tensor_.Get(index);
}
::tensorflow::NamedTensorProto* RunStepResponse::mutable_tensor(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.RunStepResponse.tensor)
  return tensor_.Mutable(index);
}
::tensorflow::NamedTensorProto* RunStepResponse::add_tensor() {
  // @@protoc_insertion_point(field_add:tensorflow.RunStepResponse.tensor)
  return tensor_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::NamedTensorProto >*
RunStepResponse::mutable_tensor() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.RunStepResponse.tensor)
  return &tensor_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::NamedTensorProto >&
RunStepResponse::tensor() const {
  // @@protoc_insertion_point(field_list:tensorflow.RunStepResponse.tensor)
  return tensor_;
}

// optional .tensorflow.RunMetadata metadata = 2;
bool RunStepResponse::has_metadata() const {
  return !_is_default_instance_ && metadata_ != NULL;
}
void RunStepResponse::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
const ::tensorflow::RunMetadata& RunStepResponse::metadata() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunStepResponse.metadata)
  return metadata_ != NULL ? *metadata_ : *default_instance_->metadata_;
}
::tensorflow::RunMetadata* RunStepResponse::mutable_metadata() {
  
  if (metadata_ == NULL) {
    _slow_mutable_metadata();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RunStepResponse.metadata)
  return metadata_;
}
::tensorflow::RunMetadata* RunStepResponse::release_metadata() {
  // @@protoc_insertion_point(field_release:tensorflow.RunStepResponse.metadata)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_metadata();
  } else {
    ::tensorflow::RunMetadata* temp = metadata_;
    metadata_ = NULL;
    return temp;
  }
}
 void RunStepResponse::set_allocated_metadata(::tensorflow::RunMetadata* metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete metadata_;
  }
  if (metadata != NULL) {
    _slow_set_allocated_metadata(message_arena, &metadata);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunStepResponse.metadata)
}

// optional .tensorflow.error.Code status_code = 3;
void RunStepResponse::clear_status_code() {
  status_code_ = 0;
}
 ::tensorflow::error::Code RunStepResponse::status_code() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunStepResponse.status_code)
  return static_cast< ::tensorflow::error::Code >(status_code_);
}
 void RunStepResponse::set_status_code(::tensorflow::error::Code value) {
  
  status_code_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RunStepResponse.status_code)
}

// optional string status_error_message = 4;
void RunStepResponse::clear_status_error_message() {
  status_error_message_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& RunStepResponse::status_error_message() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunStepResponse.status_error_message)
  return status_error_message_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RunStepResponse::set_status_error_message(const ::std::string& value) {
  
  status_error_message_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.RunStepResponse.status_error_message)
}
 void RunStepResponse::set_status_error_message(const char* value) {
  
  status_error_message_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.RunStepResponse.status_error_message)
}
 void RunStepResponse::set_status_error_message(const char* value,
    size_t size) {
  
  status_error_message_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.RunStepResponse.status_error_message)
}
 ::std::string* RunStepResponse::mutable_status_error_message() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.RunStepResponse.status_error_message)
  return status_error_message_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* RunStepResponse::release_status_error_message() {
  // @@protoc_insertion_point(field_release:tensorflow.RunStepResponse.status_error_message)
  
  return status_error_message_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* RunStepResponse::unsafe_arena_release_status_error_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RunStepResponse.status_error_message)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return status_error_message_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void RunStepResponse::set_allocated_status_error_message(::std::string* status_error_message) {
  if (status_error_message != NULL) {
    
  } else {
    
  }
  status_error_message_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status_error_message,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunStepResponse.status_error_message)
}
 void RunStepResponse::unsafe_arena_set_allocated_status_error_message(
    ::std::string* status_error_message) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (status_error_message != NULL) {
    
  } else {
    
  }
  status_error_message_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      status_error_message, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RunStepResponse.status_error_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PartialRunSetupRequest::kSessionHandleFieldNumber;
const int PartialRunSetupRequest::kFeedFieldNumber;
const int PartialRunSetupRequest::kFetchFieldNumber;
const int PartialRunSetupRequest::kTargetFieldNumber;
const int PartialRunSetupRequest::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PartialRunSetupRequest::PartialRunSetupRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.PartialRunSetupRequest)
}

PartialRunSetupRequest::PartialRunSetupRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  feed_(arena),
  fetch_(arena),
  target_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.PartialRunSetupRequest)
}

void PartialRunSetupRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PartialRunSetupRequest::PartialRunSetupRequest(const PartialRunSetupRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.PartialRunSetupRequest)
}

void PartialRunSetupRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  session_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_ = GOOGLE_LONGLONG(0);
}

PartialRunSetupRequest::~PartialRunSetupRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.PartialRunSetupRequest)
  SharedDtor();
}

void PartialRunSetupRequest::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  session_handle_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void PartialRunSetupRequest::ArenaDtor(void* object) {
  PartialRunSetupRequest* _this = reinterpret_cast< PartialRunSetupRequest* >(object);
  (void)_this;
}
void PartialRunSetupRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PartialRunSetupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PartialRunSetupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartialRunSetupRequest_descriptor_;
}

const PartialRunSetupRequest& PartialRunSetupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto();
  return *default_instance_;
}

PartialRunSetupRequest* PartialRunSetupRequest::default_instance_ = NULL;

PartialRunSetupRequest* PartialRunSetupRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<PartialRunSetupRequest>(arena);
}

void PartialRunSetupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.PartialRunSetupRequest)
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  request_id_ = GOOGLE_LONGLONG(0);
  feed_.Clear();
  fetch_.Clear();
  target_.Clear();
}

bool PartialRunSetupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.PartialRunSetupRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string session_handle = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_handle().data(), this->session_handle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.PartialRunSetupRequest.session_handle"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_feed;
        break;
      }

      // repeated string feed = 2;
      case 2: {
        if (tag == 18) {
         parse_feed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_feed()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->feed(this->feed_size() - 1).data(),
            this->feed(this->feed_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.PartialRunSetupRequest.feed"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_feed;
        if (input->ExpectTag(26)) goto parse_fetch;
        break;
      }

      // repeated string fetch = 3;
      case 3: {
        if (tag == 26) {
         parse_fetch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fetch()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fetch(this->fetch_size() - 1).data(),
            this->fetch(this->fetch_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.PartialRunSetupRequest.fetch"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fetch;
        if (input->ExpectTag(34)) goto parse_target;
        break;
      }

      // repeated string target = 4;
      case 4: {
        if (tag == 34) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_target()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->target(this->target_size() - 1).data(),
            this->target(this->target_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.PartialRunSetupRequest.target"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_target;
        if (input->ExpectTag(40)) goto parse_request_id;
        break;
      }

      // optional int64 request_id = 5;
      case 5: {
        if (tag == 40) {
         parse_request_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.PartialRunSetupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.PartialRunSetupRequest)
  return false;
#undef DO_
}

void PartialRunSetupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.PartialRunSetupRequest)
  // optional string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PartialRunSetupRequest.session_handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_handle(), output);
  }

  // repeated string feed = 2;
  for (int i = 0; i < this->feed_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->feed(i).data(), this->feed(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PartialRunSetupRequest.feed");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->feed(i), output);
  }

  // repeated string fetch = 3;
  for (int i = 0; i < this->fetch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fetch(i).data(), this->fetch(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PartialRunSetupRequest.fetch");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->fetch(i), output);
  }

  // repeated string target = 4;
  for (int i = 0; i < this->target_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target(i).data(), this->target(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PartialRunSetupRequest.target");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->target(i), output);
  }

  // optional int64 request_id = 5;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->request_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.PartialRunSetupRequest)
}

::google::protobuf::uint8* PartialRunSetupRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.PartialRunSetupRequest)
  // optional string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PartialRunSetupRequest.session_handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session_handle(), target);
  }

  // repeated string feed = 2;
  for (int i = 0; i < this->feed_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->feed(i).data(), this->feed(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PartialRunSetupRequest.feed");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->feed(i), target);
  }

  // repeated string fetch = 3;
  for (int i = 0; i < this->fetch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fetch(i).data(), this->fetch(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PartialRunSetupRequest.fetch");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->fetch(i), target);
  }

  // repeated string target = 4;
  for (int i = 0; i < this->target_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target(i).data(), this->target(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PartialRunSetupRequest.target");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->target(i), target);
  }

  // optional int64 request_id = 5;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->request_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.PartialRunSetupRequest)
  return target;
}

int PartialRunSetupRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.PartialRunSetupRequest)
  int total_size = 0;

  // optional string session_handle = 1;
  if (this->session_handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_handle());
  }

  // optional int64 request_id = 5;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->request_id());
  }

  // repeated string feed = 2;
  total_size += 1 * this->feed_size();
  for (int i = 0; i < this->feed_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->feed(i));
  }

  // repeated string fetch = 3;
  total_size += 1 * this->fetch_size();
  for (int i = 0; i < this->fetch_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fetch(i));
  }

  // repeated string target = 4;
  total_size += 1 * this->target_size();
  for (int i = 0; i < this->target_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->target(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PartialRunSetupRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.PartialRunSetupRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PartialRunSetupRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PartialRunSetupRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.PartialRunSetupRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.PartialRunSetupRequest)
    MergeFrom(*source);
  }
}

void PartialRunSetupRequest::MergeFrom(const PartialRunSetupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.PartialRunSetupRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  feed_.MergeFrom(from.feed_);
  fetch_.MergeFrom(from.fetch_);
  target_.MergeFrom(from.target_);
  if (from.session_handle().size() > 0) {
    set_session_handle(from.session_handle());
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
}

void PartialRunSetupRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.PartialRunSetupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartialRunSetupRequest::CopyFrom(const PartialRunSetupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.PartialRunSetupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartialRunSetupRequest::IsInitialized() const {

  return true;
}

void PartialRunSetupRequest::Swap(PartialRunSetupRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PartialRunSetupRequest temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void PartialRunSetupRequest::UnsafeArenaSwap(PartialRunSetupRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PartialRunSetupRequest::InternalSwap(PartialRunSetupRequest* other) {
  session_handle_.Swap(&other->session_handle_);
  feed_.UnsafeArenaSwap(&other->feed_);
  fetch_.UnsafeArenaSwap(&other->fetch_);
  target_.UnsafeArenaSwap(&other->target_);
  std::swap(request_id_, other->request_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PartialRunSetupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PartialRunSetupRequest_descriptor_;
  metadata.reflection = PartialRunSetupRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PartialRunSetupRequest

// optional string session_handle = 1;
void PartialRunSetupRequest::clear_session_handle() {
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& PartialRunSetupRequest::session_handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.PartialRunSetupRequest.session_handle)
  return session_handle_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PartialRunSetupRequest::set_session_handle(const ::std::string& value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.PartialRunSetupRequest.session_handle)
}
 void PartialRunSetupRequest::set_session_handle(const char* value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.PartialRunSetupRequest.session_handle)
}
 void PartialRunSetupRequest::set_session_handle(const char* value,
    size_t size) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.PartialRunSetupRequest.session_handle)
}
 ::std::string* PartialRunSetupRequest::mutable_session_handle() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.PartialRunSetupRequest.session_handle)
  return session_handle_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* PartialRunSetupRequest::release_session_handle() {
  // @@protoc_insertion_point(field_release:tensorflow.PartialRunSetupRequest.session_handle)
  
  return session_handle_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* PartialRunSetupRequest::unsafe_arena_release_session_handle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.PartialRunSetupRequest.session_handle)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return session_handle_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void PartialRunSetupRequest::set_allocated_session_handle(::std::string* session_handle) {
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_handle,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.PartialRunSetupRequest.session_handle)
}
 void PartialRunSetupRequest::unsafe_arena_set_allocated_session_handle(
    ::std::string* session_handle) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      session_handle, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.PartialRunSetupRequest.session_handle)
}

// repeated string feed = 2;
int PartialRunSetupRequest::feed_size() const {
  return feed_.size();
}
void PartialRunSetupRequest::clear_feed() {
  feed_.Clear();
}
 const ::std::string& PartialRunSetupRequest::feed(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.PartialRunSetupRequest.feed)
  return feed_.Get(index);
}
 ::std::string* PartialRunSetupRequest::mutable_feed(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.PartialRunSetupRequest.feed)
  return feed_.Mutable(index);
}
 void PartialRunSetupRequest::set_feed(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.PartialRunSetupRequest.feed)
  feed_.Mutable(index)->assign(value);
}
 void PartialRunSetupRequest::set_feed(int index, const char* value) {
  feed_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.PartialRunSetupRequest.feed)
}
 void PartialRunSetupRequest::set_feed(int index, const char* value, size_t size) {
  feed_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.PartialRunSetupRequest.feed)
}
 ::std::string* PartialRunSetupRequest::add_feed() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.PartialRunSetupRequest.feed)
  return feed_.Add();
}
 void PartialRunSetupRequest::add_feed(const ::std::string& value) {
  feed_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.PartialRunSetupRequest.feed)
}
 void PartialRunSetupRequest::add_feed(const char* value) {
  feed_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.PartialRunSetupRequest.feed)
}
 void PartialRunSetupRequest::add_feed(const char* value, size_t size) {
  feed_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.PartialRunSetupRequest.feed)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
PartialRunSetupRequest::feed() const {
  // @@protoc_insertion_point(field_list:tensorflow.PartialRunSetupRequest.feed)
  return feed_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
PartialRunSetupRequest::mutable_feed() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.PartialRunSetupRequest.feed)
  return &feed_;
}

// repeated string fetch = 3;
int PartialRunSetupRequest::fetch_size() const {
  return fetch_.size();
}
void PartialRunSetupRequest::clear_fetch() {
  fetch_.Clear();
}
 const ::std::string& PartialRunSetupRequest::fetch(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.PartialRunSetupRequest.fetch)
  return fetch_.Get(index);
}
 ::std::string* PartialRunSetupRequest::mutable_fetch(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.PartialRunSetupRequest.fetch)
  return fetch_.Mutable(index);
}
 void PartialRunSetupRequest::set_fetch(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.PartialRunSetupRequest.fetch)
  fetch_.Mutable(index)->assign(value);
}
 void PartialRunSetupRequest::set_fetch(int index, const char* value) {
  fetch_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.PartialRunSetupRequest.fetch)
}
 void PartialRunSetupRequest::set_fetch(int index, const char* value, size_t size) {
  fetch_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.PartialRunSetupRequest.fetch)
}
 ::std::string* PartialRunSetupRequest::add_fetch() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.PartialRunSetupRequest.fetch)
  return fetch_.Add();
}
 void PartialRunSetupRequest::add_fetch(const ::std::string& value) {
  fetch_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.PartialRunSetupRequest.fetch)
}
 void PartialRunSetupRequest::add_fetch(const char* value) {
  fetch_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.PartialRunSetupRequest.fetch)
}
 void PartialRunSetupRequest::add_fetch(const char* value, size_t size) {
  fetch_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.PartialRunSetupRequest.fetch)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
PartialRunSetupRequest::fetch() const {
  // @@protoc_insertion_point(field_list:tensorflow.PartialRunSetupRequest.fetch)
  return fetch_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
PartialRunSetupRequest::mutable_fetch() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.PartialRunSetupRequest.fetch)
  return &fetch_;
}

// repeated string target = 4;
int PartialRunSetupRequest::target_size() const {
  return target_.size();
}
void PartialRunSetupRequest::clear_target() {
  target_.Clear();
}
 const ::std::string& PartialRunSetupRequest::target(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.PartialRunSetupRequest.target)
  return target_.Get(index);
}
 ::std::string* PartialRunSetupRequest::mutable_target(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.PartialRunSetupRequest.target)
  return target_.Mutable(index);
}
 void PartialRunSetupRequest::set_target(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.PartialRunSetupRequest.target)
  target_.Mutable(index)->assign(value);
}
 void PartialRunSetupRequest::set_target(int index, const char* value) {
  target_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.PartialRunSetupRequest.target)
}
 void PartialRunSetupRequest::set_target(int index, const char* value, size_t size) {
  target_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.PartialRunSetupRequest.target)
}
 ::std::string* PartialRunSetupRequest::add_target() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.PartialRunSetupRequest.target)
  return target_.Add();
}
 void PartialRunSetupRequest::add_target(const ::std::string& value) {
  target_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.PartialRunSetupRequest.target)
}
 void PartialRunSetupRequest::add_target(const char* value) {
  target_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.PartialRunSetupRequest.target)
}
 void PartialRunSetupRequest::add_target(const char* value, size_t size) {
  target_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.PartialRunSetupRequest.target)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
PartialRunSetupRequest::target() const {
  // @@protoc_insertion_point(field_list:tensorflow.PartialRunSetupRequest.target)
  return target_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
PartialRunSetupRequest::mutable_target() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.PartialRunSetupRequest.target)
  return &target_;
}

// optional int64 request_id = 5;
void PartialRunSetupRequest::clear_request_id() {
  request_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 PartialRunSetupRequest::request_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.PartialRunSetupRequest.request_id)
  return request_id_;
}
 void PartialRunSetupRequest::set_request_id(::google::protobuf::int64 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.PartialRunSetupRequest.request_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PartialRunSetupResponse::kPartialRunHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PartialRunSetupResponse::PartialRunSetupResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.PartialRunSetupResponse)
}

PartialRunSetupResponse::PartialRunSetupResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.PartialRunSetupResponse)
}

void PartialRunSetupResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PartialRunSetupResponse::PartialRunSetupResponse(const PartialRunSetupResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.PartialRunSetupResponse)
}

void PartialRunSetupResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  partial_run_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PartialRunSetupResponse::~PartialRunSetupResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.PartialRunSetupResponse)
  SharedDtor();
}

void PartialRunSetupResponse::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  partial_run_handle_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void PartialRunSetupResponse::ArenaDtor(void* object) {
  PartialRunSetupResponse* _this = reinterpret_cast< PartialRunSetupResponse* >(object);
  (void)_this;
}
void PartialRunSetupResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PartialRunSetupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PartialRunSetupResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartialRunSetupResponse_descriptor_;
}

const PartialRunSetupResponse& PartialRunSetupResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto();
  return *default_instance_;
}

PartialRunSetupResponse* PartialRunSetupResponse::default_instance_ = NULL;

PartialRunSetupResponse* PartialRunSetupResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<PartialRunSetupResponse>(arena);
}

void PartialRunSetupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.PartialRunSetupResponse)
  partial_run_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool PartialRunSetupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.PartialRunSetupResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string partial_run_handle = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partial_run_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partial_run_handle().data(), this->partial_run_handle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.PartialRunSetupResponse.partial_run_handle"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.PartialRunSetupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.PartialRunSetupResponse)
  return false;
#undef DO_
}

void PartialRunSetupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.PartialRunSetupResponse)
  // optional string partial_run_handle = 1;
  if (this->partial_run_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partial_run_handle().data(), this->partial_run_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PartialRunSetupResponse.partial_run_handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->partial_run_handle(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.PartialRunSetupResponse)
}

::google::protobuf::uint8* PartialRunSetupResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.PartialRunSetupResponse)
  // optional string partial_run_handle = 1;
  if (this->partial_run_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partial_run_handle().data(), this->partial_run_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PartialRunSetupResponse.partial_run_handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->partial_run_handle(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.PartialRunSetupResponse)
  return target;
}

int PartialRunSetupResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.PartialRunSetupResponse)
  int total_size = 0;

  // optional string partial_run_handle = 1;
  if (this->partial_run_handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partial_run_handle());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PartialRunSetupResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.PartialRunSetupResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PartialRunSetupResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PartialRunSetupResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.PartialRunSetupResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.PartialRunSetupResponse)
    MergeFrom(*source);
  }
}

void PartialRunSetupResponse::MergeFrom(const PartialRunSetupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.PartialRunSetupResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.partial_run_handle().size() > 0) {
    set_partial_run_handle(from.partial_run_handle());
  }
}

void PartialRunSetupResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.PartialRunSetupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartialRunSetupResponse::CopyFrom(const PartialRunSetupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.PartialRunSetupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartialRunSetupResponse::IsInitialized() const {

  return true;
}

void PartialRunSetupResponse::Swap(PartialRunSetupResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PartialRunSetupResponse temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void PartialRunSetupResponse::UnsafeArenaSwap(PartialRunSetupResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PartialRunSetupResponse::InternalSwap(PartialRunSetupResponse* other) {
  partial_run_handle_.Swap(&other->partial_run_handle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PartialRunSetupResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PartialRunSetupResponse_descriptor_;
  metadata.reflection = PartialRunSetupResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PartialRunSetupResponse

// optional string partial_run_handle = 1;
void PartialRunSetupResponse::clear_partial_run_handle() {
  partial_run_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& PartialRunSetupResponse::partial_run_handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.PartialRunSetupResponse.partial_run_handle)
  return partial_run_handle_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PartialRunSetupResponse::set_partial_run_handle(const ::std::string& value) {
  
  partial_run_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.PartialRunSetupResponse.partial_run_handle)
}
 void PartialRunSetupResponse::set_partial_run_handle(const char* value) {
  
  partial_run_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.PartialRunSetupResponse.partial_run_handle)
}
 void PartialRunSetupResponse::set_partial_run_handle(const char* value,
    size_t size) {
  
  partial_run_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.PartialRunSetupResponse.partial_run_handle)
}
 ::std::string* PartialRunSetupResponse::mutable_partial_run_handle() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.PartialRunSetupResponse.partial_run_handle)
  return partial_run_handle_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* PartialRunSetupResponse::release_partial_run_handle() {
  // @@protoc_insertion_point(field_release:tensorflow.PartialRunSetupResponse.partial_run_handle)
  
  return partial_run_handle_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* PartialRunSetupResponse::unsafe_arena_release_partial_run_handle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.PartialRunSetupResponse.partial_run_handle)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return partial_run_handle_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void PartialRunSetupResponse::set_allocated_partial_run_handle(::std::string* partial_run_handle) {
  if (partial_run_handle != NULL) {
    
  } else {
    
  }
  partial_run_handle_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), partial_run_handle,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.PartialRunSetupResponse.partial_run_handle)
}
 void PartialRunSetupResponse::unsafe_arena_set_allocated_partial_run_handle(
    ::std::string* partial_run_handle) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (partial_run_handle != NULL) {
    
  } else {
    
  }
  partial_run_handle_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      partial_run_handle, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.PartialRunSetupResponse.partial_run_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloseSessionRequest::kSessionHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloseSessionRequest::CloseSessionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CloseSessionRequest)
}

CloseSessionRequest::CloseSessionRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CloseSessionRequest)
}

void CloseSessionRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CloseSessionRequest::CloseSessionRequest(const CloseSessionRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.CloseSessionRequest)
}

void CloseSessionRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  session_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CloseSessionRequest::~CloseSessionRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.CloseSessionRequest)
  SharedDtor();
}

void CloseSessionRequest::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  session_handle_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void CloseSessionRequest::ArenaDtor(void* object) {
  CloseSessionRequest* _this = reinterpret_cast< CloseSessionRequest* >(object);
  (void)_this;
}
void CloseSessionRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CloseSessionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloseSessionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloseSessionRequest_descriptor_;
}

const CloseSessionRequest& CloseSessionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto();
  return *default_instance_;
}

CloseSessionRequest* CloseSessionRequest::default_instance_ = NULL;

CloseSessionRequest* CloseSessionRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CloseSessionRequest>(arena);
}

void CloseSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CloseSessionRequest)
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool CloseSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CloseSessionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string session_handle = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_handle().data(), this->session_handle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.CloseSessionRequest.session_handle"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CloseSessionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CloseSessionRequest)
  return false;
#undef DO_
}

void CloseSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CloseSessionRequest)
  // optional string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CloseSessionRequest.session_handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_handle(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.CloseSessionRequest)
}

::google::protobuf::uint8* CloseSessionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CloseSessionRequest)
  // optional string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CloseSessionRequest.session_handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session_handle(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CloseSessionRequest)
  return target;
}

int CloseSessionRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CloseSessionRequest)
  int total_size = 0;

  // optional string session_handle = 1;
  if (this->session_handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_handle());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloseSessionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CloseSessionRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CloseSessionRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CloseSessionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CloseSessionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CloseSessionRequest)
    MergeFrom(*source);
  }
}

void CloseSessionRequest::MergeFrom(const CloseSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CloseSessionRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.session_handle().size() > 0) {
    set_session_handle(from.session_handle());
  }
}

void CloseSessionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CloseSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseSessionRequest::CopyFrom(const CloseSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CloseSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseSessionRequest::IsInitialized() const {

  return true;
}

void CloseSessionRequest::Swap(CloseSessionRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CloseSessionRequest temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void CloseSessionRequest::UnsafeArenaSwap(CloseSessionRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CloseSessionRequest::InternalSwap(CloseSessionRequest* other) {
  session_handle_.Swap(&other->session_handle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloseSessionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloseSessionRequest_descriptor_;
  metadata.reflection = CloseSessionRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CloseSessionRequest

// optional string session_handle = 1;
void CloseSessionRequest::clear_session_handle() {
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& CloseSessionRequest::session_handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.CloseSessionRequest.session_handle)
  return session_handle_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CloseSessionRequest::set_session_handle(const ::std::string& value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.CloseSessionRequest.session_handle)
}
 void CloseSessionRequest::set_session_handle(const char* value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.CloseSessionRequest.session_handle)
}
 void CloseSessionRequest::set_session_handle(const char* value,
    size_t size) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.CloseSessionRequest.session_handle)
}
 ::std::string* CloseSessionRequest::mutable_session_handle() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.CloseSessionRequest.session_handle)
  return session_handle_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* CloseSessionRequest::release_session_handle() {
  // @@protoc_insertion_point(field_release:tensorflow.CloseSessionRequest.session_handle)
  
  return session_handle_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* CloseSessionRequest::unsafe_arena_release_session_handle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.CloseSessionRequest.session_handle)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return session_handle_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void CloseSessionRequest::set_allocated_session_handle(::std::string* session_handle) {
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_handle,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CloseSessionRequest.session_handle)
}
 void CloseSessionRequest::unsafe_arena_set_allocated_session_handle(
    ::std::string* session_handle) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      session_handle, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.CloseSessionRequest.session_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloseSessionResponse::CloseSessionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CloseSessionResponse)
}

CloseSessionResponse::CloseSessionResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CloseSessionResponse)
}

void CloseSessionResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CloseSessionResponse::CloseSessionResponse(const CloseSessionResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.CloseSessionResponse)
}

void CloseSessionResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

CloseSessionResponse::~CloseSessionResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.CloseSessionResponse)
  SharedDtor();
}

void CloseSessionResponse::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void CloseSessionResponse::ArenaDtor(void* object) {
  CloseSessionResponse* _this = reinterpret_cast< CloseSessionResponse* >(object);
  (void)_this;
}
void CloseSessionResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CloseSessionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloseSessionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloseSessionResponse_descriptor_;
}

const CloseSessionResponse& CloseSessionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto();
  return *default_instance_;
}

CloseSessionResponse* CloseSessionResponse::default_instance_ = NULL;

CloseSessionResponse* CloseSessionResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CloseSessionResponse>(arena);
}

void CloseSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CloseSessionResponse)
}

bool CloseSessionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CloseSessionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CloseSessionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CloseSessionResponse)
  return false;
#undef DO_
}

void CloseSessionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CloseSessionResponse)
  // @@protoc_insertion_point(serialize_end:tensorflow.CloseSessionResponse)
}

::google::protobuf::uint8* CloseSessionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CloseSessionResponse)
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CloseSessionResponse)
  return target;
}

int CloseSessionResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CloseSessionResponse)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloseSessionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CloseSessionResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CloseSessionResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CloseSessionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CloseSessionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CloseSessionResponse)
    MergeFrom(*source);
  }
}

void CloseSessionResponse::MergeFrom(const CloseSessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CloseSessionResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void CloseSessionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CloseSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseSessionResponse::CopyFrom(const CloseSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CloseSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseSessionResponse::IsInitialized() const {

  return true;
}

void CloseSessionResponse::Swap(CloseSessionResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CloseSessionResponse temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void CloseSessionResponse::UnsafeArenaSwap(CloseSessionResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CloseSessionResponse::InternalSwap(CloseSessionResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloseSessionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloseSessionResponse_descriptor_;
  metadata.reflection = CloseSessionResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CloseSessionResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResetRequest::kContainerFieldNumber;
const int ResetRequest::kDeviceFiltersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResetRequest::ResetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ResetRequest)
}

ResetRequest::ResetRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  container_(arena),
  device_filters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ResetRequest)
}

void ResetRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ResetRequest::ResetRequest(const ResetRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.ResetRequest)
}

void ResetRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
}

ResetRequest::~ResetRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.ResetRequest)
  SharedDtor();
}

void ResetRequest::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void ResetRequest::ArenaDtor(void* object) {
  ResetRequest* _this = reinterpret_cast< ResetRequest* >(object);
  (void)_this;
}
void ResetRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ResetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResetRequest_descriptor_;
}

const ResetRequest& ResetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto();
  return *default_instance_;
}

ResetRequest* ResetRequest::default_instance_ = NULL;

ResetRequest* ResetRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ResetRequest>(arena);
}

void ResetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ResetRequest)
  container_.Clear();
  device_filters_.Clear();
}

bool ResetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.ResetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string container = 1;
      case 1: {
        if (tag == 10) {
         parse_container:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_container()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->container(this->container_size() - 1).data(),
            this->container(this->container_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.ResetRequest.container"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_container;
        if (input->ExpectTag(18)) goto parse_device_filters;
        break;
      }

      // repeated string device_filters = 2;
      case 2: {
        if (tag == 18) {
         parse_device_filters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_device_filters()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_filters(this->device_filters_size() - 1).data(),
            this->device_filters(this->device_filters_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.ResetRequest.device_filters"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_device_filters;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.ResetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.ResetRequest)
  return false;
#undef DO_
}

void ResetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.ResetRequest)
  // repeated string container = 1;
  for (int i = 0; i < this->container_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->container(i).data(), this->container(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ResetRequest.container");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->container(i), output);
  }

  // repeated string device_filters = 2;
  for (int i = 0; i < this->device_filters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_filters(i).data(), this->device_filters(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ResetRequest.device_filters");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->device_filters(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.ResetRequest)
}

::google::protobuf::uint8* ResetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ResetRequest)
  // repeated string container = 1;
  for (int i = 0; i < this->container_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->container(i).data(), this->container(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ResetRequest.container");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->container(i), target);
  }

  // repeated string device_filters = 2;
  for (int i = 0; i < this->device_filters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_filters(i).data(), this->device_filters(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ResetRequest.device_filters");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->device_filters(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ResetRequest)
  return target;
}

int ResetRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ResetRequest)
  int total_size = 0;

  // repeated string container = 1;
  total_size += 1 * this->container_size();
  for (int i = 0; i < this->container_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->container(i));
  }

  // repeated string device_filters = 2;
  total_size += 1 * this->device_filters_size();
  for (int i = 0; i < this->device_filters_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->device_filters(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ResetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResetRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ResetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ResetRequest)
    MergeFrom(*source);
  }
}

void ResetRequest::MergeFrom(const ResetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ResetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  container_.MergeFrom(from.container_);
  device_filters_.MergeFrom(from.device_filters_);
}

void ResetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ResetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetRequest::CopyFrom(const ResetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ResetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetRequest::IsInitialized() const {

  return true;
}

void ResetRequest::Swap(ResetRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ResetRequest temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ResetRequest::UnsafeArenaSwap(ResetRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ResetRequest::InternalSwap(ResetRequest* other) {
  container_.UnsafeArenaSwap(&other->container_);
  device_filters_.UnsafeArenaSwap(&other->device_filters_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResetRequest_descriptor_;
  metadata.reflection = ResetRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResetRequest

// repeated string container = 1;
int ResetRequest::container_size() const {
  return container_.size();
}
void ResetRequest::clear_container() {
  container_.Clear();
}
 const ::std::string& ResetRequest::container(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.ResetRequest.container)
  return container_.Get(index);
}
 ::std::string* ResetRequest::mutable_container(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.ResetRequest.container)
  return container_.Mutable(index);
}
 void ResetRequest::set_container(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.ResetRequest.container)
  container_.Mutable(index)->assign(value);
}
 void ResetRequest::set_container(int index, const char* value) {
  container_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.ResetRequest.container)
}
 void ResetRequest::set_container(int index, const char* value, size_t size) {
  container_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.ResetRequest.container)
}
 ::std::string* ResetRequest::add_container() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.ResetRequest.container)
  return container_.Add();
}
 void ResetRequest::add_container(const ::std::string& value) {
  container_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.ResetRequest.container)
}
 void ResetRequest::add_container(const char* value) {
  container_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.ResetRequest.container)
}
 void ResetRequest::add_container(const char* value, size_t size) {
  container_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.ResetRequest.container)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResetRequest::container() const {
  // @@protoc_insertion_point(field_list:tensorflow.ResetRequest.container)
  return container_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
ResetRequest::mutable_container() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.ResetRequest.container)
  return &container_;
}

// repeated string device_filters = 2;
int ResetRequest::device_filters_size() const {
  return device_filters_.size();
}
void ResetRequest::clear_device_filters() {
  device_filters_.Clear();
}
 const ::std::string& ResetRequest::device_filters(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.ResetRequest.device_filters)
  return device_filters_.Get(index);
}
 ::std::string* ResetRequest::mutable_device_filters(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.ResetRequest.device_filters)
  return device_filters_.Mutable(index);
}
 void ResetRequest::set_device_filters(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.ResetRequest.device_filters)
  device_filters_.Mutable(index)->assign(value);
}
 void ResetRequest::set_device_filters(int index, const char* value) {
  device_filters_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.ResetRequest.device_filters)
}
 void ResetRequest::set_device_filters(int index, const char* value, size_t size) {
  device_filters_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.ResetRequest.device_filters)
}
 ::std::string* ResetRequest::add_device_filters() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.ResetRequest.device_filters)
  return device_filters_.Add();
}
 void ResetRequest::add_device_filters(const ::std::string& value) {
  device_filters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.ResetRequest.device_filters)
}
 void ResetRequest::add_device_filters(const char* value) {
  device_filters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.ResetRequest.device_filters)
}
 void ResetRequest::add_device_filters(const char* value, size_t size) {
  device_filters_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.ResetRequest.device_filters)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResetRequest::device_filters() const {
  // @@protoc_insertion_point(field_list:tensorflow.ResetRequest.device_filters)
  return device_filters_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
ResetRequest::mutable_device_filters() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.ResetRequest.device_filters)
  return &device_filters_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResetResponse::ResetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ResetResponse)
}

ResetResponse::ResetResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ResetResponse)
}

void ResetResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ResetResponse::ResetResponse(const ResetResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.ResetResponse)
}

void ResetResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ResetResponse::~ResetResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.ResetResponse)
  SharedDtor();
}

void ResetResponse::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void ResetResponse::ArenaDtor(void* object) {
  ResetResponse* _this = reinterpret_cast< ResetResponse* >(object);
  (void)_this;
}
void ResetResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ResetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResetResponse_descriptor_;
}

const ResetResponse& ResetResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto();
  return *default_instance_;
}

ResetResponse* ResetResponse::default_instance_ = NULL;

ResetResponse* ResetResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ResetResponse>(arena);
}

void ResetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ResetResponse)
}

bool ResetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.ResetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.ResetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.ResetResponse)
  return false;
#undef DO_
}

void ResetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.ResetResponse)
  // @@protoc_insertion_point(serialize_end:tensorflow.ResetResponse)
}

::google::protobuf::uint8* ResetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ResetResponse)
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ResetResponse)
  return target;
}

int ResetResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ResetResponse)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ResetResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResetResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ResetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ResetResponse)
    MergeFrom(*source);
  }
}

void ResetResponse::MergeFrom(const ResetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ResetResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void ResetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ResetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetResponse::CopyFrom(const ResetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ResetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetResponse::IsInitialized() const {

  return true;
}

void ResetResponse::Swap(ResetResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ResetResponse temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ResetResponse::UnsafeArenaSwap(ResetResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ResetResponse::InternalSwap(ResetResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResetResponse_descriptor_;
  metadata.reflection = ResetResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResetResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListDevicesRequest::kSessionHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListDevicesRequest::ListDevicesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ListDevicesRequest)
}

ListDevicesRequest::ListDevicesRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ListDevicesRequest)
}

void ListDevicesRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ListDevicesRequest::ListDevicesRequest(const ListDevicesRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.ListDevicesRequest)
}

void ListDevicesRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  session_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ListDevicesRequest::~ListDevicesRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.ListDevicesRequest)
  SharedDtor();
}

void ListDevicesRequest::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  session_handle_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void ListDevicesRequest::ArenaDtor(void* object) {
  ListDevicesRequest* _this = reinterpret_cast< ListDevicesRequest* >(object);
  (void)_this;
}
void ListDevicesRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ListDevicesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListDevicesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListDevicesRequest_descriptor_;
}

const ListDevicesRequest& ListDevicesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto();
  return *default_instance_;
}

ListDevicesRequest* ListDevicesRequest::default_instance_ = NULL;

ListDevicesRequest* ListDevicesRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ListDevicesRequest>(arena);
}

void ListDevicesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ListDevicesRequest)
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool ListDevicesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.ListDevicesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string session_handle = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_handle().data(), this->session_handle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.ListDevicesRequest.session_handle"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.ListDevicesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.ListDevicesRequest)
  return false;
#undef DO_
}

void ListDevicesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.ListDevicesRequest)
  // optional string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ListDevicesRequest.session_handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_handle(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.ListDevicesRequest)
}

::google::protobuf::uint8* ListDevicesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ListDevicesRequest)
  // optional string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ListDevicesRequest.session_handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session_handle(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ListDevicesRequest)
  return target;
}

int ListDevicesRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ListDevicesRequest)
  int total_size = 0;

  // optional string session_handle = 1;
  if (this->session_handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_handle());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListDevicesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ListDevicesRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ListDevicesRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ListDevicesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ListDevicesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ListDevicesRequest)
    MergeFrom(*source);
  }
}

void ListDevicesRequest::MergeFrom(const ListDevicesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ListDevicesRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.session_handle().size() > 0) {
    set_session_handle(from.session_handle());
  }
}

void ListDevicesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ListDevicesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDevicesRequest::CopyFrom(const ListDevicesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ListDevicesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDevicesRequest::IsInitialized() const {

  return true;
}

void ListDevicesRequest::Swap(ListDevicesRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListDevicesRequest temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ListDevicesRequest::UnsafeArenaSwap(ListDevicesRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListDevicesRequest::InternalSwap(ListDevicesRequest* other) {
  session_handle_.Swap(&other->session_handle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListDevicesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListDevicesRequest_descriptor_;
  metadata.reflection = ListDevicesRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListDevicesRequest

// optional string session_handle = 1;
void ListDevicesRequest::clear_session_handle() {
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& ListDevicesRequest::session_handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.ListDevicesRequest.session_handle)
  return session_handle_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ListDevicesRequest::set_session_handle(const ::std::string& value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.ListDevicesRequest.session_handle)
}
 void ListDevicesRequest::set_session_handle(const char* value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.ListDevicesRequest.session_handle)
}
 void ListDevicesRequest::set_session_handle(const char* value,
    size_t size) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.ListDevicesRequest.session_handle)
}
 ::std::string* ListDevicesRequest::mutable_session_handle() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.ListDevicesRequest.session_handle)
  return session_handle_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* ListDevicesRequest::release_session_handle() {
  // @@protoc_insertion_point(field_release:tensorflow.ListDevicesRequest.session_handle)
  
  return session_handle_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* ListDevicesRequest::unsafe_arena_release_session_handle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ListDevicesRequest.session_handle)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return session_handle_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void ListDevicesRequest::set_allocated_session_handle(::std::string* session_handle) {
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_handle,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ListDevicesRequest.session_handle)
}
 void ListDevicesRequest::unsafe_arena_set_allocated_session_handle(
    ::std::string* session_handle) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      session_handle, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ListDevicesRequest.session_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListDevicesResponse::kLocalDeviceFieldNumber;
const int ListDevicesResponse::kRemoteDeviceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListDevicesResponse::ListDevicesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ListDevicesResponse)
}

ListDevicesResponse::ListDevicesResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  local_device_(arena),
  remote_device_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ListDevicesResponse)
}

void ListDevicesResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ListDevicesResponse::ListDevicesResponse(const ListDevicesResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.ListDevicesResponse)
}

void ListDevicesResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ListDevicesResponse::~ListDevicesResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.ListDevicesResponse)
  SharedDtor();
}

void ListDevicesResponse::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void ListDevicesResponse::ArenaDtor(void* object) {
  ListDevicesResponse* _this = reinterpret_cast< ListDevicesResponse* >(object);
  (void)_this;
}
void ListDevicesResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ListDevicesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListDevicesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListDevicesResponse_descriptor_;
}

const ListDevicesResponse& ListDevicesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto();
  return *default_instance_;
}

ListDevicesResponse* ListDevicesResponse::default_instance_ = NULL;

ListDevicesResponse* ListDevicesResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ListDevicesResponse>(arena);
}

void ListDevicesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ListDevicesResponse)
  local_device_.Clear();
  remote_device_.Clear();
}

bool ListDevicesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.ListDevicesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.DeviceAttributes local_device = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_local_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_local_device()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_local_device;
        if (input->ExpectTag(18)) goto parse_loop_remote_device;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .tensorflow.DeviceAttributes remote_device = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_remote_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_remote_device()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_remote_device;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.ListDevicesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.ListDevicesResponse)
  return false;
#undef DO_
}

void ListDevicesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.ListDevicesResponse)
  // repeated .tensorflow.DeviceAttributes local_device = 1;
  for (unsigned int i = 0, n = this->local_device_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->local_device(i), output);
  }

  // repeated .tensorflow.DeviceAttributes remote_device = 2;
  for (unsigned int i = 0, n = this->remote_device_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->remote_device(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.ListDevicesResponse)
}

::google::protobuf::uint8* ListDevicesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ListDevicesResponse)
  // repeated .tensorflow.DeviceAttributes local_device = 1;
  for (unsigned int i = 0, n = this->local_device_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->local_device(i), false, target);
  }

  // repeated .tensorflow.DeviceAttributes remote_device = 2;
  for (unsigned int i = 0, n = this->remote_device_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->remote_device(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ListDevicesResponse)
  return target;
}

int ListDevicesResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ListDevicesResponse)
  int total_size = 0;

  // repeated .tensorflow.DeviceAttributes local_device = 1;
  total_size += 1 * this->local_device_size();
  for (int i = 0; i < this->local_device_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->local_device(i));
  }

  // repeated .tensorflow.DeviceAttributes remote_device = 2;
  total_size += 1 * this->remote_device_size();
  for (int i = 0; i < this->remote_device_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->remote_device(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListDevicesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ListDevicesResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ListDevicesResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ListDevicesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ListDevicesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ListDevicesResponse)
    MergeFrom(*source);
  }
}

void ListDevicesResponse::MergeFrom(const ListDevicesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ListDevicesResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  local_device_.MergeFrom(from.local_device_);
  remote_device_.MergeFrom(from.remote_device_);
}

void ListDevicesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ListDevicesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDevicesResponse::CopyFrom(const ListDevicesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ListDevicesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDevicesResponse::IsInitialized() const {

  return true;
}

void ListDevicesResponse::Swap(ListDevicesResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListDevicesResponse temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ListDevicesResponse::UnsafeArenaSwap(ListDevicesResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListDevicesResponse::InternalSwap(ListDevicesResponse* other) {
  local_device_.UnsafeArenaSwap(&other->local_device_);
  remote_device_.UnsafeArenaSwap(&other->remote_device_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListDevicesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListDevicesResponse_descriptor_;
  metadata.reflection = ListDevicesResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListDevicesResponse

// repeated .tensorflow.DeviceAttributes local_device = 1;
int ListDevicesResponse::local_device_size() const {
  return local_device_.size();
}
void ListDevicesResponse::clear_local_device() {
  local_device_.Clear();
}
const ::tensorflow::DeviceAttributes& ListDevicesResponse::local_device(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.ListDevicesResponse.local_device)
  return local_device_.Get(index);
}
::tensorflow::DeviceAttributes* ListDevicesResponse::mutable_local_device(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.ListDevicesResponse.local_device)
  return local_device_.Mutable(index);
}
::tensorflow::DeviceAttributes* ListDevicesResponse::add_local_device() {
  // @@protoc_insertion_point(field_add:tensorflow.ListDevicesResponse.local_device)
  return local_device_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::DeviceAttributes >*
ListDevicesResponse::mutable_local_device() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.ListDevicesResponse.local_device)
  return &local_device_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::DeviceAttributes >&
ListDevicesResponse::local_device() const {
  // @@protoc_insertion_point(field_list:tensorflow.ListDevicesResponse.local_device)
  return local_device_;
}

// repeated .tensorflow.DeviceAttributes remote_device = 2;
int ListDevicesResponse::remote_device_size() const {
  return remote_device_.size();
}
void ListDevicesResponse::clear_remote_device() {
  remote_device_.Clear();
}
const ::tensorflow::DeviceAttributes& ListDevicesResponse::remote_device(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.ListDevicesResponse.remote_device)
  return remote_device_.Get(index);
}
::tensorflow::DeviceAttributes* ListDevicesResponse::mutable_remote_device(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.ListDevicesResponse.remote_device)
  return remote_device_.Mutable(index);
}
::tensorflow::DeviceAttributes* ListDevicesResponse::add_remote_device() {
  // @@protoc_insertion_point(field_add:tensorflow.ListDevicesResponse.remote_device)
  return remote_device_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::DeviceAttributes >*
ListDevicesResponse::mutable_remote_device() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.ListDevicesResponse.remote_device)
  return &remote_device_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::DeviceAttributes >&
ListDevicesResponse::remote_device() const {
  // @@protoc_insertion_point(field_list:tensorflow.ListDevicesResponse.remote_device)
  return remote_device_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void MakeCallableRequest::_slow_mutable_options() {
  options_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::CallableOptions >(
      GetArenaNoVirtual());
}
::tensorflow::CallableOptions* MakeCallableRequest::_slow_release_options() {
  if (options_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::CallableOptions* temp = new ::tensorflow::CallableOptions;
    temp->MergeFrom(*options_);
    options_ = NULL;
    return temp;
  }
}
::tensorflow::CallableOptions* MakeCallableRequest::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.MakeCallableRequest.options)
  
  ::tensorflow::CallableOptions* temp = options_;
  options_ = NULL;
  return temp;
}
void MakeCallableRequest::_slow_set_allocated_options(
    ::google::protobuf::Arena* message_arena, ::tensorflow::CallableOptions** options) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*options) == NULL) {
      message_arena->Own(*options);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*options)) {
      ::tensorflow::CallableOptions* new_options = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::CallableOptions >(
            message_arena);
      new_options->CopyFrom(**options);
      *options = new_options;
    }
}
void MakeCallableRequest::unsafe_arena_set_allocated_options(
    ::tensorflow::CallableOptions* options) {
  if (GetArenaNoVirtual() == NULL) {
    delete options_;
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MakeCallableRequest.options)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MakeCallableRequest::kSessionHandleFieldNumber;
const int MakeCallableRequest::kOptionsFieldNumber;
const int MakeCallableRequest::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MakeCallableRequest::MakeCallableRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.MakeCallableRequest)
}

MakeCallableRequest::MakeCallableRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MakeCallableRequest)
}

void MakeCallableRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  options_ = const_cast< ::tensorflow::CallableOptions*>(&::tensorflow::CallableOptions::default_instance());
}

MakeCallableRequest::MakeCallableRequest(const MakeCallableRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.MakeCallableRequest)
}

void MakeCallableRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  session_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  options_ = NULL;
  request_id_ = GOOGLE_LONGLONG(0);
}

MakeCallableRequest::~MakeCallableRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.MakeCallableRequest)
  SharedDtor();
}

void MakeCallableRequest::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  session_handle_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
    delete options_;
  }
}

void MakeCallableRequest::ArenaDtor(void* object) {
  MakeCallableRequest* _this = reinterpret_cast< MakeCallableRequest* >(object);
  (void)_this;
}
void MakeCallableRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MakeCallableRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MakeCallableRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MakeCallableRequest_descriptor_;
}

const MakeCallableRequest& MakeCallableRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto();
  return *default_instance_;
}

MakeCallableRequest* MakeCallableRequest::default_instance_ = NULL;

MakeCallableRequest* MakeCallableRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<MakeCallableRequest>(arena);
}

void MakeCallableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MakeCallableRequest)
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && options_ != NULL) delete options_;
  options_ = NULL;
  request_id_ = GOOGLE_LONGLONG(0);
}

bool MakeCallableRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.MakeCallableRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string session_handle = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_handle().data(), this->session_handle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.MakeCallableRequest.session_handle"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_options;
        break;
      }

      // optional .tensorflow.CallableOptions options = 2;
      case 2: {
        if (tag == 18) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_request_id;
        break;
      }

      // optional int64 request_id = 3;
      case 3: {
        if (tag == 24) {
         parse_request_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.MakeCallableRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.MakeCallableRequest)
  return false;
#undef DO_
}

void MakeCallableRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.MakeCallableRequest)
  // optional string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MakeCallableRequest.session_handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_handle(), output);
  }

  // optional .tensorflow.CallableOptions options = 2;
  if (this->has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->options_, output);
  }

  // optional int64 request_id = 3;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->request_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.MakeCallableRequest)
}

::google::protobuf::uint8* MakeCallableRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MakeCallableRequest)
  // optional string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MakeCallableRequest.session_handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session_handle(), target);
  }

  // optional .tensorflow.CallableOptions options = 2;
  if (this->has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->options_, false, target);
  }

  // optional int64 request_id = 3;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->request_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MakeCallableRequest)
  return target;
}

int MakeCallableRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MakeCallableRequest)
  int total_size = 0;

  // optional string session_handle = 1;
  if (this->session_handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_handle());
  }

  // optional .tensorflow.CallableOptions options = 2;
  if (this->has_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->options_);
  }

  // optional int64 request_id = 3;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->request_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MakeCallableRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.MakeCallableRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MakeCallableRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MakeCallableRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.MakeCallableRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.MakeCallableRequest)
    MergeFrom(*source);
  }
}

void MakeCallableRequest::MergeFrom(const MakeCallableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MakeCallableRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.session_handle().size() > 0) {
    set_session_handle(from.session_handle());
  }
  if (from.has_options()) {
    mutable_options()->::tensorflow::CallableOptions::MergeFrom(from.options());
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
}

void MakeCallableRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.MakeCallableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MakeCallableRequest::CopyFrom(const MakeCallableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MakeCallableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MakeCallableRequest::IsInitialized() const {

  return true;
}

void MakeCallableRequest::Swap(MakeCallableRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MakeCallableRequest temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void MakeCallableRequest::UnsafeArenaSwap(MakeCallableRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MakeCallableRequest::InternalSwap(MakeCallableRequest* other) {
  session_handle_.Swap(&other->session_handle_);
  std::swap(options_, other->options_);
  std::swap(request_id_, other->request_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MakeCallableRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MakeCallableRequest_descriptor_;
  metadata.reflection = MakeCallableRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MakeCallableRequest

// optional string session_handle = 1;
void MakeCallableRequest::clear_session_handle() {
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& MakeCallableRequest::session_handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.MakeCallableRequest.session_handle)
  return session_handle_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MakeCallableRequest::set_session_handle(const ::std::string& value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.MakeCallableRequest.session_handle)
}
 void MakeCallableRequest::set_session_handle(const char* value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.MakeCallableRequest.session_handle)
}
 void MakeCallableRequest::set_session_handle(const char* value,
    size_t size) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.MakeCallableRequest.session_handle)
}
 ::std::string* MakeCallableRequest::mutable_session_handle() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.MakeCallableRequest.session_handle)
  return session_handle_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* MakeCallableRequest::release_session_handle() {
  // @@protoc_insertion_point(field_release:tensorflow.MakeCallableRequest.session_handle)
  
  return session_handle_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* MakeCallableRequest::unsafe_arena_release_session_handle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.MakeCallableRequest.session_handle)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return session_handle_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void MakeCallableRequest::set_allocated_session_handle(::std::string* session_handle) {
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_handle,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MakeCallableRequest.session_handle)
}
 void MakeCallableRequest::unsafe_arena_set_allocated_session_handle(
    ::std::string* session_handle) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      session_handle, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MakeCallableRequest.session_handle)
}

// optional .tensorflow.CallableOptions options = 2;
bool MakeCallableRequest::has_options() const {
  return !_is_default_instance_ && options_ != NULL;
}
void MakeCallableRequest::clear_options() {
  if (GetArenaNoVirtual() == NULL && options_ != NULL) delete options_;
  options_ = NULL;
}
const ::tensorflow::CallableOptions& MakeCallableRequest::options() const {
  // @@protoc_insertion_point(field_get:tensorflow.MakeCallableRequest.options)
  return options_ != NULL ? *options_ : *default_instance_->options_;
}
::tensorflow::CallableOptions* MakeCallableRequest::mutable_options() {
  
  if (options_ == NULL) {
    _slow_mutable_options();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.MakeCallableRequest.options)
  return options_;
}
::tensorflow::CallableOptions* MakeCallableRequest::release_options() {
  // @@protoc_insertion_point(field_release:tensorflow.MakeCallableRequest.options)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_options();
  } else {
    ::tensorflow::CallableOptions* temp = options_;
    options_ = NULL;
    return temp;
  }
}
 void MakeCallableRequest::set_allocated_options(::tensorflow::CallableOptions* options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete options_;
  }
  if (options != NULL) {
    _slow_set_allocated_options(message_arena, &options);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MakeCallableRequest.options)
}

// optional int64 request_id = 3;
void MakeCallableRequest::clear_request_id() {
  request_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 MakeCallableRequest::request_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.MakeCallableRequest.request_id)
  return request_id_;
}
 void MakeCallableRequest::set_request_id(::google::protobuf::int64 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MakeCallableRequest.request_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MakeCallableResponse::kHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MakeCallableResponse::MakeCallableResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.MakeCallableResponse)
}

MakeCallableResponse::MakeCallableResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MakeCallableResponse)
}

void MakeCallableResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MakeCallableResponse::MakeCallableResponse(const MakeCallableResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.MakeCallableResponse)
}

void MakeCallableResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  handle_ = GOOGLE_LONGLONG(0);
}

MakeCallableResponse::~MakeCallableResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.MakeCallableResponse)
  SharedDtor();
}

void MakeCallableResponse::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void MakeCallableResponse::ArenaDtor(void* object) {
  MakeCallableResponse* _this = reinterpret_cast< MakeCallableResponse* >(object);
  (void)_this;
}
void MakeCallableResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MakeCallableResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MakeCallableResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MakeCallableResponse_descriptor_;
}

const MakeCallableResponse& MakeCallableResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto();
  return *default_instance_;
}

MakeCallableResponse* MakeCallableResponse::default_instance_ = NULL;

MakeCallableResponse* MakeCallableResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<MakeCallableResponse>(arena);
}

void MakeCallableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MakeCallableResponse)
  handle_ = GOOGLE_LONGLONG(0);
}

bool MakeCallableResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.MakeCallableResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 handle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &handle_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.MakeCallableResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.MakeCallableResponse)
  return false;
#undef DO_
}

void MakeCallableResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.MakeCallableResponse)
  // optional int64 handle = 1;
  if (this->handle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->handle(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.MakeCallableResponse)
}

::google::protobuf::uint8* MakeCallableResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MakeCallableResponse)
  // optional int64 handle = 1;
  if (this->handle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->handle(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MakeCallableResponse)
  return target;
}

int MakeCallableResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MakeCallableResponse)
  int total_size = 0;

  // optional int64 handle = 1;
  if (this->handle() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->handle());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MakeCallableResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.MakeCallableResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MakeCallableResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MakeCallableResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.MakeCallableResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.MakeCallableResponse)
    MergeFrom(*source);
  }
}

void MakeCallableResponse::MergeFrom(const MakeCallableResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MakeCallableResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.handle() != 0) {
    set_handle(from.handle());
  }
}

void MakeCallableResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.MakeCallableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MakeCallableResponse::CopyFrom(const MakeCallableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MakeCallableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MakeCallableResponse::IsInitialized() const {

  return true;
}

void MakeCallableResponse::Swap(MakeCallableResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MakeCallableResponse temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void MakeCallableResponse::UnsafeArenaSwap(MakeCallableResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MakeCallableResponse::InternalSwap(MakeCallableResponse* other) {
  std::swap(handle_, other->handle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MakeCallableResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MakeCallableResponse_descriptor_;
  metadata.reflection = MakeCallableResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MakeCallableResponse

// optional int64 handle = 1;
void MakeCallableResponse::clear_handle() {
  handle_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 MakeCallableResponse::handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.MakeCallableResponse.handle)
  return handle_;
}
 void MakeCallableResponse::set_handle(::google::protobuf::int64 value) {
  
  handle_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MakeCallableResponse.handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunCallableRequest::kSessionHandleFieldNumber;
const int RunCallableRequest::kHandleFieldNumber;
const int RunCallableRequest::kFeedFieldNumber;
const int RunCallableRequest::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunCallableRequest::RunCallableRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RunCallableRequest)
}

RunCallableRequest::RunCallableRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  feed_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RunCallableRequest)
}

void RunCallableRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RunCallableRequest::RunCallableRequest(const RunCallableRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.RunCallableRequest)
}

void RunCallableRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  session_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_ = GOOGLE_LONGLONG(0);
  request_id_ = GOOGLE_LONGLONG(0);
}

RunCallableRequest::~RunCallableRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.RunCallableRequest)
  SharedDtor();
}

void RunCallableRequest::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  session_handle_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void RunCallableRequest::ArenaDtor(void* object) {
  RunCallableRequest* _this = reinterpret_cast< RunCallableRequest* >(object);
  (void)_this;
}
void RunCallableRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RunCallableRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunCallableRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunCallableRequest_descriptor_;
}

const RunCallableRequest& RunCallableRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto();
  return *default_instance_;
}

RunCallableRequest* RunCallableRequest::default_instance_ = NULL;

RunCallableRequest* RunCallableRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RunCallableRequest>(arena);
}

void RunCallableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RunCallableRequest)
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  handle_ = GOOGLE_LONGLONG(0);
  request_id_ = GOOGLE_LONGLONG(0);
  feed_.Clear();
}

bool RunCallableRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RunCallableRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string session_handle = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_handle().data(), this->session_handle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.RunCallableRequest.session_handle"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_handle;
        break;
      }

      // optional int64 handle = 2;
      case 2: {
        if (tag == 16) {
         parse_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &handle_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_feed;
        break;
      }

      // repeated .tensorflow.TensorProto feed = 3;
      case 3: {
        if (tag == 26) {
         parse_feed:
          DO_(input->IncrementRecursionDepth());
         parse_loop_feed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_feed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_feed;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(32)) goto parse_request_id;
        break;
      }

      // optional int64 request_id = 4;
      case 4: {
        if (tag == 32) {
         parse_request_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RunCallableRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RunCallableRequest)
  return false;
#undef DO_
}

void RunCallableRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RunCallableRequest)
  // optional string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunCallableRequest.session_handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_handle(), output);
  }

  // optional int64 handle = 2;
  if (this->handle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->handle(), output);
  }

  // repeated .tensorflow.TensorProto feed = 3;
  for (unsigned int i = 0, n = this->feed_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->feed(i), output);
  }

  // optional int64 request_id = 4;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->request_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.RunCallableRequest)
}

::google::protobuf::uint8* RunCallableRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RunCallableRequest)
  // optional string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunCallableRequest.session_handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session_handle(), target);
  }

  // optional int64 handle = 2;
  if (this->handle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->handle(), target);
  }

  // repeated .tensorflow.TensorProto feed = 3;
  for (unsigned int i = 0, n = this->feed_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->feed(i), false, target);
  }

  // optional int64 request_id = 4;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->request_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RunCallableRequest)
  return target;
}

int RunCallableRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RunCallableRequest)
  int total_size = 0;

  // optional string session_handle = 1;
  if (this->session_handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_handle());
  }

  // optional int64 handle = 2;
  if (this->handle() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->handle());
  }

  // optional int64 request_id = 4;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->request_id());
  }

  // repeated .tensorflow.TensorProto feed = 3;
  total_size += 1 * this->feed_size();
  for (int i = 0; i < this->feed_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->feed(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunCallableRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RunCallableRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RunCallableRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RunCallableRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RunCallableRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RunCallableRequest)
    MergeFrom(*source);
  }
}

void RunCallableRequest::MergeFrom(const RunCallableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RunCallableRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  feed_.MergeFrom(from.feed_);
  if (from.session_handle().size() > 0) {
    set_session_handle(from.session_handle());
  }
  if (from.handle() != 0) {
    set_handle(from.handle());
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
}

void RunCallableRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RunCallableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunCallableRequest::CopyFrom(const RunCallableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RunCallableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunCallableRequest::IsInitialized() const {

  return true;
}

void RunCallableRequest::Swap(RunCallableRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RunCallableRequest temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void RunCallableRequest::UnsafeArenaSwap(RunCallableRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RunCallableRequest::InternalSwap(RunCallableRequest* other) {
  session_handle_.Swap(&other->session_handle_);
  std::swap(handle_, other->handle_);
  feed_.UnsafeArenaSwap(&other->feed_);
  std::swap(request_id_, other->request_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RunCallableRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunCallableRequest_descriptor_;
  metadata.reflection = RunCallableRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RunCallableRequest

// optional string session_handle = 1;
void RunCallableRequest::clear_session_handle() {
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& RunCallableRequest::session_handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunCallableRequest.session_handle)
  return session_handle_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RunCallableRequest::set_session_handle(const ::std::string& value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.RunCallableRequest.session_handle)
}
 void RunCallableRequest::set_session_handle(const char* value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.RunCallableRequest.session_handle)
}
 void RunCallableRequest::set_session_handle(const char* value,
    size_t size) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.RunCallableRequest.session_handle)
}
 ::std::string* RunCallableRequest::mutable_session_handle() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.RunCallableRequest.session_handle)
  return session_handle_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* RunCallableRequest::release_session_handle() {
  // @@protoc_insertion_point(field_release:tensorflow.RunCallableRequest.session_handle)
  
  return session_handle_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* RunCallableRequest::unsafe_arena_release_session_handle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RunCallableRequest.session_handle)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return session_handle_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void RunCallableRequest::set_allocated_session_handle(::std::string* session_handle) {
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_handle,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunCallableRequest.session_handle)
}
 void RunCallableRequest::unsafe_arena_set_allocated_session_handle(
    ::std::string* session_handle) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      session_handle, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RunCallableRequest.session_handle)
}

// optional int64 handle = 2;
void RunCallableRequest::clear_handle() {
  handle_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RunCallableRequest::handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunCallableRequest.handle)
  return handle_;
}
 void RunCallableRequest::set_handle(::google::protobuf::int64 value) {
  
  handle_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RunCallableRequest.handle)
}

// repeated .tensorflow.TensorProto feed = 3;
int RunCallableRequest::feed_size() const {
  return feed_.size();
}
void RunCallableRequest::clear_feed() {
  feed_.Clear();
}
const ::tensorflow::TensorProto& RunCallableRequest::feed(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.RunCallableRequest.feed)
  return feed_.Get(index);
}
::tensorflow::TensorProto* RunCallableRequest::mutable_feed(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.RunCallableRequest.feed)
  return feed_.Mutable(index);
}
::tensorflow::TensorProto* RunCallableRequest::add_feed() {
  // @@protoc_insertion_point(field_add:tensorflow.RunCallableRequest.feed)
  return feed_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::TensorProto >*
RunCallableRequest::mutable_feed() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.RunCallableRequest.feed)
  return &feed_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorProto >&
RunCallableRequest::feed() const {
  // @@protoc_insertion_point(field_list:tensorflow.RunCallableRequest.feed)
  return feed_;
}

// optional int64 request_id = 4;
void RunCallableRequest::clear_request_id() {
  request_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RunCallableRequest::request_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunCallableRequest.request_id)
  return request_id_;
}
 void RunCallableRequest::set_request_id(::google::protobuf::int64 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RunCallableRequest.request_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void RunCallableResponse::_slow_mutable_metadata() {
  metadata_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::RunMetadata >(
      GetArenaNoVirtual());
}
::tensorflow::RunMetadata* RunCallableResponse::_slow_release_metadata() {
  if (metadata_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::RunMetadata* temp = new ::tensorflow::RunMetadata;
    temp->MergeFrom(*metadata_);
    metadata_ = NULL;
    return temp;
  }
}
::tensorflow::RunMetadata* RunCallableResponse::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RunCallableResponse.metadata)
  
  ::tensorflow::RunMetadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
void RunCallableResponse::_slow_set_allocated_metadata(
    ::google::protobuf::Arena* message_arena, ::tensorflow::RunMetadata** metadata) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*metadata) == NULL) {
      message_arena->Own(*metadata);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*metadata)) {
      ::tensorflow::RunMetadata* new_metadata = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::RunMetadata >(
            message_arena);
      new_metadata->CopyFrom(**metadata);
      *metadata = new_metadata;
    }
}
void RunCallableResponse::unsafe_arena_set_allocated_metadata(
    ::tensorflow::RunMetadata* metadata) {
  if (GetArenaNoVirtual() == NULL) {
    delete metadata_;
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RunCallableResponse.metadata)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunCallableResponse::kFetchFieldNumber;
const int RunCallableResponse::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunCallableResponse::RunCallableResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RunCallableResponse)
}

RunCallableResponse::RunCallableResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  fetch_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RunCallableResponse)
}

void RunCallableResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  metadata_ = const_cast< ::tensorflow::RunMetadata*>(&::tensorflow::RunMetadata::default_instance());
}

RunCallableResponse::RunCallableResponse(const RunCallableResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.RunCallableResponse)
}

void RunCallableResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  metadata_ = NULL;
}

RunCallableResponse::~RunCallableResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.RunCallableResponse)
  SharedDtor();
}

void RunCallableResponse::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
    delete metadata_;
  }
}

void RunCallableResponse::ArenaDtor(void* object) {
  RunCallableResponse* _this = reinterpret_cast< RunCallableResponse* >(object);
  (void)_this;
}
void RunCallableResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RunCallableResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunCallableResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunCallableResponse_descriptor_;
}

const RunCallableResponse& RunCallableResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto();
  return *default_instance_;
}

RunCallableResponse* RunCallableResponse::default_instance_ = NULL;

RunCallableResponse* RunCallableResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RunCallableResponse>(arena);
}

void RunCallableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RunCallableResponse)
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
  fetch_.Clear();
}

bool RunCallableResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RunCallableResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.TensorProto fetch = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_fetch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_fetch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_fetch;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_metadata;
        break;
      }

      // optional .tensorflow.RunMetadata metadata = 2;
      case 2: {
        if (tag == 18) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RunCallableResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RunCallableResponse)
  return false;
#undef DO_
}

void RunCallableResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RunCallableResponse)
  // repeated .tensorflow.TensorProto fetch = 1;
  for (unsigned int i = 0, n = this->fetch_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fetch(i), output);
  }

  // optional .tensorflow.RunMetadata metadata = 2;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->metadata_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.RunCallableResponse)
}

::google::protobuf::uint8* RunCallableResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RunCallableResponse)
  // repeated .tensorflow.TensorProto fetch = 1;
  for (unsigned int i = 0, n = this->fetch_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->fetch(i), false, target);
  }

  // optional .tensorflow.RunMetadata metadata = 2;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->metadata_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RunCallableResponse)
  return target;
}

int RunCallableResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RunCallableResponse)
  int total_size = 0;

  // optional .tensorflow.RunMetadata metadata = 2;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->metadata_);
  }

  // repeated .tensorflow.TensorProto fetch = 1;
  total_size += 1 * this->fetch_size();
  for (int i = 0; i < this->fetch_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fetch(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunCallableResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RunCallableResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RunCallableResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RunCallableResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RunCallableResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RunCallableResponse)
    MergeFrom(*source);
  }
}

void RunCallableResponse::MergeFrom(const RunCallableResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RunCallableResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  fetch_.MergeFrom(from.fetch_);
  if (from.has_metadata()) {
    mutable_metadata()->::tensorflow::RunMetadata::MergeFrom(from.metadata());
  }
}

void RunCallableResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RunCallableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunCallableResponse::CopyFrom(const RunCallableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RunCallableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunCallableResponse::IsInitialized() const {

  return true;
}

void RunCallableResponse::Swap(RunCallableResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RunCallableResponse temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void RunCallableResponse::UnsafeArenaSwap(RunCallableResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RunCallableResponse::InternalSwap(RunCallableResponse* other) {
  fetch_.UnsafeArenaSwap(&other->fetch_);
  std::swap(metadata_, other->metadata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RunCallableResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunCallableResponse_descriptor_;
  metadata.reflection = RunCallableResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RunCallableResponse

// repeated .tensorflow.TensorProto fetch = 1;
int RunCallableResponse::fetch_size() const {
  return fetch_.size();
}
void RunCallableResponse::clear_fetch() {
  fetch_.Clear();
}
const ::tensorflow::TensorProto& RunCallableResponse::fetch(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.RunCallableResponse.fetch)
  return fetch_.Get(index);
}
::tensorflow::TensorProto* RunCallableResponse::mutable_fetch(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.RunCallableResponse.fetch)
  return fetch_.Mutable(index);
}
::tensorflow::TensorProto* RunCallableResponse::add_fetch() {
  // @@protoc_insertion_point(field_add:tensorflow.RunCallableResponse.fetch)
  return fetch_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::TensorProto >*
RunCallableResponse::mutable_fetch() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.RunCallableResponse.fetch)
  return &fetch_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorProto >&
RunCallableResponse::fetch() const {
  // @@protoc_insertion_point(field_list:tensorflow.RunCallableResponse.fetch)
  return fetch_;
}

// optional .tensorflow.RunMetadata metadata = 2;
bool RunCallableResponse::has_metadata() const {
  return !_is_default_instance_ && metadata_ != NULL;
}
void RunCallableResponse::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
const ::tensorflow::RunMetadata& RunCallableResponse::metadata() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunCallableResponse.metadata)
  return metadata_ != NULL ? *metadata_ : *default_instance_->metadata_;
}
::tensorflow::RunMetadata* RunCallableResponse::mutable_metadata() {
  
  if (metadata_ == NULL) {
    _slow_mutable_metadata();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RunCallableResponse.metadata)
  return metadata_;
}
::tensorflow::RunMetadata* RunCallableResponse::release_metadata() {
  // @@protoc_insertion_point(field_release:tensorflow.RunCallableResponse.metadata)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_metadata();
  } else {
    ::tensorflow::RunMetadata* temp = metadata_;
    metadata_ = NULL;
    return temp;
  }
}
 void RunCallableResponse::set_allocated_metadata(::tensorflow::RunMetadata* metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete metadata_;
  }
  if (metadata != NULL) {
    _slow_set_allocated_metadata(message_arena, &metadata);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunCallableResponse.metadata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReleaseCallableRequest::kSessionHandleFieldNumber;
const int ReleaseCallableRequest::kHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReleaseCallableRequest::ReleaseCallableRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ReleaseCallableRequest)
}

ReleaseCallableRequest::ReleaseCallableRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ReleaseCallableRequest)
}

void ReleaseCallableRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ReleaseCallableRequest::ReleaseCallableRequest(const ReleaseCallableRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.ReleaseCallableRequest)
}

void ReleaseCallableRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  session_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_ = GOOGLE_LONGLONG(0);
}

ReleaseCallableRequest::~ReleaseCallableRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.ReleaseCallableRequest)
  SharedDtor();
}

void ReleaseCallableRequest::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  session_handle_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void ReleaseCallableRequest::ArenaDtor(void* object) {
  ReleaseCallableRequest* _this = reinterpret_cast< ReleaseCallableRequest* >(object);
  (void)_this;
}
void ReleaseCallableRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ReleaseCallableRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReleaseCallableRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReleaseCallableRequest_descriptor_;
}

const ReleaseCallableRequest& ReleaseCallableRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto();
  return *default_instance_;
}

ReleaseCallableRequest* ReleaseCallableRequest::default_instance_ = NULL;

ReleaseCallableRequest* ReleaseCallableRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ReleaseCallableRequest>(arena);
}

void ReleaseCallableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ReleaseCallableRequest)
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  handle_ = GOOGLE_LONGLONG(0);
}

bool ReleaseCallableRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.ReleaseCallableRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string session_handle = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_handle().data(), this->session_handle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.ReleaseCallableRequest.session_handle"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_handle;
        break;
      }

      // optional int64 handle = 2;
      case 2: {
        if (tag == 16) {
         parse_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &handle_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.ReleaseCallableRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.ReleaseCallableRequest)
  return false;
#undef DO_
}

void ReleaseCallableRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.ReleaseCallableRequest)
  // optional string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ReleaseCallableRequest.session_handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_handle(), output);
  }

  // optional int64 handle = 2;
  if (this->handle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->handle(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.ReleaseCallableRequest)
}

::google::protobuf::uint8* ReleaseCallableRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ReleaseCallableRequest)
  // optional string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ReleaseCallableRequest.session_handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session_handle(), target);
  }

  // optional int64 handle = 2;
  if (this->handle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->handle(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ReleaseCallableRequest)
  return target;
}

int ReleaseCallableRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ReleaseCallableRequest)
  int total_size = 0;

  // optional string session_handle = 1;
  if (this->session_handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_handle());
  }

  // optional int64 handle = 2;
  if (this->handle() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->handle());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReleaseCallableRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ReleaseCallableRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReleaseCallableRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReleaseCallableRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ReleaseCallableRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ReleaseCallableRequest)
    MergeFrom(*source);
  }
}

void ReleaseCallableRequest::MergeFrom(const ReleaseCallableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ReleaseCallableRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.session_handle().size() > 0) {
    set_session_handle(from.session_handle());
  }
  if (from.handle() != 0) {
    set_handle(from.handle());
  }
}

void ReleaseCallableRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ReleaseCallableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleaseCallableRequest::CopyFrom(const ReleaseCallableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ReleaseCallableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseCallableRequest::IsInitialized() const {

  return true;
}

void ReleaseCallableRequest::Swap(ReleaseCallableRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ReleaseCallableRequest temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ReleaseCallableRequest::UnsafeArenaSwap(ReleaseCallableRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ReleaseCallableRequest::InternalSwap(ReleaseCallableRequest* other) {
  session_handle_.Swap(&other->session_handle_);
  std::swap(handle_, other->handle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReleaseCallableRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReleaseCallableRequest_descriptor_;
  metadata.reflection = ReleaseCallableRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReleaseCallableRequest

// optional string session_handle = 1;
void ReleaseCallableRequest::clear_session_handle() {
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& ReleaseCallableRequest::session_handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReleaseCallableRequest.session_handle)
  return session_handle_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReleaseCallableRequest::set_session_handle(const ::std::string& value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.ReleaseCallableRequest.session_handle)
}
 void ReleaseCallableRequest::set_session_handle(const char* value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.ReleaseCallableRequest.session_handle)
}
 void ReleaseCallableRequest::set_session_handle(const char* value,
    size_t size) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.ReleaseCallableRequest.session_handle)
}
 ::std::string* ReleaseCallableRequest::mutable_session_handle() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.ReleaseCallableRequest.session_handle)
  return session_handle_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* ReleaseCallableRequest::release_session_handle() {
  // @@protoc_insertion_point(field_release:tensorflow.ReleaseCallableRequest.session_handle)
  
  return session_handle_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* ReleaseCallableRequest::unsafe_arena_release_session_handle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReleaseCallableRequest.session_handle)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return session_handle_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void ReleaseCallableRequest::set_allocated_session_handle(::std::string* session_handle) {
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_handle,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReleaseCallableRequest.session_handle)
}
 void ReleaseCallableRequest::unsafe_arena_set_allocated_session_handle(
    ::std::string* session_handle) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      session_handle, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReleaseCallableRequest.session_handle)
}

// optional int64 handle = 2;
void ReleaseCallableRequest::clear_handle() {
  handle_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ReleaseCallableRequest::handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReleaseCallableRequest.handle)
  return handle_;
}
 void ReleaseCallableRequest::set_handle(::google::protobuf::int64 value) {
  
  handle_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ReleaseCallableRequest.handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReleaseCallableResponse::ReleaseCallableResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ReleaseCallableResponse)
}

ReleaseCallableResponse::ReleaseCallableResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ReleaseCallableResponse)
}

void ReleaseCallableResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ReleaseCallableResponse::ReleaseCallableResponse(const ReleaseCallableResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.ReleaseCallableResponse)
}

void ReleaseCallableResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ReleaseCallableResponse::~ReleaseCallableResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.ReleaseCallableResponse)
  SharedDtor();
}

void ReleaseCallableResponse::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void ReleaseCallableResponse::ArenaDtor(void* object) {
  ReleaseCallableResponse* _this = reinterpret_cast< ReleaseCallableResponse* >(object);
  (void)_this;
}
void ReleaseCallableResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ReleaseCallableResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReleaseCallableResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReleaseCallableResponse_descriptor_;
}

const ReleaseCallableResponse& ReleaseCallableResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto();
  return *default_instance_;
}

ReleaseCallableResponse* ReleaseCallableResponse::default_instance_ = NULL;

ReleaseCallableResponse* ReleaseCallableResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ReleaseCallableResponse>(arena);
}

void ReleaseCallableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ReleaseCallableResponse)
}

bool ReleaseCallableResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.ReleaseCallableResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.ReleaseCallableResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.ReleaseCallableResponse)
  return false;
#undef DO_
}

void ReleaseCallableResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.ReleaseCallableResponse)
  // @@protoc_insertion_point(serialize_end:tensorflow.ReleaseCallableResponse)
}

::google::protobuf::uint8* ReleaseCallableResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ReleaseCallableResponse)
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ReleaseCallableResponse)
  return target;
}

int ReleaseCallableResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ReleaseCallableResponse)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReleaseCallableResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ReleaseCallableResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReleaseCallableResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReleaseCallableResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ReleaseCallableResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ReleaseCallableResponse)
    MergeFrom(*source);
  }
}

void ReleaseCallableResponse::MergeFrom(const ReleaseCallableResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ReleaseCallableResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void ReleaseCallableResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ReleaseCallableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleaseCallableResponse::CopyFrom(const ReleaseCallableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ReleaseCallableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseCallableResponse::IsInitialized() const {

  return true;
}

void ReleaseCallableResponse::Swap(ReleaseCallableResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ReleaseCallableResponse temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ReleaseCallableResponse::UnsafeArenaSwap(ReleaseCallableResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ReleaseCallableResponse::InternalSwap(ReleaseCallableResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReleaseCallableResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReleaseCallableResponse_descriptor_;
  metadata.reflection = ReleaseCallableResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReleaseCallableResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
