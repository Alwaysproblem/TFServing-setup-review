// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/eager_service.proto

#ifndef PROTOBUF_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto__INCLUDED
#define PROTOBUF_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow/core/framework/attr_value.pb.h"
#include "tensorflow/core/framework/device_attributes.pb.h"
#include "tensorflow/core/framework/function.pb.h"
#include "tensorflow/core/framework/tensor.pb.h"
#include "tensorflow/core/framework/tensor_shape.pb.h"
#include "tensorflow/core/framework/versions.pb.h"
#include "tensorflow/core/protobuf/remote_tensor_handle.pb.h"
#include "tensorflow/core/protobuf/tensorflow_server.pb.h"
// @@protoc_insertion_point(includes)

namespace tensorflow {
namespace eager {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();

class CleanupFunctionOp;
class CloseContextRequest;
class CloseContextResponse;
class CreateContextRequest;
class CreateContextResponse;
class EnqueueRequest;
class EnqueueResponse;
class KeepAliveRequest;
class KeepAliveResponse;
class Operation;
class Operation_Input;
class QueueItem;
class QueueResponse;
class RegisterFunctionOp;
class RunComponentFunctionRequest;
class RunComponentFunctionResponse;
class SendPackedHandleOp;
class SendPackedHandleOp_Handle;
class SendPackedHandleOp_LocalTensorHandle;
class SendTensorOp;
class SyncRemoteExecutorForStream;
class UpdateContextRequest;
class UpdateContextResponse;
class WaitQueueDoneRequest;
class WaitQueueDoneResponse;

// ===================================================================

class Operation_Input : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.eager.Operation.Input) */ {
 public:
  Operation_Input();
  virtual ~Operation_Input();

  Operation_Input(const Operation_Input& from);

  inline Operation_Input& operator=(const Operation_Input& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Operation_Input& default_instance();

  enum ItemCase {
    kRemoteHandle = 1,
    kTensor = 2,
    ITEM_NOT_SET = 0,
  };

  void Swap(Operation_Input* other);

  // implements Message ----------------------------------------------

  inline Operation_Input* New() const { return New(NULL); }

  Operation_Input* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Operation_Input& from);
  void MergeFrom(const Operation_Input& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Operation_Input* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .tensorflow.eager.RemoteTensorHandle remote_handle = 1;
  bool has_remote_handle() const;
  void clear_remote_handle();
  static const int kRemoteHandleFieldNumber = 1;
  const ::tensorflow::eager::RemoteTensorHandle& remote_handle() const;
  ::tensorflow::eager::RemoteTensorHandle* mutable_remote_handle();
  ::tensorflow::eager::RemoteTensorHandle* release_remote_handle();
  void set_allocated_remote_handle(::tensorflow::eager::RemoteTensorHandle* remote_handle);

  // optional .tensorflow.TensorProto tensor = 2;
  bool has_tensor() const;
  void clear_tensor();
  static const int kTensorFieldNumber = 2;
  const ::tensorflow::TensorProto& tensor() const;
  ::tensorflow::TensorProto* mutable_tensor();
  ::tensorflow::TensorProto* release_tensor();
  void set_allocated_tensor(::tensorflow::TensorProto* tensor);

  ItemCase item_case() const;
  // @@protoc_insertion_point(class_scope:tensorflow.eager.Operation.Input)
 private:
  inline void set_has_remote_handle();
  inline void set_has_tensor();

  inline bool has_item() const;
  void clear_item();
  inline void clear_has_item();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  union ItemUnion {
    ItemUnion() {}
    ::tensorflow::eager::RemoteTensorHandle* remote_handle_;
    ::tensorflow::TensorProto* tensor_;
  } item_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();

  void InitAsDefaultInstance();
  static Operation_Input* default_instance_;
};
// -------------------------------------------------------------------

class Operation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.eager.Operation) */ {
 public:
  Operation();
  virtual ~Operation();

  Operation(const Operation& from);

  inline Operation& operator=(const Operation& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Operation& default_instance();

  void Swap(Operation* other);

  // implements Message ----------------------------------------------

  inline Operation* New() const { return New(NULL); }

  Operation* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Operation& from);
  void MergeFrom(const Operation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Operation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Operation_Input Input;

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated .tensorflow.eager.Operation.Input op_inputs = 10;
  int op_inputs_size() const;
  void clear_op_inputs();
  static const int kOpInputsFieldNumber = 10;
  const ::tensorflow::eager::Operation_Input& op_inputs(int index) const;
  ::tensorflow::eager::Operation_Input* mutable_op_inputs(int index);
  ::tensorflow::eager::Operation_Input* add_op_inputs();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::eager::Operation_Input >*
      mutable_op_inputs();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::eager::Operation_Input >&
      op_inputs() const;

  // repeated int64 control_op_ids = 4;
  int control_op_ids_size() const;
  void clear_control_op_ids();
  static const int kControlOpIdsFieldNumber = 4;
  ::google::protobuf::int64 control_op_ids(int index) const;
  void set_control_op_ids(int index, ::google::protobuf::int64 value);
  void add_control_op_ids(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      control_op_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_control_op_ids();

  // map<string, .tensorflow.AttrValue> attrs = 5;
  int attrs_size() const;
  void clear_attrs();
  static const int kAttrsFieldNumber = 5;
  const ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >&
      attrs() const;
  ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >*
      mutable_attrs();

  // optional string device = 6;
  void clear_device();
  static const int kDeviceFieldNumber = 6;
  const ::std::string& device() const;
  void set_device(const ::std::string& value);
  void set_device(const char* value);
  void set_device(const char* value, size_t size);
  ::std::string* mutable_device();
  ::std::string* release_device();
  void set_allocated_device(::std::string* device);

  // optional bool is_component_function = 7;
  void clear_is_component_function();
  static const int kIsComponentFunctionFieldNumber = 7;
  bool is_component_function() const;
  void set_is_component_function(bool value);

  // optional int64 func_step_id = 8;
  void clear_func_step_id();
  static const int kFuncStepIdFieldNumber = 8;
  ::google::protobuf::int64 func_step_id() const;
  void set_func_step_id(::google::protobuf::int64 value);

  // optional bool is_function = 9;
  void clear_is_function();
  static const int kIsFunctionFieldNumber = 9;
  bool is_function() const;
  void set_is_function(bool value);

  // @@protoc_insertion_point(class_scope:tensorflow.eager.Operation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::eager::Operation_Input > op_inputs_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > control_op_ids_;
  mutable int _control_op_ids_cached_byte_size_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::tensorflow::AttrValue,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      Operation_AttrsEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::tensorflow::AttrValue,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > attrs_;
  ::google::protobuf::internal::ArenaStringPtr device_;
  ::google::protobuf::int64 func_step_id_;
  bool is_component_function_;
  bool is_function_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();

  void InitAsDefaultInstance();
  static Operation* default_instance_;
};
// -------------------------------------------------------------------

class QueueItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.eager.QueueItem) */ {
 public:
  QueueItem();
  virtual ~QueueItem();

  QueueItem(const QueueItem& from);

  inline QueueItem& operator=(const QueueItem& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueueItem& default_instance();

  enum ItemCase {
    kHandleToDecref = 1,
    kOperation = 2,
    kSendTensor = 3,
    kRegisterFunction = 4,
    kCleanupFunction = 5,
    kSyncRemoteExecutorForStream = 6,
    kSendPackedHandle = 7,
    ITEM_NOT_SET = 0,
  };

  void Swap(QueueItem* other);

  // implements Message ----------------------------------------------

  inline QueueItem* New() const { return New(NULL); }

  QueueItem* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueueItem& from);
  void MergeFrom(const QueueItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueueItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .tensorflow.eager.RemoteTensorHandle handle_to_decref = 1;
  bool has_handle_to_decref() const;
  void clear_handle_to_decref();
  static const int kHandleToDecrefFieldNumber = 1;
  const ::tensorflow::eager::RemoteTensorHandle& handle_to_decref() const;
  ::tensorflow::eager::RemoteTensorHandle* mutable_handle_to_decref();
  ::tensorflow::eager::RemoteTensorHandle* release_handle_to_decref();
  void set_allocated_handle_to_decref(::tensorflow::eager::RemoteTensorHandle* handle_to_decref);

  // optional .tensorflow.eager.Operation operation = 2;
  bool has_operation() const;
  void clear_operation();
  static const int kOperationFieldNumber = 2;
  const ::tensorflow::eager::Operation& operation() const;
  ::tensorflow::eager::Operation* mutable_operation();
  ::tensorflow::eager::Operation* release_operation();
  void set_allocated_operation(::tensorflow::eager::Operation* operation);

  // optional .tensorflow.eager.SendTensorOp send_tensor = 3;
  bool has_send_tensor() const;
  void clear_send_tensor();
  static const int kSendTensorFieldNumber = 3;
  const ::tensorflow::eager::SendTensorOp& send_tensor() const;
  ::tensorflow::eager::SendTensorOp* mutable_send_tensor();
  ::tensorflow::eager::SendTensorOp* release_send_tensor();
  void set_allocated_send_tensor(::tensorflow::eager::SendTensorOp* send_tensor);

  // optional .tensorflow.eager.RegisterFunctionOp register_function = 4;
  bool has_register_function() const;
  void clear_register_function();
  static const int kRegisterFunctionFieldNumber = 4;
  const ::tensorflow::eager::RegisterFunctionOp& register_function() const;
  ::tensorflow::eager::RegisterFunctionOp* mutable_register_function();
  ::tensorflow::eager::RegisterFunctionOp* release_register_function();
  void set_allocated_register_function(::tensorflow::eager::RegisterFunctionOp* register_function);

  // optional .tensorflow.eager.CleanupFunctionOp cleanup_function = 5;
  bool has_cleanup_function() const;
  void clear_cleanup_function();
  static const int kCleanupFunctionFieldNumber = 5;
  const ::tensorflow::eager::CleanupFunctionOp& cleanup_function() const;
  ::tensorflow::eager::CleanupFunctionOp* mutable_cleanup_function();
  ::tensorflow::eager::CleanupFunctionOp* release_cleanup_function();
  void set_allocated_cleanup_function(::tensorflow::eager::CleanupFunctionOp* cleanup_function);

  // optional .tensorflow.eager.SyncRemoteExecutorForStream sync_remote_executor_for_stream = 6;
  bool has_sync_remote_executor_for_stream() const;
  void clear_sync_remote_executor_for_stream();
  static const int kSyncRemoteExecutorForStreamFieldNumber = 6;
  const ::tensorflow::eager::SyncRemoteExecutorForStream& sync_remote_executor_for_stream() const;
  ::tensorflow::eager::SyncRemoteExecutorForStream* mutable_sync_remote_executor_for_stream();
  ::tensorflow::eager::SyncRemoteExecutorForStream* release_sync_remote_executor_for_stream();
  void set_allocated_sync_remote_executor_for_stream(::tensorflow::eager::SyncRemoteExecutorForStream* sync_remote_executor_for_stream);

  // optional .tensorflow.eager.SendPackedHandleOp send_packed_handle = 7;
  bool has_send_packed_handle() const;
  void clear_send_packed_handle();
  static const int kSendPackedHandleFieldNumber = 7;
  const ::tensorflow::eager::SendPackedHandleOp& send_packed_handle() const;
  ::tensorflow::eager::SendPackedHandleOp* mutable_send_packed_handle();
  ::tensorflow::eager::SendPackedHandleOp* release_send_packed_handle();
  void set_allocated_send_packed_handle(::tensorflow::eager::SendPackedHandleOp* send_packed_handle);

  ItemCase item_case() const;
  // @@protoc_insertion_point(class_scope:tensorflow.eager.QueueItem)
 private:
  inline void set_has_handle_to_decref();
  inline void set_has_operation();
  inline void set_has_send_tensor();
  inline void set_has_register_function();
  inline void set_has_cleanup_function();
  inline void set_has_sync_remote_executor_for_stream();
  inline void set_has_send_packed_handle();

  inline bool has_item() const;
  void clear_item();
  inline void clear_has_item();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  union ItemUnion {
    ItemUnion() {}
    ::tensorflow::eager::RemoteTensorHandle* handle_to_decref_;
    ::tensorflow::eager::Operation* operation_;
    ::tensorflow::eager::SendTensorOp* send_tensor_;
    ::tensorflow::eager::RegisterFunctionOp* register_function_;
    ::tensorflow::eager::CleanupFunctionOp* cleanup_function_;
    ::tensorflow::eager::SyncRemoteExecutorForStream* sync_remote_executor_for_stream_;
    ::tensorflow::eager::SendPackedHandleOp* send_packed_handle_;
  } item_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();

  void InitAsDefaultInstance();
  static QueueItem* default_instance_;
};
// -------------------------------------------------------------------

class QueueResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.eager.QueueResponse) */ {
 public:
  QueueResponse();
  virtual ~QueueResponse();

  QueueResponse(const QueueResponse& from);

  inline QueueResponse& operator=(const QueueResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueueResponse& default_instance();

  void Swap(QueueResponse* other);

  // implements Message ----------------------------------------------

  inline QueueResponse* New() const { return New(NULL); }

  QueueResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueueResponse& from);
  void MergeFrom(const QueueResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueueResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tensorflow.TensorShapeProto shape = 1;
  int shape_size() const;
  void clear_shape();
  static const int kShapeFieldNumber = 1;
  const ::tensorflow::TensorShapeProto& shape(int index) const;
  ::tensorflow::TensorShapeProto* mutable_shape(int index);
  ::tensorflow::TensorShapeProto* add_shape();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorShapeProto >*
      mutable_shape();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorShapeProto >&
      shape() const;

  // repeated .tensorflow.TensorProto tensor = 2;
  int tensor_size() const;
  void clear_tensor();
  static const int kTensorFieldNumber = 2;
  const ::tensorflow::TensorProto& tensor(int index) const;
  ::tensorflow::TensorProto* mutable_tensor(int index);
  ::tensorflow::TensorProto* add_tensor();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorProto >*
      mutable_tensor();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorProto >&
      tensor() const;

  // @@protoc_insertion_point(class_scope:tensorflow.eager.QueueResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorShapeProto > shape_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorProto > tensor_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();

  void InitAsDefaultInstance();
  static QueueResponse* default_instance_;
};
// -------------------------------------------------------------------

class CreateContextRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.eager.CreateContextRequest) */ {
 public:
  CreateContextRequest();
  virtual ~CreateContextRequest();

  CreateContextRequest(const CreateContextRequest& from);

  inline CreateContextRequest& operator=(const CreateContextRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateContextRequest& default_instance();

  void Swap(CreateContextRequest* other);

  // implements Message ----------------------------------------------

  inline CreateContextRequest* New() const { return New(NULL); }

  CreateContextRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateContextRequest& from);
  void MergeFrom(const CreateContextRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CreateContextRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .tensorflow.ServerDef server_def = 1;
  bool has_server_def() const;
  void clear_server_def();
  static const int kServerDefFieldNumber = 1;
  const ::tensorflow::ServerDef& server_def() const;
  ::tensorflow::ServerDef* mutable_server_def();
  ::tensorflow::ServerDef* release_server_def();
  void set_allocated_server_def(::tensorflow::ServerDef* server_def);

  // optional bool async = 2;
  void clear_async();
  static const int kAsyncFieldNumber = 2;
  bool async() const;
  void set_async(bool value);

  // optional int64 keep_alive_secs = 3;
  void clear_keep_alive_secs();
  static const int kKeepAliveSecsFieldNumber = 3;
  ::google::protobuf::int64 keep_alive_secs() const;
  void set_keep_alive_secs(::google::protobuf::int64 value);

  // optional .tensorflow.VersionDef version_def = 4;
  bool has_version_def() const;
  void clear_version_def();
  static const int kVersionDefFieldNumber = 4;
  const ::tensorflow::VersionDef& version_def() const;
  ::tensorflow::VersionDef* mutable_version_def();
  ::tensorflow::VersionDef* release_version_def();
  void set_allocated_version_def(::tensorflow::VersionDef* version_def);

  // repeated .tensorflow.DeviceAttributes cluster_device_attributes = 6;
  int cluster_device_attributes_size() const;
  void clear_cluster_device_attributes();
  static const int kClusterDeviceAttributesFieldNumber = 6;
  const ::tensorflow::DeviceAttributes& cluster_device_attributes(int index) const;
  ::tensorflow::DeviceAttributes* mutable_cluster_device_attributes(int index);
  ::tensorflow::DeviceAttributes* add_cluster_device_attributes();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::DeviceAttributes >*
      mutable_cluster_device_attributes();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::DeviceAttributes >&
      cluster_device_attributes() const;

  // optional fixed64 context_id = 7;
  void clear_context_id();
  static const int kContextIdFieldNumber = 7;
  ::google::protobuf::uint64 context_id() const;
  void set_context_id(::google::protobuf::uint64 value);

  // optional fixed64 context_view_id = 8;
  void clear_context_view_id();
  static const int kContextViewIdFieldNumber = 8;
  ::google::protobuf::uint64 context_view_id() const;
  void set_context_view_id(::google::protobuf::uint64 value);

  // optional bool lazy_copy_remote_function_inputs = 9;
  void clear_lazy_copy_remote_function_inputs();
  static const int kLazyCopyRemoteFunctionInputsFieldNumber = 9;
  bool lazy_copy_remote_function_inputs() const;
  void set_lazy_copy_remote_function_inputs(bool value);

  // @@protoc_insertion_point(class_scope:tensorflow.eager.CreateContextRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::tensorflow::ServerDef* server_def_;
  ::google::protobuf::int64 keep_alive_secs_;
  ::tensorflow::VersionDef* version_def_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::DeviceAttributes > cluster_device_attributes_;
  ::google::protobuf::uint64 context_id_;
  ::google::protobuf::uint64 context_view_id_;
  bool async_;
  bool lazy_copy_remote_function_inputs_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();

  void InitAsDefaultInstance();
  static CreateContextRequest* default_instance_;
};
// -------------------------------------------------------------------

class CreateContextResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.eager.CreateContextResponse) */ {
 public:
  CreateContextResponse();
  virtual ~CreateContextResponse();

  CreateContextResponse(const CreateContextResponse& from);

  inline CreateContextResponse& operator=(const CreateContextResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateContextResponse& default_instance();

  void Swap(CreateContextResponse* other);

  // implements Message ----------------------------------------------

  inline CreateContextResponse* New() const { return New(NULL); }

  CreateContextResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateContextResponse& from);
  void MergeFrom(const CreateContextResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CreateContextResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tensorflow.DeviceAttributes device_attributes = 2;
  int device_attributes_size() const;
  void clear_device_attributes();
  static const int kDeviceAttributesFieldNumber = 2;
  const ::tensorflow::DeviceAttributes& device_attributes(int index) const;
  ::tensorflow::DeviceAttributes* mutable_device_attributes(int index);
  ::tensorflow::DeviceAttributes* add_device_attributes();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::DeviceAttributes >*
      mutable_device_attributes();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::DeviceAttributes >&
      device_attributes() const;

  // @@protoc_insertion_point(class_scope:tensorflow.eager.CreateContextResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::DeviceAttributes > device_attributes_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();

  void InitAsDefaultInstance();
  static CreateContextResponse* default_instance_;
};
// -------------------------------------------------------------------

class UpdateContextRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.eager.UpdateContextRequest) */ {
 public:
  UpdateContextRequest();
  virtual ~UpdateContextRequest();

  UpdateContextRequest(const UpdateContextRequest& from);

  inline UpdateContextRequest& operator=(const UpdateContextRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateContextRequest& default_instance();

  void Swap(UpdateContextRequest* other);

  // implements Message ----------------------------------------------

  inline UpdateContextRequest* New() const { return New(NULL); }

  UpdateContextRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateContextRequest& from);
  void MergeFrom(const UpdateContextRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UpdateContextRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .tensorflow.ServerDef server_def = 1;
  bool has_server_def() const;
  void clear_server_def();
  static const int kServerDefFieldNumber = 1;
  const ::tensorflow::ServerDef& server_def() const;
  ::tensorflow::ServerDef* mutable_server_def();
  ::tensorflow::ServerDef* release_server_def();
  void set_allocated_server_def(::tensorflow::ServerDef* server_def);

  // repeated .tensorflow.DeviceAttributes cluster_device_attributes = 2;
  int cluster_device_attributes_size() const;
  void clear_cluster_device_attributes();
  static const int kClusterDeviceAttributesFieldNumber = 2;
  const ::tensorflow::DeviceAttributes& cluster_device_attributes(int index) const;
  ::tensorflow::DeviceAttributes* mutable_cluster_device_attributes(int index);
  ::tensorflow::DeviceAttributes* add_cluster_device_attributes();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::DeviceAttributes >*
      mutable_cluster_device_attributes();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::DeviceAttributes >&
      cluster_device_attributes() const;

  // optional fixed64 context_id = 3;
  void clear_context_id();
  static const int kContextIdFieldNumber = 3;
  ::google::protobuf::uint64 context_id() const;
  void set_context_id(::google::protobuf::uint64 value);

  // optional fixed64 context_view_id = 4;
  void clear_context_view_id();
  static const int kContextViewIdFieldNumber = 4;
  ::google::protobuf::uint64 context_view_id() const;
  void set_context_view_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:tensorflow.eager.UpdateContextRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::tensorflow::ServerDef* server_def_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::DeviceAttributes > cluster_device_attributes_;
  ::google::protobuf::uint64 context_id_;
  ::google::protobuf::uint64 context_view_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();

  void InitAsDefaultInstance();
  static UpdateContextRequest* default_instance_;
};
// -------------------------------------------------------------------

class UpdateContextResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.eager.UpdateContextResponse) */ {
 public:
  UpdateContextResponse();
  virtual ~UpdateContextResponse();

  UpdateContextResponse(const UpdateContextResponse& from);

  inline UpdateContextResponse& operator=(const UpdateContextResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateContextResponse& default_instance();

  void Swap(UpdateContextResponse* other);

  // implements Message ----------------------------------------------

  inline UpdateContextResponse* New() const { return New(NULL); }

  UpdateContextResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateContextResponse& from);
  void MergeFrom(const UpdateContextResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UpdateContextResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tensorflow.DeviceAttributes device_attributes = 1;
  int device_attributes_size() const;
  void clear_device_attributes();
  static const int kDeviceAttributesFieldNumber = 1;
  const ::tensorflow::DeviceAttributes& device_attributes(int index) const;
  ::tensorflow::DeviceAttributes* mutable_device_attributes(int index);
  ::tensorflow::DeviceAttributes* add_device_attributes();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::DeviceAttributes >*
      mutable_device_attributes();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::DeviceAttributes >&
      device_attributes() const;

  // @@protoc_insertion_point(class_scope:tensorflow.eager.UpdateContextResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::DeviceAttributes > device_attributes_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();

  void InitAsDefaultInstance();
  static UpdateContextResponse* default_instance_;
};
// -------------------------------------------------------------------

class EnqueueRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.eager.EnqueueRequest) */ {
 public:
  EnqueueRequest();
  virtual ~EnqueueRequest();

  EnqueueRequest(const EnqueueRequest& from);

  inline EnqueueRequest& operator=(const EnqueueRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnqueueRequest& default_instance();

  void Swap(EnqueueRequest* other);

  // implements Message ----------------------------------------------

  inline EnqueueRequest* New() const { return New(NULL); }

  EnqueueRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnqueueRequest& from);
  void MergeFrom(const EnqueueRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnqueueRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 context_id = 1;
  void clear_context_id();
  static const int kContextIdFieldNumber = 1;
  ::google::protobuf::uint64 context_id() const;
  void set_context_id(::google::protobuf::uint64 value);

  // repeated .tensorflow.eager.QueueItem queue = 3;
  int queue_size() const;
  void clear_queue();
  static const int kQueueFieldNumber = 3;
  const ::tensorflow::eager::QueueItem& queue(int index) const;
  ::tensorflow::eager::QueueItem* mutable_queue(int index);
  ::tensorflow::eager::QueueItem* add_queue();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::eager::QueueItem >*
      mutable_queue();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::eager::QueueItem >&
      queue() const;

  // @@protoc_insertion_point(class_scope:tensorflow.eager.EnqueueRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 context_id_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::eager::QueueItem > queue_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();

  void InitAsDefaultInstance();
  static EnqueueRequest* default_instance_;
};
// -------------------------------------------------------------------

class EnqueueResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.eager.EnqueueResponse) */ {
 public:
  EnqueueResponse();
  virtual ~EnqueueResponse();

  EnqueueResponse(const EnqueueResponse& from);

  inline EnqueueResponse& operator=(const EnqueueResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnqueueResponse& default_instance();

  void Swap(EnqueueResponse* other);

  // implements Message ----------------------------------------------

  inline EnqueueResponse* New() const { return New(NULL); }

  EnqueueResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnqueueResponse& from);
  void MergeFrom(const EnqueueResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnqueueResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tensorflow.eager.QueueResponse queue_response = 1;
  int queue_response_size() const;
  void clear_queue_response();
  static const int kQueueResponseFieldNumber = 1;
  const ::tensorflow::eager::QueueResponse& queue_response(int index) const;
  ::tensorflow::eager::QueueResponse* mutable_queue_response(int index);
  ::tensorflow::eager::QueueResponse* add_queue_response();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::eager::QueueResponse >*
      mutable_queue_response();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::eager::QueueResponse >&
      queue_response() const;

  // @@protoc_insertion_point(class_scope:tensorflow.eager.EnqueueResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::eager::QueueResponse > queue_response_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();

  void InitAsDefaultInstance();
  static EnqueueResponse* default_instance_;
};
// -------------------------------------------------------------------

class WaitQueueDoneRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.eager.WaitQueueDoneRequest) */ {
 public:
  WaitQueueDoneRequest();
  virtual ~WaitQueueDoneRequest();

  WaitQueueDoneRequest(const WaitQueueDoneRequest& from);

  inline WaitQueueDoneRequest& operator=(const WaitQueueDoneRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WaitQueueDoneRequest& default_instance();

  void Swap(WaitQueueDoneRequest* other);

  // implements Message ----------------------------------------------

  inline WaitQueueDoneRequest* New() const { return New(NULL); }

  WaitQueueDoneRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WaitQueueDoneRequest& from);
  void MergeFrom(const WaitQueueDoneRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WaitQueueDoneRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 context_id = 1;
  void clear_context_id();
  static const int kContextIdFieldNumber = 1;
  ::google::protobuf::uint64 context_id() const;
  void set_context_id(::google::protobuf::uint64 value);

  // repeated int64 op_id = 2;
  int op_id_size() const;
  void clear_op_id();
  static const int kOpIdFieldNumber = 2;
  ::google::protobuf::int64 op_id(int index) const;
  void set_op_id(int index, ::google::protobuf::int64 value);
  void add_op_id(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      op_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_op_id();

  // @@protoc_insertion_point(class_scope:tensorflow.eager.WaitQueueDoneRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 context_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > op_id_;
  mutable int _op_id_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();

  void InitAsDefaultInstance();
  static WaitQueueDoneRequest* default_instance_;
};
// -------------------------------------------------------------------

class WaitQueueDoneResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.eager.WaitQueueDoneResponse) */ {
 public:
  WaitQueueDoneResponse();
  virtual ~WaitQueueDoneResponse();

  WaitQueueDoneResponse(const WaitQueueDoneResponse& from);

  inline WaitQueueDoneResponse& operator=(const WaitQueueDoneResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WaitQueueDoneResponse& default_instance();

  void Swap(WaitQueueDoneResponse* other);

  // implements Message ----------------------------------------------

  inline WaitQueueDoneResponse* New() const { return New(NULL); }

  WaitQueueDoneResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WaitQueueDoneResponse& from);
  void MergeFrom(const WaitQueueDoneResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WaitQueueDoneResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tensorflow.eager.WaitQueueDoneResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();

  void InitAsDefaultInstance();
  static WaitQueueDoneResponse* default_instance_;
};
// -------------------------------------------------------------------

class RunComponentFunctionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.eager.RunComponentFunctionRequest) */ {
 public:
  RunComponentFunctionRequest();
  virtual ~RunComponentFunctionRequest();

  RunComponentFunctionRequest(const RunComponentFunctionRequest& from);

  inline RunComponentFunctionRequest& operator=(const RunComponentFunctionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RunComponentFunctionRequest& default_instance();

  void Swap(RunComponentFunctionRequest* other);

  // implements Message ----------------------------------------------

  inline RunComponentFunctionRequest* New() const { return New(NULL); }

  RunComponentFunctionRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RunComponentFunctionRequest& from);
  void MergeFrom(const RunComponentFunctionRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RunComponentFunctionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 context_id = 1;
  void clear_context_id();
  static const int kContextIdFieldNumber = 1;
  ::google::protobuf::uint64 context_id() const;
  void set_context_id(::google::protobuf::uint64 value);

  // optional .tensorflow.eager.Operation operation = 2;
  bool has_operation() const;
  void clear_operation();
  static const int kOperationFieldNumber = 2;
  const ::tensorflow::eager::Operation& operation() const;
  ::tensorflow::eager::Operation* mutable_operation();
  ::tensorflow::eager::Operation* release_operation();
  void set_allocated_operation(::tensorflow::eager::Operation* operation);

  // @@protoc_insertion_point(class_scope:tensorflow.eager.RunComponentFunctionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 context_id_;
  ::tensorflow::eager::Operation* operation_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();

  void InitAsDefaultInstance();
  static RunComponentFunctionRequest* default_instance_;
};
// -------------------------------------------------------------------

class RunComponentFunctionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.eager.RunComponentFunctionResponse) */ {
 public:
  RunComponentFunctionResponse();
  virtual ~RunComponentFunctionResponse();

  RunComponentFunctionResponse(const RunComponentFunctionResponse& from);

  inline RunComponentFunctionResponse& operator=(const RunComponentFunctionResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RunComponentFunctionResponse& default_instance();

  void Swap(RunComponentFunctionResponse* other);

  // implements Message ----------------------------------------------

  inline RunComponentFunctionResponse* New() const { return New(NULL); }

  RunComponentFunctionResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RunComponentFunctionResponse& from);
  void MergeFrom(const RunComponentFunctionResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RunComponentFunctionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tensorflow.TensorShapeProto shape = 1;
  int shape_size() const;
  void clear_shape();
  static const int kShapeFieldNumber = 1;
  const ::tensorflow::TensorShapeProto& shape(int index) const;
  ::tensorflow::TensorShapeProto* mutable_shape(int index);
  ::tensorflow::TensorShapeProto* add_shape();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorShapeProto >*
      mutable_shape();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorShapeProto >&
      shape() const;

  // repeated .tensorflow.TensorProto tensor = 2;
  int tensor_size() const;
  void clear_tensor();
  static const int kTensorFieldNumber = 2;
  const ::tensorflow::TensorProto& tensor(int index) const;
  ::tensorflow::TensorProto* mutable_tensor(int index);
  ::tensorflow::TensorProto* add_tensor();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorProto >*
      mutable_tensor();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorProto >&
      tensor() const;

  // @@protoc_insertion_point(class_scope:tensorflow.eager.RunComponentFunctionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorShapeProto > shape_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorProto > tensor_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();

  void InitAsDefaultInstance();
  static RunComponentFunctionResponse* default_instance_;
};
// -------------------------------------------------------------------

class KeepAliveRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.eager.KeepAliveRequest) */ {
 public:
  KeepAliveRequest();
  virtual ~KeepAliveRequest();

  KeepAliveRequest(const KeepAliveRequest& from);

  inline KeepAliveRequest& operator=(const KeepAliveRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeepAliveRequest& default_instance();

  void Swap(KeepAliveRequest* other);

  // implements Message ----------------------------------------------

  inline KeepAliveRequest* New() const { return New(NULL); }

  KeepAliveRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeepAliveRequest& from);
  void MergeFrom(const KeepAliveRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KeepAliveRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 context_id = 1;
  void clear_context_id();
  static const int kContextIdFieldNumber = 1;
  ::google::protobuf::uint64 context_id() const;
  void set_context_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:tensorflow.eager.KeepAliveRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 context_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();

  void InitAsDefaultInstance();
  static KeepAliveRequest* default_instance_;
};
// -------------------------------------------------------------------

class KeepAliveResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.eager.KeepAliveResponse) */ {
 public:
  KeepAliveResponse();
  virtual ~KeepAliveResponse();

  KeepAliveResponse(const KeepAliveResponse& from);

  inline KeepAliveResponse& operator=(const KeepAliveResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeepAliveResponse& default_instance();

  void Swap(KeepAliveResponse* other);

  // implements Message ----------------------------------------------

  inline KeepAliveResponse* New() const { return New(NULL); }

  KeepAliveResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeepAliveResponse& from);
  void MergeFrom(const KeepAliveResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KeepAliveResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 context_view_id = 1;
  void clear_context_view_id();
  static const int kContextViewIdFieldNumber = 1;
  ::google::protobuf::uint64 context_view_id() const;
  void set_context_view_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:tensorflow.eager.KeepAliveResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 context_view_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();

  void InitAsDefaultInstance();
  static KeepAliveResponse* default_instance_;
};
// -------------------------------------------------------------------

class CloseContextRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.eager.CloseContextRequest) */ {
 public:
  CloseContextRequest();
  virtual ~CloseContextRequest();

  CloseContextRequest(const CloseContextRequest& from);

  inline CloseContextRequest& operator=(const CloseContextRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CloseContextRequest& default_instance();

  void Swap(CloseContextRequest* other);

  // implements Message ----------------------------------------------

  inline CloseContextRequest* New() const { return New(NULL); }

  CloseContextRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CloseContextRequest& from);
  void MergeFrom(const CloseContextRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CloseContextRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 context_id = 1;
  void clear_context_id();
  static const int kContextIdFieldNumber = 1;
  ::google::protobuf::uint64 context_id() const;
  void set_context_id(::google::protobuf::uint64 value);

  // optional fixed64 context_view_id = 2;
  void clear_context_view_id();
  static const int kContextViewIdFieldNumber = 2;
  ::google::protobuf::uint64 context_view_id() const;
  void set_context_view_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:tensorflow.eager.CloseContextRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 context_id_;
  ::google::protobuf::uint64 context_view_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();

  void InitAsDefaultInstance();
  static CloseContextRequest* default_instance_;
};
// -------------------------------------------------------------------

class CloseContextResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.eager.CloseContextResponse) */ {
 public:
  CloseContextResponse();
  virtual ~CloseContextResponse();

  CloseContextResponse(const CloseContextResponse& from);

  inline CloseContextResponse& operator=(const CloseContextResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CloseContextResponse& default_instance();

  void Swap(CloseContextResponse* other);

  // implements Message ----------------------------------------------

  inline CloseContextResponse* New() const { return New(NULL); }

  CloseContextResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CloseContextResponse& from);
  void MergeFrom(const CloseContextResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CloseContextResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tensorflow.eager.CloseContextResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();

  void InitAsDefaultInstance();
  static CloseContextResponse* default_instance_;
};
// -------------------------------------------------------------------

class RegisterFunctionOp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.eager.RegisterFunctionOp) */ {
 public:
  RegisterFunctionOp();
  virtual ~RegisterFunctionOp();

  RegisterFunctionOp(const RegisterFunctionOp& from);

  inline RegisterFunctionOp& operator=(const RegisterFunctionOp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterFunctionOp& default_instance();

  void Swap(RegisterFunctionOp* other);

  // implements Message ----------------------------------------------

  inline RegisterFunctionOp* New() const { return New(NULL); }

  RegisterFunctionOp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegisterFunctionOp& from);
  void MergeFrom(const RegisterFunctionOp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegisterFunctionOp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .tensorflow.FunctionDef function_def = 1;
  bool has_function_def() const;
  void clear_function_def();
  static const int kFunctionDefFieldNumber = 1;
  const ::tensorflow::FunctionDef& function_def() const;
  ::tensorflow::FunctionDef* mutable_function_def();
  ::tensorflow::FunctionDef* release_function_def();
  void set_allocated_function_def(::tensorflow::FunctionDef* function_def);

  // optional bool is_component_function = 2;
  void clear_is_component_function();
  static const int kIsComponentFunctionFieldNumber = 2;
  bool is_component_function() const;
  void set_is_component_function(bool value);

  // optional .tensorflow.FunctionDefLibrary library = 3;
  bool has_library() const;
  void clear_library();
  static const int kLibraryFieldNumber = 3;
  const ::tensorflow::FunctionDefLibrary& library() const;
  ::tensorflow::FunctionDefLibrary* mutable_library();
  ::tensorflow::FunctionDefLibrary* release_library();
  void set_allocated_library(::tensorflow::FunctionDefLibrary* library);

  // @@protoc_insertion_point(class_scope:tensorflow.eager.RegisterFunctionOp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::tensorflow::FunctionDef* function_def_;
  ::tensorflow::FunctionDefLibrary* library_;
  bool is_component_function_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();

  void InitAsDefaultInstance();
  static RegisterFunctionOp* default_instance_;
};
// -------------------------------------------------------------------

class CleanupFunctionOp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.eager.CleanupFunctionOp) */ {
 public:
  CleanupFunctionOp();
  virtual ~CleanupFunctionOp();

  CleanupFunctionOp(const CleanupFunctionOp& from);

  inline CleanupFunctionOp& operator=(const CleanupFunctionOp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CleanupFunctionOp& default_instance();

  void Swap(CleanupFunctionOp* other);

  // implements Message ----------------------------------------------

  inline CleanupFunctionOp* New() const { return New(NULL); }

  CleanupFunctionOp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CleanupFunctionOp& from);
  void MergeFrom(const CleanupFunctionOp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CleanupFunctionOp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 step_id = 1;
  void clear_step_id();
  static const int kStepIdFieldNumber = 1;
  ::google::protobuf::int64 step_id() const;
  void set_step_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:tensorflow.eager.CleanupFunctionOp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 step_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();

  void InitAsDefaultInstance();
  static CleanupFunctionOp* default_instance_;
};
// -------------------------------------------------------------------

class SyncRemoteExecutorForStream : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.eager.SyncRemoteExecutorForStream) */ {
 public:
  SyncRemoteExecutorForStream();
  virtual ~SyncRemoteExecutorForStream();

  SyncRemoteExecutorForStream(const SyncRemoteExecutorForStream& from);

  inline SyncRemoteExecutorForStream& operator=(const SyncRemoteExecutorForStream& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncRemoteExecutorForStream& default_instance();

  void Swap(SyncRemoteExecutorForStream* other);

  // implements Message ----------------------------------------------

  inline SyncRemoteExecutorForStream* New() const { return New(NULL); }

  SyncRemoteExecutorForStream* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncRemoteExecutorForStream& from);
  void MergeFrom(const SyncRemoteExecutorForStream& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SyncRemoteExecutorForStream* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tensorflow.eager.SyncRemoteExecutorForStream)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();

  void InitAsDefaultInstance();
  static SyncRemoteExecutorForStream* default_instance_;
};
// -------------------------------------------------------------------

class SendTensorOp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.eager.SendTensorOp) */ {
 public:
  SendTensorOp();
  virtual ~SendTensorOp();

  SendTensorOp(const SendTensorOp& from);

  inline SendTensorOp& operator=(const SendTensorOp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendTensorOp& default_instance();

  void Swap(SendTensorOp* other);

  // implements Message ----------------------------------------------

  inline SendTensorOp* New() const { return New(NULL); }

  SendTensorOp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendTensorOp& from);
  void MergeFrom(const SendTensorOp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SendTensorOp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 op_id = 1;
  void clear_op_id();
  static const int kOpIdFieldNumber = 1;
  ::google::protobuf::int64 op_id() const;
  void set_op_id(::google::protobuf::int64 value);

  // repeated .tensorflow.TensorProto tensors = 2;
  int tensors_size() const;
  void clear_tensors();
  static const int kTensorsFieldNumber = 2;
  const ::tensorflow::TensorProto& tensors(int index) const;
  ::tensorflow::TensorProto* mutable_tensors(int index);
  ::tensorflow::TensorProto* add_tensors();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorProto >*
      mutable_tensors();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorProto >&
      tensors() const;

  // optional string device_name = 3;
  void clear_device_name();
  static const int kDeviceNameFieldNumber = 3;
  const ::std::string& device_name() const;
  void set_device_name(const ::std::string& value);
  void set_device_name(const char* value);
  void set_device_name(const char* value, size_t size);
  ::std::string* mutable_device_name();
  ::std::string* release_device_name();
  void set_allocated_device_name(::std::string* device_name);

  // @@protoc_insertion_point(class_scope:tensorflow.eager.SendTensorOp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 op_id_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorProto > tensors_;
  ::google::protobuf::internal::ArenaStringPtr device_name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();

  void InitAsDefaultInstance();
  static SendTensorOp* default_instance_;
};
// -------------------------------------------------------------------

class SendPackedHandleOp_LocalTensorHandle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.eager.SendPackedHandleOp.LocalTensorHandle) */ {
 public:
  SendPackedHandleOp_LocalTensorHandle();
  virtual ~SendPackedHandleOp_LocalTensorHandle();

  SendPackedHandleOp_LocalTensorHandle(const SendPackedHandleOp_LocalTensorHandle& from);

  inline SendPackedHandleOp_LocalTensorHandle& operator=(const SendPackedHandleOp_LocalTensorHandle& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendPackedHandleOp_LocalTensorHandle& default_instance();

  void Swap(SendPackedHandleOp_LocalTensorHandle* other);

  // implements Message ----------------------------------------------

  inline SendPackedHandleOp_LocalTensorHandle* New() const { return New(NULL); }

  SendPackedHandleOp_LocalTensorHandle* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendPackedHandleOp_LocalTensorHandle& from);
  void MergeFrom(const SendPackedHandleOp_LocalTensorHandle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SendPackedHandleOp_LocalTensorHandle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .tensorflow.TensorProto tensor = 1;
  bool has_tensor() const;
  void clear_tensor();
  static const int kTensorFieldNumber = 1;
  const ::tensorflow::TensorProto& tensor() const;
  ::tensorflow::TensorProto* mutable_tensor();
  ::tensorflow::TensorProto* release_tensor();
  void set_allocated_tensor(::tensorflow::TensorProto* tensor);

  // optional string device = 2;
  void clear_device();
  static const int kDeviceFieldNumber = 2;
  const ::std::string& device() const;
  void set_device(const ::std::string& value);
  void set_device(const char* value);
  void set_device(const char* value, size_t size);
  ::std::string* mutable_device();
  ::std::string* release_device();
  void set_allocated_device(::std::string* device);

  // @@protoc_insertion_point(class_scope:tensorflow.eager.SendPackedHandleOp.LocalTensorHandle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::tensorflow::TensorProto* tensor_;
  ::google::protobuf::internal::ArenaStringPtr device_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();

  void InitAsDefaultInstance();
  static SendPackedHandleOp_LocalTensorHandle* default_instance_;
};
// -------------------------------------------------------------------

class SendPackedHandleOp_Handle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.eager.SendPackedHandleOp.Handle) */ {
 public:
  SendPackedHandleOp_Handle();
  virtual ~SendPackedHandleOp_Handle();

  SendPackedHandleOp_Handle(const SendPackedHandleOp_Handle& from);

  inline SendPackedHandleOp_Handle& operator=(const SendPackedHandleOp_Handle& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendPackedHandleOp_Handle& default_instance();

  enum ItemCase {
    kLocalHandle = 1,
    kRemoteHandle = 2,
    ITEM_NOT_SET = 0,
  };

  void Swap(SendPackedHandleOp_Handle* other);

  // implements Message ----------------------------------------------

  inline SendPackedHandleOp_Handle* New() const { return New(NULL); }

  SendPackedHandleOp_Handle* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendPackedHandleOp_Handle& from);
  void MergeFrom(const SendPackedHandleOp_Handle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SendPackedHandleOp_Handle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .tensorflow.eager.SendPackedHandleOp.LocalTensorHandle local_handle = 1;
  bool has_local_handle() const;
  void clear_local_handle();
  static const int kLocalHandleFieldNumber = 1;
  const ::tensorflow::eager::SendPackedHandleOp_LocalTensorHandle& local_handle() const;
  ::tensorflow::eager::SendPackedHandleOp_LocalTensorHandle* mutable_local_handle();
  ::tensorflow::eager::SendPackedHandleOp_LocalTensorHandle* release_local_handle();
  void set_allocated_local_handle(::tensorflow::eager::SendPackedHandleOp_LocalTensorHandle* local_handle);

  // optional .tensorflow.eager.RemoteTensorHandle remote_handle = 2;
  bool has_remote_handle() const;
  void clear_remote_handle();
  static const int kRemoteHandleFieldNumber = 2;
  const ::tensorflow::eager::RemoteTensorHandle& remote_handle() const;
  ::tensorflow::eager::RemoteTensorHandle* mutable_remote_handle();
  ::tensorflow::eager::RemoteTensorHandle* release_remote_handle();
  void set_allocated_remote_handle(::tensorflow::eager::RemoteTensorHandle* remote_handle);

  ItemCase item_case() const;
  // @@protoc_insertion_point(class_scope:tensorflow.eager.SendPackedHandleOp.Handle)
 private:
  inline void set_has_local_handle();
  inline void set_has_remote_handle();

  inline bool has_item() const;
  void clear_item();
  inline void clear_has_item();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  union ItemUnion {
    ItemUnion() {}
    ::tensorflow::eager::SendPackedHandleOp_LocalTensorHandle* local_handle_;
    ::tensorflow::eager::RemoteTensorHandle* remote_handle_;
  } item_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();

  void InitAsDefaultInstance();
  static SendPackedHandleOp_Handle* default_instance_;
};
// -------------------------------------------------------------------

class SendPackedHandleOp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.eager.SendPackedHandleOp) */ {
 public:
  SendPackedHandleOp();
  virtual ~SendPackedHandleOp();

  SendPackedHandleOp(const SendPackedHandleOp& from);

  inline SendPackedHandleOp& operator=(const SendPackedHandleOp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendPackedHandleOp& default_instance();

  void Swap(SendPackedHandleOp* other);

  // implements Message ----------------------------------------------

  inline SendPackedHandleOp* New() const { return New(NULL); }

  SendPackedHandleOp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendPackedHandleOp& from);
  void MergeFrom(const SendPackedHandleOp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SendPackedHandleOp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SendPackedHandleOp_LocalTensorHandle LocalTensorHandle;
  typedef SendPackedHandleOp_Handle Handle;

  // accessors -------------------------------------------------------

  // optional int64 op_id = 1;
  void clear_op_id();
  static const int kOpIdFieldNumber = 1;
  ::google::protobuf::int64 op_id() const;
  void set_op_id(::google::protobuf::int64 value);

  // repeated .tensorflow.eager.SendPackedHandleOp.Handle handles = 2;
  int handles_size() const;
  void clear_handles();
  static const int kHandlesFieldNumber = 2;
  const ::tensorflow::eager::SendPackedHandleOp_Handle& handles(int index) const;
  ::tensorflow::eager::SendPackedHandleOp_Handle* mutable_handles(int index);
  ::tensorflow::eager::SendPackedHandleOp_Handle* add_handles();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::eager::SendPackedHandleOp_Handle >*
      mutable_handles();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::eager::SendPackedHandleOp_Handle >&
      handles() const;

  // optional string device_name = 3;
  void clear_device_name();
  static const int kDeviceNameFieldNumber = 3;
  const ::std::string& device_name() const;
  void set_device_name(const ::std::string& value);
  void set_device_name(const char* value);
  void set_device_name(const char* value, size_t size);
  ::std::string* mutable_device_name();
  ::std::string* release_device_name();
  void set_allocated_device_name(::std::string* device_name);

  // @@protoc_insertion_point(class_scope:tensorflow.eager.SendPackedHandleOp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 op_id_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::eager::SendPackedHandleOp_Handle > handles_;
  ::google::protobuf::internal::ArenaStringPtr device_name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto();

  void InitAsDefaultInstance();
  static SendPackedHandleOp* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Operation_Input

// optional .tensorflow.eager.RemoteTensorHandle remote_handle = 1;
inline bool Operation_Input::has_remote_handle() const {
  return item_case() == kRemoteHandle;
}
inline void Operation_Input::set_has_remote_handle() {
  _oneof_case_[0] = kRemoteHandle;
}
inline void Operation_Input::clear_remote_handle() {
  if (has_remote_handle()) {
    delete item_.remote_handle_;
    clear_has_item();
  }
}
inline  const ::tensorflow::eager::RemoteTensorHandle& Operation_Input::remote_handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.Operation.Input.remote_handle)
  return has_remote_handle()
      ? *item_.remote_handle_
      : ::tensorflow::eager::RemoteTensorHandle::default_instance();
}
inline ::tensorflow::eager::RemoteTensorHandle* Operation_Input::mutable_remote_handle() {
  if (!has_remote_handle()) {
    clear_item();
    set_has_remote_handle();
    item_.remote_handle_ = new ::tensorflow::eager::RemoteTensorHandle;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.eager.Operation.Input.remote_handle)
  return item_.remote_handle_;
}
inline ::tensorflow::eager::RemoteTensorHandle* Operation_Input::release_remote_handle() {
  // @@protoc_insertion_point(field_release:tensorflow.eager.Operation.Input.remote_handle)
  if (has_remote_handle()) {
    clear_has_item();
    ::tensorflow::eager::RemoteTensorHandle* temp = item_.remote_handle_;
    item_.remote_handle_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Operation_Input::set_allocated_remote_handle(::tensorflow::eager::RemoteTensorHandle* remote_handle) {
  clear_item();
  if (remote_handle) {
    if (static_cast< ::tensorflow::eager::RemoteTensorHandle*>(remote_handle)->GetArena() != NULL) {
      ::tensorflow::eager::RemoteTensorHandle* new_remote_handle = new ::tensorflow::eager::RemoteTensorHandle;
      new_remote_handle->CopyFrom(*remote_handle);
      remote_handle = new_remote_handle;
    }
    set_has_remote_handle();
    item_.remote_handle_ = remote_handle;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.Operation.Input.remote_handle)
}

// optional .tensorflow.TensorProto tensor = 2;
inline bool Operation_Input::has_tensor() const {
  return item_case() == kTensor;
}
inline void Operation_Input::set_has_tensor() {
  _oneof_case_[0] = kTensor;
}
inline void Operation_Input::clear_tensor() {
  if (has_tensor()) {
    delete item_.tensor_;
    clear_has_item();
  }
}
inline  const ::tensorflow::TensorProto& Operation_Input::tensor() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.Operation.Input.tensor)
  return has_tensor()
      ? *item_.tensor_
      : ::tensorflow::TensorProto::default_instance();
}
inline ::tensorflow::TensorProto* Operation_Input::mutable_tensor() {
  if (!has_tensor()) {
    clear_item();
    set_has_tensor();
    item_.tensor_ = new ::tensorflow::TensorProto;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.eager.Operation.Input.tensor)
  return item_.tensor_;
}
inline ::tensorflow::TensorProto* Operation_Input::release_tensor() {
  // @@protoc_insertion_point(field_release:tensorflow.eager.Operation.Input.tensor)
  if (has_tensor()) {
    clear_has_item();
    ::tensorflow::TensorProto* temp = item_.tensor_;
    item_.tensor_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Operation_Input::set_allocated_tensor(::tensorflow::TensorProto* tensor) {
  clear_item();
  if (tensor) {
    if (static_cast< ::tensorflow::TensorProto*>(tensor)->GetArena() != NULL) {
      ::tensorflow::TensorProto* new_tensor = new ::tensorflow::TensorProto;
      new_tensor->CopyFrom(*tensor);
      tensor = new_tensor;
    }
    set_has_tensor();
    item_.tensor_ = tensor;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.Operation.Input.tensor)
}

inline bool Operation_Input::has_item() const {
  return item_case() != ITEM_NOT_SET;
}
inline void Operation_Input::clear_has_item() {
  _oneof_case_[0] = ITEM_NOT_SET;
}
inline Operation_Input::ItemCase Operation_Input::item_case() const {
  return Operation_Input::ItemCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Operation

// optional int64 id = 1;
inline void Operation::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Operation::id() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.Operation.id)
  return id_;
}
inline void Operation::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.eager.Operation.id)
}

// optional string name = 2;
inline void Operation::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Operation::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.Operation.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Operation::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.eager.Operation.name)
}
inline void Operation::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.eager.Operation.name)
}
inline void Operation::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.eager.Operation.name)
}
inline ::std::string* Operation::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.eager.Operation.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Operation::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.eager.Operation.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Operation::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.Operation.name)
}

// repeated .tensorflow.eager.Operation.Input op_inputs = 10;
inline int Operation::op_inputs_size() const {
  return op_inputs_.size();
}
inline void Operation::clear_op_inputs() {
  op_inputs_.Clear();
}
inline const ::tensorflow::eager::Operation_Input& Operation::op_inputs(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.Operation.op_inputs)
  return op_inputs_.Get(index);
}
inline ::tensorflow::eager::Operation_Input* Operation::mutable_op_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.eager.Operation.op_inputs)
  return op_inputs_.Mutable(index);
}
inline ::tensorflow::eager::Operation_Input* Operation::add_op_inputs() {
  // @@protoc_insertion_point(field_add:tensorflow.eager.Operation.op_inputs)
  return op_inputs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::eager::Operation_Input >*
Operation::mutable_op_inputs() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.eager.Operation.op_inputs)
  return &op_inputs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::eager::Operation_Input >&
Operation::op_inputs() const {
  // @@protoc_insertion_point(field_list:tensorflow.eager.Operation.op_inputs)
  return op_inputs_;
}

// repeated int64 control_op_ids = 4;
inline int Operation::control_op_ids_size() const {
  return control_op_ids_.size();
}
inline void Operation::clear_control_op_ids() {
  control_op_ids_.Clear();
}
inline ::google::protobuf::int64 Operation::control_op_ids(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.Operation.control_op_ids)
  return control_op_ids_.Get(index);
}
inline void Operation::set_control_op_ids(int index, ::google::protobuf::int64 value) {
  control_op_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.eager.Operation.control_op_ids)
}
inline void Operation::add_control_op_ids(::google::protobuf::int64 value) {
  control_op_ids_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.eager.Operation.control_op_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Operation::control_op_ids() const {
  // @@protoc_insertion_point(field_list:tensorflow.eager.Operation.control_op_ids)
  return control_op_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Operation::mutable_control_op_ids() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.eager.Operation.control_op_ids)
  return &control_op_ids_;
}

// map<string, .tensorflow.AttrValue> attrs = 5;
inline int Operation::attrs_size() const {
  return attrs_.size();
}
inline void Operation::clear_attrs() {
  attrs_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >&
Operation::attrs() const {
  // @@protoc_insertion_point(field_map:tensorflow.eager.Operation.attrs)
  return attrs_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >*
Operation::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.eager.Operation.attrs)
  return attrs_.MutableMap();
}

// optional string device = 6;
inline void Operation::clear_device() {
  device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Operation::device() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.Operation.device)
  return device_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Operation::set_device(const ::std::string& value) {
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.eager.Operation.device)
}
inline void Operation::set_device(const char* value) {
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.eager.Operation.device)
}
inline void Operation::set_device(const char* value, size_t size) {
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.eager.Operation.device)
}
inline ::std::string* Operation::mutable_device() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.eager.Operation.device)
  return device_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Operation::release_device() {
  // @@protoc_insertion_point(field_release:tensorflow.eager.Operation.device)
  
  return device_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Operation::set_allocated_device(::std::string* device) {
  if (device != NULL) {
    
  } else {
    
  }
  device_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.Operation.device)
}

// optional bool is_component_function = 7;
inline void Operation::clear_is_component_function() {
  is_component_function_ = false;
}
inline bool Operation::is_component_function() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.Operation.is_component_function)
  return is_component_function_;
}
inline void Operation::set_is_component_function(bool value) {
  
  is_component_function_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.eager.Operation.is_component_function)
}

// optional int64 func_step_id = 8;
inline void Operation::clear_func_step_id() {
  func_step_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Operation::func_step_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.Operation.func_step_id)
  return func_step_id_;
}
inline void Operation::set_func_step_id(::google::protobuf::int64 value) {
  
  func_step_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.eager.Operation.func_step_id)
}

// optional bool is_function = 9;
inline void Operation::clear_is_function() {
  is_function_ = false;
}
inline bool Operation::is_function() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.Operation.is_function)
  return is_function_;
}
inline void Operation::set_is_function(bool value) {
  
  is_function_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.eager.Operation.is_function)
}

// -------------------------------------------------------------------

// QueueItem

// optional .tensorflow.eager.RemoteTensorHandle handle_to_decref = 1;
inline bool QueueItem::has_handle_to_decref() const {
  return item_case() == kHandleToDecref;
}
inline void QueueItem::set_has_handle_to_decref() {
  _oneof_case_[0] = kHandleToDecref;
}
inline void QueueItem::clear_handle_to_decref() {
  if (has_handle_to_decref()) {
    delete item_.handle_to_decref_;
    clear_has_item();
  }
}
inline  const ::tensorflow::eager::RemoteTensorHandle& QueueItem::handle_to_decref() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.QueueItem.handle_to_decref)
  return has_handle_to_decref()
      ? *item_.handle_to_decref_
      : ::tensorflow::eager::RemoteTensorHandle::default_instance();
}
inline ::tensorflow::eager::RemoteTensorHandle* QueueItem::mutable_handle_to_decref() {
  if (!has_handle_to_decref()) {
    clear_item();
    set_has_handle_to_decref();
    item_.handle_to_decref_ = new ::tensorflow::eager::RemoteTensorHandle;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.eager.QueueItem.handle_to_decref)
  return item_.handle_to_decref_;
}
inline ::tensorflow::eager::RemoteTensorHandle* QueueItem::release_handle_to_decref() {
  // @@protoc_insertion_point(field_release:tensorflow.eager.QueueItem.handle_to_decref)
  if (has_handle_to_decref()) {
    clear_has_item();
    ::tensorflow::eager::RemoteTensorHandle* temp = item_.handle_to_decref_;
    item_.handle_to_decref_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void QueueItem::set_allocated_handle_to_decref(::tensorflow::eager::RemoteTensorHandle* handle_to_decref) {
  clear_item();
  if (handle_to_decref) {
    if (static_cast< ::tensorflow::eager::RemoteTensorHandle*>(handle_to_decref)->GetArena() != NULL) {
      ::tensorflow::eager::RemoteTensorHandle* new_handle_to_decref = new ::tensorflow::eager::RemoteTensorHandle;
      new_handle_to_decref->CopyFrom(*handle_to_decref);
      handle_to_decref = new_handle_to_decref;
    }
    set_has_handle_to_decref();
    item_.handle_to_decref_ = handle_to_decref;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.QueueItem.handle_to_decref)
}

// optional .tensorflow.eager.Operation operation = 2;
inline bool QueueItem::has_operation() const {
  return item_case() == kOperation;
}
inline void QueueItem::set_has_operation() {
  _oneof_case_[0] = kOperation;
}
inline void QueueItem::clear_operation() {
  if (has_operation()) {
    delete item_.operation_;
    clear_has_item();
  }
}
inline  const ::tensorflow::eager::Operation& QueueItem::operation() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.QueueItem.operation)
  return has_operation()
      ? *item_.operation_
      : ::tensorflow::eager::Operation::default_instance();
}
inline ::tensorflow::eager::Operation* QueueItem::mutable_operation() {
  if (!has_operation()) {
    clear_item();
    set_has_operation();
    item_.operation_ = new ::tensorflow::eager::Operation;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.eager.QueueItem.operation)
  return item_.operation_;
}
inline ::tensorflow::eager::Operation* QueueItem::release_operation() {
  // @@protoc_insertion_point(field_release:tensorflow.eager.QueueItem.operation)
  if (has_operation()) {
    clear_has_item();
    ::tensorflow::eager::Operation* temp = item_.operation_;
    item_.operation_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void QueueItem::set_allocated_operation(::tensorflow::eager::Operation* operation) {
  clear_item();
  if (operation) {
    set_has_operation();
    item_.operation_ = operation;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.QueueItem.operation)
}

// optional .tensorflow.eager.SendTensorOp send_tensor = 3;
inline bool QueueItem::has_send_tensor() const {
  return item_case() == kSendTensor;
}
inline void QueueItem::set_has_send_tensor() {
  _oneof_case_[0] = kSendTensor;
}
inline void QueueItem::clear_send_tensor() {
  if (has_send_tensor()) {
    delete item_.send_tensor_;
    clear_has_item();
  }
}
inline  const ::tensorflow::eager::SendTensorOp& QueueItem::send_tensor() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.QueueItem.send_tensor)
  return has_send_tensor()
      ? *item_.send_tensor_
      : ::tensorflow::eager::SendTensorOp::default_instance();
}
inline ::tensorflow::eager::SendTensorOp* QueueItem::mutable_send_tensor() {
  if (!has_send_tensor()) {
    clear_item();
    set_has_send_tensor();
    item_.send_tensor_ = new ::tensorflow::eager::SendTensorOp;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.eager.QueueItem.send_tensor)
  return item_.send_tensor_;
}
inline ::tensorflow::eager::SendTensorOp* QueueItem::release_send_tensor() {
  // @@protoc_insertion_point(field_release:tensorflow.eager.QueueItem.send_tensor)
  if (has_send_tensor()) {
    clear_has_item();
    ::tensorflow::eager::SendTensorOp* temp = item_.send_tensor_;
    item_.send_tensor_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void QueueItem::set_allocated_send_tensor(::tensorflow::eager::SendTensorOp* send_tensor) {
  clear_item();
  if (send_tensor) {
    set_has_send_tensor();
    item_.send_tensor_ = send_tensor;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.QueueItem.send_tensor)
}

// optional .tensorflow.eager.RegisterFunctionOp register_function = 4;
inline bool QueueItem::has_register_function() const {
  return item_case() == kRegisterFunction;
}
inline void QueueItem::set_has_register_function() {
  _oneof_case_[0] = kRegisterFunction;
}
inline void QueueItem::clear_register_function() {
  if (has_register_function()) {
    delete item_.register_function_;
    clear_has_item();
  }
}
inline  const ::tensorflow::eager::RegisterFunctionOp& QueueItem::register_function() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.QueueItem.register_function)
  return has_register_function()
      ? *item_.register_function_
      : ::tensorflow::eager::RegisterFunctionOp::default_instance();
}
inline ::tensorflow::eager::RegisterFunctionOp* QueueItem::mutable_register_function() {
  if (!has_register_function()) {
    clear_item();
    set_has_register_function();
    item_.register_function_ = new ::tensorflow::eager::RegisterFunctionOp;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.eager.QueueItem.register_function)
  return item_.register_function_;
}
inline ::tensorflow::eager::RegisterFunctionOp* QueueItem::release_register_function() {
  // @@protoc_insertion_point(field_release:tensorflow.eager.QueueItem.register_function)
  if (has_register_function()) {
    clear_has_item();
    ::tensorflow::eager::RegisterFunctionOp* temp = item_.register_function_;
    item_.register_function_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void QueueItem::set_allocated_register_function(::tensorflow::eager::RegisterFunctionOp* register_function) {
  clear_item();
  if (register_function) {
    set_has_register_function();
    item_.register_function_ = register_function;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.QueueItem.register_function)
}

// optional .tensorflow.eager.CleanupFunctionOp cleanup_function = 5;
inline bool QueueItem::has_cleanup_function() const {
  return item_case() == kCleanupFunction;
}
inline void QueueItem::set_has_cleanup_function() {
  _oneof_case_[0] = kCleanupFunction;
}
inline void QueueItem::clear_cleanup_function() {
  if (has_cleanup_function()) {
    delete item_.cleanup_function_;
    clear_has_item();
  }
}
inline  const ::tensorflow::eager::CleanupFunctionOp& QueueItem::cleanup_function() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.QueueItem.cleanup_function)
  return has_cleanup_function()
      ? *item_.cleanup_function_
      : ::tensorflow::eager::CleanupFunctionOp::default_instance();
}
inline ::tensorflow::eager::CleanupFunctionOp* QueueItem::mutable_cleanup_function() {
  if (!has_cleanup_function()) {
    clear_item();
    set_has_cleanup_function();
    item_.cleanup_function_ = new ::tensorflow::eager::CleanupFunctionOp;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.eager.QueueItem.cleanup_function)
  return item_.cleanup_function_;
}
inline ::tensorflow::eager::CleanupFunctionOp* QueueItem::release_cleanup_function() {
  // @@protoc_insertion_point(field_release:tensorflow.eager.QueueItem.cleanup_function)
  if (has_cleanup_function()) {
    clear_has_item();
    ::tensorflow::eager::CleanupFunctionOp* temp = item_.cleanup_function_;
    item_.cleanup_function_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void QueueItem::set_allocated_cleanup_function(::tensorflow::eager::CleanupFunctionOp* cleanup_function) {
  clear_item();
  if (cleanup_function) {
    set_has_cleanup_function();
    item_.cleanup_function_ = cleanup_function;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.QueueItem.cleanup_function)
}

// optional .tensorflow.eager.SyncRemoteExecutorForStream sync_remote_executor_for_stream = 6;
inline bool QueueItem::has_sync_remote_executor_for_stream() const {
  return item_case() == kSyncRemoteExecutorForStream;
}
inline void QueueItem::set_has_sync_remote_executor_for_stream() {
  _oneof_case_[0] = kSyncRemoteExecutorForStream;
}
inline void QueueItem::clear_sync_remote_executor_for_stream() {
  if (has_sync_remote_executor_for_stream()) {
    delete item_.sync_remote_executor_for_stream_;
    clear_has_item();
  }
}
inline  const ::tensorflow::eager::SyncRemoteExecutorForStream& QueueItem::sync_remote_executor_for_stream() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.QueueItem.sync_remote_executor_for_stream)
  return has_sync_remote_executor_for_stream()
      ? *item_.sync_remote_executor_for_stream_
      : ::tensorflow::eager::SyncRemoteExecutorForStream::default_instance();
}
inline ::tensorflow::eager::SyncRemoteExecutorForStream* QueueItem::mutable_sync_remote_executor_for_stream() {
  if (!has_sync_remote_executor_for_stream()) {
    clear_item();
    set_has_sync_remote_executor_for_stream();
    item_.sync_remote_executor_for_stream_ = new ::tensorflow::eager::SyncRemoteExecutorForStream;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.eager.QueueItem.sync_remote_executor_for_stream)
  return item_.sync_remote_executor_for_stream_;
}
inline ::tensorflow::eager::SyncRemoteExecutorForStream* QueueItem::release_sync_remote_executor_for_stream() {
  // @@protoc_insertion_point(field_release:tensorflow.eager.QueueItem.sync_remote_executor_for_stream)
  if (has_sync_remote_executor_for_stream()) {
    clear_has_item();
    ::tensorflow::eager::SyncRemoteExecutorForStream* temp = item_.sync_remote_executor_for_stream_;
    item_.sync_remote_executor_for_stream_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void QueueItem::set_allocated_sync_remote_executor_for_stream(::tensorflow::eager::SyncRemoteExecutorForStream* sync_remote_executor_for_stream) {
  clear_item();
  if (sync_remote_executor_for_stream) {
    set_has_sync_remote_executor_for_stream();
    item_.sync_remote_executor_for_stream_ = sync_remote_executor_for_stream;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.QueueItem.sync_remote_executor_for_stream)
}

// optional .tensorflow.eager.SendPackedHandleOp send_packed_handle = 7;
inline bool QueueItem::has_send_packed_handle() const {
  return item_case() == kSendPackedHandle;
}
inline void QueueItem::set_has_send_packed_handle() {
  _oneof_case_[0] = kSendPackedHandle;
}
inline void QueueItem::clear_send_packed_handle() {
  if (has_send_packed_handle()) {
    delete item_.send_packed_handle_;
    clear_has_item();
  }
}
inline  const ::tensorflow::eager::SendPackedHandleOp& QueueItem::send_packed_handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.QueueItem.send_packed_handle)
  return has_send_packed_handle()
      ? *item_.send_packed_handle_
      : ::tensorflow::eager::SendPackedHandleOp::default_instance();
}
inline ::tensorflow::eager::SendPackedHandleOp* QueueItem::mutable_send_packed_handle() {
  if (!has_send_packed_handle()) {
    clear_item();
    set_has_send_packed_handle();
    item_.send_packed_handle_ = new ::tensorflow::eager::SendPackedHandleOp;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.eager.QueueItem.send_packed_handle)
  return item_.send_packed_handle_;
}
inline ::tensorflow::eager::SendPackedHandleOp* QueueItem::release_send_packed_handle() {
  // @@protoc_insertion_point(field_release:tensorflow.eager.QueueItem.send_packed_handle)
  if (has_send_packed_handle()) {
    clear_has_item();
    ::tensorflow::eager::SendPackedHandleOp* temp = item_.send_packed_handle_;
    item_.send_packed_handle_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void QueueItem::set_allocated_send_packed_handle(::tensorflow::eager::SendPackedHandleOp* send_packed_handle) {
  clear_item();
  if (send_packed_handle) {
    set_has_send_packed_handle();
    item_.send_packed_handle_ = send_packed_handle;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.QueueItem.send_packed_handle)
}

inline bool QueueItem::has_item() const {
  return item_case() != ITEM_NOT_SET;
}
inline void QueueItem::clear_has_item() {
  _oneof_case_[0] = ITEM_NOT_SET;
}
inline QueueItem::ItemCase QueueItem::item_case() const {
  return QueueItem::ItemCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// QueueResponse

// repeated .tensorflow.TensorShapeProto shape = 1;
inline int QueueResponse::shape_size() const {
  return shape_.size();
}
inline void QueueResponse::clear_shape() {
  shape_.Clear();
}
inline const ::tensorflow::TensorShapeProto& QueueResponse::shape(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.QueueResponse.shape)
  return shape_.Get(index);
}
inline ::tensorflow::TensorShapeProto* QueueResponse::mutable_shape(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.eager.QueueResponse.shape)
  return shape_.Mutable(index);
}
inline ::tensorflow::TensorShapeProto* QueueResponse::add_shape() {
  // @@protoc_insertion_point(field_add:tensorflow.eager.QueueResponse.shape)
  return shape_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorShapeProto >*
QueueResponse::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.eager.QueueResponse.shape)
  return &shape_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorShapeProto >&
QueueResponse::shape() const {
  // @@protoc_insertion_point(field_list:tensorflow.eager.QueueResponse.shape)
  return shape_;
}

// repeated .tensorflow.TensorProto tensor = 2;
inline int QueueResponse::tensor_size() const {
  return tensor_.size();
}
inline void QueueResponse::clear_tensor() {
  tensor_.Clear();
}
inline const ::tensorflow::TensorProto& QueueResponse::tensor(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.QueueResponse.tensor)
  return tensor_.Get(index);
}
inline ::tensorflow::TensorProto* QueueResponse::mutable_tensor(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.eager.QueueResponse.tensor)
  return tensor_.Mutable(index);
}
inline ::tensorflow::TensorProto* QueueResponse::add_tensor() {
  // @@protoc_insertion_point(field_add:tensorflow.eager.QueueResponse.tensor)
  return tensor_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorProto >*
QueueResponse::mutable_tensor() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.eager.QueueResponse.tensor)
  return &tensor_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorProto >&
QueueResponse::tensor() const {
  // @@protoc_insertion_point(field_list:tensorflow.eager.QueueResponse.tensor)
  return tensor_;
}

// -------------------------------------------------------------------

// CreateContextRequest

// optional .tensorflow.ServerDef server_def = 1;
inline bool CreateContextRequest::has_server_def() const {
  return !_is_default_instance_ && server_def_ != NULL;
}
inline void CreateContextRequest::clear_server_def() {
  if (GetArenaNoVirtual() == NULL && server_def_ != NULL) delete server_def_;
  server_def_ = NULL;
}
inline const ::tensorflow::ServerDef& CreateContextRequest::server_def() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.CreateContextRequest.server_def)
  return server_def_ != NULL ? *server_def_ : *default_instance_->server_def_;
}
inline ::tensorflow::ServerDef* CreateContextRequest::mutable_server_def() {
  
  if (server_def_ == NULL) {
    server_def_ = new ::tensorflow::ServerDef;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.eager.CreateContextRequest.server_def)
  return server_def_;
}
inline ::tensorflow::ServerDef* CreateContextRequest::release_server_def() {
  // @@protoc_insertion_point(field_release:tensorflow.eager.CreateContextRequest.server_def)
  
  ::tensorflow::ServerDef* temp = server_def_;
  server_def_ = NULL;
  return temp;
}
inline void CreateContextRequest::set_allocated_server_def(::tensorflow::ServerDef* server_def) {
  delete server_def_;
  if (server_def != NULL && server_def->GetArena() != NULL) {
    ::tensorflow::ServerDef* new_server_def = new ::tensorflow::ServerDef;
    new_server_def->CopyFrom(*server_def);
    server_def = new_server_def;
  }
  server_def_ = server_def;
  if (server_def) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.CreateContextRequest.server_def)
}

// optional bool async = 2;
inline void CreateContextRequest::clear_async() {
  async_ = false;
}
inline bool CreateContextRequest::async() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.CreateContextRequest.async)
  return async_;
}
inline void CreateContextRequest::set_async(bool value) {
  
  async_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.eager.CreateContextRequest.async)
}

// optional int64 keep_alive_secs = 3;
inline void CreateContextRequest::clear_keep_alive_secs() {
  keep_alive_secs_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CreateContextRequest::keep_alive_secs() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.CreateContextRequest.keep_alive_secs)
  return keep_alive_secs_;
}
inline void CreateContextRequest::set_keep_alive_secs(::google::protobuf::int64 value) {
  
  keep_alive_secs_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.eager.CreateContextRequest.keep_alive_secs)
}

// optional .tensorflow.VersionDef version_def = 4;
inline bool CreateContextRequest::has_version_def() const {
  return !_is_default_instance_ && version_def_ != NULL;
}
inline void CreateContextRequest::clear_version_def() {
  if (GetArenaNoVirtual() == NULL && version_def_ != NULL) delete version_def_;
  version_def_ = NULL;
}
inline const ::tensorflow::VersionDef& CreateContextRequest::version_def() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.CreateContextRequest.version_def)
  return version_def_ != NULL ? *version_def_ : *default_instance_->version_def_;
}
inline ::tensorflow::VersionDef* CreateContextRequest::mutable_version_def() {
  
  if (version_def_ == NULL) {
    version_def_ = new ::tensorflow::VersionDef;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.eager.CreateContextRequest.version_def)
  return version_def_;
}
inline ::tensorflow::VersionDef* CreateContextRequest::release_version_def() {
  // @@protoc_insertion_point(field_release:tensorflow.eager.CreateContextRequest.version_def)
  
  ::tensorflow::VersionDef* temp = version_def_;
  version_def_ = NULL;
  return temp;
}
inline void CreateContextRequest::set_allocated_version_def(::tensorflow::VersionDef* version_def) {
  delete version_def_;
  if (version_def != NULL && version_def->GetArena() != NULL) {
    ::tensorflow::VersionDef* new_version_def = new ::tensorflow::VersionDef;
    new_version_def->CopyFrom(*version_def);
    version_def = new_version_def;
  }
  version_def_ = version_def;
  if (version_def) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.CreateContextRequest.version_def)
}

// repeated .tensorflow.DeviceAttributes cluster_device_attributes = 6;
inline int CreateContextRequest::cluster_device_attributes_size() const {
  return cluster_device_attributes_.size();
}
inline void CreateContextRequest::clear_cluster_device_attributes() {
  cluster_device_attributes_.Clear();
}
inline const ::tensorflow::DeviceAttributes& CreateContextRequest::cluster_device_attributes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.CreateContextRequest.cluster_device_attributes)
  return cluster_device_attributes_.Get(index);
}
inline ::tensorflow::DeviceAttributes* CreateContextRequest::mutable_cluster_device_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.eager.CreateContextRequest.cluster_device_attributes)
  return cluster_device_attributes_.Mutable(index);
}
inline ::tensorflow::DeviceAttributes* CreateContextRequest::add_cluster_device_attributes() {
  // @@protoc_insertion_point(field_add:tensorflow.eager.CreateContextRequest.cluster_device_attributes)
  return cluster_device_attributes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::DeviceAttributes >*
CreateContextRequest::mutable_cluster_device_attributes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.eager.CreateContextRequest.cluster_device_attributes)
  return &cluster_device_attributes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::DeviceAttributes >&
CreateContextRequest::cluster_device_attributes() const {
  // @@protoc_insertion_point(field_list:tensorflow.eager.CreateContextRequest.cluster_device_attributes)
  return cluster_device_attributes_;
}

// optional fixed64 context_id = 7;
inline void CreateContextRequest::clear_context_id() {
  context_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CreateContextRequest::context_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.CreateContextRequest.context_id)
  return context_id_;
}
inline void CreateContextRequest::set_context_id(::google::protobuf::uint64 value) {
  
  context_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.eager.CreateContextRequest.context_id)
}

// optional fixed64 context_view_id = 8;
inline void CreateContextRequest::clear_context_view_id() {
  context_view_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CreateContextRequest::context_view_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.CreateContextRequest.context_view_id)
  return context_view_id_;
}
inline void CreateContextRequest::set_context_view_id(::google::protobuf::uint64 value) {
  
  context_view_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.eager.CreateContextRequest.context_view_id)
}

// optional bool lazy_copy_remote_function_inputs = 9;
inline void CreateContextRequest::clear_lazy_copy_remote_function_inputs() {
  lazy_copy_remote_function_inputs_ = false;
}
inline bool CreateContextRequest::lazy_copy_remote_function_inputs() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.CreateContextRequest.lazy_copy_remote_function_inputs)
  return lazy_copy_remote_function_inputs_;
}
inline void CreateContextRequest::set_lazy_copy_remote_function_inputs(bool value) {
  
  lazy_copy_remote_function_inputs_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.eager.CreateContextRequest.lazy_copy_remote_function_inputs)
}

// -------------------------------------------------------------------

// CreateContextResponse

// repeated .tensorflow.DeviceAttributes device_attributes = 2;
inline int CreateContextResponse::device_attributes_size() const {
  return device_attributes_.size();
}
inline void CreateContextResponse::clear_device_attributes() {
  device_attributes_.Clear();
}
inline const ::tensorflow::DeviceAttributes& CreateContextResponse::device_attributes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.CreateContextResponse.device_attributes)
  return device_attributes_.Get(index);
}
inline ::tensorflow::DeviceAttributes* CreateContextResponse::mutable_device_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.eager.CreateContextResponse.device_attributes)
  return device_attributes_.Mutable(index);
}
inline ::tensorflow::DeviceAttributes* CreateContextResponse::add_device_attributes() {
  // @@protoc_insertion_point(field_add:tensorflow.eager.CreateContextResponse.device_attributes)
  return device_attributes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::DeviceAttributes >*
CreateContextResponse::mutable_device_attributes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.eager.CreateContextResponse.device_attributes)
  return &device_attributes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::DeviceAttributes >&
CreateContextResponse::device_attributes() const {
  // @@protoc_insertion_point(field_list:tensorflow.eager.CreateContextResponse.device_attributes)
  return device_attributes_;
}

// -------------------------------------------------------------------

// UpdateContextRequest

// optional .tensorflow.ServerDef server_def = 1;
inline bool UpdateContextRequest::has_server_def() const {
  return !_is_default_instance_ && server_def_ != NULL;
}
inline void UpdateContextRequest::clear_server_def() {
  if (GetArenaNoVirtual() == NULL && server_def_ != NULL) delete server_def_;
  server_def_ = NULL;
}
inline const ::tensorflow::ServerDef& UpdateContextRequest::server_def() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.UpdateContextRequest.server_def)
  return server_def_ != NULL ? *server_def_ : *default_instance_->server_def_;
}
inline ::tensorflow::ServerDef* UpdateContextRequest::mutable_server_def() {
  
  if (server_def_ == NULL) {
    server_def_ = new ::tensorflow::ServerDef;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.eager.UpdateContextRequest.server_def)
  return server_def_;
}
inline ::tensorflow::ServerDef* UpdateContextRequest::release_server_def() {
  // @@protoc_insertion_point(field_release:tensorflow.eager.UpdateContextRequest.server_def)
  
  ::tensorflow::ServerDef* temp = server_def_;
  server_def_ = NULL;
  return temp;
}
inline void UpdateContextRequest::set_allocated_server_def(::tensorflow::ServerDef* server_def) {
  delete server_def_;
  if (server_def != NULL && server_def->GetArena() != NULL) {
    ::tensorflow::ServerDef* new_server_def = new ::tensorflow::ServerDef;
    new_server_def->CopyFrom(*server_def);
    server_def = new_server_def;
  }
  server_def_ = server_def;
  if (server_def) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.UpdateContextRequest.server_def)
}

// repeated .tensorflow.DeviceAttributes cluster_device_attributes = 2;
inline int UpdateContextRequest::cluster_device_attributes_size() const {
  return cluster_device_attributes_.size();
}
inline void UpdateContextRequest::clear_cluster_device_attributes() {
  cluster_device_attributes_.Clear();
}
inline const ::tensorflow::DeviceAttributes& UpdateContextRequest::cluster_device_attributes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.UpdateContextRequest.cluster_device_attributes)
  return cluster_device_attributes_.Get(index);
}
inline ::tensorflow::DeviceAttributes* UpdateContextRequest::mutable_cluster_device_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.eager.UpdateContextRequest.cluster_device_attributes)
  return cluster_device_attributes_.Mutable(index);
}
inline ::tensorflow::DeviceAttributes* UpdateContextRequest::add_cluster_device_attributes() {
  // @@protoc_insertion_point(field_add:tensorflow.eager.UpdateContextRequest.cluster_device_attributes)
  return cluster_device_attributes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::DeviceAttributes >*
UpdateContextRequest::mutable_cluster_device_attributes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.eager.UpdateContextRequest.cluster_device_attributes)
  return &cluster_device_attributes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::DeviceAttributes >&
UpdateContextRequest::cluster_device_attributes() const {
  // @@protoc_insertion_point(field_list:tensorflow.eager.UpdateContextRequest.cluster_device_attributes)
  return cluster_device_attributes_;
}

// optional fixed64 context_id = 3;
inline void UpdateContextRequest::clear_context_id() {
  context_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 UpdateContextRequest::context_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.UpdateContextRequest.context_id)
  return context_id_;
}
inline void UpdateContextRequest::set_context_id(::google::protobuf::uint64 value) {
  
  context_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.eager.UpdateContextRequest.context_id)
}

// optional fixed64 context_view_id = 4;
inline void UpdateContextRequest::clear_context_view_id() {
  context_view_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 UpdateContextRequest::context_view_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.UpdateContextRequest.context_view_id)
  return context_view_id_;
}
inline void UpdateContextRequest::set_context_view_id(::google::protobuf::uint64 value) {
  
  context_view_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.eager.UpdateContextRequest.context_view_id)
}

// -------------------------------------------------------------------

// UpdateContextResponse

// repeated .tensorflow.DeviceAttributes device_attributes = 1;
inline int UpdateContextResponse::device_attributes_size() const {
  return device_attributes_.size();
}
inline void UpdateContextResponse::clear_device_attributes() {
  device_attributes_.Clear();
}
inline const ::tensorflow::DeviceAttributes& UpdateContextResponse::device_attributes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.UpdateContextResponse.device_attributes)
  return device_attributes_.Get(index);
}
inline ::tensorflow::DeviceAttributes* UpdateContextResponse::mutable_device_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.eager.UpdateContextResponse.device_attributes)
  return device_attributes_.Mutable(index);
}
inline ::tensorflow::DeviceAttributes* UpdateContextResponse::add_device_attributes() {
  // @@protoc_insertion_point(field_add:tensorflow.eager.UpdateContextResponse.device_attributes)
  return device_attributes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::DeviceAttributes >*
UpdateContextResponse::mutable_device_attributes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.eager.UpdateContextResponse.device_attributes)
  return &device_attributes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::DeviceAttributes >&
UpdateContextResponse::device_attributes() const {
  // @@protoc_insertion_point(field_list:tensorflow.eager.UpdateContextResponse.device_attributes)
  return device_attributes_;
}

// -------------------------------------------------------------------

// EnqueueRequest

// optional fixed64 context_id = 1;
inline void EnqueueRequest::clear_context_id() {
  context_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 EnqueueRequest::context_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.EnqueueRequest.context_id)
  return context_id_;
}
inline void EnqueueRequest::set_context_id(::google::protobuf::uint64 value) {
  
  context_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.eager.EnqueueRequest.context_id)
}

// repeated .tensorflow.eager.QueueItem queue = 3;
inline int EnqueueRequest::queue_size() const {
  return queue_.size();
}
inline void EnqueueRequest::clear_queue() {
  queue_.Clear();
}
inline const ::tensorflow::eager::QueueItem& EnqueueRequest::queue(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.EnqueueRequest.queue)
  return queue_.Get(index);
}
inline ::tensorflow::eager::QueueItem* EnqueueRequest::mutable_queue(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.eager.EnqueueRequest.queue)
  return queue_.Mutable(index);
}
inline ::tensorflow::eager::QueueItem* EnqueueRequest::add_queue() {
  // @@protoc_insertion_point(field_add:tensorflow.eager.EnqueueRequest.queue)
  return queue_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::eager::QueueItem >*
EnqueueRequest::mutable_queue() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.eager.EnqueueRequest.queue)
  return &queue_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::eager::QueueItem >&
EnqueueRequest::queue() const {
  // @@protoc_insertion_point(field_list:tensorflow.eager.EnqueueRequest.queue)
  return queue_;
}

// -------------------------------------------------------------------

// EnqueueResponse

// repeated .tensorflow.eager.QueueResponse queue_response = 1;
inline int EnqueueResponse::queue_response_size() const {
  return queue_response_.size();
}
inline void EnqueueResponse::clear_queue_response() {
  queue_response_.Clear();
}
inline const ::tensorflow::eager::QueueResponse& EnqueueResponse::queue_response(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.EnqueueResponse.queue_response)
  return queue_response_.Get(index);
}
inline ::tensorflow::eager::QueueResponse* EnqueueResponse::mutable_queue_response(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.eager.EnqueueResponse.queue_response)
  return queue_response_.Mutable(index);
}
inline ::tensorflow::eager::QueueResponse* EnqueueResponse::add_queue_response() {
  // @@protoc_insertion_point(field_add:tensorflow.eager.EnqueueResponse.queue_response)
  return queue_response_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::eager::QueueResponse >*
EnqueueResponse::mutable_queue_response() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.eager.EnqueueResponse.queue_response)
  return &queue_response_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::eager::QueueResponse >&
EnqueueResponse::queue_response() const {
  // @@protoc_insertion_point(field_list:tensorflow.eager.EnqueueResponse.queue_response)
  return queue_response_;
}

// -------------------------------------------------------------------

// WaitQueueDoneRequest

// optional fixed64 context_id = 1;
inline void WaitQueueDoneRequest::clear_context_id() {
  context_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 WaitQueueDoneRequest::context_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.WaitQueueDoneRequest.context_id)
  return context_id_;
}
inline void WaitQueueDoneRequest::set_context_id(::google::protobuf::uint64 value) {
  
  context_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.eager.WaitQueueDoneRequest.context_id)
}

// repeated int64 op_id = 2;
inline int WaitQueueDoneRequest::op_id_size() const {
  return op_id_.size();
}
inline void WaitQueueDoneRequest::clear_op_id() {
  op_id_.Clear();
}
inline ::google::protobuf::int64 WaitQueueDoneRequest::op_id(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.WaitQueueDoneRequest.op_id)
  return op_id_.Get(index);
}
inline void WaitQueueDoneRequest::set_op_id(int index, ::google::protobuf::int64 value) {
  op_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.eager.WaitQueueDoneRequest.op_id)
}
inline void WaitQueueDoneRequest::add_op_id(::google::protobuf::int64 value) {
  op_id_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.eager.WaitQueueDoneRequest.op_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
WaitQueueDoneRequest::op_id() const {
  // @@protoc_insertion_point(field_list:tensorflow.eager.WaitQueueDoneRequest.op_id)
  return op_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
WaitQueueDoneRequest::mutable_op_id() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.eager.WaitQueueDoneRequest.op_id)
  return &op_id_;
}

// -------------------------------------------------------------------

// WaitQueueDoneResponse

// -------------------------------------------------------------------

// RunComponentFunctionRequest

// optional fixed64 context_id = 1;
inline void RunComponentFunctionRequest::clear_context_id() {
  context_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RunComponentFunctionRequest::context_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.RunComponentFunctionRequest.context_id)
  return context_id_;
}
inline void RunComponentFunctionRequest::set_context_id(::google::protobuf::uint64 value) {
  
  context_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.eager.RunComponentFunctionRequest.context_id)
}

// optional .tensorflow.eager.Operation operation = 2;
inline bool RunComponentFunctionRequest::has_operation() const {
  return !_is_default_instance_ && operation_ != NULL;
}
inline void RunComponentFunctionRequest::clear_operation() {
  if (GetArenaNoVirtual() == NULL && operation_ != NULL) delete operation_;
  operation_ = NULL;
}
inline const ::tensorflow::eager::Operation& RunComponentFunctionRequest::operation() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.RunComponentFunctionRequest.operation)
  return operation_ != NULL ? *operation_ : *default_instance_->operation_;
}
inline ::tensorflow::eager::Operation* RunComponentFunctionRequest::mutable_operation() {
  
  if (operation_ == NULL) {
    operation_ = new ::tensorflow::eager::Operation;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.eager.RunComponentFunctionRequest.operation)
  return operation_;
}
inline ::tensorflow::eager::Operation* RunComponentFunctionRequest::release_operation() {
  // @@protoc_insertion_point(field_release:tensorflow.eager.RunComponentFunctionRequest.operation)
  
  ::tensorflow::eager::Operation* temp = operation_;
  operation_ = NULL;
  return temp;
}
inline void RunComponentFunctionRequest::set_allocated_operation(::tensorflow::eager::Operation* operation) {
  delete operation_;
  operation_ = operation;
  if (operation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.RunComponentFunctionRequest.operation)
}

// -------------------------------------------------------------------

// RunComponentFunctionResponse

// repeated .tensorflow.TensorShapeProto shape = 1;
inline int RunComponentFunctionResponse::shape_size() const {
  return shape_.size();
}
inline void RunComponentFunctionResponse::clear_shape() {
  shape_.Clear();
}
inline const ::tensorflow::TensorShapeProto& RunComponentFunctionResponse::shape(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.RunComponentFunctionResponse.shape)
  return shape_.Get(index);
}
inline ::tensorflow::TensorShapeProto* RunComponentFunctionResponse::mutable_shape(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.eager.RunComponentFunctionResponse.shape)
  return shape_.Mutable(index);
}
inline ::tensorflow::TensorShapeProto* RunComponentFunctionResponse::add_shape() {
  // @@protoc_insertion_point(field_add:tensorflow.eager.RunComponentFunctionResponse.shape)
  return shape_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorShapeProto >*
RunComponentFunctionResponse::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.eager.RunComponentFunctionResponse.shape)
  return &shape_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorShapeProto >&
RunComponentFunctionResponse::shape() const {
  // @@protoc_insertion_point(field_list:tensorflow.eager.RunComponentFunctionResponse.shape)
  return shape_;
}

// repeated .tensorflow.TensorProto tensor = 2;
inline int RunComponentFunctionResponse::tensor_size() const {
  return tensor_.size();
}
inline void RunComponentFunctionResponse::clear_tensor() {
  tensor_.Clear();
}
inline const ::tensorflow::TensorProto& RunComponentFunctionResponse::tensor(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.RunComponentFunctionResponse.tensor)
  return tensor_.Get(index);
}
inline ::tensorflow::TensorProto* RunComponentFunctionResponse::mutable_tensor(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.eager.RunComponentFunctionResponse.tensor)
  return tensor_.Mutable(index);
}
inline ::tensorflow::TensorProto* RunComponentFunctionResponse::add_tensor() {
  // @@protoc_insertion_point(field_add:tensorflow.eager.RunComponentFunctionResponse.tensor)
  return tensor_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorProto >*
RunComponentFunctionResponse::mutable_tensor() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.eager.RunComponentFunctionResponse.tensor)
  return &tensor_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorProto >&
RunComponentFunctionResponse::tensor() const {
  // @@protoc_insertion_point(field_list:tensorflow.eager.RunComponentFunctionResponse.tensor)
  return tensor_;
}

// -------------------------------------------------------------------

// KeepAliveRequest

// optional fixed64 context_id = 1;
inline void KeepAliveRequest::clear_context_id() {
  context_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 KeepAliveRequest::context_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.KeepAliveRequest.context_id)
  return context_id_;
}
inline void KeepAliveRequest::set_context_id(::google::protobuf::uint64 value) {
  
  context_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.eager.KeepAliveRequest.context_id)
}

// -------------------------------------------------------------------

// KeepAliveResponse

// optional fixed64 context_view_id = 1;
inline void KeepAliveResponse::clear_context_view_id() {
  context_view_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 KeepAliveResponse::context_view_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.KeepAliveResponse.context_view_id)
  return context_view_id_;
}
inline void KeepAliveResponse::set_context_view_id(::google::protobuf::uint64 value) {
  
  context_view_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.eager.KeepAliveResponse.context_view_id)
}

// -------------------------------------------------------------------

// CloseContextRequest

// optional fixed64 context_id = 1;
inline void CloseContextRequest::clear_context_id() {
  context_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CloseContextRequest::context_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.CloseContextRequest.context_id)
  return context_id_;
}
inline void CloseContextRequest::set_context_id(::google::protobuf::uint64 value) {
  
  context_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.eager.CloseContextRequest.context_id)
}

// optional fixed64 context_view_id = 2;
inline void CloseContextRequest::clear_context_view_id() {
  context_view_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CloseContextRequest::context_view_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.CloseContextRequest.context_view_id)
  return context_view_id_;
}
inline void CloseContextRequest::set_context_view_id(::google::protobuf::uint64 value) {
  
  context_view_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.eager.CloseContextRequest.context_view_id)
}

// -------------------------------------------------------------------

// CloseContextResponse

// -------------------------------------------------------------------

// RegisterFunctionOp

// optional .tensorflow.FunctionDef function_def = 1;
inline bool RegisterFunctionOp::has_function_def() const {
  return !_is_default_instance_ && function_def_ != NULL;
}
inline void RegisterFunctionOp::clear_function_def() {
  if (GetArenaNoVirtual() == NULL && function_def_ != NULL) delete function_def_;
  function_def_ = NULL;
}
inline const ::tensorflow::FunctionDef& RegisterFunctionOp::function_def() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.RegisterFunctionOp.function_def)
  return function_def_ != NULL ? *function_def_ : *default_instance_->function_def_;
}
inline ::tensorflow::FunctionDef* RegisterFunctionOp::mutable_function_def() {
  
  if (function_def_ == NULL) {
    function_def_ = new ::tensorflow::FunctionDef;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.eager.RegisterFunctionOp.function_def)
  return function_def_;
}
inline ::tensorflow::FunctionDef* RegisterFunctionOp::release_function_def() {
  // @@protoc_insertion_point(field_release:tensorflow.eager.RegisterFunctionOp.function_def)
  
  ::tensorflow::FunctionDef* temp = function_def_;
  function_def_ = NULL;
  return temp;
}
inline void RegisterFunctionOp::set_allocated_function_def(::tensorflow::FunctionDef* function_def) {
  delete function_def_;
  if (function_def != NULL && function_def->GetArena() != NULL) {
    ::tensorflow::FunctionDef* new_function_def = new ::tensorflow::FunctionDef;
    new_function_def->CopyFrom(*function_def);
    function_def = new_function_def;
  }
  function_def_ = function_def;
  if (function_def) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.RegisterFunctionOp.function_def)
}

// optional bool is_component_function = 2;
inline void RegisterFunctionOp::clear_is_component_function() {
  is_component_function_ = false;
}
inline bool RegisterFunctionOp::is_component_function() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.RegisterFunctionOp.is_component_function)
  return is_component_function_;
}
inline void RegisterFunctionOp::set_is_component_function(bool value) {
  
  is_component_function_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.eager.RegisterFunctionOp.is_component_function)
}

// optional .tensorflow.FunctionDefLibrary library = 3;
inline bool RegisterFunctionOp::has_library() const {
  return !_is_default_instance_ && library_ != NULL;
}
inline void RegisterFunctionOp::clear_library() {
  if (GetArenaNoVirtual() == NULL && library_ != NULL) delete library_;
  library_ = NULL;
}
inline const ::tensorflow::FunctionDefLibrary& RegisterFunctionOp::library() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.RegisterFunctionOp.library)
  return library_ != NULL ? *library_ : *default_instance_->library_;
}
inline ::tensorflow::FunctionDefLibrary* RegisterFunctionOp::mutable_library() {
  
  if (library_ == NULL) {
    library_ = new ::tensorflow::FunctionDefLibrary;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.eager.RegisterFunctionOp.library)
  return library_;
}
inline ::tensorflow::FunctionDefLibrary* RegisterFunctionOp::release_library() {
  // @@protoc_insertion_point(field_release:tensorflow.eager.RegisterFunctionOp.library)
  
  ::tensorflow::FunctionDefLibrary* temp = library_;
  library_ = NULL;
  return temp;
}
inline void RegisterFunctionOp::set_allocated_library(::tensorflow::FunctionDefLibrary* library) {
  delete library_;
  if (library != NULL && library->GetArena() != NULL) {
    ::tensorflow::FunctionDefLibrary* new_library = new ::tensorflow::FunctionDefLibrary;
    new_library->CopyFrom(*library);
    library = new_library;
  }
  library_ = library;
  if (library) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.RegisterFunctionOp.library)
}

// -------------------------------------------------------------------

// CleanupFunctionOp

// optional int64 step_id = 1;
inline void CleanupFunctionOp::clear_step_id() {
  step_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CleanupFunctionOp::step_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.CleanupFunctionOp.step_id)
  return step_id_;
}
inline void CleanupFunctionOp::set_step_id(::google::protobuf::int64 value) {
  
  step_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.eager.CleanupFunctionOp.step_id)
}

// -------------------------------------------------------------------

// SyncRemoteExecutorForStream

// -------------------------------------------------------------------

// SendTensorOp

// optional int64 op_id = 1;
inline void SendTensorOp::clear_op_id() {
  op_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SendTensorOp::op_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.SendTensorOp.op_id)
  return op_id_;
}
inline void SendTensorOp::set_op_id(::google::protobuf::int64 value) {
  
  op_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.eager.SendTensorOp.op_id)
}

// repeated .tensorflow.TensorProto tensors = 2;
inline int SendTensorOp::tensors_size() const {
  return tensors_.size();
}
inline void SendTensorOp::clear_tensors() {
  tensors_.Clear();
}
inline const ::tensorflow::TensorProto& SendTensorOp::tensors(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.SendTensorOp.tensors)
  return tensors_.Get(index);
}
inline ::tensorflow::TensorProto* SendTensorOp::mutable_tensors(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.eager.SendTensorOp.tensors)
  return tensors_.Mutable(index);
}
inline ::tensorflow::TensorProto* SendTensorOp::add_tensors() {
  // @@protoc_insertion_point(field_add:tensorflow.eager.SendTensorOp.tensors)
  return tensors_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorProto >*
SendTensorOp::mutable_tensors() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.eager.SendTensorOp.tensors)
  return &tensors_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorProto >&
SendTensorOp::tensors() const {
  // @@protoc_insertion_point(field_list:tensorflow.eager.SendTensorOp.tensors)
  return tensors_;
}

// optional string device_name = 3;
inline void SendTensorOp::clear_device_name() {
  device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendTensorOp::device_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.SendTensorOp.device_name)
  return device_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendTensorOp::set_device_name(const ::std::string& value) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.eager.SendTensorOp.device_name)
}
inline void SendTensorOp::set_device_name(const char* value) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.eager.SendTensorOp.device_name)
}
inline void SendTensorOp::set_device_name(const char* value, size_t size) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.eager.SendTensorOp.device_name)
}
inline ::std::string* SendTensorOp::mutable_device_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.eager.SendTensorOp.device_name)
  return device_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendTensorOp::release_device_name() {
  // @@protoc_insertion_point(field_release:tensorflow.eager.SendTensorOp.device_name)
  
  return device_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendTensorOp::set_allocated_device_name(::std::string* device_name) {
  if (device_name != NULL) {
    
  } else {
    
  }
  device_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.SendTensorOp.device_name)
}

// -------------------------------------------------------------------

// SendPackedHandleOp_LocalTensorHandle

// optional .tensorflow.TensorProto tensor = 1;
inline bool SendPackedHandleOp_LocalTensorHandle::has_tensor() const {
  return !_is_default_instance_ && tensor_ != NULL;
}
inline void SendPackedHandleOp_LocalTensorHandle::clear_tensor() {
  if (GetArenaNoVirtual() == NULL && tensor_ != NULL) delete tensor_;
  tensor_ = NULL;
}
inline const ::tensorflow::TensorProto& SendPackedHandleOp_LocalTensorHandle::tensor() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.SendPackedHandleOp.LocalTensorHandle.tensor)
  return tensor_ != NULL ? *tensor_ : *default_instance_->tensor_;
}
inline ::tensorflow::TensorProto* SendPackedHandleOp_LocalTensorHandle::mutable_tensor() {
  
  if (tensor_ == NULL) {
    tensor_ = new ::tensorflow::TensorProto;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.eager.SendPackedHandleOp.LocalTensorHandle.tensor)
  return tensor_;
}
inline ::tensorflow::TensorProto* SendPackedHandleOp_LocalTensorHandle::release_tensor() {
  // @@protoc_insertion_point(field_release:tensorflow.eager.SendPackedHandleOp.LocalTensorHandle.tensor)
  
  ::tensorflow::TensorProto* temp = tensor_;
  tensor_ = NULL;
  return temp;
}
inline void SendPackedHandleOp_LocalTensorHandle::set_allocated_tensor(::tensorflow::TensorProto* tensor) {
  delete tensor_;
  if (tensor != NULL && tensor->GetArena() != NULL) {
    ::tensorflow::TensorProto* new_tensor = new ::tensorflow::TensorProto;
    new_tensor->CopyFrom(*tensor);
    tensor = new_tensor;
  }
  tensor_ = tensor;
  if (tensor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.SendPackedHandleOp.LocalTensorHandle.tensor)
}

// optional string device = 2;
inline void SendPackedHandleOp_LocalTensorHandle::clear_device() {
  device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendPackedHandleOp_LocalTensorHandle::device() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.SendPackedHandleOp.LocalTensorHandle.device)
  return device_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendPackedHandleOp_LocalTensorHandle::set_device(const ::std::string& value) {
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.eager.SendPackedHandleOp.LocalTensorHandle.device)
}
inline void SendPackedHandleOp_LocalTensorHandle::set_device(const char* value) {
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.eager.SendPackedHandleOp.LocalTensorHandle.device)
}
inline void SendPackedHandleOp_LocalTensorHandle::set_device(const char* value, size_t size) {
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.eager.SendPackedHandleOp.LocalTensorHandle.device)
}
inline ::std::string* SendPackedHandleOp_LocalTensorHandle::mutable_device() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.eager.SendPackedHandleOp.LocalTensorHandle.device)
  return device_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendPackedHandleOp_LocalTensorHandle::release_device() {
  // @@protoc_insertion_point(field_release:tensorflow.eager.SendPackedHandleOp.LocalTensorHandle.device)
  
  return device_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendPackedHandleOp_LocalTensorHandle::set_allocated_device(::std::string* device) {
  if (device != NULL) {
    
  } else {
    
  }
  device_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.SendPackedHandleOp.LocalTensorHandle.device)
}

// -------------------------------------------------------------------

// SendPackedHandleOp_Handle

// optional .tensorflow.eager.SendPackedHandleOp.LocalTensorHandle local_handle = 1;
inline bool SendPackedHandleOp_Handle::has_local_handle() const {
  return item_case() == kLocalHandle;
}
inline void SendPackedHandleOp_Handle::set_has_local_handle() {
  _oneof_case_[0] = kLocalHandle;
}
inline void SendPackedHandleOp_Handle::clear_local_handle() {
  if (has_local_handle()) {
    delete item_.local_handle_;
    clear_has_item();
  }
}
inline  const ::tensorflow::eager::SendPackedHandleOp_LocalTensorHandle& SendPackedHandleOp_Handle::local_handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.SendPackedHandleOp.Handle.local_handle)
  return has_local_handle()
      ? *item_.local_handle_
      : ::tensorflow::eager::SendPackedHandleOp_LocalTensorHandle::default_instance();
}
inline ::tensorflow::eager::SendPackedHandleOp_LocalTensorHandle* SendPackedHandleOp_Handle::mutable_local_handle() {
  if (!has_local_handle()) {
    clear_item();
    set_has_local_handle();
    item_.local_handle_ = new ::tensorflow::eager::SendPackedHandleOp_LocalTensorHandle;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.eager.SendPackedHandleOp.Handle.local_handle)
  return item_.local_handle_;
}
inline ::tensorflow::eager::SendPackedHandleOp_LocalTensorHandle* SendPackedHandleOp_Handle::release_local_handle() {
  // @@protoc_insertion_point(field_release:tensorflow.eager.SendPackedHandleOp.Handle.local_handle)
  if (has_local_handle()) {
    clear_has_item();
    ::tensorflow::eager::SendPackedHandleOp_LocalTensorHandle* temp = item_.local_handle_;
    item_.local_handle_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SendPackedHandleOp_Handle::set_allocated_local_handle(::tensorflow::eager::SendPackedHandleOp_LocalTensorHandle* local_handle) {
  clear_item();
  if (local_handle) {
    set_has_local_handle();
    item_.local_handle_ = local_handle;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.SendPackedHandleOp.Handle.local_handle)
}

// optional .tensorflow.eager.RemoteTensorHandle remote_handle = 2;
inline bool SendPackedHandleOp_Handle::has_remote_handle() const {
  return item_case() == kRemoteHandle;
}
inline void SendPackedHandleOp_Handle::set_has_remote_handle() {
  _oneof_case_[0] = kRemoteHandle;
}
inline void SendPackedHandleOp_Handle::clear_remote_handle() {
  if (has_remote_handle()) {
    delete item_.remote_handle_;
    clear_has_item();
  }
}
inline  const ::tensorflow::eager::RemoteTensorHandle& SendPackedHandleOp_Handle::remote_handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.SendPackedHandleOp.Handle.remote_handle)
  return has_remote_handle()
      ? *item_.remote_handle_
      : ::tensorflow::eager::RemoteTensorHandle::default_instance();
}
inline ::tensorflow::eager::RemoteTensorHandle* SendPackedHandleOp_Handle::mutable_remote_handle() {
  if (!has_remote_handle()) {
    clear_item();
    set_has_remote_handle();
    item_.remote_handle_ = new ::tensorflow::eager::RemoteTensorHandle;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.eager.SendPackedHandleOp.Handle.remote_handle)
  return item_.remote_handle_;
}
inline ::tensorflow::eager::RemoteTensorHandle* SendPackedHandleOp_Handle::release_remote_handle() {
  // @@protoc_insertion_point(field_release:tensorflow.eager.SendPackedHandleOp.Handle.remote_handle)
  if (has_remote_handle()) {
    clear_has_item();
    ::tensorflow::eager::RemoteTensorHandle* temp = item_.remote_handle_;
    item_.remote_handle_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SendPackedHandleOp_Handle::set_allocated_remote_handle(::tensorflow::eager::RemoteTensorHandle* remote_handle) {
  clear_item();
  if (remote_handle) {
    if (static_cast< ::tensorflow::eager::RemoteTensorHandle*>(remote_handle)->GetArena() != NULL) {
      ::tensorflow::eager::RemoteTensorHandle* new_remote_handle = new ::tensorflow::eager::RemoteTensorHandle;
      new_remote_handle->CopyFrom(*remote_handle);
      remote_handle = new_remote_handle;
    }
    set_has_remote_handle();
    item_.remote_handle_ = remote_handle;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.SendPackedHandleOp.Handle.remote_handle)
}

inline bool SendPackedHandleOp_Handle::has_item() const {
  return item_case() != ITEM_NOT_SET;
}
inline void SendPackedHandleOp_Handle::clear_has_item() {
  _oneof_case_[0] = ITEM_NOT_SET;
}
inline SendPackedHandleOp_Handle::ItemCase SendPackedHandleOp_Handle::item_case() const {
  return SendPackedHandleOp_Handle::ItemCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SendPackedHandleOp

// optional int64 op_id = 1;
inline void SendPackedHandleOp::clear_op_id() {
  op_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SendPackedHandleOp::op_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.SendPackedHandleOp.op_id)
  return op_id_;
}
inline void SendPackedHandleOp::set_op_id(::google::protobuf::int64 value) {
  
  op_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.eager.SendPackedHandleOp.op_id)
}

// repeated .tensorflow.eager.SendPackedHandleOp.Handle handles = 2;
inline int SendPackedHandleOp::handles_size() const {
  return handles_.size();
}
inline void SendPackedHandleOp::clear_handles() {
  handles_.Clear();
}
inline const ::tensorflow::eager::SendPackedHandleOp_Handle& SendPackedHandleOp::handles(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.SendPackedHandleOp.handles)
  return handles_.Get(index);
}
inline ::tensorflow::eager::SendPackedHandleOp_Handle* SendPackedHandleOp::mutable_handles(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.eager.SendPackedHandleOp.handles)
  return handles_.Mutable(index);
}
inline ::tensorflow::eager::SendPackedHandleOp_Handle* SendPackedHandleOp::add_handles() {
  // @@protoc_insertion_point(field_add:tensorflow.eager.SendPackedHandleOp.handles)
  return handles_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::eager::SendPackedHandleOp_Handle >*
SendPackedHandleOp::mutable_handles() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.eager.SendPackedHandleOp.handles)
  return &handles_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::eager::SendPackedHandleOp_Handle >&
SendPackedHandleOp::handles() const {
  // @@protoc_insertion_point(field_list:tensorflow.eager.SendPackedHandleOp.handles)
  return handles_;
}

// optional string device_name = 3;
inline void SendPackedHandleOp::clear_device_name() {
  device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendPackedHandleOp::device_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.eager.SendPackedHandleOp.device_name)
  return device_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendPackedHandleOp::set_device_name(const ::std::string& value) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.eager.SendPackedHandleOp.device_name)
}
inline void SendPackedHandleOp::set_device_name(const char* value) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.eager.SendPackedHandleOp.device_name)
}
inline void SendPackedHandleOp::set_device_name(const char* value, size_t size) {
  
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.eager.SendPackedHandleOp.device_name)
}
inline ::std::string* SendPackedHandleOp::mutable_device_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.eager.SendPackedHandleOp.device_name)
  return device_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendPackedHandleOp::release_device_name() {
  // @@protoc_insertion_point(field_release:tensorflow.eager.SendPackedHandleOp.device_name)
  
  return device_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendPackedHandleOp::set_allocated_device_name(::std::string* device_name) {
  if (device_name != NULL) {
    
  } else {
    
  }
  device_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.SendPackedHandleOp.device_name)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace eager
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto__INCLUDED
