// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/protobuf/config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {

namespace {

const ::google::protobuf::Descriptor* GPUOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GPUOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* GPUOptions_Experimental_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GPUOptions_Experimental_reflection_ = NULL;
const ::google::protobuf::Descriptor* GPUOptions_Experimental_VirtualDevices_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GPUOptions_Experimental_VirtualDevices_reflection_ = NULL;
const ::google::protobuf::Descriptor* OptimizerOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OptimizerOptions_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OptimizerOptions_Level_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OptimizerOptions_GlobalJitLevel_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GraphOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GraphOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThreadPoolOptionProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThreadPoolOptionProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RPCOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RPCOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* SessionMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SessionMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfigProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfigProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfigProto_DeviceCountEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ConfigProto_Experimental_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfigProto_Experimental_reflection_ = NULL;
const ::google::protobuf::Descriptor* RunOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* RunOptions_Experimental_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunOptions_Experimental_reflection_ = NULL;
const ::google::protobuf::Descriptor* RunOptions_Experimental_RunHandlerPoolOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunOptions_Experimental_RunHandlerPoolOptions_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RunOptions_TraceLevel_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RunMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* RunMetadata_FunctionGraphs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunMetadata_FunctionGraphs_reflection_ = NULL;
const ::google::protobuf::Descriptor* TensorConnection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TensorConnection_reflection_ = NULL;
const ::google::protobuf::Descriptor* CallableOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CallableOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* CallableOptions_FeedDevicesEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CallableOptions_FetchDevicesEntry_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto() {
  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow/core/protobuf/config.proto");
  GOOGLE_CHECK(file != NULL);
  GPUOptions_descriptor_ = file->message_type(0);
  static const int GPUOptions_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUOptions, per_process_gpu_memory_fraction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUOptions, allow_growth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUOptions, allocator_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUOptions, deferred_deletion_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUOptions, visible_device_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUOptions, polling_active_delay_usecs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUOptions, polling_inactive_delay_msecs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUOptions, force_gpu_compatible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUOptions, experimental_),
  };
  GPUOptions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GPUOptions_descriptor_,
      GPUOptions::default_instance_,
      GPUOptions_offsets_,
      -1,
      -1,
      -1,
      sizeof(GPUOptions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUOptions, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUOptions, _is_default_instance_));
  GPUOptions_Experimental_descriptor_ = GPUOptions_descriptor_->nested_type(0);
  static const int GPUOptions_Experimental_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUOptions_Experimental, virtual_devices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUOptions_Experimental, use_unified_memory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUOptions_Experimental, num_dev_to_dev_copy_streams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUOptions_Experimental, collective_ring_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUOptions_Experimental, timestamped_allocator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUOptions_Experimental, kernel_tracker_max_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUOptions_Experimental, kernel_tracker_max_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUOptions_Experimental, kernel_tracker_max_pending_),
  };
  GPUOptions_Experimental_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GPUOptions_Experimental_descriptor_,
      GPUOptions_Experimental::default_instance_,
      GPUOptions_Experimental_offsets_,
      -1,
      -1,
      -1,
      sizeof(GPUOptions_Experimental),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUOptions_Experimental, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUOptions_Experimental, _is_default_instance_));
  GPUOptions_Experimental_VirtualDevices_descriptor_ = GPUOptions_Experimental_descriptor_->nested_type(0);
  static const int GPUOptions_Experimental_VirtualDevices_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUOptions_Experimental_VirtualDevices, memory_limit_mb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUOptions_Experimental_VirtualDevices, priority_),
  };
  GPUOptions_Experimental_VirtualDevices_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GPUOptions_Experimental_VirtualDevices_descriptor_,
      GPUOptions_Experimental_VirtualDevices::default_instance_,
      GPUOptions_Experimental_VirtualDevices_offsets_,
      -1,
      -1,
      -1,
      sizeof(GPUOptions_Experimental_VirtualDevices),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUOptions_Experimental_VirtualDevices, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUOptions_Experimental_VirtualDevices, _is_default_instance_));
  OptimizerOptions_descriptor_ = file->message_type(1);
  static const int OptimizerOptions_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizerOptions, do_common_subexpression_elimination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizerOptions, do_constant_folding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizerOptions, max_folded_constant_in_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizerOptions, do_function_inlining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizerOptions, opt_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizerOptions, global_jit_level_),
  };
  OptimizerOptions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OptimizerOptions_descriptor_,
      OptimizerOptions::default_instance_,
      OptimizerOptions_offsets_,
      -1,
      -1,
      -1,
      sizeof(OptimizerOptions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizerOptions, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizerOptions, _is_default_instance_));
  OptimizerOptions_Level_descriptor_ = OptimizerOptions_descriptor_->enum_type(0);
  OptimizerOptions_GlobalJitLevel_descriptor_ = OptimizerOptions_descriptor_->enum_type(1);
  GraphOptions_descriptor_ = file->message_type(2);
  static const int GraphOptions_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphOptions, enable_recv_scheduling_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphOptions, optimizer_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphOptions, build_cost_model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphOptions, build_cost_model_after_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphOptions, infer_shapes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphOptions, place_pruned_graph_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphOptions, enable_bfloat16_sendrecv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphOptions, timeline_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphOptions, rewrite_options_),
  };
  GraphOptions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GraphOptions_descriptor_,
      GraphOptions::default_instance_,
      GraphOptions_offsets_,
      -1,
      -1,
      -1,
      sizeof(GraphOptions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphOptions, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphOptions, _is_default_instance_));
  ThreadPoolOptionProto_descriptor_ = file->message_type(3);
  static const int ThreadPoolOptionProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreadPoolOptionProto, num_threads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreadPoolOptionProto, global_name_),
  };
  ThreadPoolOptionProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ThreadPoolOptionProto_descriptor_,
      ThreadPoolOptionProto::default_instance_,
      ThreadPoolOptionProto_offsets_,
      -1,
      -1,
      -1,
      sizeof(ThreadPoolOptionProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreadPoolOptionProto, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreadPoolOptionProto, _is_default_instance_));
  RPCOptions_descriptor_ = file->message_type(4);
  static const int RPCOptions_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCOptions, use_rpc_for_inprocess_master_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCOptions, compression_algorithm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCOptions, compression_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCOptions, cache_rpc_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCOptions, disable_session_connection_sharing_),
  };
  RPCOptions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RPCOptions_descriptor_,
      RPCOptions::default_instance_,
      RPCOptions_offsets_,
      -1,
      -1,
      -1,
      sizeof(RPCOptions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCOptions, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCOptions, _is_default_instance_));
  SessionMetadata_descriptor_ = file->message_type(5);
  static const int SessionMetadata_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionMetadata, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionMetadata, version_),
  };
  SessionMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SessionMetadata_descriptor_,
      SessionMetadata::default_instance_,
      SessionMetadata_offsets_,
      -1,
      -1,
      -1,
      sizeof(SessionMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionMetadata, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionMetadata, _is_default_instance_));
  ConfigProto_descriptor_ = file->message_type(6);
  static const int ConfigProto_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigProto, device_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigProto, intra_op_parallelism_threads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigProto, inter_op_parallelism_threads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigProto, use_per_session_threads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigProto, session_inter_op_thread_pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigProto, placement_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigProto, device_filters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigProto, gpu_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigProto, allow_soft_placement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigProto, log_device_placement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigProto, graph_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigProto, operation_timeout_in_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigProto, rpc_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigProto, cluster_def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigProto, isolate_session_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigProto, share_cluster_devices_in_session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigProto, experimental_),
  };
  ConfigProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConfigProto_descriptor_,
      ConfigProto::default_instance_,
      ConfigProto_offsets_,
      -1,
      -1,
      -1,
      sizeof(ConfigProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigProto, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigProto, _is_default_instance_));
  ConfigProto_DeviceCountEntry_descriptor_ = ConfigProto_descriptor_->nested_type(0);
  ConfigProto_Experimental_descriptor_ = ConfigProto_descriptor_->nested_type(1);
  static const int ConfigProto_Experimental_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigProto_Experimental, collective_group_leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigProto_Experimental, executor_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigProto_Experimental, recv_buf_max_chunk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigProto_Experimental, use_numa_affinity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigProto_Experimental, collective_deterministic_sequential_execution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigProto_Experimental, collective_nccl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigProto_Experimental, share_session_state_in_clusterspec_propagation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigProto_Experimental, disable_thread_spinning_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigProto_Experimental, share_cluster_devices_in_session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigProto_Experimental, session_metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigProto_Experimental, optimize_for_static_graph_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigProto_Experimental, enable_mlir_bridge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigProto_Experimental, enable_mlir_graph_optimization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigProto_Experimental, disable_output_partition_graphs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigProto_Experimental, xla_fusion_autotuner_thresh_),
  };
  ConfigProto_Experimental_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConfigProto_Experimental_descriptor_,
      ConfigProto_Experimental::default_instance_,
      ConfigProto_Experimental_offsets_,
      -1,
      -1,
      -1,
      sizeof(ConfigProto_Experimental),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigProto_Experimental, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigProto_Experimental, _is_default_instance_));
  RunOptions_descriptor_ = file->message_type(7);
  static const int RunOptions_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunOptions, trace_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunOptions, timeout_in_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunOptions, inter_op_thread_pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunOptions, output_partition_graphs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunOptions, debug_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunOptions, report_tensor_allocations_upon_oom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunOptions, experimental_),
  };
  RunOptions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RunOptions_descriptor_,
      RunOptions::default_instance_,
      RunOptions_offsets_,
      -1,
      -1,
      -1,
      sizeof(RunOptions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunOptions, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunOptions, _is_default_instance_));
  RunOptions_Experimental_descriptor_ = RunOptions_descriptor_->nested_type(0);
  static const int RunOptions_Experimental_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunOptions_Experimental, collective_graph_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunOptions_Experimental, use_run_handler_pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunOptions_Experimental, run_handler_pool_options_),
  };
  RunOptions_Experimental_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RunOptions_Experimental_descriptor_,
      RunOptions_Experimental::default_instance_,
      RunOptions_Experimental_offsets_,
      -1,
      -1,
      -1,
      sizeof(RunOptions_Experimental),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunOptions_Experimental, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunOptions_Experimental, _is_default_instance_));
  RunOptions_Experimental_RunHandlerPoolOptions_descriptor_ = RunOptions_Experimental_descriptor_->nested_type(0);
  static const int RunOptions_Experimental_RunHandlerPoolOptions_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunOptions_Experimental_RunHandlerPoolOptions, priority_),
  };
  RunOptions_Experimental_RunHandlerPoolOptions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RunOptions_Experimental_RunHandlerPoolOptions_descriptor_,
      RunOptions_Experimental_RunHandlerPoolOptions::default_instance_,
      RunOptions_Experimental_RunHandlerPoolOptions_offsets_,
      -1,
      -1,
      -1,
      sizeof(RunOptions_Experimental_RunHandlerPoolOptions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunOptions_Experimental_RunHandlerPoolOptions, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunOptions_Experimental_RunHandlerPoolOptions, _is_default_instance_));
  RunOptions_TraceLevel_descriptor_ = RunOptions_descriptor_->enum_type(0);
  RunMetadata_descriptor_ = file->message_type(8);
  static const int RunMetadata_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunMetadata, step_stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunMetadata, cost_graph_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunMetadata, partition_graphs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunMetadata, function_graphs_),
  };
  RunMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RunMetadata_descriptor_,
      RunMetadata::default_instance_,
      RunMetadata_offsets_,
      -1,
      -1,
      -1,
      sizeof(RunMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunMetadata, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunMetadata, _is_default_instance_));
  RunMetadata_FunctionGraphs_descriptor_ = RunMetadata_descriptor_->nested_type(0);
  static const int RunMetadata_FunctionGraphs_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunMetadata_FunctionGraphs, partition_graphs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunMetadata_FunctionGraphs, pre_optimization_graph_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunMetadata_FunctionGraphs, post_optimization_graph_),
  };
  RunMetadata_FunctionGraphs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RunMetadata_FunctionGraphs_descriptor_,
      RunMetadata_FunctionGraphs::default_instance_,
      RunMetadata_FunctionGraphs_offsets_,
      -1,
      -1,
      -1,
      sizeof(RunMetadata_FunctionGraphs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunMetadata_FunctionGraphs, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunMetadata_FunctionGraphs, _is_default_instance_));
  TensorConnection_descriptor_ = file->message_type(9);
  static const int TensorConnection_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorConnection, from_tensor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorConnection, to_tensor_),
  };
  TensorConnection_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TensorConnection_descriptor_,
      TensorConnection::default_instance_,
      TensorConnection_offsets_,
      -1,
      -1,
      -1,
      sizeof(TensorConnection),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorConnection, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorConnection, _is_default_instance_));
  CallableOptions_descriptor_ = file->message_type(10);
  static const int CallableOptions_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallableOptions, feed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallableOptions, fetch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallableOptions, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallableOptions, run_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallableOptions, tensor_connection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallableOptions, feed_devices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallableOptions, fetch_devices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallableOptions, fetch_skip_sync_),
  };
  CallableOptions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CallableOptions_descriptor_,
      CallableOptions::default_instance_,
      CallableOptions_offsets_,
      -1,
      -1,
      -1,
      sizeof(CallableOptions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallableOptions, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallableOptions, _is_default_instance_));
  CallableOptions_FeedDevicesEntry_descriptor_ = CallableOptions_descriptor_->nested_type(0);
  CallableOptions_FetchDevicesEntry_descriptor_ = CallableOptions_descriptor_->nested_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GPUOptions_descriptor_, &GPUOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GPUOptions_Experimental_descriptor_, &GPUOptions_Experimental::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GPUOptions_Experimental_VirtualDevices_descriptor_, &GPUOptions_Experimental_VirtualDevices::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OptimizerOptions_descriptor_, &OptimizerOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GraphOptions_descriptor_, &GraphOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ThreadPoolOptionProto_descriptor_, &ThreadPoolOptionProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RPCOptions_descriptor_, &RPCOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SessionMetadata_descriptor_, &SessionMetadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConfigProto_descriptor_, &ConfigProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ConfigProto_DeviceCountEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::google::protobuf::int32,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            0>::CreateDefaultInstance(
                ConfigProto_DeviceCountEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConfigProto_Experimental_descriptor_, &ConfigProto_Experimental::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RunOptions_descriptor_, &RunOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RunOptions_Experimental_descriptor_, &RunOptions_Experimental::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RunOptions_Experimental_RunHandlerPoolOptions_descriptor_, &RunOptions_Experimental_RunHandlerPoolOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RunMetadata_descriptor_, &RunMetadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RunMetadata_FunctionGraphs_descriptor_, &RunMetadata_FunctionGraphs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TensorConnection_descriptor_, &TensorConnection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CallableOptions_descriptor_, &CallableOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        CallableOptions_FeedDevicesEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                CallableOptions_FeedDevicesEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        CallableOptions_FetchDevicesEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                CallableOptions_FetchDevicesEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto() {
  delete GPUOptions::default_instance_;
  delete GPUOptions_reflection_;
  delete GPUOptions_Experimental::default_instance_;
  delete GPUOptions_Experimental_reflection_;
  delete GPUOptions_Experimental_VirtualDevices::default_instance_;
  delete GPUOptions_Experimental_VirtualDevices_reflection_;
  delete OptimizerOptions::default_instance_;
  delete OptimizerOptions_reflection_;
  delete GraphOptions::default_instance_;
  delete GraphOptions_reflection_;
  delete ThreadPoolOptionProto::default_instance_;
  delete ThreadPoolOptionProto_reflection_;
  delete RPCOptions::default_instance_;
  delete RPCOptions_reflection_;
  delete SessionMetadata::default_instance_;
  delete SessionMetadata_reflection_;
  delete ConfigProto::default_instance_;
  delete ConfigProto_reflection_;
  delete ConfigProto_Experimental::default_instance_;
  delete ConfigProto_Experimental_reflection_;
  delete RunOptions::default_instance_;
  delete RunOptions_reflection_;
  delete RunOptions_Experimental::default_instance_;
  delete RunOptions_Experimental_reflection_;
  delete RunOptions_Experimental_RunHandlerPoolOptions::default_instance_;
  delete RunOptions_Experimental_RunHandlerPoolOptions_reflection_;
  delete RunMetadata::default_instance_;
  delete RunMetadata_reflection_;
  delete RunMetadata_FunctionGraphs::default_instance_;
  delete RunMetadata_FunctionGraphs_reflection_;
  delete TensorConnection::default_instance_;
  delete TensorConnection_reflection_;
  delete CallableOptions::default_instance_;
  delete CallableOptions_reflection_;
}

void protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto();
  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2fgraph_2eproto();
  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto();
  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fcluster_2eproto();
  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto();
  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n%tensorflow/core/protobuf/config.proto\022"
    "\ntensorflow\032*tensorflow/core/framework/c"
    "ost_graph.proto\032%tensorflow/core/framewo"
    "rk/graph.proto\032*tensorflow/core/framewor"
    "k/step_stats.proto\032&tensorflow/core/prot"
    "obuf/cluster.proto\032$tensorflow/core/prot"
    "obuf/debug.proto\032.tensorflow/core/protob"
    "uf/rewriter_config.proto\"\311\005\n\nGPUOptions\022"
    "\'\n\037per_process_gpu_memory_fraction\030\001 \001(\001"
    "\022\024\n\014allow_growth\030\004 \001(\010\022\026\n\016allocator_type"
    "\030\002 \001(\t\022\037\n\027deferred_deletion_bytes\030\003 \001(\003\022"
    "\033\n\023visible_device_list\030\005 \001(\t\022\"\n\032polling_"
    "active_delay_usecs\030\006 \001(\005\022$\n\034polling_inac"
    "tive_delay_msecs\030\007 \001(\005\022\034\n\024force_gpu_comp"
    "atible\030\010 \001(\010\0229\n\014experimental\030\t \001(\0132#.ten"
    "sorflow.GPUOptions.Experimental\032\202\003\n\014Expe"
    "rimental\022K\n\017virtual_devices\030\001 \003(\01322.tens"
    "orflow.GPUOptions.Experimental.VirtualDe"
    "vices\022\032\n\022use_unified_memory\030\002 \001(\010\022#\n\033num"
    "_dev_to_dev_copy_streams\030\003 \001(\005\022\035\n\025collec"
    "tive_ring_order\030\004 \001(\t\022\035\n\025timestamped_all"
    "ocator\030\005 \001(\010\022#\n\033kernel_tracker_max_inter"
    "val\030\007 \001(\005\022 \n\030kernel_tracker_max_bytes\030\010 "
    "\001(\005\022\"\n\032kernel_tracker_max_pending\030\t \001(\005\032"
    ";\n\016VirtualDevices\022\027\n\017memory_limit_mb\030\001 \003"
    "(\002\022\020\n\010priority\030\002 \003(\005\"\205\003\n\020OptimizerOption"
    "s\022+\n#do_common_subexpression_elimination"
    "\030\001 \001(\010\022\033\n\023do_constant_folding\030\002 \001(\010\022$\n\034m"
    "ax_folded_constant_in_bytes\030\006 \001(\003\022\034\n\024do_"
    "function_inlining\030\004 \001(\010\0225\n\topt_level\030\003 \001"
    "(\0162\".tensorflow.OptimizerOptions.Level\022E"
    "\n\020global_jit_level\030\005 \001(\0162+.tensorflow.Op"
    "timizerOptions.GlobalJitLevel\" \n\005Level\022\006"
    "\n\002L1\020\000\022\017\n\002L0\020\377\377\377\377\377\377\377\377\377\001\"C\n\016GlobalJitLeve"
    "l\022\013\n\007DEFAULT\020\000\022\020\n\003OFF\020\377\377\377\377\377\377\377\377\377\001\022\010\n\004ON_1"
    "\020\001\022\010\n\004ON_2\020\002\"\356\002\n\014GraphOptions\022\036\n\026enable_"
    "recv_scheduling\030\002 \001(\010\0227\n\021optimizer_optio"
    "ns\030\003 \001(\0132\034.tensorflow.OptimizerOptions\022\030"
    "\n\020build_cost_model\030\004 \001(\003\022\036\n\026build_cost_m"
    "odel_after\030\t \001(\003\022\024\n\014infer_shapes\030\005 \001(\010\022\032"
    "\n\022place_pruned_graph\030\006 \001(\010\022 \n\030enable_bfl"
    "oat16_sendrecv\030\007 \001(\010\022\025\n\rtimeline_step\030\010 "
    "\001(\005\0223\n\017rewrite_options\030\n \001(\0132\032.tensorflo"
    "w.RewriterConfigJ\004\010\001\020\002R%skip_common_sube"
    "xpression_elimination\"A\n\025ThreadPoolOptio"
    "nProto\022\023\n\013num_threads\030\001 \001(\005\022\023\n\013global_na"
    "me\030\002 \001(\t\"\264\001\n\nRPCOptions\022$\n\034use_rpc_for_i"
    "nprocess_master\030\001 \001(\010\022\035\n\025compression_alg"
    "orithm\030\002 \001(\t\022\031\n\021compression_level\030\003 \001(\005\022"
    "\032\n\022cache_rpc_response\030\004 \001(\010\022*\n\"disable_s"
    "ession_connection_sharing\030\005 \001(\010\"0\n\017Sessi"
    "onMetadata\022\014\n\004name\030\001 \001(\t\022\017\n\007version\030\002 \001("
    "\003\"\310\n\n\013ConfigProto\022>\n\014device_count\030\001 \003(\0132"
    "(.tensorflow.ConfigProto.DeviceCountEntr"
    "y\022$\n\034intra_op_parallelism_threads\030\002 \001(\005\022"
    "$\n\034inter_op_parallelism_threads\030\005 \001(\005\022\037\n"
    "\027use_per_session_threads\030\t \001(\010\022G\n\034sessio"
    "n_inter_op_thread_pool\030\014 \003(\0132!.tensorflo"
    "w.ThreadPoolOptionProto\022\030\n\020placement_per"
    "iod\030\003 \001(\005\022\026\n\016device_filters\030\004 \003(\t\022+\n\013gpu"
    "_options\030\006 \001(\0132\026.tensorflow.GPUOptions\022\034"
    "\n\024allow_soft_placement\030\007 \001(\010\022\034\n\024log_devi"
    "ce_placement\030\010 \001(\010\022/\n\rgraph_options\030\n \001("
    "\0132\030.tensorflow.GraphOptions\022\037\n\027operation"
    "_timeout_in_ms\030\013 \001(\003\022+\n\013rpc_options\030\r \001("
    "\0132\026.tensorflow.RPCOptions\022+\n\013cluster_def"
    "\030\016 \001(\0132\026.tensorflow.ClusterDef\022\035\n\025isolat"
    "e_session_state\030\017 \001(\010\022(\n share_cluster_d"
    "evices_in_session\030\021 \001(\010\022:\n\014experimental\030"
    "\020 \001(\0132$.tensorflow.ConfigProto.Experimen"
    "tal\0322\n\020DeviceCountEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005"
    "value\030\002 \001(\005:\0028\001\032\302\004\n\014Experimental\022\037\n\027coll"
    "ective_group_leader\030\001 \001(\t\022\025\n\rexecutor_ty"
    "pe\030\003 \001(\t\022\032\n\022recv_buf_max_chunk\030\004 \001(\005\022\031\n\021"
    "use_numa_affinity\030\005 \001(\010\0225\n-collective_de"
    "terministic_sequential_execution\030\006 \001(\010\022\027"
    "\n\017collective_nccl\030\007 \001(\010\0226\n.share_session"
    "_state_in_clusterspec_propagation\030\010 \001(\010\022"
    "\037\n\027disable_thread_spinning\030\t \001(\010\022(\n shar"
    "e_cluster_devices_in_session\030\n \001(\010\0225\n\020se"
    "ssion_metadata\030\013 \001(\0132\033.tensorflow.Sessio"
    "nMetadata\022!\n\031optimize_for_static_graph\030\014"
    " \001(\010\022\032\n\022enable_mlir_bridge\030\r \001(\010\022&\n\036enab"
    "le_mlir_graph_optimization\030\020 \001(\010\022\'\n\037disa"
    "ble_output_partition_graphs\030\016 \001(\010\022#\n\033xla"
    "_fusion_autotuner_thresh\030\017 \001(\003J\004\010\002\020\003\"\341\004\n"
    "\nRunOptions\0226\n\013trace_level\030\001 \001(\0162!.tenso"
    "rflow.RunOptions.TraceLevel\022\025\n\rtimeout_i"
    "n_ms\030\002 \001(\003\022\034\n\024inter_op_thread_pool\030\003 \001(\005"
    "\022\037\n\027output_partition_graphs\030\005 \001(\010\022/\n\rdeb"
    "ug_options\030\006 \001(\0132\030.tensorflow.DebugOptio"
    "ns\022*\n\"report_tensor_allocations_upon_oom"
    "\030\007 \001(\010\0229\n\014experimental\030\010 \001(\0132#.tensorflo"
    "w.RunOptions.Experimental\032\322\001\n\014Experiment"
    "al\022\034\n\024collective_graph_key\030\001 \001(\003\022\034\n\024use_"
    "run_handler_pool\030\002 \001(\010\022[\n\030run_handler_po"
    "ol_options\030\003 \001(\01329.tensorflow.RunOptions"
    ".Experimental.RunHandlerPoolOptions\032)\n\025R"
    "unHandlerPoolOptions\022\020\n\010priority\030\001 \001(\003\"R"
    "\n\nTraceLevel\022\014\n\010NO_TRACE\020\000\022\022\n\016SOFTWARE_T"
    "RACE\020\001\022\022\n\016HARDWARE_TRACE\020\002\022\016\n\nFULL_TRACE"
    "\020\003J\004\010\004\020\005\"\207\003\n\013RunMetadata\022)\n\nstep_stats\030\001"
    " \001(\0132\025.tensorflow.StepStats\022,\n\ncost_grap"
    "h\030\002 \001(\0132\030.tensorflow.CostGraphDef\022.\n\020par"
    "tition_graphs\030\003 \003(\0132\024.tensorflow.GraphDe"
    "f\022\?\n\017function_graphs\030\004 \003(\0132&.tensorflow."
    "RunMetadata.FunctionGraphs\032\255\001\n\016FunctionG"
    "raphs\022.\n\020partition_graphs\030\001 \003(\0132\024.tensor"
    "flow.GraphDef\0224\n\026pre_optimization_graph\030"
    "\002 \001(\0132\024.tensorflow.GraphDef\0225\n\027post_opti"
    "mization_graph\030\003 \001(\0132\024.tensorflow.GraphD"
    "ef\":\n\020TensorConnection\022\023\n\013from_tensor\030\001 "
    "\001(\t\022\021\n\tto_tensor\030\002 \001(\t\"\260\003\n\017CallableOptio"
    "ns\022\014\n\004feed\030\001 \003(\t\022\r\n\005fetch\030\002 \003(\t\022\016\n\006targe"
    "t\030\003 \003(\t\022+\n\013run_options\030\004 \001(\0132\026.tensorflo"
    "w.RunOptions\0227\n\021tensor_connection\030\005 \003(\0132"
    "\034.tensorflow.TensorConnection\022B\n\014feed_de"
    "vices\030\006 \003(\0132,.tensorflow.CallableOptions"
    ".FeedDevicesEntry\022D\n\rfetch_devices\030\007 \003(\013"
    "2-.tensorflow.CallableOptions.FetchDevic"
    "esEntry\022\027\n\017fetch_skip_sync\030\010 \001(\010\0322\n\020Feed"
    "DevicesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t"
    ":\0028\001\0323\n\021FetchDevicesEntry\022\013\n\003key\030\001 \001(\t\022\r"
    "\n\005value\030\002 \001(\t:\0028\001Bw\n\030org.tensorflow.fram"
    "eworkB\014ConfigProtosP\001ZHgithub.com/tensor"
    "flow/tensorflow/tensorflow/go/core/core_"
    "protos_go_proto\370\001\001b\006proto3", 5066);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/protobuf/config.proto", &protobuf_RegisterTypes);
  GPUOptions::default_instance_ = new GPUOptions();
  GPUOptions_Experimental::default_instance_ = new GPUOptions_Experimental();
  GPUOptions_Experimental_VirtualDevices::default_instance_ = new GPUOptions_Experimental_VirtualDevices();
  OptimizerOptions::default_instance_ = new OptimizerOptions();
  GraphOptions::default_instance_ = new GraphOptions();
  ThreadPoolOptionProto::default_instance_ = new ThreadPoolOptionProto();
  RPCOptions::default_instance_ = new RPCOptions();
  SessionMetadata::default_instance_ = new SessionMetadata();
  ConfigProto::default_instance_ = new ConfigProto();
  ConfigProto_Experimental::default_instance_ = new ConfigProto_Experimental();
  RunOptions::default_instance_ = new RunOptions();
  RunOptions_Experimental::default_instance_ = new RunOptions_Experimental();
  RunOptions_Experimental_RunHandlerPoolOptions::default_instance_ = new RunOptions_Experimental_RunHandlerPoolOptions();
  RunMetadata::default_instance_ = new RunMetadata();
  RunMetadata_FunctionGraphs::default_instance_ = new RunMetadata_FunctionGraphs();
  TensorConnection::default_instance_ = new TensorConnection();
  CallableOptions::default_instance_ = new CallableOptions();
  GPUOptions::default_instance_->InitAsDefaultInstance();
  GPUOptions_Experimental::default_instance_->InitAsDefaultInstance();
  GPUOptions_Experimental_VirtualDevices::default_instance_->InitAsDefaultInstance();
  OptimizerOptions::default_instance_->InitAsDefaultInstance();
  GraphOptions::default_instance_->InitAsDefaultInstance();
  ThreadPoolOptionProto::default_instance_->InitAsDefaultInstance();
  RPCOptions::default_instance_->InitAsDefaultInstance();
  SessionMetadata::default_instance_->InitAsDefaultInstance();
  ConfigProto::default_instance_->InitAsDefaultInstance();
  ConfigProto_Experimental::default_instance_->InitAsDefaultInstance();
  RunOptions::default_instance_->InitAsDefaultInstance();
  RunOptions_Experimental::default_instance_->InitAsDefaultInstance();
  RunOptions_Experimental_RunHandlerPoolOptions::default_instance_->InitAsDefaultInstance();
  RunMetadata::default_instance_->InitAsDefaultInstance();
  RunMetadata_FunctionGraphs::default_instance_->InitAsDefaultInstance();
  TensorConnection::default_instance_->InitAsDefaultInstance();
  CallableOptions::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto {
  StaticDescriptorInitializer_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto() {
    protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  }
} static_descriptor_initializer_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GPUOptions_Experimental_VirtualDevices::kMemoryLimitMbFieldNumber;
const int GPUOptions_Experimental_VirtualDevices::kPriorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GPUOptions_Experimental_VirtualDevices::GPUOptions_Experimental_VirtualDevices()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GPUOptions.Experimental.VirtualDevices)
}

GPUOptions_Experimental_VirtualDevices::GPUOptions_Experimental_VirtualDevices(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  memory_limit_mb_(arena),
  priority_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GPUOptions.Experimental.VirtualDevices)
}

void GPUOptions_Experimental_VirtualDevices::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GPUOptions_Experimental_VirtualDevices::GPUOptions_Experimental_VirtualDevices(const GPUOptions_Experimental_VirtualDevices& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.GPUOptions.Experimental.VirtualDevices)
}

void GPUOptions_Experimental_VirtualDevices::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

GPUOptions_Experimental_VirtualDevices::~GPUOptions_Experimental_VirtualDevices() {
  // @@protoc_insertion_point(destructor:tensorflow.GPUOptions.Experimental.VirtualDevices)
  SharedDtor();
}

void GPUOptions_Experimental_VirtualDevices::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void GPUOptions_Experimental_VirtualDevices::ArenaDtor(void* object) {
  GPUOptions_Experimental_VirtualDevices* _this = reinterpret_cast< GPUOptions_Experimental_VirtualDevices* >(object);
  (void)_this;
}
void GPUOptions_Experimental_VirtualDevices::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GPUOptions_Experimental_VirtualDevices::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GPUOptions_Experimental_VirtualDevices::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GPUOptions_Experimental_VirtualDevices_descriptor_;
}

const GPUOptions_Experimental_VirtualDevices& GPUOptions_Experimental_VirtualDevices::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  return *default_instance_;
}

GPUOptions_Experimental_VirtualDevices* GPUOptions_Experimental_VirtualDevices::default_instance_ = NULL;

GPUOptions_Experimental_VirtualDevices* GPUOptions_Experimental_VirtualDevices::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GPUOptions_Experimental_VirtualDevices>(arena);
}

void GPUOptions_Experimental_VirtualDevices::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GPUOptions.Experimental.VirtualDevices)
  memory_limit_mb_.Clear();
  priority_.Clear();
}

bool GPUOptions_Experimental_VirtualDevices::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GPUOptions.Experimental.VirtualDevices)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float memory_limit_mb = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_memory_limit_mb())));
        } else if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10, input, this->mutable_memory_limit_mb())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_priority;
        break;
      }

      // repeated int32 priority = 2;
      case 2: {
        if (tag == 18) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_priority())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_priority())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GPUOptions.Experimental.VirtualDevices)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GPUOptions.Experimental.VirtualDevices)
  return false;
#undef DO_
}

void GPUOptions_Experimental_VirtualDevices::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GPUOptions.Experimental.VirtualDevices)
  // repeated float memory_limit_mb = 1;
  if (this->memory_limit_mb_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_memory_limit_mb_cached_byte_size_);
  }
  for (int i = 0; i < this->memory_limit_mb_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->memory_limit_mb(i), output);
  }

  // repeated int32 priority = 2;
  if (this->priority_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_priority_cached_byte_size_);
  }
  for (int i = 0; i < this->priority_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->priority(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.GPUOptions.Experimental.VirtualDevices)
}

::google::protobuf::uint8* GPUOptions_Experimental_VirtualDevices::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GPUOptions.Experimental.VirtualDevices)
  // repeated float memory_limit_mb = 1;
  if (this->memory_limit_mb_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _memory_limit_mb_cached_byte_size_, target);
  }
  for (int i = 0; i < this->memory_limit_mb_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->memory_limit_mb(i), target);
  }

  // repeated int32 priority = 2;
  if (this->priority_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _priority_cached_byte_size_, target);
  }
  for (int i = 0; i < this->priority_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->priority(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GPUOptions.Experimental.VirtualDevices)
  return target;
}

int GPUOptions_Experimental_VirtualDevices::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GPUOptions.Experimental.VirtualDevices)
  int total_size = 0;

  // repeated float memory_limit_mb = 1;
  {
    int data_size = 0;
    data_size = 4 * this->memory_limit_mb_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _memory_limit_mb_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 priority = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->priority_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->priority(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _priority_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GPUOptions_Experimental_VirtualDevices::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GPUOptions.Experimental.VirtualDevices)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GPUOptions_Experimental_VirtualDevices* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GPUOptions_Experimental_VirtualDevices>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GPUOptions.Experimental.VirtualDevices)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GPUOptions.Experimental.VirtualDevices)
    MergeFrom(*source);
  }
}

void GPUOptions_Experimental_VirtualDevices::MergeFrom(const GPUOptions_Experimental_VirtualDevices& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GPUOptions.Experimental.VirtualDevices)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  memory_limit_mb_.MergeFrom(from.memory_limit_mb_);
  priority_.MergeFrom(from.priority_);
}

void GPUOptions_Experimental_VirtualDevices::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GPUOptions.Experimental.VirtualDevices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPUOptions_Experimental_VirtualDevices::CopyFrom(const GPUOptions_Experimental_VirtualDevices& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GPUOptions.Experimental.VirtualDevices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPUOptions_Experimental_VirtualDevices::IsInitialized() const {

  return true;
}

void GPUOptions_Experimental_VirtualDevices::Swap(GPUOptions_Experimental_VirtualDevices* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GPUOptions_Experimental_VirtualDevices temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void GPUOptions_Experimental_VirtualDevices::UnsafeArenaSwap(GPUOptions_Experimental_VirtualDevices* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GPUOptions_Experimental_VirtualDevices::InternalSwap(GPUOptions_Experimental_VirtualDevices* other) {
  memory_limit_mb_.UnsafeArenaSwap(&other->memory_limit_mb_);
  priority_.UnsafeArenaSwap(&other->priority_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GPUOptions_Experimental_VirtualDevices::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GPUOptions_Experimental_VirtualDevices_descriptor_;
  metadata.reflection = GPUOptions_Experimental_VirtualDevices_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GPUOptions_Experimental::kVirtualDevicesFieldNumber;
const int GPUOptions_Experimental::kUseUnifiedMemoryFieldNumber;
const int GPUOptions_Experimental::kNumDevToDevCopyStreamsFieldNumber;
const int GPUOptions_Experimental::kCollectiveRingOrderFieldNumber;
const int GPUOptions_Experimental::kTimestampedAllocatorFieldNumber;
const int GPUOptions_Experimental::kKernelTrackerMaxIntervalFieldNumber;
const int GPUOptions_Experimental::kKernelTrackerMaxBytesFieldNumber;
const int GPUOptions_Experimental::kKernelTrackerMaxPendingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GPUOptions_Experimental::GPUOptions_Experimental()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GPUOptions.Experimental)
}

GPUOptions_Experimental::GPUOptions_Experimental(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  virtual_devices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GPUOptions.Experimental)
}

void GPUOptions_Experimental::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GPUOptions_Experimental::GPUOptions_Experimental(const GPUOptions_Experimental& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.GPUOptions.Experimental)
}

void GPUOptions_Experimental::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  use_unified_memory_ = false;
  num_dev_to_dev_copy_streams_ = 0;
  collective_ring_order_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamped_allocator_ = false;
  kernel_tracker_max_interval_ = 0;
  kernel_tracker_max_bytes_ = 0;
  kernel_tracker_max_pending_ = 0;
}

GPUOptions_Experimental::~GPUOptions_Experimental() {
  // @@protoc_insertion_point(destructor:tensorflow.GPUOptions.Experimental)
  SharedDtor();
}

void GPUOptions_Experimental::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  collective_ring_order_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void GPUOptions_Experimental::ArenaDtor(void* object) {
  GPUOptions_Experimental* _this = reinterpret_cast< GPUOptions_Experimental* >(object);
  (void)_this;
}
void GPUOptions_Experimental::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GPUOptions_Experimental::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GPUOptions_Experimental::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GPUOptions_Experimental_descriptor_;
}

const GPUOptions_Experimental& GPUOptions_Experimental::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  return *default_instance_;
}

GPUOptions_Experimental* GPUOptions_Experimental::default_instance_ = NULL;

GPUOptions_Experimental* GPUOptions_Experimental::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GPUOptions_Experimental>(arena);
}

void GPUOptions_Experimental::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GPUOptions.Experimental)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GPUOptions_Experimental, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GPUOptions_Experimental*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(num_dev_to_dev_copy_streams_, timestamped_allocator_);
  ZR_(kernel_tracker_max_interval_, kernel_tracker_max_pending_);
  collective_ring_order_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());

#undef ZR_HELPER_
#undef ZR_

  virtual_devices_.Clear();
}

bool GPUOptions_Experimental::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GPUOptions.Experimental)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.GPUOptions.Experimental.VirtualDevices virtual_devices = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_virtual_devices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_virtual_devices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_virtual_devices;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_use_unified_memory;
        break;
      }

      // optional bool use_unified_memory = 2;
      case 2: {
        if (tag == 16) {
         parse_use_unified_memory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_unified_memory_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num_dev_to_dev_copy_streams;
        break;
      }

      // optional int32 num_dev_to_dev_copy_streams = 3;
      case 3: {
        if (tag == 24) {
         parse_num_dev_to_dev_copy_streams:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_dev_to_dev_copy_streams_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_collective_ring_order;
        break;
      }

      // optional string collective_ring_order = 4;
      case 4: {
        if (tag == 34) {
         parse_collective_ring_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collective_ring_order()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->collective_ring_order().data(), this->collective_ring_order().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.GPUOptions.Experimental.collective_ring_order"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_timestamped_allocator;
        break;
      }

      // optional bool timestamped_allocator = 5;
      case 5: {
        if (tag == 40) {
         parse_timestamped_allocator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &timestamped_allocator_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_kernel_tracker_max_interval;
        break;
      }

      // optional int32 kernel_tracker_max_interval = 7;
      case 7: {
        if (tag == 56) {
         parse_kernel_tracker_max_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kernel_tracker_max_interval_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_kernel_tracker_max_bytes;
        break;
      }

      // optional int32 kernel_tracker_max_bytes = 8;
      case 8: {
        if (tag == 64) {
         parse_kernel_tracker_max_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kernel_tracker_max_bytes_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_kernel_tracker_max_pending;
        break;
      }

      // optional int32 kernel_tracker_max_pending = 9;
      case 9: {
        if (tag == 72) {
         parse_kernel_tracker_max_pending:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kernel_tracker_max_pending_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GPUOptions.Experimental)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GPUOptions.Experimental)
  return false;
#undef DO_
}

void GPUOptions_Experimental::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GPUOptions.Experimental)
  // repeated .tensorflow.GPUOptions.Experimental.VirtualDevices virtual_devices = 1;
  for (unsigned int i = 0, n = this->virtual_devices_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->virtual_devices(i), output);
  }

  // optional bool use_unified_memory = 2;
  if (this->use_unified_memory() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->use_unified_memory(), output);
  }

  // optional int32 num_dev_to_dev_copy_streams = 3;
  if (this->num_dev_to_dev_copy_streams() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_dev_to_dev_copy_streams(), output);
  }

  // optional string collective_ring_order = 4;
  if (this->collective_ring_order().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collective_ring_order().data(), this->collective_ring_order().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GPUOptions.Experimental.collective_ring_order");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->collective_ring_order(), output);
  }

  // optional bool timestamped_allocator = 5;
  if (this->timestamped_allocator() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->timestamped_allocator(), output);
  }

  // optional int32 kernel_tracker_max_interval = 7;
  if (this->kernel_tracker_max_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->kernel_tracker_max_interval(), output);
  }

  // optional int32 kernel_tracker_max_bytes = 8;
  if (this->kernel_tracker_max_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->kernel_tracker_max_bytes(), output);
  }

  // optional int32 kernel_tracker_max_pending = 9;
  if (this->kernel_tracker_max_pending() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->kernel_tracker_max_pending(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.GPUOptions.Experimental)
}

::google::protobuf::uint8* GPUOptions_Experimental::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GPUOptions.Experimental)
  // repeated .tensorflow.GPUOptions.Experimental.VirtualDevices virtual_devices = 1;
  for (unsigned int i = 0, n = this->virtual_devices_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->virtual_devices(i), false, target);
  }

  // optional bool use_unified_memory = 2;
  if (this->use_unified_memory() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->use_unified_memory(), target);
  }

  // optional int32 num_dev_to_dev_copy_streams = 3;
  if (this->num_dev_to_dev_copy_streams() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_dev_to_dev_copy_streams(), target);
  }

  // optional string collective_ring_order = 4;
  if (this->collective_ring_order().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collective_ring_order().data(), this->collective_ring_order().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GPUOptions.Experimental.collective_ring_order");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->collective_ring_order(), target);
  }

  // optional bool timestamped_allocator = 5;
  if (this->timestamped_allocator() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->timestamped_allocator(), target);
  }

  // optional int32 kernel_tracker_max_interval = 7;
  if (this->kernel_tracker_max_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->kernel_tracker_max_interval(), target);
  }

  // optional int32 kernel_tracker_max_bytes = 8;
  if (this->kernel_tracker_max_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->kernel_tracker_max_bytes(), target);
  }

  // optional int32 kernel_tracker_max_pending = 9;
  if (this->kernel_tracker_max_pending() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->kernel_tracker_max_pending(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GPUOptions.Experimental)
  return target;
}

int GPUOptions_Experimental::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GPUOptions.Experimental)
  int total_size = 0;

  // optional bool use_unified_memory = 2;
  if (this->use_unified_memory() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 num_dev_to_dev_copy_streams = 3;
  if (this->num_dev_to_dev_copy_streams() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_dev_to_dev_copy_streams());
  }

  // optional string collective_ring_order = 4;
  if (this->collective_ring_order().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->collective_ring_order());
  }

  // optional bool timestamped_allocator = 5;
  if (this->timestamped_allocator() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 kernel_tracker_max_interval = 7;
  if (this->kernel_tracker_max_interval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->kernel_tracker_max_interval());
  }

  // optional int32 kernel_tracker_max_bytes = 8;
  if (this->kernel_tracker_max_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->kernel_tracker_max_bytes());
  }

  // optional int32 kernel_tracker_max_pending = 9;
  if (this->kernel_tracker_max_pending() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->kernel_tracker_max_pending());
  }

  // repeated .tensorflow.GPUOptions.Experimental.VirtualDevices virtual_devices = 1;
  total_size += 1 * this->virtual_devices_size();
  for (int i = 0; i < this->virtual_devices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->virtual_devices(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GPUOptions_Experimental::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GPUOptions.Experimental)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GPUOptions_Experimental* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GPUOptions_Experimental>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GPUOptions.Experimental)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GPUOptions.Experimental)
    MergeFrom(*source);
  }
}

void GPUOptions_Experimental::MergeFrom(const GPUOptions_Experimental& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GPUOptions.Experimental)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  virtual_devices_.MergeFrom(from.virtual_devices_);
  if (from.use_unified_memory() != 0) {
    set_use_unified_memory(from.use_unified_memory());
  }
  if (from.num_dev_to_dev_copy_streams() != 0) {
    set_num_dev_to_dev_copy_streams(from.num_dev_to_dev_copy_streams());
  }
  if (from.collective_ring_order().size() > 0) {
    set_collective_ring_order(from.collective_ring_order());
  }
  if (from.timestamped_allocator() != 0) {
    set_timestamped_allocator(from.timestamped_allocator());
  }
  if (from.kernel_tracker_max_interval() != 0) {
    set_kernel_tracker_max_interval(from.kernel_tracker_max_interval());
  }
  if (from.kernel_tracker_max_bytes() != 0) {
    set_kernel_tracker_max_bytes(from.kernel_tracker_max_bytes());
  }
  if (from.kernel_tracker_max_pending() != 0) {
    set_kernel_tracker_max_pending(from.kernel_tracker_max_pending());
  }
}

void GPUOptions_Experimental::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GPUOptions.Experimental)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPUOptions_Experimental::CopyFrom(const GPUOptions_Experimental& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GPUOptions.Experimental)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPUOptions_Experimental::IsInitialized() const {

  return true;
}

void GPUOptions_Experimental::Swap(GPUOptions_Experimental* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GPUOptions_Experimental temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void GPUOptions_Experimental::UnsafeArenaSwap(GPUOptions_Experimental* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GPUOptions_Experimental::InternalSwap(GPUOptions_Experimental* other) {
  virtual_devices_.UnsafeArenaSwap(&other->virtual_devices_);
  std::swap(use_unified_memory_, other->use_unified_memory_);
  std::swap(num_dev_to_dev_copy_streams_, other->num_dev_to_dev_copy_streams_);
  collective_ring_order_.Swap(&other->collective_ring_order_);
  std::swap(timestamped_allocator_, other->timestamped_allocator_);
  std::swap(kernel_tracker_max_interval_, other->kernel_tracker_max_interval_);
  std::swap(kernel_tracker_max_bytes_, other->kernel_tracker_max_bytes_);
  std::swap(kernel_tracker_max_pending_, other->kernel_tracker_max_pending_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GPUOptions_Experimental::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GPUOptions_Experimental_descriptor_;
  metadata.reflection = GPUOptions_Experimental_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

void GPUOptions::_slow_mutable_experimental() {
  experimental_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::GPUOptions_Experimental >(
      GetArenaNoVirtual());
}
::tensorflow::GPUOptions_Experimental* GPUOptions::_slow_release_experimental() {
  if (experimental_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::GPUOptions_Experimental* temp = new ::tensorflow::GPUOptions_Experimental;
    temp->MergeFrom(*experimental_);
    experimental_ = NULL;
    return temp;
  }
}
::tensorflow::GPUOptions_Experimental* GPUOptions::unsafe_arena_release_experimental() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.GPUOptions.experimental)
  
  ::tensorflow::GPUOptions_Experimental* temp = experimental_;
  experimental_ = NULL;
  return temp;
}
void GPUOptions::_slow_set_allocated_experimental(
    ::google::protobuf::Arena* message_arena, ::tensorflow::GPUOptions_Experimental** experimental) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*experimental) == NULL) {
      message_arena->Own(*experimental);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*experimental)) {
      ::tensorflow::GPUOptions_Experimental* new_experimental = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::GPUOptions_Experimental >(
            message_arena);
      new_experimental->CopyFrom(**experimental);
      *experimental = new_experimental;
    }
}
void GPUOptions::unsafe_arena_set_allocated_experimental(
    ::tensorflow::GPUOptions_Experimental* experimental) {
  if (GetArenaNoVirtual() == NULL) {
    delete experimental_;
  }
  experimental_ = experimental;
  if (experimental) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GPUOptions.experimental)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GPUOptions::kPerProcessGpuMemoryFractionFieldNumber;
const int GPUOptions::kAllowGrowthFieldNumber;
const int GPUOptions::kAllocatorTypeFieldNumber;
const int GPUOptions::kDeferredDeletionBytesFieldNumber;
const int GPUOptions::kVisibleDeviceListFieldNumber;
const int GPUOptions::kPollingActiveDelayUsecsFieldNumber;
const int GPUOptions::kPollingInactiveDelayMsecsFieldNumber;
const int GPUOptions::kForceGpuCompatibleFieldNumber;
const int GPUOptions::kExperimentalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GPUOptions::GPUOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GPUOptions)
}

GPUOptions::GPUOptions(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GPUOptions)
}

void GPUOptions::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  experimental_ = const_cast< ::tensorflow::GPUOptions_Experimental*>(&::tensorflow::GPUOptions_Experimental::default_instance());
}

GPUOptions::GPUOptions(const GPUOptions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.GPUOptions)
}

void GPUOptions::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  per_process_gpu_memory_fraction_ = 0;
  allow_growth_ = false;
  allocator_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deferred_deletion_bytes_ = GOOGLE_LONGLONG(0);
  visible_device_list_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  polling_active_delay_usecs_ = 0;
  polling_inactive_delay_msecs_ = 0;
  force_gpu_compatible_ = false;
  experimental_ = NULL;
}

GPUOptions::~GPUOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.GPUOptions)
  SharedDtor();
}

void GPUOptions::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  allocator_type_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  visible_device_list_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
    delete experimental_;
  }
}

void GPUOptions::ArenaDtor(void* object) {
  GPUOptions* _this = reinterpret_cast< GPUOptions* >(object);
  (void)_this;
}
void GPUOptions::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GPUOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GPUOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GPUOptions_descriptor_;
}

const GPUOptions& GPUOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  return *default_instance_;
}

GPUOptions* GPUOptions::default_instance_ = NULL;

GPUOptions* GPUOptions::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GPUOptions>(arena);
}

void GPUOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GPUOptions)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GPUOptions, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GPUOptions*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(allow_growth_, polling_active_delay_usecs_);
  per_process_gpu_memory_fraction_ = 0;
  allocator_type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  deferred_deletion_bytes_ = GOOGLE_LONGLONG(0);
  visible_device_list_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  polling_inactive_delay_msecs_ = 0;
  if (GetArenaNoVirtual() == NULL && experimental_ != NULL) delete experimental_;
  experimental_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool GPUOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GPUOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double per_process_gpu_memory_fraction = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &per_process_gpu_memory_fraction_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_allocator_type;
        break;
      }

      // optional string allocator_type = 2;
      case 2: {
        if (tag == 18) {
         parse_allocator_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_allocator_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->allocator_type().data(), this->allocator_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.GPUOptions.allocator_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_deferred_deletion_bytes;
        break;
      }

      // optional int64 deferred_deletion_bytes = 3;
      case 3: {
        if (tag == 24) {
         parse_deferred_deletion_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &deferred_deletion_bytes_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_allow_growth;
        break;
      }

      // optional bool allow_growth = 4;
      case 4: {
        if (tag == 32) {
         parse_allow_growth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_growth_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_visible_device_list;
        break;
      }

      // optional string visible_device_list = 5;
      case 5: {
        if (tag == 42) {
         parse_visible_device_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_visible_device_list()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->visible_device_list().data(), this->visible_device_list().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.GPUOptions.visible_device_list"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_polling_active_delay_usecs;
        break;
      }

      // optional int32 polling_active_delay_usecs = 6;
      case 6: {
        if (tag == 48) {
         parse_polling_active_delay_usecs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &polling_active_delay_usecs_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_polling_inactive_delay_msecs;
        break;
      }

      // optional int32 polling_inactive_delay_msecs = 7;
      case 7: {
        if (tag == 56) {
         parse_polling_inactive_delay_msecs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &polling_inactive_delay_msecs_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_force_gpu_compatible;
        break;
      }

      // optional bool force_gpu_compatible = 8;
      case 8: {
        if (tag == 64) {
         parse_force_gpu_compatible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_gpu_compatible_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_experimental;
        break;
      }

      // optional .tensorflow.GPUOptions.Experimental experimental = 9;
      case 9: {
        if (tag == 74) {
         parse_experimental:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_experimental()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GPUOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GPUOptions)
  return false;
#undef DO_
}

void GPUOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GPUOptions)
  // optional double per_process_gpu_memory_fraction = 1;
  if (this->per_process_gpu_memory_fraction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->per_process_gpu_memory_fraction(), output);
  }

  // optional string allocator_type = 2;
  if (this->allocator_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->allocator_type().data(), this->allocator_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GPUOptions.allocator_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->allocator_type(), output);
  }

  // optional int64 deferred_deletion_bytes = 3;
  if (this->deferred_deletion_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->deferred_deletion_bytes(), output);
  }

  // optional bool allow_growth = 4;
  if (this->allow_growth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->allow_growth(), output);
  }

  // optional string visible_device_list = 5;
  if (this->visible_device_list().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->visible_device_list().data(), this->visible_device_list().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GPUOptions.visible_device_list");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->visible_device_list(), output);
  }

  // optional int32 polling_active_delay_usecs = 6;
  if (this->polling_active_delay_usecs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->polling_active_delay_usecs(), output);
  }

  // optional int32 polling_inactive_delay_msecs = 7;
  if (this->polling_inactive_delay_msecs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->polling_inactive_delay_msecs(), output);
  }

  // optional bool force_gpu_compatible = 8;
  if (this->force_gpu_compatible() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->force_gpu_compatible(), output);
  }

  // optional .tensorflow.GPUOptions.Experimental experimental = 9;
  if (this->has_experimental()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->experimental_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.GPUOptions)
}

::google::protobuf::uint8* GPUOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GPUOptions)
  // optional double per_process_gpu_memory_fraction = 1;
  if (this->per_process_gpu_memory_fraction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->per_process_gpu_memory_fraction(), target);
  }

  // optional string allocator_type = 2;
  if (this->allocator_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->allocator_type().data(), this->allocator_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GPUOptions.allocator_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->allocator_type(), target);
  }

  // optional int64 deferred_deletion_bytes = 3;
  if (this->deferred_deletion_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->deferred_deletion_bytes(), target);
  }

  // optional bool allow_growth = 4;
  if (this->allow_growth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->allow_growth(), target);
  }

  // optional string visible_device_list = 5;
  if (this->visible_device_list().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->visible_device_list().data(), this->visible_device_list().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GPUOptions.visible_device_list");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->visible_device_list(), target);
  }

  // optional int32 polling_active_delay_usecs = 6;
  if (this->polling_active_delay_usecs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->polling_active_delay_usecs(), target);
  }

  // optional int32 polling_inactive_delay_msecs = 7;
  if (this->polling_inactive_delay_msecs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->polling_inactive_delay_msecs(), target);
  }

  // optional bool force_gpu_compatible = 8;
  if (this->force_gpu_compatible() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->force_gpu_compatible(), target);
  }

  // optional .tensorflow.GPUOptions.Experimental experimental = 9;
  if (this->has_experimental()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->experimental_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GPUOptions)
  return target;
}

int GPUOptions::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GPUOptions)
  int total_size = 0;

  // optional double per_process_gpu_memory_fraction = 1;
  if (this->per_process_gpu_memory_fraction() != 0) {
    total_size += 1 + 8;
  }

  // optional bool allow_growth = 4;
  if (this->allow_growth() != 0) {
    total_size += 1 + 1;
  }

  // optional string allocator_type = 2;
  if (this->allocator_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->allocator_type());
  }

  // optional int64 deferred_deletion_bytes = 3;
  if (this->deferred_deletion_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->deferred_deletion_bytes());
  }

  // optional string visible_device_list = 5;
  if (this->visible_device_list().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->visible_device_list());
  }

  // optional int32 polling_active_delay_usecs = 6;
  if (this->polling_active_delay_usecs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->polling_active_delay_usecs());
  }

  // optional int32 polling_inactive_delay_msecs = 7;
  if (this->polling_inactive_delay_msecs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->polling_inactive_delay_msecs());
  }

  // optional bool force_gpu_compatible = 8;
  if (this->force_gpu_compatible() != 0) {
    total_size += 1 + 1;
  }

  // optional .tensorflow.GPUOptions.Experimental experimental = 9;
  if (this->has_experimental()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->experimental_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GPUOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GPUOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GPUOptions* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GPUOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GPUOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GPUOptions)
    MergeFrom(*source);
  }
}

void GPUOptions::MergeFrom(const GPUOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GPUOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.per_process_gpu_memory_fraction() != 0) {
    set_per_process_gpu_memory_fraction(from.per_process_gpu_memory_fraction());
  }
  if (from.allow_growth() != 0) {
    set_allow_growth(from.allow_growth());
  }
  if (from.allocator_type().size() > 0) {
    set_allocator_type(from.allocator_type());
  }
  if (from.deferred_deletion_bytes() != 0) {
    set_deferred_deletion_bytes(from.deferred_deletion_bytes());
  }
  if (from.visible_device_list().size() > 0) {
    set_visible_device_list(from.visible_device_list());
  }
  if (from.polling_active_delay_usecs() != 0) {
    set_polling_active_delay_usecs(from.polling_active_delay_usecs());
  }
  if (from.polling_inactive_delay_msecs() != 0) {
    set_polling_inactive_delay_msecs(from.polling_inactive_delay_msecs());
  }
  if (from.force_gpu_compatible() != 0) {
    set_force_gpu_compatible(from.force_gpu_compatible());
  }
  if (from.has_experimental()) {
    mutable_experimental()->::tensorflow::GPUOptions_Experimental::MergeFrom(from.experimental());
  }
}

void GPUOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GPUOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPUOptions::CopyFrom(const GPUOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GPUOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPUOptions::IsInitialized() const {

  return true;
}

void GPUOptions::Swap(GPUOptions* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GPUOptions temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void GPUOptions::UnsafeArenaSwap(GPUOptions* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GPUOptions::InternalSwap(GPUOptions* other) {
  std::swap(per_process_gpu_memory_fraction_, other->per_process_gpu_memory_fraction_);
  std::swap(allow_growth_, other->allow_growth_);
  allocator_type_.Swap(&other->allocator_type_);
  std::swap(deferred_deletion_bytes_, other->deferred_deletion_bytes_);
  visible_device_list_.Swap(&other->visible_device_list_);
  std::swap(polling_active_delay_usecs_, other->polling_active_delay_usecs_);
  std::swap(polling_inactive_delay_msecs_, other->polling_inactive_delay_msecs_);
  std::swap(force_gpu_compatible_, other->force_gpu_compatible_);
  std::swap(experimental_, other->experimental_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GPUOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GPUOptions_descriptor_;
  metadata.reflection = GPUOptions_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GPUOptions_Experimental_VirtualDevices

// repeated float memory_limit_mb = 1;
int GPUOptions_Experimental_VirtualDevices::memory_limit_mb_size() const {
  return memory_limit_mb_.size();
}
void GPUOptions_Experimental_VirtualDevices::clear_memory_limit_mb() {
  memory_limit_mb_.Clear();
}
 float GPUOptions_Experimental_VirtualDevices::memory_limit_mb(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.VirtualDevices.memory_limit_mb)
  return memory_limit_mb_.Get(index);
}
 void GPUOptions_Experimental_VirtualDevices::set_memory_limit_mb(int index, float value) {
  memory_limit_mb_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.Experimental.VirtualDevices.memory_limit_mb)
}
 void GPUOptions_Experimental_VirtualDevices::add_memory_limit_mb(float value) {
  memory_limit_mb_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.GPUOptions.Experimental.VirtualDevices.memory_limit_mb)
}
 const ::google::protobuf::RepeatedField< float >&
GPUOptions_Experimental_VirtualDevices::memory_limit_mb() const {
  // @@protoc_insertion_point(field_list:tensorflow.GPUOptions.Experimental.VirtualDevices.memory_limit_mb)
  return memory_limit_mb_;
}
 ::google::protobuf::RepeatedField< float >*
GPUOptions_Experimental_VirtualDevices::mutable_memory_limit_mb() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GPUOptions.Experimental.VirtualDevices.memory_limit_mb)
  return &memory_limit_mb_;
}

// repeated int32 priority = 2;
int GPUOptions_Experimental_VirtualDevices::priority_size() const {
  return priority_.size();
}
void GPUOptions_Experimental_VirtualDevices::clear_priority() {
  priority_.Clear();
}
 ::google::protobuf::int32 GPUOptions_Experimental_VirtualDevices::priority(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.VirtualDevices.priority)
  return priority_.Get(index);
}
 void GPUOptions_Experimental_VirtualDevices::set_priority(int index, ::google::protobuf::int32 value) {
  priority_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.Experimental.VirtualDevices.priority)
}
 void GPUOptions_Experimental_VirtualDevices::add_priority(::google::protobuf::int32 value) {
  priority_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.GPUOptions.Experimental.VirtualDevices.priority)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GPUOptions_Experimental_VirtualDevices::priority() const {
  // @@protoc_insertion_point(field_list:tensorflow.GPUOptions.Experimental.VirtualDevices.priority)
  return priority_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GPUOptions_Experimental_VirtualDevices::mutable_priority() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GPUOptions.Experimental.VirtualDevices.priority)
  return &priority_;
}

// -------------------------------------------------------------------

// GPUOptions_Experimental

// repeated .tensorflow.GPUOptions.Experimental.VirtualDevices virtual_devices = 1;
int GPUOptions_Experimental::virtual_devices_size() const {
  return virtual_devices_.size();
}
void GPUOptions_Experimental::clear_virtual_devices() {
  virtual_devices_.Clear();
}
const ::tensorflow::GPUOptions_Experimental_VirtualDevices& GPUOptions_Experimental::virtual_devices(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.virtual_devices)
  return virtual_devices_.Get(index);
}
::tensorflow::GPUOptions_Experimental_VirtualDevices* GPUOptions_Experimental::mutable_virtual_devices(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.GPUOptions.Experimental.virtual_devices)
  return virtual_devices_.Mutable(index);
}
::tensorflow::GPUOptions_Experimental_VirtualDevices* GPUOptions_Experimental::add_virtual_devices() {
  // @@protoc_insertion_point(field_add:tensorflow.GPUOptions.Experimental.virtual_devices)
  return virtual_devices_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::GPUOptions_Experimental_VirtualDevices >*
GPUOptions_Experimental::mutable_virtual_devices() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GPUOptions.Experimental.virtual_devices)
  return &virtual_devices_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::GPUOptions_Experimental_VirtualDevices >&
GPUOptions_Experimental::virtual_devices() const {
  // @@protoc_insertion_point(field_list:tensorflow.GPUOptions.Experimental.virtual_devices)
  return virtual_devices_;
}

// optional bool use_unified_memory = 2;
void GPUOptions_Experimental::clear_use_unified_memory() {
  use_unified_memory_ = false;
}
 bool GPUOptions_Experimental::use_unified_memory() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.use_unified_memory)
  return use_unified_memory_;
}
 void GPUOptions_Experimental::set_use_unified_memory(bool value) {
  
  use_unified_memory_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.Experimental.use_unified_memory)
}

// optional int32 num_dev_to_dev_copy_streams = 3;
void GPUOptions_Experimental::clear_num_dev_to_dev_copy_streams() {
  num_dev_to_dev_copy_streams_ = 0;
}
 ::google::protobuf::int32 GPUOptions_Experimental::num_dev_to_dev_copy_streams() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.num_dev_to_dev_copy_streams)
  return num_dev_to_dev_copy_streams_;
}
 void GPUOptions_Experimental::set_num_dev_to_dev_copy_streams(::google::protobuf::int32 value) {
  
  num_dev_to_dev_copy_streams_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.Experimental.num_dev_to_dev_copy_streams)
}

// optional string collective_ring_order = 4;
void GPUOptions_Experimental::clear_collective_ring_order() {
  collective_ring_order_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& GPUOptions_Experimental::collective_ring_order() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.collective_ring_order)
  return collective_ring_order_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GPUOptions_Experimental::set_collective_ring_order(const ::std::string& value) {
  
  collective_ring_order_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.Experimental.collective_ring_order)
}
 void GPUOptions_Experimental::set_collective_ring_order(const char* value) {
  
  collective_ring_order_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.GPUOptions.Experimental.collective_ring_order)
}
 void GPUOptions_Experimental::set_collective_ring_order(const char* value,
    size_t size) {
  
  collective_ring_order_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.GPUOptions.Experimental.collective_ring_order)
}
 ::std::string* GPUOptions_Experimental::mutable_collective_ring_order() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.GPUOptions.Experimental.collective_ring_order)
  return collective_ring_order_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* GPUOptions_Experimental::release_collective_ring_order() {
  // @@protoc_insertion_point(field_release:tensorflow.GPUOptions.Experimental.collective_ring_order)
  
  return collective_ring_order_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* GPUOptions_Experimental::unsafe_arena_release_collective_ring_order() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.GPUOptions.Experimental.collective_ring_order)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return collective_ring_order_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void GPUOptions_Experimental::set_allocated_collective_ring_order(::std::string* collective_ring_order) {
  if (collective_ring_order != NULL) {
    
  } else {
    
  }
  collective_ring_order_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collective_ring_order,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GPUOptions.Experimental.collective_ring_order)
}
 void GPUOptions_Experimental::unsafe_arena_set_allocated_collective_ring_order(
    ::std::string* collective_ring_order) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (collective_ring_order != NULL) {
    
  } else {
    
  }
  collective_ring_order_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      collective_ring_order, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GPUOptions.Experimental.collective_ring_order)
}

// optional bool timestamped_allocator = 5;
void GPUOptions_Experimental::clear_timestamped_allocator() {
  timestamped_allocator_ = false;
}
 bool GPUOptions_Experimental::timestamped_allocator() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.timestamped_allocator)
  return timestamped_allocator_;
}
 void GPUOptions_Experimental::set_timestamped_allocator(bool value) {
  
  timestamped_allocator_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.Experimental.timestamped_allocator)
}

// optional int32 kernel_tracker_max_interval = 7;
void GPUOptions_Experimental::clear_kernel_tracker_max_interval() {
  kernel_tracker_max_interval_ = 0;
}
 ::google::protobuf::int32 GPUOptions_Experimental::kernel_tracker_max_interval() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.kernel_tracker_max_interval)
  return kernel_tracker_max_interval_;
}
 void GPUOptions_Experimental::set_kernel_tracker_max_interval(::google::protobuf::int32 value) {
  
  kernel_tracker_max_interval_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.Experimental.kernel_tracker_max_interval)
}

// optional int32 kernel_tracker_max_bytes = 8;
void GPUOptions_Experimental::clear_kernel_tracker_max_bytes() {
  kernel_tracker_max_bytes_ = 0;
}
 ::google::protobuf::int32 GPUOptions_Experimental::kernel_tracker_max_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.kernel_tracker_max_bytes)
  return kernel_tracker_max_bytes_;
}
 void GPUOptions_Experimental::set_kernel_tracker_max_bytes(::google::protobuf::int32 value) {
  
  kernel_tracker_max_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.Experimental.kernel_tracker_max_bytes)
}

// optional int32 kernel_tracker_max_pending = 9;
void GPUOptions_Experimental::clear_kernel_tracker_max_pending() {
  kernel_tracker_max_pending_ = 0;
}
 ::google::protobuf::int32 GPUOptions_Experimental::kernel_tracker_max_pending() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.kernel_tracker_max_pending)
  return kernel_tracker_max_pending_;
}
 void GPUOptions_Experimental::set_kernel_tracker_max_pending(::google::protobuf::int32 value) {
  
  kernel_tracker_max_pending_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.Experimental.kernel_tracker_max_pending)
}

// -------------------------------------------------------------------

// GPUOptions

// optional double per_process_gpu_memory_fraction = 1;
void GPUOptions::clear_per_process_gpu_memory_fraction() {
  per_process_gpu_memory_fraction_ = 0;
}
 double GPUOptions::per_process_gpu_memory_fraction() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.per_process_gpu_memory_fraction)
  return per_process_gpu_memory_fraction_;
}
 void GPUOptions::set_per_process_gpu_memory_fraction(double value) {
  
  per_process_gpu_memory_fraction_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.per_process_gpu_memory_fraction)
}

// optional bool allow_growth = 4;
void GPUOptions::clear_allow_growth() {
  allow_growth_ = false;
}
 bool GPUOptions::allow_growth() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.allow_growth)
  return allow_growth_;
}
 void GPUOptions::set_allow_growth(bool value) {
  
  allow_growth_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.allow_growth)
}

// optional string allocator_type = 2;
void GPUOptions::clear_allocator_type() {
  allocator_type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& GPUOptions::allocator_type() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.allocator_type)
  return allocator_type_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GPUOptions::set_allocator_type(const ::std::string& value) {
  
  allocator_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.allocator_type)
}
 void GPUOptions::set_allocator_type(const char* value) {
  
  allocator_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.GPUOptions.allocator_type)
}
 void GPUOptions::set_allocator_type(const char* value,
    size_t size) {
  
  allocator_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.GPUOptions.allocator_type)
}
 ::std::string* GPUOptions::mutable_allocator_type() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.GPUOptions.allocator_type)
  return allocator_type_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* GPUOptions::release_allocator_type() {
  // @@protoc_insertion_point(field_release:tensorflow.GPUOptions.allocator_type)
  
  return allocator_type_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* GPUOptions::unsafe_arena_release_allocator_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.GPUOptions.allocator_type)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return allocator_type_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void GPUOptions::set_allocated_allocator_type(::std::string* allocator_type) {
  if (allocator_type != NULL) {
    
  } else {
    
  }
  allocator_type_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), allocator_type,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GPUOptions.allocator_type)
}
 void GPUOptions::unsafe_arena_set_allocated_allocator_type(
    ::std::string* allocator_type) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (allocator_type != NULL) {
    
  } else {
    
  }
  allocator_type_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      allocator_type, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GPUOptions.allocator_type)
}

// optional int64 deferred_deletion_bytes = 3;
void GPUOptions::clear_deferred_deletion_bytes() {
  deferred_deletion_bytes_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 GPUOptions::deferred_deletion_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.deferred_deletion_bytes)
  return deferred_deletion_bytes_;
}
 void GPUOptions::set_deferred_deletion_bytes(::google::protobuf::int64 value) {
  
  deferred_deletion_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.deferred_deletion_bytes)
}

// optional string visible_device_list = 5;
void GPUOptions::clear_visible_device_list() {
  visible_device_list_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& GPUOptions::visible_device_list() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.visible_device_list)
  return visible_device_list_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GPUOptions::set_visible_device_list(const ::std::string& value) {
  
  visible_device_list_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.visible_device_list)
}
 void GPUOptions::set_visible_device_list(const char* value) {
  
  visible_device_list_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.GPUOptions.visible_device_list)
}
 void GPUOptions::set_visible_device_list(const char* value,
    size_t size) {
  
  visible_device_list_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.GPUOptions.visible_device_list)
}
 ::std::string* GPUOptions::mutable_visible_device_list() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.GPUOptions.visible_device_list)
  return visible_device_list_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* GPUOptions::release_visible_device_list() {
  // @@protoc_insertion_point(field_release:tensorflow.GPUOptions.visible_device_list)
  
  return visible_device_list_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* GPUOptions::unsafe_arena_release_visible_device_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.GPUOptions.visible_device_list)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return visible_device_list_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void GPUOptions::set_allocated_visible_device_list(::std::string* visible_device_list) {
  if (visible_device_list != NULL) {
    
  } else {
    
  }
  visible_device_list_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), visible_device_list,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GPUOptions.visible_device_list)
}
 void GPUOptions::unsafe_arena_set_allocated_visible_device_list(
    ::std::string* visible_device_list) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (visible_device_list != NULL) {
    
  } else {
    
  }
  visible_device_list_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      visible_device_list, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GPUOptions.visible_device_list)
}

// optional int32 polling_active_delay_usecs = 6;
void GPUOptions::clear_polling_active_delay_usecs() {
  polling_active_delay_usecs_ = 0;
}
 ::google::protobuf::int32 GPUOptions::polling_active_delay_usecs() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.polling_active_delay_usecs)
  return polling_active_delay_usecs_;
}
 void GPUOptions::set_polling_active_delay_usecs(::google::protobuf::int32 value) {
  
  polling_active_delay_usecs_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.polling_active_delay_usecs)
}

// optional int32 polling_inactive_delay_msecs = 7;
void GPUOptions::clear_polling_inactive_delay_msecs() {
  polling_inactive_delay_msecs_ = 0;
}
 ::google::protobuf::int32 GPUOptions::polling_inactive_delay_msecs() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.polling_inactive_delay_msecs)
  return polling_inactive_delay_msecs_;
}
 void GPUOptions::set_polling_inactive_delay_msecs(::google::protobuf::int32 value) {
  
  polling_inactive_delay_msecs_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.polling_inactive_delay_msecs)
}

// optional bool force_gpu_compatible = 8;
void GPUOptions::clear_force_gpu_compatible() {
  force_gpu_compatible_ = false;
}
 bool GPUOptions::force_gpu_compatible() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.force_gpu_compatible)
  return force_gpu_compatible_;
}
 void GPUOptions::set_force_gpu_compatible(bool value) {
  
  force_gpu_compatible_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.force_gpu_compatible)
}

// optional .tensorflow.GPUOptions.Experimental experimental = 9;
bool GPUOptions::has_experimental() const {
  return !_is_default_instance_ && experimental_ != NULL;
}
void GPUOptions::clear_experimental() {
  if (GetArenaNoVirtual() == NULL && experimental_ != NULL) delete experimental_;
  experimental_ = NULL;
}
const ::tensorflow::GPUOptions_Experimental& GPUOptions::experimental() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.experimental)
  return experimental_ != NULL ? *experimental_ : *default_instance_->experimental_;
}
::tensorflow::GPUOptions_Experimental* GPUOptions::mutable_experimental() {
  
  if (experimental_ == NULL) {
    _slow_mutable_experimental();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.GPUOptions.experimental)
  return experimental_;
}
::tensorflow::GPUOptions_Experimental* GPUOptions::release_experimental() {
  // @@protoc_insertion_point(field_release:tensorflow.GPUOptions.experimental)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_experimental();
  } else {
    ::tensorflow::GPUOptions_Experimental* temp = experimental_;
    experimental_ = NULL;
    return temp;
  }
}
 void GPUOptions::set_allocated_experimental(::tensorflow::GPUOptions_Experimental* experimental) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete experimental_;
  }
  if (experimental != NULL) {
    _slow_set_allocated_experimental(message_arena, &experimental);
  }
  experimental_ = experimental;
  if (experimental) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GPUOptions.experimental)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* OptimizerOptions_Level_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OptimizerOptions_Level_descriptor_;
}
bool OptimizerOptions_Level_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OptimizerOptions_Level OptimizerOptions::L1;
const OptimizerOptions_Level OptimizerOptions::L0;
const OptimizerOptions_Level OptimizerOptions::Level_MIN;
const OptimizerOptions_Level OptimizerOptions::Level_MAX;
const int OptimizerOptions::Level_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* OptimizerOptions_GlobalJitLevel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OptimizerOptions_GlobalJitLevel_descriptor_;
}
bool OptimizerOptions_GlobalJitLevel_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OptimizerOptions_GlobalJitLevel OptimizerOptions::DEFAULT;
const OptimizerOptions_GlobalJitLevel OptimizerOptions::OFF;
const OptimizerOptions_GlobalJitLevel OptimizerOptions::ON_1;
const OptimizerOptions_GlobalJitLevel OptimizerOptions::ON_2;
const OptimizerOptions_GlobalJitLevel OptimizerOptions::GlobalJitLevel_MIN;
const OptimizerOptions_GlobalJitLevel OptimizerOptions::GlobalJitLevel_MAX;
const int OptimizerOptions::GlobalJitLevel_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptimizerOptions::kDoCommonSubexpressionEliminationFieldNumber;
const int OptimizerOptions::kDoConstantFoldingFieldNumber;
const int OptimizerOptions::kMaxFoldedConstantInBytesFieldNumber;
const int OptimizerOptions::kDoFunctionInliningFieldNumber;
const int OptimizerOptions::kOptLevelFieldNumber;
const int OptimizerOptions::kGlobalJitLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptimizerOptions::OptimizerOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.OptimizerOptions)
}

OptimizerOptions::OptimizerOptions(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.OptimizerOptions)
}

void OptimizerOptions::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

OptimizerOptions::OptimizerOptions(const OptimizerOptions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.OptimizerOptions)
}

void OptimizerOptions::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  do_common_subexpression_elimination_ = false;
  do_constant_folding_ = false;
  max_folded_constant_in_bytes_ = GOOGLE_LONGLONG(0);
  do_function_inlining_ = false;
  opt_level_ = 0;
  global_jit_level_ = 0;
}

OptimizerOptions::~OptimizerOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.OptimizerOptions)
  SharedDtor();
}

void OptimizerOptions::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void OptimizerOptions::ArenaDtor(void* object) {
  OptimizerOptions* _this = reinterpret_cast< OptimizerOptions* >(object);
  (void)_this;
}
void OptimizerOptions::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void OptimizerOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OptimizerOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OptimizerOptions_descriptor_;
}

const OptimizerOptions& OptimizerOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  return *default_instance_;
}

OptimizerOptions* OptimizerOptions::default_instance_ = NULL;

OptimizerOptions* OptimizerOptions::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<OptimizerOptions>(arena);
}

void OptimizerOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.OptimizerOptions)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(OptimizerOptions, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<OptimizerOptions*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(max_folded_constant_in_bytes_, global_jit_level_);

#undef ZR_HELPER_
#undef ZR_

}

bool OptimizerOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.OptimizerOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool do_common_subexpression_elimination = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &do_common_subexpression_elimination_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_do_constant_folding;
        break;
      }

      // optional bool do_constant_folding = 2;
      case 2: {
        if (tag == 16) {
         parse_do_constant_folding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &do_constant_folding_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_opt_level;
        break;
      }

      // optional .tensorflow.OptimizerOptions.Level opt_level = 3;
      case 3: {
        if (tag == 24) {
         parse_opt_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_opt_level(static_cast< ::tensorflow::OptimizerOptions_Level >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_do_function_inlining;
        break;
      }

      // optional bool do_function_inlining = 4;
      case 4: {
        if (tag == 32) {
         parse_do_function_inlining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &do_function_inlining_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_global_jit_level;
        break;
      }

      // optional .tensorflow.OptimizerOptions.GlobalJitLevel global_jit_level = 5;
      case 5: {
        if (tag == 40) {
         parse_global_jit_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_global_jit_level(static_cast< ::tensorflow::OptimizerOptions_GlobalJitLevel >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_max_folded_constant_in_bytes;
        break;
      }

      // optional int64 max_folded_constant_in_bytes = 6;
      case 6: {
        if (tag == 48) {
         parse_max_folded_constant_in_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_folded_constant_in_bytes_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.OptimizerOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.OptimizerOptions)
  return false;
#undef DO_
}

void OptimizerOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.OptimizerOptions)
  // optional bool do_common_subexpression_elimination = 1;
  if (this->do_common_subexpression_elimination() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->do_common_subexpression_elimination(), output);
  }

  // optional bool do_constant_folding = 2;
  if (this->do_constant_folding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->do_constant_folding(), output);
  }

  // optional .tensorflow.OptimizerOptions.Level opt_level = 3;
  if (this->opt_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->opt_level(), output);
  }

  // optional bool do_function_inlining = 4;
  if (this->do_function_inlining() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->do_function_inlining(), output);
  }

  // optional .tensorflow.OptimizerOptions.GlobalJitLevel global_jit_level = 5;
  if (this->global_jit_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->global_jit_level(), output);
  }

  // optional int64 max_folded_constant_in_bytes = 6;
  if (this->max_folded_constant_in_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->max_folded_constant_in_bytes(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.OptimizerOptions)
}

::google::protobuf::uint8* OptimizerOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.OptimizerOptions)
  // optional bool do_common_subexpression_elimination = 1;
  if (this->do_common_subexpression_elimination() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->do_common_subexpression_elimination(), target);
  }

  // optional bool do_constant_folding = 2;
  if (this->do_constant_folding() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->do_constant_folding(), target);
  }

  // optional .tensorflow.OptimizerOptions.Level opt_level = 3;
  if (this->opt_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->opt_level(), target);
  }

  // optional bool do_function_inlining = 4;
  if (this->do_function_inlining() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->do_function_inlining(), target);
  }

  // optional .tensorflow.OptimizerOptions.GlobalJitLevel global_jit_level = 5;
  if (this->global_jit_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->global_jit_level(), target);
  }

  // optional int64 max_folded_constant_in_bytes = 6;
  if (this->max_folded_constant_in_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->max_folded_constant_in_bytes(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.OptimizerOptions)
  return target;
}

int OptimizerOptions::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.OptimizerOptions)
  int total_size = 0;

  // optional bool do_common_subexpression_elimination = 1;
  if (this->do_common_subexpression_elimination() != 0) {
    total_size += 1 + 1;
  }

  // optional bool do_constant_folding = 2;
  if (this->do_constant_folding() != 0) {
    total_size += 1 + 1;
  }

  // optional int64 max_folded_constant_in_bytes = 6;
  if (this->max_folded_constant_in_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max_folded_constant_in_bytes());
  }

  // optional bool do_function_inlining = 4;
  if (this->do_function_inlining() != 0) {
    total_size += 1 + 1;
  }

  // optional .tensorflow.OptimizerOptions.Level opt_level = 3;
  if (this->opt_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->opt_level());
  }

  // optional .tensorflow.OptimizerOptions.GlobalJitLevel global_jit_level = 5;
  if (this->global_jit_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->global_jit_level());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OptimizerOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.OptimizerOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OptimizerOptions* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OptimizerOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.OptimizerOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.OptimizerOptions)
    MergeFrom(*source);
  }
}

void OptimizerOptions::MergeFrom(const OptimizerOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.OptimizerOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.do_common_subexpression_elimination() != 0) {
    set_do_common_subexpression_elimination(from.do_common_subexpression_elimination());
  }
  if (from.do_constant_folding() != 0) {
    set_do_constant_folding(from.do_constant_folding());
  }
  if (from.max_folded_constant_in_bytes() != 0) {
    set_max_folded_constant_in_bytes(from.max_folded_constant_in_bytes());
  }
  if (from.do_function_inlining() != 0) {
    set_do_function_inlining(from.do_function_inlining());
  }
  if (from.opt_level() != 0) {
    set_opt_level(from.opt_level());
  }
  if (from.global_jit_level() != 0) {
    set_global_jit_level(from.global_jit_level());
  }
}

void OptimizerOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.OptimizerOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptimizerOptions::CopyFrom(const OptimizerOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.OptimizerOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptimizerOptions::IsInitialized() const {

  return true;
}

void OptimizerOptions::Swap(OptimizerOptions* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    OptimizerOptions temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void OptimizerOptions::UnsafeArenaSwap(OptimizerOptions* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void OptimizerOptions::InternalSwap(OptimizerOptions* other) {
  std::swap(do_common_subexpression_elimination_, other->do_common_subexpression_elimination_);
  std::swap(do_constant_folding_, other->do_constant_folding_);
  std::swap(max_folded_constant_in_bytes_, other->max_folded_constant_in_bytes_);
  std::swap(do_function_inlining_, other->do_function_inlining_);
  std::swap(opt_level_, other->opt_level_);
  std::swap(global_jit_level_, other->global_jit_level_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OptimizerOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OptimizerOptions_descriptor_;
  metadata.reflection = OptimizerOptions_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OptimizerOptions

// optional bool do_common_subexpression_elimination = 1;
void OptimizerOptions::clear_do_common_subexpression_elimination() {
  do_common_subexpression_elimination_ = false;
}
 bool OptimizerOptions::do_common_subexpression_elimination() const {
  // @@protoc_insertion_point(field_get:tensorflow.OptimizerOptions.do_common_subexpression_elimination)
  return do_common_subexpression_elimination_;
}
 void OptimizerOptions::set_do_common_subexpression_elimination(bool value) {
  
  do_common_subexpression_elimination_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.OptimizerOptions.do_common_subexpression_elimination)
}

// optional bool do_constant_folding = 2;
void OptimizerOptions::clear_do_constant_folding() {
  do_constant_folding_ = false;
}
 bool OptimizerOptions::do_constant_folding() const {
  // @@protoc_insertion_point(field_get:tensorflow.OptimizerOptions.do_constant_folding)
  return do_constant_folding_;
}
 void OptimizerOptions::set_do_constant_folding(bool value) {
  
  do_constant_folding_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.OptimizerOptions.do_constant_folding)
}

// optional int64 max_folded_constant_in_bytes = 6;
void OptimizerOptions::clear_max_folded_constant_in_bytes() {
  max_folded_constant_in_bytes_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 OptimizerOptions::max_folded_constant_in_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.OptimizerOptions.max_folded_constant_in_bytes)
  return max_folded_constant_in_bytes_;
}
 void OptimizerOptions::set_max_folded_constant_in_bytes(::google::protobuf::int64 value) {
  
  max_folded_constant_in_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.OptimizerOptions.max_folded_constant_in_bytes)
}

// optional bool do_function_inlining = 4;
void OptimizerOptions::clear_do_function_inlining() {
  do_function_inlining_ = false;
}
 bool OptimizerOptions::do_function_inlining() const {
  // @@protoc_insertion_point(field_get:tensorflow.OptimizerOptions.do_function_inlining)
  return do_function_inlining_;
}
 void OptimizerOptions::set_do_function_inlining(bool value) {
  
  do_function_inlining_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.OptimizerOptions.do_function_inlining)
}

// optional .tensorflow.OptimizerOptions.Level opt_level = 3;
void OptimizerOptions::clear_opt_level() {
  opt_level_ = 0;
}
 ::tensorflow::OptimizerOptions_Level OptimizerOptions::opt_level() const {
  // @@protoc_insertion_point(field_get:tensorflow.OptimizerOptions.opt_level)
  return static_cast< ::tensorflow::OptimizerOptions_Level >(opt_level_);
}
 void OptimizerOptions::set_opt_level(::tensorflow::OptimizerOptions_Level value) {
  
  opt_level_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.OptimizerOptions.opt_level)
}

// optional .tensorflow.OptimizerOptions.GlobalJitLevel global_jit_level = 5;
void OptimizerOptions::clear_global_jit_level() {
  global_jit_level_ = 0;
}
 ::tensorflow::OptimizerOptions_GlobalJitLevel OptimizerOptions::global_jit_level() const {
  // @@protoc_insertion_point(field_get:tensorflow.OptimizerOptions.global_jit_level)
  return static_cast< ::tensorflow::OptimizerOptions_GlobalJitLevel >(global_jit_level_);
}
 void OptimizerOptions::set_global_jit_level(::tensorflow::OptimizerOptions_GlobalJitLevel value) {
  
  global_jit_level_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.OptimizerOptions.global_jit_level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void GraphOptions::_slow_mutable_optimizer_options() {
  optimizer_options_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::OptimizerOptions >(
      GetArenaNoVirtual());
}
::tensorflow::OptimizerOptions* GraphOptions::_slow_release_optimizer_options() {
  if (optimizer_options_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::OptimizerOptions* temp = new ::tensorflow::OptimizerOptions;
    temp->MergeFrom(*optimizer_options_);
    optimizer_options_ = NULL;
    return temp;
  }
}
::tensorflow::OptimizerOptions* GraphOptions::unsafe_arena_release_optimizer_options() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.GraphOptions.optimizer_options)
  
  ::tensorflow::OptimizerOptions* temp = optimizer_options_;
  optimizer_options_ = NULL;
  return temp;
}
void GraphOptions::_slow_set_allocated_optimizer_options(
    ::google::protobuf::Arena* message_arena, ::tensorflow::OptimizerOptions** optimizer_options) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*optimizer_options) == NULL) {
      message_arena->Own(*optimizer_options);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*optimizer_options)) {
      ::tensorflow::OptimizerOptions* new_optimizer_options = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::OptimizerOptions >(
            message_arena);
      new_optimizer_options->CopyFrom(**optimizer_options);
      *optimizer_options = new_optimizer_options;
    }
}
void GraphOptions::unsafe_arena_set_allocated_optimizer_options(
    ::tensorflow::OptimizerOptions* optimizer_options) {
  if (GetArenaNoVirtual() == NULL) {
    delete optimizer_options_;
  }
  optimizer_options_ = optimizer_options;
  if (optimizer_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GraphOptions.optimizer_options)
}
void GraphOptions::_slow_mutable_rewrite_options() {
  rewrite_options_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::RewriterConfig >(
      GetArenaNoVirtual());
}
::tensorflow::RewriterConfig* GraphOptions::_slow_release_rewrite_options() {
  if (rewrite_options_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::RewriterConfig* temp = new ::tensorflow::RewriterConfig;
    temp->MergeFrom(*rewrite_options_);
    rewrite_options_ = NULL;
    return temp;
  }
}
::tensorflow::RewriterConfig* GraphOptions::unsafe_arena_release_rewrite_options() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.GraphOptions.rewrite_options)
  
  ::tensorflow::RewriterConfig* temp = rewrite_options_;
  rewrite_options_ = NULL;
  return temp;
}
void GraphOptions::_slow_set_allocated_rewrite_options(
    ::google::protobuf::Arena* message_arena, ::tensorflow::RewriterConfig** rewrite_options) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*rewrite_options) == NULL) {
      message_arena->Own(*rewrite_options);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*rewrite_options)) {
      ::tensorflow::RewriterConfig* new_rewrite_options = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::RewriterConfig >(
            message_arena);
      new_rewrite_options->CopyFrom(**rewrite_options);
      *rewrite_options = new_rewrite_options;
    }
}
void GraphOptions::unsafe_arena_set_allocated_rewrite_options(
    ::tensorflow::RewriterConfig* rewrite_options) {
  if (GetArenaNoVirtual() == NULL) {
    delete rewrite_options_;
  }
  rewrite_options_ = rewrite_options;
  if (rewrite_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GraphOptions.rewrite_options)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GraphOptions::kEnableRecvSchedulingFieldNumber;
const int GraphOptions::kOptimizerOptionsFieldNumber;
const int GraphOptions::kBuildCostModelFieldNumber;
const int GraphOptions::kBuildCostModelAfterFieldNumber;
const int GraphOptions::kInferShapesFieldNumber;
const int GraphOptions::kPlacePrunedGraphFieldNumber;
const int GraphOptions::kEnableBfloat16SendrecvFieldNumber;
const int GraphOptions::kTimelineStepFieldNumber;
const int GraphOptions::kRewriteOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GraphOptions::GraphOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GraphOptions)
}

GraphOptions::GraphOptions(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphOptions)
}

void GraphOptions::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  optimizer_options_ = const_cast< ::tensorflow::OptimizerOptions*>(&::tensorflow::OptimizerOptions::default_instance());
  rewrite_options_ = const_cast< ::tensorflow::RewriterConfig*>(&::tensorflow::RewriterConfig::default_instance());
}

GraphOptions::GraphOptions(const GraphOptions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphOptions)
}

void GraphOptions::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  enable_recv_scheduling_ = false;
  optimizer_options_ = NULL;
  build_cost_model_ = GOOGLE_LONGLONG(0);
  build_cost_model_after_ = GOOGLE_LONGLONG(0);
  infer_shapes_ = false;
  place_pruned_graph_ = false;
  enable_bfloat16_sendrecv_ = false;
  timeline_step_ = 0;
  rewrite_options_ = NULL;
}

GraphOptions::~GraphOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphOptions)
  SharedDtor();
}

void GraphOptions::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
    delete optimizer_options_;
    delete rewrite_options_;
  }
}

void GraphOptions::ArenaDtor(void* object) {
  GraphOptions* _this = reinterpret_cast< GraphOptions* >(object);
  (void)_this;
}
void GraphOptions::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GraphOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GraphOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GraphOptions_descriptor_;
}

const GraphOptions& GraphOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  return *default_instance_;
}

GraphOptions* GraphOptions::default_instance_ = NULL;

GraphOptions* GraphOptions::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GraphOptions>(arena);
}

void GraphOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphOptions)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GraphOptions, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GraphOptions*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(build_cost_model_, timeline_step_);
  if (GetArenaNoVirtual() == NULL && optimizer_options_ != NULL) delete optimizer_options_;
  optimizer_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && rewrite_options_ != NULL) delete rewrite_options_;
  rewrite_options_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool GraphOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GraphOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enable_recv_scheduling = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_recv_scheduling_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_optimizer_options;
        break;
      }

      // optional .tensorflow.OptimizerOptions optimizer_options = 3;
      case 3: {
        if (tag == 26) {
         parse_optimizer_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_optimizer_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_build_cost_model;
        break;
      }

      // optional int64 build_cost_model = 4;
      case 4: {
        if (tag == 32) {
         parse_build_cost_model:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &build_cost_model_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_infer_shapes;
        break;
      }

      // optional bool infer_shapes = 5;
      case 5: {
        if (tag == 40) {
         parse_infer_shapes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &infer_shapes_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_place_pruned_graph;
        break;
      }

      // optional bool place_pruned_graph = 6;
      case 6: {
        if (tag == 48) {
         parse_place_pruned_graph:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &place_pruned_graph_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_enable_bfloat16_sendrecv;
        break;
      }

      // optional bool enable_bfloat16_sendrecv = 7;
      case 7: {
        if (tag == 56) {
         parse_enable_bfloat16_sendrecv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_bfloat16_sendrecv_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_timeline_step;
        break;
      }

      // optional int32 timeline_step = 8;
      case 8: {
        if (tag == 64) {
         parse_timeline_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeline_step_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_build_cost_model_after;
        break;
      }

      // optional int64 build_cost_model_after = 9;
      case 9: {
        if (tag == 72) {
         parse_build_cost_model_after:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &build_cost_model_after_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_rewrite_options;
        break;
      }

      // optional .tensorflow.RewriterConfig rewrite_options = 10;
      case 10: {
        if (tag == 82) {
         parse_rewrite_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rewrite_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GraphOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GraphOptions)
  return false;
#undef DO_
}

void GraphOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GraphOptions)
  // optional bool enable_recv_scheduling = 2;
  if (this->enable_recv_scheduling() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enable_recv_scheduling(), output);
  }

  // optional .tensorflow.OptimizerOptions optimizer_options = 3;
  if (this->has_optimizer_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->optimizer_options_, output);
  }

  // optional int64 build_cost_model = 4;
  if (this->build_cost_model() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->build_cost_model(), output);
  }

  // optional bool infer_shapes = 5;
  if (this->infer_shapes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->infer_shapes(), output);
  }

  // optional bool place_pruned_graph = 6;
  if (this->place_pruned_graph() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->place_pruned_graph(), output);
  }

  // optional bool enable_bfloat16_sendrecv = 7;
  if (this->enable_bfloat16_sendrecv() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->enable_bfloat16_sendrecv(), output);
  }

  // optional int32 timeline_step = 8;
  if (this->timeline_step() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->timeline_step(), output);
  }

  // optional int64 build_cost_model_after = 9;
  if (this->build_cost_model_after() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->build_cost_model_after(), output);
  }

  // optional .tensorflow.RewriterConfig rewrite_options = 10;
  if (this->has_rewrite_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->rewrite_options_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.GraphOptions)
}

::google::protobuf::uint8* GraphOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphOptions)
  // optional bool enable_recv_scheduling = 2;
  if (this->enable_recv_scheduling() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enable_recv_scheduling(), target);
  }

  // optional .tensorflow.OptimizerOptions optimizer_options = 3;
  if (this->has_optimizer_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->optimizer_options_, false, target);
  }

  // optional int64 build_cost_model = 4;
  if (this->build_cost_model() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->build_cost_model(), target);
  }

  // optional bool infer_shapes = 5;
  if (this->infer_shapes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->infer_shapes(), target);
  }

  // optional bool place_pruned_graph = 6;
  if (this->place_pruned_graph() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->place_pruned_graph(), target);
  }

  // optional bool enable_bfloat16_sendrecv = 7;
  if (this->enable_bfloat16_sendrecv() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->enable_bfloat16_sendrecv(), target);
  }

  // optional int32 timeline_step = 8;
  if (this->timeline_step() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->timeline_step(), target);
  }

  // optional int64 build_cost_model_after = 9;
  if (this->build_cost_model_after() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->build_cost_model_after(), target);
  }

  // optional .tensorflow.RewriterConfig rewrite_options = 10;
  if (this->has_rewrite_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->rewrite_options_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphOptions)
  return target;
}

int GraphOptions::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphOptions)
  int total_size = 0;

  // optional bool enable_recv_scheduling = 2;
  if (this->enable_recv_scheduling() != 0) {
    total_size += 1 + 1;
  }

  // optional .tensorflow.OptimizerOptions optimizer_options = 3;
  if (this->has_optimizer_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->optimizer_options_);
  }

  // optional int64 build_cost_model = 4;
  if (this->build_cost_model() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->build_cost_model());
  }

  // optional int64 build_cost_model_after = 9;
  if (this->build_cost_model_after() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->build_cost_model_after());
  }

  // optional bool infer_shapes = 5;
  if (this->infer_shapes() != 0) {
    total_size += 1 + 1;
  }

  // optional bool place_pruned_graph = 6;
  if (this->place_pruned_graph() != 0) {
    total_size += 1 + 1;
  }

  // optional bool enable_bfloat16_sendrecv = 7;
  if (this->enable_bfloat16_sendrecv() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 timeline_step = 8;
  if (this->timeline_step() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->timeline_step());
  }

  // optional .tensorflow.RewriterConfig rewrite_options = 10;
  if (this->has_rewrite_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rewrite_options_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GraphOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GraphOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GraphOptions* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GraphOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GraphOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GraphOptions)
    MergeFrom(*source);
  }
}

void GraphOptions::MergeFrom(const GraphOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.enable_recv_scheduling() != 0) {
    set_enable_recv_scheduling(from.enable_recv_scheduling());
  }
  if (from.has_optimizer_options()) {
    mutable_optimizer_options()->::tensorflow::OptimizerOptions::MergeFrom(from.optimizer_options());
  }
  if (from.build_cost_model() != 0) {
    set_build_cost_model(from.build_cost_model());
  }
  if (from.build_cost_model_after() != 0) {
    set_build_cost_model_after(from.build_cost_model_after());
  }
  if (from.infer_shapes() != 0) {
    set_infer_shapes(from.infer_shapes());
  }
  if (from.place_pruned_graph() != 0) {
    set_place_pruned_graph(from.place_pruned_graph());
  }
  if (from.enable_bfloat16_sendrecv() != 0) {
    set_enable_bfloat16_sendrecv(from.enable_bfloat16_sendrecv());
  }
  if (from.timeline_step() != 0) {
    set_timeline_step(from.timeline_step());
  }
  if (from.has_rewrite_options()) {
    mutable_rewrite_options()->::tensorflow::RewriterConfig::MergeFrom(from.rewrite_options());
  }
}

void GraphOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GraphOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphOptions::CopyFrom(const GraphOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphOptions::IsInitialized() const {

  return true;
}

void GraphOptions::Swap(GraphOptions* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GraphOptions temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void GraphOptions::UnsafeArenaSwap(GraphOptions* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GraphOptions::InternalSwap(GraphOptions* other) {
  std::swap(enable_recv_scheduling_, other->enable_recv_scheduling_);
  std::swap(optimizer_options_, other->optimizer_options_);
  std::swap(build_cost_model_, other->build_cost_model_);
  std::swap(build_cost_model_after_, other->build_cost_model_after_);
  std::swap(infer_shapes_, other->infer_shapes_);
  std::swap(place_pruned_graph_, other->place_pruned_graph_);
  std::swap(enable_bfloat16_sendrecv_, other->enable_bfloat16_sendrecv_);
  std::swap(timeline_step_, other->timeline_step_);
  std::swap(rewrite_options_, other->rewrite_options_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GraphOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GraphOptions_descriptor_;
  metadata.reflection = GraphOptions_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GraphOptions

// optional bool enable_recv_scheduling = 2;
void GraphOptions::clear_enable_recv_scheduling() {
  enable_recv_scheduling_ = false;
}
 bool GraphOptions::enable_recv_scheduling() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphOptions.enable_recv_scheduling)
  return enable_recv_scheduling_;
}
 void GraphOptions::set_enable_recv_scheduling(bool value) {
  
  enable_recv_scheduling_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphOptions.enable_recv_scheduling)
}

// optional .tensorflow.OptimizerOptions optimizer_options = 3;
bool GraphOptions::has_optimizer_options() const {
  return !_is_default_instance_ && optimizer_options_ != NULL;
}
void GraphOptions::clear_optimizer_options() {
  if (GetArenaNoVirtual() == NULL && optimizer_options_ != NULL) delete optimizer_options_;
  optimizer_options_ = NULL;
}
const ::tensorflow::OptimizerOptions& GraphOptions::optimizer_options() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphOptions.optimizer_options)
  return optimizer_options_ != NULL ? *optimizer_options_ : *default_instance_->optimizer_options_;
}
::tensorflow::OptimizerOptions* GraphOptions::mutable_optimizer_options() {
  
  if (optimizer_options_ == NULL) {
    _slow_mutable_optimizer_options();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphOptions.optimizer_options)
  return optimizer_options_;
}
::tensorflow::OptimizerOptions* GraphOptions::release_optimizer_options() {
  // @@protoc_insertion_point(field_release:tensorflow.GraphOptions.optimizer_options)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_optimizer_options();
  } else {
    ::tensorflow::OptimizerOptions* temp = optimizer_options_;
    optimizer_options_ = NULL;
    return temp;
  }
}
 void GraphOptions::set_allocated_optimizer_options(::tensorflow::OptimizerOptions* optimizer_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete optimizer_options_;
  }
  if (optimizer_options != NULL) {
    _slow_set_allocated_optimizer_options(message_arena, &optimizer_options);
  }
  optimizer_options_ = optimizer_options;
  if (optimizer_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GraphOptions.optimizer_options)
}

// optional int64 build_cost_model = 4;
void GraphOptions::clear_build_cost_model() {
  build_cost_model_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 GraphOptions::build_cost_model() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphOptions.build_cost_model)
  return build_cost_model_;
}
 void GraphOptions::set_build_cost_model(::google::protobuf::int64 value) {
  
  build_cost_model_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphOptions.build_cost_model)
}

// optional int64 build_cost_model_after = 9;
void GraphOptions::clear_build_cost_model_after() {
  build_cost_model_after_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 GraphOptions::build_cost_model_after() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphOptions.build_cost_model_after)
  return build_cost_model_after_;
}
 void GraphOptions::set_build_cost_model_after(::google::protobuf::int64 value) {
  
  build_cost_model_after_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphOptions.build_cost_model_after)
}

// optional bool infer_shapes = 5;
void GraphOptions::clear_infer_shapes() {
  infer_shapes_ = false;
}
 bool GraphOptions::infer_shapes() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphOptions.infer_shapes)
  return infer_shapes_;
}
 void GraphOptions::set_infer_shapes(bool value) {
  
  infer_shapes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphOptions.infer_shapes)
}

// optional bool place_pruned_graph = 6;
void GraphOptions::clear_place_pruned_graph() {
  place_pruned_graph_ = false;
}
 bool GraphOptions::place_pruned_graph() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphOptions.place_pruned_graph)
  return place_pruned_graph_;
}
 void GraphOptions::set_place_pruned_graph(bool value) {
  
  place_pruned_graph_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphOptions.place_pruned_graph)
}

// optional bool enable_bfloat16_sendrecv = 7;
void GraphOptions::clear_enable_bfloat16_sendrecv() {
  enable_bfloat16_sendrecv_ = false;
}
 bool GraphOptions::enable_bfloat16_sendrecv() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphOptions.enable_bfloat16_sendrecv)
  return enable_bfloat16_sendrecv_;
}
 void GraphOptions::set_enable_bfloat16_sendrecv(bool value) {
  
  enable_bfloat16_sendrecv_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphOptions.enable_bfloat16_sendrecv)
}

// optional int32 timeline_step = 8;
void GraphOptions::clear_timeline_step() {
  timeline_step_ = 0;
}
 ::google::protobuf::int32 GraphOptions::timeline_step() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphOptions.timeline_step)
  return timeline_step_;
}
 void GraphOptions::set_timeline_step(::google::protobuf::int32 value) {
  
  timeline_step_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphOptions.timeline_step)
}

// optional .tensorflow.RewriterConfig rewrite_options = 10;
bool GraphOptions::has_rewrite_options() const {
  return !_is_default_instance_ && rewrite_options_ != NULL;
}
void GraphOptions::clear_rewrite_options() {
  if (GetArenaNoVirtual() == NULL && rewrite_options_ != NULL) delete rewrite_options_;
  rewrite_options_ = NULL;
}
const ::tensorflow::RewriterConfig& GraphOptions::rewrite_options() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphOptions.rewrite_options)
  return rewrite_options_ != NULL ? *rewrite_options_ : *default_instance_->rewrite_options_;
}
::tensorflow::RewriterConfig* GraphOptions::mutable_rewrite_options() {
  
  if (rewrite_options_ == NULL) {
    _slow_mutable_rewrite_options();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphOptions.rewrite_options)
  return rewrite_options_;
}
::tensorflow::RewriterConfig* GraphOptions::release_rewrite_options() {
  // @@protoc_insertion_point(field_release:tensorflow.GraphOptions.rewrite_options)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_rewrite_options();
  } else {
    ::tensorflow::RewriterConfig* temp = rewrite_options_;
    rewrite_options_ = NULL;
    return temp;
  }
}
 void GraphOptions::set_allocated_rewrite_options(::tensorflow::RewriterConfig* rewrite_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rewrite_options_;
  }
  if (rewrite_options != NULL) {
    _slow_set_allocated_rewrite_options(message_arena, &rewrite_options);
  }
  rewrite_options_ = rewrite_options;
  if (rewrite_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GraphOptions.rewrite_options)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ThreadPoolOptionProto::kNumThreadsFieldNumber;
const int ThreadPoolOptionProto::kGlobalNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ThreadPoolOptionProto::ThreadPoolOptionProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ThreadPoolOptionProto)
}

ThreadPoolOptionProto::ThreadPoolOptionProto(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ThreadPoolOptionProto)
}

void ThreadPoolOptionProto::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ThreadPoolOptionProto::ThreadPoolOptionProto(const ThreadPoolOptionProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.ThreadPoolOptionProto)
}

void ThreadPoolOptionProto::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  num_threads_ = 0;
  global_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ThreadPoolOptionProto::~ThreadPoolOptionProto() {
  // @@protoc_insertion_point(destructor:tensorflow.ThreadPoolOptionProto)
  SharedDtor();
}

void ThreadPoolOptionProto::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  global_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void ThreadPoolOptionProto::ArenaDtor(void* object) {
  ThreadPoolOptionProto* _this = reinterpret_cast< ThreadPoolOptionProto* >(object);
  (void)_this;
}
void ThreadPoolOptionProto::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ThreadPoolOptionProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThreadPoolOptionProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThreadPoolOptionProto_descriptor_;
}

const ThreadPoolOptionProto& ThreadPoolOptionProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  return *default_instance_;
}

ThreadPoolOptionProto* ThreadPoolOptionProto::default_instance_ = NULL;

ThreadPoolOptionProto* ThreadPoolOptionProto::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ThreadPoolOptionProto>(arena);
}

void ThreadPoolOptionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ThreadPoolOptionProto)
  num_threads_ = 0;
  global_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool ThreadPoolOptionProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.ThreadPoolOptionProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_threads = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_threads_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_global_name;
        break;
      }

      // optional string global_name = 2;
      case 2: {
        if (tag == 18) {
         parse_global_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_global_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->global_name().data(), this->global_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.ThreadPoolOptionProto.global_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.ThreadPoolOptionProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.ThreadPoolOptionProto)
  return false;
#undef DO_
}

void ThreadPoolOptionProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.ThreadPoolOptionProto)
  // optional int32 num_threads = 1;
  if (this->num_threads() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_threads(), output);
  }

  // optional string global_name = 2;
  if (this->global_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->global_name().data(), this->global_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ThreadPoolOptionProto.global_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->global_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.ThreadPoolOptionProto)
}

::google::protobuf::uint8* ThreadPoolOptionProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ThreadPoolOptionProto)
  // optional int32 num_threads = 1;
  if (this->num_threads() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_threads(), target);
  }

  // optional string global_name = 2;
  if (this->global_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->global_name().data(), this->global_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ThreadPoolOptionProto.global_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->global_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ThreadPoolOptionProto)
  return target;
}

int ThreadPoolOptionProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ThreadPoolOptionProto)
  int total_size = 0;

  // optional int32 num_threads = 1;
  if (this->num_threads() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_threads());
  }

  // optional string global_name = 2;
  if (this->global_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->global_name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThreadPoolOptionProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ThreadPoolOptionProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ThreadPoolOptionProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ThreadPoolOptionProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ThreadPoolOptionProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ThreadPoolOptionProto)
    MergeFrom(*source);
  }
}

void ThreadPoolOptionProto::MergeFrom(const ThreadPoolOptionProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ThreadPoolOptionProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.num_threads() != 0) {
    set_num_threads(from.num_threads());
  }
  if (from.global_name().size() > 0) {
    set_global_name(from.global_name());
  }
}

void ThreadPoolOptionProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ThreadPoolOptionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThreadPoolOptionProto::CopyFrom(const ThreadPoolOptionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ThreadPoolOptionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThreadPoolOptionProto::IsInitialized() const {

  return true;
}

void ThreadPoolOptionProto::Swap(ThreadPoolOptionProto* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ThreadPoolOptionProto temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ThreadPoolOptionProto::UnsafeArenaSwap(ThreadPoolOptionProto* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ThreadPoolOptionProto::InternalSwap(ThreadPoolOptionProto* other) {
  std::swap(num_threads_, other->num_threads_);
  global_name_.Swap(&other->global_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ThreadPoolOptionProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThreadPoolOptionProto_descriptor_;
  metadata.reflection = ThreadPoolOptionProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ThreadPoolOptionProto

// optional int32 num_threads = 1;
void ThreadPoolOptionProto::clear_num_threads() {
  num_threads_ = 0;
}
 ::google::protobuf::int32 ThreadPoolOptionProto::num_threads() const {
  // @@protoc_insertion_point(field_get:tensorflow.ThreadPoolOptionProto.num_threads)
  return num_threads_;
}
 void ThreadPoolOptionProto::set_num_threads(::google::protobuf::int32 value) {
  
  num_threads_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ThreadPoolOptionProto.num_threads)
}

// optional string global_name = 2;
void ThreadPoolOptionProto::clear_global_name() {
  global_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& ThreadPoolOptionProto::global_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.ThreadPoolOptionProto.global_name)
  return global_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ThreadPoolOptionProto::set_global_name(const ::std::string& value) {
  
  global_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.ThreadPoolOptionProto.global_name)
}
 void ThreadPoolOptionProto::set_global_name(const char* value) {
  
  global_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.ThreadPoolOptionProto.global_name)
}
 void ThreadPoolOptionProto::set_global_name(const char* value,
    size_t size) {
  
  global_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.ThreadPoolOptionProto.global_name)
}
 ::std::string* ThreadPoolOptionProto::mutable_global_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.ThreadPoolOptionProto.global_name)
  return global_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* ThreadPoolOptionProto::release_global_name() {
  // @@protoc_insertion_point(field_release:tensorflow.ThreadPoolOptionProto.global_name)
  
  return global_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* ThreadPoolOptionProto::unsafe_arena_release_global_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ThreadPoolOptionProto.global_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return global_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void ThreadPoolOptionProto::set_allocated_global_name(::std::string* global_name) {
  if (global_name != NULL) {
    
  } else {
    
  }
  global_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), global_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ThreadPoolOptionProto.global_name)
}
 void ThreadPoolOptionProto::unsafe_arena_set_allocated_global_name(
    ::std::string* global_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (global_name != NULL) {
    
  } else {
    
  }
  global_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      global_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ThreadPoolOptionProto.global_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCOptions::kUseRpcForInprocessMasterFieldNumber;
const int RPCOptions::kCompressionAlgorithmFieldNumber;
const int RPCOptions::kCompressionLevelFieldNumber;
const int RPCOptions::kCacheRpcResponseFieldNumber;
const int RPCOptions::kDisableSessionConnectionSharingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCOptions::RPCOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RPCOptions)
}

RPCOptions::RPCOptions(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RPCOptions)
}

void RPCOptions::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RPCOptions::RPCOptions(const RPCOptions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.RPCOptions)
}

void RPCOptions::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  use_rpc_for_inprocess_master_ = false;
  compression_algorithm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  compression_level_ = 0;
  cache_rpc_response_ = false;
  disable_session_connection_sharing_ = false;
}

RPCOptions::~RPCOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.RPCOptions)
  SharedDtor();
}

void RPCOptions::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  compression_algorithm_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void RPCOptions::ArenaDtor(void* object) {
  RPCOptions* _this = reinterpret_cast< RPCOptions* >(object);
  (void)_this;
}
void RPCOptions::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RPCOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RPCOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RPCOptions_descriptor_;
}

const RPCOptions& RPCOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  return *default_instance_;
}

RPCOptions* RPCOptions::default_instance_ = NULL;

RPCOptions* RPCOptions::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RPCOptions>(arena);
}

void RPCOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RPCOptions)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RPCOptions, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RPCOptions*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(compression_level_, disable_session_connection_sharing_);
  compression_algorithm_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());

#undef ZR_HELPER_
#undef ZR_

}

bool RPCOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RPCOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool use_rpc_for_inprocess_master = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_rpc_for_inprocess_master_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_compression_algorithm;
        break;
      }

      // optional string compression_algorithm = 2;
      case 2: {
        if (tag == 18) {
         parse_compression_algorithm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_compression_algorithm()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->compression_algorithm().data(), this->compression_algorithm().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.RPCOptions.compression_algorithm"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_compression_level;
        break;
      }

      // optional int32 compression_level = 3;
      case 3: {
        if (tag == 24) {
         parse_compression_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &compression_level_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cache_rpc_response;
        break;
      }

      // optional bool cache_rpc_response = 4;
      case 4: {
        if (tag == 32) {
         parse_cache_rpc_response:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cache_rpc_response_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_disable_session_connection_sharing;
        break;
      }

      // optional bool disable_session_connection_sharing = 5;
      case 5: {
        if (tag == 40) {
         parse_disable_session_connection_sharing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_session_connection_sharing_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RPCOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RPCOptions)
  return false;
#undef DO_
}

void RPCOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RPCOptions)
  // optional bool use_rpc_for_inprocess_master = 1;
  if (this->use_rpc_for_inprocess_master() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->use_rpc_for_inprocess_master(), output);
  }

  // optional string compression_algorithm = 2;
  if (this->compression_algorithm().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->compression_algorithm().data(), this->compression_algorithm().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RPCOptions.compression_algorithm");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->compression_algorithm(), output);
  }

  // optional int32 compression_level = 3;
  if (this->compression_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->compression_level(), output);
  }

  // optional bool cache_rpc_response = 4;
  if (this->cache_rpc_response() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->cache_rpc_response(), output);
  }

  // optional bool disable_session_connection_sharing = 5;
  if (this->disable_session_connection_sharing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->disable_session_connection_sharing(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.RPCOptions)
}

::google::protobuf::uint8* RPCOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RPCOptions)
  // optional bool use_rpc_for_inprocess_master = 1;
  if (this->use_rpc_for_inprocess_master() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->use_rpc_for_inprocess_master(), target);
  }

  // optional string compression_algorithm = 2;
  if (this->compression_algorithm().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->compression_algorithm().data(), this->compression_algorithm().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RPCOptions.compression_algorithm");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->compression_algorithm(), target);
  }

  // optional int32 compression_level = 3;
  if (this->compression_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->compression_level(), target);
  }

  // optional bool cache_rpc_response = 4;
  if (this->cache_rpc_response() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->cache_rpc_response(), target);
  }

  // optional bool disable_session_connection_sharing = 5;
  if (this->disable_session_connection_sharing() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->disable_session_connection_sharing(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RPCOptions)
  return target;
}

int RPCOptions::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RPCOptions)
  int total_size = 0;

  // optional bool use_rpc_for_inprocess_master = 1;
  if (this->use_rpc_for_inprocess_master() != 0) {
    total_size += 1 + 1;
  }

  // optional string compression_algorithm = 2;
  if (this->compression_algorithm().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->compression_algorithm());
  }

  // optional int32 compression_level = 3;
  if (this->compression_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->compression_level());
  }

  // optional bool cache_rpc_response = 4;
  if (this->cache_rpc_response() != 0) {
    total_size += 1 + 1;
  }

  // optional bool disable_session_connection_sharing = 5;
  if (this->disable_session_connection_sharing() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RPCOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RPCOptions* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RPCOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RPCOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RPCOptions)
    MergeFrom(*source);
  }
}

void RPCOptions::MergeFrom(const RPCOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RPCOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.use_rpc_for_inprocess_master() != 0) {
    set_use_rpc_for_inprocess_master(from.use_rpc_for_inprocess_master());
  }
  if (from.compression_algorithm().size() > 0) {
    set_compression_algorithm(from.compression_algorithm());
  }
  if (from.compression_level() != 0) {
    set_compression_level(from.compression_level());
  }
  if (from.cache_rpc_response() != 0) {
    set_cache_rpc_response(from.cache_rpc_response());
  }
  if (from.disable_session_connection_sharing() != 0) {
    set_disable_session_connection_sharing(from.disable_session_connection_sharing());
  }
}

void RPCOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RPCOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPCOptions::CopyFrom(const RPCOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RPCOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCOptions::IsInitialized() const {

  return true;
}

void RPCOptions::Swap(RPCOptions* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RPCOptions temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void RPCOptions::UnsafeArenaSwap(RPCOptions* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RPCOptions::InternalSwap(RPCOptions* other) {
  std::swap(use_rpc_for_inprocess_master_, other->use_rpc_for_inprocess_master_);
  compression_algorithm_.Swap(&other->compression_algorithm_);
  std::swap(compression_level_, other->compression_level_);
  std::swap(cache_rpc_response_, other->cache_rpc_response_);
  std::swap(disable_session_connection_sharing_, other->disable_session_connection_sharing_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RPCOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RPCOptions_descriptor_;
  metadata.reflection = RPCOptions_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RPCOptions

// optional bool use_rpc_for_inprocess_master = 1;
void RPCOptions::clear_use_rpc_for_inprocess_master() {
  use_rpc_for_inprocess_master_ = false;
}
 bool RPCOptions::use_rpc_for_inprocess_master() const {
  // @@protoc_insertion_point(field_get:tensorflow.RPCOptions.use_rpc_for_inprocess_master)
  return use_rpc_for_inprocess_master_;
}
 void RPCOptions::set_use_rpc_for_inprocess_master(bool value) {
  
  use_rpc_for_inprocess_master_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RPCOptions.use_rpc_for_inprocess_master)
}

// optional string compression_algorithm = 2;
void RPCOptions::clear_compression_algorithm() {
  compression_algorithm_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& RPCOptions::compression_algorithm() const {
  // @@protoc_insertion_point(field_get:tensorflow.RPCOptions.compression_algorithm)
  return compression_algorithm_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RPCOptions::set_compression_algorithm(const ::std::string& value) {
  
  compression_algorithm_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.RPCOptions.compression_algorithm)
}
 void RPCOptions::set_compression_algorithm(const char* value) {
  
  compression_algorithm_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.RPCOptions.compression_algorithm)
}
 void RPCOptions::set_compression_algorithm(const char* value,
    size_t size) {
  
  compression_algorithm_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.RPCOptions.compression_algorithm)
}
 ::std::string* RPCOptions::mutable_compression_algorithm() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.RPCOptions.compression_algorithm)
  return compression_algorithm_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* RPCOptions::release_compression_algorithm() {
  // @@protoc_insertion_point(field_release:tensorflow.RPCOptions.compression_algorithm)
  
  return compression_algorithm_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* RPCOptions::unsafe_arena_release_compression_algorithm() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RPCOptions.compression_algorithm)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return compression_algorithm_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void RPCOptions::set_allocated_compression_algorithm(::std::string* compression_algorithm) {
  if (compression_algorithm != NULL) {
    
  } else {
    
  }
  compression_algorithm_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), compression_algorithm,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RPCOptions.compression_algorithm)
}
 void RPCOptions::unsafe_arena_set_allocated_compression_algorithm(
    ::std::string* compression_algorithm) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (compression_algorithm != NULL) {
    
  } else {
    
  }
  compression_algorithm_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      compression_algorithm, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RPCOptions.compression_algorithm)
}

// optional int32 compression_level = 3;
void RPCOptions::clear_compression_level() {
  compression_level_ = 0;
}
 ::google::protobuf::int32 RPCOptions::compression_level() const {
  // @@protoc_insertion_point(field_get:tensorflow.RPCOptions.compression_level)
  return compression_level_;
}
 void RPCOptions::set_compression_level(::google::protobuf::int32 value) {
  
  compression_level_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RPCOptions.compression_level)
}

// optional bool cache_rpc_response = 4;
void RPCOptions::clear_cache_rpc_response() {
  cache_rpc_response_ = false;
}
 bool RPCOptions::cache_rpc_response() const {
  // @@protoc_insertion_point(field_get:tensorflow.RPCOptions.cache_rpc_response)
  return cache_rpc_response_;
}
 void RPCOptions::set_cache_rpc_response(bool value) {
  
  cache_rpc_response_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RPCOptions.cache_rpc_response)
}

// optional bool disable_session_connection_sharing = 5;
void RPCOptions::clear_disable_session_connection_sharing() {
  disable_session_connection_sharing_ = false;
}
 bool RPCOptions::disable_session_connection_sharing() const {
  // @@protoc_insertion_point(field_get:tensorflow.RPCOptions.disable_session_connection_sharing)
  return disable_session_connection_sharing_;
}
 void RPCOptions::set_disable_session_connection_sharing(bool value) {
  
  disable_session_connection_sharing_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RPCOptions.disable_session_connection_sharing)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionMetadata::kNameFieldNumber;
const int SessionMetadata::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionMetadata::SessionMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.SessionMetadata)
}

SessionMetadata::SessionMetadata(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.SessionMetadata)
}

void SessionMetadata::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SessionMetadata::SessionMetadata(const SessionMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.SessionMetadata)
}

void SessionMetadata::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = GOOGLE_LONGLONG(0);
}

SessionMetadata::~SessionMetadata() {
  // @@protoc_insertion_point(destructor:tensorflow.SessionMetadata)
  SharedDtor();
}

void SessionMetadata::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void SessionMetadata::ArenaDtor(void* object) {
  SessionMetadata* _this = reinterpret_cast< SessionMetadata* >(object);
  (void)_this;
}
void SessionMetadata::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SessionMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionMetadata_descriptor_;
}

const SessionMetadata& SessionMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  return *default_instance_;
}

SessionMetadata* SessionMetadata::default_instance_ = NULL;

SessionMetadata* SessionMetadata::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SessionMetadata>(arena);
}

void SessionMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.SessionMetadata)
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  version_ = GOOGLE_LONGLONG(0);
}

bool SessionMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.SessionMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.SessionMetadata.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // optional int64 version = 2;
      case 2: {
        if (tag == 16) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.SessionMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.SessionMetadata)
  return false;
#undef DO_
}

void SessionMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.SessionMetadata)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SessionMetadata.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int64 version = 2;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->version(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.SessionMetadata)
}

::google::protobuf::uint8* SessionMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.SessionMetadata)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SessionMetadata.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int64 version = 2;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.SessionMetadata)
  return target;
}

int SessionMetadata::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.SessionMetadata)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional int64 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.SessionMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SessionMetadata* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SessionMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.SessionMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.SessionMetadata)
    MergeFrom(*source);
  }
}

void SessionMetadata::MergeFrom(const SessionMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.SessionMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void SessionMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.SessionMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionMetadata::CopyFrom(const SessionMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.SessionMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionMetadata::IsInitialized() const {

  return true;
}

void SessionMetadata::Swap(SessionMetadata* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SessionMetadata temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void SessionMetadata::UnsafeArenaSwap(SessionMetadata* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SessionMetadata::InternalSwap(SessionMetadata* other) {
  name_.Swap(&other->name_);
  std::swap(version_, other->version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SessionMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SessionMetadata_descriptor_;
  metadata.reflection = SessionMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionMetadata

// optional string name = 1;
void SessionMetadata::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& SessionMetadata::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.SessionMetadata.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SessionMetadata::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.SessionMetadata.name)
}
 void SessionMetadata::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.SessionMetadata.name)
}
 void SessionMetadata::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.SessionMetadata.name)
}
 ::std::string* SessionMetadata::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.SessionMetadata.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* SessionMetadata::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.SessionMetadata.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* SessionMetadata::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.SessionMetadata.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void SessionMetadata::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.SessionMetadata.name)
}
 void SessionMetadata::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.SessionMetadata.name)
}

// optional int64 version = 2;
void SessionMetadata::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 SessionMetadata::version() const {
  // @@protoc_insertion_point(field_get:tensorflow.SessionMetadata.version)
  return version_;
}
 void SessionMetadata::set_version(::google::protobuf::int64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.SessionMetadata.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void ConfigProto_Experimental::_slow_mutable_session_metadata() {
  session_metadata_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::SessionMetadata >(
      GetArenaNoVirtual());
}
::tensorflow::SessionMetadata* ConfigProto_Experimental::_slow_release_session_metadata() {
  if (session_metadata_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::SessionMetadata* temp = new ::tensorflow::SessionMetadata;
    temp->MergeFrom(*session_metadata_);
    session_metadata_ = NULL;
    return temp;
  }
}
::tensorflow::SessionMetadata* ConfigProto_Experimental::unsafe_arena_release_session_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ConfigProto.Experimental.session_metadata)
  
  ::tensorflow::SessionMetadata* temp = session_metadata_;
  session_metadata_ = NULL;
  return temp;
}
void ConfigProto_Experimental::_slow_set_allocated_session_metadata(
    ::google::protobuf::Arena* message_arena, ::tensorflow::SessionMetadata** session_metadata) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*session_metadata) == NULL) {
      message_arena->Own(*session_metadata);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*session_metadata)) {
      ::tensorflow::SessionMetadata* new_session_metadata = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::SessionMetadata >(
            message_arena);
      new_session_metadata->CopyFrom(**session_metadata);
      *session_metadata = new_session_metadata;
    }
}
void ConfigProto_Experimental::unsafe_arena_set_allocated_session_metadata(
    ::tensorflow::SessionMetadata* session_metadata) {
  if (GetArenaNoVirtual() == NULL) {
    delete session_metadata_;
  }
  session_metadata_ = session_metadata;
  if (session_metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ConfigProto.Experimental.session_metadata)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigProto_Experimental::kCollectiveGroupLeaderFieldNumber;
const int ConfigProto_Experimental::kExecutorTypeFieldNumber;
const int ConfigProto_Experimental::kRecvBufMaxChunkFieldNumber;
const int ConfigProto_Experimental::kUseNumaAffinityFieldNumber;
const int ConfigProto_Experimental::kCollectiveDeterministicSequentialExecutionFieldNumber;
const int ConfigProto_Experimental::kCollectiveNcclFieldNumber;
const int ConfigProto_Experimental::kShareSessionStateInClusterspecPropagationFieldNumber;
const int ConfigProto_Experimental::kDisableThreadSpinningFieldNumber;
const int ConfigProto_Experimental::kShareClusterDevicesInSessionFieldNumber;
const int ConfigProto_Experimental::kSessionMetadataFieldNumber;
const int ConfigProto_Experimental::kOptimizeForStaticGraphFieldNumber;
const int ConfigProto_Experimental::kEnableMlirBridgeFieldNumber;
const int ConfigProto_Experimental::kEnableMlirGraphOptimizationFieldNumber;
const int ConfigProto_Experimental::kDisableOutputPartitionGraphsFieldNumber;
const int ConfigProto_Experimental::kXlaFusionAutotunerThreshFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigProto_Experimental::ConfigProto_Experimental()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ConfigProto.Experimental)
}

ConfigProto_Experimental::ConfigProto_Experimental(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ConfigProto.Experimental)
}

void ConfigProto_Experimental::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  session_metadata_ = const_cast< ::tensorflow::SessionMetadata*>(&::tensorflow::SessionMetadata::default_instance());
}

ConfigProto_Experimental::ConfigProto_Experimental(const ConfigProto_Experimental& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.ConfigProto.Experimental)
}

void ConfigProto_Experimental::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  collective_group_leader_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  executor_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recv_buf_max_chunk_ = 0;
  use_numa_affinity_ = false;
  collective_deterministic_sequential_execution_ = false;
  collective_nccl_ = false;
  share_session_state_in_clusterspec_propagation_ = false;
  disable_thread_spinning_ = false;
  share_cluster_devices_in_session_ = false;
  session_metadata_ = NULL;
  optimize_for_static_graph_ = false;
  enable_mlir_bridge_ = false;
  enable_mlir_graph_optimization_ = false;
  disable_output_partition_graphs_ = false;
  xla_fusion_autotuner_thresh_ = GOOGLE_LONGLONG(0);
}

ConfigProto_Experimental::~ConfigProto_Experimental() {
  // @@protoc_insertion_point(destructor:tensorflow.ConfigProto.Experimental)
  SharedDtor();
}

void ConfigProto_Experimental::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  collective_group_leader_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  executor_type_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
    delete session_metadata_;
  }
}

void ConfigProto_Experimental::ArenaDtor(void* object) {
  ConfigProto_Experimental* _this = reinterpret_cast< ConfigProto_Experimental* >(object);
  (void)_this;
}
void ConfigProto_Experimental::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigProto_Experimental::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigProto_Experimental::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigProto_Experimental_descriptor_;
}

const ConfigProto_Experimental& ConfigProto_Experimental::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  return *default_instance_;
}

ConfigProto_Experimental* ConfigProto_Experimental::default_instance_ = NULL;

ConfigProto_Experimental* ConfigProto_Experimental::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ConfigProto_Experimental>(arena);
}

void ConfigProto_Experimental::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ConfigProto.Experimental)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ConfigProto_Experimental, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ConfigProto_Experimental*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(recv_buf_max_chunk_, share_session_state_in_clusterspec_propagation_);
  collective_group_leader_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  executor_type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  disable_thread_spinning_ = false;
  ZR_(share_cluster_devices_in_session_, xla_fusion_autotuner_thresh_);
  if (GetArenaNoVirtual() == NULL && session_metadata_ != NULL) delete session_metadata_;
  session_metadata_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool ConfigProto_Experimental::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.ConfigProto.Experimental)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string collective_group_leader = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collective_group_leader()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->collective_group_leader().data(), this->collective_group_leader().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.ConfigProto.Experimental.collective_group_leader"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_executor_type;
        break;
      }

      // optional string executor_type = 3;
      case 3: {
        if (tag == 26) {
         parse_executor_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_executor_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->executor_type().data(), this->executor_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.ConfigProto.Experimental.executor_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_recv_buf_max_chunk;
        break;
      }

      // optional int32 recv_buf_max_chunk = 4;
      case 4: {
        if (tag == 32) {
         parse_recv_buf_max_chunk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recv_buf_max_chunk_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_use_numa_affinity;
        break;
      }

      // optional bool use_numa_affinity = 5;
      case 5: {
        if (tag == 40) {
         parse_use_numa_affinity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_numa_affinity_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_collective_deterministic_sequential_execution;
        break;
      }

      // optional bool collective_deterministic_sequential_execution = 6;
      case 6: {
        if (tag == 48) {
         parse_collective_deterministic_sequential_execution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &collective_deterministic_sequential_execution_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_collective_nccl;
        break;
      }

      // optional bool collective_nccl = 7;
      case 7: {
        if (tag == 56) {
         parse_collective_nccl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &collective_nccl_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_share_session_state_in_clusterspec_propagation;
        break;
      }

      // optional bool share_session_state_in_clusterspec_propagation = 8;
      case 8: {
        if (tag == 64) {
         parse_share_session_state_in_clusterspec_propagation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &share_session_state_in_clusterspec_propagation_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_disable_thread_spinning;
        break;
      }

      // optional bool disable_thread_spinning = 9;
      case 9: {
        if (tag == 72) {
         parse_disable_thread_spinning:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_thread_spinning_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_share_cluster_devices_in_session;
        break;
      }

      // optional bool share_cluster_devices_in_session = 10;
      case 10: {
        if (tag == 80) {
         parse_share_cluster_devices_in_session:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &share_cluster_devices_in_session_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_session_metadata;
        break;
      }

      // optional .tensorflow.SessionMetadata session_metadata = 11;
      case 11: {
        if (tag == 90) {
         parse_session_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_optimize_for_static_graph;
        break;
      }

      // optional bool optimize_for_static_graph = 12;
      case 12: {
        if (tag == 96) {
         parse_optimize_for_static_graph:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &optimize_for_static_graph_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_enable_mlir_bridge;
        break;
      }

      // optional bool enable_mlir_bridge = 13;
      case 13: {
        if (tag == 104) {
         parse_enable_mlir_bridge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_mlir_bridge_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_disable_output_partition_graphs;
        break;
      }

      // optional bool disable_output_partition_graphs = 14;
      case 14: {
        if (tag == 112) {
         parse_disable_output_partition_graphs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_output_partition_graphs_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_xla_fusion_autotuner_thresh;
        break;
      }

      // optional int64 xla_fusion_autotuner_thresh = 15;
      case 15: {
        if (tag == 120) {
         parse_xla_fusion_autotuner_thresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &xla_fusion_autotuner_thresh_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_enable_mlir_graph_optimization;
        break;
      }

      // optional bool enable_mlir_graph_optimization = 16;
      case 16: {
        if (tag == 128) {
         parse_enable_mlir_graph_optimization:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_mlir_graph_optimization_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.ConfigProto.Experimental)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.ConfigProto.Experimental)
  return false;
#undef DO_
}

void ConfigProto_Experimental::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.ConfigProto.Experimental)
  // optional string collective_group_leader = 1;
  if (this->collective_group_leader().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collective_group_leader().data(), this->collective_group_leader().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ConfigProto.Experimental.collective_group_leader");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->collective_group_leader(), output);
  }

  // optional string executor_type = 3;
  if (this->executor_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->executor_type().data(), this->executor_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ConfigProto.Experimental.executor_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->executor_type(), output);
  }

  // optional int32 recv_buf_max_chunk = 4;
  if (this->recv_buf_max_chunk() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->recv_buf_max_chunk(), output);
  }

  // optional bool use_numa_affinity = 5;
  if (this->use_numa_affinity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->use_numa_affinity(), output);
  }

  // optional bool collective_deterministic_sequential_execution = 6;
  if (this->collective_deterministic_sequential_execution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->collective_deterministic_sequential_execution(), output);
  }

  // optional bool collective_nccl = 7;
  if (this->collective_nccl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->collective_nccl(), output);
  }

  // optional bool share_session_state_in_clusterspec_propagation = 8;
  if (this->share_session_state_in_clusterspec_propagation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->share_session_state_in_clusterspec_propagation(), output);
  }

  // optional bool disable_thread_spinning = 9;
  if (this->disable_thread_spinning() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->disable_thread_spinning(), output);
  }

  // optional bool share_cluster_devices_in_session = 10;
  if (this->share_cluster_devices_in_session() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->share_cluster_devices_in_session(), output);
  }

  // optional .tensorflow.SessionMetadata session_metadata = 11;
  if (this->has_session_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->session_metadata_, output);
  }

  // optional bool optimize_for_static_graph = 12;
  if (this->optimize_for_static_graph() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->optimize_for_static_graph(), output);
  }

  // optional bool enable_mlir_bridge = 13;
  if (this->enable_mlir_bridge() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->enable_mlir_bridge(), output);
  }

  // optional bool disable_output_partition_graphs = 14;
  if (this->disable_output_partition_graphs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->disable_output_partition_graphs(), output);
  }

  // optional int64 xla_fusion_autotuner_thresh = 15;
  if (this->xla_fusion_autotuner_thresh() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->xla_fusion_autotuner_thresh(), output);
  }

  // optional bool enable_mlir_graph_optimization = 16;
  if (this->enable_mlir_graph_optimization() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->enable_mlir_graph_optimization(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.ConfigProto.Experimental)
}

::google::protobuf::uint8* ConfigProto_Experimental::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ConfigProto.Experimental)
  // optional string collective_group_leader = 1;
  if (this->collective_group_leader().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collective_group_leader().data(), this->collective_group_leader().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ConfigProto.Experimental.collective_group_leader");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->collective_group_leader(), target);
  }

  // optional string executor_type = 3;
  if (this->executor_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->executor_type().data(), this->executor_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ConfigProto.Experimental.executor_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->executor_type(), target);
  }

  // optional int32 recv_buf_max_chunk = 4;
  if (this->recv_buf_max_chunk() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->recv_buf_max_chunk(), target);
  }

  // optional bool use_numa_affinity = 5;
  if (this->use_numa_affinity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->use_numa_affinity(), target);
  }

  // optional bool collective_deterministic_sequential_execution = 6;
  if (this->collective_deterministic_sequential_execution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->collective_deterministic_sequential_execution(), target);
  }

  // optional bool collective_nccl = 7;
  if (this->collective_nccl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->collective_nccl(), target);
  }

  // optional bool share_session_state_in_clusterspec_propagation = 8;
  if (this->share_session_state_in_clusterspec_propagation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->share_session_state_in_clusterspec_propagation(), target);
  }

  // optional bool disable_thread_spinning = 9;
  if (this->disable_thread_spinning() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->disable_thread_spinning(), target);
  }

  // optional bool share_cluster_devices_in_session = 10;
  if (this->share_cluster_devices_in_session() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->share_cluster_devices_in_session(), target);
  }

  // optional .tensorflow.SessionMetadata session_metadata = 11;
  if (this->has_session_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->session_metadata_, false, target);
  }

  // optional bool optimize_for_static_graph = 12;
  if (this->optimize_for_static_graph() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->optimize_for_static_graph(), target);
  }

  // optional bool enable_mlir_bridge = 13;
  if (this->enable_mlir_bridge() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->enable_mlir_bridge(), target);
  }

  // optional bool disable_output_partition_graphs = 14;
  if (this->disable_output_partition_graphs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->disable_output_partition_graphs(), target);
  }

  // optional int64 xla_fusion_autotuner_thresh = 15;
  if (this->xla_fusion_autotuner_thresh() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->xla_fusion_autotuner_thresh(), target);
  }

  // optional bool enable_mlir_graph_optimization = 16;
  if (this->enable_mlir_graph_optimization() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->enable_mlir_graph_optimization(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ConfigProto.Experimental)
  return target;
}

int ConfigProto_Experimental::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ConfigProto.Experimental)
  int total_size = 0;

  // optional string collective_group_leader = 1;
  if (this->collective_group_leader().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->collective_group_leader());
  }

  // optional string executor_type = 3;
  if (this->executor_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->executor_type());
  }

  // optional int32 recv_buf_max_chunk = 4;
  if (this->recv_buf_max_chunk() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->recv_buf_max_chunk());
  }

  // optional bool use_numa_affinity = 5;
  if (this->use_numa_affinity() != 0) {
    total_size += 1 + 1;
  }

  // optional bool collective_deterministic_sequential_execution = 6;
  if (this->collective_deterministic_sequential_execution() != 0) {
    total_size += 1 + 1;
  }

  // optional bool collective_nccl = 7;
  if (this->collective_nccl() != 0) {
    total_size += 1 + 1;
  }

  // optional bool share_session_state_in_clusterspec_propagation = 8;
  if (this->share_session_state_in_clusterspec_propagation() != 0) {
    total_size += 1 + 1;
  }

  // optional bool disable_thread_spinning = 9;
  if (this->disable_thread_spinning() != 0) {
    total_size += 1 + 1;
  }

  // optional bool share_cluster_devices_in_session = 10;
  if (this->share_cluster_devices_in_session() != 0) {
    total_size += 1 + 1;
  }

  // optional .tensorflow.SessionMetadata session_metadata = 11;
  if (this->has_session_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->session_metadata_);
  }

  // optional bool optimize_for_static_graph = 12;
  if (this->optimize_for_static_graph() != 0) {
    total_size += 1 + 1;
  }

  // optional bool enable_mlir_bridge = 13;
  if (this->enable_mlir_bridge() != 0) {
    total_size += 1 + 1;
  }

  // optional bool enable_mlir_graph_optimization = 16;
  if (this->enable_mlir_graph_optimization() != 0) {
    total_size += 2 + 1;
  }

  // optional bool disable_output_partition_graphs = 14;
  if (this->disable_output_partition_graphs() != 0) {
    total_size += 1 + 1;
  }

  // optional int64 xla_fusion_autotuner_thresh = 15;
  if (this->xla_fusion_autotuner_thresh() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->xla_fusion_autotuner_thresh());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigProto_Experimental::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ConfigProto.Experimental)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ConfigProto_Experimental* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigProto_Experimental>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ConfigProto.Experimental)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ConfigProto.Experimental)
    MergeFrom(*source);
  }
}

void ConfigProto_Experimental::MergeFrom(const ConfigProto_Experimental& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ConfigProto.Experimental)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.collective_group_leader().size() > 0) {
    set_collective_group_leader(from.collective_group_leader());
  }
  if (from.executor_type().size() > 0) {
    set_executor_type(from.executor_type());
  }
  if (from.recv_buf_max_chunk() != 0) {
    set_recv_buf_max_chunk(from.recv_buf_max_chunk());
  }
  if (from.use_numa_affinity() != 0) {
    set_use_numa_affinity(from.use_numa_affinity());
  }
  if (from.collective_deterministic_sequential_execution() != 0) {
    set_collective_deterministic_sequential_execution(from.collective_deterministic_sequential_execution());
  }
  if (from.collective_nccl() != 0) {
    set_collective_nccl(from.collective_nccl());
  }
  if (from.share_session_state_in_clusterspec_propagation() != 0) {
    set_share_session_state_in_clusterspec_propagation(from.share_session_state_in_clusterspec_propagation());
  }
  if (from.disable_thread_spinning() != 0) {
    set_disable_thread_spinning(from.disable_thread_spinning());
  }
  if (from.share_cluster_devices_in_session() != 0) {
    set_share_cluster_devices_in_session(from.share_cluster_devices_in_session());
  }
  if (from.has_session_metadata()) {
    mutable_session_metadata()->::tensorflow::SessionMetadata::MergeFrom(from.session_metadata());
  }
  if (from.optimize_for_static_graph() != 0) {
    set_optimize_for_static_graph(from.optimize_for_static_graph());
  }
  if (from.enable_mlir_bridge() != 0) {
    set_enable_mlir_bridge(from.enable_mlir_bridge());
  }
  if (from.enable_mlir_graph_optimization() != 0) {
    set_enable_mlir_graph_optimization(from.enable_mlir_graph_optimization());
  }
  if (from.disable_output_partition_graphs() != 0) {
    set_disable_output_partition_graphs(from.disable_output_partition_graphs());
  }
  if (from.xla_fusion_autotuner_thresh() != 0) {
    set_xla_fusion_autotuner_thresh(from.xla_fusion_autotuner_thresh());
  }
}

void ConfigProto_Experimental::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ConfigProto.Experimental)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigProto_Experimental::CopyFrom(const ConfigProto_Experimental& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ConfigProto.Experimental)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigProto_Experimental::IsInitialized() const {

  return true;
}

void ConfigProto_Experimental::Swap(ConfigProto_Experimental* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigProto_Experimental temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ConfigProto_Experimental::UnsafeArenaSwap(ConfigProto_Experimental* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigProto_Experimental::InternalSwap(ConfigProto_Experimental* other) {
  collective_group_leader_.Swap(&other->collective_group_leader_);
  executor_type_.Swap(&other->executor_type_);
  std::swap(recv_buf_max_chunk_, other->recv_buf_max_chunk_);
  std::swap(use_numa_affinity_, other->use_numa_affinity_);
  std::swap(collective_deterministic_sequential_execution_, other->collective_deterministic_sequential_execution_);
  std::swap(collective_nccl_, other->collective_nccl_);
  std::swap(share_session_state_in_clusterspec_propagation_, other->share_session_state_in_clusterspec_propagation_);
  std::swap(disable_thread_spinning_, other->disable_thread_spinning_);
  std::swap(share_cluster_devices_in_session_, other->share_cluster_devices_in_session_);
  std::swap(session_metadata_, other->session_metadata_);
  std::swap(optimize_for_static_graph_, other->optimize_for_static_graph_);
  std::swap(enable_mlir_bridge_, other->enable_mlir_bridge_);
  std::swap(enable_mlir_graph_optimization_, other->enable_mlir_graph_optimization_);
  std::swap(disable_output_partition_graphs_, other->disable_output_partition_graphs_);
  std::swap(xla_fusion_autotuner_thresh_, other->xla_fusion_autotuner_thresh_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConfigProto_Experimental::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfigProto_Experimental_descriptor_;
  metadata.reflection = ConfigProto_Experimental_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

void ConfigProto::_slow_mutable_gpu_options() {
  gpu_options_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::GPUOptions >(
      GetArenaNoVirtual());
}
::tensorflow::GPUOptions* ConfigProto::_slow_release_gpu_options() {
  if (gpu_options_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::GPUOptions* temp = new ::tensorflow::GPUOptions;
    temp->MergeFrom(*gpu_options_);
    gpu_options_ = NULL;
    return temp;
  }
}
::tensorflow::GPUOptions* ConfigProto::unsafe_arena_release_gpu_options() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ConfigProto.gpu_options)
  
  ::tensorflow::GPUOptions* temp = gpu_options_;
  gpu_options_ = NULL;
  return temp;
}
void ConfigProto::_slow_set_allocated_gpu_options(
    ::google::protobuf::Arena* message_arena, ::tensorflow::GPUOptions** gpu_options) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*gpu_options) == NULL) {
      message_arena->Own(*gpu_options);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*gpu_options)) {
      ::tensorflow::GPUOptions* new_gpu_options = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::GPUOptions >(
            message_arena);
      new_gpu_options->CopyFrom(**gpu_options);
      *gpu_options = new_gpu_options;
    }
}
void ConfigProto::unsafe_arena_set_allocated_gpu_options(
    ::tensorflow::GPUOptions* gpu_options) {
  if (GetArenaNoVirtual() == NULL) {
    delete gpu_options_;
  }
  gpu_options_ = gpu_options;
  if (gpu_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ConfigProto.gpu_options)
}
void ConfigProto::_slow_mutable_graph_options() {
  graph_options_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::GraphOptions >(
      GetArenaNoVirtual());
}
::tensorflow::GraphOptions* ConfigProto::_slow_release_graph_options() {
  if (graph_options_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::GraphOptions* temp = new ::tensorflow::GraphOptions;
    temp->MergeFrom(*graph_options_);
    graph_options_ = NULL;
    return temp;
  }
}
::tensorflow::GraphOptions* ConfigProto::unsafe_arena_release_graph_options() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ConfigProto.graph_options)
  
  ::tensorflow::GraphOptions* temp = graph_options_;
  graph_options_ = NULL;
  return temp;
}
void ConfigProto::_slow_set_allocated_graph_options(
    ::google::protobuf::Arena* message_arena, ::tensorflow::GraphOptions** graph_options) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*graph_options) == NULL) {
      message_arena->Own(*graph_options);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*graph_options)) {
      ::tensorflow::GraphOptions* new_graph_options = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::GraphOptions >(
            message_arena);
      new_graph_options->CopyFrom(**graph_options);
      *graph_options = new_graph_options;
    }
}
void ConfigProto::unsafe_arena_set_allocated_graph_options(
    ::tensorflow::GraphOptions* graph_options) {
  if (GetArenaNoVirtual() == NULL) {
    delete graph_options_;
  }
  graph_options_ = graph_options;
  if (graph_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ConfigProto.graph_options)
}
void ConfigProto::_slow_mutable_rpc_options() {
  rpc_options_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::RPCOptions >(
      GetArenaNoVirtual());
}
::tensorflow::RPCOptions* ConfigProto::_slow_release_rpc_options() {
  if (rpc_options_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::RPCOptions* temp = new ::tensorflow::RPCOptions;
    temp->MergeFrom(*rpc_options_);
    rpc_options_ = NULL;
    return temp;
  }
}
::tensorflow::RPCOptions* ConfigProto::unsafe_arena_release_rpc_options() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ConfigProto.rpc_options)
  
  ::tensorflow::RPCOptions* temp = rpc_options_;
  rpc_options_ = NULL;
  return temp;
}
void ConfigProto::_slow_set_allocated_rpc_options(
    ::google::protobuf::Arena* message_arena, ::tensorflow::RPCOptions** rpc_options) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*rpc_options) == NULL) {
      message_arena->Own(*rpc_options);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*rpc_options)) {
      ::tensorflow::RPCOptions* new_rpc_options = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::RPCOptions >(
            message_arena);
      new_rpc_options->CopyFrom(**rpc_options);
      *rpc_options = new_rpc_options;
    }
}
void ConfigProto::unsafe_arena_set_allocated_rpc_options(
    ::tensorflow::RPCOptions* rpc_options) {
  if (GetArenaNoVirtual() == NULL) {
    delete rpc_options_;
  }
  rpc_options_ = rpc_options;
  if (rpc_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ConfigProto.rpc_options)
}
void ConfigProto::_slow_mutable_cluster_def() {
  cluster_def_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::ClusterDef >(
      GetArenaNoVirtual());
}
::tensorflow::ClusterDef* ConfigProto::_slow_release_cluster_def() {
  if (cluster_def_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::ClusterDef* temp = new ::tensorflow::ClusterDef;
    temp->MergeFrom(*cluster_def_);
    cluster_def_ = NULL;
    return temp;
  }
}
::tensorflow::ClusterDef* ConfigProto::unsafe_arena_release_cluster_def() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ConfigProto.cluster_def)
  
  ::tensorflow::ClusterDef* temp = cluster_def_;
  cluster_def_ = NULL;
  return temp;
}
void ConfigProto::_slow_set_allocated_cluster_def(
    ::google::protobuf::Arena* message_arena, ::tensorflow::ClusterDef** cluster_def) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*cluster_def) == NULL) {
      message_arena->Own(*cluster_def);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*cluster_def)) {
      ::tensorflow::ClusterDef* new_cluster_def = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::ClusterDef >(
            message_arena);
      new_cluster_def->CopyFrom(**cluster_def);
      *cluster_def = new_cluster_def;
    }
}
void ConfigProto::unsafe_arena_set_allocated_cluster_def(
    ::tensorflow::ClusterDef* cluster_def) {
  if (GetArenaNoVirtual() == NULL) {
    delete cluster_def_;
  }
  cluster_def_ = cluster_def;
  if (cluster_def) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ConfigProto.cluster_def)
}
void ConfigProto::_slow_mutable_experimental() {
  experimental_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::ConfigProto_Experimental >(
      GetArenaNoVirtual());
}
::tensorflow::ConfigProto_Experimental* ConfigProto::_slow_release_experimental() {
  if (experimental_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::ConfigProto_Experimental* temp = new ::tensorflow::ConfigProto_Experimental;
    temp->MergeFrom(*experimental_);
    experimental_ = NULL;
    return temp;
  }
}
::tensorflow::ConfigProto_Experimental* ConfigProto::unsafe_arena_release_experimental() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ConfigProto.experimental)
  
  ::tensorflow::ConfigProto_Experimental* temp = experimental_;
  experimental_ = NULL;
  return temp;
}
void ConfigProto::_slow_set_allocated_experimental(
    ::google::protobuf::Arena* message_arena, ::tensorflow::ConfigProto_Experimental** experimental) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*experimental) == NULL) {
      message_arena->Own(*experimental);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*experimental)) {
      ::tensorflow::ConfigProto_Experimental* new_experimental = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::ConfigProto_Experimental >(
            message_arena);
      new_experimental->CopyFrom(**experimental);
      *experimental = new_experimental;
    }
}
void ConfigProto::unsafe_arena_set_allocated_experimental(
    ::tensorflow::ConfigProto_Experimental* experimental) {
  if (GetArenaNoVirtual() == NULL) {
    delete experimental_;
  }
  experimental_ = experimental;
  if (experimental) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ConfigProto.experimental)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigProto::kDeviceCountFieldNumber;
const int ConfigProto::kIntraOpParallelismThreadsFieldNumber;
const int ConfigProto::kInterOpParallelismThreadsFieldNumber;
const int ConfigProto::kUsePerSessionThreadsFieldNumber;
const int ConfigProto::kSessionInterOpThreadPoolFieldNumber;
const int ConfigProto::kPlacementPeriodFieldNumber;
const int ConfigProto::kDeviceFiltersFieldNumber;
const int ConfigProto::kGpuOptionsFieldNumber;
const int ConfigProto::kAllowSoftPlacementFieldNumber;
const int ConfigProto::kLogDevicePlacementFieldNumber;
const int ConfigProto::kGraphOptionsFieldNumber;
const int ConfigProto::kOperationTimeoutInMsFieldNumber;
const int ConfigProto::kRpcOptionsFieldNumber;
const int ConfigProto::kClusterDefFieldNumber;
const int ConfigProto::kIsolateSessionStateFieldNumber;
const int ConfigProto::kShareClusterDevicesInSessionFieldNumber;
const int ConfigProto::kExperimentalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigProto::ConfigProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ConfigProto)
}

ConfigProto::ConfigProto(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  device_count_(arena),
  session_inter_op_thread_pool_(arena),
  device_filters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ConfigProto)
}

void ConfigProto::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  gpu_options_ = const_cast< ::tensorflow::GPUOptions*>(&::tensorflow::GPUOptions::default_instance());
  graph_options_ = const_cast< ::tensorflow::GraphOptions*>(&::tensorflow::GraphOptions::default_instance());
  rpc_options_ = const_cast< ::tensorflow::RPCOptions*>(&::tensorflow::RPCOptions::default_instance());
  cluster_def_ = const_cast< ::tensorflow::ClusterDef*>(&::tensorflow::ClusterDef::default_instance());
  experimental_ = const_cast< ::tensorflow::ConfigProto_Experimental*>(&::tensorflow::ConfigProto_Experimental::default_instance());
}

ConfigProto::ConfigProto(const ConfigProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.ConfigProto)
}

void ConfigProto::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  device_count_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  device_count_.SetEntryDescriptor(
      &::tensorflow::ConfigProto_DeviceCountEntry_descriptor_);
  intra_op_parallelism_threads_ = 0;
  inter_op_parallelism_threads_ = 0;
  use_per_session_threads_ = false;
  placement_period_ = 0;
  gpu_options_ = NULL;
  allow_soft_placement_ = false;
  log_device_placement_ = false;
  graph_options_ = NULL;
  operation_timeout_in_ms_ = GOOGLE_LONGLONG(0);
  rpc_options_ = NULL;
  cluster_def_ = NULL;
  isolate_session_state_ = false;
  share_cluster_devices_in_session_ = false;
  experimental_ = NULL;
}

ConfigProto::~ConfigProto() {
  // @@protoc_insertion_point(destructor:tensorflow.ConfigProto)
  SharedDtor();
}

void ConfigProto::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
    delete gpu_options_;
    delete graph_options_;
    delete rpc_options_;
    delete cluster_def_;
    delete experimental_;
  }
}

void ConfigProto::ArenaDtor(void* object) {
  ConfigProto* _this = reinterpret_cast< ConfigProto* >(object);
  (void)_this;
}
void ConfigProto::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigProto_descriptor_;
}

const ConfigProto& ConfigProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  return *default_instance_;
}

ConfigProto* ConfigProto::default_instance_ = NULL;

ConfigProto* ConfigProto::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ConfigProto>(arena);
}

void ConfigProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ConfigProto)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ConfigProto, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ConfigProto*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(intra_op_parallelism_threads_, inter_op_parallelism_threads_);
  ZR_(placement_period_, use_per_session_threads_);
  if (GetArenaNoVirtual() == NULL && gpu_options_ != NULL) delete gpu_options_;
  gpu_options_ = NULL;
  ZR_(allow_soft_placement_, isolate_session_state_);
  if (GetArenaNoVirtual() == NULL && graph_options_ != NULL) delete graph_options_;
  graph_options_ = NULL;
  operation_timeout_in_ms_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && rpc_options_ != NULL) delete rpc_options_;
  rpc_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && cluster_def_ != NULL) delete cluster_def_;
  cluster_def_ = NULL;
  share_cluster_devices_in_session_ = false;
  if (GetArenaNoVirtual() == NULL && experimental_ != NULL) delete experimental_;
  experimental_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  device_count_.Clear();
  session_inter_op_thread_pool_.Clear();
  device_filters_.Clear();
}

bool ConfigProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.ConfigProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, int32> device_count = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_device_count:
          ConfigProto_DeviceCountEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 > > parser(&device_count_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.ConfigProto.DeviceCountEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_device_count;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_intra_op_parallelism_threads;
        break;
      }

      // optional int32 intra_op_parallelism_threads = 2;
      case 2: {
        if (tag == 16) {
         parse_intra_op_parallelism_threads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intra_op_parallelism_threads_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_placement_period;
        break;
      }

      // optional int32 placement_period = 3;
      case 3: {
        if (tag == 24) {
         parse_placement_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &placement_period_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_device_filters;
        break;
      }

      // repeated string device_filters = 4;
      case 4: {
        if (tag == 34) {
         parse_device_filters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_device_filters()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_filters(this->device_filters_size() - 1).data(),
            this->device_filters(this->device_filters_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.ConfigProto.device_filters"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_device_filters;
        if (input->ExpectTag(40)) goto parse_inter_op_parallelism_threads;
        break;
      }

      // optional int32 inter_op_parallelism_threads = 5;
      case 5: {
        if (tag == 40) {
         parse_inter_op_parallelism_threads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inter_op_parallelism_threads_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_gpu_options;
        break;
      }

      // optional .tensorflow.GPUOptions gpu_options = 6;
      case 6: {
        if (tag == 50) {
         parse_gpu_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gpu_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_allow_soft_placement;
        break;
      }

      // optional bool allow_soft_placement = 7;
      case 7: {
        if (tag == 56) {
         parse_allow_soft_placement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_soft_placement_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_log_device_placement;
        break;
      }

      // optional bool log_device_placement = 8;
      case 8: {
        if (tag == 64) {
         parse_log_device_placement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &log_device_placement_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_use_per_session_threads;
        break;
      }

      // optional bool use_per_session_threads = 9;
      case 9: {
        if (tag == 72) {
         parse_use_per_session_threads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_per_session_threads_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_graph_options;
        break;
      }

      // optional .tensorflow.GraphOptions graph_options = 10;
      case 10: {
        if (tag == 82) {
         parse_graph_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_graph_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_operation_timeout_in_ms;
        break;
      }

      // optional int64 operation_timeout_in_ms = 11;
      case 11: {
        if (tag == 88) {
         parse_operation_timeout_in_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &operation_timeout_in_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_session_inter_op_thread_pool;
        break;
      }

      // repeated .tensorflow.ThreadPoolOptionProto session_inter_op_thread_pool = 12;
      case 12: {
        if (tag == 98) {
         parse_session_inter_op_thread_pool:
          DO_(input->IncrementRecursionDepth());
         parse_loop_session_inter_op_thread_pool:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_session_inter_op_thread_pool()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_loop_session_inter_op_thread_pool;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(106)) goto parse_rpc_options;
        break;
      }

      // optional .tensorflow.RPCOptions rpc_options = 13;
      case 13: {
        if (tag == 106) {
         parse_rpc_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rpc_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_cluster_def;
        break;
      }

      // optional .tensorflow.ClusterDef cluster_def = 14;
      case 14: {
        if (tag == 114) {
         parse_cluster_def:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cluster_def()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_isolate_session_state;
        break;
      }

      // optional bool isolate_session_state = 15;
      case 15: {
        if (tag == 120) {
         parse_isolate_session_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isolate_session_state_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_experimental;
        break;
      }

      // optional .tensorflow.ConfigProto.Experimental experimental = 16;
      case 16: {
        if (tag == 130) {
         parse_experimental:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_experimental()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_share_cluster_devices_in_session;
        break;
      }

      // optional bool share_cluster_devices_in_session = 17;
      case 17: {
        if (tag == 136) {
         parse_share_cluster_devices_in_session:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &share_cluster_devices_in_session_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.ConfigProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.ConfigProto)
  return false;
#undef DO_
}

void ConfigProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.ConfigProto)
  // map<string, int32> device_count = 1;
  if (!this->device_count().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.ConfigProto.DeviceCountEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->device_count().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->device_count().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->device_count().begin();
          it != this->device_count().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ConfigProto_DeviceCountEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(device_count_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ConfigProto_DeviceCountEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->device_count().begin();
          it != this->device_count().end(); ++it) {
        entry.reset(device_count_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional int32 intra_op_parallelism_threads = 2;
  if (this->intra_op_parallelism_threads() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->intra_op_parallelism_threads(), output);
  }

  // optional int32 placement_period = 3;
  if (this->placement_period() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->placement_period(), output);
  }

  // repeated string device_filters = 4;
  for (int i = 0; i < this->device_filters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_filters(i).data(), this->device_filters(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ConfigProto.device_filters");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->device_filters(i), output);
  }

  // optional int32 inter_op_parallelism_threads = 5;
  if (this->inter_op_parallelism_threads() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->inter_op_parallelism_threads(), output);
  }

  // optional .tensorflow.GPUOptions gpu_options = 6;
  if (this->has_gpu_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->gpu_options_, output);
  }

  // optional bool allow_soft_placement = 7;
  if (this->allow_soft_placement() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->allow_soft_placement(), output);
  }

  // optional bool log_device_placement = 8;
  if (this->log_device_placement() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->log_device_placement(), output);
  }

  // optional bool use_per_session_threads = 9;
  if (this->use_per_session_threads() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->use_per_session_threads(), output);
  }

  // optional .tensorflow.GraphOptions graph_options = 10;
  if (this->has_graph_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->graph_options_, output);
  }

  // optional int64 operation_timeout_in_ms = 11;
  if (this->operation_timeout_in_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->operation_timeout_in_ms(), output);
  }

  // repeated .tensorflow.ThreadPoolOptionProto session_inter_op_thread_pool = 12;
  for (unsigned int i = 0, n = this->session_inter_op_thread_pool_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->session_inter_op_thread_pool(i), output);
  }

  // optional .tensorflow.RPCOptions rpc_options = 13;
  if (this->has_rpc_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->rpc_options_, output);
  }

  // optional .tensorflow.ClusterDef cluster_def = 14;
  if (this->has_cluster_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->cluster_def_, output);
  }

  // optional bool isolate_session_state = 15;
  if (this->isolate_session_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->isolate_session_state(), output);
  }

  // optional .tensorflow.ConfigProto.Experimental experimental = 16;
  if (this->has_experimental()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->experimental_, output);
  }

  // optional bool share_cluster_devices_in_session = 17;
  if (this->share_cluster_devices_in_session() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->share_cluster_devices_in_session(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.ConfigProto)
}

::google::protobuf::uint8* ConfigProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ConfigProto)
  // map<string, int32> device_count = 1;
  if (!this->device_count().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.ConfigProto.DeviceCountEntry.key");
      }
    };

    if (deterministic &&
        this->device_count().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->device_count().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->device_count().begin();
          it != this->device_count().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ConfigProto_DeviceCountEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(device_count_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ConfigProto_DeviceCountEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->device_count().begin();
          it != this->device_count().end(); ++it) {
        entry.reset(device_count_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional int32 intra_op_parallelism_threads = 2;
  if (this->intra_op_parallelism_threads() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->intra_op_parallelism_threads(), target);
  }

  // optional int32 placement_period = 3;
  if (this->placement_period() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->placement_period(), target);
  }

  // repeated string device_filters = 4;
  for (int i = 0; i < this->device_filters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_filters(i).data(), this->device_filters(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ConfigProto.device_filters");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->device_filters(i), target);
  }

  // optional int32 inter_op_parallelism_threads = 5;
  if (this->inter_op_parallelism_threads() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->inter_op_parallelism_threads(), target);
  }

  // optional .tensorflow.GPUOptions gpu_options = 6;
  if (this->has_gpu_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->gpu_options_, false, target);
  }

  // optional bool allow_soft_placement = 7;
  if (this->allow_soft_placement() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->allow_soft_placement(), target);
  }

  // optional bool log_device_placement = 8;
  if (this->log_device_placement() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->log_device_placement(), target);
  }

  // optional bool use_per_session_threads = 9;
  if (this->use_per_session_threads() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->use_per_session_threads(), target);
  }

  // optional .tensorflow.GraphOptions graph_options = 10;
  if (this->has_graph_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->graph_options_, false, target);
  }

  // optional int64 operation_timeout_in_ms = 11;
  if (this->operation_timeout_in_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->operation_timeout_in_ms(), target);
  }

  // repeated .tensorflow.ThreadPoolOptionProto session_inter_op_thread_pool = 12;
  for (unsigned int i = 0, n = this->session_inter_op_thread_pool_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->session_inter_op_thread_pool(i), false, target);
  }

  // optional .tensorflow.RPCOptions rpc_options = 13;
  if (this->has_rpc_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->rpc_options_, false, target);
  }

  // optional .tensorflow.ClusterDef cluster_def = 14;
  if (this->has_cluster_def()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->cluster_def_, false, target);
  }

  // optional bool isolate_session_state = 15;
  if (this->isolate_session_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->isolate_session_state(), target);
  }

  // optional .tensorflow.ConfigProto.Experimental experimental = 16;
  if (this->has_experimental()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->experimental_, false, target);
  }

  // optional bool share_cluster_devices_in_session = 17;
  if (this->share_cluster_devices_in_session() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->share_cluster_devices_in_session(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ConfigProto)
  return target;
}

int ConfigProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ConfigProto)
  int total_size = 0;

  // optional int32 intra_op_parallelism_threads = 2;
  if (this->intra_op_parallelism_threads() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->intra_op_parallelism_threads());
  }

  // optional int32 inter_op_parallelism_threads = 5;
  if (this->inter_op_parallelism_threads() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->inter_op_parallelism_threads());
  }

  // optional bool use_per_session_threads = 9;
  if (this->use_per_session_threads() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 placement_period = 3;
  if (this->placement_period() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->placement_period());
  }

  // optional .tensorflow.GPUOptions gpu_options = 6;
  if (this->has_gpu_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gpu_options_);
  }

  // optional bool allow_soft_placement = 7;
  if (this->allow_soft_placement() != 0) {
    total_size += 1 + 1;
  }

  // optional bool log_device_placement = 8;
  if (this->log_device_placement() != 0) {
    total_size += 1 + 1;
  }

  // optional .tensorflow.GraphOptions graph_options = 10;
  if (this->has_graph_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->graph_options_);
  }

  // optional int64 operation_timeout_in_ms = 11;
  if (this->operation_timeout_in_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->operation_timeout_in_ms());
  }

  // optional .tensorflow.RPCOptions rpc_options = 13;
  if (this->has_rpc_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rpc_options_);
  }

  // optional .tensorflow.ClusterDef cluster_def = 14;
  if (this->has_cluster_def()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cluster_def_);
  }

  // optional bool isolate_session_state = 15;
  if (this->isolate_session_state() != 0) {
    total_size += 1 + 1;
  }

  // optional bool share_cluster_devices_in_session = 17;
  if (this->share_cluster_devices_in_session() != 0) {
    total_size += 2 + 1;
  }

  // optional .tensorflow.ConfigProto.Experimental experimental = 16;
  if (this->has_experimental()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->experimental_);
  }

  // map<string, int32> device_count = 1;
  total_size += 1 * this->device_count_size();
  {
    ::google::protobuf::scoped_ptr<ConfigProto_DeviceCountEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
        it = this->device_count().begin();
        it != this->device_count().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(device_count_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // repeated .tensorflow.ThreadPoolOptionProto session_inter_op_thread_pool = 12;
  total_size += 1 * this->session_inter_op_thread_pool_size();
  for (int i = 0; i < this->session_inter_op_thread_pool_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->session_inter_op_thread_pool(i));
  }

  // repeated string device_filters = 4;
  total_size += 1 * this->device_filters_size();
  for (int i = 0; i < this->device_filters_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->device_filters(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ConfigProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ConfigProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ConfigProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ConfigProto)
    MergeFrom(*source);
  }
}

void ConfigProto::MergeFrom(const ConfigProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ConfigProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  device_count_.MergeFrom(from.device_count_);
  session_inter_op_thread_pool_.MergeFrom(from.session_inter_op_thread_pool_);
  device_filters_.MergeFrom(from.device_filters_);
  if (from.intra_op_parallelism_threads() != 0) {
    set_intra_op_parallelism_threads(from.intra_op_parallelism_threads());
  }
  if (from.inter_op_parallelism_threads() != 0) {
    set_inter_op_parallelism_threads(from.inter_op_parallelism_threads());
  }
  if (from.use_per_session_threads() != 0) {
    set_use_per_session_threads(from.use_per_session_threads());
  }
  if (from.placement_period() != 0) {
    set_placement_period(from.placement_period());
  }
  if (from.has_gpu_options()) {
    mutable_gpu_options()->::tensorflow::GPUOptions::MergeFrom(from.gpu_options());
  }
  if (from.allow_soft_placement() != 0) {
    set_allow_soft_placement(from.allow_soft_placement());
  }
  if (from.log_device_placement() != 0) {
    set_log_device_placement(from.log_device_placement());
  }
  if (from.has_graph_options()) {
    mutable_graph_options()->::tensorflow::GraphOptions::MergeFrom(from.graph_options());
  }
  if (from.operation_timeout_in_ms() != 0) {
    set_operation_timeout_in_ms(from.operation_timeout_in_ms());
  }
  if (from.has_rpc_options()) {
    mutable_rpc_options()->::tensorflow::RPCOptions::MergeFrom(from.rpc_options());
  }
  if (from.has_cluster_def()) {
    mutable_cluster_def()->::tensorflow::ClusterDef::MergeFrom(from.cluster_def());
  }
  if (from.isolate_session_state() != 0) {
    set_isolate_session_state(from.isolate_session_state());
  }
  if (from.share_cluster_devices_in_session() != 0) {
    set_share_cluster_devices_in_session(from.share_cluster_devices_in_session());
  }
  if (from.has_experimental()) {
    mutable_experimental()->::tensorflow::ConfigProto_Experimental::MergeFrom(from.experimental());
  }
}

void ConfigProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ConfigProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigProto::CopyFrom(const ConfigProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ConfigProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigProto::IsInitialized() const {

  return true;
}

void ConfigProto::Swap(ConfigProto* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigProto temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ConfigProto::UnsafeArenaSwap(ConfigProto* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigProto::InternalSwap(ConfigProto* other) {
  device_count_.Swap(&other->device_count_);
  std::swap(intra_op_parallelism_threads_, other->intra_op_parallelism_threads_);
  std::swap(inter_op_parallelism_threads_, other->inter_op_parallelism_threads_);
  std::swap(use_per_session_threads_, other->use_per_session_threads_);
  session_inter_op_thread_pool_.UnsafeArenaSwap(&other->session_inter_op_thread_pool_);
  std::swap(placement_period_, other->placement_period_);
  device_filters_.UnsafeArenaSwap(&other->device_filters_);
  std::swap(gpu_options_, other->gpu_options_);
  std::swap(allow_soft_placement_, other->allow_soft_placement_);
  std::swap(log_device_placement_, other->log_device_placement_);
  std::swap(graph_options_, other->graph_options_);
  std::swap(operation_timeout_in_ms_, other->operation_timeout_in_ms_);
  std::swap(rpc_options_, other->rpc_options_);
  std::swap(cluster_def_, other->cluster_def_);
  std::swap(isolate_session_state_, other->isolate_session_state_);
  std::swap(share_cluster_devices_in_session_, other->share_cluster_devices_in_session_);
  std::swap(experimental_, other->experimental_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConfigProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfigProto_descriptor_;
  metadata.reflection = ConfigProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConfigProto_Experimental

// optional string collective_group_leader = 1;
void ConfigProto_Experimental::clear_collective_group_leader() {
  collective_group_leader_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& ConfigProto_Experimental::collective_group_leader() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.collective_group_leader)
  return collective_group_leader_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConfigProto_Experimental::set_collective_group_leader(const ::std::string& value) {
  
  collective_group_leader_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.collective_group_leader)
}
 void ConfigProto_Experimental::set_collective_group_leader(const char* value) {
  
  collective_group_leader_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.ConfigProto.Experimental.collective_group_leader)
}
 void ConfigProto_Experimental::set_collective_group_leader(const char* value,
    size_t size) {
  
  collective_group_leader_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.ConfigProto.Experimental.collective_group_leader)
}
 ::std::string* ConfigProto_Experimental::mutable_collective_group_leader() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.ConfigProto.Experimental.collective_group_leader)
  return collective_group_leader_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* ConfigProto_Experimental::release_collective_group_leader() {
  // @@protoc_insertion_point(field_release:tensorflow.ConfigProto.Experimental.collective_group_leader)
  
  return collective_group_leader_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* ConfigProto_Experimental::unsafe_arena_release_collective_group_leader() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ConfigProto.Experimental.collective_group_leader)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return collective_group_leader_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void ConfigProto_Experimental::set_allocated_collective_group_leader(::std::string* collective_group_leader) {
  if (collective_group_leader != NULL) {
    
  } else {
    
  }
  collective_group_leader_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collective_group_leader,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ConfigProto.Experimental.collective_group_leader)
}
 void ConfigProto_Experimental::unsafe_arena_set_allocated_collective_group_leader(
    ::std::string* collective_group_leader) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (collective_group_leader != NULL) {
    
  } else {
    
  }
  collective_group_leader_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      collective_group_leader, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ConfigProto.Experimental.collective_group_leader)
}

// optional string executor_type = 3;
void ConfigProto_Experimental::clear_executor_type() {
  executor_type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& ConfigProto_Experimental::executor_type() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.executor_type)
  return executor_type_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConfigProto_Experimental::set_executor_type(const ::std::string& value) {
  
  executor_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.executor_type)
}
 void ConfigProto_Experimental::set_executor_type(const char* value) {
  
  executor_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.ConfigProto.Experimental.executor_type)
}
 void ConfigProto_Experimental::set_executor_type(const char* value,
    size_t size) {
  
  executor_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.ConfigProto.Experimental.executor_type)
}
 ::std::string* ConfigProto_Experimental::mutable_executor_type() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.ConfigProto.Experimental.executor_type)
  return executor_type_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* ConfigProto_Experimental::release_executor_type() {
  // @@protoc_insertion_point(field_release:tensorflow.ConfigProto.Experimental.executor_type)
  
  return executor_type_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* ConfigProto_Experimental::unsafe_arena_release_executor_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ConfigProto.Experimental.executor_type)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return executor_type_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void ConfigProto_Experimental::set_allocated_executor_type(::std::string* executor_type) {
  if (executor_type != NULL) {
    
  } else {
    
  }
  executor_type_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), executor_type,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ConfigProto.Experimental.executor_type)
}
 void ConfigProto_Experimental::unsafe_arena_set_allocated_executor_type(
    ::std::string* executor_type) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (executor_type != NULL) {
    
  } else {
    
  }
  executor_type_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      executor_type, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ConfigProto.Experimental.executor_type)
}

// optional int32 recv_buf_max_chunk = 4;
void ConfigProto_Experimental::clear_recv_buf_max_chunk() {
  recv_buf_max_chunk_ = 0;
}
 ::google::protobuf::int32 ConfigProto_Experimental::recv_buf_max_chunk() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.recv_buf_max_chunk)
  return recv_buf_max_chunk_;
}
 void ConfigProto_Experimental::set_recv_buf_max_chunk(::google::protobuf::int32 value) {
  
  recv_buf_max_chunk_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.recv_buf_max_chunk)
}

// optional bool use_numa_affinity = 5;
void ConfigProto_Experimental::clear_use_numa_affinity() {
  use_numa_affinity_ = false;
}
 bool ConfigProto_Experimental::use_numa_affinity() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.use_numa_affinity)
  return use_numa_affinity_;
}
 void ConfigProto_Experimental::set_use_numa_affinity(bool value) {
  
  use_numa_affinity_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.use_numa_affinity)
}

// optional bool collective_deterministic_sequential_execution = 6;
void ConfigProto_Experimental::clear_collective_deterministic_sequential_execution() {
  collective_deterministic_sequential_execution_ = false;
}
 bool ConfigProto_Experimental::collective_deterministic_sequential_execution() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.collective_deterministic_sequential_execution)
  return collective_deterministic_sequential_execution_;
}
 void ConfigProto_Experimental::set_collective_deterministic_sequential_execution(bool value) {
  
  collective_deterministic_sequential_execution_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.collective_deterministic_sequential_execution)
}

// optional bool collective_nccl = 7;
void ConfigProto_Experimental::clear_collective_nccl() {
  collective_nccl_ = false;
}
 bool ConfigProto_Experimental::collective_nccl() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.collective_nccl)
  return collective_nccl_;
}
 void ConfigProto_Experimental::set_collective_nccl(bool value) {
  
  collective_nccl_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.collective_nccl)
}

// optional bool share_session_state_in_clusterspec_propagation = 8;
void ConfigProto_Experimental::clear_share_session_state_in_clusterspec_propagation() {
  share_session_state_in_clusterspec_propagation_ = false;
}
 bool ConfigProto_Experimental::share_session_state_in_clusterspec_propagation() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.share_session_state_in_clusterspec_propagation)
  return share_session_state_in_clusterspec_propagation_;
}
 void ConfigProto_Experimental::set_share_session_state_in_clusterspec_propagation(bool value) {
  
  share_session_state_in_clusterspec_propagation_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.share_session_state_in_clusterspec_propagation)
}

// optional bool disable_thread_spinning = 9;
void ConfigProto_Experimental::clear_disable_thread_spinning() {
  disable_thread_spinning_ = false;
}
 bool ConfigProto_Experimental::disable_thread_spinning() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.disable_thread_spinning)
  return disable_thread_spinning_;
}
 void ConfigProto_Experimental::set_disable_thread_spinning(bool value) {
  
  disable_thread_spinning_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.disable_thread_spinning)
}

// optional bool share_cluster_devices_in_session = 10;
void ConfigProto_Experimental::clear_share_cluster_devices_in_session() {
  share_cluster_devices_in_session_ = false;
}
 bool ConfigProto_Experimental::share_cluster_devices_in_session() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.share_cluster_devices_in_session)
  return share_cluster_devices_in_session_;
}
 void ConfigProto_Experimental::set_share_cluster_devices_in_session(bool value) {
  
  share_cluster_devices_in_session_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.share_cluster_devices_in_session)
}

// optional .tensorflow.SessionMetadata session_metadata = 11;
bool ConfigProto_Experimental::has_session_metadata() const {
  return !_is_default_instance_ && session_metadata_ != NULL;
}
void ConfigProto_Experimental::clear_session_metadata() {
  if (GetArenaNoVirtual() == NULL && session_metadata_ != NULL) delete session_metadata_;
  session_metadata_ = NULL;
}
const ::tensorflow::SessionMetadata& ConfigProto_Experimental::session_metadata() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.session_metadata)
  return session_metadata_ != NULL ? *session_metadata_ : *default_instance_->session_metadata_;
}
::tensorflow::SessionMetadata* ConfigProto_Experimental::mutable_session_metadata() {
  
  if (session_metadata_ == NULL) {
    _slow_mutable_session_metadata();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ConfigProto.Experimental.session_metadata)
  return session_metadata_;
}
::tensorflow::SessionMetadata* ConfigProto_Experimental::release_session_metadata() {
  // @@protoc_insertion_point(field_release:tensorflow.ConfigProto.Experimental.session_metadata)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_session_metadata();
  } else {
    ::tensorflow::SessionMetadata* temp = session_metadata_;
    session_metadata_ = NULL;
    return temp;
  }
}
 void ConfigProto_Experimental::set_allocated_session_metadata(::tensorflow::SessionMetadata* session_metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete session_metadata_;
  }
  if (session_metadata != NULL) {
    _slow_set_allocated_session_metadata(message_arena, &session_metadata);
  }
  session_metadata_ = session_metadata;
  if (session_metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ConfigProto.Experimental.session_metadata)
}

// optional bool optimize_for_static_graph = 12;
void ConfigProto_Experimental::clear_optimize_for_static_graph() {
  optimize_for_static_graph_ = false;
}
 bool ConfigProto_Experimental::optimize_for_static_graph() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.optimize_for_static_graph)
  return optimize_for_static_graph_;
}
 void ConfigProto_Experimental::set_optimize_for_static_graph(bool value) {
  
  optimize_for_static_graph_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.optimize_for_static_graph)
}

// optional bool enable_mlir_bridge = 13;
void ConfigProto_Experimental::clear_enable_mlir_bridge() {
  enable_mlir_bridge_ = false;
}
 bool ConfigProto_Experimental::enable_mlir_bridge() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.enable_mlir_bridge)
  return enable_mlir_bridge_;
}
 void ConfigProto_Experimental::set_enable_mlir_bridge(bool value) {
  
  enable_mlir_bridge_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.enable_mlir_bridge)
}

// optional bool enable_mlir_graph_optimization = 16;
void ConfigProto_Experimental::clear_enable_mlir_graph_optimization() {
  enable_mlir_graph_optimization_ = false;
}
 bool ConfigProto_Experimental::enable_mlir_graph_optimization() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.enable_mlir_graph_optimization)
  return enable_mlir_graph_optimization_;
}
 void ConfigProto_Experimental::set_enable_mlir_graph_optimization(bool value) {
  
  enable_mlir_graph_optimization_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.enable_mlir_graph_optimization)
}

// optional bool disable_output_partition_graphs = 14;
void ConfigProto_Experimental::clear_disable_output_partition_graphs() {
  disable_output_partition_graphs_ = false;
}
 bool ConfigProto_Experimental::disable_output_partition_graphs() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.disable_output_partition_graphs)
  return disable_output_partition_graphs_;
}
 void ConfigProto_Experimental::set_disable_output_partition_graphs(bool value) {
  
  disable_output_partition_graphs_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.disable_output_partition_graphs)
}

// optional int64 xla_fusion_autotuner_thresh = 15;
void ConfigProto_Experimental::clear_xla_fusion_autotuner_thresh() {
  xla_fusion_autotuner_thresh_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ConfigProto_Experimental::xla_fusion_autotuner_thresh() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.xla_fusion_autotuner_thresh)
  return xla_fusion_autotuner_thresh_;
}
 void ConfigProto_Experimental::set_xla_fusion_autotuner_thresh(::google::protobuf::int64 value) {
  
  xla_fusion_autotuner_thresh_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.xla_fusion_autotuner_thresh)
}

// -------------------------------------------------------------------

// ConfigProto

// map<string, int32> device_count = 1;
int ConfigProto::device_count_size() const {
  return device_count_.size();
}
void ConfigProto::clear_device_count() {
  device_count_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >&
ConfigProto::device_count() const {
  // @@protoc_insertion_point(field_map:tensorflow.ConfigProto.device_count)
  return device_count_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >*
ConfigProto::mutable_device_count() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.ConfigProto.device_count)
  return device_count_.MutableMap();
}

// optional int32 intra_op_parallelism_threads = 2;
void ConfigProto::clear_intra_op_parallelism_threads() {
  intra_op_parallelism_threads_ = 0;
}
 ::google::protobuf::int32 ConfigProto::intra_op_parallelism_threads() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.intra_op_parallelism_threads)
  return intra_op_parallelism_threads_;
}
 void ConfigProto::set_intra_op_parallelism_threads(::google::protobuf::int32 value) {
  
  intra_op_parallelism_threads_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.intra_op_parallelism_threads)
}

// optional int32 inter_op_parallelism_threads = 5;
void ConfigProto::clear_inter_op_parallelism_threads() {
  inter_op_parallelism_threads_ = 0;
}
 ::google::protobuf::int32 ConfigProto::inter_op_parallelism_threads() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.inter_op_parallelism_threads)
  return inter_op_parallelism_threads_;
}
 void ConfigProto::set_inter_op_parallelism_threads(::google::protobuf::int32 value) {
  
  inter_op_parallelism_threads_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.inter_op_parallelism_threads)
}

// optional bool use_per_session_threads = 9;
void ConfigProto::clear_use_per_session_threads() {
  use_per_session_threads_ = false;
}
 bool ConfigProto::use_per_session_threads() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.use_per_session_threads)
  return use_per_session_threads_;
}
 void ConfigProto::set_use_per_session_threads(bool value) {
  
  use_per_session_threads_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.use_per_session_threads)
}

// repeated .tensorflow.ThreadPoolOptionProto session_inter_op_thread_pool = 12;
int ConfigProto::session_inter_op_thread_pool_size() const {
  return session_inter_op_thread_pool_.size();
}
void ConfigProto::clear_session_inter_op_thread_pool() {
  session_inter_op_thread_pool_.Clear();
}
const ::tensorflow::ThreadPoolOptionProto& ConfigProto::session_inter_op_thread_pool(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.session_inter_op_thread_pool)
  return session_inter_op_thread_pool_.Get(index);
}
::tensorflow::ThreadPoolOptionProto* ConfigProto::mutable_session_inter_op_thread_pool(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.ConfigProto.session_inter_op_thread_pool)
  return session_inter_op_thread_pool_.Mutable(index);
}
::tensorflow::ThreadPoolOptionProto* ConfigProto::add_session_inter_op_thread_pool() {
  // @@protoc_insertion_point(field_add:tensorflow.ConfigProto.session_inter_op_thread_pool)
  return session_inter_op_thread_pool_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::ThreadPoolOptionProto >*
ConfigProto::mutable_session_inter_op_thread_pool() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.ConfigProto.session_inter_op_thread_pool)
  return &session_inter_op_thread_pool_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::ThreadPoolOptionProto >&
ConfigProto::session_inter_op_thread_pool() const {
  // @@protoc_insertion_point(field_list:tensorflow.ConfigProto.session_inter_op_thread_pool)
  return session_inter_op_thread_pool_;
}

// optional int32 placement_period = 3;
void ConfigProto::clear_placement_period() {
  placement_period_ = 0;
}
 ::google::protobuf::int32 ConfigProto::placement_period() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.placement_period)
  return placement_period_;
}
 void ConfigProto::set_placement_period(::google::protobuf::int32 value) {
  
  placement_period_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.placement_period)
}

// repeated string device_filters = 4;
int ConfigProto::device_filters_size() const {
  return device_filters_.size();
}
void ConfigProto::clear_device_filters() {
  device_filters_.Clear();
}
 const ::std::string& ConfigProto::device_filters(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.device_filters)
  return device_filters_.Get(index);
}
 ::std::string* ConfigProto::mutable_device_filters(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.ConfigProto.device_filters)
  return device_filters_.Mutable(index);
}
 void ConfigProto::set_device_filters(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.device_filters)
  device_filters_.Mutable(index)->assign(value);
}
 void ConfigProto::set_device_filters(int index, const char* value) {
  device_filters_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.ConfigProto.device_filters)
}
 void ConfigProto::set_device_filters(int index, const char* value, size_t size) {
  device_filters_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.ConfigProto.device_filters)
}
 ::std::string* ConfigProto::add_device_filters() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.ConfigProto.device_filters)
  return device_filters_.Add();
}
 void ConfigProto::add_device_filters(const ::std::string& value) {
  device_filters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.ConfigProto.device_filters)
}
 void ConfigProto::add_device_filters(const char* value) {
  device_filters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.ConfigProto.device_filters)
}
 void ConfigProto::add_device_filters(const char* value, size_t size) {
  device_filters_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.ConfigProto.device_filters)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
ConfigProto::device_filters() const {
  // @@protoc_insertion_point(field_list:tensorflow.ConfigProto.device_filters)
  return device_filters_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
ConfigProto::mutable_device_filters() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.ConfigProto.device_filters)
  return &device_filters_;
}

// optional .tensorflow.GPUOptions gpu_options = 6;
bool ConfigProto::has_gpu_options() const {
  return !_is_default_instance_ && gpu_options_ != NULL;
}
void ConfigProto::clear_gpu_options() {
  if (GetArenaNoVirtual() == NULL && gpu_options_ != NULL) delete gpu_options_;
  gpu_options_ = NULL;
}
const ::tensorflow::GPUOptions& ConfigProto::gpu_options() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.gpu_options)
  return gpu_options_ != NULL ? *gpu_options_ : *default_instance_->gpu_options_;
}
::tensorflow::GPUOptions* ConfigProto::mutable_gpu_options() {
  
  if (gpu_options_ == NULL) {
    _slow_mutable_gpu_options();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ConfigProto.gpu_options)
  return gpu_options_;
}
::tensorflow::GPUOptions* ConfigProto::release_gpu_options() {
  // @@protoc_insertion_point(field_release:tensorflow.ConfigProto.gpu_options)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_gpu_options();
  } else {
    ::tensorflow::GPUOptions* temp = gpu_options_;
    gpu_options_ = NULL;
    return temp;
  }
}
 void ConfigProto::set_allocated_gpu_options(::tensorflow::GPUOptions* gpu_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete gpu_options_;
  }
  if (gpu_options != NULL) {
    _slow_set_allocated_gpu_options(message_arena, &gpu_options);
  }
  gpu_options_ = gpu_options;
  if (gpu_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ConfigProto.gpu_options)
}

// optional bool allow_soft_placement = 7;
void ConfigProto::clear_allow_soft_placement() {
  allow_soft_placement_ = false;
}
 bool ConfigProto::allow_soft_placement() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.allow_soft_placement)
  return allow_soft_placement_;
}
 void ConfigProto::set_allow_soft_placement(bool value) {
  
  allow_soft_placement_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.allow_soft_placement)
}

// optional bool log_device_placement = 8;
void ConfigProto::clear_log_device_placement() {
  log_device_placement_ = false;
}
 bool ConfigProto::log_device_placement() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.log_device_placement)
  return log_device_placement_;
}
 void ConfigProto::set_log_device_placement(bool value) {
  
  log_device_placement_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.log_device_placement)
}

// optional .tensorflow.GraphOptions graph_options = 10;
bool ConfigProto::has_graph_options() const {
  return !_is_default_instance_ && graph_options_ != NULL;
}
void ConfigProto::clear_graph_options() {
  if (GetArenaNoVirtual() == NULL && graph_options_ != NULL) delete graph_options_;
  graph_options_ = NULL;
}
const ::tensorflow::GraphOptions& ConfigProto::graph_options() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.graph_options)
  return graph_options_ != NULL ? *graph_options_ : *default_instance_->graph_options_;
}
::tensorflow::GraphOptions* ConfigProto::mutable_graph_options() {
  
  if (graph_options_ == NULL) {
    _slow_mutable_graph_options();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ConfigProto.graph_options)
  return graph_options_;
}
::tensorflow::GraphOptions* ConfigProto::release_graph_options() {
  // @@protoc_insertion_point(field_release:tensorflow.ConfigProto.graph_options)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_graph_options();
  } else {
    ::tensorflow::GraphOptions* temp = graph_options_;
    graph_options_ = NULL;
    return temp;
  }
}
 void ConfigProto::set_allocated_graph_options(::tensorflow::GraphOptions* graph_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete graph_options_;
  }
  if (graph_options != NULL) {
    _slow_set_allocated_graph_options(message_arena, &graph_options);
  }
  graph_options_ = graph_options;
  if (graph_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ConfigProto.graph_options)
}

// optional int64 operation_timeout_in_ms = 11;
void ConfigProto::clear_operation_timeout_in_ms() {
  operation_timeout_in_ms_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ConfigProto::operation_timeout_in_ms() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.operation_timeout_in_ms)
  return operation_timeout_in_ms_;
}
 void ConfigProto::set_operation_timeout_in_ms(::google::protobuf::int64 value) {
  
  operation_timeout_in_ms_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.operation_timeout_in_ms)
}

// optional .tensorflow.RPCOptions rpc_options = 13;
bool ConfigProto::has_rpc_options() const {
  return !_is_default_instance_ && rpc_options_ != NULL;
}
void ConfigProto::clear_rpc_options() {
  if (GetArenaNoVirtual() == NULL && rpc_options_ != NULL) delete rpc_options_;
  rpc_options_ = NULL;
}
const ::tensorflow::RPCOptions& ConfigProto::rpc_options() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.rpc_options)
  return rpc_options_ != NULL ? *rpc_options_ : *default_instance_->rpc_options_;
}
::tensorflow::RPCOptions* ConfigProto::mutable_rpc_options() {
  
  if (rpc_options_ == NULL) {
    _slow_mutable_rpc_options();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ConfigProto.rpc_options)
  return rpc_options_;
}
::tensorflow::RPCOptions* ConfigProto::release_rpc_options() {
  // @@protoc_insertion_point(field_release:tensorflow.ConfigProto.rpc_options)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_rpc_options();
  } else {
    ::tensorflow::RPCOptions* temp = rpc_options_;
    rpc_options_ = NULL;
    return temp;
  }
}
 void ConfigProto::set_allocated_rpc_options(::tensorflow::RPCOptions* rpc_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rpc_options_;
  }
  if (rpc_options != NULL) {
    _slow_set_allocated_rpc_options(message_arena, &rpc_options);
  }
  rpc_options_ = rpc_options;
  if (rpc_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ConfigProto.rpc_options)
}

// optional .tensorflow.ClusterDef cluster_def = 14;
bool ConfigProto::has_cluster_def() const {
  return !_is_default_instance_ && cluster_def_ != NULL;
}
void ConfigProto::clear_cluster_def() {
  if (GetArenaNoVirtual() == NULL && cluster_def_ != NULL) delete cluster_def_;
  cluster_def_ = NULL;
}
const ::tensorflow::ClusterDef& ConfigProto::cluster_def() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.cluster_def)
  return cluster_def_ != NULL ? *cluster_def_ : *default_instance_->cluster_def_;
}
::tensorflow::ClusterDef* ConfigProto::mutable_cluster_def() {
  
  if (cluster_def_ == NULL) {
    _slow_mutable_cluster_def();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ConfigProto.cluster_def)
  return cluster_def_;
}
::tensorflow::ClusterDef* ConfigProto::release_cluster_def() {
  // @@protoc_insertion_point(field_release:tensorflow.ConfigProto.cluster_def)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_cluster_def();
  } else {
    ::tensorflow::ClusterDef* temp = cluster_def_;
    cluster_def_ = NULL;
    return temp;
  }
}
 void ConfigProto::set_allocated_cluster_def(::tensorflow::ClusterDef* cluster_def) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cluster_def_;
  }
  if (cluster_def != NULL) {
    _slow_set_allocated_cluster_def(message_arena, &cluster_def);
  }
  cluster_def_ = cluster_def;
  if (cluster_def) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ConfigProto.cluster_def)
}

// optional bool isolate_session_state = 15;
void ConfigProto::clear_isolate_session_state() {
  isolate_session_state_ = false;
}
 bool ConfigProto::isolate_session_state() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.isolate_session_state)
  return isolate_session_state_;
}
 void ConfigProto::set_isolate_session_state(bool value) {
  
  isolate_session_state_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.isolate_session_state)
}

// optional bool share_cluster_devices_in_session = 17;
void ConfigProto::clear_share_cluster_devices_in_session() {
  share_cluster_devices_in_session_ = false;
}
 bool ConfigProto::share_cluster_devices_in_session() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.share_cluster_devices_in_session)
  return share_cluster_devices_in_session_;
}
 void ConfigProto::set_share_cluster_devices_in_session(bool value) {
  
  share_cluster_devices_in_session_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.share_cluster_devices_in_session)
}

// optional .tensorflow.ConfigProto.Experimental experimental = 16;
bool ConfigProto::has_experimental() const {
  return !_is_default_instance_ && experimental_ != NULL;
}
void ConfigProto::clear_experimental() {
  if (GetArenaNoVirtual() == NULL && experimental_ != NULL) delete experimental_;
  experimental_ = NULL;
}
const ::tensorflow::ConfigProto_Experimental& ConfigProto::experimental() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.experimental)
  return experimental_ != NULL ? *experimental_ : *default_instance_->experimental_;
}
::tensorflow::ConfigProto_Experimental* ConfigProto::mutable_experimental() {
  
  if (experimental_ == NULL) {
    _slow_mutable_experimental();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ConfigProto.experimental)
  return experimental_;
}
::tensorflow::ConfigProto_Experimental* ConfigProto::release_experimental() {
  // @@protoc_insertion_point(field_release:tensorflow.ConfigProto.experimental)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_experimental();
  } else {
    ::tensorflow::ConfigProto_Experimental* temp = experimental_;
    experimental_ = NULL;
    return temp;
  }
}
 void ConfigProto::set_allocated_experimental(::tensorflow::ConfigProto_Experimental* experimental) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete experimental_;
  }
  if (experimental != NULL) {
    _slow_set_allocated_experimental(message_arena, &experimental);
  }
  experimental_ = experimental;
  if (experimental) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ConfigProto.experimental)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* RunOptions_TraceLevel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunOptions_TraceLevel_descriptor_;
}
bool RunOptions_TraceLevel_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RunOptions_TraceLevel RunOptions::NO_TRACE;
const RunOptions_TraceLevel RunOptions::SOFTWARE_TRACE;
const RunOptions_TraceLevel RunOptions::HARDWARE_TRACE;
const RunOptions_TraceLevel RunOptions::FULL_TRACE;
const RunOptions_TraceLevel RunOptions::TraceLevel_MIN;
const RunOptions_TraceLevel RunOptions::TraceLevel_MAX;
const int RunOptions::TraceLevel_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunOptions_Experimental_RunHandlerPoolOptions::kPriorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunOptions_Experimental_RunHandlerPoolOptions::RunOptions_Experimental_RunHandlerPoolOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RunOptions.Experimental.RunHandlerPoolOptions)
}

RunOptions_Experimental_RunHandlerPoolOptions::RunOptions_Experimental_RunHandlerPoolOptions(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RunOptions.Experimental.RunHandlerPoolOptions)
}

void RunOptions_Experimental_RunHandlerPoolOptions::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RunOptions_Experimental_RunHandlerPoolOptions::RunOptions_Experimental_RunHandlerPoolOptions(const RunOptions_Experimental_RunHandlerPoolOptions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.RunOptions.Experimental.RunHandlerPoolOptions)
}

void RunOptions_Experimental_RunHandlerPoolOptions::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  priority_ = GOOGLE_LONGLONG(0);
}

RunOptions_Experimental_RunHandlerPoolOptions::~RunOptions_Experimental_RunHandlerPoolOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.RunOptions.Experimental.RunHandlerPoolOptions)
  SharedDtor();
}

void RunOptions_Experimental_RunHandlerPoolOptions::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void RunOptions_Experimental_RunHandlerPoolOptions::ArenaDtor(void* object) {
  RunOptions_Experimental_RunHandlerPoolOptions* _this = reinterpret_cast< RunOptions_Experimental_RunHandlerPoolOptions* >(object);
  (void)_this;
}
void RunOptions_Experimental_RunHandlerPoolOptions::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RunOptions_Experimental_RunHandlerPoolOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunOptions_Experimental_RunHandlerPoolOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunOptions_Experimental_RunHandlerPoolOptions_descriptor_;
}

const RunOptions_Experimental_RunHandlerPoolOptions& RunOptions_Experimental_RunHandlerPoolOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  return *default_instance_;
}

RunOptions_Experimental_RunHandlerPoolOptions* RunOptions_Experimental_RunHandlerPoolOptions::default_instance_ = NULL;

RunOptions_Experimental_RunHandlerPoolOptions* RunOptions_Experimental_RunHandlerPoolOptions::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RunOptions_Experimental_RunHandlerPoolOptions>(arena);
}

void RunOptions_Experimental_RunHandlerPoolOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RunOptions.Experimental.RunHandlerPoolOptions)
  priority_ = GOOGLE_LONGLONG(0);
}

bool RunOptions_Experimental_RunHandlerPoolOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RunOptions.Experimental.RunHandlerPoolOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 priority = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &priority_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RunOptions.Experimental.RunHandlerPoolOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RunOptions.Experimental.RunHandlerPoolOptions)
  return false;
#undef DO_
}

void RunOptions_Experimental_RunHandlerPoolOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RunOptions.Experimental.RunHandlerPoolOptions)
  // optional int64 priority = 1;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->priority(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.RunOptions.Experimental.RunHandlerPoolOptions)
}

::google::protobuf::uint8* RunOptions_Experimental_RunHandlerPoolOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RunOptions.Experimental.RunHandlerPoolOptions)
  // optional int64 priority = 1;
  if (this->priority() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->priority(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RunOptions.Experimental.RunHandlerPoolOptions)
  return target;
}

int RunOptions_Experimental_RunHandlerPoolOptions::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RunOptions.Experimental.RunHandlerPoolOptions)
  int total_size = 0;

  // optional int64 priority = 1;
  if (this->priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->priority());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunOptions_Experimental_RunHandlerPoolOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RunOptions.Experimental.RunHandlerPoolOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RunOptions_Experimental_RunHandlerPoolOptions* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RunOptions_Experimental_RunHandlerPoolOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RunOptions.Experimental.RunHandlerPoolOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RunOptions.Experimental.RunHandlerPoolOptions)
    MergeFrom(*source);
  }
}

void RunOptions_Experimental_RunHandlerPoolOptions::MergeFrom(const RunOptions_Experimental_RunHandlerPoolOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RunOptions.Experimental.RunHandlerPoolOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
}

void RunOptions_Experimental_RunHandlerPoolOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RunOptions.Experimental.RunHandlerPoolOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunOptions_Experimental_RunHandlerPoolOptions::CopyFrom(const RunOptions_Experimental_RunHandlerPoolOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RunOptions.Experimental.RunHandlerPoolOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunOptions_Experimental_RunHandlerPoolOptions::IsInitialized() const {

  return true;
}

void RunOptions_Experimental_RunHandlerPoolOptions::Swap(RunOptions_Experimental_RunHandlerPoolOptions* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RunOptions_Experimental_RunHandlerPoolOptions temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void RunOptions_Experimental_RunHandlerPoolOptions::UnsafeArenaSwap(RunOptions_Experimental_RunHandlerPoolOptions* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RunOptions_Experimental_RunHandlerPoolOptions::InternalSwap(RunOptions_Experimental_RunHandlerPoolOptions* other) {
  std::swap(priority_, other->priority_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RunOptions_Experimental_RunHandlerPoolOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunOptions_Experimental_RunHandlerPoolOptions_descriptor_;
  metadata.reflection = RunOptions_Experimental_RunHandlerPoolOptions_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

void RunOptions_Experimental::_slow_mutable_run_handler_pool_options() {
  run_handler_pool_options_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions >(
      GetArenaNoVirtual());
}
::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions* RunOptions_Experimental::_slow_release_run_handler_pool_options() {
  if (run_handler_pool_options_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions* temp = new ::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions;
    temp->MergeFrom(*run_handler_pool_options_);
    run_handler_pool_options_ = NULL;
    return temp;
  }
}
::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions* RunOptions_Experimental::unsafe_arena_release_run_handler_pool_options() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RunOptions.Experimental.run_handler_pool_options)
  
  ::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions* temp = run_handler_pool_options_;
  run_handler_pool_options_ = NULL;
  return temp;
}
void RunOptions_Experimental::_slow_set_allocated_run_handler_pool_options(
    ::google::protobuf::Arena* message_arena, ::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions** run_handler_pool_options) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*run_handler_pool_options) == NULL) {
      message_arena->Own(*run_handler_pool_options);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*run_handler_pool_options)) {
      ::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions* new_run_handler_pool_options = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions >(
            message_arena);
      new_run_handler_pool_options->CopyFrom(**run_handler_pool_options);
      *run_handler_pool_options = new_run_handler_pool_options;
    }
}
void RunOptions_Experimental::unsafe_arena_set_allocated_run_handler_pool_options(
    ::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions* run_handler_pool_options) {
  if (GetArenaNoVirtual() == NULL) {
    delete run_handler_pool_options_;
  }
  run_handler_pool_options_ = run_handler_pool_options;
  if (run_handler_pool_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RunOptions.Experimental.run_handler_pool_options)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunOptions_Experimental::kCollectiveGraphKeyFieldNumber;
const int RunOptions_Experimental::kUseRunHandlerPoolFieldNumber;
const int RunOptions_Experimental::kRunHandlerPoolOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunOptions_Experimental::RunOptions_Experimental()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RunOptions.Experimental)
}

RunOptions_Experimental::RunOptions_Experimental(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RunOptions.Experimental)
}

void RunOptions_Experimental::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  run_handler_pool_options_ = const_cast< ::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions*>(&::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions::default_instance());
}

RunOptions_Experimental::RunOptions_Experimental(const RunOptions_Experimental& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.RunOptions.Experimental)
}

void RunOptions_Experimental::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  collective_graph_key_ = GOOGLE_LONGLONG(0);
  use_run_handler_pool_ = false;
  run_handler_pool_options_ = NULL;
}

RunOptions_Experimental::~RunOptions_Experimental() {
  // @@protoc_insertion_point(destructor:tensorflow.RunOptions.Experimental)
  SharedDtor();
}

void RunOptions_Experimental::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
    delete run_handler_pool_options_;
  }
}

void RunOptions_Experimental::ArenaDtor(void* object) {
  RunOptions_Experimental* _this = reinterpret_cast< RunOptions_Experimental* >(object);
  (void)_this;
}
void RunOptions_Experimental::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RunOptions_Experimental::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunOptions_Experimental::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunOptions_Experimental_descriptor_;
}

const RunOptions_Experimental& RunOptions_Experimental::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  return *default_instance_;
}

RunOptions_Experimental* RunOptions_Experimental::default_instance_ = NULL;

RunOptions_Experimental* RunOptions_Experimental::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RunOptions_Experimental>(arena);
}

void RunOptions_Experimental::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RunOptions.Experimental)
  collective_graph_key_ = GOOGLE_LONGLONG(0);
  use_run_handler_pool_ = false;
  if (GetArenaNoVirtual() == NULL && run_handler_pool_options_ != NULL) delete run_handler_pool_options_;
  run_handler_pool_options_ = NULL;
}

bool RunOptions_Experimental::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RunOptions.Experimental)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 collective_graph_key = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &collective_graph_key_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_use_run_handler_pool;
        break;
      }

      // optional bool use_run_handler_pool = 2;
      case 2: {
        if (tag == 16) {
         parse_use_run_handler_pool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_run_handler_pool_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_run_handler_pool_options;
        break;
      }

      // optional .tensorflow.RunOptions.Experimental.RunHandlerPoolOptions run_handler_pool_options = 3;
      case 3: {
        if (tag == 26) {
         parse_run_handler_pool_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_run_handler_pool_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RunOptions.Experimental)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RunOptions.Experimental)
  return false;
#undef DO_
}

void RunOptions_Experimental::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RunOptions.Experimental)
  // optional int64 collective_graph_key = 1;
  if (this->collective_graph_key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->collective_graph_key(), output);
  }

  // optional bool use_run_handler_pool = 2;
  if (this->use_run_handler_pool() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->use_run_handler_pool(), output);
  }

  // optional .tensorflow.RunOptions.Experimental.RunHandlerPoolOptions run_handler_pool_options = 3;
  if (this->has_run_handler_pool_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->run_handler_pool_options_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.RunOptions.Experimental)
}

::google::protobuf::uint8* RunOptions_Experimental::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RunOptions.Experimental)
  // optional int64 collective_graph_key = 1;
  if (this->collective_graph_key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->collective_graph_key(), target);
  }

  // optional bool use_run_handler_pool = 2;
  if (this->use_run_handler_pool() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->use_run_handler_pool(), target);
  }

  // optional .tensorflow.RunOptions.Experimental.RunHandlerPoolOptions run_handler_pool_options = 3;
  if (this->has_run_handler_pool_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->run_handler_pool_options_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RunOptions.Experimental)
  return target;
}

int RunOptions_Experimental::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RunOptions.Experimental)
  int total_size = 0;

  // optional int64 collective_graph_key = 1;
  if (this->collective_graph_key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->collective_graph_key());
  }

  // optional bool use_run_handler_pool = 2;
  if (this->use_run_handler_pool() != 0) {
    total_size += 1 + 1;
  }

  // optional .tensorflow.RunOptions.Experimental.RunHandlerPoolOptions run_handler_pool_options = 3;
  if (this->has_run_handler_pool_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->run_handler_pool_options_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunOptions_Experimental::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RunOptions.Experimental)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RunOptions_Experimental* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RunOptions_Experimental>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RunOptions.Experimental)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RunOptions.Experimental)
    MergeFrom(*source);
  }
}

void RunOptions_Experimental::MergeFrom(const RunOptions_Experimental& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RunOptions.Experimental)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.collective_graph_key() != 0) {
    set_collective_graph_key(from.collective_graph_key());
  }
  if (from.use_run_handler_pool() != 0) {
    set_use_run_handler_pool(from.use_run_handler_pool());
  }
  if (from.has_run_handler_pool_options()) {
    mutable_run_handler_pool_options()->::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions::MergeFrom(from.run_handler_pool_options());
  }
}

void RunOptions_Experimental::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RunOptions.Experimental)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunOptions_Experimental::CopyFrom(const RunOptions_Experimental& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RunOptions.Experimental)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunOptions_Experimental::IsInitialized() const {

  return true;
}

void RunOptions_Experimental::Swap(RunOptions_Experimental* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RunOptions_Experimental temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void RunOptions_Experimental::UnsafeArenaSwap(RunOptions_Experimental* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RunOptions_Experimental::InternalSwap(RunOptions_Experimental* other) {
  std::swap(collective_graph_key_, other->collective_graph_key_);
  std::swap(use_run_handler_pool_, other->use_run_handler_pool_);
  std::swap(run_handler_pool_options_, other->run_handler_pool_options_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RunOptions_Experimental::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunOptions_Experimental_descriptor_;
  metadata.reflection = RunOptions_Experimental_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

void RunOptions::_slow_mutable_debug_options() {
  debug_options_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::DebugOptions >(
      GetArenaNoVirtual());
}
::tensorflow::DebugOptions* RunOptions::_slow_release_debug_options() {
  if (debug_options_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::DebugOptions* temp = new ::tensorflow::DebugOptions;
    temp->MergeFrom(*debug_options_);
    debug_options_ = NULL;
    return temp;
  }
}
::tensorflow::DebugOptions* RunOptions::unsafe_arena_release_debug_options() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RunOptions.debug_options)
  
  ::tensorflow::DebugOptions* temp = debug_options_;
  debug_options_ = NULL;
  return temp;
}
void RunOptions::_slow_set_allocated_debug_options(
    ::google::protobuf::Arena* message_arena, ::tensorflow::DebugOptions** debug_options) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*debug_options) == NULL) {
      message_arena->Own(*debug_options);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*debug_options)) {
      ::tensorflow::DebugOptions* new_debug_options = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::DebugOptions >(
            message_arena);
      new_debug_options->CopyFrom(**debug_options);
      *debug_options = new_debug_options;
    }
}
void RunOptions::unsafe_arena_set_allocated_debug_options(
    ::tensorflow::DebugOptions* debug_options) {
  if (GetArenaNoVirtual() == NULL) {
    delete debug_options_;
  }
  debug_options_ = debug_options;
  if (debug_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RunOptions.debug_options)
}
void RunOptions::_slow_mutable_experimental() {
  experimental_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::RunOptions_Experimental >(
      GetArenaNoVirtual());
}
::tensorflow::RunOptions_Experimental* RunOptions::_slow_release_experimental() {
  if (experimental_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::RunOptions_Experimental* temp = new ::tensorflow::RunOptions_Experimental;
    temp->MergeFrom(*experimental_);
    experimental_ = NULL;
    return temp;
  }
}
::tensorflow::RunOptions_Experimental* RunOptions::unsafe_arena_release_experimental() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RunOptions.experimental)
  
  ::tensorflow::RunOptions_Experimental* temp = experimental_;
  experimental_ = NULL;
  return temp;
}
void RunOptions::_slow_set_allocated_experimental(
    ::google::protobuf::Arena* message_arena, ::tensorflow::RunOptions_Experimental** experimental) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*experimental) == NULL) {
      message_arena->Own(*experimental);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*experimental)) {
      ::tensorflow::RunOptions_Experimental* new_experimental = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::RunOptions_Experimental >(
            message_arena);
      new_experimental->CopyFrom(**experimental);
      *experimental = new_experimental;
    }
}
void RunOptions::unsafe_arena_set_allocated_experimental(
    ::tensorflow::RunOptions_Experimental* experimental) {
  if (GetArenaNoVirtual() == NULL) {
    delete experimental_;
  }
  experimental_ = experimental;
  if (experimental) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RunOptions.experimental)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunOptions::kTraceLevelFieldNumber;
const int RunOptions::kTimeoutInMsFieldNumber;
const int RunOptions::kInterOpThreadPoolFieldNumber;
const int RunOptions::kOutputPartitionGraphsFieldNumber;
const int RunOptions::kDebugOptionsFieldNumber;
const int RunOptions::kReportTensorAllocationsUponOomFieldNumber;
const int RunOptions::kExperimentalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunOptions::RunOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RunOptions)
}

RunOptions::RunOptions(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RunOptions)
}

void RunOptions::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  debug_options_ = const_cast< ::tensorflow::DebugOptions*>(&::tensorflow::DebugOptions::default_instance());
  experimental_ = const_cast< ::tensorflow::RunOptions_Experimental*>(&::tensorflow::RunOptions_Experimental::default_instance());
}

RunOptions::RunOptions(const RunOptions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.RunOptions)
}

void RunOptions::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  trace_level_ = 0;
  timeout_in_ms_ = GOOGLE_LONGLONG(0);
  inter_op_thread_pool_ = 0;
  output_partition_graphs_ = false;
  debug_options_ = NULL;
  report_tensor_allocations_upon_oom_ = false;
  experimental_ = NULL;
}

RunOptions::~RunOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.RunOptions)
  SharedDtor();
}

void RunOptions::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
    delete debug_options_;
    delete experimental_;
  }
}

void RunOptions::ArenaDtor(void* object) {
  RunOptions* _this = reinterpret_cast< RunOptions* >(object);
  (void)_this;
}
void RunOptions::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RunOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunOptions_descriptor_;
}

const RunOptions& RunOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  return *default_instance_;
}

RunOptions* RunOptions::default_instance_ = NULL;

RunOptions* RunOptions::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RunOptions>(arena);
}

void RunOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RunOptions)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RunOptions, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RunOptions*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(timeout_in_ms_, inter_op_thread_pool_);
  ZR_(output_partition_graphs_, report_tensor_allocations_upon_oom_);
  if (GetArenaNoVirtual() == NULL && debug_options_ != NULL) delete debug_options_;
  debug_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && experimental_ != NULL) delete experimental_;
  experimental_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool RunOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RunOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tensorflow.RunOptions.TraceLevel trace_level = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_trace_level(static_cast< ::tensorflow::RunOptions_TraceLevel >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timeout_in_ms;
        break;
      }

      // optional int64 timeout_in_ms = 2;
      case 2: {
        if (tag == 16) {
         parse_timeout_in_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timeout_in_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_inter_op_thread_pool;
        break;
      }

      // optional int32 inter_op_thread_pool = 3;
      case 3: {
        if (tag == 24) {
         parse_inter_op_thread_pool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inter_op_thread_pool_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_output_partition_graphs;
        break;
      }

      // optional bool output_partition_graphs = 5;
      case 5: {
        if (tag == 40) {
         parse_output_partition_graphs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &output_partition_graphs_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_debug_options;
        break;
      }

      // optional .tensorflow.DebugOptions debug_options = 6;
      case 6: {
        if (tag == 50) {
         parse_debug_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_debug_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_report_tensor_allocations_upon_oom;
        break;
      }

      // optional bool report_tensor_allocations_upon_oom = 7;
      case 7: {
        if (tag == 56) {
         parse_report_tensor_allocations_upon_oom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &report_tensor_allocations_upon_oom_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_experimental;
        break;
      }

      // optional .tensorflow.RunOptions.Experimental experimental = 8;
      case 8: {
        if (tag == 66) {
         parse_experimental:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_experimental()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RunOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RunOptions)
  return false;
#undef DO_
}

void RunOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RunOptions)
  // optional .tensorflow.RunOptions.TraceLevel trace_level = 1;
  if (this->trace_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->trace_level(), output);
  }

  // optional int64 timeout_in_ms = 2;
  if (this->timeout_in_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timeout_in_ms(), output);
  }

  // optional int32 inter_op_thread_pool = 3;
  if (this->inter_op_thread_pool() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->inter_op_thread_pool(), output);
  }

  // optional bool output_partition_graphs = 5;
  if (this->output_partition_graphs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->output_partition_graphs(), output);
  }

  // optional .tensorflow.DebugOptions debug_options = 6;
  if (this->has_debug_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->debug_options_, output);
  }

  // optional bool report_tensor_allocations_upon_oom = 7;
  if (this->report_tensor_allocations_upon_oom() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->report_tensor_allocations_upon_oom(), output);
  }

  // optional .tensorflow.RunOptions.Experimental experimental = 8;
  if (this->has_experimental()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->experimental_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.RunOptions)
}

::google::protobuf::uint8* RunOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RunOptions)
  // optional .tensorflow.RunOptions.TraceLevel trace_level = 1;
  if (this->trace_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->trace_level(), target);
  }

  // optional int64 timeout_in_ms = 2;
  if (this->timeout_in_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timeout_in_ms(), target);
  }

  // optional int32 inter_op_thread_pool = 3;
  if (this->inter_op_thread_pool() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->inter_op_thread_pool(), target);
  }

  // optional bool output_partition_graphs = 5;
  if (this->output_partition_graphs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->output_partition_graphs(), target);
  }

  // optional .tensorflow.DebugOptions debug_options = 6;
  if (this->has_debug_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->debug_options_, false, target);
  }

  // optional bool report_tensor_allocations_upon_oom = 7;
  if (this->report_tensor_allocations_upon_oom() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->report_tensor_allocations_upon_oom(), target);
  }

  // optional .tensorflow.RunOptions.Experimental experimental = 8;
  if (this->has_experimental()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->experimental_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RunOptions)
  return target;
}

int RunOptions::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RunOptions)
  int total_size = 0;

  // optional .tensorflow.RunOptions.TraceLevel trace_level = 1;
  if (this->trace_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->trace_level());
  }

  // optional int64 timeout_in_ms = 2;
  if (this->timeout_in_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timeout_in_ms());
  }

  // optional int32 inter_op_thread_pool = 3;
  if (this->inter_op_thread_pool() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->inter_op_thread_pool());
  }

  // optional bool output_partition_graphs = 5;
  if (this->output_partition_graphs() != 0) {
    total_size += 1 + 1;
  }

  // optional .tensorflow.DebugOptions debug_options = 6;
  if (this->has_debug_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->debug_options_);
  }

  // optional bool report_tensor_allocations_upon_oom = 7;
  if (this->report_tensor_allocations_upon_oom() != 0) {
    total_size += 1 + 1;
  }

  // optional .tensorflow.RunOptions.Experimental experimental = 8;
  if (this->has_experimental()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->experimental_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RunOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RunOptions* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RunOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RunOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RunOptions)
    MergeFrom(*source);
  }
}

void RunOptions::MergeFrom(const RunOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RunOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.trace_level() != 0) {
    set_trace_level(from.trace_level());
  }
  if (from.timeout_in_ms() != 0) {
    set_timeout_in_ms(from.timeout_in_ms());
  }
  if (from.inter_op_thread_pool() != 0) {
    set_inter_op_thread_pool(from.inter_op_thread_pool());
  }
  if (from.output_partition_graphs() != 0) {
    set_output_partition_graphs(from.output_partition_graphs());
  }
  if (from.has_debug_options()) {
    mutable_debug_options()->::tensorflow::DebugOptions::MergeFrom(from.debug_options());
  }
  if (from.report_tensor_allocations_upon_oom() != 0) {
    set_report_tensor_allocations_upon_oom(from.report_tensor_allocations_upon_oom());
  }
  if (from.has_experimental()) {
    mutable_experimental()->::tensorflow::RunOptions_Experimental::MergeFrom(from.experimental());
  }
}

void RunOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RunOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunOptions::CopyFrom(const RunOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RunOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunOptions::IsInitialized() const {

  return true;
}

void RunOptions::Swap(RunOptions* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RunOptions temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void RunOptions::UnsafeArenaSwap(RunOptions* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RunOptions::InternalSwap(RunOptions* other) {
  std::swap(trace_level_, other->trace_level_);
  std::swap(timeout_in_ms_, other->timeout_in_ms_);
  std::swap(inter_op_thread_pool_, other->inter_op_thread_pool_);
  std::swap(output_partition_graphs_, other->output_partition_graphs_);
  std::swap(debug_options_, other->debug_options_);
  std::swap(report_tensor_allocations_upon_oom_, other->report_tensor_allocations_upon_oom_);
  std::swap(experimental_, other->experimental_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RunOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunOptions_descriptor_;
  metadata.reflection = RunOptions_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RunOptions_Experimental_RunHandlerPoolOptions

// optional int64 priority = 1;
void RunOptions_Experimental_RunHandlerPoolOptions::clear_priority() {
  priority_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RunOptions_Experimental_RunHandlerPoolOptions::priority() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunOptions.Experimental.RunHandlerPoolOptions.priority)
  return priority_;
}
 void RunOptions_Experimental_RunHandlerPoolOptions::set_priority(::google::protobuf::int64 value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RunOptions.Experimental.RunHandlerPoolOptions.priority)
}

// -------------------------------------------------------------------

// RunOptions_Experimental

// optional int64 collective_graph_key = 1;
void RunOptions_Experimental::clear_collective_graph_key() {
  collective_graph_key_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RunOptions_Experimental::collective_graph_key() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunOptions.Experimental.collective_graph_key)
  return collective_graph_key_;
}
 void RunOptions_Experimental::set_collective_graph_key(::google::protobuf::int64 value) {
  
  collective_graph_key_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RunOptions.Experimental.collective_graph_key)
}

// optional bool use_run_handler_pool = 2;
void RunOptions_Experimental::clear_use_run_handler_pool() {
  use_run_handler_pool_ = false;
}
 bool RunOptions_Experimental::use_run_handler_pool() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunOptions.Experimental.use_run_handler_pool)
  return use_run_handler_pool_;
}
 void RunOptions_Experimental::set_use_run_handler_pool(bool value) {
  
  use_run_handler_pool_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RunOptions.Experimental.use_run_handler_pool)
}

// optional .tensorflow.RunOptions.Experimental.RunHandlerPoolOptions run_handler_pool_options = 3;
bool RunOptions_Experimental::has_run_handler_pool_options() const {
  return !_is_default_instance_ && run_handler_pool_options_ != NULL;
}
void RunOptions_Experimental::clear_run_handler_pool_options() {
  if (GetArenaNoVirtual() == NULL && run_handler_pool_options_ != NULL) delete run_handler_pool_options_;
  run_handler_pool_options_ = NULL;
}
const ::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions& RunOptions_Experimental::run_handler_pool_options() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunOptions.Experimental.run_handler_pool_options)
  return run_handler_pool_options_ != NULL ? *run_handler_pool_options_ : *default_instance_->run_handler_pool_options_;
}
::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions* RunOptions_Experimental::mutable_run_handler_pool_options() {
  
  if (run_handler_pool_options_ == NULL) {
    _slow_mutable_run_handler_pool_options();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RunOptions.Experimental.run_handler_pool_options)
  return run_handler_pool_options_;
}
::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions* RunOptions_Experimental::release_run_handler_pool_options() {
  // @@protoc_insertion_point(field_release:tensorflow.RunOptions.Experimental.run_handler_pool_options)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_run_handler_pool_options();
  } else {
    ::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions* temp = run_handler_pool_options_;
    run_handler_pool_options_ = NULL;
    return temp;
  }
}
 void RunOptions_Experimental::set_allocated_run_handler_pool_options(::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions* run_handler_pool_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete run_handler_pool_options_;
  }
  if (run_handler_pool_options != NULL) {
    _slow_set_allocated_run_handler_pool_options(message_arena, &run_handler_pool_options);
  }
  run_handler_pool_options_ = run_handler_pool_options;
  if (run_handler_pool_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunOptions.Experimental.run_handler_pool_options)
}

// -------------------------------------------------------------------

// RunOptions

// optional .tensorflow.RunOptions.TraceLevel trace_level = 1;
void RunOptions::clear_trace_level() {
  trace_level_ = 0;
}
 ::tensorflow::RunOptions_TraceLevel RunOptions::trace_level() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunOptions.trace_level)
  return static_cast< ::tensorflow::RunOptions_TraceLevel >(trace_level_);
}
 void RunOptions::set_trace_level(::tensorflow::RunOptions_TraceLevel value) {
  
  trace_level_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RunOptions.trace_level)
}

// optional int64 timeout_in_ms = 2;
void RunOptions::clear_timeout_in_ms() {
  timeout_in_ms_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RunOptions::timeout_in_ms() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunOptions.timeout_in_ms)
  return timeout_in_ms_;
}
 void RunOptions::set_timeout_in_ms(::google::protobuf::int64 value) {
  
  timeout_in_ms_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RunOptions.timeout_in_ms)
}

// optional int32 inter_op_thread_pool = 3;
void RunOptions::clear_inter_op_thread_pool() {
  inter_op_thread_pool_ = 0;
}
 ::google::protobuf::int32 RunOptions::inter_op_thread_pool() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunOptions.inter_op_thread_pool)
  return inter_op_thread_pool_;
}
 void RunOptions::set_inter_op_thread_pool(::google::protobuf::int32 value) {
  
  inter_op_thread_pool_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RunOptions.inter_op_thread_pool)
}

// optional bool output_partition_graphs = 5;
void RunOptions::clear_output_partition_graphs() {
  output_partition_graphs_ = false;
}
 bool RunOptions::output_partition_graphs() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunOptions.output_partition_graphs)
  return output_partition_graphs_;
}
 void RunOptions::set_output_partition_graphs(bool value) {
  
  output_partition_graphs_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RunOptions.output_partition_graphs)
}

// optional .tensorflow.DebugOptions debug_options = 6;
bool RunOptions::has_debug_options() const {
  return !_is_default_instance_ && debug_options_ != NULL;
}
void RunOptions::clear_debug_options() {
  if (GetArenaNoVirtual() == NULL && debug_options_ != NULL) delete debug_options_;
  debug_options_ = NULL;
}
const ::tensorflow::DebugOptions& RunOptions::debug_options() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunOptions.debug_options)
  return debug_options_ != NULL ? *debug_options_ : *default_instance_->debug_options_;
}
::tensorflow::DebugOptions* RunOptions::mutable_debug_options() {
  
  if (debug_options_ == NULL) {
    _slow_mutable_debug_options();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RunOptions.debug_options)
  return debug_options_;
}
::tensorflow::DebugOptions* RunOptions::release_debug_options() {
  // @@protoc_insertion_point(field_release:tensorflow.RunOptions.debug_options)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_debug_options();
  } else {
    ::tensorflow::DebugOptions* temp = debug_options_;
    debug_options_ = NULL;
    return temp;
  }
}
 void RunOptions::set_allocated_debug_options(::tensorflow::DebugOptions* debug_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete debug_options_;
  }
  if (debug_options != NULL) {
    _slow_set_allocated_debug_options(message_arena, &debug_options);
  }
  debug_options_ = debug_options;
  if (debug_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunOptions.debug_options)
}

// optional bool report_tensor_allocations_upon_oom = 7;
void RunOptions::clear_report_tensor_allocations_upon_oom() {
  report_tensor_allocations_upon_oom_ = false;
}
 bool RunOptions::report_tensor_allocations_upon_oom() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunOptions.report_tensor_allocations_upon_oom)
  return report_tensor_allocations_upon_oom_;
}
 void RunOptions::set_report_tensor_allocations_upon_oom(bool value) {
  
  report_tensor_allocations_upon_oom_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RunOptions.report_tensor_allocations_upon_oom)
}

// optional .tensorflow.RunOptions.Experimental experimental = 8;
bool RunOptions::has_experimental() const {
  return !_is_default_instance_ && experimental_ != NULL;
}
void RunOptions::clear_experimental() {
  if (GetArenaNoVirtual() == NULL && experimental_ != NULL) delete experimental_;
  experimental_ = NULL;
}
const ::tensorflow::RunOptions_Experimental& RunOptions::experimental() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunOptions.experimental)
  return experimental_ != NULL ? *experimental_ : *default_instance_->experimental_;
}
::tensorflow::RunOptions_Experimental* RunOptions::mutable_experimental() {
  
  if (experimental_ == NULL) {
    _slow_mutable_experimental();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RunOptions.experimental)
  return experimental_;
}
::tensorflow::RunOptions_Experimental* RunOptions::release_experimental() {
  // @@protoc_insertion_point(field_release:tensorflow.RunOptions.experimental)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_experimental();
  } else {
    ::tensorflow::RunOptions_Experimental* temp = experimental_;
    experimental_ = NULL;
    return temp;
  }
}
 void RunOptions::set_allocated_experimental(::tensorflow::RunOptions_Experimental* experimental) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete experimental_;
  }
  if (experimental != NULL) {
    _slow_set_allocated_experimental(message_arena, &experimental);
  }
  experimental_ = experimental;
  if (experimental) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunOptions.experimental)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void RunMetadata_FunctionGraphs::_slow_mutable_pre_optimization_graph() {
  pre_optimization_graph_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::GraphDef >(
      GetArenaNoVirtual());
}
::tensorflow::GraphDef* RunMetadata_FunctionGraphs::_slow_release_pre_optimization_graph() {
  if (pre_optimization_graph_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::GraphDef* temp = new ::tensorflow::GraphDef;
    temp->MergeFrom(*pre_optimization_graph_);
    pre_optimization_graph_ = NULL;
    return temp;
  }
}
::tensorflow::GraphDef* RunMetadata_FunctionGraphs::unsafe_arena_release_pre_optimization_graph() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RunMetadata.FunctionGraphs.pre_optimization_graph)
  
  ::tensorflow::GraphDef* temp = pre_optimization_graph_;
  pre_optimization_graph_ = NULL;
  return temp;
}
void RunMetadata_FunctionGraphs::_slow_set_allocated_pre_optimization_graph(
    ::google::protobuf::Arena* message_arena, ::tensorflow::GraphDef** pre_optimization_graph) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*pre_optimization_graph) == NULL) {
      message_arena->Own(*pre_optimization_graph);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*pre_optimization_graph)) {
      ::tensorflow::GraphDef* new_pre_optimization_graph = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::GraphDef >(
            message_arena);
      new_pre_optimization_graph->CopyFrom(**pre_optimization_graph);
      *pre_optimization_graph = new_pre_optimization_graph;
    }
}
void RunMetadata_FunctionGraphs::unsafe_arena_set_allocated_pre_optimization_graph(
    ::tensorflow::GraphDef* pre_optimization_graph) {
  if (GetArenaNoVirtual() == NULL) {
    delete pre_optimization_graph_;
  }
  pre_optimization_graph_ = pre_optimization_graph;
  if (pre_optimization_graph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RunMetadata.FunctionGraphs.pre_optimization_graph)
}
void RunMetadata_FunctionGraphs::_slow_mutable_post_optimization_graph() {
  post_optimization_graph_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::GraphDef >(
      GetArenaNoVirtual());
}
::tensorflow::GraphDef* RunMetadata_FunctionGraphs::_slow_release_post_optimization_graph() {
  if (post_optimization_graph_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::GraphDef* temp = new ::tensorflow::GraphDef;
    temp->MergeFrom(*post_optimization_graph_);
    post_optimization_graph_ = NULL;
    return temp;
  }
}
::tensorflow::GraphDef* RunMetadata_FunctionGraphs::unsafe_arena_release_post_optimization_graph() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RunMetadata.FunctionGraphs.post_optimization_graph)
  
  ::tensorflow::GraphDef* temp = post_optimization_graph_;
  post_optimization_graph_ = NULL;
  return temp;
}
void RunMetadata_FunctionGraphs::_slow_set_allocated_post_optimization_graph(
    ::google::protobuf::Arena* message_arena, ::tensorflow::GraphDef** post_optimization_graph) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*post_optimization_graph) == NULL) {
      message_arena->Own(*post_optimization_graph);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*post_optimization_graph)) {
      ::tensorflow::GraphDef* new_post_optimization_graph = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::GraphDef >(
            message_arena);
      new_post_optimization_graph->CopyFrom(**post_optimization_graph);
      *post_optimization_graph = new_post_optimization_graph;
    }
}
void RunMetadata_FunctionGraphs::unsafe_arena_set_allocated_post_optimization_graph(
    ::tensorflow::GraphDef* post_optimization_graph) {
  if (GetArenaNoVirtual() == NULL) {
    delete post_optimization_graph_;
  }
  post_optimization_graph_ = post_optimization_graph;
  if (post_optimization_graph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RunMetadata.FunctionGraphs.post_optimization_graph)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunMetadata_FunctionGraphs::kPartitionGraphsFieldNumber;
const int RunMetadata_FunctionGraphs::kPreOptimizationGraphFieldNumber;
const int RunMetadata_FunctionGraphs::kPostOptimizationGraphFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunMetadata_FunctionGraphs::RunMetadata_FunctionGraphs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RunMetadata.FunctionGraphs)
}

RunMetadata_FunctionGraphs::RunMetadata_FunctionGraphs(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  partition_graphs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RunMetadata.FunctionGraphs)
}

void RunMetadata_FunctionGraphs::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  pre_optimization_graph_ = const_cast< ::tensorflow::GraphDef*>(&::tensorflow::GraphDef::default_instance());
  post_optimization_graph_ = const_cast< ::tensorflow::GraphDef*>(&::tensorflow::GraphDef::default_instance());
}

RunMetadata_FunctionGraphs::RunMetadata_FunctionGraphs(const RunMetadata_FunctionGraphs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.RunMetadata.FunctionGraphs)
}

void RunMetadata_FunctionGraphs::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  pre_optimization_graph_ = NULL;
  post_optimization_graph_ = NULL;
}

RunMetadata_FunctionGraphs::~RunMetadata_FunctionGraphs() {
  // @@protoc_insertion_point(destructor:tensorflow.RunMetadata.FunctionGraphs)
  SharedDtor();
}

void RunMetadata_FunctionGraphs::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
    delete pre_optimization_graph_;
    delete post_optimization_graph_;
  }
}

void RunMetadata_FunctionGraphs::ArenaDtor(void* object) {
  RunMetadata_FunctionGraphs* _this = reinterpret_cast< RunMetadata_FunctionGraphs* >(object);
  (void)_this;
}
void RunMetadata_FunctionGraphs::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RunMetadata_FunctionGraphs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunMetadata_FunctionGraphs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunMetadata_FunctionGraphs_descriptor_;
}

const RunMetadata_FunctionGraphs& RunMetadata_FunctionGraphs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  return *default_instance_;
}

RunMetadata_FunctionGraphs* RunMetadata_FunctionGraphs::default_instance_ = NULL;

RunMetadata_FunctionGraphs* RunMetadata_FunctionGraphs::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RunMetadata_FunctionGraphs>(arena);
}

void RunMetadata_FunctionGraphs::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RunMetadata.FunctionGraphs)
  if (GetArenaNoVirtual() == NULL && pre_optimization_graph_ != NULL) delete pre_optimization_graph_;
  pre_optimization_graph_ = NULL;
  if (GetArenaNoVirtual() == NULL && post_optimization_graph_ != NULL) delete post_optimization_graph_;
  post_optimization_graph_ = NULL;
  partition_graphs_.Clear();
}

bool RunMetadata_FunctionGraphs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RunMetadata.FunctionGraphs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.GraphDef partition_graphs = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_partition_graphs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_partition_graphs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_partition_graphs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_pre_optimization_graph;
        break;
      }

      // optional .tensorflow.GraphDef pre_optimization_graph = 2;
      case 2: {
        if (tag == 18) {
         parse_pre_optimization_graph:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pre_optimization_graph()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_post_optimization_graph;
        break;
      }

      // optional .tensorflow.GraphDef post_optimization_graph = 3;
      case 3: {
        if (tag == 26) {
         parse_post_optimization_graph:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_post_optimization_graph()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RunMetadata.FunctionGraphs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RunMetadata.FunctionGraphs)
  return false;
#undef DO_
}

void RunMetadata_FunctionGraphs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RunMetadata.FunctionGraphs)
  // repeated .tensorflow.GraphDef partition_graphs = 1;
  for (unsigned int i = 0, n = this->partition_graphs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->partition_graphs(i), output);
  }

  // optional .tensorflow.GraphDef pre_optimization_graph = 2;
  if (this->has_pre_optimization_graph()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pre_optimization_graph_, output);
  }

  // optional .tensorflow.GraphDef post_optimization_graph = 3;
  if (this->has_post_optimization_graph()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->post_optimization_graph_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.RunMetadata.FunctionGraphs)
}

::google::protobuf::uint8* RunMetadata_FunctionGraphs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RunMetadata.FunctionGraphs)
  // repeated .tensorflow.GraphDef partition_graphs = 1;
  for (unsigned int i = 0, n = this->partition_graphs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->partition_graphs(i), false, target);
  }

  // optional .tensorflow.GraphDef pre_optimization_graph = 2;
  if (this->has_pre_optimization_graph()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->pre_optimization_graph_, false, target);
  }

  // optional .tensorflow.GraphDef post_optimization_graph = 3;
  if (this->has_post_optimization_graph()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->post_optimization_graph_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RunMetadata.FunctionGraphs)
  return target;
}

int RunMetadata_FunctionGraphs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RunMetadata.FunctionGraphs)
  int total_size = 0;

  // optional .tensorflow.GraphDef pre_optimization_graph = 2;
  if (this->has_pre_optimization_graph()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pre_optimization_graph_);
  }

  // optional .tensorflow.GraphDef post_optimization_graph = 3;
  if (this->has_post_optimization_graph()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->post_optimization_graph_);
  }

  // repeated .tensorflow.GraphDef partition_graphs = 1;
  total_size += 1 * this->partition_graphs_size();
  for (int i = 0; i < this->partition_graphs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->partition_graphs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunMetadata_FunctionGraphs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RunMetadata.FunctionGraphs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RunMetadata_FunctionGraphs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RunMetadata_FunctionGraphs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RunMetadata.FunctionGraphs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RunMetadata.FunctionGraphs)
    MergeFrom(*source);
  }
}

void RunMetadata_FunctionGraphs::MergeFrom(const RunMetadata_FunctionGraphs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RunMetadata.FunctionGraphs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  partition_graphs_.MergeFrom(from.partition_graphs_);
  if (from.has_pre_optimization_graph()) {
    mutable_pre_optimization_graph()->::tensorflow::GraphDef::MergeFrom(from.pre_optimization_graph());
  }
  if (from.has_post_optimization_graph()) {
    mutable_post_optimization_graph()->::tensorflow::GraphDef::MergeFrom(from.post_optimization_graph());
  }
}

void RunMetadata_FunctionGraphs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RunMetadata.FunctionGraphs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunMetadata_FunctionGraphs::CopyFrom(const RunMetadata_FunctionGraphs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RunMetadata.FunctionGraphs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunMetadata_FunctionGraphs::IsInitialized() const {

  return true;
}

void RunMetadata_FunctionGraphs::Swap(RunMetadata_FunctionGraphs* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RunMetadata_FunctionGraphs temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void RunMetadata_FunctionGraphs::UnsafeArenaSwap(RunMetadata_FunctionGraphs* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RunMetadata_FunctionGraphs::InternalSwap(RunMetadata_FunctionGraphs* other) {
  partition_graphs_.UnsafeArenaSwap(&other->partition_graphs_);
  std::swap(pre_optimization_graph_, other->pre_optimization_graph_);
  std::swap(post_optimization_graph_, other->post_optimization_graph_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RunMetadata_FunctionGraphs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunMetadata_FunctionGraphs_descriptor_;
  metadata.reflection = RunMetadata_FunctionGraphs_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

void RunMetadata::_slow_mutable_step_stats() {
  step_stats_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::StepStats >(
      GetArenaNoVirtual());
}
::tensorflow::StepStats* RunMetadata::_slow_release_step_stats() {
  if (step_stats_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::StepStats* temp = new ::tensorflow::StepStats;
    temp->MergeFrom(*step_stats_);
    step_stats_ = NULL;
    return temp;
  }
}
::tensorflow::StepStats* RunMetadata::unsafe_arena_release_step_stats() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RunMetadata.step_stats)
  
  ::tensorflow::StepStats* temp = step_stats_;
  step_stats_ = NULL;
  return temp;
}
void RunMetadata::_slow_set_allocated_step_stats(
    ::google::protobuf::Arena* message_arena, ::tensorflow::StepStats** step_stats) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*step_stats) == NULL) {
      message_arena->Own(*step_stats);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*step_stats)) {
      ::tensorflow::StepStats* new_step_stats = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::StepStats >(
            message_arena);
      new_step_stats->CopyFrom(**step_stats);
      *step_stats = new_step_stats;
    }
}
void RunMetadata::unsafe_arena_set_allocated_step_stats(
    ::tensorflow::StepStats* step_stats) {
  if (GetArenaNoVirtual() == NULL) {
    delete step_stats_;
  }
  step_stats_ = step_stats;
  if (step_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RunMetadata.step_stats)
}
void RunMetadata::_slow_mutable_cost_graph() {
  cost_graph_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::CostGraphDef >(
      GetArenaNoVirtual());
}
::tensorflow::CostGraphDef* RunMetadata::_slow_release_cost_graph() {
  if (cost_graph_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::CostGraphDef* temp = new ::tensorflow::CostGraphDef;
    temp->MergeFrom(*cost_graph_);
    cost_graph_ = NULL;
    return temp;
  }
}
::tensorflow::CostGraphDef* RunMetadata::unsafe_arena_release_cost_graph() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RunMetadata.cost_graph)
  
  ::tensorflow::CostGraphDef* temp = cost_graph_;
  cost_graph_ = NULL;
  return temp;
}
void RunMetadata::_slow_set_allocated_cost_graph(
    ::google::protobuf::Arena* message_arena, ::tensorflow::CostGraphDef** cost_graph) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*cost_graph) == NULL) {
      message_arena->Own(*cost_graph);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*cost_graph)) {
      ::tensorflow::CostGraphDef* new_cost_graph = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::CostGraphDef >(
            message_arena);
      new_cost_graph->CopyFrom(**cost_graph);
      *cost_graph = new_cost_graph;
    }
}
void RunMetadata::unsafe_arena_set_allocated_cost_graph(
    ::tensorflow::CostGraphDef* cost_graph) {
  if (GetArenaNoVirtual() == NULL) {
    delete cost_graph_;
  }
  cost_graph_ = cost_graph;
  if (cost_graph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RunMetadata.cost_graph)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunMetadata::kStepStatsFieldNumber;
const int RunMetadata::kCostGraphFieldNumber;
const int RunMetadata::kPartitionGraphsFieldNumber;
const int RunMetadata::kFunctionGraphsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunMetadata::RunMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RunMetadata)
}

RunMetadata::RunMetadata(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  partition_graphs_(arena),
  function_graphs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RunMetadata)
}

void RunMetadata::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  step_stats_ = const_cast< ::tensorflow::StepStats*>(&::tensorflow::StepStats::default_instance());
  cost_graph_ = const_cast< ::tensorflow::CostGraphDef*>(&::tensorflow::CostGraphDef::default_instance());
}

RunMetadata::RunMetadata(const RunMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.RunMetadata)
}

void RunMetadata::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  step_stats_ = NULL;
  cost_graph_ = NULL;
}

RunMetadata::~RunMetadata() {
  // @@protoc_insertion_point(destructor:tensorflow.RunMetadata)
  SharedDtor();
}

void RunMetadata::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
    delete step_stats_;
    delete cost_graph_;
  }
}

void RunMetadata::ArenaDtor(void* object) {
  RunMetadata* _this = reinterpret_cast< RunMetadata* >(object);
  (void)_this;
}
void RunMetadata::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RunMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunMetadata_descriptor_;
}

const RunMetadata& RunMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  return *default_instance_;
}

RunMetadata* RunMetadata::default_instance_ = NULL;

RunMetadata* RunMetadata::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RunMetadata>(arena);
}

void RunMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RunMetadata)
  if (GetArenaNoVirtual() == NULL && step_stats_ != NULL) delete step_stats_;
  step_stats_ = NULL;
  if (GetArenaNoVirtual() == NULL && cost_graph_ != NULL) delete cost_graph_;
  cost_graph_ = NULL;
  partition_graphs_.Clear();
  function_graphs_.Clear();
}

bool RunMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RunMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tensorflow.StepStats step_stats = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_step_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cost_graph;
        break;
      }

      // optional .tensorflow.CostGraphDef cost_graph = 2;
      case 2: {
        if (tag == 18) {
         parse_cost_graph:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cost_graph()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_partition_graphs;
        break;
      }

      // repeated .tensorflow.GraphDef partition_graphs = 3;
      case 3: {
        if (tag == 26) {
         parse_partition_graphs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_partition_graphs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_partition_graphs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_partition_graphs;
        if (input->ExpectTag(34)) goto parse_loop_function_graphs;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .tensorflow.RunMetadata.FunctionGraphs function_graphs = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_function_graphs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_function_graphs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_function_graphs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RunMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RunMetadata)
  return false;
#undef DO_
}

void RunMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RunMetadata)
  // optional .tensorflow.StepStats step_stats = 1;
  if (this->has_step_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->step_stats_, output);
  }

  // optional .tensorflow.CostGraphDef cost_graph = 2;
  if (this->has_cost_graph()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->cost_graph_, output);
  }

  // repeated .tensorflow.GraphDef partition_graphs = 3;
  for (unsigned int i = 0, n = this->partition_graphs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->partition_graphs(i), output);
  }

  // repeated .tensorflow.RunMetadata.FunctionGraphs function_graphs = 4;
  for (unsigned int i = 0, n = this->function_graphs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->function_graphs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.RunMetadata)
}

::google::protobuf::uint8* RunMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RunMetadata)
  // optional .tensorflow.StepStats step_stats = 1;
  if (this->has_step_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->step_stats_, false, target);
  }

  // optional .tensorflow.CostGraphDef cost_graph = 2;
  if (this->has_cost_graph()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->cost_graph_, false, target);
  }

  // repeated .tensorflow.GraphDef partition_graphs = 3;
  for (unsigned int i = 0, n = this->partition_graphs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->partition_graphs(i), false, target);
  }

  // repeated .tensorflow.RunMetadata.FunctionGraphs function_graphs = 4;
  for (unsigned int i = 0, n = this->function_graphs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->function_graphs(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RunMetadata)
  return target;
}

int RunMetadata::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RunMetadata)
  int total_size = 0;

  // optional .tensorflow.StepStats step_stats = 1;
  if (this->has_step_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->step_stats_);
  }

  // optional .tensorflow.CostGraphDef cost_graph = 2;
  if (this->has_cost_graph()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cost_graph_);
  }

  // repeated .tensorflow.GraphDef partition_graphs = 3;
  total_size += 1 * this->partition_graphs_size();
  for (int i = 0; i < this->partition_graphs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->partition_graphs(i));
  }

  // repeated .tensorflow.RunMetadata.FunctionGraphs function_graphs = 4;
  total_size += 1 * this->function_graphs_size();
  for (int i = 0; i < this->function_graphs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->function_graphs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RunMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RunMetadata* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RunMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RunMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RunMetadata)
    MergeFrom(*source);
  }
}

void RunMetadata::MergeFrom(const RunMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RunMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  partition_graphs_.MergeFrom(from.partition_graphs_);
  function_graphs_.MergeFrom(from.function_graphs_);
  if (from.has_step_stats()) {
    mutable_step_stats()->::tensorflow::StepStats::MergeFrom(from.step_stats());
  }
  if (from.has_cost_graph()) {
    mutable_cost_graph()->::tensorflow::CostGraphDef::MergeFrom(from.cost_graph());
  }
}

void RunMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RunMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunMetadata::CopyFrom(const RunMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RunMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunMetadata::IsInitialized() const {

  return true;
}

void RunMetadata::Swap(RunMetadata* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RunMetadata temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void RunMetadata::UnsafeArenaSwap(RunMetadata* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RunMetadata::InternalSwap(RunMetadata* other) {
  std::swap(step_stats_, other->step_stats_);
  std::swap(cost_graph_, other->cost_graph_);
  partition_graphs_.UnsafeArenaSwap(&other->partition_graphs_);
  function_graphs_.UnsafeArenaSwap(&other->function_graphs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RunMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunMetadata_descriptor_;
  metadata.reflection = RunMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RunMetadata_FunctionGraphs

// repeated .tensorflow.GraphDef partition_graphs = 1;
int RunMetadata_FunctionGraphs::partition_graphs_size() const {
  return partition_graphs_.size();
}
void RunMetadata_FunctionGraphs::clear_partition_graphs() {
  partition_graphs_.Clear();
}
const ::tensorflow::GraphDef& RunMetadata_FunctionGraphs::partition_graphs(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.RunMetadata.FunctionGraphs.partition_graphs)
  return partition_graphs_.Get(index);
}
::tensorflow::GraphDef* RunMetadata_FunctionGraphs::mutable_partition_graphs(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.RunMetadata.FunctionGraphs.partition_graphs)
  return partition_graphs_.Mutable(index);
}
::tensorflow::GraphDef* RunMetadata_FunctionGraphs::add_partition_graphs() {
  // @@protoc_insertion_point(field_add:tensorflow.RunMetadata.FunctionGraphs.partition_graphs)
  return partition_graphs_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::GraphDef >*
RunMetadata_FunctionGraphs::mutable_partition_graphs() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.RunMetadata.FunctionGraphs.partition_graphs)
  return &partition_graphs_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphDef >&
RunMetadata_FunctionGraphs::partition_graphs() const {
  // @@protoc_insertion_point(field_list:tensorflow.RunMetadata.FunctionGraphs.partition_graphs)
  return partition_graphs_;
}

// optional .tensorflow.GraphDef pre_optimization_graph = 2;
bool RunMetadata_FunctionGraphs::has_pre_optimization_graph() const {
  return !_is_default_instance_ && pre_optimization_graph_ != NULL;
}
void RunMetadata_FunctionGraphs::clear_pre_optimization_graph() {
  if (GetArenaNoVirtual() == NULL && pre_optimization_graph_ != NULL) delete pre_optimization_graph_;
  pre_optimization_graph_ = NULL;
}
const ::tensorflow::GraphDef& RunMetadata_FunctionGraphs::pre_optimization_graph() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunMetadata.FunctionGraphs.pre_optimization_graph)
  return pre_optimization_graph_ != NULL ? *pre_optimization_graph_ : *default_instance_->pre_optimization_graph_;
}
::tensorflow::GraphDef* RunMetadata_FunctionGraphs::mutable_pre_optimization_graph() {
  
  if (pre_optimization_graph_ == NULL) {
    _slow_mutable_pre_optimization_graph();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RunMetadata.FunctionGraphs.pre_optimization_graph)
  return pre_optimization_graph_;
}
::tensorflow::GraphDef* RunMetadata_FunctionGraphs::release_pre_optimization_graph() {
  // @@protoc_insertion_point(field_release:tensorflow.RunMetadata.FunctionGraphs.pre_optimization_graph)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_pre_optimization_graph();
  } else {
    ::tensorflow::GraphDef* temp = pre_optimization_graph_;
    pre_optimization_graph_ = NULL;
    return temp;
  }
}
 void RunMetadata_FunctionGraphs::set_allocated_pre_optimization_graph(::tensorflow::GraphDef* pre_optimization_graph) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pre_optimization_graph_;
  }
  if (pre_optimization_graph != NULL) {
    _slow_set_allocated_pre_optimization_graph(message_arena, &pre_optimization_graph);
  }
  pre_optimization_graph_ = pre_optimization_graph;
  if (pre_optimization_graph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunMetadata.FunctionGraphs.pre_optimization_graph)
}

// optional .tensorflow.GraphDef post_optimization_graph = 3;
bool RunMetadata_FunctionGraphs::has_post_optimization_graph() const {
  return !_is_default_instance_ && post_optimization_graph_ != NULL;
}
void RunMetadata_FunctionGraphs::clear_post_optimization_graph() {
  if (GetArenaNoVirtual() == NULL && post_optimization_graph_ != NULL) delete post_optimization_graph_;
  post_optimization_graph_ = NULL;
}
const ::tensorflow::GraphDef& RunMetadata_FunctionGraphs::post_optimization_graph() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunMetadata.FunctionGraphs.post_optimization_graph)
  return post_optimization_graph_ != NULL ? *post_optimization_graph_ : *default_instance_->post_optimization_graph_;
}
::tensorflow::GraphDef* RunMetadata_FunctionGraphs::mutable_post_optimization_graph() {
  
  if (post_optimization_graph_ == NULL) {
    _slow_mutable_post_optimization_graph();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RunMetadata.FunctionGraphs.post_optimization_graph)
  return post_optimization_graph_;
}
::tensorflow::GraphDef* RunMetadata_FunctionGraphs::release_post_optimization_graph() {
  // @@protoc_insertion_point(field_release:tensorflow.RunMetadata.FunctionGraphs.post_optimization_graph)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_post_optimization_graph();
  } else {
    ::tensorflow::GraphDef* temp = post_optimization_graph_;
    post_optimization_graph_ = NULL;
    return temp;
  }
}
 void RunMetadata_FunctionGraphs::set_allocated_post_optimization_graph(::tensorflow::GraphDef* post_optimization_graph) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete post_optimization_graph_;
  }
  if (post_optimization_graph != NULL) {
    _slow_set_allocated_post_optimization_graph(message_arena, &post_optimization_graph);
  }
  post_optimization_graph_ = post_optimization_graph;
  if (post_optimization_graph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunMetadata.FunctionGraphs.post_optimization_graph)
}

// -------------------------------------------------------------------

// RunMetadata

// optional .tensorflow.StepStats step_stats = 1;
bool RunMetadata::has_step_stats() const {
  return !_is_default_instance_ && step_stats_ != NULL;
}
void RunMetadata::clear_step_stats() {
  if (GetArenaNoVirtual() == NULL && step_stats_ != NULL) delete step_stats_;
  step_stats_ = NULL;
}
const ::tensorflow::StepStats& RunMetadata::step_stats() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunMetadata.step_stats)
  return step_stats_ != NULL ? *step_stats_ : *default_instance_->step_stats_;
}
::tensorflow::StepStats* RunMetadata::mutable_step_stats() {
  
  if (step_stats_ == NULL) {
    _slow_mutable_step_stats();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RunMetadata.step_stats)
  return step_stats_;
}
::tensorflow::StepStats* RunMetadata::release_step_stats() {
  // @@protoc_insertion_point(field_release:tensorflow.RunMetadata.step_stats)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_step_stats();
  } else {
    ::tensorflow::StepStats* temp = step_stats_;
    step_stats_ = NULL;
    return temp;
  }
}
 void RunMetadata::set_allocated_step_stats(::tensorflow::StepStats* step_stats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete step_stats_;
  }
  if (step_stats != NULL) {
    _slow_set_allocated_step_stats(message_arena, &step_stats);
  }
  step_stats_ = step_stats;
  if (step_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunMetadata.step_stats)
}

// optional .tensorflow.CostGraphDef cost_graph = 2;
bool RunMetadata::has_cost_graph() const {
  return !_is_default_instance_ && cost_graph_ != NULL;
}
void RunMetadata::clear_cost_graph() {
  if (GetArenaNoVirtual() == NULL && cost_graph_ != NULL) delete cost_graph_;
  cost_graph_ = NULL;
}
const ::tensorflow::CostGraphDef& RunMetadata::cost_graph() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunMetadata.cost_graph)
  return cost_graph_ != NULL ? *cost_graph_ : *default_instance_->cost_graph_;
}
::tensorflow::CostGraphDef* RunMetadata::mutable_cost_graph() {
  
  if (cost_graph_ == NULL) {
    _slow_mutable_cost_graph();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RunMetadata.cost_graph)
  return cost_graph_;
}
::tensorflow::CostGraphDef* RunMetadata::release_cost_graph() {
  // @@protoc_insertion_point(field_release:tensorflow.RunMetadata.cost_graph)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_cost_graph();
  } else {
    ::tensorflow::CostGraphDef* temp = cost_graph_;
    cost_graph_ = NULL;
    return temp;
  }
}
 void RunMetadata::set_allocated_cost_graph(::tensorflow::CostGraphDef* cost_graph) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cost_graph_;
  }
  if (cost_graph != NULL) {
    _slow_set_allocated_cost_graph(message_arena, &cost_graph);
  }
  cost_graph_ = cost_graph;
  if (cost_graph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunMetadata.cost_graph)
}

// repeated .tensorflow.GraphDef partition_graphs = 3;
int RunMetadata::partition_graphs_size() const {
  return partition_graphs_.size();
}
void RunMetadata::clear_partition_graphs() {
  partition_graphs_.Clear();
}
const ::tensorflow::GraphDef& RunMetadata::partition_graphs(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.RunMetadata.partition_graphs)
  return partition_graphs_.Get(index);
}
::tensorflow::GraphDef* RunMetadata::mutable_partition_graphs(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.RunMetadata.partition_graphs)
  return partition_graphs_.Mutable(index);
}
::tensorflow::GraphDef* RunMetadata::add_partition_graphs() {
  // @@protoc_insertion_point(field_add:tensorflow.RunMetadata.partition_graphs)
  return partition_graphs_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::GraphDef >*
RunMetadata::mutable_partition_graphs() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.RunMetadata.partition_graphs)
  return &partition_graphs_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphDef >&
RunMetadata::partition_graphs() const {
  // @@protoc_insertion_point(field_list:tensorflow.RunMetadata.partition_graphs)
  return partition_graphs_;
}

// repeated .tensorflow.RunMetadata.FunctionGraphs function_graphs = 4;
int RunMetadata::function_graphs_size() const {
  return function_graphs_.size();
}
void RunMetadata::clear_function_graphs() {
  function_graphs_.Clear();
}
const ::tensorflow::RunMetadata_FunctionGraphs& RunMetadata::function_graphs(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.RunMetadata.function_graphs)
  return function_graphs_.Get(index);
}
::tensorflow::RunMetadata_FunctionGraphs* RunMetadata::mutable_function_graphs(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.RunMetadata.function_graphs)
  return function_graphs_.Mutable(index);
}
::tensorflow::RunMetadata_FunctionGraphs* RunMetadata::add_function_graphs() {
  // @@protoc_insertion_point(field_add:tensorflow.RunMetadata.function_graphs)
  return function_graphs_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::RunMetadata_FunctionGraphs >*
RunMetadata::mutable_function_graphs() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.RunMetadata.function_graphs)
  return &function_graphs_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::RunMetadata_FunctionGraphs >&
RunMetadata::function_graphs() const {
  // @@protoc_insertion_point(field_list:tensorflow.RunMetadata.function_graphs)
  return function_graphs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorConnection::kFromTensorFieldNumber;
const int TensorConnection::kToTensorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorConnection::TensorConnection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.TensorConnection)
}

TensorConnection::TensorConnection(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.TensorConnection)
}

void TensorConnection::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TensorConnection::TensorConnection(const TensorConnection& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.TensorConnection)
}

void TensorConnection::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  from_tensor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_tensor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TensorConnection::~TensorConnection() {
  // @@protoc_insertion_point(destructor:tensorflow.TensorConnection)
  SharedDtor();
}

void TensorConnection::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  from_tensor_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  to_tensor_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void TensorConnection::ArenaDtor(void* object) {
  TensorConnection* _this = reinterpret_cast< TensorConnection* >(object);
  (void)_this;
}
void TensorConnection::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TensorConnection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TensorConnection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TensorConnection_descriptor_;
}

const TensorConnection& TensorConnection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  return *default_instance_;
}

TensorConnection* TensorConnection::default_instance_ = NULL;

TensorConnection* TensorConnection::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TensorConnection>(arena);
}

void TensorConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TensorConnection)
  from_tensor_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  to_tensor_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool TensorConnection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.TensorConnection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string from_tensor = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_tensor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from_tensor().data(), this->from_tensor().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.TensorConnection.from_tensor"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_to_tensor;
        break;
      }

      // optional string to_tensor = 2;
      case 2: {
        if (tag == 18) {
         parse_to_tensor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_tensor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->to_tensor().data(), this->to_tensor().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.TensorConnection.to_tensor"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.TensorConnection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.TensorConnection)
  return false;
#undef DO_
}

void TensorConnection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.TensorConnection)
  // optional string from_tensor = 1;
  if (this->from_tensor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_tensor().data(), this->from_tensor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TensorConnection.from_tensor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->from_tensor(), output);
  }

  // optional string to_tensor = 2;
  if (this->to_tensor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to_tensor().data(), this->to_tensor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TensorConnection.to_tensor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->to_tensor(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.TensorConnection)
}

::google::protobuf::uint8* TensorConnection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TensorConnection)
  // optional string from_tensor = 1;
  if (this->from_tensor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_tensor().data(), this->from_tensor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TensorConnection.from_tensor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from_tensor(), target);
  }

  // optional string to_tensor = 2;
  if (this->to_tensor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to_tensor().data(), this->to_tensor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TensorConnection.to_tensor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->to_tensor(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TensorConnection)
  return target;
}

int TensorConnection::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TensorConnection)
  int total_size = 0;

  // optional string from_tensor = 1;
  if (this->from_tensor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_tensor());
  }

  // optional string to_tensor = 2;
  if (this->to_tensor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->to_tensor());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TensorConnection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.TensorConnection)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TensorConnection* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TensorConnection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.TensorConnection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.TensorConnection)
    MergeFrom(*source);
  }
}

void TensorConnection::MergeFrom(const TensorConnection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TensorConnection)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.from_tensor().size() > 0) {
    set_from_tensor(from.from_tensor());
  }
  if (from.to_tensor().size() > 0) {
    set_to_tensor(from.to_tensor());
  }
}

void TensorConnection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.TensorConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorConnection::CopyFrom(const TensorConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TensorConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorConnection::IsInitialized() const {

  return true;
}

void TensorConnection::Swap(TensorConnection* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TensorConnection temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void TensorConnection::UnsafeArenaSwap(TensorConnection* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TensorConnection::InternalSwap(TensorConnection* other) {
  from_tensor_.Swap(&other->from_tensor_);
  to_tensor_.Swap(&other->to_tensor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TensorConnection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TensorConnection_descriptor_;
  metadata.reflection = TensorConnection_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TensorConnection

// optional string from_tensor = 1;
void TensorConnection::clear_from_tensor() {
  from_tensor_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& TensorConnection::from_tensor() const {
  // @@protoc_insertion_point(field_get:tensorflow.TensorConnection.from_tensor)
  return from_tensor_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TensorConnection::set_from_tensor(const ::std::string& value) {
  
  from_tensor_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.TensorConnection.from_tensor)
}
 void TensorConnection::set_from_tensor(const char* value) {
  
  from_tensor_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.TensorConnection.from_tensor)
}
 void TensorConnection::set_from_tensor(const char* value,
    size_t size) {
  
  from_tensor_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.TensorConnection.from_tensor)
}
 ::std::string* TensorConnection::mutable_from_tensor() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.TensorConnection.from_tensor)
  return from_tensor_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* TensorConnection::release_from_tensor() {
  // @@protoc_insertion_point(field_release:tensorflow.TensorConnection.from_tensor)
  
  return from_tensor_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* TensorConnection::unsafe_arena_release_from_tensor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.TensorConnection.from_tensor)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return from_tensor_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void TensorConnection::set_allocated_from_tensor(::std::string* from_tensor) {
  if (from_tensor != NULL) {
    
  } else {
    
  }
  from_tensor_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_tensor,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TensorConnection.from_tensor)
}
 void TensorConnection::unsafe_arena_set_allocated_from_tensor(
    ::std::string* from_tensor) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (from_tensor != NULL) {
    
  } else {
    
  }
  from_tensor_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      from_tensor, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.TensorConnection.from_tensor)
}

// optional string to_tensor = 2;
void TensorConnection::clear_to_tensor() {
  to_tensor_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& TensorConnection::to_tensor() const {
  // @@protoc_insertion_point(field_get:tensorflow.TensorConnection.to_tensor)
  return to_tensor_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TensorConnection::set_to_tensor(const ::std::string& value) {
  
  to_tensor_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.TensorConnection.to_tensor)
}
 void TensorConnection::set_to_tensor(const char* value) {
  
  to_tensor_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.TensorConnection.to_tensor)
}
 void TensorConnection::set_to_tensor(const char* value,
    size_t size) {
  
  to_tensor_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.TensorConnection.to_tensor)
}
 ::std::string* TensorConnection::mutable_to_tensor() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.TensorConnection.to_tensor)
  return to_tensor_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* TensorConnection::release_to_tensor() {
  // @@protoc_insertion_point(field_release:tensorflow.TensorConnection.to_tensor)
  
  return to_tensor_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* TensorConnection::unsafe_arena_release_to_tensor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.TensorConnection.to_tensor)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return to_tensor_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void TensorConnection::set_allocated_to_tensor(::std::string* to_tensor) {
  if (to_tensor != NULL) {
    
  } else {
    
  }
  to_tensor_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_tensor,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TensorConnection.to_tensor)
}
 void TensorConnection::unsafe_arena_set_allocated_to_tensor(
    ::std::string* to_tensor) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (to_tensor != NULL) {
    
  } else {
    
  }
  to_tensor_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      to_tensor, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.TensorConnection.to_tensor)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void CallableOptions::_slow_mutable_run_options() {
  run_options_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::RunOptions >(
      GetArenaNoVirtual());
}
::tensorflow::RunOptions* CallableOptions::_slow_release_run_options() {
  if (run_options_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::RunOptions* temp = new ::tensorflow::RunOptions;
    temp->MergeFrom(*run_options_);
    run_options_ = NULL;
    return temp;
  }
}
::tensorflow::RunOptions* CallableOptions::unsafe_arena_release_run_options() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.CallableOptions.run_options)
  
  ::tensorflow::RunOptions* temp = run_options_;
  run_options_ = NULL;
  return temp;
}
void CallableOptions::_slow_set_allocated_run_options(
    ::google::protobuf::Arena* message_arena, ::tensorflow::RunOptions** run_options) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*run_options) == NULL) {
      message_arena->Own(*run_options);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*run_options)) {
      ::tensorflow::RunOptions* new_run_options = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::RunOptions >(
            message_arena);
      new_run_options->CopyFrom(**run_options);
      *run_options = new_run_options;
    }
}
void CallableOptions::unsafe_arena_set_allocated_run_options(
    ::tensorflow::RunOptions* run_options) {
  if (GetArenaNoVirtual() == NULL) {
    delete run_options_;
  }
  run_options_ = run_options;
  if (run_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.CallableOptions.run_options)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CallableOptions::kFeedFieldNumber;
const int CallableOptions::kFetchFieldNumber;
const int CallableOptions::kTargetFieldNumber;
const int CallableOptions::kRunOptionsFieldNumber;
const int CallableOptions::kTensorConnectionFieldNumber;
const int CallableOptions::kFeedDevicesFieldNumber;
const int CallableOptions::kFetchDevicesFieldNumber;
const int CallableOptions::kFetchSkipSyncFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CallableOptions::CallableOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CallableOptions)
}

CallableOptions::CallableOptions(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  feed_(arena),
  fetch_(arena),
  target_(arena),
  tensor_connection_(arena),
  feed_devices_(arena),
  fetch_devices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CallableOptions)
}

void CallableOptions::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  run_options_ = const_cast< ::tensorflow::RunOptions*>(&::tensorflow::RunOptions::default_instance());
}

CallableOptions::CallableOptions(const CallableOptions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.CallableOptions)
}

void CallableOptions::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  run_options_ = NULL;
  feed_devices_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  feed_devices_.SetEntryDescriptor(
      &::tensorflow::CallableOptions_FeedDevicesEntry_descriptor_);
  fetch_devices_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  fetch_devices_.SetEntryDescriptor(
      &::tensorflow::CallableOptions_FetchDevicesEntry_descriptor_);
  fetch_skip_sync_ = false;
}

CallableOptions::~CallableOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.CallableOptions)
  SharedDtor();
}

void CallableOptions::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
    delete run_options_;
  }
}

void CallableOptions::ArenaDtor(void* object) {
  CallableOptions* _this = reinterpret_cast< CallableOptions* >(object);
  (void)_this;
}
void CallableOptions::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CallableOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CallableOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CallableOptions_descriptor_;
}

const CallableOptions& CallableOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  return *default_instance_;
}

CallableOptions* CallableOptions::default_instance_ = NULL;

CallableOptions* CallableOptions::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CallableOptions>(arena);
}

void CallableOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CallableOptions)
  if (GetArenaNoVirtual() == NULL && run_options_ != NULL) delete run_options_;
  run_options_ = NULL;
  fetch_skip_sync_ = false;
  feed_.Clear();
  fetch_.Clear();
  target_.Clear();
  tensor_connection_.Clear();
  feed_devices_.Clear();
  fetch_devices_.Clear();
}

bool CallableOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CallableOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string feed = 1;
      case 1: {
        if (tag == 10) {
         parse_feed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_feed()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->feed(this->feed_size() - 1).data(),
            this->feed(this->feed_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.CallableOptions.feed"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_feed;
        if (input->ExpectTag(18)) goto parse_fetch;
        break;
      }

      // repeated string fetch = 2;
      case 2: {
        if (tag == 18) {
         parse_fetch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fetch()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fetch(this->fetch_size() - 1).data(),
            this->fetch(this->fetch_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.CallableOptions.fetch"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fetch;
        if (input->ExpectTag(26)) goto parse_target;
        break;
      }

      // repeated string target = 3;
      case 3: {
        if (tag == 26) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_target()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->target(this->target_size() - 1).data(),
            this->target(this->target_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.CallableOptions.target"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_target;
        if (input->ExpectTag(34)) goto parse_run_options;
        break;
      }

      // optional .tensorflow.RunOptions run_options = 4;
      case 4: {
        if (tag == 34) {
         parse_run_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_run_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_tensor_connection;
        break;
      }

      // repeated .tensorflow.TensorConnection tensor_connection = 5;
      case 5: {
        if (tag == 42) {
         parse_tensor_connection:
          DO_(input->IncrementRecursionDepth());
         parse_loop_tensor_connection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tensor_connection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_tensor_connection;
        if (input->ExpectTag(50)) goto parse_loop_feed_devices;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, string> feed_devices = 6;
      case 6: {
        if (tag == 50) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_feed_devices:
          CallableOptions_FeedDevicesEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&feed_devices_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.CallableOptions.FeedDevicesEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.CallableOptions.FeedDevicesEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_feed_devices;
        if (input->ExpectTag(58)) goto parse_loop_fetch_devices;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, string> fetch_devices = 7;
      case 7: {
        if (tag == 58) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_fetch_devices:
          CallableOptions_FetchDevicesEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&fetch_devices_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.CallableOptions.FetchDevicesEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.CallableOptions.FetchDevicesEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_fetch_devices;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(64)) goto parse_fetch_skip_sync;
        break;
      }

      // optional bool fetch_skip_sync = 8;
      case 8: {
        if (tag == 64) {
         parse_fetch_skip_sync:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fetch_skip_sync_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CallableOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CallableOptions)
  return false;
#undef DO_
}

void CallableOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CallableOptions)
  // repeated string feed = 1;
  for (int i = 0; i < this->feed_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->feed(i).data(), this->feed(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CallableOptions.feed");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->feed(i), output);
  }

  // repeated string fetch = 2;
  for (int i = 0; i < this->fetch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fetch(i).data(), this->fetch(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CallableOptions.fetch");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->fetch(i), output);
  }

  // repeated string target = 3;
  for (int i = 0; i < this->target_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target(i).data(), this->target(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CallableOptions.target");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->target(i), output);
  }

  // optional .tensorflow.RunOptions run_options = 4;
  if (this->has_run_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->run_options_, output);
  }

  // repeated .tensorflow.TensorConnection tensor_connection = 5;
  for (unsigned int i = 0, n = this->tensor_connection_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->tensor_connection(i), output);
  }

  // map<string, string> feed_devices = 6;
  if (!this->feed_devices().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.CallableOptions.FeedDevicesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.CallableOptions.FeedDevicesEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->feed_devices().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->feed_devices().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->feed_devices().begin();
          it != this->feed_devices().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<CallableOptions_FeedDevicesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(feed_devices_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<CallableOptions_FeedDevicesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->feed_devices().begin();
          it != this->feed_devices().end(); ++it) {
        entry.reset(feed_devices_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> fetch_devices = 7;
  if (!this->fetch_devices().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.CallableOptions.FetchDevicesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.CallableOptions.FetchDevicesEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->fetch_devices().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->fetch_devices().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->fetch_devices().begin();
          it != this->fetch_devices().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<CallableOptions_FetchDevicesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(fetch_devices_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<CallableOptions_FetchDevicesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->fetch_devices().begin();
          it != this->fetch_devices().end(); ++it) {
        entry.reset(fetch_devices_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional bool fetch_skip_sync = 8;
  if (this->fetch_skip_sync() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->fetch_skip_sync(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.CallableOptions)
}

::google::protobuf::uint8* CallableOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CallableOptions)
  // repeated string feed = 1;
  for (int i = 0; i < this->feed_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->feed(i).data(), this->feed(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CallableOptions.feed");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->feed(i), target);
  }

  // repeated string fetch = 2;
  for (int i = 0; i < this->fetch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fetch(i).data(), this->fetch(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CallableOptions.fetch");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->fetch(i), target);
  }

  // repeated string target = 3;
  for (int i = 0; i < this->target_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target(i).data(), this->target(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CallableOptions.target");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->target(i), target);
  }

  // optional .tensorflow.RunOptions run_options = 4;
  if (this->has_run_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->run_options_, false, target);
  }

  // repeated .tensorflow.TensorConnection tensor_connection = 5;
  for (unsigned int i = 0, n = this->tensor_connection_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->tensor_connection(i), false, target);
  }

  // map<string, string> feed_devices = 6;
  if (!this->feed_devices().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.CallableOptions.FeedDevicesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.CallableOptions.FeedDevicesEntry.value");
      }
    };

    if (deterministic &&
        this->feed_devices().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->feed_devices().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->feed_devices().begin();
          it != this->feed_devices().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<CallableOptions_FeedDevicesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(feed_devices_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<CallableOptions_FeedDevicesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->feed_devices().begin();
          it != this->feed_devices().end(); ++it) {
        entry.reset(feed_devices_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> fetch_devices = 7;
  if (!this->fetch_devices().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.CallableOptions.FetchDevicesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.CallableOptions.FetchDevicesEntry.value");
      }
    };

    if (deterministic &&
        this->fetch_devices().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->fetch_devices().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->fetch_devices().begin();
          it != this->fetch_devices().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<CallableOptions_FetchDevicesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(fetch_devices_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<CallableOptions_FetchDevicesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->fetch_devices().begin();
          it != this->fetch_devices().end(); ++it) {
        entry.reset(fetch_devices_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional bool fetch_skip_sync = 8;
  if (this->fetch_skip_sync() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->fetch_skip_sync(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CallableOptions)
  return target;
}

int CallableOptions::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CallableOptions)
  int total_size = 0;

  // optional .tensorflow.RunOptions run_options = 4;
  if (this->has_run_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->run_options_);
  }

  // optional bool fetch_skip_sync = 8;
  if (this->fetch_skip_sync() != 0) {
    total_size += 1 + 1;
  }

  // repeated string feed = 1;
  total_size += 1 * this->feed_size();
  for (int i = 0; i < this->feed_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->feed(i));
  }

  // repeated string fetch = 2;
  total_size += 1 * this->fetch_size();
  for (int i = 0; i < this->fetch_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fetch(i));
  }

  // repeated string target = 3;
  total_size += 1 * this->target_size();
  for (int i = 0; i < this->target_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->target(i));
  }

  // repeated .tensorflow.TensorConnection tensor_connection = 5;
  total_size += 1 * this->tensor_connection_size();
  for (int i = 0; i < this->tensor_connection_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tensor_connection(i));
  }

  // map<string, string> feed_devices = 6;
  total_size += 1 * this->feed_devices_size();
  {
    ::google::protobuf::scoped_ptr<CallableOptions_FeedDevicesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->feed_devices().begin();
        it != this->feed_devices().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(feed_devices_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // map<string, string> fetch_devices = 7;
  total_size += 1 * this->fetch_devices_size();
  {
    ::google::protobuf::scoped_ptr<CallableOptions_FetchDevicesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->fetch_devices().begin();
        it != this->fetch_devices().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(fetch_devices_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CallableOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CallableOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CallableOptions* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CallableOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CallableOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CallableOptions)
    MergeFrom(*source);
  }
}

void CallableOptions::MergeFrom(const CallableOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CallableOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  feed_.MergeFrom(from.feed_);
  fetch_.MergeFrom(from.fetch_);
  target_.MergeFrom(from.target_);
  tensor_connection_.MergeFrom(from.tensor_connection_);
  feed_devices_.MergeFrom(from.feed_devices_);
  fetch_devices_.MergeFrom(from.fetch_devices_);
  if (from.has_run_options()) {
    mutable_run_options()->::tensorflow::RunOptions::MergeFrom(from.run_options());
  }
  if (from.fetch_skip_sync() != 0) {
    set_fetch_skip_sync(from.fetch_skip_sync());
  }
}

void CallableOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CallableOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallableOptions::CopyFrom(const CallableOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CallableOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallableOptions::IsInitialized() const {

  return true;
}

void CallableOptions::Swap(CallableOptions* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CallableOptions temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void CallableOptions::UnsafeArenaSwap(CallableOptions* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CallableOptions::InternalSwap(CallableOptions* other) {
  feed_.UnsafeArenaSwap(&other->feed_);
  fetch_.UnsafeArenaSwap(&other->fetch_);
  target_.UnsafeArenaSwap(&other->target_);
  std::swap(run_options_, other->run_options_);
  tensor_connection_.UnsafeArenaSwap(&other->tensor_connection_);
  feed_devices_.Swap(&other->feed_devices_);
  fetch_devices_.Swap(&other->fetch_devices_);
  std::swap(fetch_skip_sync_, other->fetch_skip_sync_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CallableOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CallableOptions_descriptor_;
  metadata.reflection = CallableOptions_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CallableOptions

// repeated string feed = 1;
int CallableOptions::feed_size() const {
  return feed_.size();
}
void CallableOptions::clear_feed() {
  feed_.Clear();
}
 const ::std::string& CallableOptions::feed(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.CallableOptions.feed)
  return feed_.Get(index);
}
 ::std::string* CallableOptions::mutable_feed(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.CallableOptions.feed)
  return feed_.Mutable(index);
}
 void CallableOptions::set_feed(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.CallableOptions.feed)
  feed_.Mutable(index)->assign(value);
}
 void CallableOptions::set_feed(int index, const char* value) {
  feed_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.CallableOptions.feed)
}
 void CallableOptions::set_feed(int index, const char* value, size_t size) {
  feed_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.CallableOptions.feed)
}
 ::std::string* CallableOptions::add_feed() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.CallableOptions.feed)
  return feed_.Add();
}
 void CallableOptions::add_feed(const ::std::string& value) {
  feed_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.CallableOptions.feed)
}
 void CallableOptions::add_feed(const char* value) {
  feed_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.CallableOptions.feed)
}
 void CallableOptions::add_feed(const char* value, size_t size) {
  feed_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.CallableOptions.feed)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
CallableOptions::feed() const {
  // @@protoc_insertion_point(field_list:tensorflow.CallableOptions.feed)
  return feed_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
CallableOptions::mutable_feed() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.CallableOptions.feed)
  return &feed_;
}

// repeated string fetch = 2;
int CallableOptions::fetch_size() const {
  return fetch_.size();
}
void CallableOptions::clear_fetch() {
  fetch_.Clear();
}
 const ::std::string& CallableOptions::fetch(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.CallableOptions.fetch)
  return fetch_.Get(index);
}
 ::std::string* CallableOptions::mutable_fetch(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.CallableOptions.fetch)
  return fetch_.Mutable(index);
}
 void CallableOptions::set_fetch(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.CallableOptions.fetch)
  fetch_.Mutable(index)->assign(value);
}
 void CallableOptions::set_fetch(int index, const char* value) {
  fetch_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.CallableOptions.fetch)
}
 void CallableOptions::set_fetch(int index, const char* value, size_t size) {
  fetch_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.CallableOptions.fetch)
}
 ::std::string* CallableOptions::add_fetch() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.CallableOptions.fetch)
  return fetch_.Add();
}
 void CallableOptions::add_fetch(const ::std::string& value) {
  fetch_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.CallableOptions.fetch)
}
 void CallableOptions::add_fetch(const char* value) {
  fetch_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.CallableOptions.fetch)
}
 void CallableOptions::add_fetch(const char* value, size_t size) {
  fetch_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.CallableOptions.fetch)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
CallableOptions::fetch() const {
  // @@protoc_insertion_point(field_list:tensorflow.CallableOptions.fetch)
  return fetch_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
CallableOptions::mutable_fetch() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.CallableOptions.fetch)
  return &fetch_;
}

// repeated string target = 3;
int CallableOptions::target_size() const {
  return target_.size();
}
void CallableOptions::clear_target() {
  target_.Clear();
}
 const ::std::string& CallableOptions::target(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.CallableOptions.target)
  return target_.Get(index);
}
 ::std::string* CallableOptions::mutable_target(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.CallableOptions.target)
  return target_.Mutable(index);
}
 void CallableOptions::set_target(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.CallableOptions.target)
  target_.Mutable(index)->assign(value);
}
 void CallableOptions::set_target(int index, const char* value) {
  target_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.CallableOptions.target)
}
 void CallableOptions::set_target(int index, const char* value, size_t size) {
  target_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.CallableOptions.target)
}
 ::std::string* CallableOptions::add_target() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.CallableOptions.target)
  return target_.Add();
}
 void CallableOptions::add_target(const ::std::string& value) {
  target_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.CallableOptions.target)
}
 void CallableOptions::add_target(const char* value) {
  target_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.CallableOptions.target)
}
 void CallableOptions::add_target(const char* value, size_t size) {
  target_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.CallableOptions.target)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
CallableOptions::target() const {
  // @@protoc_insertion_point(field_list:tensorflow.CallableOptions.target)
  return target_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
CallableOptions::mutable_target() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.CallableOptions.target)
  return &target_;
}

// optional .tensorflow.RunOptions run_options = 4;
bool CallableOptions::has_run_options() const {
  return !_is_default_instance_ && run_options_ != NULL;
}
void CallableOptions::clear_run_options() {
  if (GetArenaNoVirtual() == NULL && run_options_ != NULL) delete run_options_;
  run_options_ = NULL;
}
const ::tensorflow::RunOptions& CallableOptions::run_options() const {
  // @@protoc_insertion_point(field_get:tensorflow.CallableOptions.run_options)
  return run_options_ != NULL ? *run_options_ : *default_instance_->run_options_;
}
::tensorflow::RunOptions* CallableOptions::mutable_run_options() {
  
  if (run_options_ == NULL) {
    _slow_mutable_run_options();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.CallableOptions.run_options)
  return run_options_;
}
::tensorflow::RunOptions* CallableOptions::release_run_options() {
  // @@protoc_insertion_point(field_release:tensorflow.CallableOptions.run_options)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_run_options();
  } else {
    ::tensorflow::RunOptions* temp = run_options_;
    run_options_ = NULL;
    return temp;
  }
}
 void CallableOptions::set_allocated_run_options(::tensorflow::RunOptions* run_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete run_options_;
  }
  if (run_options != NULL) {
    _slow_set_allocated_run_options(message_arena, &run_options);
  }
  run_options_ = run_options;
  if (run_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CallableOptions.run_options)
}

// repeated .tensorflow.TensorConnection tensor_connection = 5;
int CallableOptions::tensor_connection_size() const {
  return tensor_connection_.size();
}
void CallableOptions::clear_tensor_connection() {
  tensor_connection_.Clear();
}
const ::tensorflow::TensorConnection& CallableOptions::tensor_connection(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.CallableOptions.tensor_connection)
  return tensor_connection_.Get(index);
}
::tensorflow::TensorConnection* CallableOptions::mutable_tensor_connection(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.CallableOptions.tensor_connection)
  return tensor_connection_.Mutable(index);
}
::tensorflow::TensorConnection* CallableOptions::add_tensor_connection() {
  // @@protoc_insertion_point(field_add:tensorflow.CallableOptions.tensor_connection)
  return tensor_connection_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::TensorConnection >*
CallableOptions::mutable_tensor_connection() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.CallableOptions.tensor_connection)
  return &tensor_connection_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorConnection >&
CallableOptions::tensor_connection() const {
  // @@protoc_insertion_point(field_list:tensorflow.CallableOptions.tensor_connection)
  return tensor_connection_;
}

// map<string, string> feed_devices = 6;
int CallableOptions::feed_devices_size() const {
  return feed_devices_.size();
}
void CallableOptions::clear_feed_devices() {
  feed_devices_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
CallableOptions::feed_devices() const {
  // @@protoc_insertion_point(field_map:tensorflow.CallableOptions.feed_devices)
  return feed_devices_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
CallableOptions::mutable_feed_devices() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.CallableOptions.feed_devices)
  return feed_devices_.MutableMap();
}

// map<string, string> fetch_devices = 7;
int CallableOptions::fetch_devices_size() const {
  return fetch_devices_.size();
}
void CallableOptions::clear_fetch_devices() {
  fetch_devices_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
CallableOptions::fetch_devices() const {
  // @@protoc_insertion_point(field_map:tensorflow.CallableOptions.fetch_devices)
  return fetch_devices_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
CallableOptions::mutable_fetch_devices() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.CallableOptions.fetch_devices)
  return fetch_devices_.MutableMap();
}

// optional bool fetch_skip_sync = 8;
void CallableOptions::clear_fetch_skip_sync() {
  fetch_skip_sync_ = false;
}
 bool CallableOptions::fetch_skip_sync() const {
  // @@protoc_insertion_point(field_get:tensorflow.CallableOptions.fetch_skip_sync)
  return fetch_skip_sync_;
}
 void CallableOptions::set_fetch_skip_sync(bool value) {
  
  fetch_skip_sync_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CallableOptions.fetch_skip_sync)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
