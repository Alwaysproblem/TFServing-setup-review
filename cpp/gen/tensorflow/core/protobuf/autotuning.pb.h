// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/autotuning.proto

#ifndef PROTOBUF_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto__INCLUDED
#define PROTOBUF_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto();
void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto();
void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto();

class AutotuneResult;
class AutotuneResult_ConvKey;
class AutotuneResult_FailureResult;
class AutotuneResult_GemmKey;
class AutotuningLog;
class ComputeCapability;
class CudnnVersion;

enum AutotuneResult_FailureKind {
  AutotuneResult_FailureKind_UNKNOWN = 0,
  AutotuneResult_FailureKind_REDZONE_MODIFIED = 1,
  AutotuneResult_FailureKind_WRONG_RESULT = 2,
  AutotuneResult_FailureKind_AutotuneResult_FailureKind_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AutotuneResult_FailureKind_AutotuneResult_FailureKind_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AutotuneResult_FailureKind_IsValid(int value);
const AutotuneResult_FailureKind AutotuneResult_FailureKind_FailureKind_MIN = AutotuneResult_FailureKind_UNKNOWN;
const AutotuneResult_FailureKind AutotuneResult_FailureKind_FailureKind_MAX = AutotuneResult_FailureKind_WRONG_RESULT;
const int AutotuneResult_FailureKind_FailureKind_ARRAYSIZE = AutotuneResult_FailureKind_FailureKind_MAX + 1;

const ::google::protobuf::EnumDescriptor* AutotuneResult_FailureKind_descriptor();
inline const ::std::string& AutotuneResult_FailureKind_Name(AutotuneResult_FailureKind value) {
  return ::google::protobuf::internal::NameOfEnum(
    AutotuneResult_FailureKind_descriptor(), value);
}
inline bool AutotuneResult_FailureKind_Parse(
    const ::std::string& name, AutotuneResult_FailureKind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AutotuneResult_FailureKind>(
    AutotuneResult_FailureKind_descriptor(), name, value);
}
// ===================================================================

class CudnnVersion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.CudnnVersion) */ {
 public:
  CudnnVersion();
  virtual ~CudnnVersion();

  CudnnVersion(const CudnnVersion& from);

  inline CudnnVersion& operator=(const CudnnVersion& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CudnnVersion& default_instance();

  void Swap(CudnnVersion* other);

  // implements Message ----------------------------------------------

  inline CudnnVersion* New() const { return New(NULL); }

  CudnnVersion* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CudnnVersion& from);
  void MergeFrom(const CudnnVersion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CudnnVersion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 major = 1;
  void clear_major();
  static const int kMajorFieldNumber = 1;
  ::google::protobuf::int32 major() const;
  void set_major(::google::protobuf::int32 value);

  // optional int32 minor = 2;
  void clear_minor();
  static const int kMinorFieldNumber = 2;
  ::google::protobuf::int32 minor() const;
  void set_minor(::google::protobuf::int32 value);

  // optional int32 patch = 3;
  void clear_patch();
  static const int kPatchFieldNumber = 3;
  ::google::protobuf::int32 patch() const;
  void set_patch(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tensorflow.CudnnVersion)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 major_;
  ::google::protobuf::int32 minor_;
  ::google::protobuf::int32 patch_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto();

  void InitAsDefaultInstance();
  static CudnnVersion* default_instance_;
};
// -------------------------------------------------------------------

class ComputeCapability : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.ComputeCapability) */ {
 public:
  ComputeCapability();
  virtual ~ComputeCapability();

  ComputeCapability(const ComputeCapability& from);

  inline ComputeCapability& operator=(const ComputeCapability& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ComputeCapability& default_instance();

  void Swap(ComputeCapability* other);

  // implements Message ----------------------------------------------

  inline ComputeCapability* New() const { return New(NULL); }

  ComputeCapability* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ComputeCapability& from);
  void MergeFrom(const ComputeCapability& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ComputeCapability* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 major = 1;
  void clear_major();
  static const int kMajorFieldNumber = 1;
  ::google::protobuf::int32 major() const;
  void set_major(::google::protobuf::int32 value);

  // optional int32 minor = 2;
  void clear_minor();
  static const int kMinorFieldNumber = 2;
  ::google::protobuf::int32 minor() const;
  void set_minor(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tensorflow.ComputeCapability)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 major_;
  ::google::protobuf::int32 minor_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto();

  void InitAsDefaultInstance();
  static ComputeCapability* default_instance_;
};
// -------------------------------------------------------------------

class AutotuneResult_FailureResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.AutotuneResult.FailureResult) */ {
 public:
  AutotuneResult_FailureResult();
  virtual ~AutotuneResult_FailureResult();

  AutotuneResult_FailureResult(const AutotuneResult_FailureResult& from);

  inline AutotuneResult_FailureResult& operator=(const AutotuneResult_FailureResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AutotuneResult_FailureResult& default_instance();

  enum KeyCase {
    kReferenceConv = 11,
    kReferenceGemm = 12,
    KEY_NOT_SET = 0,
  };

  void Swap(AutotuneResult_FailureResult* other);

  // implements Message ----------------------------------------------

  inline AutotuneResult_FailureResult* New() const { return New(NULL); }

  AutotuneResult_FailureResult* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AutotuneResult_FailureResult& from);
  void MergeFrom(const AutotuneResult_FailureResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AutotuneResult_FailureResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .tensorflow.AutotuneResult.FailureKind kind = 1;
  void clear_kind();
  static const int kKindFieldNumber = 1;
  ::tensorflow::AutotuneResult_FailureKind kind() const;
  void set_kind(::tensorflow::AutotuneResult_FailureKind value);

  // optional string msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional .tensorflow.AutotuneResult.ConvKey reference_conv = 11;
  bool has_reference_conv() const;
  void clear_reference_conv();
  static const int kReferenceConvFieldNumber = 11;
  const ::tensorflow::AutotuneResult_ConvKey& reference_conv() const;
  ::tensorflow::AutotuneResult_ConvKey* mutable_reference_conv();
  ::tensorflow::AutotuneResult_ConvKey* release_reference_conv();
  void set_allocated_reference_conv(::tensorflow::AutotuneResult_ConvKey* reference_conv);

  // optional .tensorflow.AutotuneResult.GemmKey reference_gemm = 12;
  bool has_reference_gemm() const;
  void clear_reference_gemm();
  static const int kReferenceGemmFieldNumber = 12;
  const ::tensorflow::AutotuneResult_GemmKey& reference_gemm() const;
  ::tensorflow::AutotuneResult_GemmKey* mutable_reference_gemm();
  ::tensorflow::AutotuneResult_GemmKey* release_reference_gemm();
  void set_allocated_reference_gemm(::tensorflow::AutotuneResult_GemmKey* reference_gemm);

  // optional int64 buffer_address = 13;
  void clear_buffer_address();
  static const int kBufferAddressFieldNumber = 13;
  ::google::protobuf::int64 buffer_address() const;
  void set_buffer_address(::google::protobuf::int64 value);

  KeyCase key_case() const;
  // @@protoc_insertion_point(class_scope:tensorflow.AutotuneResult.FailureResult)
 private:
  inline void set_has_reference_conv();
  inline void set_has_reference_gemm();

  inline bool has_key() const;
  void clear_key();
  inline void clear_has_key();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int64 buffer_address_;
  int kind_;
  union KeyUnion {
    KeyUnion() {}
    ::tensorflow::AutotuneResult_ConvKey* reference_conv_;
    ::tensorflow::AutotuneResult_GemmKey* reference_gemm_;
  } key_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto();

  void InitAsDefaultInstance();
  static AutotuneResult_FailureResult* default_instance_;
};
// -------------------------------------------------------------------

class AutotuneResult_ConvKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.AutotuneResult.ConvKey) */ {
 public:
  AutotuneResult_ConvKey();
  virtual ~AutotuneResult_ConvKey();

  AutotuneResult_ConvKey(const AutotuneResult_ConvKey& from);

  inline AutotuneResult_ConvKey& operator=(const AutotuneResult_ConvKey& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AutotuneResult_ConvKey& default_instance();

  void Swap(AutotuneResult_ConvKey* other);

  // implements Message ----------------------------------------------

  inline AutotuneResult_ConvKey* New() const { return New(NULL); }

  AutotuneResult_ConvKey* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AutotuneResult_ConvKey& from);
  void MergeFrom(const AutotuneResult_ConvKey& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AutotuneResult_ConvKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 algorithm = 1;
  void clear_algorithm();
  static const int kAlgorithmFieldNumber = 1;
  ::google::protobuf::int64 algorithm() const;
  void set_algorithm(::google::protobuf::int64 value);

  // optional bool tensor_ops_enabled = 2;
  void clear_tensor_ops_enabled();
  static const int kTensorOpsEnabledFieldNumber = 2;
  bool tensor_ops_enabled() const;
  void set_tensor_ops_enabled(bool value);

  // @@protoc_insertion_point(class_scope:tensorflow.AutotuneResult.ConvKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 algorithm_;
  bool tensor_ops_enabled_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto();

  void InitAsDefaultInstance();
  static AutotuneResult_ConvKey* default_instance_;
};
// -------------------------------------------------------------------

class AutotuneResult_GemmKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.AutotuneResult.GemmKey) */ {
 public:
  AutotuneResult_GemmKey();
  virtual ~AutotuneResult_GemmKey();

  AutotuneResult_GemmKey(const AutotuneResult_GemmKey& from);

  inline AutotuneResult_GemmKey& operator=(const AutotuneResult_GemmKey& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AutotuneResult_GemmKey& default_instance();

  void Swap(AutotuneResult_GemmKey* other);

  // implements Message ----------------------------------------------

  inline AutotuneResult_GemmKey* New() const { return New(NULL); }

  AutotuneResult_GemmKey* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AutotuneResult_GemmKey& from);
  void MergeFrom(const AutotuneResult_GemmKey& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AutotuneResult_GemmKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 algorithm = 1;
  void clear_algorithm();
  static const int kAlgorithmFieldNumber = 1;
  ::google::protobuf::int64 algorithm() const;
  void set_algorithm(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:tensorflow.AutotuneResult.GemmKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 algorithm_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto();

  void InitAsDefaultInstance();
  static AutotuneResult_GemmKey* default_instance_;
};
// -------------------------------------------------------------------

class AutotuneResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.AutotuneResult) */ {
 public:
  AutotuneResult();
  virtual ~AutotuneResult();

  AutotuneResult(const AutotuneResult& from);

  inline AutotuneResult& operator=(const AutotuneResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AutotuneResult& default_instance();

  enum KeyCase {
    kConv = 5,
    kGemm = 6,
    KEY_NOT_SET = 0,
  };

  void Swap(AutotuneResult* other);

  // implements Message ----------------------------------------------

  inline AutotuneResult* New() const { return New(NULL); }

  AutotuneResult* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AutotuneResult& from);
  void MergeFrom(const AutotuneResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AutotuneResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AutotuneResult_FailureResult FailureResult;
  typedef AutotuneResult_ConvKey ConvKey;
  typedef AutotuneResult_GemmKey GemmKey;

  typedef AutotuneResult_FailureKind FailureKind;
  static const FailureKind UNKNOWN =
    AutotuneResult_FailureKind_UNKNOWN;
  static const FailureKind REDZONE_MODIFIED =
    AutotuneResult_FailureKind_REDZONE_MODIFIED;
  static const FailureKind WRONG_RESULT =
    AutotuneResult_FailureKind_WRONG_RESULT;
  static inline bool FailureKind_IsValid(int value) {
    return AutotuneResult_FailureKind_IsValid(value);
  }
  static const FailureKind FailureKind_MIN =
    AutotuneResult_FailureKind_FailureKind_MIN;
  static const FailureKind FailureKind_MAX =
    AutotuneResult_FailureKind_FailureKind_MAX;
  static const int FailureKind_ARRAYSIZE =
    AutotuneResult_FailureKind_FailureKind_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FailureKind_descriptor() {
    return AutotuneResult_FailureKind_descriptor();
  }
  static inline const ::std::string& FailureKind_Name(FailureKind value) {
    return AutotuneResult_FailureKind_Name(value);
  }
  static inline bool FailureKind_Parse(const ::std::string& name,
      FailureKind* value) {
    return AutotuneResult_FailureKind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int64 scratch_bytes = 8;
  void clear_scratch_bytes();
  static const int kScratchBytesFieldNumber = 8;
  ::google::protobuf::int64 scratch_bytes() const;
  void set_scratch_bytes(::google::protobuf::int64 value);

  // optional .google.protobuf.Duration run_time = 9;
  bool has_run_time() const;
  void clear_run_time();
  static const int kRunTimeFieldNumber = 9;
  const ::google::protobuf::Duration& run_time() const;
  ::google::protobuf::Duration* mutable_run_time();
  ::google::protobuf::Duration* release_run_time();
  void set_allocated_run_time(::google::protobuf::Duration* run_time);

  // optional .tensorflow.AutotuneResult.FailureResult failure = 7;
  bool has_failure() const;
  void clear_failure();
  static const int kFailureFieldNumber = 7;
  const ::tensorflow::AutotuneResult_FailureResult& failure() const;
  ::tensorflow::AutotuneResult_FailureResult* mutable_failure();
  ::tensorflow::AutotuneResult_FailureResult* release_failure();
  void set_allocated_failure(::tensorflow::AutotuneResult_FailureResult* failure);

  // optional .tensorflow.AutotuneResult.ConvKey conv = 5;
  bool has_conv() const;
  void clear_conv();
  static const int kConvFieldNumber = 5;
  const ::tensorflow::AutotuneResult_ConvKey& conv() const;
  ::tensorflow::AutotuneResult_ConvKey* mutable_conv();
  ::tensorflow::AutotuneResult_ConvKey* release_conv();
  void set_allocated_conv(::tensorflow::AutotuneResult_ConvKey* conv);

  // optional .tensorflow.AutotuneResult.GemmKey gemm = 6;
  bool has_gemm() const;
  void clear_gemm();
  static const int kGemmFieldNumber = 6;
  const ::tensorflow::AutotuneResult_GemmKey& gemm() const;
  ::tensorflow::AutotuneResult_GemmKey* mutable_gemm();
  ::tensorflow::AutotuneResult_GemmKey* release_gemm();
  void set_allocated_gemm(::tensorflow::AutotuneResult_GemmKey* gemm);

  KeyCase key_case() const;
  // @@protoc_insertion_point(class_scope:tensorflow.AutotuneResult)
 private:
  inline void set_has_conv();
  inline void set_has_gemm();

  inline bool has_key() const;
  void clear_key();
  inline void clear_has_key();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 scratch_bytes_;
  ::google::protobuf::Duration* run_time_;
  ::tensorflow::AutotuneResult_FailureResult* failure_;
  union KeyUnion {
    KeyUnion() {}
    ::tensorflow::AutotuneResult_ConvKey* conv_;
    ::tensorflow::AutotuneResult_GemmKey* gemm_;
  } key_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto();

  void InitAsDefaultInstance();
  static AutotuneResult* default_instance_;
};
// -------------------------------------------------------------------

class AutotuningLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.AutotuningLog) */ {
 public:
  AutotuningLog();
  virtual ~AutotuningLog();

  AutotuningLog(const AutotuningLog& from);

  inline AutotuningLog& operator=(const AutotuningLog& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AutotuningLog& default_instance();

  void Swap(AutotuningLog* other);

  // implements Message ----------------------------------------------

  inline AutotuningLog* New() const { return New(NULL); }

  AutotuningLog* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AutotuningLog& from);
  void MergeFrom(const AutotuningLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AutotuningLog* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .google.protobuf.Any instr = 1;
  bool has_instr() const;
  void clear_instr();
  static const int kInstrFieldNumber = 1;
  const ::google::protobuf::Any& instr() const;
  ::google::protobuf::Any* mutable_instr();
  ::google::protobuf::Any* release_instr();
  void set_allocated_instr(::google::protobuf::Any* instr);

  // repeated .tensorflow.AutotuneResult results = 2;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 2;
  const ::tensorflow::AutotuneResult& results(int index) const;
  ::tensorflow::AutotuneResult* mutable_results(int index);
  ::tensorflow::AutotuneResult* add_results();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::AutotuneResult >*
      mutable_results();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::AutotuneResult >&
      results() const;

  // optional .tensorflow.CudnnVersion cudnn_version = 3;
  bool has_cudnn_version() const;
  void clear_cudnn_version();
  static const int kCudnnVersionFieldNumber = 3;
  const ::tensorflow::CudnnVersion& cudnn_version() const;
  ::tensorflow::CudnnVersion* mutable_cudnn_version();
  ::tensorflow::CudnnVersion* release_cudnn_version();
  void set_allocated_cudnn_version(::tensorflow::CudnnVersion* cudnn_version);

  // optional .tensorflow.ComputeCapability compute_capability = 4;
  bool has_compute_capability() const;
  void clear_compute_capability();
  static const int kComputeCapabilityFieldNumber = 4;
  const ::tensorflow::ComputeCapability& compute_capability() const;
  ::tensorflow::ComputeCapability* mutable_compute_capability();
  ::tensorflow::ComputeCapability* release_compute_capability();
  void set_allocated_compute_capability(::tensorflow::ComputeCapability* compute_capability);

  // optional string device_pci_bus_id = 5;
  void clear_device_pci_bus_id();
  static const int kDevicePciBusIdFieldNumber = 5;
  const ::std::string& device_pci_bus_id() const;
  void set_device_pci_bus_id(const ::std::string& value);
  void set_device_pci_bus_id(const char* value);
  void set_device_pci_bus_id(const char* value, size_t size);
  ::std::string* mutable_device_pci_bus_id();
  ::std::string* release_device_pci_bus_id();
  void set_allocated_device_pci_bus_id(::std::string* device_pci_bus_id);

  // optional string blas_version = 6;
  void clear_blas_version();
  static const int kBlasVersionFieldNumber = 6;
  const ::std::string& blas_version() const;
  void set_blas_version(const ::std::string& value);
  void set_blas_version(const char* value);
  void set_blas_version(const char* value, size_t size);
  ::std::string* mutable_blas_version();
  ::std::string* release_blas_version();
  void set_allocated_blas_version(::std::string* blas_version);

  // @@protoc_insertion_point(class_scope:tensorflow.AutotuningLog)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::Any* instr_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::AutotuneResult > results_;
  ::tensorflow::CudnnVersion* cudnn_version_;
  ::tensorflow::ComputeCapability* compute_capability_;
  ::google::protobuf::internal::ArenaStringPtr device_pci_bus_id_;
  ::google::protobuf::internal::ArenaStringPtr blas_version_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto();

  void InitAsDefaultInstance();
  static AutotuningLog* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CudnnVersion

// optional int32 major = 1;
inline void CudnnVersion::clear_major() {
  major_ = 0;
}
inline ::google::protobuf::int32 CudnnVersion::major() const {
  // @@protoc_insertion_point(field_get:tensorflow.CudnnVersion.major)
  return major_;
}
inline void CudnnVersion::set_major(::google::protobuf::int32 value) {
  
  major_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CudnnVersion.major)
}

// optional int32 minor = 2;
inline void CudnnVersion::clear_minor() {
  minor_ = 0;
}
inline ::google::protobuf::int32 CudnnVersion::minor() const {
  // @@protoc_insertion_point(field_get:tensorflow.CudnnVersion.minor)
  return minor_;
}
inline void CudnnVersion::set_minor(::google::protobuf::int32 value) {
  
  minor_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CudnnVersion.minor)
}

// optional int32 patch = 3;
inline void CudnnVersion::clear_patch() {
  patch_ = 0;
}
inline ::google::protobuf::int32 CudnnVersion::patch() const {
  // @@protoc_insertion_point(field_get:tensorflow.CudnnVersion.patch)
  return patch_;
}
inline void CudnnVersion::set_patch(::google::protobuf::int32 value) {
  
  patch_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CudnnVersion.patch)
}

// -------------------------------------------------------------------

// ComputeCapability

// optional int32 major = 1;
inline void ComputeCapability::clear_major() {
  major_ = 0;
}
inline ::google::protobuf::int32 ComputeCapability::major() const {
  // @@protoc_insertion_point(field_get:tensorflow.ComputeCapability.major)
  return major_;
}
inline void ComputeCapability::set_major(::google::protobuf::int32 value) {
  
  major_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ComputeCapability.major)
}

// optional int32 minor = 2;
inline void ComputeCapability::clear_minor() {
  minor_ = 0;
}
inline ::google::protobuf::int32 ComputeCapability::minor() const {
  // @@protoc_insertion_point(field_get:tensorflow.ComputeCapability.minor)
  return minor_;
}
inline void ComputeCapability::set_minor(::google::protobuf::int32 value) {
  
  minor_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ComputeCapability.minor)
}

// -------------------------------------------------------------------

// AutotuneResult_FailureResult

// optional .tensorflow.AutotuneResult.FailureKind kind = 1;
inline void AutotuneResult_FailureResult::clear_kind() {
  kind_ = 0;
}
inline ::tensorflow::AutotuneResult_FailureKind AutotuneResult_FailureResult::kind() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutotuneResult.FailureResult.kind)
  return static_cast< ::tensorflow::AutotuneResult_FailureKind >(kind_);
}
inline void AutotuneResult_FailureResult::set_kind(::tensorflow::AutotuneResult_FailureKind value) {
  
  kind_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.AutotuneResult.FailureResult.kind)
}

// optional string msg = 2;
inline void AutotuneResult_FailureResult::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AutotuneResult_FailureResult::msg() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutotuneResult.FailureResult.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AutotuneResult_FailureResult::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.AutotuneResult.FailureResult.msg)
}
inline void AutotuneResult_FailureResult::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.AutotuneResult.FailureResult.msg)
}
inline void AutotuneResult_FailureResult::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.AutotuneResult.FailureResult.msg)
}
inline ::std::string* AutotuneResult_FailureResult::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.AutotuneResult.FailureResult.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AutotuneResult_FailureResult::release_msg() {
  // @@protoc_insertion_point(field_release:tensorflow.AutotuneResult.FailureResult.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AutotuneResult_FailureResult::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.AutotuneResult.FailureResult.msg)
}

// optional .tensorflow.AutotuneResult.ConvKey reference_conv = 11;
inline bool AutotuneResult_FailureResult::has_reference_conv() const {
  return key_case() == kReferenceConv;
}
inline void AutotuneResult_FailureResult::set_has_reference_conv() {
  _oneof_case_[0] = kReferenceConv;
}
inline void AutotuneResult_FailureResult::clear_reference_conv() {
  if (has_reference_conv()) {
    delete key_.reference_conv_;
    clear_has_key();
  }
}
inline  const ::tensorflow::AutotuneResult_ConvKey& AutotuneResult_FailureResult::reference_conv() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutotuneResult.FailureResult.reference_conv)
  return has_reference_conv()
      ? *key_.reference_conv_
      : ::tensorflow::AutotuneResult_ConvKey::default_instance();
}
inline ::tensorflow::AutotuneResult_ConvKey* AutotuneResult_FailureResult::mutable_reference_conv() {
  if (!has_reference_conv()) {
    clear_key();
    set_has_reference_conv();
    key_.reference_conv_ = new ::tensorflow::AutotuneResult_ConvKey;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.AutotuneResult.FailureResult.reference_conv)
  return key_.reference_conv_;
}
inline ::tensorflow::AutotuneResult_ConvKey* AutotuneResult_FailureResult::release_reference_conv() {
  // @@protoc_insertion_point(field_release:tensorflow.AutotuneResult.FailureResult.reference_conv)
  if (has_reference_conv()) {
    clear_has_key();
    ::tensorflow::AutotuneResult_ConvKey* temp = key_.reference_conv_;
    key_.reference_conv_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AutotuneResult_FailureResult::set_allocated_reference_conv(::tensorflow::AutotuneResult_ConvKey* reference_conv) {
  clear_key();
  if (reference_conv) {
    set_has_reference_conv();
    key_.reference_conv_ = reference_conv;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.AutotuneResult.FailureResult.reference_conv)
}

// optional .tensorflow.AutotuneResult.GemmKey reference_gemm = 12;
inline bool AutotuneResult_FailureResult::has_reference_gemm() const {
  return key_case() == kReferenceGemm;
}
inline void AutotuneResult_FailureResult::set_has_reference_gemm() {
  _oneof_case_[0] = kReferenceGemm;
}
inline void AutotuneResult_FailureResult::clear_reference_gemm() {
  if (has_reference_gemm()) {
    delete key_.reference_gemm_;
    clear_has_key();
  }
}
inline  const ::tensorflow::AutotuneResult_GemmKey& AutotuneResult_FailureResult::reference_gemm() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutotuneResult.FailureResult.reference_gemm)
  return has_reference_gemm()
      ? *key_.reference_gemm_
      : ::tensorflow::AutotuneResult_GemmKey::default_instance();
}
inline ::tensorflow::AutotuneResult_GemmKey* AutotuneResult_FailureResult::mutable_reference_gemm() {
  if (!has_reference_gemm()) {
    clear_key();
    set_has_reference_gemm();
    key_.reference_gemm_ = new ::tensorflow::AutotuneResult_GemmKey;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.AutotuneResult.FailureResult.reference_gemm)
  return key_.reference_gemm_;
}
inline ::tensorflow::AutotuneResult_GemmKey* AutotuneResult_FailureResult::release_reference_gemm() {
  // @@protoc_insertion_point(field_release:tensorflow.AutotuneResult.FailureResult.reference_gemm)
  if (has_reference_gemm()) {
    clear_has_key();
    ::tensorflow::AutotuneResult_GemmKey* temp = key_.reference_gemm_;
    key_.reference_gemm_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AutotuneResult_FailureResult::set_allocated_reference_gemm(::tensorflow::AutotuneResult_GemmKey* reference_gemm) {
  clear_key();
  if (reference_gemm) {
    set_has_reference_gemm();
    key_.reference_gemm_ = reference_gemm;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.AutotuneResult.FailureResult.reference_gemm)
}

// optional int64 buffer_address = 13;
inline void AutotuneResult_FailureResult::clear_buffer_address() {
  buffer_address_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AutotuneResult_FailureResult::buffer_address() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutotuneResult.FailureResult.buffer_address)
  return buffer_address_;
}
inline void AutotuneResult_FailureResult::set_buffer_address(::google::protobuf::int64 value) {
  
  buffer_address_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.AutotuneResult.FailureResult.buffer_address)
}

inline bool AutotuneResult_FailureResult::has_key() const {
  return key_case() != KEY_NOT_SET;
}
inline void AutotuneResult_FailureResult::clear_has_key() {
  _oneof_case_[0] = KEY_NOT_SET;
}
inline AutotuneResult_FailureResult::KeyCase AutotuneResult_FailureResult::key_case() const {
  return AutotuneResult_FailureResult::KeyCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AutotuneResult_ConvKey

// optional int64 algorithm = 1;
inline void AutotuneResult_ConvKey::clear_algorithm() {
  algorithm_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AutotuneResult_ConvKey::algorithm() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutotuneResult.ConvKey.algorithm)
  return algorithm_;
}
inline void AutotuneResult_ConvKey::set_algorithm(::google::protobuf::int64 value) {
  
  algorithm_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.AutotuneResult.ConvKey.algorithm)
}

// optional bool tensor_ops_enabled = 2;
inline void AutotuneResult_ConvKey::clear_tensor_ops_enabled() {
  tensor_ops_enabled_ = false;
}
inline bool AutotuneResult_ConvKey::tensor_ops_enabled() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutotuneResult.ConvKey.tensor_ops_enabled)
  return tensor_ops_enabled_;
}
inline void AutotuneResult_ConvKey::set_tensor_ops_enabled(bool value) {
  
  tensor_ops_enabled_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.AutotuneResult.ConvKey.tensor_ops_enabled)
}

// -------------------------------------------------------------------

// AutotuneResult_GemmKey

// optional int64 algorithm = 1;
inline void AutotuneResult_GemmKey::clear_algorithm() {
  algorithm_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AutotuneResult_GemmKey::algorithm() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutotuneResult.GemmKey.algorithm)
  return algorithm_;
}
inline void AutotuneResult_GemmKey::set_algorithm(::google::protobuf::int64 value) {
  
  algorithm_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.AutotuneResult.GemmKey.algorithm)
}

// -------------------------------------------------------------------

// AutotuneResult

// optional int64 scratch_bytes = 8;
inline void AutotuneResult::clear_scratch_bytes() {
  scratch_bytes_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AutotuneResult::scratch_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutotuneResult.scratch_bytes)
  return scratch_bytes_;
}
inline void AutotuneResult::set_scratch_bytes(::google::protobuf::int64 value) {
  
  scratch_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.AutotuneResult.scratch_bytes)
}

// optional .google.protobuf.Duration run_time = 9;
inline bool AutotuneResult::has_run_time() const {
  return !_is_default_instance_ && run_time_ != NULL;
}
inline void AutotuneResult::clear_run_time() {
  if (GetArenaNoVirtual() == NULL && run_time_ != NULL) delete run_time_;
  run_time_ = NULL;
}
inline const ::google::protobuf::Duration& AutotuneResult::run_time() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutotuneResult.run_time)
  return run_time_ != NULL ? *run_time_ : *default_instance_->run_time_;
}
inline ::google::protobuf::Duration* AutotuneResult::mutable_run_time() {
  
  if (run_time_ == NULL) {
    run_time_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.AutotuneResult.run_time)
  return run_time_;
}
inline ::google::protobuf::Duration* AutotuneResult::release_run_time() {
  // @@protoc_insertion_point(field_release:tensorflow.AutotuneResult.run_time)
  
  ::google::protobuf::Duration* temp = run_time_;
  run_time_ = NULL;
  return temp;
}
inline void AutotuneResult::set_allocated_run_time(::google::protobuf::Duration* run_time) {
  delete run_time_;
  run_time_ = run_time;
  if (run_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.AutotuneResult.run_time)
}

// optional .tensorflow.AutotuneResult.FailureResult failure = 7;
inline bool AutotuneResult::has_failure() const {
  return !_is_default_instance_ && failure_ != NULL;
}
inline void AutotuneResult::clear_failure() {
  if (GetArenaNoVirtual() == NULL && failure_ != NULL) delete failure_;
  failure_ = NULL;
}
inline const ::tensorflow::AutotuneResult_FailureResult& AutotuneResult::failure() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutotuneResult.failure)
  return failure_ != NULL ? *failure_ : *default_instance_->failure_;
}
inline ::tensorflow::AutotuneResult_FailureResult* AutotuneResult::mutable_failure() {
  
  if (failure_ == NULL) {
    failure_ = new ::tensorflow::AutotuneResult_FailureResult;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.AutotuneResult.failure)
  return failure_;
}
inline ::tensorflow::AutotuneResult_FailureResult* AutotuneResult::release_failure() {
  // @@protoc_insertion_point(field_release:tensorflow.AutotuneResult.failure)
  
  ::tensorflow::AutotuneResult_FailureResult* temp = failure_;
  failure_ = NULL;
  return temp;
}
inline void AutotuneResult::set_allocated_failure(::tensorflow::AutotuneResult_FailureResult* failure) {
  delete failure_;
  failure_ = failure;
  if (failure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.AutotuneResult.failure)
}

// optional .tensorflow.AutotuneResult.ConvKey conv = 5;
inline bool AutotuneResult::has_conv() const {
  return key_case() == kConv;
}
inline void AutotuneResult::set_has_conv() {
  _oneof_case_[0] = kConv;
}
inline void AutotuneResult::clear_conv() {
  if (has_conv()) {
    delete key_.conv_;
    clear_has_key();
  }
}
inline  const ::tensorflow::AutotuneResult_ConvKey& AutotuneResult::conv() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutotuneResult.conv)
  return has_conv()
      ? *key_.conv_
      : ::tensorflow::AutotuneResult_ConvKey::default_instance();
}
inline ::tensorflow::AutotuneResult_ConvKey* AutotuneResult::mutable_conv() {
  if (!has_conv()) {
    clear_key();
    set_has_conv();
    key_.conv_ = new ::tensorflow::AutotuneResult_ConvKey;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.AutotuneResult.conv)
  return key_.conv_;
}
inline ::tensorflow::AutotuneResult_ConvKey* AutotuneResult::release_conv() {
  // @@protoc_insertion_point(field_release:tensorflow.AutotuneResult.conv)
  if (has_conv()) {
    clear_has_key();
    ::tensorflow::AutotuneResult_ConvKey* temp = key_.conv_;
    key_.conv_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AutotuneResult::set_allocated_conv(::tensorflow::AutotuneResult_ConvKey* conv) {
  clear_key();
  if (conv) {
    set_has_conv();
    key_.conv_ = conv;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.AutotuneResult.conv)
}

// optional .tensorflow.AutotuneResult.GemmKey gemm = 6;
inline bool AutotuneResult::has_gemm() const {
  return key_case() == kGemm;
}
inline void AutotuneResult::set_has_gemm() {
  _oneof_case_[0] = kGemm;
}
inline void AutotuneResult::clear_gemm() {
  if (has_gemm()) {
    delete key_.gemm_;
    clear_has_key();
  }
}
inline  const ::tensorflow::AutotuneResult_GemmKey& AutotuneResult::gemm() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutotuneResult.gemm)
  return has_gemm()
      ? *key_.gemm_
      : ::tensorflow::AutotuneResult_GemmKey::default_instance();
}
inline ::tensorflow::AutotuneResult_GemmKey* AutotuneResult::mutable_gemm() {
  if (!has_gemm()) {
    clear_key();
    set_has_gemm();
    key_.gemm_ = new ::tensorflow::AutotuneResult_GemmKey;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.AutotuneResult.gemm)
  return key_.gemm_;
}
inline ::tensorflow::AutotuneResult_GemmKey* AutotuneResult::release_gemm() {
  // @@protoc_insertion_point(field_release:tensorflow.AutotuneResult.gemm)
  if (has_gemm()) {
    clear_has_key();
    ::tensorflow::AutotuneResult_GemmKey* temp = key_.gemm_;
    key_.gemm_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AutotuneResult::set_allocated_gemm(::tensorflow::AutotuneResult_GemmKey* gemm) {
  clear_key();
  if (gemm) {
    set_has_gemm();
    key_.gemm_ = gemm;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.AutotuneResult.gemm)
}

inline bool AutotuneResult::has_key() const {
  return key_case() != KEY_NOT_SET;
}
inline void AutotuneResult::clear_has_key() {
  _oneof_case_[0] = KEY_NOT_SET;
}
inline AutotuneResult::KeyCase AutotuneResult::key_case() const {
  return AutotuneResult::KeyCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AutotuningLog

// optional .google.protobuf.Any instr = 1;
inline bool AutotuningLog::has_instr() const {
  return !_is_default_instance_ && instr_ != NULL;
}
inline void AutotuningLog::clear_instr() {
  if (GetArenaNoVirtual() == NULL && instr_ != NULL) delete instr_;
  instr_ = NULL;
}
inline const ::google::protobuf::Any& AutotuningLog::instr() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutotuningLog.instr)
  return instr_ != NULL ? *instr_ : *default_instance_->instr_;
}
inline ::google::protobuf::Any* AutotuningLog::mutable_instr() {
  
  if (instr_ == NULL) {
    instr_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.AutotuningLog.instr)
  return instr_;
}
inline ::google::protobuf::Any* AutotuningLog::release_instr() {
  // @@protoc_insertion_point(field_release:tensorflow.AutotuningLog.instr)
  
  ::google::protobuf::Any* temp = instr_;
  instr_ = NULL;
  return temp;
}
inline void AutotuningLog::set_allocated_instr(::google::protobuf::Any* instr) {
  delete instr_;
  instr_ = instr;
  if (instr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.AutotuningLog.instr)
}

// repeated .tensorflow.AutotuneResult results = 2;
inline int AutotuningLog::results_size() const {
  return results_.size();
}
inline void AutotuningLog::clear_results() {
  results_.Clear();
}
inline const ::tensorflow::AutotuneResult& AutotuningLog::results(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.AutotuningLog.results)
  return results_.Get(index);
}
inline ::tensorflow::AutotuneResult* AutotuningLog::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.AutotuningLog.results)
  return results_.Mutable(index);
}
inline ::tensorflow::AutotuneResult* AutotuningLog::add_results() {
  // @@protoc_insertion_point(field_add:tensorflow.AutotuningLog.results)
  return results_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::AutotuneResult >*
AutotuningLog::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.AutotuningLog.results)
  return &results_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::AutotuneResult >&
AutotuningLog::results() const {
  // @@protoc_insertion_point(field_list:tensorflow.AutotuningLog.results)
  return results_;
}

// optional .tensorflow.CudnnVersion cudnn_version = 3;
inline bool AutotuningLog::has_cudnn_version() const {
  return !_is_default_instance_ && cudnn_version_ != NULL;
}
inline void AutotuningLog::clear_cudnn_version() {
  if (GetArenaNoVirtual() == NULL && cudnn_version_ != NULL) delete cudnn_version_;
  cudnn_version_ = NULL;
}
inline const ::tensorflow::CudnnVersion& AutotuningLog::cudnn_version() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutotuningLog.cudnn_version)
  return cudnn_version_ != NULL ? *cudnn_version_ : *default_instance_->cudnn_version_;
}
inline ::tensorflow::CudnnVersion* AutotuningLog::mutable_cudnn_version() {
  
  if (cudnn_version_ == NULL) {
    cudnn_version_ = new ::tensorflow::CudnnVersion;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.AutotuningLog.cudnn_version)
  return cudnn_version_;
}
inline ::tensorflow::CudnnVersion* AutotuningLog::release_cudnn_version() {
  // @@protoc_insertion_point(field_release:tensorflow.AutotuningLog.cudnn_version)
  
  ::tensorflow::CudnnVersion* temp = cudnn_version_;
  cudnn_version_ = NULL;
  return temp;
}
inline void AutotuningLog::set_allocated_cudnn_version(::tensorflow::CudnnVersion* cudnn_version) {
  delete cudnn_version_;
  cudnn_version_ = cudnn_version;
  if (cudnn_version) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.AutotuningLog.cudnn_version)
}

// optional .tensorflow.ComputeCapability compute_capability = 4;
inline bool AutotuningLog::has_compute_capability() const {
  return !_is_default_instance_ && compute_capability_ != NULL;
}
inline void AutotuningLog::clear_compute_capability() {
  if (GetArenaNoVirtual() == NULL && compute_capability_ != NULL) delete compute_capability_;
  compute_capability_ = NULL;
}
inline const ::tensorflow::ComputeCapability& AutotuningLog::compute_capability() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutotuningLog.compute_capability)
  return compute_capability_ != NULL ? *compute_capability_ : *default_instance_->compute_capability_;
}
inline ::tensorflow::ComputeCapability* AutotuningLog::mutable_compute_capability() {
  
  if (compute_capability_ == NULL) {
    compute_capability_ = new ::tensorflow::ComputeCapability;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.AutotuningLog.compute_capability)
  return compute_capability_;
}
inline ::tensorflow::ComputeCapability* AutotuningLog::release_compute_capability() {
  // @@protoc_insertion_point(field_release:tensorflow.AutotuningLog.compute_capability)
  
  ::tensorflow::ComputeCapability* temp = compute_capability_;
  compute_capability_ = NULL;
  return temp;
}
inline void AutotuningLog::set_allocated_compute_capability(::tensorflow::ComputeCapability* compute_capability) {
  delete compute_capability_;
  compute_capability_ = compute_capability;
  if (compute_capability) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.AutotuningLog.compute_capability)
}

// optional string device_pci_bus_id = 5;
inline void AutotuningLog::clear_device_pci_bus_id() {
  device_pci_bus_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AutotuningLog::device_pci_bus_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutotuningLog.device_pci_bus_id)
  return device_pci_bus_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AutotuningLog::set_device_pci_bus_id(const ::std::string& value) {
  
  device_pci_bus_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.AutotuningLog.device_pci_bus_id)
}
inline void AutotuningLog::set_device_pci_bus_id(const char* value) {
  
  device_pci_bus_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.AutotuningLog.device_pci_bus_id)
}
inline void AutotuningLog::set_device_pci_bus_id(const char* value, size_t size) {
  
  device_pci_bus_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.AutotuningLog.device_pci_bus_id)
}
inline ::std::string* AutotuningLog::mutable_device_pci_bus_id() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.AutotuningLog.device_pci_bus_id)
  return device_pci_bus_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AutotuningLog::release_device_pci_bus_id() {
  // @@protoc_insertion_point(field_release:tensorflow.AutotuningLog.device_pci_bus_id)
  
  return device_pci_bus_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AutotuningLog::set_allocated_device_pci_bus_id(::std::string* device_pci_bus_id) {
  if (device_pci_bus_id != NULL) {
    
  } else {
    
  }
  device_pci_bus_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_pci_bus_id);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.AutotuningLog.device_pci_bus_id)
}

// optional string blas_version = 6;
inline void AutotuningLog::clear_blas_version() {
  blas_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AutotuningLog::blas_version() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutotuningLog.blas_version)
  return blas_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AutotuningLog::set_blas_version(const ::std::string& value) {
  
  blas_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.AutotuningLog.blas_version)
}
inline void AutotuningLog::set_blas_version(const char* value) {
  
  blas_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.AutotuningLog.blas_version)
}
inline void AutotuningLog::set_blas_version(const char* value, size_t size) {
  
  blas_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.AutotuningLog.blas_version)
}
inline ::std::string* AutotuningLog::mutable_blas_version() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.AutotuningLog.blas_version)
  return blas_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AutotuningLog::release_blas_version() {
  // @@protoc_insertion_point(field_release:tensorflow.AutotuningLog.blas_version)
  
  return blas_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AutotuningLog::set_allocated_blas_version(::std::string* blas_version) {
  if (blas_version != NULL) {
    
  } else {
    
  }
  blas_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), blas_version);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.AutotuningLog.blas_version)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::tensorflow::AutotuneResult_FailureKind> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tensorflow::AutotuneResult_FailureKind>() {
  return ::tensorflow::AutotuneResult_FailureKind_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tensorflow_2fcore_2fprotobuf_2fautotuning_2eproto__INCLUDED
