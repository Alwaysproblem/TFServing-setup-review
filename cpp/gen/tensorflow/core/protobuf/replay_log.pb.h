// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/replay_log.proto

#ifndef PROTOBUF_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto__INCLUDED
#define PROTOBUF_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow/core/protobuf/master.pb.h"
// @@protoc_insertion_point(includes)

namespace tensorflow {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto();
void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto();
void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto();

class NewReplaySession;
class ReplayOp;

// ===================================================================

class NewReplaySession : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.NewReplaySession) */ {
 public:
  NewReplaySession();
  virtual ~NewReplaySession();

  NewReplaySession(const NewReplaySession& from);

  inline NewReplaySession& operator=(const NewReplaySession& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const NewReplaySession& default_instance();

  void UnsafeArenaSwap(NewReplaySession* other);
  void Swap(NewReplaySession* other);

  // implements Message ----------------------------------------------

  inline NewReplaySession* New() const { return New(NULL); }

  NewReplaySession* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewReplaySession& from);
  void MergeFrom(const NewReplaySession& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NewReplaySession* other);
  protected:
  explicit NewReplaySession(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .tensorflow.ListDevicesResponse devices = 1;
  bool has_devices() const;
  void clear_devices();
  static const int kDevicesFieldNumber = 1;
  private:
  void _slow_mutable_devices();
  void _slow_set_allocated_devices(
      ::google::protobuf::Arena* message_arena, ::tensorflow::ListDevicesResponse** devices);
  ::tensorflow::ListDevicesResponse* _slow_release_devices();
  public:
  const ::tensorflow::ListDevicesResponse& devices() const;
  ::tensorflow::ListDevicesResponse* mutable_devices();
  ::tensorflow::ListDevicesResponse* release_devices();
  void set_allocated_devices(::tensorflow::ListDevicesResponse* devices);
  ::tensorflow::ListDevicesResponse* unsafe_arena_release_devices();
  void unsafe_arena_set_allocated_devices(
      ::tensorflow::ListDevicesResponse* devices);

  // optional string session_handle = 2;
  void clear_session_handle();
  static const int kSessionHandleFieldNumber = 2;
  const ::std::string& session_handle() const;
  void set_session_handle(const ::std::string& value);
  void set_session_handle(const char* value);
  void set_session_handle(const char* value, size_t size);
  ::std::string* mutable_session_handle();
  ::std::string* release_session_handle();
  void set_allocated_session_handle(::std::string* session_handle);
  ::std::string* unsafe_arena_release_session_handle();
  void unsafe_arena_set_allocated_session_handle(
      ::std::string* session_handle);

  // @@protoc_insertion_point(class_scope:tensorflow.NewReplaySession)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::tensorflow::ListDevicesResponse* devices_;
  ::google::protobuf::internal::ArenaStringPtr session_handle_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto();

  void InitAsDefaultInstance();
  static NewReplaySession* default_instance_;
};
// -------------------------------------------------------------------

class ReplayOp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.ReplayOp) */ {
 public:
  ReplayOp();
  virtual ~ReplayOp();

  ReplayOp(const ReplayOp& from);

  inline ReplayOp& operator=(const ReplayOp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplayOp& default_instance();

  enum OpCase {
    kCreateSession = 1,
    kExtendSession = 2,
    kPartialRunSetup = 3,
    kRunStep = 4,
    kCloseSession = 5,
    kListDevices = 6,
    kResetRequest = 7,
    kMakeCallable = 8,
    kRunCallable = 9,
    kReleaseCallable = 10,
    kNewReplaySession = 11,
    OP_NOT_SET = 0,
  };

  enum ResponseCase {
    kCreateSessionResponse = 21,
    kExtendSessionResponse = 22,
    kPartialRunSetupResponse = 23,
    kRunStepResponse = 24,
    kCloseSessionResponse = 25,
    kListDevicesResponse = 26,
    kResetRequestResponse = 27,
    kMakeCallableResponse = 28,
    kRunCallableResponse = 29,
    kReleaseCallableResponse = 30,
    RESPONSE_NOT_SET = 0,
  };

  void UnsafeArenaSwap(ReplayOp* other);
  void Swap(ReplayOp* other);

  // implements Message ----------------------------------------------

  inline ReplayOp* New() const { return New(NULL); }

  ReplayOp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReplayOp& from);
  void MergeFrom(const ReplayOp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReplayOp* other);
  protected:
  explicit ReplayOp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double start_time_us = 31;
  void clear_start_time_us();
  static const int kStartTimeUsFieldNumber = 31;
  double start_time_us() const;
  void set_start_time_us(double value);

  // optional double end_time_us = 32;
  void clear_end_time_us();
  static const int kEndTimeUsFieldNumber = 32;
  double end_time_us() const;
  void set_end_time_us(double value);

  // optional .tensorflow.CreateSessionRequest create_session = 1;
  bool has_create_session() const;
  void clear_create_session();
  static const int kCreateSessionFieldNumber = 1;
  private:
  void _slow_mutable_create_session();
  void _slow_set_allocated_create_session(
      ::google::protobuf::Arena* message_arena, ::tensorflow::CreateSessionRequest** create_session);
  ::tensorflow::CreateSessionRequest* _slow_release_create_session();
  public:
  const ::tensorflow::CreateSessionRequest& create_session() const;
  ::tensorflow::CreateSessionRequest* mutable_create_session();
  ::tensorflow::CreateSessionRequest* release_create_session();
  void set_allocated_create_session(::tensorflow::CreateSessionRequest* create_session);
  ::tensorflow::CreateSessionRequest* unsafe_arena_release_create_session();
  void unsafe_arena_set_allocated_create_session(
      ::tensorflow::CreateSessionRequest* create_session);

  // optional .tensorflow.ExtendSessionRequest extend_session = 2;
  bool has_extend_session() const;
  void clear_extend_session();
  static const int kExtendSessionFieldNumber = 2;
  private:
  void _slow_mutable_extend_session();
  void _slow_set_allocated_extend_session(
      ::google::protobuf::Arena* message_arena, ::tensorflow::ExtendSessionRequest** extend_session);
  ::tensorflow::ExtendSessionRequest* _slow_release_extend_session();
  public:
  const ::tensorflow::ExtendSessionRequest& extend_session() const;
  ::tensorflow::ExtendSessionRequest* mutable_extend_session();
  ::tensorflow::ExtendSessionRequest* release_extend_session();
  void set_allocated_extend_session(::tensorflow::ExtendSessionRequest* extend_session);
  ::tensorflow::ExtendSessionRequest* unsafe_arena_release_extend_session();
  void unsafe_arena_set_allocated_extend_session(
      ::tensorflow::ExtendSessionRequest* extend_session);

  // optional .tensorflow.PartialRunSetupRequest partial_run_setup = 3;
  bool has_partial_run_setup() const;
  void clear_partial_run_setup();
  static const int kPartialRunSetupFieldNumber = 3;
  private:
  void _slow_mutable_partial_run_setup();
  void _slow_set_allocated_partial_run_setup(
      ::google::protobuf::Arena* message_arena, ::tensorflow::PartialRunSetupRequest** partial_run_setup);
  ::tensorflow::PartialRunSetupRequest* _slow_release_partial_run_setup();
  public:
  const ::tensorflow::PartialRunSetupRequest& partial_run_setup() const;
  ::tensorflow::PartialRunSetupRequest* mutable_partial_run_setup();
  ::tensorflow::PartialRunSetupRequest* release_partial_run_setup();
  void set_allocated_partial_run_setup(::tensorflow::PartialRunSetupRequest* partial_run_setup);
  ::tensorflow::PartialRunSetupRequest* unsafe_arena_release_partial_run_setup();
  void unsafe_arena_set_allocated_partial_run_setup(
      ::tensorflow::PartialRunSetupRequest* partial_run_setup);

  // optional .tensorflow.RunStepRequest run_step = 4;
  bool has_run_step() const;
  void clear_run_step();
  static const int kRunStepFieldNumber = 4;
  private:
  void _slow_mutable_run_step();
  void _slow_set_allocated_run_step(
      ::google::protobuf::Arena* message_arena, ::tensorflow::RunStepRequest** run_step);
  ::tensorflow::RunStepRequest* _slow_release_run_step();
  public:
  const ::tensorflow::RunStepRequest& run_step() const;
  ::tensorflow::RunStepRequest* mutable_run_step();
  ::tensorflow::RunStepRequest* release_run_step();
  void set_allocated_run_step(::tensorflow::RunStepRequest* run_step);
  ::tensorflow::RunStepRequest* unsafe_arena_release_run_step();
  void unsafe_arena_set_allocated_run_step(
      ::tensorflow::RunStepRequest* run_step);

  // optional .tensorflow.CloseSessionRequest close_session = 5;
  bool has_close_session() const;
  void clear_close_session();
  static const int kCloseSessionFieldNumber = 5;
  private:
  void _slow_mutable_close_session();
  void _slow_set_allocated_close_session(
      ::google::protobuf::Arena* message_arena, ::tensorflow::CloseSessionRequest** close_session);
  ::tensorflow::CloseSessionRequest* _slow_release_close_session();
  public:
  const ::tensorflow::CloseSessionRequest& close_session() const;
  ::tensorflow::CloseSessionRequest* mutable_close_session();
  ::tensorflow::CloseSessionRequest* release_close_session();
  void set_allocated_close_session(::tensorflow::CloseSessionRequest* close_session);
  ::tensorflow::CloseSessionRequest* unsafe_arena_release_close_session();
  void unsafe_arena_set_allocated_close_session(
      ::tensorflow::CloseSessionRequest* close_session);

  // optional .tensorflow.ListDevicesRequest list_devices = 6;
  bool has_list_devices() const;
  void clear_list_devices();
  static const int kListDevicesFieldNumber = 6;
  private:
  void _slow_mutable_list_devices();
  void _slow_set_allocated_list_devices(
      ::google::protobuf::Arena* message_arena, ::tensorflow::ListDevicesRequest** list_devices);
  ::tensorflow::ListDevicesRequest* _slow_release_list_devices();
  public:
  const ::tensorflow::ListDevicesRequest& list_devices() const;
  ::tensorflow::ListDevicesRequest* mutable_list_devices();
  ::tensorflow::ListDevicesRequest* release_list_devices();
  void set_allocated_list_devices(::tensorflow::ListDevicesRequest* list_devices);
  ::tensorflow::ListDevicesRequest* unsafe_arena_release_list_devices();
  void unsafe_arena_set_allocated_list_devices(
      ::tensorflow::ListDevicesRequest* list_devices);

  // optional .tensorflow.ResetRequest reset_request = 7;
  bool has_reset_request() const;
  void clear_reset_request();
  static const int kResetRequestFieldNumber = 7;
  private:
  void _slow_mutable_reset_request();
  void _slow_set_allocated_reset_request(
      ::google::protobuf::Arena* message_arena, ::tensorflow::ResetRequest** reset_request);
  ::tensorflow::ResetRequest* _slow_release_reset_request();
  public:
  const ::tensorflow::ResetRequest& reset_request() const;
  ::tensorflow::ResetRequest* mutable_reset_request();
  ::tensorflow::ResetRequest* release_reset_request();
  void set_allocated_reset_request(::tensorflow::ResetRequest* reset_request);
  ::tensorflow::ResetRequest* unsafe_arena_release_reset_request();
  void unsafe_arena_set_allocated_reset_request(
      ::tensorflow::ResetRequest* reset_request);

  // optional .tensorflow.MakeCallableRequest make_callable = 8;
  bool has_make_callable() const;
  void clear_make_callable();
  static const int kMakeCallableFieldNumber = 8;
  private:
  void _slow_mutable_make_callable();
  void _slow_set_allocated_make_callable(
      ::google::protobuf::Arena* message_arena, ::tensorflow::MakeCallableRequest** make_callable);
  ::tensorflow::MakeCallableRequest* _slow_release_make_callable();
  public:
  const ::tensorflow::MakeCallableRequest& make_callable() const;
  ::tensorflow::MakeCallableRequest* mutable_make_callable();
  ::tensorflow::MakeCallableRequest* release_make_callable();
  void set_allocated_make_callable(::tensorflow::MakeCallableRequest* make_callable);
  ::tensorflow::MakeCallableRequest* unsafe_arena_release_make_callable();
  void unsafe_arena_set_allocated_make_callable(
      ::tensorflow::MakeCallableRequest* make_callable);

  // optional .tensorflow.RunCallableRequest run_callable = 9;
  bool has_run_callable() const;
  void clear_run_callable();
  static const int kRunCallableFieldNumber = 9;
  private:
  void _slow_mutable_run_callable();
  void _slow_set_allocated_run_callable(
      ::google::protobuf::Arena* message_arena, ::tensorflow::RunCallableRequest** run_callable);
  ::tensorflow::RunCallableRequest* _slow_release_run_callable();
  public:
  const ::tensorflow::RunCallableRequest& run_callable() const;
  ::tensorflow::RunCallableRequest* mutable_run_callable();
  ::tensorflow::RunCallableRequest* release_run_callable();
  void set_allocated_run_callable(::tensorflow::RunCallableRequest* run_callable);
  ::tensorflow::RunCallableRequest* unsafe_arena_release_run_callable();
  void unsafe_arena_set_allocated_run_callable(
      ::tensorflow::RunCallableRequest* run_callable);

  // optional .tensorflow.ReleaseCallableRequest release_callable = 10;
  bool has_release_callable() const;
  void clear_release_callable();
  static const int kReleaseCallableFieldNumber = 10;
  private:
  void _slow_mutable_release_callable();
  void _slow_set_allocated_release_callable(
      ::google::protobuf::Arena* message_arena, ::tensorflow::ReleaseCallableRequest** release_callable);
  ::tensorflow::ReleaseCallableRequest* _slow_release_release_callable();
  public:
  const ::tensorflow::ReleaseCallableRequest& release_callable() const;
  ::tensorflow::ReleaseCallableRequest* mutable_release_callable();
  ::tensorflow::ReleaseCallableRequest* release_release_callable();
  void set_allocated_release_callable(::tensorflow::ReleaseCallableRequest* release_callable);
  ::tensorflow::ReleaseCallableRequest* unsafe_arena_release_release_callable();
  void unsafe_arena_set_allocated_release_callable(
      ::tensorflow::ReleaseCallableRequest* release_callable);

  // optional .tensorflow.NewReplaySession new_replay_session = 11;
  bool has_new_replay_session() const;
  void clear_new_replay_session();
  static const int kNewReplaySessionFieldNumber = 11;
  private:
  void _slow_mutable_new_replay_session();
  void _slow_set_allocated_new_replay_session(
      ::google::protobuf::Arena* message_arena, ::tensorflow::NewReplaySession** new_replay_session);
  ::tensorflow::NewReplaySession* _slow_release_new_replay_session();
  public:
  const ::tensorflow::NewReplaySession& new_replay_session() const;
  ::tensorflow::NewReplaySession* mutable_new_replay_session();
  ::tensorflow::NewReplaySession* release_new_replay_session();
  void set_allocated_new_replay_session(::tensorflow::NewReplaySession* new_replay_session);
  ::tensorflow::NewReplaySession* unsafe_arena_release_new_replay_session();
  void unsafe_arena_set_allocated_new_replay_session(
      ::tensorflow::NewReplaySession* new_replay_session);

  // optional .tensorflow.CreateSessionResponse create_session_response = 21;
  bool has_create_session_response() const;
  void clear_create_session_response();
  static const int kCreateSessionResponseFieldNumber = 21;
  private:
  void _slow_mutable_create_session_response();
  void _slow_set_allocated_create_session_response(
      ::google::protobuf::Arena* message_arena, ::tensorflow::CreateSessionResponse** create_session_response);
  ::tensorflow::CreateSessionResponse* _slow_release_create_session_response();
  public:
  const ::tensorflow::CreateSessionResponse& create_session_response() const;
  ::tensorflow::CreateSessionResponse* mutable_create_session_response();
  ::tensorflow::CreateSessionResponse* release_create_session_response();
  void set_allocated_create_session_response(::tensorflow::CreateSessionResponse* create_session_response);
  ::tensorflow::CreateSessionResponse* unsafe_arena_release_create_session_response();
  void unsafe_arena_set_allocated_create_session_response(
      ::tensorflow::CreateSessionResponse* create_session_response);

  // optional .tensorflow.ExtendSessionResponse extend_session_response = 22;
  bool has_extend_session_response() const;
  void clear_extend_session_response();
  static const int kExtendSessionResponseFieldNumber = 22;
  private:
  void _slow_mutable_extend_session_response();
  void _slow_set_allocated_extend_session_response(
      ::google::protobuf::Arena* message_arena, ::tensorflow::ExtendSessionResponse** extend_session_response);
  ::tensorflow::ExtendSessionResponse* _slow_release_extend_session_response();
  public:
  const ::tensorflow::ExtendSessionResponse& extend_session_response() const;
  ::tensorflow::ExtendSessionResponse* mutable_extend_session_response();
  ::tensorflow::ExtendSessionResponse* release_extend_session_response();
  void set_allocated_extend_session_response(::tensorflow::ExtendSessionResponse* extend_session_response);
  ::tensorflow::ExtendSessionResponse* unsafe_arena_release_extend_session_response();
  void unsafe_arena_set_allocated_extend_session_response(
      ::tensorflow::ExtendSessionResponse* extend_session_response);

  // optional .tensorflow.PartialRunSetupResponse partial_run_setup_response = 23;
  bool has_partial_run_setup_response() const;
  void clear_partial_run_setup_response();
  static const int kPartialRunSetupResponseFieldNumber = 23;
  private:
  void _slow_mutable_partial_run_setup_response();
  void _slow_set_allocated_partial_run_setup_response(
      ::google::protobuf::Arena* message_arena, ::tensorflow::PartialRunSetupResponse** partial_run_setup_response);
  ::tensorflow::PartialRunSetupResponse* _slow_release_partial_run_setup_response();
  public:
  const ::tensorflow::PartialRunSetupResponse& partial_run_setup_response() const;
  ::tensorflow::PartialRunSetupResponse* mutable_partial_run_setup_response();
  ::tensorflow::PartialRunSetupResponse* release_partial_run_setup_response();
  void set_allocated_partial_run_setup_response(::tensorflow::PartialRunSetupResponse* partial_run_setup_response);
  ::tensorflow::PartialRunSetupResponse* unsafe_arena_release_partial_run_setup_response();
  void unsafe_arena_set_allocated_partial_run_setup_response(
      ::tensorflow::PartialRunSetupResponse* partial_run_setup_response);

  // optional .tensorflow.RunStepResponse run_step_response = 24;
  bool has_run_step_response() const;
  void clear_run_step_response();
  static const int kRunStepResponseFieldNumber = 24;
  private:
  void _slow_mutable_run_step_response();
  void _slow_set_allocated_run_step_response(
      ::google::protobuf::Arena* message_arena, ::tensorflow::RunStepResponse** run_step_response);
  ::tensorflow::RunStepResponse* _slow_release_run_step_response();
  public:
  const ::tensorflow::RunStepResponse& run_step_response() const;
  ::tensorflow::RunStepResponse* mutable_run_step_response();
  ::tensorflow::RunStepResponse* release_run_step_response();
  void set_allocated_run_step_response(::tensorflow::RunStepResponse* run_step_response);
  ::tensorflow::RunStepResponse* unsafe_arena_release_run_step_response();
  void unsafe_arena_set_allocated_run_step_response(
      ::tensorflow::RunStepResponse* run_step_response);

  // optional .tensorflow.CloseSessionResponse close_session_response = 25;
  bool has_close_session_response() const;
  void clear_close_session_response();
  static const int kCloseSessionResponseFieldNumber = 25;
  private:
  void _slow_mutable_close_session_response();
  void _slow_set_allocated_close_session_response(
      ::google::protobuf::Arena* message_arena, ::tensorflow::CloseSessionResponse** close_session_response);
  ::tensorflow::CloseSessionResponse* _slow_release_close_session_response();
  public:
  const ::tensorflow::CloseSessionResponse& close_session_response() const;
  ::tensorflow::CloseSessionResponse* mutable_close_session_response();
  ::tensorflow::CloseSessionResponse* release_close_session_response();
  void set_allocated_close_session_response(::tensorflow::CloseSessionResponse* close_session_response);
  ::tensorflow::CloseSessionResponse* unsafe_arena_release_close_session_response();
  void unsafe_arena_set_allocated_close_session_response(
      ::tensorflow::CloseSessionResponse* close_session_response);

  // optional .tensorflow.ListDevicesResponse list_devices_response = 26;
  bool has_list_devices_response() const;
  void clear_list_devices_response();
  static const int kListDevicesResponseFieldNumber = 26;
  private:
  void _slow_mutable_list_devices_response();
  void _slow_set_allocated_list_devices_response(
      ::google::protobuf::Arena* message_arena, ::tensorflow::ListDevicesResponse** list_devices_response);
  ::tensorflow::ListDevicesResponse* _slow_release_list_devices_response();
  public:
  const ::tensorflow::ListDevicesResponse& list_devices_response() const;
  ::tensorflow::ListDevicesResponse* mutable_list_devices_response();
  ::tensorflow::ListDevicesResponse* release_list_devices_response();
  void set_allocated_list_devices_response(::tensorflow::ListDevicesResponse* list_devices_response);
  ::tensorflow::ListDevicesResponse* unsafe_arena_release_list_devices_response();
  void unsafe_arena_set_allocated_list_devices_response(
      ::tensorflow::ListDevicesResponse* list_devices_response);

  // optional .tensorflow.ResetResponse reset_request_response = 27;
  bool has_reset_request_response() const;
  void clear_reset_request_response();
  static const int kResetRequestResponseFieldNumber = 27;
  private:
  void _slow_mutable_reset_request_response();
  void _slow_set_allocated_reset_request_response(
      ::google::protobuf::Arena* message_arena, ::tensorflow::ResetResponse** reset_request_response);
  ::tensorflow::ResetResponse* _slow_release_reset_request_response();
  public:
  const ::tensorflow::ResetResponse& reset_request_response() const;
  ::tensorflow::ResetResponse* mutable_reset_request_response();
  ::tensorflow::ResetResponse* release_reset_request_response();
  void set_allocated_reset_request_response(::tensorflow::ResetResponse* reset_request_response);
  ::tensorflow::ResetResponse* unsafe_arena_release_reset_request_response();
  void unsafe_arena_set_allocated_reset_request_response(
      ::tensorflow::ResetResponse* reset_request_response);

  // optional .tensorflow.MakeCallableResponse make_callable_response = 28;
  bool has_make_callable_response() const;
  void clear_make_callable_response();
  static const int kMakeCallableResponseFieldNumber = 28;
  private:
  void _slow_mutable_make_callable_response();
  void _slow_set_allocated_make_callable_response(
      ::google::protobuf::Arena* message_arena, ::tensorflow::MakeCallableResponse** make_callable_response);
  ::tensorflow::MakeCallableResponse* _slow_release_make_callable_response();
  public:
  const ::tensorflow::MakeCallableResponse& make_callable_response() const;
  ::tensorflow::MakeCallableResponse* mutable_make_callable_response();
  ::tensorflow::MakeCallableResponse* release_make_callable_response();
  void set_allocated_make_callable_response(::tensorflow::MakeCallableResponse* make_callable_response);
  ::tensorflow::MakeCallableResponse* unsafe_arena_release_make_callable_response();
  void unsafe_arena_set_allocated_make_callable_response(
      ::tensorflow::MakeCallableResponse* make_callable_response);

  // optional .tensorflow.RunCallableResponse run_callable_response = 29;
  bool has_run_callable_response() const;
  void clear_run_callable_response();
  static const int kRunCallableResponseFieldNumber = 29;
  private:
  void _slow_mutable_run_callable_response();
  void _slow_set_allocated_run_callable_response(
      ::google::protobuf::Arena* message_arena, ::tensorflow::RunCallableResponse** run_callable_response);
  ::tensorflow::RunCallableResponse* _slow_release_run_callable_response();
  public:
  const ::tensorflow::RunCallableResponse& run_callable_response() const;
  ::tensorflow::RunCallableResponse* mutable_run_callable_response();
  ::tensorflow::RunCallableResponse* release_run_callable_response();
  void set_allocated_run_callable_response(::tensorflow::RunCallableResponse* run_callable_response);
  ::tensorflow::RunCallableResponse* unsafe_arena_release_run_callable_response();
  void unsafe_arena_set_allocated_run_callable_response(
      ::tensorflow::RunCallableResponse* run_callable_response);

  // optional .tensorflow.ReleaseCallableResponse release_callable_response = 30;
  bool has_release_callable_response() const;
  void clear_release_callable_response();
  static const int kReleaseCallableResponseFieldNumber = 30;
  private:
  void _slow_mutable_release_callable_response();
  void _slow_set_allocated_release_callable_response(
      ::google::protobuf::Arena* message_arena, ::tensorflow::ReleaseCallableResponse** release_callable_response);
  ::tensorflow::ReleaseCallableResponse* _slow_release_release_callable_response();
  public:
  const ::tensorflow::ReleaseCallableResponse& release_callable_response() const;
  ::tensorflow::ReleaseCallableResponse* mutable_release_callable_response();
  ::tensorflow::ReleaseCallableResponse* release_release_callable_response();
  void set_allocated_release_callable_response(::tensorflow::ReleaseCallableResponse* release_callable_response);
  ::tensorflow::ReleaseCallableResponse* unsafe_arena_release_release_callable_response();
  void unsafe_arena_set_allocated_release_callable_response(
      ::tensorflow::ReleaseCallableResponse* release_callable_response);

  OpCase op_case() const;
  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:tensorflow.ReplayOp)
 private:
  inline void set_has_create_session();
  inline void set_has_extend_session();
  inline void set_has_partial_run_setup();
  inline void set_has_run_step();
  inline void set_has_close_session();
  inline void set_has_list_devices();
  inline void set_has_reset_request();
  inline void set_has_make_callable();
  inline void set_has_run_callable();
  inline void set_has_release_callable();
  inline void set_has_new_replay_session();
  inline void set_has_create_session_response();
  inline void set_has_extend_session_response();
  inline void set_has_partial_run_setup_response();
  inline void set_has_run_step_response();
  inline void set_has_close_session_response();
  inline void set_has_list_devices_response();
  inline void set_has_reset_request_response();
  inline void set_has_make_callable_response();
  inline void set_has_run_callable_response();
  inline void set_has_release_callable_response();

  inline bool has_op() const;
  void clear_op();
  inline void clear_has_op();

  inline bool has_response() const;
  void clear_response();
  inline void clear_has_response();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  double start_time_us_;
  double end_time_us_;
  union OpUnion {
    OpUnion() {}
    ::tensorflow::CreateSessionRequest* create_session_;
    ::tensorflow::ExtendSessionRequest* extend_session_;
    ::tensorflow::PartialRunSetupRequest* partial_run_setup_;
    ::tensorflow::RunStepRequest* run_step_;
    ::tensorflow::CloseSessionRequest* close_session_;
    ::tensorflow::ListDevicesRequest* list_devices_;
    ::tensorflow::ResetRequest* reset_request_;
    ::tensorflow::MakeCallableRequest* make_callable_;
    ::tensorflow::RunCallableRequest* run_callable_;
    ::tensorflow::ReleaseCallableRequest* release_callable_;
    ::tensorflow::NewReplaySession* new_replay_session_;
  } op_;
  union ResponseUnion {
    ResponseUnion() {}
    ::tensorflow::CreateSessionResponse* create_session_response_;
    ::tensorflow::ExtendSessionResponse* extend_session_response_;
    ::tensorflow::PartialRunSetupResponse* partial_run_setup_response_;
    ::tensorflow::RunStepResponse* run_step_response_;
    ::tensorflow::CloseSessionResponse* close_session_response_;
    ::tensorflow::ListDevicesResponse* list_devices_response_;
    ::tensorflow::ResetResponse* reset_request_response_;
    ::tensorflow::MakeCallableResponse* make_callable_response_;
    ::tensorflow::RunCallableResponse* run_callable_response_;
    ::tensorflow::ReleaseCallableResponse* release_callable_response_;
  } response_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[2];

  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto();

  void InitAsDefaultInstance();
  static ReplayOp* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// NewReplaySession

// optional .tensorflow.ListDevicesResponse devices = 1;
inline bool NewReplaySession::has_devices() const {
  return !_is_default_instance_ && devices_ != NULL;
}
inline void NewReplaySession::clear_devices() {
  if (GetArenaNoVirtual() == NULL && devices_ != NULL) delete devices_;
  devices_ = NULL;
}
inline const ::tensorflow::ListDevicesResponse& NewReplaySession::devices() const {
  // @@protoc_insertion_point(field_get:tensorflow.NewReplaySession.devices)
  return devices_ != NULL ? *devices_ : *default_instance_->devices_;
}
inline ::tensorflow::ListDevicesResponse* NewReplaySession::mutable_devices() {
  
  if (devices_ == NULL) {
    _slow_mutable_devices();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.NewReplaySession.devices)
  return devices_;
}
inline ::tensorflow::ListDevicesResponse* NewReplaySession::release_devices() {
  // @@protoc_insertion_point(field_release:tensorflow.NewReplaySession.devices)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_devices();
  } else {
    ::tensorflow::ListDevicesResponse* temp = devices_;
    devices_ = NULL;
    return temp;
  }
}
inline  void NewReplaySession::set_allocated_devices(::tensorflow::ListDevicesResponse* devices) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete devices_;
  }
  if (devices != NULL) {
    _slow_set_allocated_devices(message_arena, &devices);
  }
  devices_ = devices;
  if (devices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.NewReplaySession.devices)
}

// optional string session_handle = 2;
inline void NewReplaySession::clear_session_handle() {
  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& NewReplaySession::session_handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.NewReplaySession.session_handle)
  return session_handle_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewReplaySession::set_session_handle(const ::std::string& value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.NewReplaySession.session_handle)
}
inline void NewReplaySession::set_session_handle(const char* value) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.NewReplaySession.session_handle)
}
inline void NewReplaySession::set_session_handle(const char* value,
    size_t size) {
  
  session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.NewReplaySession.session_handle)
}
inline ::std::string* NewReplaySession::mutable_session_handle() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.NewReplaySession.session_handle)
  return session_handle_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NewReplaySession::release_session_handle() {
  // @@protoc_insertion_point(field_release:tensorflow.NewReplaySession.session_handle)
  
  return session_handle_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NewReplaySession::unsafe_arena_release_session_handle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.NewReplaySession.session_handle)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return session_handle_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NewReplaySession::set_allocated_session_handle(::std::string* session_handle) {
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_handle,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.NewReplaySession.session_handle)
}
inline void NewReplaySession::unsafe_arena_set_allocated_session_handle(
    ::std::string* session_handle) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (session_handle != NULL) {
    
  } else {
    
  }
  session_handle_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      session_handle, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.NewReplaySession.session_handle)
}

// -------------------------------------------------------------------

// ReplayOp

// optional double start_time_us = 31;
inline void ReplayOp::clear_start_time_us() {
  start_time_us_ = 0;
}
inline double ReplayOp::start_time_us() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.start_time_us)
  return start_time_us_;
}
inline void ReplayOp::set_start_time_us(double value) {
  
  start_time_us_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ReplayOp.start_time_us)
}

// optional double end_time_us = 32;
inline void ReplayOp::clear_end_time_us() {
  end_time_us_ = 0;
}
inline double ReplayOp::end_time_us() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.end_time_us)
  return end_time_us_;
}
inline void ReplayOp::set_end_time_us(double value) {
  
  end_time_us_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ReplayOp.end_time_us)
}

// optional .tensorflow.CreateSessionRequest create_session = 1;
inline bool ReplayOp::has_create_session() const {
  return op_case() == kCreateSession;
}
inline void ReplayOp::set_has_create_session() {
  _oneof_case_[0] = kCreateSession;
}
inline void ReplayOp::clear_create_session() {
  if (has_create_session()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.create_session_;
    }
    clear_has_op();
  }
}
inline  const ::tensorflow::CreateSessionRequest& ReplayOp::create_session() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.create_session)
  return has_create_session()
      ? *op_.create_session_
      : ::tensorflow::CreateSessionRequest::default_instance();
}
inline ::tensorflow::CreateSessionRequest* ReplayOp::mutable_create_session() {
  if (!has_create_session()) {
    clear_op();
    set_has_create_session();
    op_.create_session_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::CreateSessionRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.create_session)
  return op_.create_session_;
}
inline ::tensorflow::CreateSessionRequest* ReplayOp::release_create_session() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.create_session)
  if (has_create_session()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::CreateSessionRequest* temp = new ::tensorflow::CreateSessionRequest;
      temp->MergeFrom(*op_.create_session_);
      op_.create_session_ = NULL;
      return temp;
    } else {
      ::tensorflow::CreateSessionRequest* temp = op_.create_session_;
      op_.create_session_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void ReplayOp::set_allocated_create_session(::tensorflow::CreateSessionRequest* create_session) {
  clear_op();
  if (create_session) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(create_session) == NULL) {
      GetArenaNoVirtual()->Own(create_session);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(create_session)) {
      ::tensorflow::CreateSessionRequest* new_create_session = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::CreateSessionRequest >(
          GetArenaNoVirtual());
      new_create_session->CopyFrom(*create_session);
      create_session = new_create_session;
    }
    set_has_create_session();
    op_.create_session_ = create_session;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.create_session)
}
inline  ::tensorflow::CreateSessionRequest* ReplayOp::unsafe_arena_release_create_session() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.create_session)
  if (has_create_session()) {
    clear_has_op();
    ::tensorflow::CreateSessionRequest* temp = op_.create_session_;
    op_.create_session_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void ReplayOp::unsafe_arena_set_allocated_create_session(::tensorflow::CreateSessionRequest* create_session) {
  clear_op();
  if (create_session) {
    set_has_create_session();
    op_.create_session_ = create_session;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.create_session)
}

// optional .tensorflow.ExtendSessionRequest extend_session = 2;
inline bool ReplayOp::has_extend_session() const {
  return op_case() == kExtendSession;
}
inline void ReplayOp::set_has_extend_session() {
  _oneof_case_[0] = kExtendSession;
}
inline void ReplayOp::clear_extend_session() {
  if (has_extend_session()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.extend_session_;
    }
    clear_has_op();
  }
}
inline  const ::tensorflow::ExtendSessionRequest& ReplayOp::extend_session() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.extend_session)
  return has_extend_session()
      ? *op_.extend_session_
      : ::tensorflow::ExtendSessionRequest::default_instance();
}
inline ::tensorflow::ExtendSessionRequest* ReplayOp::mutable_extend_session() {
  if (!has_extend_session()) {
    clear_op();
    set_has_extend_session();
    op_.extend_session_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::ExtendSessionRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.extend_session)
  return op_.extend_session_;
}
inline ::tensorflow::ExtendSessionRequest* ReplayOp::release_extend_session() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.extend_session)
  if (has_extend_session()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::ExtendSessionRequest* temp = new ::tensorflow::ExtendSessionRequest;
      temp->MergeFrom(*op_.extend_session_);
      op_.extend_session_ = NULL;
      return temp;
    } else {
      ::tensorflow::ExtendSessionRequest* temp = op_.extend_session_;
      op_.extend_session_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void ReplayOp::set_allocated_extend_session(::tensorflow::ExtendSessionRequest* extend_session) {
  clear_op();
  if (extend_session) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(extend_session) == NULL) {
      GetArenaNoVirtual()->Own(extend_session);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(extend_session)) {
      ::tensorflow::ExtendSessionRequest* new_extend_session = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::ExtendSessionRequest >(
          GetArenaNoVirtual());
      new_extend_session->CopyFrom(*extend_session);
      extend_session = new_extend_session;
    }
    set_has_extend_session();
    op_.extend_session_ = extend_session;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.extend_session)
}
inline  ::tensorflow::ExtendSessionRequest* ReplayOp::unsafe_arena_release_extend_session() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.extend_session)
  if (has_extend_session()) {
    clear_has_op();
    ::tensorflow::ExtendSessionRequest* temp = op_.extend_session_;
    op_.extend_session_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void ReplayOp::unsafe_arena_set_allocated_extend_session(::tensorflow::ExtendSessionRequest* extend_session) {
  clear_op();
  if (extend_session) {
    set_has_extend_session();
    op_.extend_session_ = extend_session;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.extend_session)
}

// optional .tensorflow.PartialRunSetupRequest partial_run_setup = 3;
inline bool ReplayOp::has_partial_run_setup() const {
  return op_case() == kPartialRunSetup;
}
inline void ReplayOp::set_has_partial_run_setup() {
  _oneof_case_[0] = kPartialRunSetup;
}
inline void ReplayOp::clear_partial_run_setup() {
  if (has_partial_run_setup()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.partial_run_setup_;
    }
    clear_has_op();
  }
}
inline  const ::tensorflow::PartialRunSetupRequest& ReplayOp::partial_run_setup() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.partial_run_setup)
  return has_partial_run_setup()
      ? *op_.partial_run_setup_
      : ::tensorflow::PartialRunSetupRequest::default_instance();
}
inline ::tensorflow::PartialRunSetupRequest* ReplayOp::mutable_partial_run_setup() {
  if (!has_partial_run_setup()) {
    clear_op();
    set_has_partial_run_setup();
    op_.partial_run_setup_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::PartialRunSetupRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.partial_run_setup)
  return op_.partial_run_setup_;
}
inline ::tensorflow::PartialRunSetupRequest* ReplayOp::release_partial_run_setup() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.partial_run_setup)
  if (has_partial_run_setup()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::PartialRunSetupRequest* temp = new ::tensorflow::PartialRunSetupRequest;
      temp->MergeFrom(*op_.partial_run_setup_);
      op_.partial_run_setup_ = NULL;
      return temp;
    } else {
      ::tensorflow::PartialRunSetupRequest* temp = op_.partial_run_setup_;
      op_.partial_run_setup_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void ReplayOp::set_allocated_partial_run_setup(::tensorflow::PartialRunSetupRequest* partial_run_setup) {
  clear_op();
  if (partial_run_setup) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(partial_run_setup) == NULL) {
      GetArenaNoVirtual()->Own(partial_run_setup);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(partial_run_setup)) {
      ::tensorflow::PartialRunSetupRequest* new_partial_run_setup = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::PartialRunSetupRequest >(
          GetArenaNoVirtual());
      new_partial_run_setup->CopyFrom(*partial_run_setup);
      partial_run_setup = new_partial_run_setup;
    }
    set_has_partial_run_setup();
    op_.partial_run_setup_ = partial_run_setup;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.partial_run_setup)
}
inline  ::tensorflow::PartialRunSetupRequest* ReplayOp::unsafe_arena_release_partial_run_setup() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.partial_run_setup)
  if (has_partial_run_setup()) {
    clear_has_op();
    ::tensorflow::PartialRunSetupRequest* temp = op_.partial_run_setup_;
    op_.partial_run_setup_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void ReplayOp::unsafe_arena_set_allocated_partial_run_setup(::tensorflow::PartialRunSetupRequest* partial_run_setup) {
  clear_op();
  if (partial_run_setup) {
    set_has_partial_run_setup();
    op_.partial_run_setup_ = partial_run_setup;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.partial_run_setup)
}

// optional .tensorflow.RunStepRequest run_step = 4;
inline bool ReplayOp::has_run_step() const {
  return op_case() == kRunStep;
}
inline void ReplayOp::set_has_run_step() {
  _oneof_case_[0] = kRunStep;
}
inline void ReplayOp::clear_run_step() {
  if (has_run_step()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.run_step_;
    }
    clear_has_op();
  }
}
inline  const ::tensorflow::RunStepRequest& ReplayOp::run_step() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.run_step)
  return has_run_step()
      ? *op_.run_step_
      : ::tensorflow::RunStepRequest::default_instance();
}
inline ::tensorflow::RunStepRequest* ReplayOp::mutable_run_step() {
  if (!has_run_step()) {
    clear_op();
    set_has_run_step();
    op_.run_step_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::RunStepRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.run_step)
  return op_.run_step_;
}
inline ::tensorflow::RunStepRequest* ReplayOp::release_run_step() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.run_step)
  if (has_run_step()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::RunStepRequest* temp = new ::tensorflow::RunStepRequest;
      temp->MergeFrom(*op_.run_step_);
      op_.run_step_ = NULL;
      return temp;
    } else {
      ::tensorflow::RunStepRequest* temp = op_.run_step_;
      op_.run_step_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void ReplayOp::set_allocated_run_step(::tensorflow::RunStepRequest* run_step) {
  clear_op();
  if (run_step) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(run_step) == NULL) {
      GetArenaNoVirtual()->Own(run_step);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(run_step)) {
      ::tensorflow::RunStepRequest* new_run_step = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::RunStepRequest >(
          GetArenaNoVirtual());
      new_run_step->CopyFrom(*run_step);
      run_step = new_run_step;
    }
    set_has_run_step();
    op_.run_step_ = run_step;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.run_step)
}
inline  ::tensorflow::RunStepRequest* ReplayOp::unsafe_arena_release_run_step() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.run_step)
  if (has_run_step()) {
    clear_has_op();
    ::tensorflow::RunStepRequest* temp = op_.run_step_;
    op_.run_step_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void ReplayOp::unsafe_arena_set_allocated_run_step(::tensorflow::RunStepRequest* run_step) {
  clear_op();
  if (run_step) {
    set_has_run_step();
    op_.run_step_ = run_step;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.run_step)
}

// optional .tensorflow.CloseSessionRequest close_session = 5;
inline bool ReplayOp::has_close_session() const {
  return op_case() == kCloseSession;
}
inline void ReplayOp::set_has_close_session() {
  _oneof_case_[0] = kCloseSession;
}
inline void ReplayOp::clear_close_session() {
  if (has_close_session()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.close_session_;
    }
    clear_has_op();
  }
}
inline  const ::tensorflow::CloseSessionRequest& ReplayOp::close_session() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.close_session)
  return has_close_session()
      ? *op_.close_session_
      : ::tensorflow::CloseSessionRequest::default_instance();
}
inline ::tensorflow::CloseSessionRequest* ReplayOp::mutable_close_session() {
  if (!has_close_session()) {
    clear_op();
    set_has_close_session();
    op_.close_session_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::CloseSessionRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.close_session)
  return op_.close_session_;
}
inline ::tensorflow::CloseSessionRequest* ReplayOp::release_close_session() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.close_session)
  if (has_close_session()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::CloseSessionRequest* temp = new ::tensorflow::CloseSessionRequest;
      temp->MergeFrom(*op_.close_session_);
      op_.close_session_ = NULL;
      return temp;
    } else {
      ::tensorflow::CloseSessionRequest* temp = op_.close_session_;
      op_.close_session_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void ReplayOp::set_allocated_close_session(::tensorflow::CloseSessionRequest* close_session) {
  clear_op();
  if (close_session) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(close_session) == NULL) {
      GetArenaNoVirtual()->Own(close_session);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(close_session)) {
      ::tensorflow::CloseSessionRequest* new_close_session = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::CloseSessionRequest >(
          GetArenaNoVirtual());
      new_close_session->CopyFrom(*close_session);
      close_session = new_close_session;
    }
    set_has_close_session();
    op_.close_session_ = close_session;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.close_session)
}
inline  ::tensorflow::CloseSessionRequest* ReplayOp::unsafe_arena_release_close_session() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.close_session)
  if (has_close_session()) {
    clear_has_op();
    ::tensorflow::CloseSessionRequest* temp = op_.close_session_;
    op_.close_session_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void ReplayOp::unsafe_arena_set_allocated_close_session(::tensorflow::CloseSessionRequest* close_session) {
  clear_op();
  if (close_session) {
    set_has_close_session();
    op_.close_session_ = close_session;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.close_session)
}

// optional .tensorflow.ListDevicesRequest list_devices = 6;
inline bool ReplayOp::has_list_devices() const {
  return op_case() == kListDevices;
}
inline void ReplayOp::set_has_list_devices() {
  _oneof_case_[0] = kListDevices;
}
inline void ReplayOp::clear_list_devices() {
  if (has_list_devices()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.list_devices_;
    }
    clear_has_op();
  }
}
inline  const ::tensorflow::ListDevicesRequest& ReplayOp::list_devices() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.list_devices)
  return has_list_devices()
      ? *op_.list_devices_
      : ::tensorflow::ListDevicesRequest::default_instance();
}
inline ::tensorflow::ListDevicesRequest* ReplayOp::mutable_list_devices() {
  if (!has_list_devices()) {
    clear_op();
    set_has_list_devices();
    op_.list_devices_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::ListDevicesRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.list_devices)
  return op_.list_devices_;
}
inline ::tensorflow::ListDevicesRequest* ReplayOp::release_list_devices() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.list_devices)
  if (has_list_devices()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::ListDevicesRequest* temp = new ::tensorflow::ListDevicesRequest;
      temp->MergeFrom(*op_.list_devices_);
      op_.list_devices_ = NULL;
      return temp;
    } else {
      ::tensorflow::ListDevicesRequest* temp = op_.list_devices_;
      op_.list_devices_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void ReplayOp::set_allocated_list_devices(::tensorflow::ListDevicesRequest* list_devices) {
  clear_op();
  if (list_devices) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(list_devices) == NULL) {
      GetArenaNoVirtual()->Own(list_devices);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(list_devices)) {
      ::tensorflow::ListDevicesRequest* new_list_devices = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::ListDevicesRequest >(
          GetArenaNoVirtual());
      new_list_devices->CopyFrom(*list_devices);
      list_devices = new_list_devices;
    }
    set_has_list_devices();
    op_.list_devices_ = list_devices;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.list_devices)
}
inline  ::tensorflow::ListDevicesRequest* ReplayOp::unsafe_arena_release_list_devices() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.list_devices)
  if (has_list_devices()) {
    clear_has_op();
    ::tensorflow::ListDevicesRequest* temp = op_.list_devices_;
    op_.list_devices_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void ReplayOp::unsafe_arena_set_allocated_list_devices(::tensorflow::ListDevicesRequest* list_devices) {
  clear_op();
  if (list_devices) {
    set_has_list_devices();
    op_.list_devices_ = list_devices;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.list_devices)
}

// optional .tensorflow.ResetRequest reset_request = 7;
inline bool ReplayOp::has_reset_request() const {
  return op_case() == kResetRequest;
}
inline void ReplayOp::set_has_reset_request() {
  _oneof_case_[0] = kResetRequest;
}
inline void ReplayOp::clear_reset_request() {
  if (has_reset_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.reset_request_;
    }
    clear_has_op();
  }
}
inline  const ::tensorflow::ResetRequest& ReplayOp::reset_request() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.reset_request)
  return has_reset_request()
      ? *op_.reset_request_
      : ::tensorflow::ResetRequest::default_instance();
}
inline ::tensorflow::ResetRequest* ReplayOp::mutable_reset_request() {
  if (!has_reset_request()) {
    clear_op();
    set_has_reset_request();
    op_.reset_request_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::ResetRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.reset_request)
  return op_.reset_request_;
}
inline ::tensorflow::ResetRequest* ReplayOp::release_reset_request() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.reset_request)
  if (has_reset_request()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::ResetRequest* temp = new ::tensorflow::ResetRequest;
      temp->MergeFrom(*op_.reset_request_);
      op_.reset_request_ = NULL;
      return temp;
    } else {
      ::tensorflow::ResetRequest* temp = op_.reset_request_;
      op_.reset_request_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void ReplayOp::set_allocated_reset_request(::tensorflow::ResetRequest* reset_request) {
  clear_op();
  if (reset_request) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(reset_request) == NULL) {
      GetArenaNoVirtual()->Own(reset_request);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(reset_request)) {
      ::tensorflow::ResetRequest* new_reset_request = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::ResetRequest >(
          GetArenaNoVirtual());
      new_reset_request->CopyFrom(*reset_request);
      reset_request = new_reset_request;
    }
    set_has_reset_request();
    op_.reset_request_ = reset_request;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.reset_request)
}
inline  ::tensorflow::ResetRequest* ReplayOp::unsafe_arena_release_reset_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.reset_request)
  if (has_reset_request()) {
    clear_has_op();
    ::tensorflow::ResetRequest* temp = op_.reset_request_;
    op_.reset_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void ReplayOp::unsafe_arena_set_allocated_reset_request(::tensorflow::ResetRequest* reset_request) {
  clear_op();
  if (reset_request) {
    set_has_reset_request();
    op_.reset_request_ = reset_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.reset_request)
}

// optional .tensorflow.MakeCallableRequest make_callable = 8;
inline bool ReplayOp::has_make_callable() const {
  return op_case() == kMakeCallable;
}
inline void ReplayOp::set_has_make_callable() {
  _oneof_case_[0] = kMakeCallable;
}
inline void ReplayOp::clear_make_callable() {
  if (has_make_callable()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.make_callable_;
    }
    clear_has_op();
  }
}
inline  const ::tensorflow::MakeCallableRequest& ReplayOp::make_callable() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.make_callable)
  return has_make_callable()
      ? *op_.make_callable_
      : ::tensorflow::MakeCallableRequest::default_instance();
}
inline ::tensorflow::MakeCallableRequest* ReplayOp::mutable_make_callable() {
  if (!has_make_callable()) {
    clear_op();
    set_has_make_callable();
    op_.make_callable_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::MakeCallableRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.make_callable)
  return op_.make_callable_;
}
inline ::tensorflow::MakeCallableRequest* ReplayOp::release_make_callable() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.make_callable)
  if (has_make_callable()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::MakeCallableRequest* temp = new ::tensorflow::MakeCallableRequest;
      temp->MergeFrom(*op_.make_callable_);
      op_.make_callable_ = NULL;
      return temp;
    } else {
      ::tensorflow::MakeCallableRequest* temp = op_.make_callable_;
      op_.make_callable_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void ReplayOp::set_allocated_make_callable(::tensorflow::MakeCallableRequest* make_callable) {
  clear_op();
  if (make_callable) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(make_callable) == NULL) {
      GetArenaNoVirtual()->Own(make_callable);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(make_callable)) {
      ::tensorflow::MakeCallableRequest* new_make_callable = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::MakeCallableRequest >(
          GetArenaNoVirtual());
      new_make_callable->CopyFrom(*make_callable);
      make_callable = new_make_callable;
    }
    set_has_make_callable();
    op_.make_callable_ = make_callable;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.make_callable)
}
inline  ::tensorflow::MakeCallableRequest* ReplayOp::unsafe_arena_release_make_callable() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.make_callable)
  if (has_make_callable()) {
    clear_has_op();
    ::tensorflow::MakeCallableRequest* temp = op_.make_callable_;
    op_.make_callable_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void ReplayOp::unsafe_arena_set_allocated_make_callable(::tensorflow::MakeCallableRequest* make_callable) {
  clear_op();
  if (make_callable) {
    set_has_make_callable();
    op_.make_callable_ = make_callable;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.make_callable)
}

// optional .tensorflow.RunCallableRequest run_callable = 9;
inline bool ReplayOp::has_run_callable() const {
  return op_case() == kRunCallable;
}
inline void ReplayOp::set_has_run_callable() {
  _oneof_case_[0] = kRunCallable;
}
inline void ReplayOp::clear_run_callable() {
  if (has_run_callable()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.run_callable_;
    }
    clear_has_op();
  }
}
inline  const ::tensorflow::RunCallableRequest& ReplayOp::run_callable() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.run_callable)
  return has_run_callable()
      ? *op_.run_callable_
      : ::tensorflow::RunCallableRequest::default_instance();
}
inline ::tensorflow::RunCallableRequest* ReplayOp::mutable_run_callable() {
  if (!has_run_callable()) {
    clear_op();
    set_has_run_callable();
    op_.run_callable_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::RunCallableRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.run_callable)
  return op_.run_callable_;
}
inline ::tensorflow::RunCallableRequest* ReplayOp::release_run_callable() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.run_callable)
  if (has_run_callable()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::RunCallableRequest* temp = new ::tensorflow::RunCallableRequest;
      temp->MergeFrom(*op_.run_callable_);
      op_.run_callable_ = NULL;
      return temp;
    } else {
      ::tensorflow::RunCallableRequest* temp = op_.run_callable_;
      op_.run_callable_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void ReplayOp::set_allocated_run_callable(::tensorflow::RunCallableRequest* run_callable) {
  clear_op();
  if (run_callable) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(run_callable) == NULL) {
      GetArenaNoVirtual()->Own(run_callable);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(run_callable)) {
      ::tensorflow::RunCallableRequest* new_run_callable = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::RunCallableRequest >(
          GetArenaNoVirtual());
      new_run_callable->CopyFrom(*run_callable);
      run_callable = new_run_callable;
    }
    set_has_run_callable();
    op_.run_callable_ = run_callable;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.run_callable)
}
inline  ::tensorflow::RunCallableRequest* ReplayOp::unsafe_arena_release_run_callable() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.run_callable)
  if (has_run_callable()) {
    clear_has_op();
    ::tensorflow::RunCallableRequest* temp = op_.run_callable_;
    op_.run_callable_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void ReplayOp::unsafe_arena_set_allocated_run_callable(::tensorflow::RunCallableRequest* run_callable) {
  clear_op();
  if (run_callable) {
    set_has_run_callable();
    op_.run_callable_ = run_callable;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.run_callable)
}

// optional .tensorflow.ReleaseCallableRequest release_callable = 10;
inline bool ReplayOp::has_release_callable() const {
  return op_case() == kReleaseCallable;
}
inline void ReplayOp::set_has_release_callable() {
  _oneof_case_[0] = kReleaseCallable;
}
inline void ReplayOp::clear_release_callable() {
  if (has_release_callable()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.release_callable_;
    }
    clear_has_op();
  }
}
inline  const ::tensorflow::ReleaseCallableRequest& ReplayOp::release_callable() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.release_callable)
  return has_release_callable()
      ? *op_.release_callable_
      : ::tensorflow::ReleaseCallableRequest::default_instance();
}
inline ::tensorflow::ReleaseCallableRequest* ReplayOp::mutable_release_callable() {
  if (!has_release_callable()) {
    clear_op();
    set_has_release_callable();
    op_.release_callable_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::ReleaseCallableRequest >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.release_callable)
  return op_.release_callable_;
}
inline ::tensorflow::ReleaseCallableRequest* ReplayOp::release_release_callable() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.release_callable)
  if (has_release_callable()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::ReleaseCallableRequest* temp = new ::tensorflow::ReleaseCallableRequest;
      temp->MergeFrom(*op_.release_callable_);
      op_.release_callable_ = NULL;
      return temp;
    } else {
      ::tensorflow::ReleaseCallableRequest* temp = op_.release_callable_;
      op_.release_callable_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void ReplayOp::set_allocated_release_callable(::tensorflow::ReleaseCallableRequest* release_callable) {
  clear_op();
  if (release_callable) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(release_callable) == NULL) {
      GetArenaNoVirtual()->Own(release_callable);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(release_callable)) {
      ::tensorflow::ReleaseCallableRequest* new_release_callable = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::ReleaseCallableRequest >(
          GetArenaNoVirtual());
      new_release_callable->CopyFrom(*release_callable);
      release_callable = new_release_callable;
    }
    set_has_release_callable();
    op_.release_callable_ = release_callable;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.release_callable)
}
inline  ::tensorflow::ReleaseCallableRequest* ReplayOp::unsafe_arena_release_release_callable() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.release_callable)
  if (has_release_callable()) {
    clear_has_op();
    ::tensorflow::ReleaseCallableRequest* temp = op_.release_callable_;
    op_.release_callable_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void ReplayOp::unsafe_arena_set_allocated_release_callable(::tensorflow::ReleaseCallableRequest* release_callable) {
  clear_op();
  if (release_callable) {
    set_has_release_callable();
    op_.release_callable_ = release_callable;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.release_callable)
}

// optional .tensorflow.NewReplaySession new_replay_session = 11;
inline bool ReplayOp::has_new_replay_session() const {
  return op_case() == kNewReplaySession;
}
inline void ReplayOp::set_has_new_replay_session() {
  _oneof_case_[0] = kNewReplaySession;
}
inline void ReplayOp::clear_new_replay_session() {
  if (has_new_replay_session()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.new_replay_session_;
    }
    clear_has_op();
  }
}
inline  const ::tensorflow::NewReplaySession& ReplayOp::new_replay_session() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.new_replay_session)
  return has_new_replay_session()
      ? *op_.new_replay_session_
      : ::tensorflow::NewReplaySession::default_instance();
}
inline ::tensorflow::NewReplaySession* ReplayOp::mutable_new_replay_session() {
  if (!has_new_replay_session()) {
    clear_op();
    set_has_new_replay_session();
    op_.new_replay_session_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::NewReplaySession >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.new_replay_session)
  return op_.new_replay_session_;
}
inline ::tensorflow::NewReplaySession* ReplayOp::release_new_replay_session() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.new_replay_session)
  if (has_new_replay_session()) {
    clear_has_op();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::NewReplaySession* temp = new ::tensorflow::NewReplaySession;
      temp->MergeFrom(*op_.new_replay_session_);
      op_.new_replay_session_ = NULL;
      return temp;
    } else {
      ::tensorflow::NewReplaySession* temp = op_.new_replay_session_;
      op_.new_replay_session_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void ReplayOp::set_allocated_new_replay_session(::tensorflow::NewReplaySession* new_replay_session) {
  clear_op();
  if (new_replay_session) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(new_replay_session) == NULL) {
      GetArenaNoVirtual()->Own(new_replay_session);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(new_replay_session)) {
      ::tensorflow::NewReplaySession* new_new_replay_session = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::NewReplaySession >(
          GetArenaNoVirtual());
      new_new_replay_session->CopyFrom(*new_replay_session);
      new_replay_session = new_new_replay_session;
    }
    set_has_new_replay_session();
    op_.new_replay_session_ = new_replay_session;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.new_replay_session)
}
inline  ::tensorflow::NewReplaySession* ReplayOp::unsafe_arena_release_new_replay_session() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.new_replay_session)
  if (has_new_replay_session()) {
    clear_has_op();
    ::tensorflow::NewReplaySession* temp = op_.new_replay_session_;
    op_.new_replay_session_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void ReplayOp::unsafe_arena_set_allocated_new_replay_session(::tensorflow::NewReplaySession* new_replay_session) {
  clear_op();
  if (new_replay_session) {
    set_has_new_replay_session();
    op_.new_replay_session_ = new_replay_session;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.new_replay_session)
}

// optional .tensorflow.CreateSessionResponse create_session_response = 21;
inline bool ReplayOp::has_create_session_response() const {
  return response_case() == kCreateSessionResponse;
}
inline void ReplayOp::set_has_create_session_response() {
  _oneof_case_[1] = kCreateSessionResponse;
}
inline void ReplayOp::clear_create_session_response() {
  if (has_create_session_response()) {
    if (GetArenaNoVirtual() == NULL) {
      delete response_.create_session_response_;
    }
    clear_has_response();
  }
}
inline  const ::tensorflow::CreateSessionResponse& ReplayOp::create_session_response() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.create_session_response)
  return has_create_session_response()
      ? *response_.create_session_response_
      : ::tensorflow::CreateSessionResponse::default_instance();
}
inline ::tensorflow::CreateSessionResponse* ReplayOp::mutable_create_session_response() {
  if (!has_create_session_response()) {
    clear_response();
    set_has_create_session_response();
    response_.create_session_response_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::CreateSessionResponse >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.create_session_response)
  return response_.create_session_response_;
}
inline ::tensorflow::CreateSessionResponse* ReplayOp::release_create_session_response() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.create_session_response)
  if (has_create_session_response()) {
    clear_has_response();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::CreateSessionResponse* temp = new ::tensorflow::CreateSessionResponse;
      temp->MergeFrom(*response_.create_session_response_);
      response_.create_session_response_ = NULL;
      return temp;
    } else {
      ::tensorflow::CreateSessionResponse* temp = response_.create_session_response_;
      response_.create_session_response_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void ReplayOp::set_allocated_create_session_response(::tensorflow::CreateSessionResponse* create_session_response) {
  clear_response();
  if (create_session_response) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(create_session_response) == NULL) {
      GetArenaNoVirtual()->Own(create_session_response);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(create_session_response)) {
      ::tensorflow::CreateSessionResponse* new_create_session_response = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::CreateSessionResponse >(
          GetArenaNoVirtual());
      new_create_session_response->CopyFrom(*create_session_response);
      create_session_response = new_create_session_response;
    }
    set_has_create_session_response();
    response_.create_session_response_ = create_session_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.create_session_response)
}
inline  ::tensorflow::CreateSessionResponse* ReplayOp::unsafe_arena_release_create_session_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.create_session_response)
  if (has_create_session_response()) {
    clear_has_response();
    ::tensorflow::CreateSessionResponse* temp = response_.create_session_response_;
    response_.create_session_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void ReplayOp::unsafe_arena_set_allocated_create_session_response(::tensorflow::CreateSessionResponse* create_session_response) {
  clear_response();
  if (create_session_response) {
    set_has_create_session_response();
    response_.create_session_response_ = create_session_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.create_session_response)
}

// optional .tensorflow.ExtendSessionResponse extend_session_response = 22;
inline bool ReplayOp::has_extend_session_response() const {
  return response_case() == kExtendSessionResponse;
}
inline void ReplayOp::set_has_extend_session_response() {
  _oneof_case_[1] = kExtendSessionResponse;
}
inline void ReplayOp::clear_extend_session_response() {
  if (has_extend_session_response()) {
    if (GetArenaNoVirtual() == NULL) {
      delete response_.extend_session_response_;
    }
    clear_has_response();
  }
}
inline  const ::tensorflow::ExtendSessionResponse& ReplayOp::extend_session_response() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.extend_session_response)
  return has_extend_session_response()
      ? *response_.extend_session_response_
      : ::tensorflow::ExtendSessionResponse::default_instance();
}
inline ::tensorflow::ExtendSessionResponse* ReplayOp::mutable_extend_session_response() {
  if (!has_extend_session_response()) {
    clear_response();
    set_has_extend_session_response();
    response_.extend_session_response_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::ExtendSessionResponse >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.extend_session_response)
  return response_.extend_session_response_;
}
inline ::tensorflow::ExtendSessionResponse* ReplayOp::release_extend_session_response() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.extend_session_response)
  if (has_extend_session_response()) {
    clear_has_response();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::ExtendSessionResponse* temp = new ::tensorflow::ExtendSessionResponse;
      temp->MergeFrom(*response_.extend_session_response_);
      response_.extend_session_response_ = NULL;
      return temp;
    } else {
      ::tensorflow::ExtendSessionResponse* temp = response_.extend_session_response_;
      response_.extend_session_response_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void ReplayOp::set_allocated_extend_session_response(::tensorflow::ExtendSessionResponse* extend_session_response) {
  clear_response();
  if (extend_session_response) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(extend_session_response) == NULL) {
      GetArenaNoVirtual()->Own(extend_session_response);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(extend_session_response)) {
      ::tensorflow::ExtendSessionResponse* new_extend_session_response = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::ExtendSessionResponse >(
          GetArenaNoVirtual());
      new_extend_session_response->CopyFrom(*extend_session_response);
      extend_session_response = new_extend_session_response;
    }
    set_has_extend_session_response();
    response_.extend_session_response_ = extend_session_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.extend_session_response)
}
inline  ::tensorflow::ExtendSessionResponse* ReplayOp::unsafe_arena_release_extend_session_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.extend_session_response)
  if (has_extend_session_response()) {
    clear_has_response();
    ::tensorflow::ExtendSessionResponse* temp = response_.extend_session_response_;
    response_.extend_session_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void ReplayOp::unsafe_arena_set_allocated_extend_session_response(::tensorflow::ExtendSessionResponse* extend_session_response) {
  clear_response();
  if (extend_session_response) {
    set_has_extend_session_response();
    response_.extend_session_response_ = extend_session_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.extend_session_response)
}

// optional .tensorflow.PartialRunSetupResponse partial_run_setup_response = 23;
inline bool ReplayOp::has_partial_run_setup_response() const {
  return response_case() == kPartialRunSetupResponse;
}
inline void ReplayOp::set_has_partial_run_setup_response() {
  _oneof_case_[1] = kPartialRunSetupResponse;
}
inline void ReplayOp::clear_partial_run_setup_response() {
  if (has_partial_run_setup_response()) {
    if (GetArenaNoVirtual() == NULL) {
      delete response_.partial_run_setup_response_;
    }
    clear_has_response();
  }
}
inline  const ::tensorflow::PartialRunSetupResponse& ReplayOp::partial_run_setup_response() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.partial_run_setup_response)
  return has_partial_run_setup_response()
      ? *response_.partial_run_setup_response_
      : ::tensorflow::PartialRunSetupResponse::default_instance();
}
inline ::tensorflow::PartialRunSetupResponse* ReplayOp::mutable_partial_run_setup_response() {
  if (!has_partial_run_setup_response()) {
    clear_response();
    set_has_partial_run_setup_response();
    response_.partial_run_setup_response_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::PartialRunSetupResponse >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.partial_run_setup_response)
  return response_.partial_run_setup_response_;
}
inline ::tensorflow::PartialRunSetupResponse* ReplayOp::release_partial_run_setup_response() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.partial_run_setup_response)
  if (has_partial_run_setup_response()) {
    clear_has_response();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::PartialRunSetupResponse* temp = new ::tensorflow::PartialRunSetupResponse;
      temp->MergeFrom(*response_.partial_run_setup_response_);
      response_.partial_run_setup_response_ = NULL;
      return temp;
    } else {
      ::tensorflow::PartialRunSetupResponse* temp = response_.partial_run_setup_response_;
      response_.partial_run_setup_response_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void ReplayOp::set_allocated_partial_run_setup_response(::tensorflow::PartialRunSetupResponse* partial_run_setup_response) {
  clear_response();
  if (partial_run_setup_response) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(partial_run_setup_response) == NULL) {
      GetArenaNoVirtual()->Own(partial_run_setup_response);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(partial_run_setup_response)) {
      ::tensorflow::PartialRunSetupResponse* new_partial_run_setup_response = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::PartialRunSetupResponse >(
          GetArenaNoVirtual());
      new_partial_run_setup_response->CopyFrom(*partial_run_setup_response);
      partial_run_setup_response = new_partial_run_setup_response;
    }
    set_has_partial_run_setup_response();
    response_.partial_run_setup_response_ = partial_run_setup_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.partial_run_setup_response)
}
inline  ::tensorflow::PartialRunSetupResponse* ReplayOp::unsafe_arena_release_partial_run_setup_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.partial_run_setup_response)
  if (has_partial_run_setup_response()) {
    clear_has_response();
    ::tensorflow::PartialRunSetupResponse* temp = response_.partial_run_setup_response_;
    response_.partial_run_setup_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void ReplayOp::unsafe_arena_set_allocated_partial_run_setup_response(::tensorflow::PartialRunSetupResponse* partial_run_setup_response) {
  clear_response();
  if (partial_run_setup_response) {
    set_has_partial_run_setup_response();
    response_.partial_run_setup_response_ = partial_run_setup_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.partial_run_setup_response)
}

// optional .tensorflow.RunStepResponse run_step_response = 24;
inline bool ReplayOp::has_run_step_response() const {
  return response_case() == kRunStepResponse;
}
inline void ReplayOp::set_has_run_step_response() {
  _oneof_case_[1] = kRunStepResponse;
}
inline void ReplayOp::clear_run_step_response() {
  if (has_run_step_response()) {
    if (GetArenaNoVirtual() == NULL) {
      delete response_.run_step_response_;
    }
    clear_has_response();
  }
}
inline  const ::tensorflow::RunStepResponse& ReplayOp::run_step_response() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.run_step_response)
  return has_run_step_response()
      ? *response_.run_step_response_
      : ::tensorflow::RunStepResponse::default_instance();
}
inline ::tensorflow::RunStepResponse* ReplayOp::mutable_run_step_response() {
  if (!has_run_step_response()) {
    clear_response();
    set_has_run_step_response();
    response_.run_step_response_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::RunStepResponse >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.run_step_response)
  return response_.run_step_response_;
}
inline ::tensorflow::RunStepResponse* ReplayOp::release_run_step_response() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.run_step_response)
  if (has_run_step_response()) {
    clear_has_response();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::RunStepResponse* temp = new ::tensorflow::RunStepResponse;
      temp->MergeFrom(*response_.run_step_response_);
      response_.run_step_response_ = NULL;
      return temp;
    } else {
      ::tensorflow::RunStepResponse* temp = response_.run_step_response_;
      response_.run_step_response_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void ReplayOp::set_allocated_run_step_response(::tensorflow::RunStepResponse* run_step_response) {
  clear_response();
  if (run_step_response) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(run_step_response) == NULL) {
      GetArenaNoVirtual()->Own(run_step_response);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(run_step_response)) {
      ::tensorflow::RunStepResponse* new_run_step_response = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::RunStepResponse >(
          GetArenaNoVirtual());
      new_run_step_response->CopyFrom(*run_step_response);
      run_step_response = new_run_step_response;
    }
    set_has_run_step_response();
    response_.run_step_response_ = run_step_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.run_step_response)
}
inline  ::tensorflow::RunStepResponse* ReplayOp::unsafe_arena_release_run_step_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.run_step_response)
  if (has_run_step_response()) {
    clear_has_response();
    ::tensorflow::RunStepResponse* temp = response_.run_step_response_;
    response_.run_step_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void ReplayOp::unsafe_arena_set_allocated_run_step_response(::tensorflow::RunStepResponse* run_step_response) {
  clear_response();
  if (run_step_response) {
    set_has_run_step_response();
    response_.run_step_response_ = run_step_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.run_step_response)
}

// optional .tensorflow.CloseSessionResponse close_session_response = 25;
inline bool ReplayOp::has_close_session_response() const {
  return response_case() == kCloseSessionResponse;
}
inline void ReplayOp::set_has_close_session_response() {
  _oneof_case_[1] = kCloseSessionResponse;
}
inline void ReplayOp::clear_close_session_response() {
  if (has_close_session_response()) {
    if (GetArenaNoVirtual() == NULL) {
      delete response_.close_session_response_;
    }
    clear_has_response();
  }
}
inline  const ::tensorflow::CloseSessionResponse& ReplayOp::close_session_response() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.close_session_response)
  return has_close_session_response()
      ? *response_.close_session_response_
      : ::tensorflow::CloseSessionResponse::default_instance();
}
inline ::tensorflow::CloseSessionResponse* ReplayOp::mutable_close_session_response() {
  if (!has_close_session_response()) {
    clear_response();
    set_has_close_session_response();
    response_.close_session_response_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::CloseSessionResponse >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.close_session_response)
  return response_.close_session_response_;
}
inline ::tensorflow::CloseSessionResponse* ReplayOp::release_close_session_response() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.close_session_response)
  if (has_close_session_response()) {
    clear_has_response();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::CloseSessionResponse* temp = new ::tensorflow::CloseSessionResponse;
      temp->MergeFrom(*response_.close_session_response_);
      response_.close_session_response_ = NULL;
      return temp;
    } else {
      ::tensorflow::CloseSessionResponse* temp = response_.close_session_response_;
      response_.close_session_response_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void ReplayOp::set_allocated_close_session_response(::tensorflow::CloseSessionResponse* close_session_response) {
  clear_response();
  if (close_session_response) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(close_session_response) == NULL) {
      GetArenaNoVirtual()->Own(close_session_response);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(close_session_response)) {
      ::tensorflow::CloseSessionResponse* new_close_session_response = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::CloseSessionResponse >(
          GetArenaNoVirtual());
      new_close_session_response->CopyFrom(*close_session_response);
      close_session_response = new_close_session_response;
    }
    set_has_close_session_response();
    response_.close_session_response_ = close_session_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.close_session_response)
}
inline  ::tensorflow::CloseSessionResponse* ReplayOp::unsafe_arena_release_close_session_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.close_session_response)
  if (has_close_session_response()) {
    clear_has_response();
    ::tensorflow::CloseSessionResponse* temp = response_.close_session_response_;
    response_.close_session_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void ReplayOp::unsafe_arena_set_allocated_close_session_response(::tensorflow::CloseSessionResponse* close_session_response) {
  clear_response();
  if (close_session_response) {
    set_has_close_session_response();
    response_.close_session_response_ = close_session_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.close_session_response)
}

// optional .tensorflow.ListDevicesResponse list_devices_response = 26;
inline bool ReplayOp::has_list_devices_response() const {
  return response_case() == kListDevicesResponse;
}
inline void ReplayOp::set_has_list_devices_response() {
  _oneof_case_[1] = kListDevicesResponse;
}
inline void ReplayOp::clear_list_devices_response() {
  if (has_list_devices_response()) {
    if (GetArenaNoVirtual() == NULL) {
      delete response_.list_devices_response_;
    }
    clear_has_response();
  }
}
inline  const ::tensorflow::ListDevicesResponse& ReplayOp::list_devices_response() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.list_devices_response)
  return has_list_devices_response()
      ? *response_.list_devices_response_
      : ::tensorflow::ListDevicesResponse::default_instance();
}
inline ::tensorflow::ListDevicesResponse* ReplayOp::mutable_list_devices_response() {
  if (!has_list_devices_response()) {
    clear_response();
    set_has_list_devices_response();
    response_.list_devices_response_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::ListDevicesResponse >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.list_devices_response)
  return response_.list_devices_response_;
}
inline ::tensorflow::ListDevicesResponse* ReplayOp::release_list_devices_response() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.list_devices_response)
  if (has_list_devices_response()) {
    clear_has_response();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::ListDevicesResponse* temp = new ::tensorflow::ListDevicesResponse;
      temp->MergeFrom(*response_.list_devices_response_);
      response_.list_devices_response_ = NULL;
      return temp;
    } else {
      ::tensorflow::ListDevicesResponse* temp = response_.list_devices_response_;
      response_.list_devices_response_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void ReplayOp::set_allocated_list_devices_response(::tensorflow::ListDevicesResponse* list_devices_response) {
  clear_response();
  if (list_devices_response) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(list_devices_response) == NULL) {
      GetArenaNoVirtual()->Own(list_devices_response);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(list_devices_response)) {
      ::tensorflow::ListDevicesResponse* new_list_devices_response = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::ListDevicesResponse >(
          GetArenaNoVirtual());
      new_list_devices_response->CopyFrom(*list_devices_response);
      list_devices_response = new_list_devices_response;
    }
    set_has_list_devices_response();
    response_.list_devices_response_ = list_devices_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.list_devices_response)
}
inline  ::tensorflow::ListDevicesResponse* ReplayOp::unsafe_arena_release_list_devices_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.list_devices_response)
  if (has_list_devices_response()) {
    clear_has_response();
    ::tensorflow::ListDevicesResponse* temp = response_.list_devices_response_;
    response_.list_devices_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void ReplayOp::unsafe_arena_set_allocated_list_devices_response(::tensorflow::ListDevicesResponse* list_devices_response) {
  clear_response();
  if (list_devices_response) {
    set_has_list_devices_response();
    response_.list_devices_response_ = list_devices_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.list_devices_response)
}

// optional .tensorflow.ResetResponse reset_request_response = 27;
inline bool ReplayOp::has_reset_request_response() const {
  return response_case() == kResetRequestResponse;
}
inline void ReplayOp::set_has_reset_request_response() {
  _oneof_case_[1] = kResetRequestResponse;
}
inline void ReplayOp::clear_reset_request_response() {
  if (has_reset_request_response()) {
    if (GetArenaNoVirtual() == NULL) {
      delete response_.reset_request_response_;
    }
    clear_has_response();
  }
}
inline  const ::tensorflow::ResetResponse& ReplayOp::reset_request_response() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.reset_request_response)
  return has_reset_request_response()
      ? *response_.reset_request_response_
      : ::tensorflow::ResetResponse::default_instance();
}
inline ::tensorflow::ResetResponse* ReplayOp::mutable_reset_request_response() {
  if (!has_reset_request_response()) {
    clear_response();
    set_has_reset_request_response();
    response_.reset_request_response_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::ResetResponse >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.reset_request_response)
  return response_.reset_request_response_;
}
inline ::tensorflow::ResetResponse* ReplayOp::release_reset_request_response() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.reset_request_response)
  if (has_reset_request_response()) {
    clear_has_response();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::ResetResponse* temp = new ::tensorflow::ResetResponse;
      temp->MergeFrom(*response_.reset_request_response_);
      response_.reset_request_response_ = NULL;
      return temp;
    } else {
      ::tensorflow::ResetResponse* temp = response_.reset_request_response_;
      response_.reset_request_response_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void ReplayOp::set_allocated_reset_request_response(::tensorflow::ResetResponse* reset_request_response) {
  clear_response();
  if (reset_request_response) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(reset_request_response) == NULL) {
      GetArenaNoVirtual()->Own(reset_request_response);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(reset_request_response)) {
      ::tensorflow::ResetResponse* new_reset_request_response = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::ResetResponse >(
          GetArenaNoVirtual());
      new_reset_request_response->CopyFrom(*reset_request_response);
      reset_request_response = new_reset_request_response;
    }
    set_has_reset_request_response();
    response_.reset_request_response_ = reset_request_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.reset_request_response)
}
inline  ::tensorflow::ResetResponse* ReplayOp::unsafe_arena_release_reset_request_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.reset_request_response)
  if (has_reset_request_response()) {
    clear_has_response();
    ::tensorflow::ResetResponse* temp = response_.reset_request_response_;
    response_.reset_request_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void ReplayOp::unsafe_arena_set_allocated_reset_request_response(::tensorflow::ResetResponse* reset_request_response) {
  clear_response();
  if (reset_request_response) {
    set_has_reset_request_response();
    response_.reset_request_response_ = reset_request_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.reset_request_response)
}

// optional .tensorflow.MakeCallableResponse make_callable_response = 28;
inline bool ReplayOp::has_make_callable_response() const {
  return response_case() == kMakeCallableResponse;
}
inline void ReplayOp::set_has_make_callable_response() {
  _oneof_case_[1] = kMakeCallableResponse;
}
inline void ReplayOp::clear_make_callable_response() {
  if (has_make_callable_response()) {
    if (GetArenaNoVirtual() == NULL) {
      delete response_.make_callable_response_;
    }
    clear_has_response();
  }
}
inline  const ::tensorflow::MakeCallableResponse& ReplayOp::make_callable_response() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.make_callable_response)
  return has_make_callable_response()
      ? *response_.make_callable_response_
      : ::tensorflow::MakeCallableResponse::default_instance();
}
inline ::tensorflow::MakeCallableResponse* ReplayOp::mutable_make_callable_response() {
  if (!has_make_callable_response()) {
    clear_response();
    set_has_make_callable_response();
    response_.make_callable_response_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::MakeCallableResponse >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.make_callable_response)
  return response_.make_callable_response_;
}
inline ::tensorflow::MakeCallableResponse* ReplayOp::release_make_callable_response() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.make_callable_response)
  if (has_make_callable_response()) {
    clear_has_response();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::MakeCallableResponse* temp = new ::tensorflow::MakeCallableResponse;
      temp->MergeFrom(*response_.make_callable_response_);
      response_.make_callable_response_ = NULL;
      return temp;
    } else {
      ::tensorflow::MakeCallableResponse* temp = response_.make_callable_response_;
      response_.make_callable_response_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void ReplayOp::set_allocated_make_callable_response(::tensorflow::MakeCallableResponse* make_callable_response) {
  clear_response();
  if (make_callable_response) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(make_callable_response) == NULL) {
      GetArenaNoVirtual()->Own(make_callable_response);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(make_callable_response)) {
      ::tensorflow::MakeCallableResponse* new_make_callable_response = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::MakeCallableResponse >(
          GetArenaNoVirtual());
      new_make_callable_response->CopyFrom(*make_callable_response);
      make_callable_response = new_make_callable_response;
    }
    set_has_make_callable_response();
    response_.make_callable_response_ = make_callable_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.make_callable_response)
}
inline  ::tensorflow::MakeCallableResponse* ReplayOp::unsafe_arena_release_make_callable_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.make_callable_response)
  if (has_make_callable_response()) {
    clear_has_response();
    ::tensorflow::MakeCallableResponse* temp = response_.make_callable_response_;
    response_.make_callable_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void ReplayOp::unsafe_arena_set_allocated_make_callable_response(::tensorflow::MakeCallableResponse* make_callable_response) {
  clear_response();
  if (make_callable_response) {
    set_has_make_callable_response();
    response_.make_callable_response_ = make_callable_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.make_callable_response)
}

// optional .tensorflow.RunCallableResponse run_callable_response = 29;
inline bool ReplayOp::has_run_callable_response() const {
  return response_case() == kRunCallableResponse;
}
inline void ReplayOp::set_has_run_callable_response() {
  _oneof_case_[1] = kRunCallableResponse;
}
inline void ReplayOp::clear_run_callable_response() {
  if (has_run_callable_response()) {
    if (GetArenaNoVirtual() == NULL) {
      delete response_.run_callable_response_;
    }
    clear_has_response();
  }
}
inline  const ::tensorflow::RunCallableResponse& ReplayOp::run_callable_response() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.run_callable_response)
  return has_run_callable_response()
      ? *response_.run_callable_response_
      : ::tensorflow::RunCallableResponse::default_instance();
}
inline ::tensorflow::RunCallableResponse* ReplayOp::mutable_run_callable_response() {
  if (!has_run_callable_response()) {
    clear_response();
    set_has_run_callable_response();
    response_.run_callable_response_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::RunCallableResponse >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.run_callable_response)
  return response_.run_callable_response_;
}
inline ::tensorflow::RunCallableResponse* ReplayOp::release_run_callable_response() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.run_callable_response)
  if (has_run_callable_response()) {
    clear_has_response();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::RunCallableResponse* temp = new ::tensorflow::RunCallableResponse;
      temp->MergeFrom(*response_.run_callable_response_);
      response_.run_callable_response_ = NULL;
      return temp;
    } else {
      ::tensorflow::RunCallableResponse* temp = response_.run_callable_response_;
      response_.run_callable_response_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void ReplayOp::set_allocated_run_callable_response(::tensorflow::RunCallableResponse* run_callable_response) {
  clear_response();
  if (run_callable_response) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(run_callable_response) == NULL) {
      GetArenaNoVirtual()->Own(run_callable_response);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(run_callable_response)) {
      ::tensorflow::RunCallableResponse* new_run_callable_response = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::RunCallableResponse >(
          GetArenaNoVirtual());
      new_run_callable_response->CopyFrom(*run_callable_response);
      run_callable_response = new_run_callable_response;
    }
    set_has_run_callable_response();
    response_.run_callable_response_ = run_callable_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.run_callable_response)
}
inline  ::tensorflow::RunCallableResponse* ReplayOp::unsafe_arena_release_run_callable_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.run_callable_response)
  if (has_run_callable_response()) {
    clear_has_response();
    ::tensorflow::RunCallableResponse* temp = response_.run_callable_response_;
    response_.run_callable_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void ReplayOp::unsafe_arena_set_allocated_run_callable_response(::tensorflow::RunCallableResponse* run_callable_response) {
  clear_response();
  if (run_callable_response) {
    set_has_run_callable_response();
    response_.run_callable_response_ = run_callable_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.run_callable_response)
}

// optional .tensorflow.ReleaseCallableResponse release_callable_response = 30;
inline bool ReplayOp::has_release_callable_response() const {
  return response_case() == kReleaseCallableResponse;
}
inline void ReplayOp::set_has_release_callable_response() {
  _oneof_case_[1] = kReleaseCallableResponse;
}
inline void ReplayOp::clear_release_callable_response() {
  if (has_release_callable_response()) {
    if (GetArenaNoVirtual() == NULL) {
      delete response_.release_callable_response_;
    }
    clear_has_response();
  }
}
inline  const ::tensorflow::ReleaseCallableResponse& ReplayOp::release_callable_response() const {
  // @@protoc_insertion_point(field_get:tensorflow.ReplayOp.release_callable_response)
  return has_release_callable_response()
      ? *response_.release_callable_response_
      : ::tensorflow::ReleaseCallableResponse::default_instance();
}
inline ::tensorflow::ReleaseCallableResponse* ReplayOp::mutable_release_callable_response() {
  if (!has_release_callable_response()) {
    clear_response();
    set_has_release_callable_response();
    response_.release_callable_response_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::ReleaseCallableResponse >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ReplayOp.release_callable_response)
  return response_.release_callable_response_;
}
inline ::tensorflow::ReleaseCallableResponse* ReplayOp::release_release_callable_response() {
  // @@protoc_insertion_point(field_release:tensorflow.ReplayOp.release_callable_response)
  if (has_release_callable_response()) {
    clear_has_response();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::ReleaseCallableResponse* temp = new ::tensorflow::ReleaseCallableResponse;
      temp->MergeFrom(*response_.release_callable_response_);
      response_.release_callable_response_ = NULL;
      return temp;
    } else {
      ::tensorflow::ReleaseCallableResponse* temp = response_.release_callable_response_;
      response_.release_callable_response_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void ReplayOp::set_allocated_release_callable_response(::tensorflow::ReleaseCallableResponse* release_callable_response) {
  clear_response();
  if (release_callable_response) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(release_callable_response) == NULL) {
      GetArenaNoVirtual()->Own(release_callable_response);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(release_callable_response)) {
      ::tensorflow::ReleaseCallableResponse* new_release_callable_response = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::ReleaseCallableResponse >(
          GetArenaNoVirtual());
      new_release_callable_response->CopyFrom(*release_callable_response);
      release_callable_response = new_release_callable_response;
    }
    set_has_release_callable_response();
    response_.release_callable_response_ = release_callable_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.release_callable_response)
}
inline  ::tensorflow::ReleaseCallableResponse* ReplayOp::unsafe_arena_release_release_callable_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ReplayOp.release_callable_response)
  if (has_release_callable_response()) {
    clear_has_response();
    ::tensorflow::ReleaseCallableResponse* temp = response_.release_callable_response_;
    response_.release_callable_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void ReplayOp::unsafe_arena_set_allocated_release_callable_response(::tensorflow::ReleaseCallableResponse* release_callable_response) {
  clear_response();
  if (release_callable_response) {
    set_has_release_callable_response();
    response_.release_callable_response_ = release_callable_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ReplayOp.release_callable_response)
}

inline bool ReplayOp::has_op() const {
  return op_case() != OP_NOT_SET;
}
inline void ReplayOp::clear_has_op() {
  _oneof_case_[0] = OP_NOT_SET;
}
inline bool ReplayOp::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void ReplayOp::clear_has_response() {
  _oneof_case_[1] = RESPONSE_NOT_SET;
}
inline ReplayOp::OpCase ReplayOp::op_case() const {
  return ReplayOp::OpCase(_oneof_case_[0]);
}
inline ReplayOp::ResponseCase ReplayOp::response_case() const {
  return ReplayOp::ResponseCase(_oneof_case_[1]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto__INCLUDED
