// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/config.proto

#ifndef PROTOBUF_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto__INCLUDED
#define PROTOBUF_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow/core/framework/cost_graph.pb.h"
#include "tensorflow/core/framework/graph.pb.h"
#include "tensorflow/core/framework/step_stats.pb.h"
#include "tensorflow/core/protobuf/cluster.pb.h"
#include "tensorflow/core/protobuf/debug.pb.h"
#include "tensorflow/core/protobuf/rewriter_config.pb.h"
// @@protoc_insertion_point(includes)

namespace tensorflow {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();

class CallableOptions;
class ConfigProto;
class ConfigProto_Experimental;
class GPUOptions;
class GPUOptions_Experimental;
class GPUOptions_Experimental_VirtualDevices;
class GraphOptions;
class OptimizerOptions;
class RPCOptions;
class RunMetadata;
class RunMetadata_FunctionGraphs;
class RunOptions;
class RunOptions_Experimental;
class RunOptions_Experimental_RunHandlerPoolOptions;
class SessionMetadata;
class TensorConnection;
class ThreadPoolOptionProto;

enum OptimizerOptions_Level {
  OptimizerOptions_Level_L1 = 0,
  OptimizerOptions_Level_L0 = -1,
  OptimizerOptions_Level_OptimizerOptions_Level_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  OptimizerOptions_Level_OptimizerOptions_Level_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool OptimizerOptions_Level_IsValid(int value);
const OptimizerOptions_Level OptimizerOptions_Level_Level_MIN = OptimizerOptions_Level_L0;
const OptimizerOptions_Level OptimizerOptions_Level_Level_MAX = OptimizerOptions_Level_L1;
const int OptimizerOptions_Level_Level_ARRAYSIZE = OptimizerOptions_Level_Level_MAX + 1;

const ::google::protobuf::EnumDescriptor* OptimizerOptions_Level_descriptor();
inline const ::std::string& OptimizerOptions_Level_Name(OptimizerOptions_Level value) {
  return ::google::protobuf::internal::NameOfEnum(
    OptimizerOptions_Level_descriptor(), value);
}
inline bool OptimizerOptions_Level_Parse(
    const ::std::string& name, OptimizerOptions_Level* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OptimizerOptions_Level>(
    OptimizerOptions_Level_descriptor(), name, value);
}
enum OptimizerOptions_GlobalJitLevel {
  OptimizerOptions_GlobalJitLevel_DEFAULT = 0,
  OptimizerOptions_GlobalJitLevel_OFF = -1,
  OptimizerOptions_GlobalJitLevel_ON_1 = 1,
  OptimizerOptions_GlobalJitLevel_ON_2 = 2,
  OptimizerOptions_GlobalJitLevel_OptimizerOptions_GlobalJitLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  OptimizerOptions_GlobalJitLevel_OptimizerOptions_GlobalJitLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool OptimizerOptions_GlobalJitLevel_IsValid(int value);
const OptimizerOptions_GlobalJitLevel OptimizerOptions_GlobalJitLevel_GlobalJitLevel_MIN = OptimizerOptions_GlobalJitLevel_OFF;
const OptimizerOptions_GlobalJitLevel OptimizerOptions_GlobalJitLevel_GlobalJitLevel_MAX = OptimizerOptions_GlobalJitLevel_ON_2;
const int OptimizerOptions_GlobalJitLevel_GlobalJitLevel_ARRAYSIZE = OptimizerOptions_GlobalJitLevel_GlobalJitLevel_MAX + 1;

const ::google::protobuf::EnumDescriptor* OptimizerOptions_GlobalJitLevel_descriptor();
inline const ::std::string& OptimizerOptions_GlobalJitLevel_Name(OptimizerOptions_GlobalJitLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    OptimizerOptions_GlobalJitLevel_descriptor(), value);
}
inline bool OptimizerOptions_GlobalJitLevel_Parse(
    const ::std::string& name, OptimizerOptions_GlobalJitLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OptimizerOptions_GlobalJitLevel>(
    OptimizerOptions_GlobalJitLevel_descriptor(), name, value);
}
enum RunOptions_TraceLevel {
  RunOptions_TraceLevel_NO_TRACE = 0,
  RunOptions_TraceLevel_SOFTWARE_TRACE = 1,
  RunOptions_TraceLevel_HARDWARE_TRACE = 2,
  RunOptions_TraceLevel_FULL_TRACE = 3,
  RunOptions_TraceLevel_RunOptions_TraceLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RunOptions_TraceLevel_RunOptions_TraceLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RunOptions_TraceLevel_IsValid(int value);
const RunOptions_TraceLevel RunOptions_TraceLevel_TraceLevel_MIN = RunOptions_TraceLevel_NO_TRACE;
const RunOptions_TraceLevel RunOptions_TraceLevel_TraceLevel_MAX = RunOptions_TraceLevel_FULL_TRACE;
const int RunOptions_TraceLevel_TraceLevel_ARRAYSIZE = RunOptions_TraceLevel_TraceLevel_MAX + 1;

const ::google::protobuf::EnumDescriptor* RunOptions_TraceLevel_descriptor();
inline const ::std::string& RunOptions_TraceLevel_Name(RunOptions_TraceLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    RunOptions_TraceLevel_descriptor(), value);
}
inline bool RunOptions_TraceLevel_Parse(
    const ::std::string& name, RunOptions_TraceLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RunOptions_TraceLevel>(
    RunOptions_TraceLevel_descriptor(), name, value);
}
// ===================================================================

class GPUOptions_Experimental_VirtualDevices : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.GPUOptions.Experimental.VirtualDevices) */ {
 public:
  GPUOptions_Experimental_VirtualDevices();
  virtual ~GPUOptions_Experimental_VirtualDevices();

  GPUOptions_Experimental_VirtualDevices(const GPUOptions_Experimental_VirtualDevices& from);

  inline GPUOptions_Experimental_VirtualDevices& operator=(const GPUOptions_Experimental_VirtualDevices& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GPUOptions_Experimental_VirtualDevices& default_instance();

  void UnsafeArenaSwap(GPUOptions_Experimental_VirtualDevices* other);
  void Swap(GPUOptions_Experimental_VirtualDevices* other);

  // implements Message ----------------------------------------------

  inline GPUOptions_Experimental_VirtualDevices* New() const { return New(NULL); }

  GPUOptions_Experimental_VirtualDevices* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GPUOptions_Experimental_VirtualDevices& from);
  void MergeFrom(const GPUOptions_Experimental_VirtualDevices& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GPUOptions_Experimental_VirtualDevices* other);
  protected:
  explicit GPUOptions_Experimental_VirtualDevices(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float memory_limit_mb = 1;
  int memory_limit_mb_size() const;
  void clear_memory_limit_mb();
  static const int kMemoryLimitMbFieldNumber = 1;
  float memory_limit_mb(int index) const;
  void set_memory_limit_mb(int index, float value);
  void add_memory_limit_mb(float value);
  const ::google::protobuf::RepeatedField< float >&
      memory_limit_mb() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_memory_limit_mb();

  // repeated int32 priority = 2;
  int priority_size() const;
  void clear_priority();
  static const int kPriorityFieldNumber = 2;
  ::google::protobuf::int32 priority(int index) const;
  void set_priority(int index, ::google::protobuf::int32 value);
  void add_priority(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      priority() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_priority();

  // @@protoc_insertion_point(class_scope:tensorflow.GPUOptions.Experimental.VirtualDevices)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< float > memory_limit_mb_;
  mutable int _memory_limit_mb_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > priority_;
  mutable int _priority_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static GPUOptions_Experimental_VirtualDevices* default_instance_;
};
// -------------------------------------------------------------------

class GPUOptions_Experimental : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.GPUOptions.Experimental) */ {
 public:
  GPUOptions_Experimental();
  virtual ~GPUOptions_Experimental();

  GPUOptions_Experimental(const GPUOptions_Experimental& from);

  inline GPUOptions_Experimental& operator=(const GPUOptions_Experimental& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GPUOptions_Experimental& default_instance();

  void UnsafeArenaSwap(GPUOptions_Experimental* other);
  void Swap(GPUOptions_Experimental* other);

  // implements Message ----------------------------------------------

  inline GPUOptions_Experimental* New() const { return New(NULL); }

  GPUOptions_Experimental* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GPUOptions_Experimental& from);
  void MergeFrom(const GPUOptions_Experimental& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GPUOptions_Experimental* other);
  protected:
  explicit GPUOptions_Experimental(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef GPUOptions_Experimental_VirtualDevices VirtualDevices;

  // accessors -------------------------------------------------------

  // repeated .tensorflow.GPUOptions.Experimental.VirtualDevices virtual_devices = 1;
  int virtual_devices_size() const;
  void clear_virtual_devices();
  static const int kVirtualDevicesFieldNumber = 1;
  const ::tensorflow::GPUOptions_Experimental_VirtualDevices& virtual_devices(int index) const;
  ::tensorflow::GPUOptions_Experimental_VirtualDevices* mutable_virtual_devices(int index);
  ::tensorflow::GPUOptions_Experimental_VirtualDevices* add_virtual_devices();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::GPUOptions_Experimental_VirtualDevices >*
      mutable_virtual_devices();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::GPUOptions_Experimental_VirtualDevices >&
      virtual_devices() const;

  // optional bool use_unified_memory = 2;
  void clear_use_unified_memory();
  static const int kUseUnifiedMemoryFieldNumber = 2;
  bool use_unified_memory() const;
  void set_use_unified_memory(bool value);

  // optional int32 num_dev_to_dev_copy_streams = 3;
  void clear_num_dev_to_dev_copy_streams();
  static const int kNumDevToDevCopyStreamsFieldNumber = 3;
  ::google::protobuf::int32 num_dev_to_dev_copy_streams() const;
  void set_num_dev_to_dev_copy_streams(::google::protobuf::int32 value);

  // optional string collective_ring_order = 4;
  void clear_collective_ring_order();
  static const int kCollectiveRingOrderFieldNumber = 4;
  const ::std::string& collective_ring_order() const;
  void set_collective_ring_order(const ::std::string& value);
  void set_collective_ring_order(const char* value);
  void set_collective_ring_order(const char* value, size_t size);
  ::std::string* mutable_collective_ring_order();
  ::std::string* release_collective_ring_order();
  void set_allocated_collective_ring_order(::std::string* collective_ring_order);
  ::std::string* unsafe_arena_release_collective_ring_order();
  void unsafe_arena_set_allocated_collective_ring_order(
      ::std::string* collective_ring_order);

  // optional bool timestamped_allocator = 5;
  void clear_timestamped_allocator();
  static const int kTimestampedAllocatorFieldNumber = 5;
  bool timestamped_allocator() const;
  void set_timestamped_allocator(bool value);

  // optional int32 kernel_tracker_max_interval = 7;
  void clear_kernel_tracker_max_interval();
  static const int kKernelTrackerMaxIntervalFieldNumber = 7;
  ::google::protobuf::int32 kernel_tracker_max_interval() const;
  void set_kernel_tracker_max_interval(::google::protobuf::int32 value);

  // optional int32 kernel_tracker_max_bytes = 8;
  void clear_kernel_tracker_max_bytes();
  static const int kKernelTrackerMaxBytesFieldNumber = 8;
  ::google::protobuf::int32 kernel_tracker_max_bytes() const;
  void set_kernel_tracker_max_bytes(::google::protobuf::int32 value);

  // optional int32 kernel_tracker_max_pending = 9;
  void clear_kernel_tracker_max_pending();
  static const int kKernelTrackerMaxPendingFieldNumber = 9;
  ::google::protobuf::int32 kernel_tracker_max_pending() const;
  void set_kernel_tracker_max_pending(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tensorflow.GPUOptions.Experimental)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::GPUOptions_Experimental_VirtualDevices > virtual_devices_;
  ::google::protobuf::int32 num_dev_to_dev_copy_streams_;
  bool use_unified_memory_;
  bool timestamped_allocator_;
  ::google::protobuf::internal::ArenaStringPtr collective_ring_order_;
  ::google::protobuf::int32 kernel_tracker_max_interval_;
  ::google::protobuf::int32 kernel_tracker_max_bytes_;
  ::google::protobuf::int32 kernel_tracker_max_pending_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static GPUOptions_Experimental* default_instance_;
};
// -------------------------------------------------------------------

class GPUOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.GPUOptions) */ {
 public:
  GPUOptions();
  virtual ~GPUOptions();

  GPUOptions(const GPUOptions& from);

  inline GPUOptions& operator=(const GPUOptions& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GPUOptions& default_instance();

  void UnsafeArenaSwap(GPUOptions* other);
  void Swap(GPUOptions* other);

  // implements Message ----------------------------------------------

  inline GPUOptions* New() const { return New(NULL); }

  GPUOptions* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GPUOptions& from);
  void MergeFrom(const GPUOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GPUOptions* other);
  protected:
  explicit GPUOptions(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef GPUOptions_Experimental Experimental;

  // accessors -------------------------------------------------------

  // optional double per_process_gpu_memory_fraction = 1;
  void clear_per_process_gpu_memory_fraction();
  static const int kPerProcessGpuMemoryFractionFieldNumber = 1;
  double per_process_gpu_memory_fraction() const;
  void set_per_process_gpu_memory_fraction(double value);

  // optional bool allow_growth = 4;
  void clear_allow_growth();
  static const int kAllowGrowthFieldNumber = 4;
  bool allow_growth() const;
  void set_allow_growth(bool value);

  // optional string allocator_type = 2;
  void clear_allocator_type();
  static const int kAllocatorTypeFieldNumber = 2;
  const ::std::string& allocator_type() const;
  void set_allocator_type(const ::std::string& value);
  void set_allocator_type(const char* value);
  void set_allocator_type(const char* value, size_t size);
  ::std::string* mutable_allocator_type();
  ::std::string* release_allocator_type();
  void set_allocated_allocator_type(::std::string* allocator_type);
  ::std::string* unsafe_arena_release_allocator_type();
  void unsafe_arena_set_allocated_allocator_type(
      ::std::string* allocator_type);

  // optional int64 deferred_deletion_bytes = 3;
  void clear_deferred_deletion_bytes();
  static const int kDeferredDeletionBytesFieldNumber = 3;
  ::google::protobuf::int64 deferred_deletion_bytes() const;
  void set_deferred_deletion_bytes(::google::protobuf::int64 value);

  // optional string visible_device_list = 5;
  void clear_visible_device_list();
  static const int kVisibleDeviceListFieldNumber = 5;
  const ::std::string& visible_device_list() const;
  void set_visible_device_list(const ::std::string& value);
  void set_visible_device_list(const char* value);
  void set_visible_device_list(const char* value, size_t size);
  ::std::string* mutable_visible_device_list();
  ::std::string* release_visible_device_list();
  void set_allocated_visible_device_list(::std::string* visible_device_list);
  ::std::string* unsafe_arena_release_visible_device_list();
  void unsafe_arena_set_allocated_visible_device_list(
      ::std::string* visible_device_list);

  // optional int32 polling_active_delay_usecs = 6;
  void clear_polling_active_delay_usecs();
  static const int kPollingActiveDelayUsecsFieldNumber = 6;
  ::google::protobuf::int32 polling_active_delay_usecs() const;
  void set_polling_active_delay_usecs(::google::protobuf::int32 value);

  // optional int32 polling_inactive_delay_msecs = 7;
  void clear_polling_inactive_delay_msecs();
  static const int kPollingInactiveDelayMsecsFieldNumber = 7;
  ::google::protobuf::int32 polling_inactive_delay_msecs() const;
  void set_polling_inactive_delay_msecs(::google::protobuf::int32 value);

  // optional bool force_gpu_compatible = 8;
  void clear_force_gpu_compatible();
  static const int kForceGpuCompatibleFieldNumber = 8;
  bool force_gpu_compatible() const;
  void set_force_gpu_compatible(bool value);

  // optional .tensorflow.GPUOptions.Experimental experimental = 9;
  bool has_experimental() const;
  void clear_experimental();
  static const int kExperimentalFieldNumber = 9;
  private:
  void _slow_mutable_experimental();
  void _slow_set_allocated_experimental(
      ::google::protobuf::Arena* message_arena, ::tensorflow::GPUOptions_Experimental** experimental);
  ::tensorflow::GPUOptions_Experimental* _slow_release_experimental();
  public:
  const ::tensorflow::GPUOptions_Experimental& experimental() const;
  ::tensorflow::GPUOptions_Experimental* mutable_experimental();
  ::tensorflow::GPUOptions_Experimental* release_experimental();
  void set_allocated_experimental(::tensorflow::GPUOptions_Experimental* experimental);
  ::tensorflow::GPUOptions_Experimental* unsafe_arena_release_experimental();
  void unsafe_arena_set_allocated_experimental(
      ::tensorflow::GPUOptions_Experimental* experimental);

  // @@protoc_insertion_point(class_scope:tensorflow.GPUOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  double per_process_gpu_memory_fraction_;
  ::google::protobuf::internal::ArenaStringPtr allocator_type_;
  ::google::protobuf::int64 deferred_deletion_bytes_;
  ::google::protobuf::internal::ArenaStringPtr visible_device_list_;
  bool allow_growth_;
  bool force_gpu_compatible_;
  ::google::protobuf::int32 polling_active_delay_usecs_;
  ::tensorflow::GPUOptions_Experimental* experimental_;
  ::google::protobuf::int32 polling_inactive_delay_msecs_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static GPUOptions* default_instance_;
};
// -------------------------------------------------------------------

class OptimizerOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.OptimizerOptions) */ {
 public:
  OptimizerOptions();
  virtual ~OptimizerOptions();

  OptimizerOptions(const OptimizerOptions& from);

  inline OptimizerOptions& operator=(const OptimizerOptions& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const OptimizerOptions& default_instance();

  void UnsafeArenaSwap(OptimizerOptions* other);
  void Swap(OptimizerOptions* other);

  // implements Message ----------------------------------------------

  inline OptimizerOptions* New() const { return New(NULL); }

  OptimizerOptions* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OptimizerOptions& from);
  void MergeFrom(const OptimizerOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OptimizerOptions* other);
  protected:
  explicit OptimizerOptions(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef OptimizerOptions_Level Level;
  static const Level L1 =
    OptimizerOptions_Level_L1;
  static const Level L0 =
    OptimizerOptions_Level_L0;
  static inline bool Level_IsValid(int value) {
    return OptimizerOptions_Level_IsValid(value);
  }
  static const Level Level_MIN =
    OptimizerOptions_Level_Level_MIN;
  static const Level Level_MAX =
    OptimizerOptions_Level_Level_MAX;
  static const int Level_ARRAYSIZE =
    OptimizerOptions_Level_Level_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Level_descriptor() {
    return OptimizerOptions_Level_descriptor();
  }
  static inline const ::std::string& Level_Name(Level value) {
    return OptimizerOptions_Level_Name(value);
  }
  static inline bool Level_Parse(const ::std::string& name,
      Level* value) {
    return OptimizerOptions_Level_Parse(name, value);
  }

  typedef OptimizerOptions_GlobalJitLevel GlobalJitLevel;
  static const GlobalJitLevel DEFAULT =
    OptimizerOptions_GlobalJitLevel_DEFAULT;
  static const GlobalJitLevel OFF =
    OptimizerOptions_GlobalJitLevel_OFF;
  static const GlobalJitLevel ON_1 =
    OptimizerOptions_GlobalJitLevel_ON_1;
  static const GlobalJitLevel ON_2 =
    OptimizerOptions_GlobalJitLevel_ON_2;
  static inline bool GlobalJitLevel_IsValid(int value) {
    return OptimizerOptions_GlobalJitLevel_IsValid(value);
  }
  static const GlobalJitLevel GlobalJitLevel_MIN =
    OptimizerOptions_GlobalJitLevel_GlobalJitLevel_MIN;
  static const GlobalJitLevel GlobalJitLevel_MAX =
    OptimizerOptions_GlobalJitLevel_GlobalJitLevel_MAX;
  static const int GlobalJitLevel_ARRAYSIZE =
    OptimizerOptions_GlobalJitLevel_GlobalJitLevel_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GlobalJitLevel_descriptor() {
    return OptimizerOptions_GlobalJitLevel_descriptor();
  }
  static inline const ::std::string& GlobalJitLevel_Name(GlobalJitLevel value) {
    return OptimizerOptions_GlobalJitLevel_Name(value);
  }
  static inline bool GlobalJitLevel_Parse(const ::std::string& name,
      GlobalJitLevel* value) {
    return OptimizerOptions_GlobalJitLevel_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool do_common_subexpression_elimination = 1;
  void clear_do_common_subexpression_elimination();
  static const int kDoCommonSubexpressionEliminationFieldNumber = 1;
  bool do_common_subexpression_elimination() const;
  void set_do_common_subexpression_elimination(bool value);

  // optional bool do_constant_folding = 2;
  void clear_do_constant_folding();
  static const int kDoConstantFoldingFieldNumber = 2;
  bool do_constant_folding() const;
  void set_do_constant_folding(bool value);

  // optional int64 max_folded_constant_in_bytes = 6;
  void clear_max_folded_constant_in_bytes();
  static const int kMaxFoldedConstantInBytesFieldNumber = 6;
  ::google::protobuf::int64 max_folded_constant_in_bytes() const;
  void set_max_folded_constant_in_bytes(::google::protobuf::int64 value);

  // optional bool do_function_inlining = 4;
  void clear_do_function_inlining();
  static const int kDoFunctionInliningFieldNumber = 4;
  bool do_function_inlining() const;
  void set_do_function_inlining(bool value);

  // optional .tensorflow.OptimizerOptions.Level opt_level = 3;
  void clear_opt_level();
  static const int kOptLevelFieldNumber = 3;
  ::tensorflow::OptimizerOptions_Level opt_level() const;
  void set_opt_level(::tensorflow::OptimizerOptions_Level value);

  // optional .tensorflow.OptimizerOptions.GlobalJitLevel global_jit_level = 5;
  void clear_global_jit_level();
  static const int kGlobalJitLevelFieldNumber = 5;
  ::tensorflow::OptimizerOptions_GlobalJitLevel global_jit_level() const;
  void set_global_jit_level(::tensorflow::OptimizerOptions_GlobalJitLevel value);

  // @@protoc_insertion_point(class_scope:tensorflow.OptimizerOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::int64 max_folded_constant_in_bytes_;
  bool do_common_subexpression_elimination_;
  bool do_constant_folding_;
  bool do_function_inlining_;
  int opt_level_;
  int global_jit_level_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static OptimizerOptions* default_instance_;
};
// -------------------------------------------------------------------

class GraphOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.GraphOptions) */ {
 public:
  GraphOptions();
  virtual ~GraphOptions();

  GraphOptions(const GraphOptions& from);

  inline GraphOptions& operator=(const GraphOptions& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GraphOptions& default_instance();

  void UnsafeArenaSwap(GraphOptions* other);
  void Swap(GraphOptions* other);

  // implements Message ----------------------------------------------

  inline GraphOptions* New() const { return New(NULL); }

  GraphOptions* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GraphOptions& from);
  void MergeFrom(const GraphOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GraphOptions* other);
  protected:
  explicit GraphOptions(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool enable_recv_scheduling = 2;
  void clear_enable_recv_scheduling();
  static const int kEnableRecvSchedulingFieldNumber = 2;
  bool enable_recv_scheduling() const;
  void set_enable_recv_scheduling(bool value);

  // optional .tensorflow.OptimizerOptions optimizer_options = 3;
  bool has_optimizer_options() const;
  void clear_optimizer_options();
  static const int kOptimizerOptionsFieldNumber = 3;
  private:
  void _slow_mutable_optimizer_options();
  void _slow_set_allocated_optimizer_options(
      ::google::protobuf::Arena* message_arena, ::tensorflow::OptimizerOptions** optimizer_options);
  ::tensorflow::OptimizerOptions* _slow_release_optimizer_options();
  public:
  const ::tensorflow::OptimizerOptions& optimizer_options() const;
  ::tensorflow::OptimizerOptions* mutable_optimizer_options();
  ::tensorflow::OptimizerOptions* release_optimizer_options();
  void set_allocated_optimizer_options(::tensorflow::OptimizerOptions* optimizer_options);
  ::tensorflow::OptimizerOptions* unsafe_arena_release_optimizer_options();
  void unsafe_arena_set_allocated_optimizer_options(
      ::tensorflow::OptimizerOptions* optimizer_options);

  // optional int64 build_cost_model = 4;
  void clear_build_cost_model();
  static const int kBuildCostModelFieldNumber = 4;
  ::google::protobuf::int64 build_cost_model() const;
  void set_build_cost_model(::google::protobuf::int64 value);

  // optional int64 build_cost_model_after = 9;
  void clear_build_cost_model_after();
  static const int kBuildCostModelAfterFieldNumber = 9;
  ::google::protobuf::int64 build_cost_model_after() const;
  void set_build_cost_model_after(::google::protobuf::int64 value);

  // optional bool infer_shapes = 5;
  void clear_infer_shapes();
  static const int kInferShapesFieldNumber = 5;
  bool infer_shapes() const;
  void set_infer_shapes(bool value);

  // optional bool place_pruned_graph = 6;
  void clear_place_pruned_graph();
  static const int kPlacePrunedGraphFieldNumber = 6;
  bool place_pruned_graph() const;
  void set_place_pruned_graph(bool value);

  // optional bool enable_bfloat16_sendrecv = 7;
  void clear_enable_bfloat16_sendrecv();
  static const int kEnableBfloat16SendrecvFieldNumber = 7;
  bool enable_bfloat16_sendrecv() const;
  void set_enable_bfloat16_sendrecv(bool value);

  // optional int32 timeline_step = 8;
  void clear_timeline_step();
  static const int kTimelineStepFieldNumber = 8;
  ::google::protobuf::int32 timeline_step() const;
  void set_timeline_step(::google::protobuf::int32 value);

  // optional .tensorflow.RewriterConfig rewrite_options = 10;
  bool has_rewrite_options() const;
  void clear_rewrite_options();
  static const int kRewriteOptionsFieldNumber = 10;
  private:
  void _slow_mutable_rewrite_options();
  void _slow_set_allocated_rewrite_options(
      ::google::protobuf::Arena* message_arena, ::tensorflow::RewriterConfig** rewrite_options);
  ::tensorflow::RewriterConfig* _slow_release_rewrite_options();
  public:
  const ::tensorflow::RewriterConfig& rewrite_options() const;
  ::tensorflow::RewriterConfig* mutable_rewrite_options();
  ::tensorflow::RewriterConfig* release_rewrite_options();
  void set_allocated_rewrite_options(::tensorflow::RewriterConfig* rewrite_options);
  ::tensorflow::RewriterConfig* unsafe_arena_release_rewrite_options();
  void unsafe_arena_set_allocated_rewrite_options(
      ::tensorflow::RewriterConfig* rewrite_options);

  // @@protoc_insertion_point(class_scope:tensorflow.GraphOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::tensorflow::OptimizerOptions* optimizer_options_;
  ::google::protobuf::int64 build_cost_model_;
  ::google::protobuf::int64 build_cost_model_after_;
  bool enable_recv_scheduling_;
  bool infer_shapes_;
  bool place_pruned_graph_;
  bool enable_bfloat16_sendrecv_;
  ::google::protobuf::int32 timeline_step_;
  ::tensorflow::RewriterConfig* rewrite_options_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static GraphOptions* default_instance_;
};
// -------------------------------------------------------------------

class ThreadPoolOptionProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.ThreadPoolOptionProto) */ {
 public:
  ThreadPoolOptionProto();
  virtual ~ThreadPoolOptionProto();

  ThreadPoolOptionProto(const ThreadPoolOptionProto& from);

  inline ThreadPoolOptionProto& operator=(const ThreadPoolOptionProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ThreadPoolOptionProto& default_instance();

  void UnsafeArenaSwap(ThreadPoolOptionProto* other);
  void Swap(ThreadPoolOptionProto* other);

  // implements Message ----------------------------------------------

  inline ThreadPoolOptionProto* New() const { return New(NULL); }

  ThreadPoolOptionProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ThreadPoolOptionProto& from);
  void MergeFrom(const ThreadPoolOptionProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ThreadPoolOptionProto* other);
  protected:
  explicit ThreadPoolOptionProto(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 num_threads = 1;
  void clear_num_threads();
  static const int kNumThreadsFieldNumber = 1;
  ::google::protobuf::int32 num_threads() const;
  void set_num_threads(::google::protobuf::int32 value);

  // optional string global_name = 2;
  void clear_global_name();
  static const int kGlobalNameFieldNumber = 2;
  const ::std::string& global_name() const;
  void set_global_name(const ::std::string& value);
  void set_global_name(const char* value);
  void set_global_name(const char* value, size_t size);
  ::std::string* mutable_global_name();
  ::std::string* release_global_name();
  void set_allocated_global_name(::std::string* global_name);
  ::std::string* unsafe_arena_release_global_name();
  void unsafe_arena_set_allocated_global_name(
      ::std::string* global_name);

  // @@protoc_insertion_point(class_scope:tensorflow.ThreadPoolOptionProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr global_name_;
  ::google::protobuf::int32 num_threads_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static ThreadPoolOptionProto* default_instance_;
};
// -------------------------------------------------------------------

class RPCOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.RPCOptions) */ {
 public:
  RPCOptions();
  virtual ~RPCOptions();

  RPCOptions(const RPCOptions& from);

  inline RPCOptions& operator=(const RPCOptions& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPCOptions& default_instance();

  void UnsafeArenaSwap(RPCOptions* other);
  void Swap(RPCOptions* other);

  // implements Message ----------------------------------------------

  inline RPCOptions* New() const { return New(NULL); }

  RPCOptions* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RPCOptions& from);
  void MergeFrom(const RPCOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RPCOptions* other);
  protected:
  explicit RPCOptions(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool use_rpc_for_inprocess_master = 1;
  void clear_use_rpc_for_inprocess_master();
  static const int kUseRpcForInprocessMasterFieldNumber = 1;
  bool use_rpc_for_inprocess_master() const;
  void set_use_rpc_for_inprocess_master(bool value);

  // optional string compression_algorithm = 2;
  void clear_compression_algorithm();
  static const int kCompressionAlgorithmFieldNumber = 2;
  const ::std::string& compression_algorithm() const;
  void set_compression_algorithm(const ::std::string& value);
  void set_compression_algorithm(const char* value);
  void set_compression_algorithm(const char* value, size_t size);
  ::std::string* mutable_compression_algorithm();
  ::std::string* release_compression_algorithm();
  void set_allocated_compression_algorithm(::std::string* compression_algorithm);
  ::std::string* unsafe_arena_release_compression_algorithm();
  void unsafe_arena_set_allocated_compression_algorithm(
      ::std::string* compression_algorithm);

  // optional int32 compression_level = 3;
  void clear_compression_level();
  static const int kCompressionLevelFieldNumber = 3;
  ::google::protobuf::int32 compression_level() const;
  void set_compression_level(::google::protobuf::int32 value);

  // optional bool cache_rpc_response = 4;
  void clear_cache_rpc_response();
  static const int kCacheRpcResponseFieldNumber = 4;
  bool cache_rpc_response() const;
  void set_cache_rpc_response(bool value);

  // optional bool disable_session_connection_sharing = 5;
  void clear_disable_session_connection_sharing();
  static const int kDisableSessionConnectionSharingFieldNumber = 5;
  bool disable_session_connection_sharing() const;
  void set_disable_session_connection_sharing(bool value);

  // @@protoc_insertion_point(class_scope:tensorflow.RPCOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr compression_algorithm_;
  ::google::protobuf::int32 compression_level_;
  bool use_rpc_for_inprocess_master_;
  bool cache_rpc_response_;
  bool disable_session_connection_sharing_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static RPCOptions* default_instance_;
};
// -------------------------------------------------------------------

class SessionMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.SessionMetadata) */ {
 public:
  SessionMetadata();
  virtual ~SessionMetadata();

  SessionMetadata(const SessionMetadata& from);

  inline SessionMetadata& operator=(const SessionMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionMetadata& default_instance();

  void UnsafeArenaSwap(SessionMetadata* other);
  void Swap(SessionMetadata* other);

  // implements Message ----------------------------------------------

  inline SessionMetadata* New() const { return New(NULL); }

  SessionMetadata* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SessionMetadata& from);
  void MergeFrom(const SessionMetadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SessionMetadata* other);
  protected:
  explicit SessionMetadata(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  ::std::string* unsafe_arena_release_name();
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // optional int64 version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::int64 version() const;
  void set_version(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:tensorflow.SessionMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int64 version_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static SessionMetadata* default_instance_;
};
// -------------------------------------------------------------------

class ConfigProto_Experimental : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.ConfigProto.Experimental) */ {
 public:
  ConfigProto_Experimental();
  virtual ~ConfigProto_Experimental();

  ConfigProto_Experimental(const ConfigProto_Experimental& from);

  inline ConfigProto_Experimental& operator=(const ConfigProto_Experimental& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigProto_Experimental& default_instance();

  void UnsafeArenaSwap(ConfigProto_Experimental* other);
  void Swap(ConfigProto_Experimental* other);

  // implements Message ----------------------------------------------

  inline ConfigProto_Experimental* New() const { return New(NULL); }

  ConfigProto_Experimental* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConfigProto_Experimental& from);
  void MergeFrom(const ConfigProto_Experimental& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConfigProto_Experimental* other);
  protected:
  explicit ConfigProto_Experimental(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string collective_group_leader = 1;
  void clear_collective_group_leader();
  static const int kCollectiveGroupLeaderFieldNumber = 1;
  const ::std::string& collective_group_leader() const;
  void set_collective_group_leader(const ::std::string& value);
  void set_collective_group_leader(const char* value);
  void set_collective_group_leader(const char* value, size_t size);
  ::std::string* mutable_collective_group_leader();
  ::std::string* release_collective_group_leader();
  void set_allocated_collective_group_leader(::std::string* collective_group_leader);
  ::std::string* unsafe_arena_release_collective_group_leader();
  void unsafe_arena_set_allocated_collective_group_leader(
      ::std::string* collective_group_leader);

  // optional string executor_type = 3;
  void clear_executor_type();
  static const int kExecutorTypeFieldNumber = 3;
  const ::std::string& executor_type() const;
  void set_executor_type(const ::std::string& value);
  void set_executor_type(const char* value);
  void set_executor_type(const char* value, size_t size);
  ::std::string* mutable_executor_type();
  ::std::string* release_executor_type();
  void set_allocated_executor_type(::std::string* executor_type);
  ::std::string* unsafe_arena_release_executor_type();
  void unsafe_arena_set_allocated_executor_type(
      ::std::string* executor_type);

  // optional int32 recv_buf_max_chunk = 4;
  void clear_recv_buf_max_chunk();
  static const int kRecvBufMaxChunkFieldNumber = 4;
  ::google::protobuf::int32 recv_buf_max_chunk() const;
  void set_recv_buf_max_chunk(::google::protobuf::int32 value);

  // optional bool use_numa_affinity = 5;
  void clear_use_numa_affinity();
  static const int kUseNumaAffinityFieldNumber = 5;
  bool use_numa_affinity() const;
  void set_use_numa_affinity(bool value);

  // optional bool collective_deterministic_sequential_execution = 6;
  void clear_collective_deterministic_sequential_execution();
  static const int kCollectiveDeterministicSequentialExecutionFieldNumber = 6;
  bool collective_deterministic_sequential_execution() const;
  void set_collective_deterministic_sequential_execution(bool value);

  // optional bool collective_nccl = 7;
  void clear_collective_nccl();
  static const int kCollectiveNcclFieldNumber = 7;
  bool collective_nccl() const;
  void set_collective_nccl(bool value);

  // optional bool share_session_state_in_clusterspec_propagation = 8;
  void clear_share_session_state_in_clusterspec_propagation();
  static const int kShareSessionStateInClusterspecPropagationFieldNumber = 8;
  bool share_session_state_in_clusterspec_propagation() const;
  void set_share_session_state_in_clusterspec_propagation(bool value);

  // optional bool disable_thread_spinning = 9;
  void clear_disable_thread_spinning();
  static const int kDisableThreadSpinningFieldNumber = 9;
  bool disable_thread_spinning() const;
  void set_disable_thread_spinning(bool value);

  // optional bool share_cluster_devices_in_session = 10;
  void clear_share_cluster_devices_in_session();
  static const int kShareClusterDevicesInSessionFieldNumber = 10;
  bool share_cluster_devices_in_session() const;
  void set_share_cluster_devices_in_session(bool value);

  // optional .tensorflow.SessionMetadata session_metadata = 11;
  bool has_session_metadata() const;
  void clear_session_metadata();
  static const int kSessionMetadataFieldNumber = 11;
  private:
  void _slow_mutable_session_metadata();
  void _slow_set_allocated_session_metadata(
      ::google::protobuf::Arena* message_arena, ::tensorflow::SessionMetadata** session_metadata);
  ::tensorflow::SessionMetadata* _slow_release_session_metadata();
  public:
  const ::tensorflow::SessionMetadata& session_metadata() const;
  ::tensorflow::SessionMetadata* mutable_session_metadata();
  ::tensorflow::SessionMetadata* release_session_metadata();
  void set_allocated_session_metadata(::tensorflow::SessionMetadata* session_metadata);
  ::tensorflow::SessionMetadata* unsafe_arena_release_session_metadata();
  void unsafe_arena_set_allocated_session_metadata(
      ::tensorflow::SessionMetadata* session_metadata);

  // optional bool optimize_for_static_graph = 12;
  void clear_optimize_for_static_graph();
  static const int kOptimizeForStaticGraphFieldNumber = 12;
  bool optimize_for_static_graph() const;
  void set_optimize_for_static_graph(bool value);

  // optional bool enable_mlir_bridge = 13;
  void clear_enable_mlir_bridge();
  static const int kEnableMlirBridgeFieldNumber = 13;
  bool enable_mlir_bridge() const;
  void set_enable_mlir_bridge(bool value);

  // optional bool enable_mlir_graph_optimization = 16;
  void clear_enable_mlir_graph_optimization();
  static const int kEnableMlirGraphOptimizationFieldNumber = 16;
  bool enable_mlir_graph_optimization() const;
  void set_enable_mlir_graph_optimization(bool value);

  // optional bool disable_output_partition_graphs = 14;
  void clear_disable_output_partition_graphs();
  static const int kDisableOutputPartitionGraphsFieldNumber = 14;
  bool disable_output_partition_graphs() const;
  void set_disable_output_partition_graphs(bool value);

  // optional int64 xla_fusion_autotuner_thresh = 15;
  void clear_xla_fusion_autotuner_thresh();
  static const int kXlaFusionAutotunerThreshFieldNumber = 15;
  ::google::protobuf::int64 xla_fusion_autotuner_thresh() const;
  void set_xla_fusion_autotuner_thresh(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:tensorflow.ConfigProto.Experimental)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr collective_group_leader_;
  ::google::protobuf::internal::ArenaStringPtr executor_type_;
  ::google::protobuf::int32 recv_buf_max_chunk_;
  bool use_numa_affinity_;
  bool collective_deterministic_sequential_execution_;
  bool collective_nccl_;
  bool share_session_state_in_clusterspec_propagation_;
  ::tensorflow::SessionMetadata* session_metadata_;
  bool disable_thread_spinning_;
  bool share_cluster_devices_in_session_;
  bool optimize_for_static_graph_;
  bool enable_mlir_bridge_;
  bool enable_mlir_graph_optimization_;
  bool disable_output_partition_graphs_;
  ::google::protobuf::int64 xla_fusion_autotuner_thresh_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static ConfigProto_Experimental* default_instance_;
};
// -------------------------------------------------------------------

class ConfigProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.ConfigProto) */ {
 public:
  ConfigProto();
  virtual ~ConfigProto();

  ConfigProto(const ConfigProto& from);

  inline ConfigProto& operator=(const ConfigProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigProto& default_instance();

  void UnsafeArenaSwap(ConfigProto* other);
  void Swap(ConfigProto* other);

  // implements Message ----------------------------------------------

  inline ConfigProto* New() const { return New(NULL); }

  ConfigProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConfigProto& from);
  void MergeFrom(const ConfigProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConfigProto* other);
  protected:
  explicit ConfigProto(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ConfigProto_Experimental Experimental;

  // accessors -------------------------------------------------------

  // map<string, int32> device_count = 1;
  int device_count_size() const;
  void clear_device_count();
  static const int kDeviceCountFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >&
      device_count() const;
  ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >*
      mutable_device_count();

  // optional int32 intra_op_parallelism_threads = 2;
  void clear_intra_op_parallelism_threads();
  static const int kIntraOpParallelismThreadsFieldNumber = 2;
  ::google::protobuf::int32 intra_op_parallelism_threads() const;
  void set_intra_op_parallelism_threads(::google::protobuf::int32 value);

  // optional int32 inter_op_parallelism_threads = 5;
  void clear_inter_op_parallelism_threads();
  static const int kInterOpParallelismThreadsFieldNumber = 5;
  ::google::protobuf::int32 inter_op_parallelism_threads() const;
  void set_inter_op_parallelism_threads(::google::protobuf::int32 value);

  // optional bool use_per_session_threads = 9;
  void clear_use_per_session_threads();
  static const int kUsePerSessionThreadsFieldNumber = 9;
  bool use_per_session_threads() const;
  void set_use_per_session_threads(bool value);

  // repeated .tensorflow.ThreadPoolOptionProto session_inter_op_thread_pool = 12;
  int session_inter_op_thread_pool_size() const;
  void clear_session_inter_op_thread_pool();
  static const int kSessionInterOpThreadPoolFieldNumber = 12;
  const ::tensorflow::ThreadPoolOptionProto& session_inter_op_thread_pool(int index) const;
  ::tensorflow::ThreadPoolOptionProto* mutable_session_inter_op_thread_pool(int index);
  ::tensorflow::ThreadPoolOptionProto* add_session_inter_op_thread_pool();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::ThreadPoolOptionProto >*
      mutable_session_inter_op_thread_pool();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::ThreadPoolOptionProto >&
      session_inter_op_thread_pool() const;

  // optional int32 placement_period = 3;
  void clear_placement_period();
  static const int kPlacementPeriodFieldNumber = 3;
  ::google::protobuf::int32 placement_period() const;
  void set_placement_period(::google::protobuf::int32 value);

  // repeated string device_filters = 4;
  int device_filters_size() const;
  void clear_device_filters();
  static const int kDeviceFiltersFieldNumber = 4;
  const ::std::string& device_filters(int index) const;
  ::std::string* mutable_device_filters(int index);
  void set_device_filters(int index, const ::std::string& value);
  void set_device_filters(int index, const char* value);
  void set_device_filters(int index, const char* value, size_t size);
  ::std::string* add_device_filters();
  void add_device_filters(const ::std::string& value);
  void add_device_filters(const char* value);
  void add_device_filters(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& device_filters() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_device_filters();

  // optional .tensorflow.GPUOptions gpu_options = 6;
  bool has_gpu_options() const;
  void clear_gpu_options();
  static const int kGpuOptionsFieldNumber = 6;
  private:
  void _slow_mutable_gpu_options();
  void _slow_set_allocated_gpu_options(
      ::google::protobuf::Arena* message_arena, ::tensorflow::GPUOptions** gpu_options);
  ::tensorflow::GPUOptions* _slow_release_gpu_options();
  public:
  const ::tensorflow::GPUOptions& gpu_options() const;
  ::tensorflow::GPUOptions* mutable_gpu_options();
  ::tensorflow::GPUOptions* release_gpu_options();
  void set_allocated_gpu_options(::tensorflow::GPUOptions* gpu_options);
  ::tensorflow::GPUOptions* unsafe_arena_release_gpu_options();
  void unsafe_arena_set_allocated_gpu_options(
      ::tensorflow::GPUOptions* gpu_options);

  // optional bool allow_soft_placement = 7;
  void clear_allow_soft_placement();
  static const int kAllowSoftPlacementFieldNumber = 7;
  bool allow_soft_placement() const;
  void set_allow_soft_placement(bool value);

  // optional bool log_device_placement = 8;
  void clear_log_device_placement();
  static const int kLogDevicePlacementFieldNumber = 8;
  bool log_device_placement() const;
  void set_log_device_placement(bool value);

  // optional .tensorflow.GraphOptions graph_options = 10;
  bool has_graph_options() const;
  void clear_graph_options();
  static const int kGraphOptionsFieldNumber = 10;
  private:
  void _slow_mutable_graph_options();
  void _slow_set_allocated_graph_options(
      ::google::protobuf::Arena* message_arena, ::tensorflow::GraphOptions** graph_options);
  ::tensorflow::GraphOptions* _slow_release_graph_options();
  public:
  const ::tensorflow::GraphOptions& graph_options() const;
  ::tensorflow::GraphOptions* mutable_graph_options();
  ::tensorflow::GraphOptions* release_graph_options();
  void set_allocated_graph_options(::tensorflow::GraphOptions* graph_options);
  ::tensorflow::GraphOptions* unsafe_arena_release_graph_options();
  void unsafe_arena_set_allocated_graph_options(
      ::tensorflow::GraphOptions* graph_options);

  // optional int64 operation_timeout_in_ms = 11;
  void clear_operation_timeout_in_ms();
  static const int kOperationTimeoutInMsFieldNumber = 11;
  ::google::protobuf::int64 operation_timeout_in_ms() const;
  void set_operation_timeout_in_ms(::google::protobuf::int64 value);

  // optional .tensorflow.RPCOptions rpc_options = 13;
  bool has_rpc_options() const;
  void clear_rpc_options();
  static const int kRpcOptionsFieldNumber = 13;
  private:
  void _slow_mutable_rpc_options();
  void _slow_set_allocated_rpc_options(
      ::google::protobuf::Arena* message_arena, ::tensorflow::RPCOptions** rpc_options);
  ::tensorflow::RPCOptions* _slow_release_rpc_options();
  public:
  const ::tensorflow::RPCOptions& rpc_options() const;
  ::tensorflow::RPCOptions* mutable_rpc_options();
  ::tensorflow::RPCOptions* release_rpc_options();
  void set_allocated_rpc_options(::tensorflow::RPCOptions* rpc_options);
  ::tensorflow::RPCOptions* unsafe_arena_release_rpc_options();
  void unsafe_arena_set_allocated_rpc_options(
      ::tensorflow::RPCOptions* rpc_options);

  // optional .tensorflow.ClusterDef cluster_def = 14;
  bool has_cluster_def() const;
  void clear_cluster_def();
  static const int kClusterDefFieldNumber = 14;
  private:
  void _slow_mutable_cluster_def();
  void _slow_set_allocated_cluster_def(
      ::google::protobuf::Arena* message_arena, ::tensorflow::ClusterDef** cluster_def);
  ::tensorflow::ClusterDef* _slow_release_cluster_def();
  public:
  const ::tensorflow::ClusterDef& cluster_def() const;
  ::tensorflow::ClusterDef* mutable_cluster_def();
  ::tensorflow::ClusterDef* release_cluster_def();
  void set_allocated_cluster_def(::tensorflow::ClusterDef* cluster_def);
  ::tensorflow::ClusterDef* unsafe_arena_release_cluster_def();
  void unsafe_arena_set_allocated_cluster_def(
      ::tensorflow::ClusterDef* cluster_def);

  // optional bool isolate_session_state = 15;
  void clear_isolate_session_state();
  static const int kIsolateSessionStateFieldNumber = 15;
  bool isolate_session_state() const;
  void set_isolate_session_state(bool value);

  // optional bool share_cluster_devices_in_session = 17;
  void clear_share_cluster_devices_in_session();
  static const int kShareClusterDevicesInSessionFieldNumber = 17;
  bool share_cluster_devices_in_session() const;
  void set_share_cluster_devices_in_session(bool value);

  // optional .tensorflow.ConfigProto.Experimental experimental = 16;
  bool has_experimental() const;
  void clear_experimental();
  static const int kExperimentalFieldNumber = 16;
  private:
  void _slow_mutable_experimental();
  void _slow_set_allocated_experimental(
      ::google::protobuf::Arena* message_arena, ::tensorflow::ConfigProto_Experimental** experimental);
  ::tensorflow::ConfigProto_Experimental* _slow_release_experimental();
  public:
  const ::tensorflow::ConfigProto_Experimental& experimental() const;
  ::tensorflow::ConfigProto_Experimental* mutable_experimental();
  ::tensorflow::ConfigProto_Experimental* release_experimental();
  void set_allocated_experimental(::tensorflow::ConfigProto_Experimental* experimental);
  ::tensorflow::ConfigProto_Experimental* unsafe_arena_release_experimental();
  void unsafe_arena_set_allocated_experimental(
      ::tensorflow::ConfigProto_Experimental* experimental);

  // @@protoc_insertion_point(class_scope:tensorflow.ConfigProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::google::protobuf::int32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      0 >
      ConfigProto_DeviceCountEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::google::protobuf::int32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      0 > device_count_;
  ::google::protobuf::int32 intra_op_parallelism_threads_;
  ::google::protobuf::int32 inter_op_parallelism_threads_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::ThreadPoolOptionProto > session_inter_op_thread_pool_;
  ::google::protobuf::RepeatedPtrField< ::std::string> device_filters_;
  ::tensorflow::GPUOptions* gpu_options_;
  ::google::protobuf::int32 placement_period_;
  bool use_per_session_threads_;
  bool allow_soft_placement_;
  bool log_device_placement_;
  bool isolate_session_state_;
  ::tensorflow::GraphOptions* graph_options_;
  ::google::protobuf::int64 operation_timeout_in_ms_;
  ::tensorflow::RPCOptions* rpc_options_;
  ::tensorflow::ClusterDef* cluster_def_;
  ::tensorflow::ConfigProto_Experimental* experimental_;
  bool share_cluster_devices_in_session_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static ConfigProto* default_instance_;
};
// -------------------------------------------------------------------

class RunOptions_Experimental_RunHandlerPoolOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.RunOptions.Experimental.RunHandlerPoolOptions) */ {
 public:
  RunOptions_Experimental_RunHandlerPoolOptions();
  virtual ~RunOptions_Experimental_RunHandlerPoolOptions();

  RunOptions_Experimental_RunHandlerPoolOptions(const RunOptions_Experimental_RunHandlerPoolOptions& from);

  inline RunOptions_Experimental_RunHandlerPoolOptions& operator=(const RunOptions_Experimental_RunHandlerPoolOptions& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const RunOptions_Experimental_RunHandlerPoolOptions& default_instance();

  void UnsafeArenaSwap(RunOptions_Experimental_RunHandlerPoolOptions* other);
  void Swap(RunOptions_Experimental_RunHandlerPoolOptions* other);

  // implements Message ----------------------------------------------

  inline RunOptions_Experimental_RunHandlerPoolOptions* New() const { return New(NULL); }

  RunOptions_Experimental_RunHandlerPoolOptions* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RunOptions_Experimental_RunHandlerPoolOptions& from);
  void MergeFrom(const RunOptions_Experimental_RunHandlerPoolOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RunOptions_Experimental_RunHandlerPoolOptions* other);
  protected:
  explicit RunOptions_Experimental_RunHandlerPoolOptions(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 priority = 1;
  void clear_priority();
  static const int kPriorityFieldNumber = 1;
  ::google::protobuf::int64 priority() const;
  void set_priority(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:tensorflow.RunOptions.Experimental.RunHandlerPoolOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::int64 priority_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static RunOptions_Experimental_RunHandlerPoolOptions* default_instance_;
};
// -------------------------------------------------------------------

class RunOptions_Experimental : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.RunOptions.Experimental) */ {
 public:
  RunOptions_Experimental();
  virtual ~RunOptions_Experimental();

  RunOptions_Experimental(const RunOptions_Experimental& from);

  inline RunOptions_Experimental& operator=(const RunOptions_Experimental& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const RunOptions_Experimental& default_instance();

  void UnsafeArenaSwap(RunOptions_Experimental* other);
  void Swap(RunOptions_Experimental* other);

  // implements Message ----------------------------------------------

  inline RunOptions_Experimental* New() const { return New(NULL); }

  RunOptions_Experimental* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RunOptions_Experimental& from);
  void MergeFrom(const RunOptions_Experimental& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RunOptions_Experimental* other);
  protected:
  explicit RunOptions_Experimental(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RunOptions_Experimental_RunHandlerPoolOptions RunHandlerPoolOptions;

  // accessors -------------------------------------------------------

  // optional int64 collective_graph_key = 1;
  void clear_collective_graph_key();
  static const int kCollectiveGraphKeyFieldNumber = 1;
  ::google::protobuf::int64 collective_graph_key() const;
  void set_collective_graph_key(::google::protobuf::int64 value);

  // optional bool use_run_handler_pool = 2;
  void clear_use_run_handler_pool();
  static const int kUseRunHandlerPoolFieldNumber = 2;
  bool use_run_handler_pool() const;
  void set_use_run_handler_pool(bool value);

  // optional .tensorflow.RunOptions.Experimental.RunHandlerPoolOptions run_handler_pool_options = 3;
  bool has_run_handler_pool_options() const;
  void clear_run_handler_pool_options();
  static const int kRunHandlerPoolOptionsFieldNumber = 3;
  private:
  void _slow_mutable_run_handler_pool_options();
  void _slow_set_allocated_run_handler_pool_options(
      ::google::protobuf::Arena* message_arena, ::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions** run_handler_pool_options);
  ::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions* _slow_release_run_handler_pool_options();
  public:
  const ::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions& run_handler_pool_options() const;
  ::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions* mutable_run_handler_pool_options();
  ::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions* release_run_handler_pool_options();
  void set_allocated_run_handler_pool_options(::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions* run_handler_pool_options);
  ::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions* unsafe_arena_release_run_handler_pool_options();
  void unsafe_arena_set_allocated_run_handler_pool_options(
      ::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions* run_handler_pool_options);

  // @@protoc_insertion_point(class_scope:tensorflow.RunOptions.Experimental)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::int64 collective_graph_key_;
  ::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions* run_handler_pool_options_;
  bool use_run_handler_pool_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static RunOptions_Experimental* default_instance_;
};
// -------------------------------------------------------------------

class RunOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.RunOptions) */ {
 public:
  RunOptions();
  virtual ~RunOptions();

  RunOptions(const RunOptions& from);

  inline RunOptions& operator=(const RunOptions& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const RunOptions& default_instance();

  void UnsafeArenaSwap(RunOptions* other);
  void Swap(RunOptions* other);

  // implements Message ----------------------------------------------

  inline RunOptions* New() const { return New(NULL); }

  RunOptions* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RunOptions& from);
  void MergeFrom(const RunOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RunOptions* other);
  protected:
  explicit RunOptions(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RunOptions_Experimental Experimental;

  typedef RunOptions_TraceLevel TraceLevel;
  static const TraceLevel NO_TRACE =
    RunOptions_TraceLevel_NO_TRACE;
  static const TraceLevel SOFTWARE_TRACE =
    RunOptions_TraceLevel_SOFTWARE_TRACE;
  static const TraceLevel HARDWARE_TRACE =
    RunOptions_TraceLevel_HARDWARE_TRACE;
  static const TraceLevel FULL_TRACE =
    RunOptions_TraceLevel_FULL_TRACE;
  static inline bool TraceLevel_IsValid(int value) {
    return RunOptions_TraceLevel_IsValid(value);
  }
  static const TraceLevel TraceLevel_MIN =
    RunOptions_TraceLevel_TraceLevel_MIN;
  static const TraceLevel TraceLevel_MAX =
    RunOptions_TraceLevel_TraceLevel_MAX;
  static const int TraceLevel_ARRAYSIZE =
    RunOptions_TraceLevel_TraceLevel_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TraceLevel_descriptor() {
    return RunOptions_TraceLevel_descriptor();
  }
  static inline const ::std::string& TraceLevel_Name(TraceLevel value) {
    return RunOptions_TraceLevel_Name(value);
  }
  static inline bool TraceLevel_Parse(const ::std::string& name,
      TraceLevel* value) {
    return RunOptions_TraceLevel_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .tensorflow.RunOptions.TraceLevel trace_level = 1;
  void clear_trace_level();
  static const int kTraceLevelFieldNumber = 1;
  ::tensorflow::RunOptions_TraceLevel trace_level() const;
  void set_trace_level(::tensorflow::RunOptions_TraceLevel value);

  // optional int64 timeout_in_ms = 2;
  void clear_timeout_in_ms();
  static const int kTimeoutInMsFieldNumber = 2;
  ::google::protobuf::int64 timeout_in_ms() const;
  void set_timeout_in_ms(::google::protobuf::int64 value);

  // optional int32 inter_op_thread_pool = 3;
  void clear_inter_op_thread_pool();
  static const int kInterOpThreadPoolFieldNumber = 3;
  ::google::protobuf::int32 inter_op_thread_pool() const;
  void set_inter_op_thread_pool(::google::protobuf::int32 value);

  // optional bool output_partition_graphs = 5;
  void clear_output_partition_graphs();
  static const int kOutputPartitionGraphsFieldNumber = 5;
  bool output_partition_graphs() const;
  void set_output_partition_graphs(bool value);

  // optional .tensorflow.DebugOptions debug_options = 6;
  bool has_debug_options() const;
  void clear_debug_options();
  static const int kDebugOptionsFieldNumber = 6;
  private:
  void _slow_mutable_debug_options();
  void _slow_set_allocated_debug_options(
      ::google::protobuf::Arena* message_arena, ::tensorflow::DebugOptions** debug_options);
  ::tensorflow::DebugOptions* _slow_release_debug_options();
  public:
  const ::tensorflow::DebugOptions& debug_options() const;
  ::tensorflow::DebugOptions* mutable_debug_options();
  ::tensorflow::DebugOptions* release_debug_options();
  void set_allocated_debug_options(::tensorflow::DebugOptions* debug_options);
  ::tensorflow::DebugOptions* unsafe_arena_release_debug_options();
  void unsafe_arena_set_allocated_debug_options(
      ::tensorflow::DebugOptions* debug_options);

  // optional bool report_tensor_allocations_upon_oom = 7;
  void clear_report_tensor_allocations_upon_oom();
  static const int kReportTensorAllocationsUponOomFieldNumber = 7;
  bool report_tensor_allocations_upon_oom() const;
  void set_report_tensor_allocations_upon_oom(bool value);

  // optional .tensorflow.RunOptions.Experimental experimental = 8;
  bool has_experimental() const;
  void clear_experimental();
  static const int kExperimentalFieldNumber = 8;
  private:
  void _slow_mutable_experimental();
  void _slow_set_allocated_experimental(
      ::google::protobuf::Arena* message_arena, ::tensorflow::RunOptions_Experimental** experimental);
  ::tensorflow::RunOptions_Experimental* _slow_release_experimental();
  public:
  const ::tensorflow::RunOptions_Experimental& experimental() const;
  ::tensorflow::RunOptions_Experimental* mutable_experimental();
  ::tensorflow::RunOptions_Experimental* release_experimental();
  void set_allocated_experimental(::tensorflow::RunOptions_Experimental* experimental);
  ::tensorflow::RunOptions_Experimental* unsafe_arena_release_experimental();
  void unsafe_arena_set_allocated_experimental(
      ::tensorflow::RunOptions_Experimental* experimental);

  // @@protoc_insertion_point(class_scope:tensorflow.RunOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::int64 timeout_in_ms_;
  int trace_level_;
  ::google::protobuf::int32 inter_op_thread_pool_;
  ::tensorflow::DebugOptions* debug_options_;
  ::tensorflow::RunOptions_Experimental* experimental_;
  bool output_partition_graphs_;
  bool report_tensor_allocations_upon_oom_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static RunOptions* default_instance_;
};
// -------------------------------------------------------------------

class RunMetadata_FunctionGraphs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.RunMetadata.FunctionGraphs) */ {
 public:
  RunMetadata_FunctionGraphs();
  virtual ~RunMetadata_FunctionGraphs();

  RunMetadata_FunctionGraphs(const RunMetadata_FunctionGraphs& from);

  inline RunMetadata_FunctionGraphs& operator=(const RunMetadata_FunctionGraphs& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const RunMetadata_FunctionGraphs& default_instance();

  void UnsafeArenaSwap(RunMetadata_FunctionGraphs* other);
  void Swap(RunMetadata_FunctionGraphs* other);

  // implements Message ----------------------------------------------

  inline RunMetadata_FunctionGraphs* New() const { return New(NULL); }

  RunMetadata_FunctionGraphs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RunMetadata_FunctionGraphs& from);
  void MergeFrom(const RunMetadata_FunctionGraphs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RunMetadata_FunctionGraphs* other);
  protected:
  explicit RunMetadata_FunctionGraphs(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tensorflow.GraphDef partition_graphs = 1;
  int partition_graphs_size() const;
  void clear_partition_graphs();
  static const int kPartitionGraphsFieldNumber = 1;
  const ::tensorflow::GraphDef& partition_graphs(int index) const;
  ::tensorflow::GraphDef* mutable_partition_graphs(int index);
  ::tensorflow::GraphDef* add_partition_graphs();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphDef >*
      mutable_partition_graphs();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphDef >&
      partition_graphs() const;

  // optional .tensorflow.GraphDef pre_optimization_graph = 2;
  bool has_pre_optimization_graph() const;
  void clear_pre_optimization_graph();
  static const int kPreOptimizationGraphFieldNumber = 2;
  private:
  void _slow_mutable_pre_optimization_graph();
  void _slow_set_allocated_pre_optimization_graph(
      ::google::protobuf::Arena* message_arena, ::tensorflow::GraphDef** pre_optimization_graph);
  ::tensorflow::GraphDef* _slow_release_pre_optimization_graph();
  public:
  const ::tensorflow::GraphDef& pre_optimization_graph() const;
  ::tensorflow::GraphDef* mutable_pre_optimization_graph();
  ::tensorflow::GraphDef* release_pre_optimization_graph();
  void set_allocated_pre_optimization_graph(::tensorflow::GraphDef* pre_optimization_graph);
  ::tensorflow::GraphDef* unsafe_arena_release_pre_optimization_graph();
  void unsafe_arena_set_allocated_pre_optimization_graph(
      ::tensorflow::GraphDef* pre_optimization_graph);

  // optional .tensorflow.GraphDef post_optimization_graph = 3;
  bool has_post_optimization_graph() const;
  void clear_post_optimization_graph();
  static const int kPostOptimizationGraphFieldNumber = 3;
  private:
  void _slow_mutable_post_optimization_graph();
  void _slow_set_allocated_post_optimization_graph(
      ::google::protobuf::Arena* message_arena, ::tensorflow::GraphDef** post_optimization_graph);
  ::tensorflow::GraphDef* _slow_release_post_optimization_graph();
  public:
  const ::tensorflow::GraphDef& post_optimization_graph() const;
  ::tensorflow::GraphDef* mutable_post_optimization_graph();
  ::tensorflow::GraphDef* release_post_optimization_graph();
  void set_allocated_post_optimization_graph(::tensorflow::GraphDef* post_optimization_graph);
  ::tensorflow::GraphDef* unsafe_arena_release_post_optimization_graph();
  void unsafe_arena_set_allocated_post_optimization_graph(
      ::tensorflow::GraphDef* post_optimization_graph);

  // @@protoc_insertion_point(class_scope:tensorflow.RunMetadata.FunctionGraphs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphDef > partition_graphs_;
  ::tensorflow::GraphDef* pre_optimization_graph_;
  ::tensorflow::GraphDef* post_optimization_graph_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static RunMetadata_FunctionGraphs* default_instance_;
};
// -------------------------------------------------------------------

class RunMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.RunMetadata) */ {
 public:
  RunMetadata();
  virtual ~RunMetadata();

  RunMetadata(const RunMetadata& from);

  inline RunMetadata& operator=(const RunMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const RunMetadata& default_instance();

  void UnsafeArenaSwap(RunMetadata* other);
  void Swap(RunMetadata* other);

  // implements Message ----------------------------------------------

  inline RunMetadata* New() const { return New(NULL); }

  RunMetadata* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RunMetadata& from);
  void MergeFrom(const RunMetadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RunMetadata* other);
  protected:
  explicit RunMetadata(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RunMetadata_FunctionGraphs FunctionGraphs;

  // accessors -------------------------------------------------------

  // optional .tensorflow.StepStats step_stats = 1;
  bool has_step_stats() const;
  void clear_step_stats();
  static const int kStepStatsFieldNumber = 1;
  private:
  void _slow_mutable_step_stats();
  void _slow_set_allocated_step_stats(
      ::google::protobuf::Arena* message_arena, ::tensorflow::StepStats** step_stats);
  ::tensorflow::StepStats* _slow_release_step_stats();
  public:
  const ::tensorflow::StepStats& step_stats() const;
  ::tensorflow::StepStats* mutable_step_stats();
  ::tensorflow::StepStats* release_step_stats();
  void set_allocated_step_stats(::tensorflow::StepStats* step_stats);
  ::tensorflow::StepStats* unsafe_arena_release_step_stats();
  void unsafe_arena_set_allocated_step_stats(
      ::tensorflow::StepStats* step_stats);

  // optional .tensorflow.CostGraphDef cost_graph = 2;
  bool has_cost_graph() const;
  void clear_cost_graph();
  static const int kCostGraphFieldNumber = 2;
  private:
  void _slow_mutable_cost_graph();
  void _slow_set_allocated_cost_graph(
      ::google::protobuf::Arena* message_arena, ::tensorflow::CostGraphDef** cost_graph);
  ::tensorflow::CostGraphDef* _slow_release_cost_graph();
  public:
  const ::tensorflow::CostGraphDef& cost_graph() const;
  ::tensorflow::CostGraphDef* mutable_cost_graph();
  ::tensorflow::CostGraphDef* release_cost_graph();
  void set_allocated_cost_graph(::tensorflow::CostGraphDef* cost_graph);
  ::tensorflow::CostGraphDef* unsafe_arena_release_cost_graph();
  void unsafe_arena_set_allocated_cost_graph(
      ::tensorflow::CostGraphDef* cost_graph);

  // repeated .tensorflow.GraphDef partition_graphs = 3;
  int partition_graphs_size() const;
  void clear_partition_graphs();
  static const int kPartitionGraphsFieldNumber = 3;
  const ::tensorflow::GraphDef& partition_graphs(int index) const;
  ::tensorflow::GraphDef* mutable_partition_graphs(int index);
  ::tensorflow::GraphDef* add_partition_graphs();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphDef >*
      mutable_partition_graphs();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphDef >&
      partition_graphs() const;

  // repeated .tensorflow.RunMetadata.FunctionGraphs function_graphs = 4;
  int function_graphs_size() const;
  void clear_function_graphs();
  static const int kFunctionGraphsFieldNumber = 4;
  const ::tensorflow::RunMetadata_FunctionGraphs& function_graphs(int index) const;
  ::tensorflow::RunMetadata_FunctionGraphs* mutable_function_graphs(int index);
  ::tensorflow::RunMetadata_FunctionGraphs* add_function_graphs();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::RunMetadata_FunctionGraphs >*
      mutable_function_graphs();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::RunMetadata_FunctionGraphs >&
      function_graphs() const;

  // @@protoc_insertion_point(class_scope:tensorflow.RunMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::tensorflow::StepStats* step_stats_;
  ::tensorflow::CostGraphDef* cost_graph_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphDef > partition_graphs_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::RunMetadata_FunctionGraphs > function_graphs_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static RunMetadata* default_instance_;
};
// -------------------------------------------------------------------

class TensorConnection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.TensorConnection) */ {
 public:
  TensorConnection();
  virtual ~TensorConnection();

  TensorConnection(const TensorConnection& from);

  inline TensorConnection& operator=(const TensorConnection& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const TensorConnection& default_instance();

  void UnsafeArenaSwap(TensorConnection* other);
  void Swap(TensorConnection* other);

  // implements Message ----------------------------------------------

  inline TensorConnection* New() const { return New(NULL); }

  TensorConnection* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TensorConnection& from);
  void MergeFrom(const TensorConnection& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TensorConnection* other);
  protected:
  explicit TensorConnection(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string from_tensor = 1;
  void clear_from_tensor();
  static const int kFromTensorFieldNumber = 1;
  const ::std::string& from_tensor() const;
  void set_from_tensor(const ::std::string& value);
  void set_from_tensor(const char* value);
  void set_from_tensor(const char* value, size_t size);
  ::std::string* mutable_from_tensor();
  ::std::string* release_from_tensor();
  void set_allocated_from_tensor(::std::string* from_tensor);
  ::std::string* unsafe_arena_release_from_tensor();
  void unsafe_arena_set_allocated_from_tensor(
      ::std::string* from_tensor);

  // optional string to_tensor = 2;
  void clear_to_tensor();
  static const int kToTensorFieldNumber = 2;
  const ::std::string& to_tensor() const;
  void set_to_tensor(const ::std::string& value);
  void set_to_tensor(const char* value);
  void set_to_tensor(const char* value, size_t size);
  ::std::string* mutable_to_tensor();
  ::std::string* release_to_tensor();
  void set_allocated_to_tensor(::std::string* to_tensor);
  ::std::string* unsafe_arena_release_to_tensor();
  void unsafe_arena_set_allocated_to_tensor(
      ::std::string* to_tensor);

  // @@protoc_insertion_point(class_scope:tensorflow.TensorConnection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr from_tensor_;
  ::google::protobuf::internal::ArenaStringPtr to_tensor_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static TensorConnection* default_instance_;
};
// -------------------------------------------------------------------

class CallableOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.CallableOptions) */ {
 public:
  CallableOptions();
  virtual ~CallableOptions();

  CallableOptions(const CallableOptions& from);

  inline CallableOptions& operator=(const CallableOptions& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CallableOptions& default_instance();

  void UnsafeArenaSwap(CallableOptions* other);
  void Swap(CallableOptions* other);

  // implements Message ----------------------------------------------

  inline CallableOptions* New() const { return New(NULL); }

  CallableOptions* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CallableOptions& from);
  void MergeFrom(const CallableOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallableOptions* other);
  protected:
  explicit CallableOptions(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated string feed = 1;
  int feed_size() const;
  void clear_feed();
  static const int kFeedFieldNumber = 1;
  const ::std::string& feed(int index) const;
  ::std::string* mutable_feed(int index);
  void set_feed(int index, const ::std::string& value);
  void set_feed(int index, const char* value);
  void set_feed(int index, const char* value, size_t size);
  ::std::string* add_feed();
  void add_feed(const ::std::string& value);
  void add_feed(const char* value);
  void add_feed(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& feed() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_feed();

  // repeated string fetch = 2;
  int fetch_size() const;
  void clear_fetch();
  static const int kFetchFieldNumber = 2;
  const ::std::string& fetch(int index) const;
  ::std::string* mutable_fetch(int index);
  void set_fetch(int index, const ::std::string& value);
  void set_fetch(int index, const char* value);
  void set_fetch(int index, const char* value, size_t size);
  ::std::string* add_fetch();
  void add_fetch(const ::std::string& value);
  void add_fetch(const char* value);
  void add_fetch(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& fetch() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_fetch();

  // repeated string target = 3;
  int target_size() const;
  void clear_target();
  static const int kTargetFieldNumber = 3;
  const ::std::string& target(int index) const;
  ::std::string* mutable_target(int index);
  void set_target(int index, const ::std::string& value);
  void set_target(int index, const char* value);
  void set_target(int index, const char* value, size_t size);
  ::std::string* add_target();
  void add_target(const ::std::string& value);
  void add_target(const char* value);
  void add_target(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& target() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_target();

  // optional .tensorflow.RunOptions run_options = 4;
  bool has_run_options() const;
  void clear_run_options();
  static const int kRunOptionsFieldNumber = 4;
  private:
  void _slow_mutable_run_options();
  void _slow_set_allocated_run_options(
      ::google::protobuf::Arena* message_arena, ::tensorflow::RunOptions** run_options);
  ::tensorflow::RunOptions* _slow_release_run_options();
  public:
  const ::tensorflow::RunOptions& run_options() const;
  ::tensorflow::RunOptions* mutable_run_options();
  ::tensorflow::RunOptions* release_run_options();
  void set_allocated_run_options(::tensorflow::RunOptions* run_options);
  ::tensorflow::RunOptions* unsafe_arena_release_run_options();
  void unsafe_arena_set_allocated_run_options(
      ::tensorflow::RunOptions* run_options);

  // repeated .tensorflow.TensorConnection tensor_connection = 5;
  int tensor_connection_size() const;
  void clear_tensor_connection();
  static const int kTensorConnectionFieldNumber = 5;
  const ::tensorflow::TensorConnection& tensor_connection(int index) const;
  ::tensorflow::TensorConnection* mutable_tensor_connection(int index);
  ::tensorflow::TensorConnection* add_tensor_connection();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorConnection >*
      mutable_tensor_connection();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorConnection >&
      tensor_connection() const;

  // map<string, string> feed_devices = 6;
  int feed_devices_size() const;
  void clear_feed_devices();
  static const int kFeedDevicesFieldNumber = 6;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      feed_devices() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_feed_devices();

  // map<string, string> fetch_devices = 7;
  int fetch_devices_size() const;
  void clear_fetch_devices();
  static const int kFetchDevicesFieldNumber = 7;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      fetch_devices() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_fetch_devices();

  // optional bool fetch_skip_sync = 8;
  void clear_fetch_skip_sync();
  static const int kFetchSkipSyncFieldNumber = 8;
  bool fetch_skip_sync() const;
  void set_fetch_skip_sync(bool value);

  // @@protoc_insertion_point(class_scope:tensorflow.CallableOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> feed_;
  ::google::protobuf::RepeatedPtrField< ::std::string> fetch_;
  ::google::protobuf::RepeatedPtrField< ::std::string> target_;
  ::tensorflow::RunOptions* run_options_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorConnection > tensor_connection_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      CallableOptions_FeedDevicesEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > feed_devices_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      CallableOptions_FetchDevicesEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > fetch_devices_;
  bool fetch_skip_sync_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static CallableOptions* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// GPUOptions_Experimental_VirtualDevices

// repeated float memory_limit_mb = 1;
inline int GPUOptions_Experimental_VirtualDevices::memory_limit_mb_size() const {
  return memory_limit_mb_.size();
}
inline void GPUOptions_Experimental_VirtualDevices::clear_memory_limit_mb() {
  memory_limit_mb_.Clear();
}
inline float GPUOptions_Experimental_VirtualDevices::memory_limit_mb(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.VirtualDevices.memory_limit_mb)
  return memory_limit_mb_.Get(index);
}
inline void GPUOptions_Experimental_VirtualDevices::set_memory_limit_mb(int index, float value) {
  memory_limit_mb_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.Experimental.VirtualDevices.memory_limit_mb)
}
inline void GPUOptions_Experimental_VirtualDevices::add_memory_limit_mb(float value) {
  memory_limit_mb_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.GPUOptions.Experimental.VirtualDevices.memory_limit_mb)
}
inline const ::google::protobuf::RepeatedField< float >&
GPUOptions_Experimental_VirtualDevices::memory_limit_mb() const {
  // @@protoc_insertion_point(field_list:tensorflow.GPUOptions.Experimental.VirtualDevices.memory_limit_mb)
  return memory_limit_mb_;
}
inline ::google::protobuf::RepeatedField< float >*
GPUOptions_Experimental_VirtualDevices::mutable_memory_limit_mb() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GPUOptions.Experimental.VirtualDevices.memory_limit_mb)
  return &memory_limit_mb_;
}

// repeated int32 priority = 2;
inline int GPUOptions_Experimental_VirtualDevices::priority_size() const {
  return priority_.size();
}
inline void GPUOptions_Experimental_VirtualDevices::clear_priority() {
  priority_.Clear();
}
inline ::google::protobuf::int32 GPUOptions_Experimental_VirtualDevices::priority(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.VirtualDevices.priority)
  return priority_.Get(index);
}
inline void GPUOptions_Experimental_VirtualDevices::set_priority(int index, ::google::protobuf::int32 value) {
  priority_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.Experimental.VirtualDevices.priority)
}
inline void GPUOptions_Experimental_VirtualDevices::add_priority(::google::protobuf::int32 value) {
  priority_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.GPUOptions.Experimental.VirtualDevices.priority)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GPUOptions_Experimental_VirtualDevices::priority() const {
  // @@protoc_insertion_point(field_list:tensorflow.GPUOptions.Experimental.VirtualDevices.priority)
  return priority_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GPUOptions_Experimental_VirtualDevices::mutable_priority() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GPUOptions.Experimental.VirtualDevices.priority)
  return &priority_;
}

// -------------------------------------------------------------------

// GPUOptions_Experimental

// repeated .tensorflow.GPUOptions.Experimental.VirtualDevices virtual_devices = 1;
inline int GPUOptions_Experimental::virtual_devices_size() const {
  return virtual_devices_.size();
}
inline void GPUOptions_Experimental::clear_virtual_devices() {
  virtual_devices_.Clear();
}
inline const ::tensorflow::GPUOptions_Experimental_VirtualDevices& GPUOptions_Experimental::virtual_devices(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.virtual_devices)
  return virtual_devices_.Get(index);
}
inline ::tensorflow::GPUOptions_Experimental_VirtualDevices* GPUOptions_Experimental::mutable_virtual_devices(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.GPUOptions.Experimental.virtual_devices)
  return virtual_devices_.Mutable(index);
}
inline ::tensorflow::GPUOptions_Experimental_VirtualDevices* GPUOptions_Experimental::add_virtual_devices() {
  // @@protoc_insertion_point(field_add:tensorflow.GPUOptions.Experimental.virtual_devices)
  return virtual_devices_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::GPUOptions_Experimental_VirtualDevices >*
GPUOptions_Experimental::mutable_virtual_devices() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GPUOptions.Experimental.virtual_devices)
  return &virtual_devices_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::GPUOptions_Experimental_VirtualDevices >&
GPUOptions_Experimental::virtual_devices() const {
  // @@protoc_insertion_point(field_list:tensorflow.GPUOptions.Experimental.virtual_devices)
  return virtual_devices_;
}

// optional bool use_unified_memory = 2;
inline void GPUOptions_Experimental::clear_use_unified_memory() {
  use_unified_memory_ = false;
}
inline bool GPUOptions_Experimental::use_unified_memory() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.use_unified_memory)
  return use_unified_memory_;
}
inline void GPUOptions_Experimental::set_use_unified_memory(bool value) {
  
  use_unified_memory_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.Experimental.use_unified_memory)
}

// optional int32 num_dev_to_dev_copy_streams = 3;
inline void GPUOptions_Experimental::clear_num_dev_to_dev_copy_streams() {
  num_dev_to_dev_copy_streams_ = 0;
}
inline ::google::protobuf::int32 GPUOptions_Experimental::num_dev_to_dev_copy_streams() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.num_dev_to_dev_copy_streams)
  return num_dev_to_dev_copy_streams_;
}
inline void GPUOptions_Experimental::set_num_dev_to_dev_copy_streams(::google::protobuf::int32 value) {
  
  num_dev_to_dev_copy_streams_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.Experimental.num_dev_to_dev_copy_streams)
}

// optional string collective_ring_order = 4;
inline void GPUOptions_Experimental::clear_collective_ring_order() {
  collective_ring_order_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GPUOptions_Experimental::collective_ring_order() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.collective_ring_order)
  return collective_ring_order_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GPUOptions_Experimental::set_collective_ring_order(const ::std::string& value) {
  
  collective_ring_order_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.Experimental.collective_ring_order)
}
inline void GPUOptions_Experimental::set_collective_ring_order(const char* value) {
  
  collective_ring_order_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.GPUOptions.Experimental.collective_ring_order)
}
inline void GPUOptions_Experimental::set_collective_ring_order(const char* value,
    size_t size) {
  
  collective_ring_order_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.GPUOptions.Experimental.collective_ring_order)
}
inline ::std::string* GPUOptions_Experimental::mutable_collective_ring_order() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.GPUOptions.Experimental.collective_ring_order)
  return collective_ring_order_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GPUOptions_Experimental::release_collective_ring_order() {
  // @@protoc_insertion_point(field_release:tensorflow.GPUOptions.Experimental.collective_ring_order)
  
  return collective_ring_order_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GPUOptions_Experimental::unsafe_arena_release_collective_ring_order() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.GPUOptions.Experimental.collective_ring_order)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return collective_ring_order_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GPUOptions_Experimental::set_allocated_collective_ring_order(::std::string* collective_ring_order) {
  if (collective_ring_order != NULL) {
    
  } else {
    
  }
  collective_ring_order_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collective_ring_order,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GPUOptions.Experimental.collective_ring_order)
}
inline void GPUOptions_Experimental::unsafe_arena_set_allocated_collective_ring_order(
    ::std::string* collective_ring_order) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (collective_ring_order != NULL) {
    
  } else {
    
  }
  collective_ring_order_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      collective_ring_order, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GPUOptions.Experimental.collective_ring_order)
}

// optional bool timestamped_allocator = 5;
inline void GPUOptions_Experimental::clear_timestamped_allocator() {
  timestamped_allocator_ = false;
}
inline bool GPUOptions_Experimental::timestamped_allocator() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.timestamped_allocator)
  return timestamped_allocator_;
}
inline void GPUOptions_Experimental::set_timestamped_allocator(bool value) {
  
  timestamped_allocator_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.Experimental.timestamped_allocator)
}

// optional int32 kernel_tracker_max_interval = 7;
inline void GPUOptions_Experimental::clear_kernel_tracker_max_interval() {
  kernel_tracker_max_interval_ = 0;
}
inline ::google::protobuf::int32 GPUOptions_Experimental::kernel_tracker_max_interval() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.kernel_tracker_max_interval)
  return kernel_tracker_max_interval_;
}
inline void GPUOptions_Experimental::set_kernel_tracker_max_interval(::google::protobuf::int32 value) {
  
  kernel_tracker_max_interval_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.Experimental.kernel_tracker_max_interval)
}

// optional int32 kernel_tracker_max_bytes = 8;
inline void GPUOptions_Experimental::clear_kernel_tracker_max_bytes() {
  kernel_tracker_max_bytes_ = 0;
}
inline ::google::protobuf::int32 GPUOptions_Experimental::kernel_tracker_max_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.kernel_tracker_max_bytes)
  return kernel_tracker_max_bytes_;
}
inline void GPUOptions_Experimental::set_kernel_tracker_max_bytes(::google::protobuf::int32 value) {
  
  kernel_tracker_max_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.Experimental.kernel_tracker_max_bytes)
}

// optional int32 kernel_tracker_max_pending = 9;
inline void GPUOptions_Experimental::clear_kernel_tracker_max_pending() {
  kernel_tracker_max_pending_ = 0;
}
inline ::google::protobuf::int32 GPUOptions_Experimental::kernel_tracker_max_pending() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.Experimental.kernel_tracker_max_pending)
  return kernel_tracker_max_pending_;
}
inline void GPUOptions_Experimental::set_kernel_tracker_max_pending(::google::protobuf::int32 value) {
  
  kernel_tracker_max_pending_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.Experimental.kernel_tracker_max_pending)
}

// -------------------------------------------------------------------

// GPUOptions

// optional double per_process_gpu_memory_fraction = 1;
inline void GPUOptions::clear_per_process_gpu_memory_fraction() {
  per_process_gpu_memory_fraction_ = 0;
}
inline double GPUOptions::per_process_gpu_memory_fraction() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.per_process_gpu_memory_fraction)
  return per_process_gpu_memory_fraction_;
}
inline void GPUOptions::set_per_process_gpu_memory_fraction(double value) {
  
  per_process_gpu_memory_fraction_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.per_process_gpu_memory_fraction)
}

// optional bool allow_growth = 4;
inline void GPUOptions::clear_allow_growth() {
  allow_growth_ = false;
}
inline bool GPUOptions::allow_growth() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.allow_growth)
  return allow_growth_;
}
inline void GPUOptions::set_allow_growth(bool value) {
  
  allow_growth_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.allow_growth)
}

// optional string allocator_type = 2;
inline void GPUOptions::clear_allocator_type() {
  allocator_type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GPUOptions::allocator_type() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.allocator_type)
  return allocator_type_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GPUOptions::set_allocator_type(const ::std::string& value) {
  
  allocator_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.allocator_type)
}
inline void GPUOptions::set_allocator_type(const char* value) {
  
  allocator_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.GPUOptions.allocator_type)
}
inline void GPUOptions::set_allocator_type(const char* value,
    size_t size) {
  
  allocator_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.GPUOptions.allocator_type)
}
inline ::std::string* GPUOptions::mutable_allocator_type() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.GPUOptions.allocator_type)
  return allocator_type_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GPUOptions::release_allocator_type() {
  // @@protoc_insertion_point(field_release:tensorflow.GPUOptions.allocator_type)
  
  return allocator_type_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GPUOptions::unsafe_arena_release_allocator_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.GPUOptions.allocator_type)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return allocator_type_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GPUOptions::set_allocated_allocator_type(::std::string* allocator_type) {
  if (allocator_type != NULL) {
    
  } else {
    
  }
  allocator_type_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), allocator_type,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GPUOptions.allocator_type)
}
inline void GPUOptions::unsafe_arena_set_allocated_allocator_type(
    ::std::string* allocator_type) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (allocator_type != NULL) {
    
  } else {
    
  }
  allocator_type_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      allocator_type, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GPUOptions.allocator_type)
}

// optional int64 deferred_deletion_bytes = 3;
inline void GPUOptions::clear_deferred_deletion_bytes() {
  deferred_deletion_bytes_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GPUOptions::deferred_deletion_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.deferred_deletion_bytes)
  return deferred_deletion_bytes_;
}
inline void GPUOptions::set_deferred_deletion_bytes(::google::protobuf::int64 value) {
  
  deferred_deletion_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.deferred_deletion_bytes)
}

// optional string visible_device_list = 5;
inline void GPUOptions::clear_visible_device_list() {
  visible_device_list_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GPUOptions::visible_device_list() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.visible_device_list)
  return visible_device_list_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GPUOptions::set_visible_device_list(const ::std::string& value) {
  
  visible_device_list_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.visible_device_list)
}
inline void GPUOptions::set_visible_device_list(const char* value) {
  
  visible_device_list_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.GPUOptions.visible_device_list)
}
inline void GPUOptions::set_visible_device_list(const char* value,
    size_t size) {
  
  visible_device_list_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.GPUOptions.visible_device_list)
}
inline ::std::string* GPUOptions::mutable_visible_device_list() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.GPUOptions.visible_device_list)
  return visible_device_list_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GPUOptions::release_visible_device_list() {
  // @@protoc_insertion_point(field_release:tensorflow.GPUOptions.visible_device_list)
  
  return visible_device_list_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GPUOptions::unsafe_arena_release_visible_device_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.GPUOptions.visible_device_list)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return visible_device_list_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GPUOptions::set_allocated_visible_device_list(::std::string* visible_device_list) {
  if (visible_device_list != NULL) {
    
  } else {
    
  }
  visible_device_list_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), visible_device_list,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GPUOptions.visible_device_list)
}
inline void GPUOptions::unsafe_arena_set_allocated_visible_device_list(
    ::std::string* visible_device_list) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (visible_device_list != NULL) {
    
  } else {
    
  }
  visible_device_list_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      visible_device_list, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GPUOptions.visible_device_list)
}

// optional int32 polling_active_delay_usecs = 6;
inline void GPUOptions::clear_polling_active_delay_usecs() {
  polling_active_delay_usecs_ = 0;
}
inline ::google::protobuf::int32 GPUOptions::polling_active_delay_usecs() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.polling_active_delay_usecs)
  return polling_active_delay_usecs_;
}
inline void GPUOptions::set_polling_active_delay_usecs(::google::protobuf::int32 value) {
  
  polling_active_delay_usecs_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.polling_active_delay_usecs)
}

// optional int32 polling_inactive_delay_msecs = 7;
inline void GPUOptions::clear_polling_inactive_delay_msecs() {
  polling_inactive_delay_msecs_ = 0;
}
inline ::google::protobuf::int32 GPUOptions::polling_inactive_delay_msecs() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.polling_inactive_delay_msecs)
  return polling_inactive_delay_msecs_;
}
inline void GPUOptions::set_polling_inactive_delay_msecs(::google::protobuf::int32 value) {
  
  polling_inactive_delay_msecs_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.polling_inactive_delay_msecs)
}

// optional bool force_gpu_compatible = 8;
inline void GPUOptions::clear_force_gpu_compatible() {
  force_gpu_compatible_ = false;
}
inline bool GPUOptions::force_gpu_compatible() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.force_gpu_compatible)
  return force_gpu_compatible_;
}
inline void GPUOptions::set_force_gpu_compatible(bool value) {
  
  force_gpu_compatible_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GPUOptions.force_gpu_compatible)
}

// optional .tensorflow.GPUOptions.Experimental experimental = 9;
inline bool GPUOptions::has_experimental() const {
  return !_is_default_instance_ && experimental_ != NULL;
}
inline void GPUOptions::clear_experimental() {
  if (GetArenaNoVirtual() == NULL && experimental_ != NULL) delete experimental_;
  experimental_ = NULL;
}
inline const ::tensorflow::GPUOptions_Experimental& GPUOptions::experimental() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUOptions.experimental)
  return experimental_ != NULL ? *experimental_ : *default_instance_->experimental_;
}
inline ::tensorflow::GPUOptions_Experimental* GPUOptions::mutable_experimental() {
  
  if (experimental_ == NULL) {
    _slow_mutable_experimental();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.GPUOptions.experimental)
  return experimental_;
}
inline ::tensorflow::GPUOptions_Experimental* GPUOptions::release_experimental() {
  // @@protoc_insertion_point(field_release:tensorflow.GPUOptions.experimental)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_experimental();
  } else {
    ::tensorflow::GPUOptions_Experimental* temp = experimental_;
    experimental_ = NULL;
    return temp;
  }
}
inline  void GPUOptions::set_allocated_experimental(::tensorflow::GPUOptions_Experimental* experimental) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete experimental_;
  }
  if (experimental != NULL) {
    _slow_set_allocated_experimental(message_arena, &experimental);
  }
  experimental_ = experimental;
  if (experimental) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GPUOptions.experimental)
}

// -------------------------------------------------------------------

// OptimizerOptions

// optional bool do_common_subexpression_elimination = 1;
inline void OptimizerOptions::clear_do_common_subexpression_elimination() {
  do_common_subexpression_elimination_ = false;
}
inline bool OptimizerOptions::do_common_subexpression_elimination() const {
  // @@protoc_insertion_point(field_get:tensorflow.OptimizerOptions.do_common_subexpression_elimination)
  return do_common_subexpression_elimination_;
}
inline void OptimizerOptions::set_do_common_subexpression_elimination(bool value) {
  
  do_common_subexpression_elimination_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.OptimizerOptions.do_common_subexpression_elimination)
}

// optional bool do_constant_folding = 2;
inline void OptimizerOptions::clear_do_constant_folding() {
  do_constant_folding_ = false;
}
inline bool OptimizerOptions::do_constant_folding() const {
  // @@protoc_insertion_point(field_get:tensorflow.OptimizerOptions.do_constant_folding)
  return do_constant_folding_;
}
inline void OptimizerOptions::set_do_constant_folding(bool value) {
  
  do_constant_folding_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.OptimizerOptions.do_constant_folding)
}

// optional int64 max_folded_constant_in_bytes = 6;
inline void OptimizerOptions::clear_max_folded_constant_in_bytes() {
  max_folded_constant_in_bytes_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 OptimizerOptions::max_folded_constant_in_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.OptimizerOptions.max_folded_constant_in_bytes)
  return max_folded_constant_in_bytes_;
}
inline void OptimizerOptions::set_max_folded_constant_in_bytes(::google::protobuf::int64 value) {
  
  max_folded_constant_in_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.OptimizerOptions.max_folded_constant_in_bytes)
}

// optional bool do_function_inlining = 4;
inline void OptimizerOptions::clear_do_function_inlining() {
  do_function_inlining_ = false;
}
inline bool OptimizerOptions::do_function_inlining() const {
  // @@protoc_insertion_point(field_get:tensorflow.OptimizerOptions.do_function_inlining)
  return do_function_inlining_;
}
inline void OptimizerOptions::set_do_function_inlining(bool value) {
  
  do_function_inlining_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.OptimizerOptions.do_function_inlining)
}

// optional .tensorflow.OptimizerOptions.Level opt_level = 3;
inline void OptimizerOptions::clear_opt_level() {
  opt_level_ = 0;
}
inline ::tensorflow::OptimizerOptions_Level OptimizerOptions::opt_level() const {
  // @@protoc_insertion_point(field_get:tensorflow.OptimizerOptions.opt_level)
  return static_cast< ::tensorflow::OptimizerOptions_Level >(opt_level_);
}
inline void OptimizerOptions::set_opt_level(::tensorflow::OptimizerOptions_Level value) {
  
  opt_level_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.OptimizerOptions.opt_level)
}

// optional .tensorflow.OptimizerOptions.GlobalJitLevel global_jit_level = 5;
inline void OptimizerOptions::clear_global_jit_level() {
  global_jit_level_ = 0;
}
inline ::tensorflow::OptimizerOptions_GlobalJitLevel OptimizerOptions::global_jit_level() const {
  // @@protoc_insertion_point(field_get:tensorflow.OptimizerOptions.global_jit_level)
  return static_cast< ::tensorflow::OptimizerOptions_GlobalJitLevel >(global_jit_level_);
}
inline void OptimizerOptions::set_global_jit_level(::tensorflow::OptimizerOptions_GlobalJitLevel value) {
  
  global_jit_level_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.OptimizerOptions.global_jit_level)
}

// -------------------------------------------------------------------

// GraphOptions

// optional bool enable_recv_scheduling = 2;
inline void GraphOptions::clear_enable_recv_scheduling() {
  enable_recv_scheduling_ = false;
}
inline bool GraphOptions::enable_recv_scheduling() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphOptions.enable_recv_scheduling)
  return enable_recv_scheduling_;
}
inline void GraphOptions::set_enable_recv_scheduling(bool value) {
  
  enable_recv_scheduling_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphOptions.enable_recv_scheduling)
}

// optional .tensorflow.OptimizerOptions optimizer_options = 3;
inline bool GraphOptions::has_optimizer_options() const {
  return !_is_default_instance_ && optimizer_options_ != NULL;
}
inline void GraphOptions::clear_optimizer_options() {
  if (GetArenaNoVirtual() == NULL && optimizer_options_ != NULL) delete optimizer_options_;
  optimizer_options_ = NULL;
}
inline const ::tensorflow::OptimizerOptions& GraphOptions::optimizer_options() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphOptions.optimizer_options)
  return optimizer_options_ != NULL ? *optimizer_options_ : *default_instance_->optimizer_options_;
}
inline ::tensorflow::OptimizerOptions* GraphOptions::mutable_optimizer_options() {
  
  if (optimizer_options_ == NULL) {
    _slow_mutable_optimizer_options();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphOptions.optimizer_options)
  return optimizer_options_;
}
inline ::tensorflow::OptimizerOptions* GraphOptions::release_optimizer_options() {
  // @@protoc_insertion_point(field_release:tensorflow.GraphOptions.optimizer_options)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_optimizer_options();
  } else {
    ::tensorflow::OptimizerOptions* temp = optimizer_options_;
    optimizer_options_ = NULL;
    return temp;
  }
}
inline  void GraphOptions::set_allocated_optimizer_options(::tensorflow::OptimizerOptions* optimizer_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete optimizer_options_;
  }
  if (optimizer_options != NULL) {
    _slow_set_allocated_optimizer_options(message_arena, &optimizer_options);
  }
  optimizer_options_ = optimizer_options;
  if (optimizer_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GraphOptions.optimizer_options)
}

// optional int64 build_cost_model = 4;
inline void GraphOptions::clear_build_cost_model() {
  build_cost_model_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GraphOptions::build_cost_model() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphOptions.build_cost_model)
  return build_cost_model_;
}
inline void GraphOptions::set_build_cost_model(::google::protobuf::int64 value) {
  
  build_cost_model_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphOptions.build_cost_model)
}

// optional int64 build_cost_model_after = 9;
inline void GraphOptions::clear_build_cost_model_after() {
  build_cost_model_after_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GraphOptions::build_cost_model_after() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphOptions.build_cost_model_after)
  return build_cost_model_after_;
}
inline void GraphOptions::set_build_cost_model_after(::google::protobuf::int64 value) {
  
  build_cost_model_after_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphOptions.build_cost_model_after)
}

// optional bool infer_shapes = 5;
inline void GraphOptions::clear_infer_shapes() {
  infer_shapes_ = false;
}
inline bool GraphOptions::infer_shapes() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphOptions.infer_shapes)
  return infer_shapes_;
}
inline void GraphOptions::set_infer_shapes(bool value) {
  
  infer_shapes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphOptions.infer_shapes)
}

// optional bool place_pruned_graph = 6;
inline void GraphOptions::clear_place_pruned_graph() {
  place_pruned_graph_ = false;
}
inline bool GraphOptions::place_pruned_graph() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphOptions.place_pruned_graph)
  return place_pruned_graph_;
}
inline void GraphOptions::set_place_pruned_graph(bool value) {
  
  place_pruned_graph_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphOptions.place_pruned_graph)
}

// optional bool enable_bfloat16_sendrecv = 7;
inline void GraphOptions::clear_enable_bfloat16_sendrecv() {
  enable_bfloat16_sendrecv_ = false;
}
inline bool GraphOptions::enable_bfloat16_sendrecv() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphOptions.enable_bfloat16_sendrecv)
  return enable_bfloat16_sendrecv_;
}
inline void GraphOptions::set_enable_bfloat16_sendrecv(bool value) {
  
  enable_bfloat16_sendrecv_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphOptions.enable_bfloat16_sendrecv)
}

// optional int32 timeline_step = 8;
inline void GraphOptions::clear_timeline_step() {
  timeline_step_ = 0;
}
inline ::google::protobuf::int32 GraphOptions::timeline_step() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphOptions.timeline_step)
  return timeline_step_;
}
inline void GraphOptions::set_timeline_step(::google::protobuf::int32 value) {
  
  timeline_step_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphOptions.timeline_step)
}

// optional .tensorflow.RewriterConfig rewrite_options = 10;
inline bool GraphOptions::has_rewrite_options() const {
  return !_is_default_instance_ && rewrite_options_ != NULL;
}
inline void GraphOptions::clear_rewrite_options() {
  if (GetArenaNoVirtual() == NULL && rewrite_options_ != NULL) delete rewrite_options_;
  rewrite_options_ = NULL;
}
inline const ::tensorflow::RewriterConfig& GraphOptions::rewrite_options() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphOptions.rewrite_options)
  return rewrite_options_ != NULL ? *rewrite_options_ : *default_instance_->rewrite_options_;
}
inline ::tensorflow::RewriterConfig* GraphOptions::mutable_rewrite_options() {
  
  if (rewrite_options_ == NULL) {
    _slow_mutable_rewrite_options();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphOptions.rewrite_options)
  return rewrite_options_;
}
inline ::tensorflow::RewriterConfig* GraphOptions::release_rewrite_options() {
  // @@protoc_insertion_point(field_release:tensorflow.GraphOptions.rewrite_options)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_rewrite_options();
  } else {
    ::tensorflow::RewriterConfig* temp = rewrite_options_;
    rewrite_options_ = NULL;
    return temp;
  }
}
inline  void GraphOptions::set_allocated_rewrite_options(::tensorflow::RewriterConfig* rewrite_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rewrite_options_;
  }
  if (rewrite_options != NULL) {
    _slow_set_allocated_rewrite_options(message_arena, &rewrite_options);
  }
  rewrite_options_ = rewrite_options;
  if (rewrite_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GraphOptions.rewrite_options)
}

// -------------------------------------------------------------------

// ThreadPoolOptionProto

// optional int32 num_threads = 1;
inline void ThreadPoolOptionProto::clear_num_threads() {
  num_threads_ = 0;
}
inline ::google::protobuf::int32 ThreadPoolOptionProto::num_threads() const {
  // @@protoc_insertion_point(field_get:tensorflow.ThreadPoolOptionProto.num_threads)
  return num_threads_;
}
inline void ThreadPoolOptionProto::set_num_threads(::google::protobuf::int32 value) {
  
  num_threads_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ThreadPoolOptionProto.num_threads)
}

// optional string global_name = 2;
inline void ThreadPoolOptionProto::clear_global_name() {
  global_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ThreadPoolOptionProto::global_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.ThreadPoolOptionProto.global_name)
  return global_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ThreadPoolOptionProto::set_global_name(const ::std::string& value) {
  
  global_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.ThreadPoolOptionProto.global_name)
}
inline void ThreadPoolOptionProto::set_global_name(const char* value) {
  
  global_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.ThreadPoolOptionProto.global_name)
}
inline void ThreadPoolOptionProto::set_global_name(const char* value,
    size_t size) {
  
  global_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.ThreadPoolOptionProto.global_name)
}
inline ::std::string* ThreadPoolOptionProto::mutable_global_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.ThreadPoolOptionProto.global_name)
  return global_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ThreadPoolOptionProto::release_global_name() {
  // @@protoc_insertion_point(field_release:tensorflow.ThreadPoolOptionProto.global_name)
  
  return global_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ThreadPoolOptionProto::unsafe_arena_release_global_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ThreadPoolOptionProto.global_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return global_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ThreadPoolOptionProto::set_allocated_global_name(::std::string* global_name) {
  if (global_name != NULL) {
    
  } else {
    
  }
  global_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), global_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ThreadPoolOptionProto.global_name)
}
inline void ThreadPoolOptionProto::unsafe_arena_set_allocated_global_name(
    ::std::string* global_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (global_name != NULL) {
    
  } else {
    
  }
  global_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      global_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ThreadPoolOptionProto.global_name)
}

// -------------------------------------------------------------------

// RPCOptions

// optional bool use_rpc_for_inprocess_master = 1;
inline void RPCOptions::clear_use_rpc_for_inprocess_master() {
  use_rpc_for_inprocess_master_ = false;
}
inline bool RPCOptions::use_rpc_for_inprocess_master() const {
  // @@protoc_insertion_point(field_get:tensorflow.RPCOptions.use_rpc_for_inprocess_master)
  return use_rpc_for_inprocess_master_;
}
inline void RPCOptions::set_use_rpc_for_inprocess_master(bool value) {
  
  use_rpc_for_inprocess_master_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RPCOptions.use_rpc_for_inprocess_master)
}

// optional string compression_algorithm = 2;
inline void RPCOptions::clear_compression_algorithm() {
  compression_algorithm_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& RPCOptions::compression_algorithm() const {
  // @@protoc_insertion_point(field_get:tensorflow.RPCOptions.compression_algorithm)
  return compression_algorithm_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RPCOptions::set_compression_algorithm(const ::std::string& value) {
  
  compression_algorithm_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.RPCOptions.compression_algorithm)
}
inline void RPCOptions::set_compression_algorithm(const char* value) {
  
  compression_algorithm_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.RPCOptions.compression_algorithm)
}
inline void RPCOptions::set_compression_algorithm(const char* value,
    size_t size) {
  
  compression_algorithm_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.RPCOptions.compression_algorithm)
}
inline ::std::string* RPCOptions::mutable_compression_algorithm() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.RPCOptions.compression_algorithm)
  return compression_algorithm_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RPCOptions::release_compression_algorithm() {
  // @@protoc_insertion_point(field_release:tensorflow.RPCOptions.compression_algorithm)
  
  return compression_algorithm_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RPCOptions::unsafe_arena_release_compression_algorithm() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RPCOptions.compression_algorithm)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return compression_algorithm_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void RPCOptions::set_allocated_compression_algorithm(::std::string* compression_algorithm) {
  if (compression_algorithm != NULL) {
    
  } else {
    
  }
  compression_algorithm_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), compression_algorithm,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RPCOptions.compression_algorithm)
}
inline void RPCOptions::unsafe_arena_set_allocated_compression_algorithm(
    ::std::string* compression_algorithm) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (compression_algorithm != NULL) {
    
  } else {
    
  }
  compression_algorithm_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      compression_algorithm, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RPCOptions.compression_algorithm)
}

// optional int32 compression_level = 3;
inline void RPCOptions::clear_compression_level() {
  compression_level_ = 0;
}
inline ::google::protobuf::int32 RPCOptions::compression_level() const {
  // @@protoc_insertion_point(field_get:tensorflow.RPCOptions.compression_level)
  return compression_level_;
}
inline void RPCOptions::set_compression_level(::google::protobuf::int32 value) {
  
  compression_level_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RPCOptions.compression_level)
}

// optional bool cache_rpc_response = 4;
inline void RPCOptions::clear_cache_rpc_response() {
  cache_rpc_response_ = false;
}
inline bool RPCOptions::cache_rpc_response() const {
  // @@protoc_insertion_point(field_get:tensorflow.RPCOptions.cache_rpc_response)
  return cache_rpc_response_;
}
inline void RPCOptions::set_cache_rpc_response(bool value) {
  
  cache_rpc_response_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RPCOptions.cache_rpc_response)
}

// optional bool disable_session_connection_sharing = 5;
inline void RPCOptions::clear_disable_session_connection_sharing() {
  disable_session_connection_sharing_ = false;
}
inline bool RPCOptions::disable_session_connection_sharing() const {
  // @@protoc_insertion_point(field_get:tensorflow.RPCOptions.disable_session_connection_sharing)
  return disable_session_connection_sharing_;
}
inline void RPCOptions::set_disable_session_connection_sharing(bool value) {
  
  disable_session_connection_sharing_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RPCOptions.disable_session_connection_sharing)
}

// -------------------------------------------------------------------

// SessionMetadata

// optional string name = 1;
inline void SessionMetadata::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SessionMetadata::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.SessionMetadata.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionMetadata::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.SessionMetadata.name)
}
inline void SessionMetadata::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.SessionMetadata.name)
}
inline void SessionMetadata::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.SessionMetadata.name)
}
inline ::std::string* SessionMetadata::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.SessionMetadata.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SessionMetadata::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.SessionMetadata.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SessionMetadata::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.SessionMetadata.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SessionMetadata::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.SessionMetadata.name)
}
inline void SessionMetadata::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.SessionMetadata.name)
}

// optional int64 version = 2;
inline void SessionMetadata::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SessionMetadata::version() const {
  // @@protoc_insertion_point(field_get:tensorflow.SessionMetadata.version)
  return version_;
}
inline void SessionMetadata::set_version(::google::protobuf::int64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.SessionMetadata.version)
}

// -------------------------------------------------------------------

// ConfigProto_Experimental

// optional string collective_group_leader = 1;
inline void ConfigProto_Experimental::clear_collective_group_leader() {
  collective_group_leader_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ConfigProto_Experimental::collective_group_leader() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.collective_group_leader)
  return collective_group_leader_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigProto_Experimental::set_collective_group_leader(const ::std::string& value) {
  
  collective_group_leader_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.collective_group_leader)
}
inline void ConfigProto_Experimental::set_collective_group_leader(const char* value) {
  
  collective_group_leader_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.ConfigProto.Experimental.collective_group_leader)
}
inline void ConfigProto_Experimental::set_collective_group_leader(const char* value,
    size_t size) {
  
  collective_group_leader_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.ConfigProto.Experimental.collective_group_leader)
}
inline ::std::string* ConfigProto_Experimental::mutable_collective_group_leader() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.ConfigProto.Experimental.collective_group_leader)
  return collective_group_leader_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigProto_Experimental::release_collective_group_leader() {
  // @@protoc_insertion_point(field_release:tensorflow.ConfigProto.Experimental.collective_group_leader)
  
  return collective_group_leader_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigProto_Experimental::unsafe_arena_release_collective_group_leader() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ConfigProto.Experimental.collective_group_leader)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return collective_group_leader_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigProto_Experimental::set_allocated_collective_group_leader(::std::string* collective_group_leader) {
  if (collective_group_leader != NULL) {
    
  } else {
    
  }
  collective_group_leader_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collective_group_leader,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ConfigProto.Experimental.collective_group_leader)
}
inline void ConfigProto_Experimental::unsafe_arena_set_allocated_collective_group_leader(
    ::std::string* collective_group_leader) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (collective_group_leader != NULL) {
    
  } else {
    
  }
  collective_group_leader_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      collective_group_leader, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ConfigProto.Experimental.collective_group_leader)
}

// optional string executor_type = 3;
inline void ConfigProto_Experimental::clear_executor_type() {
  executor_type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ConfigProto_Experimental::executor_type() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.executor_type)
  return executor_type_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigProto_Experimental::set_executor_type(const ::std::string& value) {
  
  executor_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.executor_type)
}
inline void ConfigProto_Experimental::set_executor_type(const char* value) {
  
  executor_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.ConfigProto.Experimental.executor_type)
}
inline void ConfigProto_Experimental::set_executor_type(const char* value,
    size_t size) {
  
  executor_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.ConfigProto.Experimental.executor_type)
}
inline ::std::string* ConfigProto_Experimental::mutable_executor_type() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.ConfigProto.Experimental.executor_type)
  return executor_type_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigProto_Experimental::release_executor_type() {
  // @@protoc_insertion_point(field_release:tensorflow.ConfigProto.Experimental.executor_type)
  
  return executor_type_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigProto_Experimental::unsafe_arena_release_executor_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.ConfigProto.Experimental.executor_type)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return executor_type_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigProto_Experimental::set_allocated_executor_type(::std::string* executor_type) {
  if (executor_type != NULL) {
    
  } else {
    
  }
  executor_type_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), executor_type,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ConfigProto.Experimental.executor_type)
}
inline void ConfigProto_Experimental::unsafe_arena_set_allocated_executor_type(
    ::std::string* executor_type) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (executor_type != NULL) {
    
  } else {
    
  }
  executor_type_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      executor_type, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ConfigProto.Experimental.executor_type)
}

// optional int32 recv_buf_max_chunk = 4;
inline void ConfigProto_Experimental::clear_recv_buf_max_chunk() {
  recv_buf_max_chunk_ = 0;
}
inline ::google::protobuf::int32 ConfigProto_Experimental::recv_buf_max_chunk() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.recv_buf_max_chunk)
  return recv_buf_max_chunk_;
}
inline void ConfigProto_Experimental::set_recv_buf_max_chunk(::google::protobuf::int32 value) {
  
  recv_buf_max_chunk_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.recv_buf_max_chunk)
}

// optional bool use_numa_affinity = 5;
inline void ConfigProto_Experimental::clear_use_numa_affinity() {
  use_numa_affinity_ = false;
}
inline bool ConfigProto_Experimental::use_numa_affinity() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.use_numa_affinity)
  return use_numa_affinity_;
}
inline void ConfigProto_Experimental::set_use_numa_affinity(bool value) {
  
  use_numa_affinity_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.use_numa_affinity)
}

// optional bool collective_deterministic_sequential_execution = 6;
inline void ConfigProto_Experimental::clear_collective_deterministic_sequential_execution() {
  collective_deterministic_sequential_execution_ = false;
}
inline bool ConfigProto_Experimental::collective_deterministic_sequential_execution() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.collective_deterministic_sequential_execution)
  return collective_deterministic_sequential_execution_;
}
inline void ConfigProto_Experimental::set_collective_deterministic_sequential_execution(bool value) {
  
  collective_deterministic_sequential_execution_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.collective_deterministic_sequential_execution)
}

// optional bool collective_nccl = 7;
inline void ConfigProto_Experimental::clear_collective_nccl() {
  collective_nccl_ = false;
}
inline bool ConfigProto_Experimental::collective_nccl() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.collective_nccl)
  return collective_nccl_;
}
inline void ConfigProto_Experimental::set_collective_nccl(bool value) {
  
  collective_nccl_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.collective_nccl)
}

// optional bool share_session_state_in_clusterspec_propagation = 8;
inline void ConfigProto_Experimental::clear_share_session_state_in_clusterspec_propagation() {
  share_session_state_in_clusterspec_propagation_ = false;
}
inline bool ConfigProto_Experimental::share_session_state_in_clusterspec_propagation() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.share_session_state_in_clusterspec_propagation)
  return share_session_state_in_clusterspec_propagation_;
}
inline void ConfigProto_Experimental::set_share_session_state_in_clusterspec_propagation(bool value) {
  
  share_session_state_in_clusterspec_propagation_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.share_session_state_in_clusterspec_propagation)
}

// optional bool disable_thread_spinning = 9;
inline void ConfigProto_Experimental::clear_disable_thread_spinning() {
  disable_thread_spinning_ = false;
}
inline bool ConfigProto_Experimental::disable_thread_spinning() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.disable_thread_spinning)
  return disable_thread_spinning_;
}
inline void ConfigProto_Experimental::set_disable_thread_spinning(bool value) {
  
  disable_thread_spinning_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.disable_thread_spinning)
}

// optional bool share_cluster_devices_in_session = 10;
inline void ConfigProto_Experimental::clear_share_cluster_devices_in_session() {
  share_cluster_devices_in_session_ = false;
}
inline bool ConfigProto_Experimental::share_cluster_devices_in_session() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.share_cluster_devices_in_session)
  return share_cluster_devices_in_session_;
}
inline void ConfigProto_Experimental::set_share_cluster_devices_in_session(bool value) {
  
  share_cluster_devices_in_session_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.share_cluster_devices_in_session)
}

// optional .tensorflow.SessionMetadata session_metadata = 11;
inline bool ConfigProto_Experimental::has_session_metadata() const {
  return !_is_default_instance_ && session_metadata_ != NULL;
}
inline void ConfigProto_Experimental::clear_session_metadata() {
  if (GetArenaNoVirtual() == NULL && session_metadata_ != NULL) delete session_metadata_;
  session_metadata_ = NULL;
}
inline const ::tensorflow::SessionMetadata& ConfigProto_Experimental::session_metadata() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.session_metadata)
  return session_metadata_ != NULL ? *session_metadata_ : *default_instance_->session_metadata_;
}
inline ::tensorflow::SessionMetadata* ConfigProto_Experimental::mutable_session_metadata() {
  
  if (session_metadata_ == NULL) {
    _slow_mutable_session_metadata();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ConfigProto.Experimental.session_metadata)
  return session_metadata_;
}
inline ::tensorflow::SessionMetadata* ConfigProto_Experimental::release_session_metadata() {
  // @@protoc_insertion_point(field_release:tensorflow.ConfigProto.Experimental.session_metadata)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_session_metadata();
  } else {
    ::tensorflow::SessionMetadata* temp = session_metadata_;
    session_metadata_ = NULL;
    return temp;
  }
}
inline  void ConfigProto_Experimental::set_allocated_session_metadata(::tensorflow::SessionMetadata* session_metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete session_metadata_;
  }
  if (session_metadata != NULL) {
    _slow_set_allocated_session_metadata(message_arena, &session_metadata);
  }
  session_metadata_ = session_metadata;
  if (session_metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ConfigProto.Experimental.session_metadata)
}

// optional bool optimize_for_static_graph = 12;
inline void ConfigProto_Experimental::clear_optimize_for_static_graph() {
  optimize_for_static_graph_ = false;
}
inline bool ConfigProto_Experimental::optimize_for_static_graph() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.optimize_for_static_graph)
  return optimize_for_static_graph_;
}
inline void ConfigProto_Experimental::set_optimize_for_static_graph(bool value) {
  
  optimize_for_static_graph_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.optimize_for_static_graph)
}

// optional bool enable_mlir_bridge = 13;
inline void ConfigProto_Experimental::clear_enable_mlir_bridge() {
  enable_mlir_bridge_ = false;
}
inline bool ConfigProto_Experimental::enable_mlir_bridge() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.enable_mlir_bridge)
  return enable_mlir_bridge_;
}
inline void ConfigProto_Experimental::set_enable_mlir_bridge(bool value) {
  
  enable_mlir_bridge_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.enable_mlir_bridge)
}

// optional bool enable_mlir_graph_optimization = 16;
inline void ConfigProto_Experimental::clear_enable_mlir_graph_optimization() {
  enable_mlir_graph_optimization_ = false;
}
inline bool ConfigProto_Experimental::enable_mlir_graph_optimization() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.enable_mlir_graph_optimization)
  return enable_mlir_graph_optimization_;
}
inline void ConfigProto_Experimental::set_enable_mlir_graph_optimization(bool value) {
  
  enable_mlir_graph_optimization_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.enable_mlir_graph_optimization)
}

// optional bool disable_output_partition_graphs = 14;
inline void ConfigProto_Experimental::clear_disable_output_partition_graphs() {
  disable_output_partition_graphs_ = false;
}
inline bool ConfigProto_Experimental::disable_output_partition_graphs() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.disable_output_partition_graphs)
  return disable_output_partition_graphs_;
}
inline void ConfigProto_Experimental::set_disable_output_partition_graphs(bool value) {
  
  disable_output_partition_graphs_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.disable_output_partition_graphs)
}

// optional int64 xla_fusion_autotuner_thresh = 15;
inline void ConfigProto_Experimental::clear_xla_fusion_autotuner_thresh() {
  xla_fusion_autotuner_thresh_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ConfigProto_Experimental::xla_fusion_autotuner_thresh() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.Experimental.xla_fusion_autotuner_thresh)
  return xla_fusion_autotuner_thresh_;
}
inline void ConfigProto_Experimental::set_xla_fusion_autotuner_thresh(::google::protobuf::int64 value) {
  
  xla_fusion_autotuner_thresh_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.Experimental.xla_fusion_autotuner_thresh)
}

// -------------------------------------------------------------------

// ConfigProto

// map<string, int32> device_count = 1;
inline int ConfigProto::device_count_size() const {
  return device_count_.size();
}
inline void ConfigProto::clear_device_count() {
  device_count_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >&
ConfigProto::device_count() const {
  // @@protoc_insertion_point(field_map:tensorflow.ConfigProto.device_count)
  return device_count_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >*
ConfigProto::mutable_device_count() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.ConfigProto.device_count)
  return device_count_.MutableMap();
}

// optional int32 intra_op_parallelism_threads = 2;
inline void ConfigProto::clear_intra_op_parallelism_threads() {
  intra_op_parallelism_threads_ = 0;
}
inline ::google::protobuf::int32 ConfigProto::intra_op_parallelism_threads() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.intra_op_parallelism_threads)
  return intra_op_parallelism_threads_;
}
inline void ConfigProto::set_intra_op_parallelism_threads(::google::protobuf::int32 value) {
  
  intra_op_parallelism_threads_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.intra_op_parallelism_threads)
}

// optional int32 inter_op_parallelism_threads = 5;
inline void ConfigProto::clear_inter_op_parallelism_threads() {
  inter_op_parallelism_threads_ = 0;
}
inline ::google::protobuf::int32 ConfigProto::inter_op_parallelism_threads() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.inter_op_parallelism_threads)
  return inter_op_parallelism_threads_;
}
inline void ConfigProto::set_inter_op_parallelism_threads(::google::protobuf::int32 value) {
  
  inter_op_parallelism_threads_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.inter_op_parallelism_threads)
}

// optional bool use_per_session_threads = 9;
inline void ConfigProto::clear_use_per_session_threads() {
  use_per_session_threads_ = false;
}
inline bool ConfigProto::use_per_session_threads() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.use_per_session_threads)
  return use_per_session_threads_;
}
inline void ConfigProto::set_use_per_session_threads(bool value) {
  
  use_per_session_threads_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.use_per_session_threads)
}

// repeated .tensorflow.ThreadPoolOptionProto session_inter_op_thread_pool = 12;
inline int ConfigProto::session_inter_op_thread_pool_size() const {
  return session_inter_op_thread_pool_.size();
}
inline void ConfigProto::clear_session_inter_op_thread_pool() {
  session_inter_op_thread_pool_.Clear();
}
inline const ::tensorflow::ThreadPoolOptionProto& ConfigProto::session_inter_op_thread_pool(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.session_inter_op_thread_pool)
  return session_inter_op_thread_pool_.Get(index);
}
inline ::tensorflow::ThreadPoolOptionProto* ConfigProto::mutable_session_inter_op_thread_pool(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.ConfigProto.session_inter_op_thread_pool)
  return session_inter_op_thread_pool_.Mutable(index);
}
inline ::tensorflow::ThreadPoolOptionProto* ConfigProto::add_session_inter_op_thread_pool() {
  // @@protoc_insertion_point(field_add:tensorflow.ConfigProto.session_inter_op_thread_pool)
  return session_inter_op_thread_pool_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::ThreadPoolOptionProto >*
ConfigProto::mutable_session_inter_op_thread_pool() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.ConfigProto.session_inter_op_thread_pool)
  return &session_inter_op_thread_pool_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::ThreadPoolOptionProto >&
ConfigProto::session_inter_op_thread_pool() const {
  // @@protoc_insertion_point(field_list:tensorflow.ConfigProto.session_inter_op_thread_pool)
  return session_inter_op_thread_pool_;
}

// optional int32 placement_period = 3;
inline void ConfigProto::clear_placement_period() {
  placement_period_ = 0;
}
inline ::google::protobuf::int32 ConfigProto::placement_period() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.placement_period)
  return placement_period_;
}
inline void ConfigProto::set_placement_period(::google::protobuf::int32 value) {
  
  placement_period_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.placement_period)
}

// repeated string device_filters = 4;
inline int ConfigProto::device_filters_size() const {
  return device_filters_.size();
}
inline void ConfigProto::clear_device_filters() {
  device_filters_.Clear();
}
inline const ::std::string& ConfigProto::device_filters(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.device_filters)
  return device_filters_.Get(index);
}
inline ::std::string* ConfigProto::mutable_device_filters(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.ConfigProto.device_filters)
  return device_filters_.Mutable(index);
}
inline void ConfigProto::set_device_filters(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.device_filters)
  device_filters_.Mutable(index)->assign(value);
}
inline void ConfigProto::set_device_filters(int index, const char* value) {
  device_filters_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.ConfigProto.device_filters)
}
inline void ConfigProto::set_device_filters(int index, const char* value, size_t size) {
  device_filters_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.ConfigProto.device_filters)
}
inline ::std::string* ConfigProto::add_device_filters() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.ConfigProto.device_filters)
  return device_filters_.Add();
}
inline void ConfigProto::add_device_filters(const ::std::string& value) {
  device_filters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.ConfigProto.device_filters)
}
inline void ConfigProto::add_device_filters(const char* value) {
  device_filters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.ConfigProto.device_filters)
}
inline void ConfigProto::add_device_filters(const char* value, size_t size) {
  device_filters_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.ConfigProto.device_filters)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ConfigProto::device_filters() const {
  // @@protoc_insertion_point(field_list:tensorflow.ConfigProto.device_filters)
  return device_filters_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ConfigProto::mutable_device_filters() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.ConfigProto.device_filters)
  return &device_filters_;
}

// optional .tensorflow.GPUOptions gpu_options = 6;
inline bool ConfigProto::has_gpu_options() const {
  return !_is_default_instance_ && gpu_options_ != NULL;
}
inline void ConfigProto::clear_gpu_options() {
  if (GetArenaNoVirtual() == NULL && gpu_options_ != NULL) delete gpu_options_;
  gpu_options_ = NULL;
}
inline const ::tensorflow::GPUOptions& ConfigProto::gpu_options() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.gpu_options)
  return gpu_options_ != NULL ? *gpu_options_ : *default_instance_->gpu_options_;
}
inline ::tensorflow::GPUOptions* ConfigProto::mutable_gpu_options() {
  
  if (gpu_options_ == NULL) {
    _slow_mutable_gpu_options();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ConfigProto.gpu_options)
  return gpu_options_;
}
inline ::tensorflow::GPUOptions* ConfigProto::release_gpu_options() {
  // @@protoc_insertion_point(field_release:tensorflow.ConfigProto.gpu_options)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_gpu_options();
  } else {
    ::tensorflow::GPUOptions* temp = gpu_options_;
    gpu_options_ = NULL;
    return temp;
  }
}
inline  void ConfigProto::set_allocated_gpu_options(::tensorflow::GPUOptions* gpu_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete gpu_options_;
  }
  if (gpu_options != NULL) {
    _slow_set_allocated_gpu_options(message_arena, &gpu_options);
  }
  gpu_options_ = gpu_options;
  if (gpu_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ConfigProto.gpu_options)
}

// optional bool allow_soft_placement = 7;
inline void ConfigProto::clear_allow_soft_placement() {
  allow_soft_placement_ = false;
}
inline bool ConfigProto::allow_soft_placement() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.allow_soft_placement)
  return allow_soft_placement_;
}
inline void ConfigProto::set_allow_soft_placement(bool value) {
  
  allow_soft_placement_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.allow_soft_placement)
}

// optional bool log_device_placement = 8;
inline void ConfigProto::clear_log_device_placement() {
  log_device_placement_ = false;
}
inline bool ConfigProto::log_device_placement() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.log_device_placement)
  return log_device_placement_;
}
inline void ConfigProto::set_log_device_placement(bool value) {
  
  log_device_placement_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.log_device_placement)
}

// optional .tensorflow.GraphOptions graph_options = 10;
inline bool ConfigProto::has_graph_options() const {
  return !_is_default_instance_ && graph_options_ != NULL;
}
inline void ConfigProto::clear_graph_options() {
  if (GetArenaNoVirtual() == NULL && graph_options_ != NULL) delete graph_options_;
  graph_options_ = NULL;
}
inline const ::tensorflow::GraphOptions& ConfigProto::graph_options() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.graph_options)
  return graph_options_ != NULL ? *graph_options_ : *default_instance_->graph_options_;
}
inline ::tensorflow::GraphOptions* ConfigProto::mutable_graph_options() {
  
  if (graph_options_ == NULL) {
    _slow_mutable_graph_options();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ConfigProto.graph_options)
  return graph_options_;
}
inline ::tensorflow::GraphOptions* ConfigProto::release_graph_options() {
  // @@protoc_insertion_point(field_release:tensorflow.ConfigProto.graph_options)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_graph_options();
  } else {
    ::tensorflow::GraphOptions* temp = graph_options_;
    graph_options_ = NULL;
    return temp;
  }
}
inline  void ConfigProto::set_allocated_graph_options(::tensorflow::GraphOptions* graph_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete graph_options_;
  }
  if (graph_options != NULL) {
    _slow_set_allocated_graph_options(message_arena, &graph_options);
  }
  graph_options_ = graph_options;
  if (graph_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ConfigProto.graph_options)
}

// optional int64 operation_timeout_in_ms = 11;
inline void ConfigProto::clear_operation_timeout_in_ms() {
  operation_timeout_in_ms_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ConfigProto::operation_timeout_in_ms() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.operation_timeout_in_ms)
  return operation_timeout_in_ms_;
}
inline void ConfigProto::set_operation_timeout_in_ms(::google::protobuf::int64 value) {
  
  operation_timeout_in_ms_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.operation_timeout_in_ms)
}

// optional .tensorflow.RPCOptions rpc_options = 13;
inline bool ConfigProto::has_rpc_options() const {
  return !_is_default_instance_ && rpc_options_ != NULL;
}
inline void ConfigProto::clear_rpc_options() {
  if (GetArenaNoVirtual() == NULL && rpc_options_ != NULL) delete rpc_options_;
  rpc_options_ = NULL;
}
inline const ::tensorflow::RPCOptions& ConfigProto::rpc_options() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.rpc_options)
  return rpc_options_ != NULL ? *rpc_options_ : *default_instance_->rpc_options_;
}
inline ::tensorflow::RPCOptions* ConfigProto::mutable_rpc_options() {
  
  if (rpc_options_ == NULL) {
    _slow_mutable_rpc_options();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ConfigProto.rpc_options)
  return rpc_options_;
}
inline ::tensorflow::RPCOptions* ConfigProto::release_rpc_options() {
  // @@protoc_insertion_point(field_release:tensorflow.ConfigProto.rpc_options)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_rpc_options();
  } else {
    ::tensorflow::RPCOptions* temp = rpc_options_;
    rpc_options_ = NULL;
    return temp;
  }
}
inline  void ConfigProto::set_allocated_rpc_options(::tensorflow::RPCOptions* rpc_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rpc_options_;
  }
  if (rpc_options != NULL) {
    _slow_set_allocated_rpc_options(message_arena, &rpc_options);
  }
  rpc_options_ = rpc_options;
  if (rpc_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ConfigProto.rpc_options)
}

// optional .tensorflow.ClusterDef cluster_def = 14;
inline bool ConfigProto::has_cluster_def() const {
  return !_is_default_instance_ && cluster_def_ != NULL;
}
inline void ConfigProto::clear_cluster_def() {
  if (GetArenaNoVirtual() == NULL && cluster_def_ != NULL) delete cluster_def_;
  cluster_def_ = NULL;
}
inline const ::tensorflow::ClusterDef& ConfigProto::cluster_def() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.cluster_def)
  return cluster_def_ != NULL ? *cluster_def_ : *default_instance_->cluster_def_;
}
inline ::tensorflow::ClusterDef* ConfigProto::mutable_cluster_def() {
  
  if (cluster_def_ == NULL) {
    _slow_mutable_cluster_def();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ConfigProto.cluster_def)
  return cluster_def_;
}
inline ::tensorflow::ClusterDef* ConfigProto::release_cluster_def() {
  // @@protoc_insertion_point(field_release:tensorflow.ConfigProto.cluster_def)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_cluster_def();
  } else {
    ::tensorflow::ClusterDef* temp = cluster_def_;
    cluster_def_ = NULL;
    return temp;
  }
}
inline  void ConfigProto::set_allocated_cluster_def(::tensorflow::ClusterDef* cluster_def) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cluster_def_;
  }
  if (cluster_def != NULL) {
    _slow_set_allocated_cluster_def(message_arena, &cluster_def);
  }
  cluster_def_ = cluster_def;
  if (cluster_def) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ConfigProto.cluster_def)
}

// optional bool isolate_session_state = 15;
inline void ConfigProto::clear_isolate_session_state() {
  isolate_session_state_ = false;
}
inline bool ConfigProto::isolate_session_state() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.isolate_session_state)
  return isolate_session_state_;
}
inline void ConfigProto::set_isolate_session_state(bool value) {
  
  isolate_session_state_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.isolate_session_state)
}

// optional bool share_cluster_devices_in_session = 17;
inline void ConfigProto::clear_share_cluster_devices_in_session() {
  share_cluster_devices_in_session_ = false;
}
inline bool ConfigProto::share_cluster_devices_in_session() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.share_cluster_devices_in_session)
  return share_cluster_devices_in_session_;
}
inline void ConfigProto::set_share_cluster_devices_in_session(bool value) {
  
  share_cluster_devices_in_session_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ConfigProto.share_cluster_devices_in_session)
}

// optional .tensorflow.ConfigProto.Experimental experimental = 16;
inline bool ConfigProto::has_experimental() const {
  return !_is_default_instance_ && experimental_ != NULL;
}
inline void ConfigProto::clear_experimental() {
  if (GetArenaNoVirtual() == NULL && experimental_ != NULL) delete experimental_;
  experimental_ = NULL;
}
inline const ::tensorflow::ConfigProto_Experimental& ConfigProto::experimental() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConfigProto.experimental)
  return experimental_ != NULL ? *experimental_ : *default_instance_->experimental_;
}
inline ::tensorflow::ConfigProto_Experimental* ConfigProto::mutable_experimental() {
  
  if (experimental_ == NULL) {
    _slow_mutable_experimental();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.ConfigProto.experimental)
  return experimental_;
}
inline ::tensorflow::ConfigProto_Experimental* ConfigProto::release_experimental() {
  // @@protoc_insertion_point(field_release:tensorflow.ConfigProto.experimental)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_experimental();
  } else {
    ::tensorflow::ConfigProto_Experimental* temp = experimental_;
    experimental_ = NULL;
    return temp;
  }
}
inline  void ConfigProto::set_allocated_experimental(::tensorflow::ConfigProto_Experimental* experimental) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete experimental_;
  }
  if (experimental != NULL) {
    _slow_set_allocated_experimental(message_arena, &experimental);
  }
  experimental_ = experimental;
  if (experimental) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ConfigProto.experimental)
}

// -------------------------------------------------------------------

// RunOptions_Experimental_RunHandlerPoolOptions

// optional int64 priority = 1;
inline void RunOptions_Experimental_RunHandlerPoolOptions::clear_priority() {
  priority_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RunOptions_Experimental_RunHandlerPoolOptions::priority() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunOptions.Experimental.RunHandlerPoolOptions.priority)
  return priority_;
}
inline void RunOptions_Experimental_RunHandlerPoolOptions::set_priority(::google::protobuf::int64 value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RunOptions.Experimental.RunHandlerPoolOptions.priority)
}

// -------------------------------------------------------------------

// RunOptions_Experimental

// optional int64 collective_graph_key = 1;
inline void RunOptions_Experimental::clear_collective_graph_key() {
  collective_graph_key_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RunOptions_Experimental::collective_graph_key() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunOptions.Experimental.collective_graph_key)
  return collective_graph_key_;
}
inline void RunOptions_Experimental::set_collective_graph_key(::google::protobuf::int64 value) {
  
  collective_graph_key_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RunOptions.Experimental.collective_graph_key)
}

// optional bool use_run_handler_pool = 2;
inline void RunOptions_Experimental::clear_use_run_handler_pool() {
  use_run_handler_pool_ = false;
}
inline bool RunOptions_Experimental::use_run_handler_pool() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunOptions.Experimental.use_run_handler_pool)
  return use_run_handler_pool_;
}
inline void RunOptions_Experimental::set_use_run_handler_pool(bool value) {
  
  use_run_handler_pool_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RunOptions.Experimental.use_run_handler_pool)
}

// optional .tensorflow.RunOptions.Experimental.RunHandlerPoolOptions run_handler_pool_options = 3;
inline bool RunOptions_Experimental::has_run_handler_pool_options() const {
  return !_is_default_instance_ && run_handler_pool_options_ != NULL;
}
inline void RunOptions_Experimental::clear_run_handler_pool_options() {
  if (GetArenaNoVirtual() == NULL && run_handler_pool_options_ != NULL) delete run_handler_pool_options_;
  run_handler_pool_options_ = NULL;
}
inline const ::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions& RunOptions_Experimental::run_handler_pool_options() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunOptions.Experimental.run_handler_pool_options)
  return run_handler_pool_options_ != NULL ? *run_handler_pool_options_ : *default_instance_->run_handler_pool_options_;
}
inline ::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions* RunOptions_Experimental::mutable_run_handler_pool_options() {
  
  if (run_handler_pool_options_ == NULL) {
    _slow_mutable_run_handler_pool_options();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RunOptions.Experimental.run_handler_pool_options)
  return run_handler_pool_options_;
}
inline ::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions* RunOptions_Experimental::release_run_handler_pool_options() {
  // @@protoc_insertion_point(field_release:tensorflow.RunOptions.Experimental.run_handler_pool_options)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_run_handler_pool_options();
  } else {
    ::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions* temp = run_handler_pool_options_;
    run_handler_pool_options_ = NULL;
    return temp;
  }
}
inline  void RunOptions_Experimental::set_allocated_run_handler_pool_options(::tensorflow::RunOptions_Experimental_RunHandlerPoolOptions* run_handler_pool_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete run_handler_pool_options_;
  }
  if (run_handler_pool_options != NULL) {
    _slow_set_allocated_run_handler_pool_options(message_arena, &run_handler_pool_options);
  }
  run_handler_pool_options_ = run_handler_pool_options;
  if (run_handler_pool_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunOptions.Experimental.run_handler_pool_options)
}

// -------------------------------------------------------------------

// RunOptions

// optional .tensorflow.RunOptions.TraceLevel trace_level = 1;
inline void RunOptions::clear_trace_level() {
  trace_level_ = 0;
}
inline ::tensorflow::RunOptions_TraceLevel RunOptions::trace_level() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunOptions.trace_level)
  return static_cast< ::tensorflow::RunOptions_TraceLevel >(trace_level_);
}
inline void RunOptions::set_trace_level(::tensorflow::RunOptions_TraceLevel value) {
  
  trace_level_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RunOptions.trace_level)
}

// optional int64 timeout_in_ms = 2;
inline void RunOptions::clear_timeout_in_ms() {
  timeout_in_ms_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RunOptions::timeout_in_ms() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunOptions.timeout_in_ms)
  return timeout_in_ms_;
}
inline void RunOptions::set_timeout_in_ms(::google::protobuf::int64 value) {
  
  timeout_in_ms_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RunOptions.timeout_in_ms)
}

// optional int32 inter_op_thread_pool = 3;
inline void RunOptions::clear_inter_op_thread_pool() {
  inter_op_thread_pool_ = 0;
}
inline ::google::protobuf::int32 RunOptions::inter_op_thread_pool() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunOptions.inter_op_thread_pool)
  return inter_op_thread_pool_;
}
inline void RunOptions::set_inter_op_thread_pool(::google::protobuf::int32 value) {
  
  inter_op_thread_pool_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RunOptions.inter_op_thread_pool)
}

// optional bool output_partition_graphs = 5;
inline void RunOptions::clear_output_partition_graphs() {
  output_partition_graphs_ = false;
}
inline bool RunOptions::output_partition_graphs() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunOptions.output_partition_graphs)
  return output_partition_graphs_;
}
inline void RunOptions::set_output_partition_graphs(bool value) {
  
  output_partition_graphs_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RunOptions.output_partition_graphs)
}

// optional .tensorflow.DebugOptions debug_options = 6;
inline bool RunOptions::has_debug_options() const {
  return !_is_default_instance_ && debug_options_ != NULL;
}
inline void RunOptions::clear_debug_options() {
  if (GetArenaNoVirtual() == NULL && debug_options_ != NULL) delete debug_options_;
  debug_options_ = NULL;
}
inline const ::tensorflow::DebugOptions& RunOptions::debug_options() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunOptions.debug_options)
  return debug_options_ != NULL ? *debug_options_ : *default_instance_->debug_options_;
}
inline ::tensorflow::DebugOptions* RunOptions::mutable_debug_options() {
  
  if (debug_options_ == NULL) {
    _slow_mutable_debug_options();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RunOptions.debug_options)
  return debug_options_;
}
inline ::tensorflow::DebugOptions* RunOptions::release_debug_options() {
  // @@protoc_insertion_point(field_release:tensorflow.RunOptions.debug_options)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_debug_options();
  } else {
    ::tensorflow::DebugOptions* temp = debug_options_;
    debug_options_ = NULL;
    return temp;
  }
}
inline  void RunOptions::set_allocated_debug_options(::tensorflow::DebugOptions* debug_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete debug_options_;
  }
  if (debug_options != NULL) {
    _slow_set_allocated_debug_options(message_arena, &debug_options);
  }
  debug_options_ = debug_options;
  if (debug_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunOptions.debug_options)
}

// optional bool report_tensor_allocations_upon_oom = 7;
inline void RunOptions::clear_report_tensor_allocations_upon_oom() {
  report_tensor_allocations_upon_oom_ = false;
}
inline bool RunOptions::report_tensor_allocations_upon_oom() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunOptions.report_tensor_allocations_upon_oom)
  return report_tensor_allocations_upon_oom_;
}
inline void RunOptions::set_report_tensor_allocations_upon_oom(bool value) {
  
  report_tensor_allocations_upon_oom_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RunOptions.report_tensor_allocations_upon_oom)
}

// optional .tensorflow.RunOptions.Experimental experimental = 8;
inline bool RunOptions::has_experimental() const {
  return !_is_default_instance_ && experimental_ != NULL;
}
inline void RunOptions::clear_experimental() {
  if (GetArenaNoVirtual() == NULL && experimental_ != NULL) delete experimental_;
  experimental_ = NULL;
}
inline const ::tensorflow::RunOptions_Experimental& RunOptions::experimental() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunOptions.experimental)
  return experimental_ != NULL ? *experimental_ : *default_instance_->experimental_;
}
inline ::tensorflow::RunOptions_Experimental* RunOptions::mutable_experimental() {
  
  if (experimental_ == NULL) {
    _slow_mutable_experimental();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RunOptions.experimental)
  return experimental_;
}
inline ::tensorflow::RunOptions_Experimental* RunOptions::release_experimental() {
  // @@protoc_insertion_point(field_release:tensorflow.RunOptions.experimental)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_experimental();
  } else {
    ::tensorflow::RunOptions_Experimental* temp = experimental_;
    experimental_ = NULL;
    return temp;
  }
}
inline  void RunOptions::set_allocated_experimental(::tensorflow::RunOptions_Experimental* experimental) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete experimental_;
  }
  if (experimental != NULL) {
    _slow_set_allocated_experimental(message_arena, &experimental);
  }
  experimental_ = experimental;
  if (experimental) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunOptions.experimental)
}

// -------------------------------------------------------------------

// RunMetadata_FunctionGraphs

// repeated .tensorflow.GraphDef partition_graphs = 1;
inline int RunMetadata_FunctionGraphs::partition_graphs_size() const {
  return partition_graphs_.size();
}
inline void RunMetadata_FunctionGraphs::clear_partition_graphs() {
  partition_graphs_.Clear();
}
inline const ::tensorflow::GraphDef& RunMetadata_FunctionGraphs::partition_graphs(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.RunMetadata.FunctionGraphs.partition_graphs)
  return partition_graphs_.Get(index);
}
inline ::tensorflow::GraphDef* RunMetadata_FunctionGraphs::mutable_partition_graphs(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.RunMetadata.FunctionGraphs.partition_graphs)
  return partition_graphs_.Mutable(index);
}
inline ::tensorflow::GraphDef* RunMetadata_FunctionGraphs::add_partition_graphs() {
  // @@protoc_insertion_point(field_add:tensorflow.RunMetadata.FunctionGraphs.partition_graphs)
  return partition_graphs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphDef >*
RunMetadata_FunctionGraphs::mutable_partition_graphs() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.RunMetadata.FunctionGraphs.partition_graphs)
  return &partition_graphs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphDef >&
RunMetadata_FunctionGraphs::partition_graphs() const {
  // @@protoc_insertion_point(field_list:tensorflow.RunMetadata.FunctionGraphs.partition_graphs)
  return partition_graphs_;
}

// optional .tensorflow.GraphDef pre_optimization_graph = 2;
inline bool RunMetadata_FunctionGraphs::has_pre_optimization_graph() const {
  return !_is_default_instance_ && pre_optimization_graph_ != NULL;
}
inline void RunMetadata_FunctionGraphs::clear_pre_optimization_graph() {
  if (GetArenaNoVirtual() == NULL && pre_optimization_graph_ != NULL) delete pre_optimization_graph_;
  pre_optimization_graph_ = NULL;
}
inline const ::tensorflow::GraphDef& RunMetadata_FunctionGraphs::pre_optimization_graph() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunMetadata.FunctionGraphs.pre_optimization_graph)
  return pre_optimization_graph_ != NULL ? *pre_optimization_graph_ : *default_instance_->pre_optimization_graph_;
}
inline ::tensorflow::GraphDef* RunMetadata_FunctionGraphs::mutable_pre_optimization_graph() {
  
  if (pre_optimization_graph_ == NULL) {
    _slow_mutable_pre_optimization_graph();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RunMetadata.FunctionGraphs.pre_optimization_graph)
  return pre_optimization_graph_;
}
inline ::tensorflow::GraphDef* RunMetadata_FunctionGraphs::release_pre_optimization_graph() {
  // @@protoc_insertion_point(field_release:tensorflow.RunMetadata.FunctionGraphs.pre_optimization_graph)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_pre_optimization_graph();
  } else {
    ::tensorflow::GraphDef* temp = pre_optimization_graph_;
    pre_optimization_graph_ = NULL;
    return temp;
  }
}
inline  void RunMetadata_FunctionGraphs::set_allocated_pre_optimization_graph(::tensorflow::GraphDef* pre_optimization_graph) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pre_optimization_graph_;
  }
  if (pre_optimization_graph != NULL) {
    _slow_set_allocated_pre_optimization_graph(message_arena, &pre_optimization_graph);
  }
  pre_optimization_graph_ = pre_optimization_graph;
  if (pre_optimization_graph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunMetadata.FunctionGraphs.pre_optimization_graph)
}

// optional .tensorflow.GraphDef post_optimization_graph = 3;
inline bool RunMetadata_FunctionGraphs::has_post_optimization_graph() const {
  return !_is_default_instance_ && post_optimization_graph_ != NULL;
}
inline void RunMetadata_FunctionGraphs::clear_post_optimization_graph() {
  if (GetArenaNoVirtual() == NULL && post_optimization_graph_ != NULL) delete post_optimization_graph_;
  post_optimization_graph_ = NULL;
}
inline const ::tensorflow::GraphDef& RunMetadata_FunctionGraphs::post_optimization_graph() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunMetadata.FunctionGraphs.post_optimization_graph)
  return post_optimization_graph_ != NULL ? *post_optimization_graph_ : *default_instance_->post_optimization_graph_;
}
inline ::tensorflow::GraphDef* RunMetadata_FunctionGraphs::mutable_post_optimization_graph() {
  
  if (post_optimization_graph_ == NULL) {
    _slow_mutable_post_optimization_graph();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RunMetadata.FunctionGraphs.post_optimization_graph)
  return post_optimization_graph_;
}
inline ::tensorflow::GraphDef* RunMetadata_FunctionGraphs::release_post_optimization_graph() {
  // @@protoc_insertion_point(field_release:tensorflow.RunMetadata.FunctionGraphs.post_optimization_graph)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_post_optimization_graph();
  } else {
    ::tensorflow::GraphDef* temp = post_optimization_graph_;
    post_optimization_graph_ = NULL;
    return temp;
  }
}
inline  void RunMetadata_FunctionGraphs::set_allocated_post_optimization_graph(::tensorflow::GraphDef* post_optimization_graph) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete post_optimization_graph_;
  }
  if (post_optimization_graph != NULL) {
    _slow_set_allocated_post_optimization_graph(message_arena, &post_optimization_graph);
  }
  post_optimization_graph_ = post_optimization_graph;
  if (post_optimization_graph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunMetadata.FunctionGraphs.post_optimization_graph)
}

// -------------------------------------------------------------------

// RunMetadata

// optional .tensorflow.StepStats step_stats = 1;
inline bool RunMetadata::has_step_stats() const {
  return !_is_default_instance_ && step_stats_ != NULL;
}
inline void RunMetadata::clear_step_stats() {
  if (GetArenaNoVirtual() == NULL && step_stats_ != NULL) delete step_stats_;
  step_stats_ = NULL;
}
inline const ::tensorflow::StepStats& RunMetadata::step_stats() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunMetadata.step_stats)
  return step_stats_ != NULL ? *step_stats_ : *default_instance_->step_stats_;
}
inline ::tensorflow::StepStats* RunMetadata::mutable_step_stats() {
  
  if (step_stats_ == NULL) {
    _slow_mutable_step_stats();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RunMetadata.step_stats)
  return step_stats_;
}
inline ::tensorflow::StepStats* RunMetadata::release_step_stats() {
  // @@protoc_insertion_point(field_release:tensorflow.RunMetadata.step_stats)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_step_stats();
  } else {
    ::tensorflow::StepStats* temp = step_stats_;
    step_stats_ = NULL;
    return temp;
  }
}
inline  void RunMetadata::set_allocated_step_stats(::tensorflow::StepStats* step_stats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete step_stats_;
  }
  if (step_stats != NULL) {
    _slow_set_allocated_step_stats(message_arena, &step_stats);
  }
  step_stats_ = step_stats;
  if (step_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunMetadata.step_stats)
}

// optional .tensorflow.CostGraphDef cost_graph = 2;
inline bool RunMetadata::has_cost_graph() const {
  return !_is_default_instance_ && cost_graph_ != NULL;
}
inline void RunMetadata::clear_cost_graph() {
  if (GetArenaNoVirtual() == NULL && cost_graph_ != NULL) delete cost_graph_;
  cost_graph_ = NULL;
}
inline const ::tensorflow::CostGraphDef& RunMetadata::cost_graph() const {
  // @@protoc_insertion_point(field_get:tensorflow.RunMetadata.cost_graph)
  return cost_graph_ != NULL ? *cost_graph_ : *default_instance_->cost_graph_;
}
inline ::tensorflow::CostGraphDef* RunMetadata::mutable_cost_graph() {
  
  if (cost_graph_ == NULL) {
    _slow_mutable_cost_graph();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RunMetadata.cost_graph)
  return cost_graph_;
}
inline ::tensorflow::CostGraphDef* RunMetadata::release_cost_graph() {
  // @@protoc_insertion_point(field_release:tensorflow.RunMetadata.cost_graph)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_cost_graph();
  } else {
    ::tensorflow::CostGraphDef* temp = cost_graph_;
    cost_graph_ = NULL;
    return temp;
  }
}
inline  void RunMetadata::set_allocated_cost_graph(::tensorflow::CostGraphDef* cost_graph) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cost_graph_;
  }
  if (cost_graph != NULL) {
    _slow_set_allocated_cost_graph(message_arena, &cost_graph);
  }
  cost_graph_ = cost_graph;
  if (cost_graph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RunMetadata.cost_graph)
}

// repeated .tensorflow.GraphDef partition_graphs = 3;
inline int RunMetadata::partition_graphs_size() const {
  return partition_graphs_.size();
}
inline void RunMetadata::clear_partition_graphs() {
  partition_graphs_.Clear();
}
inline const ::tensorflow::GraphDef& RunMetadata::partition_graphs(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.RunMetadata.partition_graphs)
  return partition_graphs_.Get(index);
}
inline ::tensorflow::GraphDef* RunMetadata::mutable_partition_graphs(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.RunMetadata.partition_graphs)
  return partition_graphs_.Mutable(index);
}
inline ::tensorflow::GraphDef* RunMetadata::add_partition_graphs() {
  // @@protoc_insertion_point(field_add:tensorflow.RunMetadata.partition_graphs)
  return partition_graphs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphDef >*
RunMetadata::mutable_partition_graphs() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.RunMetadata.partition_graphs)
  return &partition_graphs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphDef >&
RunMetadata::partition_graphs() const {
  // @@protoc_insertion_point(field_list:tensorflow.RunMetadata.partition_graphs)
  return partition_graphs_;
}

// repeated .tensorflow.RunMetadata.FunctionGraphs function_graphs = 4;
inline int RunMetadata::function_graphs_size() const {
  return function_graphs_.size();
}
inline void RunMetadata::clear_function_graphs() {
  function_graphs_.Clear();
}
inline const ::tensorflow::RunMetadata_FunctionGraphs& RunMetadata::function_graphs(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.RunMetadata.function_graphs)
  return function_graphs_.Get(index);
}
inline ::tensorflow::RunMetadata_FunctionGraphs* RunMetadata::mutable_function_graphs(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.RunMetadata.function_graphs)
  return function_graphs_.Mutable(index);
}
inline ::tensorflow::RunMetadata_FunctionGraphs* RunMetadata::add_function_graphs() {
  // @@protoc_insertion_point(field_add:tensorflow.RunMetadata.function_graphs)
  return function_graphs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::RunMetadata_FunctionGraphs >*
RunMetadata::mutable_function_graphs() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.RunMetadata.function_graphs)
  return &function_graphs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::RunMetadata_FunctionGraphs >&
RunMetadata::function_graphs() const {
  // @@protoc_insertion_point(field_list:tensorflow.RunMetadata.function_graphs)
  return function_graphs_;
}

// -------------------------------------------------------------------

// TensorConnection

// optional string from_tensor = 1;
inline void TensorConnection::clear_from_tensor() {
  from_tensor_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& TensorConnection::from_tensor() const {
  // @@protoc_insertion_point(field_get:tensorflow.TensorConnection.from_tensor)
  return from_tensor_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TensorConnection::set_from_tensor(const ::std::string& value) {
  
  from_tensor_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.TensorConnection.from_tensor)
}
inline void TensorConnection::set_from_tensor(const char* value) {
  
  from_tensor_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.TensorConnection.from_tensor)
}
inline void TensorConnection::set_from_tensor(const char* value,
    size_t size) {
  
  from_tensor_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.TensorConnection.from_tensor)
}
inline ::std::string* TensorConnection::mutable_from_tensor() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.TensorConnection.from_tensor)
  return from_tensor_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* TensorConnection::release_from_tensor() {
  // @@protoc_insertion_point(field_release:tensorflow.TensorConnection.from_tensor)
  
  return from_tensor_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* TensorConnection::unsafe_arena_release_from_tensor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.TensorConnection.from_tensor)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return from_tensor_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void TensorConnection::set_allocated_from_tensor(::std::string* from_tensor) {
  if (from_tensor != NULL) {
    
  } else {
    
  }
  from_tensor_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_tensor,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TensorConnection.from_tensor)
}
inline void TensorConnection::unsafe_arena_set_allocated_from_tensor(
    ::std::string* from_tensor) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (from_tensor != NULL) {
    
  } else {
    
  }
  from_tensor_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      from_tensor, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.TensorConnection.from_tensor)
}

// optional string to_tensor = 2;
inline void TensorConnection::clear_to_tensor() {
  to_tensor_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& TensorConnection::to_tensor() const {
  // @@protoc_insertion_point(field_get:tensorflow.TensorConnection.to_tensor)
  return to_tensor_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TensorConnection::set_to_tensor(const ::std::string& value) {
  
  to_tensor_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.TensorConnection.to_tensor)
}
inline void TensorConnection::set_to_tensor(const char* value) {
  
  to_tensor_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.TensorConnection.to_tensor)
}
inline void TensorConnection::set_to_tensor(const char* value,
    size_t size) {
  
  to_tensor_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.TensorConnection.to_tensor)
}
inline ::std::string* TensorConnection::mutable_to_tensor() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.TensorConnection.to_tensor)
  return to_tensor_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* TensorConnection::release_to_tensor() {
  // @@protoc_insertion_point(field_release:tensorflow.TensorConnection.to_tensor)
  
  return to_tensor_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* TensorConnection::unsafe_arena_release_to_tensor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.TensorConnection.to_tensor)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return to_tensor_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void TensorConnection::set_allocated_to_tensor(::std::string* to_tensor) {
  if (to_tensor != NULL) {
    
  } else {
    
  }
  to_tensor_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_tensor,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TensorConnection.to_tensor)
}
inline void TensorConnection::unsafe_arena_set_allocated_to_tensor(
    ::std::string* to_tensor) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (to_tensor != NULL) {
    
  } else {
    
  }
  to_tensor_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      to_tensor, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.TensorConnection.to_tensor)
}

// -------------------------------------------------------------------

// CallableOptions

// repeated string feed = 1;
inline int CallableOptions::feed_size() const {
  return feed_.size();
}
inline void CallableOptions::clear_feed() {
  feed_.Clear();
}
inline const ::std::string& CallableOptions::feed(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.CallableOptions.feed)
  return feed_.Get(index);
}
inline ::std::string* CallableOptions::mutable_feed(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.CallableOptions.feed)
  return feed_.Mutable(index);
}
inline void CallableOptions::set_feed(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.CallableOptions.feed)
  feed_.Mutable(index)->assign(value);
}
inline void CallableOptions::set_feed(int index, const char* value) {
  feed_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.CallableOptions.feed)
}
inline void CallableOptions::set_feed(int index, const char* value, size_t size) {
  feed_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.CallableOptions.feed)
}
inline ::std::string* CallableOptions::add_feed() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.CallableOptions.feed)
  return feed_.Add();
}
inline void CallableOptions::add_feed(const ::std::string& value) {
  feed_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.CallableOptions.feed)
}
inline void CallableOptions::add_feed(const char* value) {
  feed_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.CallableOptions.feed)
}
inline void CallableOptions::add_feed(const char* value, size_t size) {
  feed_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.CallableOptions.feed)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CallableOptions::feed() const {
  // @@protoc_insertion_point(field_list:tensorflow.CallableOptions.feed)
  return feed_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CallableOptions::mutable_feed() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.CallableOptions.feed)
  return &feed_;
}

// repeated string fetch = 2;
inline int CallableOptions::fetch_size() const {
  return fetch_.size();
}
inline void CallableOptions::clear_fetch() {
  fetch_.Clear();
}
inline const ::std::string& CallableOptions::fetch(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.CallableOptions.fetch)
  return fetch_.Get(index);
}
inline ::std::string* CallableOptions::mutable_fetch(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.CallableOptions.fetch)
  return fetch_.Mutable(index);
}
inline void CallableOptions::set_fetch(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.CallableOptions.fetch)
  fetch_.Mutable(index)->assign(value);
}
inline void CallableOptions::set_fetch(int index, const char* value) {
  fetch_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.CallableOptions.fetch)
}
inline void CallableOptions::set_fetch(int index, const char* value, size_t size) {
  fetch_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.CallableOptions.fetch)
}
inline ::std::string* CallableOptions::add_fetch() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.CallableOptions.fetch)
  return fetch_.Add();
}
inline void CallableOptions::add_fetch(const ::std::string& value) {
  fetch_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.CallableOptions.fetch)
}
inline void CallableOptions::add_fetch(const char* value) {
  fetch_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.CallableOptions.fetch)
}
inline void CallableOptions::add_fetch(const char* value, size_t size) {
  fetch_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.CallableOptions.fetch)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CallableOptions::fetch() const {
  // @@protoc_insertion_point(field_list:tensorflow.CallableOptions.fetch)
  return fetch_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CallableOptions::mutable_fetch() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.CallableOptions.fetch)
  return &fetch_;
}

// repeated string target = 3;
inline int CallableOptions::target_size() const {
  return target_.size();
}
inline void CallableOptions::clear_target() {
  target_.Clear();
}
inline const ::std::string& CallableOptions::target(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.CallableOptions.target)
  return target_.Get(index);
}
inline ::std::string* CallableOptions::mutable_target(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.CallableOptions.target)
  return target_.Mutable(index);
}
inline void CallableOptions::set_target(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.CallableOptions.target)
  target_.Mutable(index)->assign(value);
}
inline void CallableOptions::set_target(int index, const char* value) {
  target_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.CallableOptions.target)
}
inline void CallableOptions::set_target(int index, const char* value, size_t size) {
  target_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.CallableOptions.target)
}
inline ::std::string* CallableOptions::add_target() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.CallableOptions.target)
  return target_.Add();
}
inline void CallableOptions::add_target(const ::std::string& value) {
  target_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.CallableOptions.target)
}
inline void CallableOptions::add_target(const char* value) {
  target_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.CallableOptions.target)
}
inline void CallableOptions::add_target(const char* value, size_t size) {
  target_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.CallableOptions.target)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CallableOptions::target() const {
  // @@protoc_insertion_point(field_list:tensorflow.CallableOptions.target)
  return target_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CallableOptions::mutable_target() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.CallableOptions.target)
  return &target_;
}

// optional .tensorflow.RunOptions run_options = 4;
inline bool CallableOptions::has_run_options() const {
  return !_is_default_instance_ && run_options_ != NULL;
}
inline void CallableOptions::clear_run_options() {
  if (GetArenaNoVirtual() == NULL && run_options_ != NULL) delete run_options_;
  run_options_ = NULL;
}
inline const ::tensorflow::RunOptions& CallableOptions::run_options() const {
  // @@protoc_insertion_point(field_get:tensorflow.CallableOptions.run_options)
  return run_options_ != NULL ? *run_options_ : *default_instance_->run_options_;
}
inline ::tensorflow::RunOptions* CallableOptions::mutable_run_options() {
  
  if (run_options_ == NULL) {
    _slow_mutable_run_options();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.CallableOptions.run_options)
  return run_options_;
}
inline ::tensorflow::RunOptions* CallableOptions::release_run_options() {
  // @@protoc_insertion_point(field_release:tensorflow.CallableOptions.run_options)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_run_options();
  } else {
    ::tensorflow::RunOptions* temp = run_options_;
    run_options_ = NULL;
    return temp;
  }
}
inline  void CallableOptions::set_allocated_run_options(::tensorflow::RunOptions* run_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete run_options_;
  }
  if (run_options != NULL) {
    _slow_set_allocated_run_options(message_arena, &run_options);
  }
  run_options_ = run_options;
  if (run_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CallableOptions.run_options)
}

// repeated .tensorflow.TensorConnection tensor_connection = 5;
inline int CallableOptions::tensor_connection_size() const {
  return tensor_connection_.size();
}
inline void CallableOptions::clear_tensor_connection() {
  tensor_connection_.Clear();
}
inline const ::tensorflow::TensorConnection& CallableOptions::tensor_connection(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.CallableOptions.tensor_connection)
  return tensor_connection_.Get(index);
}
inline ::tensorflow::TensorConnection* CallableOptions::mutable_tensor_connection(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.CallableOptions.tensor_connection)
  return tensor_connection_.Mutable(index);
}
inline ::tensorflow::TensorConnection* CallableOptions::add_tensor_connection() {
  // @@protoc_insertion_point(field_add:tensorflow.CallableOptions.tensor_connection)
  return tensor_connection_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorConnection >*
CallableOptions::mutable_tensor_connection() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.CallableOptions.tensor_connection)
  return &tensor_connection_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorConnection >&
CallableOptions::tensor_connection() const {
  // @@protoc_insertion_point(field_list:tensorflow.CallableOptions.tensor_connection)
  return tensor_connection_;
}

// map<string, string> feed_devices = 6;
inline int CallableOptions::feed_devices_size() const {
  return feed_devices_.size();
}
inline void CallableOptions::clear_feed_devices() {
  feed_devices_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
CallableOptions::feed_devices() const {
  // @@protoc_insertion_point(field_map:tensorflow.CallableOptions.feed_devices)
  return feed_devices_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
CallableOptions::mutable_feed_devices() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.CallableOptions.feed_devices)
  return feed_devices_.MutableMap();
}

// map<string, string> fetch_devices = 7;
inline int CallableOptions::fetch_devices_size() const {
  return fetch_devices_.size();
}
inline void CallableOptions::clear_fetch_devices() {
  fetch_devices_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
CallableOptions::fetch_devices() const {
  // @@protoc_insertion_point(field_map:tensorflow.CallableOptions.fetch_devices)
  return fetch_devices_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
CallableOptions::mutable_fetch_devices() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.CallableOptions.fetch_devices)
  return fetch_devices_.MutableMap();
}

// optional bool fetch_skip_sync = 8;
inline void CallableOptions::clear_fetch_skip_sync() {
  fetch_skip_sync_ = false;
}
inline bool CallableOptions::fetch_skip_sync() const {
  // @@protoc_insertion_point(field_get:tensorflow.CallableOptions.fetch_skip_sync)
  return fetch_skip_sync_;
}
inline void CallableOptions::set_fetch_skip_sync(bool value) {
  
  fetch_skip_sync_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CallableOptions.fetch_skip_sync)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::tensorflow::OptimizerOptions_Level> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tensorflow::OptimizerOptions_Level>() {
  return ::tensorflow::OptimizerOptions_Level_descriptor();
}
template <> struct is_proto_enum< ::tensorflow::OptimizerOptions_GlobalJitLevel> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tensorflow::OptimizerOptions_GlobalJitLevel>() {
  return ::tensorflow::OptimizerOptions_GlobalJitLevel_descriptor();
}
template <> struct is_proto_enum< ::tensorflow::RunOptions_TraceLevel> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tensorflow::RunOptions_TraceLevel>() {
  return ::tensorflow::RunOptions_TraceLevel_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto__INCLUDED
