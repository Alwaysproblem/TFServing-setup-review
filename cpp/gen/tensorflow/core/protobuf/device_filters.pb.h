// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/device_filters.proto

#ifndef PROTOBUF_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto__INCLUDED
#define PROTOBUF_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto();
void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto();
void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto();

class ClusterDeviceFilters;
class JobDeviceFilters;
class TaskDeviceFilters;

// ===================================================================

class TaskDeviceFilters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.TaskDeviceFilters) */ {
 public:
  TaskDeviceFilters();
  virtual ~TaskDeviceFilters();

  TaskDeviceFilters(const TaskDeviceFilters& from);

  inline TaskDeviceFilters& operator=(const TaskDeviceFilters& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskDeviceFilters& default_instance();

  void UnsafeArenaSwap(TaskDeviceFilters* other);
  void Swap(TaskDeviceFilters* other);

  // implements Message ----------------------------------------------

  inline TaskDeviceFilters* New() const { return New(NULL); }

  TaskDeviceFilters* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskDeviceFilters& from);
  void MergeFrom(const TaskDeviceFilters& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskDeviceFilters* other);
  protected:
  explicit TaskDeviceFilters(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string device_filters = 1;
  int device_filters_size() const;
  void clear_device_filters();
  static const int kDeviceFiltersFieldNumber = 1;
  const ::std::string& device_filters(int index) const;
  ::std::string* mutable_device_filters(int index);
  void set_device_filters(int index, const ::std::string& value);
  void set_device_filters(int index, const char* value);
  void set_device_filters(int index, const char* value, size_t size);
  ::std::string* add_device_filters();
  void add_device_filters(const ::std::string& value);
  void add_device_filters(const char* value);
  void add_device_filters(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& device_filters() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_device_filters();

  // @@protoc_insertion_point(class_scope:tensorflow.TaskDeviceFilters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> device_filters_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto();

  void InitAsDefaultInstance();
  static TaskDeviceFilters* default_instance_;
};
// -------------------------------------------------------------------

class JobDeviceFilters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.JobDeviceFilters) */ {
 public:
  JobDeviceFilters();
  virtual ~JobDeviceFilters();

  JobDeviceFilters(const JobDeviceFilters& from);

  inline JobDeviceFilters& operator=(const JobDeviceFilters& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const JobDeviceFilters& default_instance();

  void UnsafeArenaSwap(JobDeviceFilters* other);
  void Swap(JobDeviceFilters* other);

  // implements Message ----------------------------------------------

  inline JobDeviceFilters* New() const { return New(NULL); }

  JobDeviceFilters* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JobDeviceFilters& from);
  void MergeFrom(const JobDeviceFilters& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(JobDeviceFilters* other);
  protected:
  explicit JobDeviceFilters(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  ::std::string* unsafe_arena_release_name();
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // map<int32, .tensorflow.TaskDeviceFilters> tasks = 2;
  int tasks_size() const;
  void clear_tasks();
  static const int kTasksFieldNumber = 2;
  const ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::TaskDeviceFilters >&
      tasks() const;
  ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::TaskDeviceFilters >*
      mutable_tasks();

  // @@protoc_insertion_point(class_scope:tensorflow.JobDeviceFilters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::google::protobuf::int32, ::tensorflow::TaskDeviceFilters,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      JobDeviceFilters_TasksEntry;
  ::google::protobuf::internal::MapField<
      ::google::protobuf::int32, ::tensorflow::TaskDeviceFilters,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > tasks_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto();

  void InitAsDefaultInstance();
  static JobDeviceFilters* default_instance_;
};
// -------------------------------------------------------------------

class ClusterDeviceFilters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.ClusterDeviceFilters) */ {
 public:
  ClusterDeviceFilters();
  virtual ~ClusterDeviceFilters();

  ClusterDeviceFilters(const ClusterDeviceFilters& from);

  inline ClusterDeviceFilters& operator=(const ClusterDeviceFilters& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClusterDeviceFilters& default_instance();

  void UnsafeArenaSwap(ClusterDeviceFilters* other);
  void Swap(ClusterDeviceFilters* other);

  // implements Message ----------------------------------------------

  inline ClusterDeviceFilters* New() const { return New(NULL); }

  ClusterDeviceFilters* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClusterDeviceFilters& from);
  void MergeFrom(const ClusterDeviceFilters& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClusterDeviceFilters* other);
  protected:
  explicit ClusterDeviceFilters(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tensorflow.JobDeviceFilters jobs = 1;
  int jobs_size() const;
  void clear_jobs();
  static const int kJobsFieldNumber = 1;
  const ::tensorflow::JobDeviceFilters& jobs(int index) const;
  ::tensorflow::JobDeviceFilters* mutable_jobs(int index);
  ::tensorflow::JobDeviceFilters* add_jobs();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::JobDeviceFilters >*
      mutable_jobs();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::JobDeviceFilters >&
      jobs() const;

  // @@protoc_insertion_point(class_scope:tensorflow.ClusterDeviceFilters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::JobDeviceFilters > jobs_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto();
  friend void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto();

  void InitAsDefaultInstance();
  static ClusterDeviceFilters* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskDeviceFilters

// repeated string device_filters = 1;
inline int TaskDeviceFilters::device_filters_size() const {
  return device_filters_.size();
}
inline void TaskDeviceFilters::clear_device_filters() {
  device_filters_.Clear();
}
inline const ::std::string& TaskDeviceFilters::device_filters(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.TaskDeviceFilters.device_filters)
  return device_filters_.Get(index);
}
inline ::std::string* TaskDeviceFilters::mutable_device_filters(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.TaskDeviceFilters.device_filters)
  return device_filters_.Mutable(index);
}
inline void TaskDeviceFilters::set_device_filters(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.TaskDeviceFilters.device_filters)
  device_filters_.Mutable(index)->assign(value);
}
inline void TaskDeviceFilters::set_device_filters(int index, const char* value) {
  device_filters_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.TaskDeviceFilters.device_filters)
}
inline void TaskDeviceFilters::set_device_filters(int index, const char* value, size_t size) {
  device_filters_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.TaskDeviceFilters.device_filters)
}
inline ::std::string* TaskDeviceFilters::add_device_filters() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.TaskDeviceFilters.device_filters)
  return device_filters_.Add();
}
inline void TaskDeviceFilters::add_device_filters(const ::std::string& value) {
  device_filters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.TaskDeviceFilters.device_filters)
}
inline void TaskDeviceFilters::add_device_filters(const char* value) {
  device_filters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.TaskDeviceFilters.device_filters)
}
inline void TaskDeviceFilters::add_device_filters(const char* value, size_t size) {
  device_filters_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.TaskDeviceFilters.device_filters)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TaskDeviceFilters::device_filters() const {
  // @@protoc_insertion_point(field_list:tensorflow.TaskDeviceFilters.device_filters)
  return device_filters_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TaskDeviceFilters::mutable_device_filters() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.TaskDeviceFilters.device_filters)
  return &device_filters_;
}

// -------------------------------------------------------------------

// JobDeviceFilters

// optional string name = 1;
inline void JobDeviceFilters::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& JobDeviceFilters::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.JobDeviceFilters.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobDeviceFilters::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.JobDeviceFilters.name)
}
inline void JobDeviceFilters::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.JobDeviceFilters.name)
}
inline void JobDeviceFilters::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.JobDeviceFilters.name)
}
inline ::std::string* JobDeviceFilters::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.JobDeviceFilters.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* JobDeviceFilters::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.JobDeviceFilters.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* JobDeviceFilters::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.JobDeviceFilters.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void JobDeviceFilters::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.JobDeviceFilters.name)
}
inline void JobDeviceFilters::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.JobDeviceFilters.name)
}

// map<int32, .tensorflow.TaskDeviceFilters> tasks = 2;
inline int JobDeviceFilters::tasks_size() const {
  return tasks_.size();
}
inline void JobDeviceFilters::clear_tasks() {
  tasks_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::TaskDeviceFilters >&
JobDeviceFilters::tasks() const {
  // @@protoc_insertion_point(field_map:tensorflow.JobDeviceFilters.tasks)
  return tasks_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::TaskDeviceFilters >*
JobDeviceFilters::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.JobDeviceFilters.tasks)
  return tasks_.MutableMap();
}

// -------------------------------------------------------------------

// ClusterDeviceFilters

// repeated .tensorflow.JobDeviceFilters jobs = 1;
inline int ClusterDeviceFilters::jobs_size() const {
  return jobs_.size();
}
inline void ClusterDeviceFilters::clear_jobs() {
  jobs_.Clear();
}
inline const ::tensorflow::JobDeviceFilters& ClusterDeviceFilters::jobs(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.ClusterDeviceFilters.jobs)
  return jobs_.Get(index);
}
inline ::tensorflow::JobDeviceFilters* ClusterDeviceFilters::mutable_jobs(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.ClusterDeviceFilters.jobs)
  return jobs_.Mutable(index);
}
inline ::tensorflow::JobDeviceFilters* ClusterDeviceFilters::add_jobs() {
  // @@protoc_insertion_point(field_add:tensorflow.ClusterDeviceFilters.jobs)
  return jobs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::JobDeviceFilters >*
ClusterDeviceFilters::mutable_jobs() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.ClusterDeviceFilters.jobs)
  return &jobs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::JobDeviceFilters >&
ClusterDeviceFilters::jobs() const {
  // @@protoc_insertion_point(field_list:tensorflow.ClusterDeviceFilters.jobs)
  return jobs_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto__INCLUDED
