// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/graph_transfer_info.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/framework/graph_transfer_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {

namespace {

const ::google::protobuf::Descriptor* GraphTransferNodeInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GraphTransferNodeInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GraphTransferNodeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GraphTransferNodeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GraphTransferConstNodeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GraphTransferConstNodeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GraphTransferNodeInputInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GraphTransferNodeInputInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GraphTransferNodeOutputInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GraphTransferNodeOutputInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GraphTransferGraphInputNodeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GraphTransferGraphInputNodeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GraphTransferGraphOutputNodeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GraphTransferGraphOutputNodeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GraphTransferInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GraphTransferInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GraphTransferInfo_Destination_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto() {
  protobuf_AddDesc_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow/core/framework/graph_transfer_info.proto");
  GOOGLE_CHECK(file != NULL);
  GraphTransferNodeInput_descriptor_ = file->message_type(0);
  static const int GraphTransferNodeInput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferNodeInput, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferNodeInput, output_port_),
  };
  GraphTransferNodeInput_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GraphTransferNodeInput_descriptor_,
      GraphTransferNodeInput::default_instance_,
      GraphTransferNodeInput_offsets_,
      -1,
      -1,
      -1,
      sizeof(GraphTransferNodeInput),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferNodeInput, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferNodeInput, _is_default_instance_));
  GraphTransferNodeInfo_descriptor_ = file->message_type(1);
  static const int GraphTransferNodeInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferNodeInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferNodeInfo, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferNodeInfo, type_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferNodeInfo, soc_op_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferNodeInfo, padding_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferNodeInfo, input_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferNodeInfo, output_count_),
  };
  GraphTransferNodeInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GraphTransferNodeInfo_descriptor_,
      GraphTransferNodeInfo::default_instance_,
      GraphTransferNodeInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(GraphTransferNodeInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferNodeInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferNodeInfo, _is_default_instance_));
  GraphTransferConstNodeInfo_descriptor_ = file->message_type(2);
  static const int GraphTransferConstNodeInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferConstNodeInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferConstNodeInfo, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferConstNodeInfo, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferConstNodeInfo, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferConstNodeInfo, dtype_),
  };
  GraphTransferConstNodeInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GraphTransferConstNodeInfo_descriptor_,
      GraphTransferConstNodeInfo::default_instance_,
      GraphTransferConstNodeInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(GraphTransferConstNodeInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferConstNodeInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferConstNodeInfo, _is_default_instance_));
  GraphTransferNodeInputInfo_descriptor_ = file->message_type(3);
  static const int GraphTransferNodeInputInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferNodeInputInfo, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferNodeInputInfo, node_input_),
  };
  GraphTransferNodeInputInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GraphTransferNodeInputInfo_descriptor_,
      GraphTransferNodeInputInfo::default_instance_,
      GraphTransferNodeInputInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(GraphTransferNodeInputInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferNodeInputInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferNodeInputInfo, _is_default_instance_));
  GraphTransferNodeOutputInfo_descriptor_ = file->message_type(4);
  static const int GraphTransferNodeOutputInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferNodeOutputInfo, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferNodeOutputInfo, max_byte_size_),
  };
  GraphTransferNodeOutputInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GraphTransferNodeOutputInfo_descriptor_,
      GraphTransferNodeOutputInfo::default_instance_,
      GraphTransferNodeOutputInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(GraphTransferNodeOutputInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferNodeOutputInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferNodeOutputInfo, _is_default_instance_));
  GraphTransferGraphInputNodeInfo_descriptor_ = file->message_type(5);
  static const int GraphTransferGraphInputNodeInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferGraphInputNodeInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferGraphInputNodeInfo, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferGraphInputNodeInfo, dtype_),
  };
  GraphTransferGraphInputNodeInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GraphTransferGraphInputNodeInfo_descriptor_,
      GraphTransferGraphInputNodeInfo::default_instance_,
      GraphTransferGraphInputNodeInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(GraphTransferGraphInputNodeInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferGraphInputNodeInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferGraphInputNodeInfo, _is_default_instance_));
  GraphTransferGraphOutputNodeInfo_descriptor_ = file->message_type(6);
  static const int GraphTransferGraphOutputNodeInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferGraphOutputNodeInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferGraphOutputNodeInfo, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferGraphOutputNodeInfo, dtype_),
  };
  GraphTransferGraphOutputNodeInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GraphTransferGraphOutputNodeInfo_descriptor_,
      GraphTransferGraphOutputNodeInfo::default_instance_,
      GraphTransferGraphOutputNodeInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(GraphTransferGraphOutputNodeInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferGraphOutputNodeInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferGraphOutputNodeInfo, _is_default_instance_));
  GraphTransferInfo_descriptor_ = file->message_type(7);
  static const int GraphTransferInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo, node_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo, const_node_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo, node_input_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo, node_output_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo, graph_input_node_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo, graph_output_node_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo, destination_),
  };
  GraphTransferInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GraphTransferInfo_descriptor_,
      GraphTransferInfo::default_instance_,
      GraphTransferInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(GraphTransferInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphTransferInfo, _is_default_instance_));
  GraphTransferInfo_Destination_descriptor_ = GraphTransferInfo_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GraphTransferNodeInput_descriptor_, &GraphTransferNodeInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GraphTransferNodeInfo_descriptor_, &GraphTransferNodeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GraphTransferConstNodeInfo_descriptor_, &GraphTransferConstNodeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GraphTransferNodeInputInfo_descriptor_, &GraphTransferNodeInputInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GraphTransferNodeOutputInfo_descriptor_, &GraphTransferNodeOutputInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GraphTransferGraphInputNodeInfo_descriptor_, &GraphTransferGraphInputNodeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GraphTransferGraphOutputNodeInfo_descriptor_, &GraphTransferGraphOutputNodeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GraphTransferInfo_descriptor_, &GraphTransferInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto() {
  delete GraphTransferNodeInput::default_instance_;
  delete GraphTransferNodeInput_reflection_;
  delete GraphTransferNodeInfo::default_instance_;
  delete GraphTransferNodeInfo_reflection_;
  delete GraphTransferConstNodeInfo::default_instance_;
  delete GraphTransferConstNodeInfo_reflection_;
  delete GraphTransferNodeInputInfo::default_instance_;
  delete GraphTransferNodeInputInfo_reflection_;
  delete GraphTransferNodeOutputInfo::default_instance_;
  delete GraphTransferNodeOutputInfo_reflection_;
  delete GraphTransferGraphInputNodeInfo::default_instance_;
  delete GraphTransferGraphInputNodeInfo_reflection_;
  delete GraphTransferGraphOutputNodeInfo::default_instance_;
  delete GraphTransferGraphOutputNodeInfo_reflection_;
  delete GraphTransferInfo::default_instance_;
  delete GraphTransferInfo_reflection_;
}

void protobuf_AddDesc_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n3tensorflow/core/framework/graph_transf"
    "er_info.proto\022\ntensorflow\032%tensorflow/co"
    "re/framework/types.proto\">\n\026GraphTransfe"
    "rNodeInput\022\017\n\007node_id\030\001 \001(\005\022\023\n\013output_po"
    "rt\030\002 \001(\005\"\233\001\n\025GraphTransferNodeInfo\022\014\n\004na"
    "me\030\001 \001(\t\022\017\n\007node_id\030\002 \001(\005\022\021\n\ttype_name\030\003"
    " \001(\t\022\021\n\tsoc_op_id\030\004 \001(\005\022\022\n\npadding_id\030\005 "
    "\001(\005\022\023\n\013input_count\030\006 \001(\005\022\024\n\014output_count"
    "\030\007 \001(\005\"}\n\032GraphTransferConstNodeInfo\022\014\n\004"
    "name\030\001 \001(\t\022\017\n\007node_id\030\002 \001(\005\022\r\n\005shape\030\003 \003"
    "(\003\022\014\n\004data\030\004 \001(\014\022#\n\005dtype\030\005 \001(\0162\024.tensor"
    "flow.DataType\"e\n\032GraphTransferNodeInputI"
    "nfo\022\017\n\007node_id\030\001 \001(\005\0226\n\nnode_input\030\002 \003(\013"
    "2\".tensorflow.GraphTransferNodeInput\"E\n\033"
    "GraphTransferNodeOutputInfo\022\017\n\007node_id\030\001"
    " \001(\005\022\025\n\rmax_byte_size\030\002 \003(\005\"c\n\037GraphTran"
    "sferGraphInputNodeInfo\022\014\n\004name\030\001 \001(\t\022\r\n\005"
    "shape\030\002 \003(\003\022#\n\005dtype\030\003 \001(\0162\024.tensorflow."
    "DataType\"d\n GraphTransferGraphOutputNode"
    "Info\022\014\n\004name\030\001 \001(\t\022\r\n\005shape\030\002 \003(\003\022#\n\005dty"
    "pe\030\003 \001(\0162\024.tensorflow.DataType\"\215\004\n\021Graph"
    "TransferInfo\0224\n\tnode_info\030\001 \003(\0132!.tensor"
    "flow.GraphTransferNodeInfo\022\?\n\017const_node"
    "_info\030\002 \003(\0132&.tensorflow.GraphTransferCo"
    "nstNodeInfo\022\?\n\017node_input_info\030\003 \003(\0132&.t"
    "ensorflow.GraphTransferNodeInputInfo\022A\n\020"
    "node_output_info\030\004 \003(\0132\'.tensorflow.Grap"
    "hTransferNodeOutputInfo\022J\n\025graph_input_n"
    "ode_info\030\005 \003(\0132+.tensorflow.GraphTransfe"
    "rGraphInputNodeInfo\022L\n\026graph_output_node"
    "_info\030\006 \003(\0132,.tensorflow.GraphTransferGr"
    "aphOutputNodeInfo\022>\n\013destination\030\007 \001(\0162)"
    ".tensorflow.GraphTransferInfo.Destinatio"
    "n\"#\n\013Destination\022\007\n\003NOP\020\000\022\013\n\007HEXAGON\020\001B\223"
    "\001\n\030org.tensorflow.frameworkB\026GraphTransf"
    "erInfoProtoP\001ZZgithub.com/tensorflow/ten"
    "sorflow/tensorflow/go/core/framework/gra"
    "ph_transfer_info_go_proto\370\001\001b\006proto3", 1516);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/framework/graph_transfer_info.proto", &protobuf_RegisterTypes);
  GraphTransferNodeInput::default_instance_ = new GraphTransferNodeInput();
  GraphTransferNodeInfo::default_instance_ = new GraphTransferNodeInfo();
  GraphTransferConstNodeInfo::default_instance_ = new GraphTransferConstNodeInfo();
  GraphTransferNodeInputInfo::default_instance_ = new GraphTransferNodeInputInfo();
  GraphTransferNodeOutputInfo::default_instance_ = new GraphTransferNodeOutputInfo();
  GraphTransferGraphInputNodeInfo::default_instance_ = new GraphTransferGraphInputNodeInfo();
  GraphTransferGraphOutputNodeInfo::default_instance_ = new GraphTransferGraphOutputNodeInfo();
  GraphTransferInfo::default_instance_ = new GraphTransferInfo();
  GraphTransferNodeInput::default_instance_->InitAsDefaultInstance();
  GraphTransferNodeInfo::default_instance_->InitAsDefaultInstance();
  GraphTransferConstNodeInfo::default_instance_->InitAsDefaultInstance();
  GraphTransferNodeInputInfo::default_instance_->InitAsDefaultInstance();
  GraphTransferNodeOutputInfo::default_instance_->InitAsDefaultInstance();
  GraphTransferGraphInputNodeInfo::default_instance_->InitAsDefaultInstance();
  GraphTransferGraphOutputNodeInfo::default_instance_->InitAsDefaultInstance();
  GraphTransferInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto {
  StaticDescriptorInitializer_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto() {
    protobuf_AddDesc_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto();
  }
} static_descriptor_initializer_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GraphTransferNodeInput::kNodeIdFieldNumber;
const int GraphTransferNodeInput::kOutputPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GraphTransferNodeInput::GraphTransferNodeInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GraphTransferNodeInput)
}

GraphTransferNodeInput::GraphTransferNodeInput(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphTransferNodeInput)
}

void GraphTransferNodeInput::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GraphTransferNodeInput::GraphTransferNodeInput(const GraphTransferNodeInput& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphTransferNodeInput)
}

void GraphTransferNodeInput::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  node_id_ = 0;
  output_port_ = 0;
}

GraphTransferNodeInput::~GraphTransferNodeInput() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphTransferNodeInput)
  SharedDtor();
}

void GraphTransferNodeInput::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void GraphTransferNodeInput::ArenaDtor(void* object) {
  GraphTransferNodeInput* _this = reinterpret_cast< GraphTransferNodeInput* >(object);
  (void)_this;
}
void GraphTransferNodeInput::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GraphTransferNodeInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GraphTransferNodeInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GraphTransferNodeInput_descriptor_;
}

const GraphTransferNodeInput& GraphTransferNodeInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto();
  return *default_instance_;
}

GraphTransferNodeInput* GraphTransferNodeInput::default_instance_ = NULL;

GraphTransferNodeInput* GraphTransferNodeInput::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GraphTransferNodeInput>(arena);
}

void GraphTransferNodeInput::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphTransferNodeInput)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GraphTransferNodeInput, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GraphTransferNodeInput*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(node_id_, output_port_);

#undef ZR_HELPER_
#undef ZR_

}

bool GraphTransferNodeInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GraphTransferNodeInput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 node_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_output_port;
        break;
      }

      // optional int32 output_port = 2;
      case 2: {
        if (tag == 16) {
         parse_output_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &output_port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GraphTransferNodeInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GraphTransferNodeInput)
  return false;
#undef DO_
}

void GraphTransferNodeInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GraphTransferNodeInput)
  // optional int32 node_id = 1;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node_id(), output);
  }

  // optional int32 output_port = 2;
  if (this->output_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->output_port(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.GraphTransferNodeInput)
}

::google::protobuf::uint8* GraphTransferNodeInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphTransferNodeInput)
  // optional int32 node_id = 1;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->node_id(), target);
  }

  // optional int32 output_port = 2;
  if (this->output_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->output_port(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphTransferNodeInput)
  return target;
}

int GraphTransferNodeInput::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphTransferNodeInput)
  int total_size = 0;

  // optional int32 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_id());
  }

  // optional int32 output_port = 2;
  if (this->output_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->output_port());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GraphTransferNodeInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GraphTransferNodeInput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GraphTransferNodeInput* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GraphTransferNodeInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GraphTransferNodeInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GraphTransferNodeInput)
    MergeFrom(*source);
  }
}

void GraphTransferNodeInput::MergeFrom(const GraphTransferNodeInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphTransferNodeInput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
  if (from.output_port() != 0) {
    set_output_port(from.output_port());
  }
}

void GraphTransferNodeInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GraphTransferNodeInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphTransferNodeInput::CopyFrom(const GraphTransferNodeInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphTransferNodeInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphTransferNodeInput::IsInitialized() const {

  return true;
}

void GraphTransferNodeInput::Swap(GraphTransferNodeInput* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GraphTransferNodeInput temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void GraphTransferNodeInput::UnsafeArenaSwap(GraphTransferNodeInput* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GraphTransferNodeInput::InternalSwap(GraphTransferNodeInput* other) {
  std::swap(node_id_, other->node_id_);
  std::swap(output_port_, other->output_port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GraphTransferNodeInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GraphTransferNodeInput_descriptor_;
  metadata.reflection = GraphTransferNodeInput_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GraphTransferNodeInput

// optional int32 node_id = 1;
void GraphTransferNodeInput::clear_node_id() {
  node_id_ = 0;
}
 ::google::protobuf::int32 GraphTransferNodeInput::node_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferNodeInput.node_id)
  return node_id_;
}
 void GraphTransferNodeInput::set_node_id(::google::protobuf::int32 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferNodeInput.node_id)
}

// optional int32 output_port = 2;
void GraphTransferNodeInput::clear_output_port() {
  output_port_ = 0;
}
 ::google::protobuf::int32 GraphTransferNodeInput::output_port() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferNodeInput.output_port)
  return output_port_;
}
 void GraphTransferNodeInput::set_output_port(::google::protobuf::int32 value) {
  
  output_port_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferNodeInput.output_port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GraphTransferNodeInfo::kNameFieldNumber;
const int GraphTransferNodeInfo::kNodeIdFieldNumber;
const int GraphTransferNodeInfo::kTypeNameFieldNumber;
const int GraphTransferNodeInfo::kSocOpIdFieldNumber;
const int GraphTransferNodeInfo::kPaddingIdFieldNumber;
const int GraphTransferNodeInfo::kInputCountFieldNumber;
const int GraphTransferNodeInfo::kOutputCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GraphTransferNodeInfo::GraphTransferNodeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GraphTransferNodeInfo)
}

GraphTransferNodeInfo::GraphTransferNodeInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphTransferNodeInfo)
}

void GraphTransferNodeInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GraphTransferNodeInfo::GraphTransferNodeInfo(const GraphTransferNodeInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphTransferNodeInfo)
}

void GraphTransferNodeInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_id_ = 0;
  type_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  soc_op_id_ = 0;
  padding_id_ = 0;
  input_count_ = 0;
  output_count_ = 0;
}

GraphTransferNodeInfo::~GraphTransferNodeInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphTransferNodeInfo)
  SharedDtor();
}

void GraphTransferNodeInfo::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  type_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void GraphTransferNodeInfo::ArenaDtor(void* object) {
  GraphTransferNodeInfo* _this = reinterpret_cast< GraphTransferNodeInfo* >(object);
  (void)_this;
}
void GraphTransferNodeInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GraphTransferNodeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GraphTransferNodeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GraphTransferNodeInfo_descriptor_;
}

const GraphTransferNodeInfo& GraphTransferNodeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto();
  return *default_instance_;
}

GraphTransferNodeInfo* GraphTransferNodeInfo::default_instance_ = NULL;

GraphTransferNodeInfo* GraphTransferNodeInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GraphTransferNodeInfo>(arena);
}

void GraphTransferNodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphTransferNodeInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GraphTransferNodeInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GraphTransferNodeInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(node_id_, output_count_);
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  type_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());

#undef ZR_HELPER_
#undef ZR_

}

bool GraphTransferNodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GraphTransferNodeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.GraphTransferNodeInfo.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_node_id;
        break;
      }

      // optional int32 node_id = 2;
      case 2: {
        if (tag == 16) {
         parse_node_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_type_name;
        break;
      }

      // optional string type_name = 3;
      case 3: {
        if (tag == 26) {
         parse_type_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type_name().data(), this->type_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.GraphTransferNodeInfo.type_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_soc_op_id;
        break;
      }

      // optional int32 soc_op_id = 4;
      case 4: {
        if (tag == 32) {
         parse_soc_op_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soc_op_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_padding_id;
        break;
      }

      // optional int32 padding_id = 5;
      case 5: {
        if (tag == 40) {
         parse_padding_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &padding_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_input_count;
        break;
      }

      // optional int32 input_count = 6;
      case 6: {
        if (tag == 48) {
         parse_input_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &input_count_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_output_count;
        break;
      }

      // optional int32 output_count = 7;
      case 7: {
        if (tag == 56) {
         parse_output_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &output_count_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GraphTransferNodeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GraphTransferNodeInfo)
  return false;
#undef DO_
}

void GraphTransferNodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GraphTransferNodeInfo)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphTransferNodeInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 node_id = 2;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->node_id(), output);
  }

  // optional string type_name = 3;
  if (this->type_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type_name().data(), this->type_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphTransferNodeInfo.type_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->type_name(), output);
  }

  // optional int32 soc_op_id = 4;
  if (this->soc_op_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->soc_op_id(), output);
  }

  // optional int32 padding_id = 5;
  if (this->padding_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->padding_id(), output);
  }

  // optional int32 input_count = 6;
  if (this->input_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->input_count(), output);
  }

  // optional int32 output_count = 7;
  if (this->output_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->output_count(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.GraphTransferNodeInfo)
}

::google::protobuf::uint8* GraphTransferNodeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphTransferNodeInfo)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphTransferNodeInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 node_id = 2;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->node_id(), target);
  }

  // optional string type_name = 3;
  if (this->type_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type_name().data(), this->type_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphTransferNodeInfo.type_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type_name(), target);
  }

  // optional int32 soc_op_id = 4;
  if (this->soc_op_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->soc_op_id(), target);
  }

  // optional int32 padding_id = 5;
  if (this->padding_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->padding_id(), target);
  }

  // optional int32 input_count = 6;
  if (this->input_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->input_count(), target);
  }

  // optional int32 output_count = 7;
  if (this->output_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->output_count(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphTransferNodeInfo)
  return target;
}

int GraphTransferNodeInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphTransferNodeInfo)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional int32 node_id = 2;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_id());
  }

  // optional string type_name = 3;
  if (this->type_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type_name());
  }

  // optional int32 soc_op_id = 4;
  if (this->soc_op_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->soc_op_id());
  }

  // optional int32 padding_id = 5;
  if (this->padding_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->padding_id());
  }

  // optional int32 input_count = 6;
  if (this->input_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->input_count());
  }

  // optional int32 output_count = 7;
  if (this->output_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->output_count());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GraphTransferNodeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GraphTransferNodeInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GraphTransferNodeInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GraphTransferNodeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GraphTransferNodeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GraphTransferNodeInfo)
    MergeFrom(*source);
  }
}

void GraphTransferNodeInfo::MergeFrom(const GraphTransferNodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphTransferNodeInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
  if (from.type_name().size() > 0) {
    set_type_name(from.type_name());
  }
  if (from.soc_op_id() != 0) {
    set_soc_op_id(from.soc_op_id());
  }
  if (from.padding_id() != 0) {
    set_padding_id(from.padding_id());
  }
  if (from.input_count() != 0) {
    set_input_count(from.input_count());
  }
  if (from.output_count() != 0) {
    set_output_count(from.output_count());
  }
}

void GraphTransferNodeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GraphTransferNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphTransferNodeInfo::CopyFrom(const GraphTransferNodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphTransferNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphTransferNodeInfo::IsInitialized() const {

  return true;
}

void GraphTransferNodeInfo::Swap(GraphTransferNodeInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GraphTransferNodeInfo temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void GraphTransferNodeInfo::UnsafeArenaSwap(GraphTransferNodeInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GraphTransferNodeInfo::InternalSwap(GraphTransferNodeInfo* other) {
  name_.Swap(&other->name_);
  std::swap(node_id_, other->node_id_);
  type_name_.Swap(&other->type_name_);
  std::swap(soc_op_id_, other->soc_op_id_);
  std::swap(padding_id_, other->padding_id_);
  std::swap(input_count_, other->input_count_);
  std::swap(output_count_, other->output_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GraphTransferNodeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GraphTransferNodeInfo_descriptor_;
  metadata.reflection = GraphTransferNodeInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GraphTransferNodeInfo

// optional string name = 1;
void GraphTransferNodeInfo::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& GraphTransferNodeInfo::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferNodeInfo.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GraphTransferNodeInfo::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferNodeInfo.name)
}
 void GraphTransferNodeInfo::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.GraphTransferNodeInfo.name)
}
 void GraphTransferNodeInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.GraphTransferNodeInfo.name)
}
 ::std::string* GraphTransferNodeInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphTransferNodeInfo.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* GraphTransferNodeInfo::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.GraphTransferNodeInfo.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* GraphTransferNodeInfo::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.GraphTransferNodeInfo.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void GraphTransferNodeInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GraphTransferNodeInfo.name)
}
 void GraphTransferNodeInfo::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GraphTransferNodeInfo.name)
}

// optional int32 node_id = 2;
void GraphTransferNodeInfo::clear_node_id() {
  node_id_ = 0;
}
 ::google::protobuf::int32 GraphTransferNodeInfo::node_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferNodeInfo.node_id)
  return node_id_;
}
 void GraphTransferNodeInfo::set_node_id(::google::protobuf::int32 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferNodeInfo.node_id)
}

// optional string type_name = 3;
void GraphTransferNodeInfo::clear_type_name() {
  type_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& GraphTransferNodeInfo::type_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferNodeInfo.type_name)
  return type_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GraphTransferNodeInfo::set_type_name(const ::std::string& value) {
  
  type_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferNodeInfo.type_name)
}
 void GraphTransferNodeInfo::set_type_name(const char* value) {
  
  type_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.GraphTransferNodeInfo.type_name)
}
 void GraphTransferNodeInfo::set_type_name(const char* value,
    size_t size) {
  
  type_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.GraphTransferNodeInfo.type_name)
}
 ::std::string* GraphTransferNodeInfo::mutable_type_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphTransferNodeInfo.type_name)
  return type_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* GraphTransferNodeInfo::release_type_name() {
  // @@protoc_insertion_point(field_release:tensorflow.GraphTransferNodeInfo.type_name)
  
  return type_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* GraphTransferNodeInfo::unsafe_arena_release_type_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.GraphTransferNodeInfo.type_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return type_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void GraphTransferNodeInfo::set_allocated_type_name(::std::string* type_name) {
  if (type_name != NULL) {
    
  } else {
    
  }
  type_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GraphTransferNodeInfo.type_name)
}
 void GraphTransferNodeInfo::unsafe_arena_set_allocated_type_name(
    ::std::string* type_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (type_name != NULL) {
    
  } else {
    
  }
  type_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      type_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GraphTransferNodeInfo.type_name)
}

// optional int32 soc_op_id = 4;
void GraphTransferNodeInfo::clear_soc_op_id() {
  soc_op_id_ = 0;
}
 ::google::protobuf::int32 GraphTransferNodeInfo::soc_op_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferNodeInfo.soc_op_id)
  return soc_op_id_;
}
 void GraphTransferNodeInfo::set_soc_op_id(::google::protobuf::int32 value) {
  
  soc_op_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferNodeInfo.soc_op_id)
}

// optional int32 padding_id = 5;
void GraphTransferNodeInfo::clear_padding_id() {
  padding_id_ = 0;
}
 ::google::protobuf::int32 GraphTransferNodeInfo::padding_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferNodeInfo.padding_id)
  return padding_id_;
}
 void GraphTransferNodeInfo::set_padding_id(::google::protobuf::int32 value) {
  
  padding_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferNodeInfo.padding_id)
}

// optional int32 input_count = 6;
void GraphTransferNodeInfo::clear_input_count() {
  input_count_ = 0;
}
 ::google::protobuf::int32 GraphTransferNodeInfo::input_count() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferNodeInfo.input_count)
  return input_count_;
}
 void GraphTransferNodeInfo::set_input_count(::google::protobuf::int32 value) {
  
  input_count_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferNodeInfo.input_count)
}

// optional int32 output_count = 7;
void GraphTransferNodeInfo::clear_output_count() {
  output_count_ = 0;
}
 ::google::protobuf::int32 GraphTransferNodeInfo::output_count() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferNodeInfo.output_count)
  return output_count_;
}
 void GraphTransferNodeInfo::set_output_count(::google::protobuf::int32 value) {
  
  output_count_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferNodeInfo.output_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GraphTransferConstNodeInfo::kNameFieldNumber;
const int GraphTransferConstNodeInfo::kNodeIdFieldNumber;
const int GraphTransferConstNodeInfo::kShapeFieldNumber;
const int GraphTransferConstNodeInfo::kDataFieldNumber;
const int GraphTransferConstNodeInfo::kDtypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GraphTransferConstNodeInfo::GraphTransferConstNodeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GraphTransferConstNodeInfo)
}

GraphTransferConstNodeInfo::GraphTransferConstNodeInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  shape_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphTransferConstNodeInfo)
}

void GraphTransferConstNodeInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GraphTransferConstNodeInfo::GraphTransferConstNodeInfo(const GraphTransferConstNodeInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphTransferConstNodeInfo)
}

void GraphTransferConstNodeInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_id_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dtype_ = 0;
}

GraphTransferConstNodeInfo::~GraphTransferConstNodeInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphTransferConstNodeInfo)
  SharedDtor();
}

void GraphTransferConstNodeInfo::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  data_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void GraphTransferConstNodeInfo::ArenaDtor(void* object) {
  GraphTransferConstNodeInfo* _this = reinterpret_cast< GraphTransferConstNodeInfo* >(object);
  (void)_this;
}
void GraphTransferConstNodeInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GraphTransferConstNodeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GraphTransferConstNodeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GraphTransferConstNodeInfo_descriptor_;
}

const GraphTransferConstNodeInfo& GraphTransferConstNodeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto();
  return *default_instance_;
}

GraphTransferConstNodeInfo* GraphTransferConstNodeInfo::default_instance_ = NULL;

GraphTransferConstNodeInfo* GraphTransferConstNodeInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GraphTransferConstNodeInfo>(arena);
}

void GraphTransferConstNodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphTransferConstNodeInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GraphTransferConstNodeInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GraphTransferConstNodeInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(node_id_, dtype_);
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());

#undef ZR_HELPER_
#undef ZR_

  shape_.Clear();
}

bool GraphTransferConstNodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GraphTransferConstNodeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.GraphTransferConstNodeInfo.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_node_id;
        break;
      }

      // optional int32 node_id = 2;
      case 2: {
        if (tag == 16) {
         parse_node_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_shape;
        break;
      }

      // repeated int64 shape = 3;
      case 3: {
        if (tag == 26) {
         parse_shape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_shape())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 26, input, this->mutable_shape())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dtype;
        break;
      }

      // optional .tensorflow.DataType dtype = 5;
      case 5: {
        if (tag == 40) {
         parse_dtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dtype(static_cast< ::tensorflow::DataType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GraphTransferConstNodeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GraphTransferConstNodeInfo)
  return false;
#undef DO_
}

void GraphTransferConstNodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GraphTransferConstNodeInfo)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphTransferConstNodeInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 node_id = 2;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->node_id(), output);
  }

  // repeated int64 shape = 3;
  if (this->shape_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_shape_cached_byte_size_);
  }
  for (int i = 0; i < this->shape_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->shape(i), output);
  }

  // optional bytes data = 4;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // optional .tensorflow.DataType dtype = 5;
  if (this->dtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->dtype(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.GraphTransferConstNodeInfo)
}

::google::protobuf::uint8* GraphTransferConstNodeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphTransferConstNodeInfo)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphTransferConstNodeInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 node_id = 2;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->node_id(), target);
  }

  // repeated int64 shape = 3;
  if (this->shape_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _shape_cached_byte_size_, target);
  }
  for (int i = 0; i < this->shape_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->shape(i), target);
  }

  // optional bytes data = 4;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional .tensorflow.DataType dtype = 5;
  if (this->dtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->dtype(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphTransferConstNodeInfo)
  return target;
}

int GraphTransferConstNodeInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphTransferConstNodeInfo)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional int32 node_id = 2;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_id());
  }

  // optional bytes data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // optional .tensorflow.DataType dtype = 5;
  if (this->dtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dtype());
  }

  // repeated int64 shape = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->shape_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->shape(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _shape_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GraphTransferConstNodeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GraphTransferConstNodeInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GraphTransferConstNodeInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GraphTransferConstNodeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GraphTransferConstNodeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GraphTransferConstNodeInfo)
    MergeFrom(*source);
  }
}

void GraphTransferConstNodeInfo::MergeFrom(const GraphTransferConstNodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphTransferConstNodeInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  shape_.MergeFrom(from.shape_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
  if (from.data().size() > 0) {
    set_data(from.data());
  }
  if (from.dtype() != 0) {
    set_dtype(from.dtype());
  }
}

void GraphTransferConstNodeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GraphTransferConstNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphTransferConstNodeInfo::CopyFrom(const GraphTransferConstNodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphTransferConstNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphTransferConstNodeInfo::IsInitialized() const {

  return true;
}

void GraphTransferConstNodeInfo::Swap(GraphTransferConstNodeInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GraphTransferConstNodeInfo temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void GraphTransferConstNodeInfo::UnsafeArenaSwap(GraphTransferConstNodeInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GraphTransferConstNodeInfo::InternalSwap(GraphTransferConstNodeInfo* other) {
  name_.Swap(&other->name_);
  std::swap(node_id_, other->node_id_);
  shape_.UnsafeArenaSwap(&other->shape_);
  data_.Swap(&other->data_);
  std::swap(dtype_, other->dtype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GraphTransferConstNodeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GraphTransferConstNodeInfo_descriptor_;
  metadata.reflection = GraphTransferConstNodeInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GraphTransferConstNodeInfo

// optional string name = 1;
void GraphTransferConstNodeInfo::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& GraphTransferConstNodeInfo::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferConstNodeInfo.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GraphTransferConstNodeInfo::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferConstNodeInfo.name)
}
 void GraphTransferConstNodeInfo::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.GraphTransferConstNodeInfo.name)
}
 void GraphTransferConstNodeInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.GraphTransferConstNodeInfo.name)
}
 ::std::string* GraphTransferConstNodeInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphTransferConstNodeInfo.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* GraphTransferConstNodeInfo::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.GraphTransferConstNodeInfo.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* GraphTransferConstNodeInfo::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.GraphTransferConstNodeInfo.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void GraphTransferConstNodeInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GraphTransferConstNodeInfo.name)
}
 void GraphTransferConstNodeInfo::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GraphTransferConstNodeInfo.name)
}

// optional int32 node_id = 2;
void GraphTransferConstNodeInfo::clear_node_id() {
  node_id_ = 0;
}
 ::google::protobuf::int32 GraphTransferConstNodeInfo::node_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferConstNodeInfo.node_id)
  return node_id_;
}
 void GraphTransferConstNodeInfo::set_node_id(::google::protobuf::int32 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferConstNodeInfo.node_id)
}

// repeated int64 shape = 3;
int GraphTransferConstNodeInfo::shape_size() const {
  return shape_.size();
}
void GraphTransferConstNodeInfo::clear_shape() {
  shape_.Clear();
}
 ::google::protobuf::int64 GraphTransferConstNodeInfo::shape(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferConstNodeInfo.shape)
  return shape_.Get(index);
}
 void GraphTransferConstNodeInfo::set_shape(int index, ::google::protobuf::int64 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferConstNodeInfo.shape)
}
 void GraphTransferConstNodeInfo::add_shape(::google::protobuf::int64 value) {
  shape_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.GraphTransferConstNodeInfo.shape)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
GraphTransferConstNodeInfo::shape() const {
  // @@protoc_insertion_point(field_list:tensorflow.GraphTransferConstNodeInfo.shape)
  return shape_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
GraphTransferConstNodeInfo::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GraphTransferConstNodeInfo.shape)
  return &shape_;
}

// optional bytes data = 4;
void GraphTransferConstNodeInfo::clear_data() {
  data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& GraphTransferConstNodeInfo::data() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferConstNodeInfo.data)
  return data_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GraphTransferConstNodeInfo::set_data(const ::std::string& value) {
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferConstNodeInfo.data)
}
 void GraphTransferConstNodeInfo::set_data(const char* value) {
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.GraphTransferConstNodeInfo.data)
}
 void GraphTransferConstNodeInfo::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.GraphTransferConstNodeInfo.data)
}
 ::std::string* GraphTransferConstNodeInfo::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphTransferConstNodeInfo.data)
  return data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* GraphTransferConstNodeInfo::release_data() {
  // @@protoc_insertion_point(field_release:tensorflow.GraphTransferConstNodeInfo.data)
  
  return data_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* GraphTransferConstNodeInfo::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.GraphTransferConstNodeInfo.data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void GraphTransferConstNodeInfo::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GraphTransferConstNodeInfo.data)
}
 void GraphTransferConstNodeInfo::unsafe_arena_set_allocated_data(
    ::std::string* data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (data != NULL) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GraphTransferConstNodeInfo.data)
}

// optional .tensorflow.DataType dtype = 5;
void GraphTransferConstNodeInfo::clear_dtype() {
  dtype_ = 0;
}
 ::tensorflow::DataType GraphTransferConstNodeInfo::dtype() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferConstNodeInfo.dtype)
  return static_cast< ::tensorflow::DataType >(dtype_);
}
 void GraphTransferConstNodeInfo::set_dtype(::tensorflow::DataType value) {
  
  dtype_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferConstNodeInfo.dtype)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GraphTransferNodeInputInfo::kNodeIdFieldNumber;
const int GraphTransferNodeInputInfo::kNodeInputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GraphTransferNodeInputInfo::GraphTransferNodeInputInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GraphTransferNodeInputInfo)
}

GraphTransferNodeInputInfo::GraphTransferNodeInputInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  node_input_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphTransferNodeInputInfo)
}

void GraphTransferNodeInputInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GraphTransferNodeInputInfo::GraphTransferNodeInputInfo(const GraphTransferNodeInputInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphTransferNodeInputInfo)
}

void GraphTransferNodeInputInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  node_id_ = 0;
}

GraphTransferNodeInputInfo::~GraphTransferNodeInputInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphTransferNodeInputInfo)
  SharedDtor();
}

void GraphTransferNodeInputInfo::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void GraphTransferNodeInputInfo::ArenaDtor(void* object) {
  GraphTransferNodeInputInfo* _this = reinterpret_cast< GraphTransferNodeInputInfo* >(object);
  (void)_this;
}
void GraphTransferNodeInputInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GraphTransferNodeInputInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GraphTransferNodeInputInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GraphTransferNodeInputInfo_descriptor_;
}

const GraphTransferNodeInputInfo& GraphTransferNodeInputInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto();
  return *default_instance_;
}

GraphTransferNodeInputInfo* GraphTransferNodeInputInfo::default_instance_ = NULL;

GraphTransferNodeInputInfo* GraphTransferNodeInputInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GraphTransferNodeInputInfo>(arena);
}

void GraphTransferNodeInputInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphTransferNodeInputInfo)
  node_id_ = 0;
  node_input_.Clear();
}

bool GraphTransferNodeInputInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GraphTransferNodeInputInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 node_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_node_input;
        break;
      }

      // repeated .tensorflow.GraphTransferNodeInput node_input = 2;
      case 2: {
        if (tag == 18) {
         parse_node_input:
          DO_(input->IncrementRecursionDepth());
         parse_loop_node_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_node_input()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_node_input;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GraphTransferNodeInputInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GraphTransferNodeInputInfo)
  return false;
#undef DO_
}

void GraphTransferNodeInputInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GraphTransferNodeInputInfo)
  // optional int32 node_id = 1;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node_id(), output);
  }

  // repeated .tensorflow.GraphTransferNodeInput node_input = 2;
  for (unsigned int i = 0, n = this->node_input_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->node_input(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.GraphTransferNodeInputInfo)
}

::google::protobuf::uint8* GraphTransferNodeInputInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphTransferNodeInputInfo)
  // optional int32 node_id = 1;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->node_id(), target);
  }

  // repeated .tensorflow.GraphTransferNodeInput node_input = 2;
  for (unsigned int i = 0, n = this->node_input_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->node_input(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphTransferNodeInputInfo)
  return target;
}

int GraphTransferNodeInputInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphTransferNodeInputInfo)
  int total_size = 0;

  // optional int32 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_id());
  }

  // repeated .tensorflow.GraphTransferNodeInput node_input = 2;
  total_size += 1 * this->node_input_size();
  for (int i = 0; i < this->node_input_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node_input(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GraphTransferNodeInputInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GraphTransferNodeInputInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GraphTransferNodeInputInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GraphTransferNodeInputInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GraphTransferNodeInputInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GraphTransferNodeInputInfo)
    MergeFrom(*source);
  }
}

void GraphTransferNodeInputInfo::MergeFrom(const GraphTransferNodeInputInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphTransferNodeInputInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  node_input_.MergeFrom(from.node_input_);
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
}

void GraphTransferNodeInputInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GraphTransferNodeInputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphTransferNodeInputInfo::CopyFrom(const GraphTransferNodeInputInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphTransferNodeInputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphTransferNodeInputInfo::IsInitialized() const {

  return true;
}

void GraphTransferNodeInputInfo::Swap(GraphTransferNodeInputInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GraphTransferNodeInputInfo temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void GraphTransferNodeInputInfo::UnsafeArenaSwap(GraphTransferNodeInputInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GraphTransferNodeInputInfo::InternalSwap(GraphTransferNodeInputInfo* other) {
  std::swap(node_id_, other->node_id_);
  node_input_.UnsafeArenaSwap(&other->node_input_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GraphTransferNodeInputInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GraphTransferNodeInputInfo_descriptor_;
  metadata.reflection = GraphTransferNodeInputInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GraphTransferNodeInputInfo

// optional int32 node_id = 1;
void GraphTransferNodeInputInfo::clear_node_id() {
  node_id_ = 0;
}
 ::google::protobuf::int32 GraphTransferNodeInputInfo::node_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferNodeInputInfo.node_id)
  return node_id_;
}
 void GraphTransferNodeInputInfo::set_node_id(::google::protobuf::int32 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferNodeInputInfo.node_id)
}

// repeated .tensorflow.GraphTransferNodeInput node_input = 2;
int GraphTransferNodeInputInfo::node_input_size() const {
  return node_input_.size();
}
void GraphTransferNodeInputInfo::clear_node_input() {
  node_input_.Clear();
}
const ::tensorflow::GraphTransferNodeInput& GraphTransferNodeInputInfo::node_input(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferNodeInputInfo.node_input)
  return node_input_.Get(index);
}
::tensorflow::GraphTransferNodeInput* GraphTransferNodeInputInfo::mutable_node_input(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphTransferNodeInputInfo.node_input)
  return node_input_.Mutable(index);
}
::tensorflow::GraphTransferNodeInput* GraphTransferNodeInputInfo::add_node_input() {
  // @@protoc_insertion_point(field_add:tensorflow.GraphTransferNodeInputInfo.node_input)
  return node_input_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferNodeInput >*
GraphTransferNodeInputInfo::mutable_node_input() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GraphTransferNodeInputInfo.node_input)
  return &node_input_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferNodeInput >&
GraphTransferNodeInputInfo::node_input() const {
  // @@protoc_insertion_point(field_list:tensorflow.GraphTransferNodeInputInfo.node_input)
  return node_input_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GraphTransferNodeOutputInfo::kNodeIdFieldNumber;
const int GraphTransferNodeOutputInfo::kMaxByteSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GraphTransferNodeOutputInfo::GraphTransferNodeOutputInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GraphTransferNodeOutputInfo)
}

GraphTransferNodeOutputInfo::GraphTransferNodeOutputInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  max_byte_size_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphTransferNodeOutputInfo)
}

void GraphTransferNodeOutputInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GraphTransferNodeOutputInfo::GraphTransferNodeOutputInfo(const GraphTransferNodeOutputInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphTransferNodeOutputInfo)
}

void GraphTransferNodeOutputInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  node_id_ = 0;
}

GraphTransferNodeOutputInfo::~GraphTransferNodeOutputInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphTransferNodeOutputInfo)
  SharedDtor();
}

void GraphTransferNodeOutputInfo::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void GraphTransferNodeOutputInfo::ArenaDtor(void* object) {
  GraphTransferNodeOutputInfo* _this = reinterpret_cast< GraphTransferNodeOutputInfo* >(object);
  (void)_this;
}
void GraphTransferNodeOutputInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GraphTransferNodeOutputInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GraphTransferNodeOutputInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GraphTransferNodeOutputInfo_descriptor_;
}

const GraphTransferNodeOutputInfo& GraphTransferNodeOutputInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto();
  return *default_instance_;
}

GraphTransferNodeOutputInfo* GraphTransferNodeOutputInfo::default_instance_ = NULL;

GraphTransferNodeOutputInfo* GraphTransferNodeOutputInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GraphTransferNodeOutputInfo>(arena);
}

void GraphTransferNodeOutputInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphTransferNodeOutputInfo)
  node_id_ = 0;
  max_byte_size_.Clear();
}

bool GraphTransferNodeOutputInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GraphTransferNodeOutputInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 node_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_max_byte_size;
        break;
      }

      // repeated int32 max_byte_size = 2;
      case 2: {
        if (tag == 18) {
         parse_max_byte_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_max_byte_size())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_max_byte_size())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GraphTransferNodeOutputInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GraphTransferNodeOutputInfo)
  return false;
#undef DO_
}

void GraphTransferNodeOutputInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GraphTransferNodeOutputInfo)
  // optional int32 node_id = 1;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node_id(), output);
  }

  // repeated int32 max_byte_size = 2;
  if (this->max_byte_size_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_max_byte_size_cached_byte_size_);
  }
  for (int i = 0; i < this->max_byte_size_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->max_byte_size(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.GraphTransferNodeOutputInfo)
}

::google::protobuf::uint8* GraphTransferNodeOutputInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphTransferNodeOutputInfo)
  // optional int32 node_id = 1;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->node_id(), target);
  }

  // repeated int32 max_byte_size = 2;
  if (this->max_byte_size_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _max_byte_size_cached_byte_size_, target);
  }
  for (int i = 0; i < this->max_byte_size_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->max_byte_size(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphTransferNodeOutputInfo)
  return target;
}

int GraphTransferNodeOutputInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphTransferNodeOutputInfo)
  int total_size = 0;

  // optional int32 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_id());
  }

  // repeated int32 max_byte_size = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->max_byte_size_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->max_byte_size(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _max_byte_size_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GraphTransferNodeOutputInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GraphTransferNodeOutputInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GraphTransferNodeOutputInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GraphTransferNodeOutputInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GraphTransferNodeOutputInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GraphTransferNodeOutputInfo)
    MergeFrom(*source);
  }
}

void GraphTransferNodeOutputInfo::MergeFrom(const GraphTransferNodeOutputInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphTransferNodeOutputInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  max_byte_size_.MergeFrom(from.max_byte_size_);
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
}

void GraphTransferNodeOutputInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GraphTransferNodeOutputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphTransferNodeOutputInfo::CopyFrom(const GraphTransferNodeOutputInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphTransferNodeOutputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphTransferNodeOutputInfo::IsInitialized() const {

  return true;
}

void GraphTransferNodeOutputInfo::Swap(GraphTransferNodeOutputInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GraphTransferNodeOutputInfo temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void GraphTransferNodeOutputInfo::UnsafeArenaSwap(GraphTransferNodeOutputInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GraphTransferNodeOutputInfo::InternalSwap(GraphTransferNodeOutputInfo* other) {
  std::swap(node_id_, other->node_id_);
  max_byte_size_.UnsafeArenaSwap(&other->max_byte_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GraphTransferNodeOutputInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GraphTransferNodeOutputInfo_descriptor_;
  metadata.reflection = GraphTransferNodeOutputInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GraphTransferNodeOutputInfo

// optional int32 node_id = 1;
void GraphTransferNodeOutputInfo::clear_node_id() {
  node_id_ = 0;
}
 ::google::protobuf::int32 GraphTransferNodeOutputInfo::node_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferNodeOutputInfo.node_id)
  return node_id_;
}
 void GraphTransferNodeOutputInfo::set_node_id(::google::protobuf::int32 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferNodeOutputInfo.node_id)
}

// repeated int32 max_byte_size = 2;
int GraphTransferNodeOutputInfo::max_byte_size_size() const {
  return max_byte_size_.size();
}
void GraphTransferNodeOutputInfo::clear_max_byte_size() {
  max_byte_size_.Clear();
}
 ::google::protobuf::int32 GraphTransferNodeOutputInfo::max_byte_size(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferNodeOutputInfo.max_byte_size)
  return max_byte_size_.Get(index);
}
 void GraphTransferNodeOutputInfo::set_max_byte_size(int index, ::google::protobuf::int32 value) {
  max_byte_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferNodeOutputInfo.max_byte_size)
}
 void GraphTransferNodeOutputInfo::add_max_byte_size(::google::protobuf::int32 value) {
  max_byte_size_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.GraphTransferNodeOutputInfo.max_byte_size)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GraphTransferNodeOutputInfo::max_byte_size() const {
  // @@protoc_insertion_point(field_list:tensorflow.GraphTransferNodeOutputInfo.max_byte_size)
  return max_byte_size_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GraphTransferNodeOutputInfo::mutable_max_byte_size() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GraphTransferNodeOutputInfo.max_byte_size)
  return &max_byte_size_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GraphTransferGraphInputNodeInfo::kNameFieldNumber;
const int GraphTransferGraphInputNodeInfo::kShapeFieldNumber;
const int GraphTransferGraphInputNodeInfo::kDtypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GraphTransferGraphInputNodeInfo::GraphTransferGraphInputNodeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GraphTransferGraphInputNodeInfo)
}

GraphTransferGraphInputNodeInfo::GraphTransferGraphInputNodeInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  shape_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphTransferGraphInputNodeInfo)
}

void GraphTransferGraphInputNodeInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GraphTransferGraphInputNodeInfo::GraphTransferGraphInputNodeInfo(const GraphTransferGraphInputNodeInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphTransferGraphInputNodeInfo)
}

void GraphTransferGraphInputNodeInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dtype_ = 0;
}

GraphTransferGraphInputNodeInfo::~GraphTransferGraphInputNodeInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphTransferGraphInputNodeInfo)
  SharedDtor();
}

void GraphTransferGraphInputNodeInfo::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void GraphTransferGraphInputNodeInfo::ArenaDtor(void* object) {
  GraphTransferGraphInputNodeInfo* _this = reinterpret_cast< GraphTransferGraphInputNodeInfo* >(object);
  (void)_this;
}
void GraphTransferGraphInputNodeInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GraphTransferGraphInputNodeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GraphTransferGraphInputNodeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GraphTransferGraphInputNodeInfo_descriptor_;
}

const GraphTransferGraphInputNodeInfo& GraphTransferGraphInputNodeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto();
  return *default_instance_;
}

GraphTransferGraphInputNodeInfo* GraphTransferGraphInputNodeInfo::default_instance_ = NULL;

GraphTransferGraphInputNodeInfo* GraphTransferGraphInputNodeInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GraphTransferGraphInputNodeInfo>(arena);
}

void GraphTransferGraphInputNodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphTransferGraphInputNodeInfo)
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  dtype_ = 0;
  shape_.Clear();
}

bool GraphTransferGraphInputNodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GraphTransferGraphInputNodeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.GraphTransferGraphInputNodeInfo.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_shape;
        break;
      }

      // repeated int64 shape = 2;
      case 2: {
        if (tag == 18) {
         parse_shape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_shape())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 18, input, this->mutable_shape())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dtype;
        break;
      }

      // optional .tensorflow.DataType dtype = 3;
      case 3: {
        if (tag == 24) {
         parse_dtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dtype(static_cast< ::tensorflow::DataType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GraphTransferGraphInputNodeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GraphTransferGraphInputNodeInfo)
  return false;
#undef DO_
}

void GraphTransferGraphInputNodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GraphTransferGraphInputNodeInfo)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphTransferGraphInputNodeInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated int64 shape = 2;
  if (this->shape_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_shape_cached_byte_size_);
  }
  for (int i = 0; i < this->shape_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->shape(i), output);
  }

  // optional .tensorflow.DataType dtype = 3;
  if (this->dtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->dtype(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.GraphTransferGraphInputNodeInfo)
}

::google::protobuf::uint8* GraphTransferGraphInputNodeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphTransferGraphInputNodeInfo)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphTransferGraphInputNodeInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated int64 shape = 2;
  if (this->shape_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _shape_cached_byte_size_, target);
  }
  for (int i = 0; i < this->shape_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->shape(i), target);
  }

  // optional .tensorflow.DataType dtype = 3;
  if (this->dtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->dtype(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphTransferGraphInputNodeInfo)
  return target;
}

int GraphTransferGraphInputNodeInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphTransferGraphInputNodeInfo)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .tensorflow.DataType dtype = 3;
  if (this->dtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dtype());
  }

  // repeated int64 shape = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->shape_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->shape(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _shape_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GraphTransferGraphInputNodeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GraphTransferGraphInputNodeInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GraphTransferGraphInputNodeInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GraphTransferGraphInputNodeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GraphTransferGraphInputNodeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GraphTransferGraphInputNodeInfo)
    MergeFrom(*source);
  }
}

void GraphTransferGraphInputNodeInfo::MergeFrom(const GraphTransferGraphInputNodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphTransferGraphInputNodeInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  shape_.MergeFrom(from.shape_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.dtype() != 0) {
    set_dtype(from.dtype());
  }
}

void GraphTransferGraphInputNodeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GraphTransferGraphInputNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphTransferGraphInputNodeInfo::CopyFrom(const GraphTransferGraphInputNodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphTransferGraphInputNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphTransferGraphInputNodeInfo::IsInitialized() const {

  return true;
}

void GraphTransferGraphInputNodeInfo::Swap(GraphTransferGraphInputNodeInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GraphTransferGraphInputNodeInfo temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void GraphTransferGraphInputNodeInfo::UnsafeArenaSwap(GraphTransferGraphInputNodeInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GraphTransferGraphInputNodeInfo::InternalSwap(GraphTransferGraphInputNodeInfo* other) {
  name_.Swap(&other->name_);
  shape_.UnsafeArenaSwap(&other->shape_);
  std::swap(dtype_, other->dtype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GraphTransferGraphInputNodeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GraphTransferGraphInputNodeInfo_descriptor_;
  metadata.reflection = GraphTransferGraphInputNodeInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GraphTransferGraphInputNodeInfo

// optional string name = 1;
void GraphTransferGraphInputNodeInfo::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& GraphTransferGraphInputNodeInfo::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferGraphInputNodeInfo.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GraphTransferGraphInputNodeInfo::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferGraphInputNodeInfo.name)
}
 void GraphTransferGraphInputNodeInfo::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.GraphTransferGraphInputNodeInfo.name)
}
 void GraphTransferGraphInputNodeInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.GraphTransferGraphInputNodeInfo.name)
}
 ::std::string* GraphTransferGraphInputNodeInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphTransferGraphInputNodeInfo.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* GraphTransferGraphInputNodeInfo::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.GraphTransferGraphInputNodeInfo.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* GraphTransferGraphInputNodeInfo::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.GraphTransferGraphInputNodeInfo.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void GraphTransferGraphInputNodeInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GraphTransferGraphInputNodeInfo.name)
}
 void GraphTransferGraphInputNodeInfo::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GraphTransferGraphInputNodeInfo.name)
}

// repeated int64 shape = 2;
int GraphTransferGraphInputNodeInfo::shape_size() const {
  return shape_.size();
}
void GraphTransferGraphInputNodeInfo::clear_shape() {
  shape_.Clear();
}
 ::google::protobuf::int64 GraphTransferGraphInputNodeInfo::shape(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferGraphInputNodeInfo.shape)
  return shape_.Get(index);
}
 void GraphTransferGraphInputNodeInfo::set_shape(int index, ::google::protobuf::int64 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferGraphInputNodeInfo.shape)
}
 void GraphTransferGraphInputNodeInfo::add_shape(::google::protobuf::int64 value) {
  shape_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.GraphTransferGraphInputNodeInfo.shape)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
GraphTransferGraphInputNodeInfo::shape() const {
  // @@protoc_insertion_point(field_list:tensorflow.GraphTransferGraphInputNodeInfo.shape)
  return shape_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
GraphTransferGraphInputNodeInfo::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GraphTransferGraphInputNodeInfo.shape)
  return &shape_;
}

// optional .tensorflow.DataType dtype = 3;
void GraphTransferGraphInputNodeInfo::clear_dtype() {
  dtype_ = 0;
}
 ::tensorflow::DataType GraphTransferGraphInputNodeInfo::dtype() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferGraphInputNodeInfo.dtype)
  return static_cast< ::tensorflow::DataType >(dtype_);
}
 void GraphTransferGraphInputNodeInfo::set_dtype(::tensorflow::DataType value) {
  
  dtype_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferGraphInputNodeInfo.dtype)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GraphTransferGraphOutputNodeInfo::kNameFieldNumber;
const int GraphTransferGraphOutputNodeInfo::kShapeFieldNumber;
const int GraphTransferGraphOutputNodeInfo::kDtypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GraphTransferGraphOutputNodeInfo::GraphTransferGraphOutputNodeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GraphTransferGraphOutputNodeInfo)
}

GraphTransferGraphOutputNodeInfo::GraphTransferGraphOutputNodeInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  shape_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphTransferGraphOutputNodeInfo)
}

void GraphTransferGraphOutputNodeInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GraphTransferGraphOutputNodeInfo::GraphTransferGraphOutputNodeInfo(const GraphTransferGraphOutputNodeInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphTransferGraphOutputNodeInfo)
}

void GraphTransferGraphOutputNodeInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dtype_ = 0;
}

GraphTransferGraphOutputNodeInfo::~GraphTransferGraphOutputNodeInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphTransferGraphOutputNodeInfo)
  SharedDtor();
}

void GraphTransferGraphOutputNodeInfo::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void GraphTransferGraphOutputNodeInfo::ArenaDtor(void* object) {
  GraphTransferGraphOutputNodeInfo* _this = reinterpret_cast< GraphTransferGraphOutputNodeInfo* >(object);
  (void)_this;
}
void GraphTransferGraphOutputNodeInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GraphTransferGraphOutputNodeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GraphTransferGraphOutputNodeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GraphTransferGraphOutputNodeInfo_descriptor_;
}

const GraphTransferGraphOutputNodeInfo& GraphTransferGraphOutputNodeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto();
  return *default_instance_;
}

GraphTransferGraphOutputNodeInfo* GraphTransferGraphOutputNodeInfo::default_instance_ = NULL;

GraphTransferGraphOutputNodeInfo* GraphTransferGraphOutputNodeInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GraphTransferGraphOutputNodeInfo>(arena);
}

void GraphTransferGraphOutputNodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphTransferGraphOutputNodeInfo)
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  dtype_ = 0;
  shape_.Clear();
}

bool GraphTransferGraphOutputNodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GraphTransferGraphOutputNodeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.GraphTransferGraphOutputNodeInfo.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_shape;
        break;
      }

      // repeated int64 shape = 2;
      case 2: {
        if (tag == 18) {
         parse_shape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_shape())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 18, input, this->mutable_shape())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dtype;
        break;
      }

      // optional .tensorflow.DataType dtype = 3;
      case 3: {
        if (tag == 24) {
         parse_dtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dtype(static_cast< ::tensorflow::DataType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GraphTransferGraphOutputNodeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GraphTransferGraphOutputNodeInfo)
  return false;
#undef DO_
}

void GraphTransferGraphOutputNodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GraphTransferGraphOutputNodeInfo)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphTransferGraphOutputNodeInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated int64 shape = 2;
  if (this->shape_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_shape_cached_byte_size_);
  }
  for (int i = 0; i < this->shape_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->shape(i), output);
  }

  // optional .tensorflow.DataType dtype = 3;
  if (this->dtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->dtype(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.GraphTransferGraphOutputNodeInfo)
}

::google::protobuf::uint8* GraphTransferGraphOutputNodeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphTransferGraphOutputNodeInfo)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphTransferGraphOutputNodeInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated int64 shape = 2;
  if (this->shape_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _shape_cached_byte_size_, target);
  }
  for (int i = 0; i < this->shape_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->shape(i), target);
  }

  // optional .tensorflow.DataType dtype = 3;
  if (this->dtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->dtype(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphTransferGraphOutputNodeInfo)
  return target;
}

int GraphTransferGraphOutputNodeInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphTransferGraphOutputNodeInfo)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .tensorflow.DataType dtype = 3;
  if (this->dtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dtype());
  }

  // repeated int64 shape = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->shape_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->shape(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _shape_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GraphTransferGraphOutputNodeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GraphTransferGraphOutputNodeInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GraphTransferGraphOutputNodeInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GraphTransferGraphOutputNodeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GraphTransferGraphOutputNodeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GraphTransferGraphOutputNodeInfo)
    MergeFrom(*source);
  }
}

void GraphTransferGraphOutputNodeInfo::MergeFrom(const GraphTransferGraphOutputNodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphTransferGraphOutputNodeInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  shape_.MergeFrom(from.shape_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.dtype() != 0) {
    set_dtype(from.dtype());
  }
}

void GraphTransferGraphOutputNodeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GraphTransferGraphOutputNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphTransferGraphOutputNodeInfo::CopyFrom(const GraphTransferGraphOutputNodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphTransferGraphOutputNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphTransferGraphOutputNodeInfo::IsInitialized() const {

  return true;
}

void GraphTransferGraphOutputNodeInfo::Swap(GraphTransferGraphOutputNodeInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GraphTransferGraphOutputNodeInfo temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void GraphTransferGraphOutputNodeInfo::UnsafeArenaSwap(GraphTransferGraphOutputNodeInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GraphTransferGraphOutputNodeInfo::InternalSwap(GraphTransferGraphOutputNodeInfo* other) {
  name_.Swap(&other->name_);
  shape_.UnsafeArenaSwap(&other->shape_);
  std::swap(dtype_, other->dtype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GraphTransferGraphOutputNodeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GraphTransferGraphOutputNodeInfo_descriptor_;
  metadata.reflection = GraphTransferGraphOutputNodeInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GraphTransferGraphOutputNodeInfo

// optional string name = 1;
void GraphTransferGraphOutputNodeInfo::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& GraphTransferGraphOutputNodeInfo::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferGraphOutputNodeInfo.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GraphTransferGraphOutputNodeInfo::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferGraphOutputNodeInfo.name)
}
 void GraphTransferGraphOutputNodeInfo::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.GraphTransferGraphOutputNodeInfo.name)
}
 void GraphTransferGraphOutputNodeInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.GraphTransferGraphOutputNodeInfo.name)
}
 ::std::string* GraphTransferGraphOutputNodeInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphTransferGraphOutputNodeInfo.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* GraphTransferGraphOutputNodeInfo::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.GraphTransferGraphOutputNodeInfo.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* GraphTransferGraphOutputNodeInfo::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.GraphTransferGraphOutputNodeInfo.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void GraphTransferGraphOutputNodeInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GraphTransferGraphOutputNodeInfo.name)
}
 void GraphTransferGraphOutputNodeInfo::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GraphTransferGraphOutputNodeInfo.name)
}

// repeated int64 shape = 2;
int GraphTransferGraphOutputNodeInfo::shape_size() const {
  return shape_.size();
}
void GraphTransferGraphOutputNodeInfo::clear_shape() {
  shape_.Clear();
}
 ::google::protobuf::int64 GraphTransferGraphOutputNodeInfo::shape(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferGraphOutputNodeInfo.shape)
  return shape_.Get(index);
}
 void GraphTransferGraphOutputNodeInfo::set_shape(int index, ::google::protobuf::int64 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferGraphOutputNodeInfo.shape)
}
 void GraphTransferGraphOutputNodeInfo::add_shape(::google::protobuf::int64 value) {
  shape_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.GraphTransferGraphOutputNodeInfo.shape)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
GraphTransferGraphOutputNodeInfo::shape() const {
  // @@protoc_insertion_point(field_list:tensorflow.GraphTransferGraphOutputNodeInfo.shape)
  return shape_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
GraphTransferGraphOutputNodeInfo::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GraphTransferGraphOutputNodeInfo.shape)
  return &shape_;
}

// optional .tensorflow.DataType dtype = 3;
void GraphTransferGraphOutputNodeInfo::clear_dtype() {
  dtype_ = 0;
}
 ::tensorflow::DataType GraphTransferGraphOutputNodeInfo::dtype() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferGraphOutputNodeInfo.dtype)
  return static_cast< ::tensorflow::DataType >(dtype_);
}
 void GraphTransferGraphOutputNodeInfo::set_dtype(::tensorflow::DataType value) {
  
  dtype_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferGraphOutputNodeInfo.dtype)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* GraphTransferInfo_Destination_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GraphTransferInfo_Destination_descriptor_;
}
bool GraphTransferInfo_Destination_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GraphTransferInfo_Destination GraphTransferInfo::NOP;
const GraphTransferInfo_Destination GraphTransferInfo::HEXAGON;
const GraphTransferInfo_Destination GraphTransferInfo::Destination_MIN;
const GraphTransferInfo_Destination GraphTransferInfo::Destination_MAX;
const int GraphTransferInfo::Destination_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GraphTransferInfo::kNodeInfoFieldNumber;
const int GraphTransferInfo::kConstNodeInfoFieldNumber;
const int GraphTransferInfo::kNodeInputInfoFieldNumber;
const int GraphTransferInfo::kNodeOutputInfoFieldNumber;
const int GraphTransferInfo::kGraphInputNodeInfoFieldNumber;
const int GraphTransferInfo::kGraphOutputNodeInfoFieldNumber;
const int GraphTransferInfo::kDestinationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GraphTransferInfo::GraphTransferInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GraphTransferInfo)
}

GraphTransferInfo::GraphTransferInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  node_info_(arena),
  const_node_info_(arena),
  node_input_info_(arena),
  node_output_info_(arena),
  graph_input_node_info_(arena),
  graph_output_node_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphTransferInfo)
}

void GraphTransferInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GraphTransferInfo::GraphTransferInfo(const GraphTransferInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphTransferInfo)
}

void GraphTransferInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  destination_ = 0;
}

GraphTransferInfo::~GraphTransferInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphTransferInfo)
  SharedDtor();
}

void GraphTransferInfo::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void GraphTransferInfo::ArenaDtor(void* object) {
  GraphTransferInfo* _this = reinterpret_cast< GraphTransferInfo* >(object);
  (void)_this;
}
void GraphTransferInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GraphTransferInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GraphTransferInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GraphTransferInfo_descriptor_;
}

const GraphTransferInfo& GraphTransferInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto();
  return *default_instance_;
}

GraphTransferInfo* GraphTransferInfo::default_instance_ = NULL;

GraphTransferInfo* GraphTransferInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GraphTransferInfo>(arena);
}

void GraphTransferInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphTransferInfo)
  destination_ = 0;
  node_info_.Clear();
  const_node_info_.Clear();
  node_input_info_.Clear();
  node_output_info_.Clear();
  graph_input_node_info_.Clear();
  graph_output_node_info_.Clear();
}

bool GraphTransferInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GraphTransferInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.GraphTransferNodeInfo node_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_node_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_node_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_node_info;
        if (input->ExpectTag(18)) goto parse_loop_const_node_info;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .tensorflow.GraphTransferConstNodeInfo const_node_info = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_const_node_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_const_node_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_const_node_info;
        if (input->ExpectTag(26)) goto parse_loop_node_input_info;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .tensorflow.GraphTransferNodeInputInfo node_input_info = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_node_input_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_node_input_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_node_input_info;
        if (input->ExpectTag(34)) goto parse_loop_node_output_info;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .tensorflow.GraphTransferNodeOutputInfo node_output_info = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_node_output_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_node_output_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_node_output_info;
        if (input->ExpectTag(42)) goto parse_loop_graph_input_node_info;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .tensorflow.GraphTransferGraphInputNodeInfo graph_input_node_info = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_graph_input_node_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_graph_input_node_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_graph_input_node_info;
        if (input->ExpectTag(50)) goto parse_loop_graph_output_node_info;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .tensorflow.GraphTransferGraphOutputNodeInfo graph_output_node_info = 6;
      case 6: {
        if (tag == 50) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_graph_output_node_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_graph_output_node_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_graph_output_node_info;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(56)) goto parse_destination;
        break;
      }

      // optional .tensorflow.GraphTransferInfo.Destination destination = 7;
      case 7: {
        if (tag == 56) {
         parse_destination:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_destination(static_cast< ::tensorflow::GraphTransferInfo_Destination >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GraphTransferInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GraphTransferInfo)
  return false;
#undef DO_
}

void GraphTransferInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GraphTransferInfo)
  // repeated .tensorflow.GraphTransferNodeInfo node_info = 1;
  for (unsigned int i = 0, n = this->node_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node_info(i), output);
  }

  // repeated .tensorflow.GraphTransferConstNodeInfo const_node_info = 2;
  for (unsigned int i = 0, n = this->const_node_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->const_node_info(i), output);
  }

  // repeated .tensorflow.GraphTransferNodeInputInfo node_input_info = 3;
  for (unsigned int i = 0, n = this->node_input_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->node_input_info(i), output);
  }

  // repeated .tensorflow.GraphTransferNodeOutputInfo node_output_info = 4;
  for (unsigned int i = 0, n = this->node_output_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->node_output_info(i), output);
  }

  // repeated .tensorflow.GraphTransferGraphInputNodeInfo graph_input_node_info = 5;
  for (unsigned int i = 0, n = this->graph_input_node_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->graph_input_node_info(i), output);
  }

  // repeated .tensorflow.GraphTransferGraphOutputNodeInfo graph_output_node_info = 6;
  for (unsigned int i = 0, n = this->graph_output_node_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->graph_output_node_info(i), output);
  }

  // optional .tensorflow.GraphTransferInfo.Destination destination = 7;
  if (this->destination() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->destination(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.GraphTransferInfo)
}

::google::protobuf::uint8* GraphTransferInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphTransferInfo)
  // repeated .tensorflow.GraphTransferNodeInfo node_info = 1;
  for (unsigned int i = 0, n = this->node_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->node_info(i), false, target);
  }

  // repeated .tensorflow.GraphTransferConstNodeInfo const_node_info = 2;
  for (unsigned int i = 0, n = this->const_node_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->const_node_info(i), false, target);
  }

  // repeated .tensorflow.GraphTransferNodeInputInfo node_input_info = 3;
  for (unsigned int i = 0, n = this->node_input_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->node_input_info(i), false, target);
  }

  // repeated .tensorflow.GraphTransferNodeOutputInfo node_output_info = 4;
  for (unsigned int i = 0, n = this->node_output_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->node_output_info(i), false, target);
  }

  // repeated .tensorflow.GraphTransferGraphInputNodeInfo graph_input_node_info = 5;
  for (unsigned int i = 0, n = this->graph_input_node_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->graph_input_node_info(i), false, target);
  }

  // repeated .tensorflow.GraphTransferGraphOutputNodeInfo graph_output_node_info = 6;
  for (unsigned int i = 0, n = this->graph_output_node_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->graph_output_node_info(i), false, target);
  }

  // optional .tensorflow.GraphTransferInfo.Destination destination = 7;
  if (this->destination() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->destination(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphTransferInfo)
  return target;
}

int GraphTransferInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphTransferInfo)
  int total_size = 0;

  // optional .tensorflow.GraphTransferInfo.Destination destination = 7;
  if (this->destination() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->destination());
  }

  // repeated .tensorflow.GraphTransferNodeInfo node_info = 1;
  total_size += 1 * this->node_info_size();
  for (int i = 0; i < this->node_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node_info(i));
  }

  // repeated .tensorflow.GraphTransferConstNodeInfo const_node_info = 2;
  total_size += 1 * this->const_node_info_size();
  for (int i = 0; i < this->const_node_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->const_node_info(i));
  }

  // repeated .tensorflow.GraphTransferNodeInputInfo node_input_info = 3;
  total_size += 1 * this->node_input_info_size();
  for (int i = 0; i < this->node_input_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node_input_info(i));
  }

  // repeated .tensorflow.GraphTransferNodeOutputInfo node_output_info = 4;
  total_size += 1 * this->node_output_info_size();
  for (int i = 0; i < this->node_output_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node_output_info(i));
  }

  // repeated .tensorflow.GraphTransferGraphInputNodeInfo graph_input_node_info = 5;
  total_size += 1 * this->graph_input_node_info_size();
  for (int i = 0; i < this->graph_input_node_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->graph_input_node_info(i));
  }

  // repeated .tensorflow.GraphTransferGraphOutputNodeInfo graph_output_node_info = 6;
  total_size += 1 * this->graph_output_node_info_size();
  for (int i = 0; i < this->graph_output_node_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->graph_output_node_info(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GraphTransferInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GraphTransferInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GraphTransferInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GraphTransferInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GraphTransferInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GraphTransferInfo)
    MergeFrom(*source);
  }
}

void GraphTransferInfo::MergeFrom(const GraphTransferInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphTransferInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  node_info_.MergeFrom(from.node_info_);
  const_node_info_.MergeFrom(from.const_node_info_);
  node_input_info_.MergeFrom(from.node_input_info_);
  node_output_info_.MergeFrom(from.node_output_info_);
  graph_input_node_info_.MergeFrom(from.graph_input_node_info_);
  graph_output_node_info_.MergeFrom(from.graph_output_node_info_);
  if (from.destination() != 0) {
    set_destination(from.destination());
  }
}

void GraphTransferInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GraphTransferInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphTransferInfo::CopyFrom(const GraphTransferInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphTransferInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphTransferInfo::IsInitialized() const {

  return true;
}

void GraphTransferInfo::Swap(GraphTransferInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GraphTransferInfo temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void GraphTransferInfo::UnsafeArenaSwap(GraphTransferInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GraphTransferInfo::InternalSwap(GraphTransferInfo* other) {
  node_info_.UnsafeArenaSwap(&other->node_info_);
  const_node_info_.UnsafeArenaSwap(&other->const_node_info_);
  node_input_info_.UnsafeArenaSwap(&other->node_input_info_);
  node_output_info_.UnsafeArenaSwap(&other->node_output_info_);
  graph_input_node_info_.UnsafeArenaSwap(&other->graph_input_node_info_);
  graph_output_node_info_.UnsafeArenaSwap(&other->graph_output_node_info_);
  std::swap(destination_, other->destination_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GraphTransferInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GraphTransferInfo_descriptor_;
  metadata.reflection = GraphTransferInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GraphTransferInfo

// repeated .tensorflow.GraphTransferNodeInfo node_info = 1;
int GraphTransferInfo::node_info_size() const {
  return node_info_.size();
}
void GraphTransferInfo::clear_node_info() {
  node_info_.Clear();
}
const ::tensorflow::GraphTransferNodeInfo& GraphTransferInfo::node_info(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.node_info)
  return node_info_.Get(index);
}
::tensorflow::GraphTransferNodeInfo* GraphTransferInfo::mutable_node_info(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphTransferInfo.node_info)
  return node_info_.Mutable(index);
}
::tensorflow::GraphTransferNodeInfo* GraphTransferInfo::add_node_info() {
  // @@protoc_insertion_point(field_add:tensorflow.GraphTransferInfo.node_info)
  return node_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferNodeInfo >*
GraphTransferInfo::mutable_node_info() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GraphTransferInfo.node_info)
  return &node_info_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferNodeInfo >&
GraphTransferInfo::node_info() const {
  // @@protoc_insertion_point(field_list:tensorflow.GraphTransferInfo.node_info)
  return node_info_;
}

// repeated .tensorflow.GraphTransferConstNodeInfo const_node_info = 2;
int GraphTransferInfo::const_node_info_size() const {
  return const_node_info_.size();
}
void GraphTransferInfo::clear_const_node_info() {
  const_node_info_.Clear();
}
const ::tensorflow::GraphTransferConstNodeInfo& GraphTransferInfo::const_node_info(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.const_node_info)
  return const_node_info_.Get(index);
}
::tensorflow::GraphTransferConstNodeInfo* GraphTransferInfo::mutable_const_node_info(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphTransferInfo.const_node_info)
  return const_node_info_.Mutable(index);
}
::tensorflow::GraphTransferConstNodeInfo* GraphTransferInfo::add_const_node_info() {
  // @@protoc_insertion_point(field_add:tensorflow.GraphTransferInfo.const_node_info)
  return const_node_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferConstNodeInfo >*
GraphTransferInfo::mutable_const_node_info() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GraphTransferInfo.const_node_info)
  return &const_node_info_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferConstNodeInfo >&
GraphTransferInfo::const_node_info() const {
  // @@protoc_insertion_point(field_list:tensorflow.GraphTransferInfo.const_node_info)
  return const_node_info_;
}

// repeated .tensorflow.GraphTransferNodeInputInfo node_input_info = 3;
int GraphTransferInfo::node_input_info_size() const {
  return node_input_info_.size();
}
void GraphTransferInfo::clear_node_input_info() {
  node_input_info_.Clear();
}
const ::tensorflow::GraphTransferNodeInputInfo& GraphTransferInfo::node_input_info(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.node_input_info)
  return node_input_info_.Get(index);
}
::tensorflow::GraphTransferNodeInputInfo* GraphTransferInfo::mutable_node_input_info(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphTransferInfo.node_input_info)
  return node_input_info_.Mutable(index);
}
::tensorflow::GraphTransferNodeInputInfo* GraphTransferInfo::add_node_input_info() {
  // @@protoc_insertion_point(field_add:tensorflow.GraphTransferInfo.node_input_info)
  return node_input_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferNodeInputInfo >*
GraphTransferInfo::mutable_node_input_info() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GraphTransferInfo.node_input_info)
  return &node_input_info_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferNodeInputInfo >&
GraphTransferInfo::node_input_info() const {
  // @@protoc_insertion_point(field_list:tensorflow.GraphTransferInfo.node_input_info)
  return node_input_info_;
}

// repeated .tensorflow.GraphTransferNodeOutputInfo node_output_info = 4;
int GraphTransferInfo::node_output_info_size() const {
  return node_output_info_.size();
}
void GraphTransferInfo::clear_node_output_info() {
  node_output_info_.Clear();
}
const ::tensorflow::GraphTransferNodeOutputInfo& GraphTransferInfo::node_output_info(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.node_output_info)
  return node_output_info_.Get(index);
}
::tensorflow::GraphTransferNodeOutputInfo* GraphTransferInfo::mutable_node_output_info(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphTransferInfo.node_output_info)
  return node_output_info_.Mutable(index);
}
::tensorflow::GraphTransferNodeOutputInfo* GraphTransferInfo::add_node_output_info() {
  // @@protoc_insertion_point(field_add:tensorflow.GraphTransferInfo.node_output_info)
  return node_output_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferNodeOutputInfo >*
GraphTransferInfo::mutable_node_output_info() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GraphTransferInfo.node_output_info)
  return &node_output_info_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferNodeOutputInfo >&
GraphTransferInfo::node_output_info() const {
  // @@protoc_insertion_point(field_list:tensorflow.GraphTransferInfo.node_output_info)
  return node_output_info_;
}

// repeated .tensorflow.GraphTransferGraphInputNodeInfo graph_input_node_info = 5;
int GraphTransferInfo::graph_input_node_info_size() const {
  return graph_input_node_info_.size();
}
void GraphTransferInfo::clear_graph_input_node_info() {
  graph_input_node_info_.Clear();
}
const ::tensorflow::GraphTransferGraphInputNodeInfo& GraphTransferInfo::graph_input_node_info(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.graph_input_node_info)
  return graph_input_node_info_.Get(index);
}
::tensorflow::GraphTransferGraphInputNodeInfo* GraphTransferInfo::mutable_graph_input_node_info(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphTransferInfo.graph_input_node_info)
  return graph_input_node_info_.Mutable(index);
}
::tensorflow::GraphTransferGraphInputNodeInfo* GraphTransferInfo::add_graph_input_node_info() {
  // @@protoc_insertion_point(field_add:tensorflow.GraphTransferInfo.graph_input_node_info)
  return graph_input_node_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferGraphInputNodeInfo >*
GraphTransferInfo::mutable_graph_input_node_info() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GraphTransferInfo.graph_input_node_info)
  return &graph_input_node_info_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferGraphInputNodeInfo >&
GraphTransferInfo::graph_input_node_info() const {
  // @@protoc_insertion_point(field_list:tensorflow.GraphTransferInfo.graph_input_node_info)
  return graph_input_node_info_;
}

// repeated .tensorflow.GraphTransferGraphOutputNodeInfo graph_output_node_info = 6;
int GraphTransferInfo::graph_output_node_info_size() const {
  return graph_output_node_info_.size();
}
void GraphTransferInfo::clear_graph_output_node_info() {
  graph_output_node_info_.Clear();
}
const ::tensorflow::GraphTransferGraphOutputNodeInfo& GraphTransferInfo::graph_output_node_info(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.graph_output_node_info)
  return graph_output_node_info_.Get(index);
}
::tensorflow::GraphTransferGraphOutputNodeInfo* GraphTransferInfo::mutable_graph_output_node_info(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphTransferInfo.graph_output_node_info)
  return graph_output_node_info_.Mutable(index);
}
::tensorflow::GraphTransferGraphOutputNodeInfo* GraphTransferInfo::add_graph_output_node_info() {
  // @@protoc_insertion_point(field_add:tensorflow.GraphTransferInfo.graph_output_node_info)
  return graph_output_node_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferGraphOutputNodeInfo >*
GraphTransferInfo::mutable_graph_output_node_info() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GraphTransferInfo.graph_output_node_info)
  return &graph_output_node_info_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferGraphOutputNodeInfo >&
GraphTransferInfo::graph_output_node_info() const {
  // @@protoc_insertion_point(field_list:tensorflow.GraphTransferInfo.graph_output_node_info)
  return graph_output_node_info_;
}

// optional .tensorflow.GraphTransferInfo.Destination destination = 7;
void GraphTransferInfo::clear_destination() {
  destination_ = 0;
}
 ::tensorflow::GraphTransferInfo_Destination GraphTransferInfo::destination() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.destination)
  return static_cast< ::tensorflow::GraphTransferInfo_Destination >(destination_);
}
 void GraphTransferInfo::set_destination(::tensorflow::GraphTransferInfo_Destination value) {
  
  destination_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.destination)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
