// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/node_def.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/framework/node_def.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {

namespace {

const ::google::protobuf::Descriptor* NodeDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeDef_AttrEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NodeDef_ExperimentalDebugInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeDef_ExperimentalDebugInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_2fcore_2fframework_2fnode_5fdef_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tensorflow_2fcore_2fframework_2fnode_5fdef_2eproto() {
  protobuf_AddDesc_tensorflow_2fcore_2fframework_2fnode_5fdef_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow/core/framework/node_def.proto");
  GOOGLE_CHECK(file != NULL);
  NodeDef_descriptor_ = file->message_type(0);
  static const int NodeDef_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDef, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDef, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDef, input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDef, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDef, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDef, experimental_debug_info_),
  };
  NodeDef_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodeDef_descriptor_,
      NodeDef::default_instance_,
      NodeDef_offsets_,
      -1,
      -1,
      -1,
      sizeof(NodeDef),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDef, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDef, _is_default_instance_));
  NodeDef_AttrEntry_descriptor_ = NodeDef_descriptor_->nested_type(0);
  NodeDef_ExperimentalDebugInfo_descriptor_ = NodeDef_descriptor_->nested_type(1);
  static const int NodeDef_ExperimentalDebugInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDef_ExperimentalDebugInfo, original_node_names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDef_ExperimentalDebugInfo, original_func_names_),
  };
  NodeDef_ExperimentalDebugInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodeDef_ExperimentalDebugInfo_descriptor_,
      NodeDef_ExperimentalDebugInfo::default_instance_,
      NodeDef_ExperimentalDebugInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(NodeDef_ExperimentalDebugInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDef_ExperimentalDebugInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDef_ExperimentalDebugInfo, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_2fcore_2fframework_2fnode_5fdef_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodeDef_descriptor_, &NodeDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        NodeDef_AttrEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::tensorflow::AttrValue,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                NodeDef_AttrEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodeDef_ExperimentalDebugInfo_descriptor_, &NodeDef_ExperimentalDebugInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2fnode_5fdef_2eproto() {
  delete NodeDef::default_instance_;
  delete NodeDef_reflection_;
  delete NodeDef_ExperimentalDebugInfo::default_instance_;
  delete NodeDef_ExperimentalDebugInfo_reflection_;
}

void protobuf_AddDesc_tensorflow_2fcore_2fframework_2fnode_5fdef_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_tensorflow_2fcore_2fframework_2fnode_5fdef_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n(tensorflow/core/framework/node_def.pro"
    "to\022\ntensorflow\032*tensorflow/core/framewor"
    "k/attr_value.proto\"\322\002\n\007NodeDef\022\014\n\004name\030\001"
    " \001(\t\022\n\n\002op\030\002 \001(\t\022\r\n\005input\030\003 \003(\t\022\016\n\006devic"
    "e\030\004 \001(\t\022+\n\004attr\030\005 \003(\0132\035.tensorflow.NodeD"
    "ef.AttrEntry\022J\n\027experimental_debug_info\030"
    "\006 \001(\0132).tensorflow.NodeDef.ExperimentalD"
    "ebugInfo\032B\n\tAttrEntry\022\013\n\003key\030\001 \001(\t\022$\n\005va"
    "lue\030\002 \001(\0132\025.tensorflow.AttrValue:\0028\001\032Q\n\025"
    "ExperimentalDebugInfo\022\033\n\023original_node_n"
    "ames\030\001 \003(\t\022\033\n\023original_func_names\030\002 \003(\tB"
    "{\n\030org.tensorflow.frameworkB\tNodeProtoP\001"
    "ZOgithub.com/tensorflow/tensorflow/tenso"
    "rflow/go/core/framework/node_def_go_prot"
    "o\370\001\001b\006proto3", 572);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/framework/node_def.proto", &protobuf_RegisterTypes);
  NodeDef::default_instance_ = new NodeDef();
  NodeDef_ExperimentalDebugInfo::default_instance_ = new NodeDef_ExperimentalDebugInfo();
  NodeDef::default_instance_->InitAsDefaultInstance();
  NodeDef_ExperimentalDebugInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2fnode_5fdef_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_2fcore_2fframework_2fnode_5fdef_2eproto {
  StaticDescriptorInitializer_tensorflow_2fcore_2fframework_2fnode_5fdef_2eproto() {
    protobuf_AddDesc_tensorflow_2fcore_2fframework_2fnode_5fdef_2eproto();
  }
} static_descriptor_initializer_tensorflow_2fcore_2fframework_2fnode_5fdef_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeDef_ExperimentalDebugInfo::kOriginalNodeNamesFieldNumber;
const int NodeDef_ExperimentalDebugInfo::kOriginalFuncNamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeDef_ExperimentalDebugInfo::NodeDef_ExperimentalDebugInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.NodeDef.ExperimentalDebugInfo)
}

NodeDef_ExperimentalDebugInfo::NodeDef_ExperimentalDebugInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  original_node_names_(arena),
  original_func_names_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.NodeDef.ExperimentalDebugInfo)
}

void NodeDef_ExperimentalDebugInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NodeDef_ExperimentalDebugInfo::NodeDef_ExperimentalDebugInfo(const NodeDef_ExperimentalDebugInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.NodeDef.ExperimentalDebugInfo)
}

void NodeDef_ExperimentalDebugInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
}

NodeDef_ExperimentalDebugInfo::~NodeDef_ExperimentalDebugInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.NodeDef.ExperimentalDebugInfo)
  SharedDtor();
}

void NodeDef_ExperimentalDebugInfo::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void NodeDef_ExperimentalDebugInfo::ArenaDtor(void* object) {
  NodeDef_ExperimentalDebugInfo* _this = reinterpret_cast< NodeDef_ExperimentalDebugInfo* >(object);
  (void)_this;
}
void NodeDef_ExperimentalDebugInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NodeDef_ExperimentalDebugInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeDef_ExperimentalDebugInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeDef_ExperimentalDebugInfo_descriptor_;
}

const NodeDef_ExperimentalDebugInfo& NodeDef_ExperimentalDebugInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fframework_2fnode_5fdef_2eproto();
  return *default_instance_;
}

NodeDef_ExperimentalDebugInfo* NodeDef_ExperimentalDebugInfo::default_instance_ = NULL;

NodeDef_ExperimentalDebugInfo* NodeDef_ExperimentalDebugInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<NodeDef_ExperimentalDebugInfo>(arena);
}

void NodeDef_ExperimentalDebugInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.NodeDef.ExperimentalDebugInfo)
  original_node_names_.Clear();
  original_func_names_.Clear();
}

bool NodeDef_ExperimentalDebugInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.NodeDef.ExperimentalDebugInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string original_node_names = 1;
      case 1: {
        if (tag == 10) {
         parse_original_node_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_original_node_names()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->original_node_names(this->original_node_names_size() - 1).data(),
            this->original_node_names(this->original_node_names_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.NodeDef.ExperimentalDebugInfo.original_node_names"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_original_node_names;
        if (input->ExpectTag(18)) goto parse_original_func_names;
        break;
      }

      // repeated string original_func_names = 2;
      case 2: {
        if (tag == 18) {
         parse_original_func_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_original_func_names()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->original_func_names(this->original_func_names_size() - 1).data(),
            this->original_func_names(this->original_func_names_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.NodeDef.ExperimentalDebugInfo.original_func_names"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_original_func_names;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.NodeDef.ExperimentalDebugInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.NodeDef.ExperimentalDebugInfo)
  return false;
#undef DO_
}

void NodeDef_ExperimentalDebugInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.NodeDef.ExperimentalDebugInfo)
  // repeated string original_node_names = 1;
  for (int i = 0; i < this->original_node_names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->original_node_names(i).data(), this->original_node_names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.NodeDef.ExperimentalDebugInfo.original_node_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->original_node_names(i), output);
  }

  // repeated string original_func_names = 2;
  for (int i = 0; i < this->original_func_names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->original_func_names(i).data(), this->original_func_names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.NodeDef.ExperimentalDebugInfo.original_func_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->original_func_names(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.NodeDef.ExperimentalDebugInfo)
}

::google::protobuf::uint8* NodeDef_ExperimentalDebugInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.NodeDef.ExperimentalDebugInfo)
  // repeated string original_node_names = 1;
  for (int i = 0; i < this->original_node_names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->original_node_names(i).data(), this->original_node_names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.NodeDef.ExperimentalDebugInfo.original_node_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->original_node_names(i), target);
  }

  // repeated string original_func_names = 2;
  for (int i = 0; i < this->original_func_names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->original_func_names(i).data(), this->original_func_names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.NodeDef.ExperimentalDebugInfo.original_func_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->original_func_names(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.NodeDef.ExperimentalDebugInfo)
  return target;
}

int NodeDef_ExperimentalDebugInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.NodeDef.ExperimentalDebugInfo)
  int total_size = 0;

  // repeated string original_node_names = 1;
  total_size += 1 * this->original_node_names_size();
  for (int i = 0; i < this->original_node_names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->original_node_names(i));
  }

  // repeated string original_func_names = 2;
  total_size += 1 * this->original_func_names_size();
  for (int i = 0; i < this->original_func_names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->original_func_names(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeDef_ExperimentalDebugInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.NodeDef.ExperimentalDebugInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NodeDef_ExperimentalDebugInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeDef_ExperimentalDebugInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.NodeDef.ExperimentalDebugInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.NodeDef.ExperimentalDebugInfo)
    MergeFrom(*source);
  }
}

void NodeDef_ExperimentalDebugInfo::MergeFrom(const NodeDef_ExperimentalDebugInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.NodeDef.ExperimentalDebugInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  original_node_names_.MergeFrom(from.original_node_names_);
  original_func_names_.MergeFrom(from.original_func_names_);
}

void NodeDef_ExperimentalDebugInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.NodeDef.ExperimentalDebugInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeDef_ExperimentalDebugInfo::CopyFrom(const NodeDef_ExperimentalDebugInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.NodeDef.ExperimentalDebugInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeDef_ExperimentalDebugInfo::IsInitialized() const {

  return true;
}

void NodeDef_ExperimentalDebugInfo::Swap(NodeDef_ExperimentalDebugInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NodeDef_ExperimentalDebugInfo temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void NodeDef_ExperimentalDebugInfo::UnsafeArenaSwap(NodeDef_ExperimentalDebugInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NodeDef_ExperimentalDebugInfo::InternalSwap(NodeDef_ExperimentalDebugInfo* other) {
  original_node_names_.UnsafeArenaSwap(&other->original_node_names_);
  original_func_names_.UnsafeArenaSwap(&other->original_func_names_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeDef_ExperimentalDebugInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeDef_ExperimentalDebugInfo_descriptor_;
  metadata.reflection = NodeDef_ExperimentalDebugInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

void NodeDef::_slow_mutable_experimental_debug_info() {
  experimental_debug_info_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::NodeDef_ExperimentalDebugInfo >(
      GetArenaNoVirtual());
}
::tensorflow::NodeDef_ExperimentalDebugInfo* NodeDef::_slow_release_experimental_debug_info() {
  if (experimental_debug_info_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::NodeDef_ExperimentalDebugInfo* temp = new ::tensorflow::NodeDef_ExperimentalDebugInfo;
    temp->MergeFrom(*experimental_debug_info_);
    experimental_debug_info_ = NULL;
    return temp;
  }
}
::tensorflow::NodeDef_ExperimentalDebugInfo* NodeDef::unsafe_arena_release_experimental_debug_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.NodeDef.experimental_debug_info)
  
  ::tensorflow::NodeDef_ExperimentalDebugInfo* temp = experimental_debug_info_;
  experimental_debug_info_ = NULL;
  return temp;
}
void NodeDef::_slow_set_allocated_experimental_debug_info(
    ::google::protobuf::Arena* message_arena, ::tensorflow::NodeDef_ExperimentalDebugInfo** experimental_debug_info) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*experimental_debug_info) == NULL) {
      message_arena->Own(*experimental_debug_info);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*experimental_debug_info)) {
      ::tensorflow::NodeDef_ExperimentalDebugInfo* new_experimental_debug_info = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::NodeDef_ExperimentalDebugInfo >(
            message_arena);
      new_experimental_debug_info->CopyFrom(**experimental_debug_info);
      *experimental_debug_info = new_experimental_debug_info;
    }
}
void NodeDef::unsafe_arena_set_allocated_experimental_debug_info(
    ::tensorflow::NodeDef_ExperimentalDebugInfo* experimental_debug_info) {
  if (GetArenaNoVirtual() == NULL) {
    delete experimental_debug_info_;
  }
  experimental_debug_info_ = experimental_debug_info;
  if (experimental_debug_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.NodeDef.experimental_debug_info)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeDef::kNameFieldNumber;
const int NodeDef::kOpFieldNumber;
const int NodeDef::kInputFieldNumber;
const int NodeDef::kDeviceFieldNumber;
const int NodeDef::kAttrFieldNumber;
const int NodeDef::kExperimentalDebugInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeDef::NodeDef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.NodeDef)
}

NodeDef::NodeDef(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  input_(arena),
  attr_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.NodeDef)
}

void NodeDef::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  experimental_debug_info_ = const_cast< ::tensorflow::NodeDef_ExperimentalDebugInfo*>(&::tensorflow::NodeDef_ExperimentalDebugInfo::default_instance());
}

NodeDef::NodeDef(const NodeDef& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.NodeDef)
}

void NodeDef::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  op_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attr_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  attr_.SetEntryDescriptor(
      &::tensorflow::NodeDef_AttrEntry_descriptor_);
  experimental_debug_info_ = NULL;
}

NodeDef::~NodeDef() {
  // @@protoc_insertion_point(destructor:tensorflow.NodeDef)
  SharedDtor();
}

void NodeDef::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  op_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  device_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
    delete experimental_debug_info_;
  }
}

void NodeDef::ArenaDtor(void* object) {
  NodeDef* _this = reinterpret_cast< NodeDef* >(object);
  (void)_this;
}
void NodeDef::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NodeDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeDef_descriptor_;
}

const NodeDef& NodeDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fframework_2fnode_5fdef_2eproto();
  return *default_instance_;
}

NodeDef* NodeDef::default_instance_ = NULL;

NodeDef* NodeDef::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<NodeDef>(arena);
}

void NodeDef::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.NodeDef)
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  op_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  device_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && experimental_debug_info_ != NULL) delete experimental_debug_info_;
  experimental_debug_info_ = NULL;
  input_.Clear();
  attr_.Clear();
}

bool NodeDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.NodeDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.NodeDef.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_op;
        break;
      }

      // optional string op = 2;
      case 2: {
        if (tag == 18) {
         parse_op:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_op()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->op().data(), this->op().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.NodeDef.op"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_input;
        break;
      }

      // repeated string input = 3;
      case 3: {
        if (tag == 26) {
         parse_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_input()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->input(this->input_size() - 1).data(),
            this->input(this->input_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.NodeDef.input"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_input;
        if (input->ExpectTag(34)) goto parse_device;
        break;
      }

      // optional string device = 4;
      case 4: {
        if (tag == 34) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.NodeDef.device"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_attr;
        break;
      }

      // map<string, .tensorflow.AttrValue> attr = 5;
      case 5: {
        if (tag == 42) {
         parse_attr:
          DO_(input->IncrementRecursionDepth());
         parse_loop_attr:
          NodeDef_AttrEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::tensorflow::AttrValue,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue > > parser(&attr_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.NodeDef.AttrEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_attr;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(50)) goto parse_experimental_debug_info;
        break;
      }

      // optional .tensorflow.NodeDef.ExperimentalDebugInfo experimental_debug_info = 6;
      case 6: {
        if (tag == 50) {
         parse_experimental_debug_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_experimental_debug_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.NodeDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.NodeDef)
  return false;
#undef DO_
}

void NodeDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.NodeDef)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.NodeDef.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string op = 2;
  if (this->op().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->op().data(), this->op().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.NodeDef.op");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->op(), output);
  }

  // repeated string input = 3;
  for (int i = 0; i < this->input_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input(i).data(), this->input(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.NodeDef.input");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->input(i), output);
  }

  // optional string device = 4;
  if (this->device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.NodeDef.device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->device(), output);
  }

  // map<string, .tensorflow.AttrValue> attr = 5;
  if (!this->attr().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.NodeDef.AttrEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->attr().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->attr().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_iterator
          it = this->attr().begin();
          it != this->attr().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<NodeDef_AttrEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attr_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<NodeDef_AttrEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_iterator
          it = this->attr().begin();
          it != this->attr().end(); ++it) {
        entry.reset(attr_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional .tensorflow.NodeDef.ExperimentalDebugInfo experimental_debug_info = 6;
  if (this->has_experimental_debug_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->experimental_debug_info_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.NodeDef)
}

::google::protobuf::uint8* NodeDef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.NodeDef)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.NodeDef.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string op = 2;
  if (this->op().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->op().data(), this->op().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.NodeDef.op");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->op(), target);
  }

  // repeated string input = 3;
  for (int i = 0; i < this->input_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input(i).data(), this->input(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.NodeDef.input");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->input(i), target);
  }

  // optional string device = 4;
  if (this->device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.NodeDef.device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->device(), target);
  }

  // map<string, .tensorflow.AttrValue> attr = 5;
  if (!this->attr().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.NodeDef.AttrEntry.key");
      }
    };

    if (deterministic &&
        this->attr().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->attr().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_iterator
          it = this->attr().begin();
          it != this->attr().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<NodeDef_AttrEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attr_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<NodeDef_AttrEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_iterator
          it = this->attr().begin();
          it != this->attr().end(); ++it) {
        entry.reset(attr_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional .tensorflow.NodeDef.ExperimentalDebugInfo experimental_debug_info = 6;
  if (this->has_experimental_debug_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->experimental_debug_info_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.NodeDef)
  return target;
}

int NodeDef::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.NodeDef)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string op = 2;
  if (this->op().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->op());
  }

  // optional string device = 4;
  if (this->device().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device());
  }

  // optional .tensorflow.NodeDef.ExperimentalDebugInfo experimental_debug_info = 6;
  if (this->has_experimental_debug_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->experimental_debug_info_);
  }

  // repeated string input = 3;
  total_size += 1 * this->input_size();
  for (int i = 0; i < this->input_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->input(i));
  }

  // map<string, .tensorflow.AttrValue> attr = 5;
  total_size += 1 * this->attr_size();
  {
    ::google::protobuf::scoped_ptr<NodeDef_AttrEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_iterator
        it = this->attr().begin();
        it != this->attr().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(attr_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeDef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.NodeDef)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NodeDef* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeDef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.NodeDef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.NodeDef)
    MergeFrom(*source);
  }
}

void NodeDef::MergeFrom(const NodeDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.NodeDef)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  input_.MergeFrom(from.input_);
  attr_.MergeFrom(from.attr_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.op().size() > 0) {
    set_op(from.op());
  }
  if (from.device().size() > 0) {
    set_device(from.device());
  }
  if (from.has_experimental_debug_info()) {
    mutable_experimental_debug_info()->::tensorflow::NodeDef_ExperimentalDebugInfo::MergeFrom(from.experimental_debug_info());
  }
}

void NodeDef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.NodeDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeDef::CopyFrom(const NodeDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.NodeDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeDef::IsInitialized() const {

  return true;
}

void NodeDef::Swap(NodeDef* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NodeDef temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void NodeDef::UnsafeArenaSwap(NodeDef* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NodeDef::InternalSwap(NodeDef* other) {
  name_.Swap(&other->name_);
  op_.Swap(&other->op_);
  input_.UnsafeArenaSwap(&other->input_);
  device_.Swap(&other->device_);
  attr_.Swap(&other->attr_);
  std::swap(experimental_debug_info_, other->experimental_debug_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeDef_descriptor_;
  metadata.reflection = NodeDef_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeDef_ExperimentalDebugInfo

// repeated string original_node_names = 1;
int NodeDef_ExperimentalDebugInfo::original_node_names_size() const {
  return original_node_names_.size();
}
void NodeDef_ExperimentalDebugInfo::clear_original_node_names() {
  original_node_names_.Clear();
}
 const ::std::string& NodeDef_ExperimentalDebugInfo::original_node_names(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeDef.ExperimentalDebugInfo.original_node_names)
  return original_node_names_.Get(index);
}
 ::std::string* NodeDef_ExperimentalDebugInfo::mutable_original_node_names(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.NodeDef.ExperimentalDebugInfo.original_node_names)
  return original_node_names_.Mutable(index);
}
 void NodeDef_ExperimentalDebugInfo::set_original_node_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.NodeDef.ExperimentalDebugInfo.original_node_names)
  original_node_names_.Mutable(index)->assign(value);
}
 void NodeDef_ExperimentalDebugInfo::set_original_node_names(int index, const char* value) {
  original_node_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.NodeDef.ExperimentalDebugInfo.original_node_names)
}
 void NodeDef_ExperimentalDebugInfo::set_original_node_names(int index, const char* value, size_t size) {
  original_node_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.NodeDef.ExperimentalDebugInfo.original_node_names)
}
 ::std::string* NodeDef_ExperimentalDebugInfo::add_original_node_names() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.NodeDef.ExperimentalDebugInfo.original_node_names)
  return original_node_names_.Add();
}
 void NodeDef_ExperimentalDebugInfo::add_original_node_names(const ::std::string& value) {
  original_node_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.NodeDef.ExperimentalDebugInfo.original_node_names)
}
 void NodeDef_ExperimentalDebugInfo::add_original_node_names(const char* value) {
  original_node_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.NodeDef.ExperimentalDebugInfo.original_node_names)
}
 void NodeDef_ExperimentalDebugInfo::add_original_node_names(const char* value, size_t size) {
  original_node_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.NodeDef.ExperimentalDebugInfo.original_node_names)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodeDef_ExperimentalDebugInfo::original_node_names() const {
  // @@protoc_insertion_point(field_list:tensorflow.NodeDef.ExperimentalDebugInfo.original_node_names)
  return original_node_names_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
NodeDef_ExperimentalDebugInfo::mutable_original_node_names() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.NodeDef.ExperimentalDebugInfo.original_node_names)
  return &original_node_names_;
}

// repeated string original_func_names = 2;
int NodeDef_ExperimentalDebugInfo::original_func_names_size() const {
  return original_func_names_.size();
}
void NodeDef_ExperimentalDebugInfo::clear_original_func_names() {
  original_func_names_.Clear();
}
 const ::std::string& NodeDef_ExperimentalDebugInfo::original_func_names(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeDef.ExperimentalDebugInfo.original_func_names)
  return original_func_names_.Get(index);
}
 ::std::string* NodeDef_ExperimentalDebugInfo::mutable_original_func_names(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.NodeDef.ExperimentalDebugInfo.original_func_names)
  return original_func_names_.Mutable(index);
}
 void NodeDef_ExperimentalDebugInfo::set_original_func_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.NodeDef.ExperimentalDebugInfo.original_func_names)
  original_func_names_.Mutable(index)->assign(value);
}
 void NodeDef_ExperimentalDebugInfo::set_original_func_names(int index, const char* value) {
  original_func_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.NodeDef.ExperimentalDebugInfo.original_func_names)
}
 void NodeDef_ExperimentalDebugInfo::set_original_func_names(int index, const char* value, size_t size) {
  original_func_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.NodeDef.ExperimentalDebugInfo.original_func_names)
}
 ::std::string* NodeDef_ExperimentalDebugInfo::add_original_func_names() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.NodeDef.ExperimentalDebugInfo.original_func_names)
  return original_func_names_.Add();
}
 void NodeDef_ExperimentalDebugInfo::add_original_func_names(const ::std::string& value) {
  original_func_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.NodeDef.ExperimentalDebugInfo.original_func_names)
}
 void NodeDef_ExperimentalDebugInfo::add_original_func_names(const char* value) {
  original_func_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.NodeDef.ExperimentalDebugInfo.original_func_names)
}
 void NodeDef_ExperimentalDebugInfo::add_original_func_names(const char* value, size_t size) {
  original_func_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.NodeDef.ExperimentalDebugInfo.original_func_names)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodeDef_ExperimentalDebugInfo::original_func_names() const {
  // @@protoc_insertion_point(field_list:tensorflow.NodeDef.ExperimentalDebugInfo.original_func_names)
  return original_func_names_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
NodeDef_ExperimentalDebugInfo::mutable_original_func_names() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.NodeDef.ExperimentalDebugInfo.original_func_names)
  return &original_func_names_;
}

// -------------------------------------------------------------------

// NodeDef

// optional string name = 1;
void NodeDef::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& NodeDef::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeDef.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NodeDef::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.NodeDef.name)
}
 void NodeDef::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.NodeDef.name)
}
 void NodeDef::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.NodeDef.name)
}
 ::std::string* NodeDef::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.NodeDef.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* NodeDef::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.NodeDef.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* NodeDef::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.NodeDef.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void NodeDef::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.NodeDef.name)
}
 void NodeDef::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.NodeDef.name)
}

// optional string op = 2;
void NodeDef::clear_op() {
  op_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& NodeDef::op() const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeDef.op)
  return op_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NodeDef::set_op(const ::std::string& value) {
  
  op_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.NodeDef.op)
}
 void NodeDef::set_op(const char* value) {
  
  op_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.NodeDef.op)
}
 void NodeDef::set_op(const char* value,
    size_t size) {
  
  op_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.NodeDef.op)
}
 ::std::string* NodeDef::mutable_op() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.NodeDef.op)
  return op_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* NodeDef::release_op() {
  // @@protoc_insertion_point(field_release:tensorflow.NodeDef.op)
  
  return op_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* NodeDef::unsafe_arena_release_op() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.NodeDef.op)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return op_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void NodeDef::set_allocated_op(::std::string* op) {
  if (op != NULL) {
    
  } else {
    
  }
  op_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), op,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.NodeDef.op)
}
 void NodeDef::unsafe_arena_set_allocated_op(
    ::std::string* op) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (op != NULL) {
    
  } else {
    
  }
  op_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      op, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.NodeDef.op)
}

// repeated string input = 3;
int NodeDef::input_size() const {
  return input_.size();
}
void NodeDef::clear_input() {
  input_.Clear();
}
 const ::std::string& NodeDef::input(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeDef.input)
  return input_.Get(index);
}
 ::std::string* NodeDef::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.NodeDef.input)
  return input_.Mutable(index);
}
 void NodeDef::set_input(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.NodeDef.input)
  input_.Mutable(index)->assign(value);
}
 void NodeDef::set_input(int index, const char* value) {
  input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.NodeDef.input)
}
 void NodeDef::set_input(int index, const char* value, size_t size) {
  input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.NodeDef.input)
}
 ::std::string* NodeDef::add_input() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.NodeDef.input)
  return input_.Add();
}
 void NodeDef::add_input(const ::std::string& value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.NodeDef.input)
}
 void NodeDef::add_input(const char* value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.NodeDef.input)
}
 void NodeDef::add_input(const char* value, size_t size) {
  input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.NodeDef.input)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodeDef::input() const {
  // @@protoc_insertion_point(field_list:tensorflow.NodeDef.input)
  return input_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
NodeDef::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.NodeDef.input)
  return &input_;
}

// optional string device = 4;
void NodeDef::clear_device() {
  device_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& NodeDef::device() const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeDef.device)
  return device_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NodeDef::set_device(const ::std::string& value) {
  
  device_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.NodeDef.device)
}
 void NodeDef::set_device(const char* value) {
  
  device_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.NodeDef.device)
}
 void NodeDef::set_device(const char* value,
    size_t size) {
  
  device_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.NodeDef.device)
}
 ::std::string* NodeDef::mutable_device() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.NodeDef.device)
  return device_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* NodeDef::release_device() {
  // @@protoc_insertion_point(field_release:tensorflow.NodeDef.device)
  
  return device_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* NodeDef::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.NodeDef.device)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return device_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void NodeDef::set_allocated_device(::std::string* device) {
  if (device != NULL) {
    
  } else {
    
  }
  device_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.NodeDef.device)
}
 void NodeDef::unsafe_arena_set_allocated_device(
    ::std::string* device) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (device != NULL) {
    
  } else {
    
  }
  device_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      device, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.NodeDef.device)
}

// map<string, .tensorflow.AttrValue> attr = 5;
int NodeDef::attr_size() const {
  return attr_.size();
}
void NodeDef::clear_attr() {
  attr_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >&
NodeDef::attr() const {
  // @@protoc_insertion_point(field_map:tensorflow.NodeDef.attr)
  return attr_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >*
NodeDef::mutable_attr() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.NodeDef.attr)
  return attr_.MutableMap();
}

// optional .tensorflow.NodeDef.ExperimentalDebugInfo experimental_debug_info = 6;
bool NodeDef::has_experimental_debug_info() const {
  return !_is_default_instance_ && experimental_debug_info_ != NULL;
}
void NodeDef::clear_experimental_debug_info() {
  if (GetArenaNoVirtual() == NULL && experimental_debug_info_ != NULL) delete experimental_debug_info_;
  experimental_debug_info_ = NULL;
}
const ::tensorflow::NodeDef_ExperimentalDebugInfo& NodeDef::experimental_debug_info() const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeDef.experimental_debug_info)
  return experimental_debug_info_ != NULL ? *experimental_debug_info_ : *default_instance_->experimental_debug_info_;
}
::tensorflow::NodeDef_ExperimentalDebugInfo* NodeDef::mutable_experimental_debug_info() {
  
  if (experimental_debug_info_ == NULL) {
    _slow_mutable_experimental_debug_info();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.NodeDef.experimental_debug_info)
  return experimental_debug_info_;
}
::tensorflow::NodeDef_ExperimentalDebugInfo* NodeDef::release_experimental_debug_info() {
  // @@protoc_insertion_point(field_release:tensorflow.NodeDef.experimental_debug_info)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_experimental_debug_info();
  } else {
    ::tensorflow::NodeDef_ExperimentalDebugInfo* temp = experimental_debug_info_;
    experimental_debug_info_ = NULL;
    return temp;
  }
}
 void NodeDef::set_allocated_experimental_debug_info(::tensorflow::NodeDef_ExperimentalDebugInfo* experimental_debug_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete experimental_debug_info_;
  }
  if (experimental_debug_info != NULL) {
    _slow_set_allocated_experimental_debug_info(message_arena, &experimental_debug_info);
  }
  experimental_debug_info_ = experimental_debug_info;
  if (experimental_debug_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.NodeDef.experimental_debug_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
