// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/apis/session_service.proto

#ifndef PROTOBUF_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto__INCLUDED
#define PROTOBUF_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow_serving/apis/model.pb.h"
#include "tensorflow/core/protobuf/config.pb.h"
#include "tensorflow/core/protobuf/named_tensor.pb.h"
// @@protoc_insertion_point(includes)

namespace tensorflow {
namespace serving {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto();
void protobuf_AssignDesc_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto();
void protobuf_ShutdownFile_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto();

class SessionRunRequest;
class SessionRunResponse;

// ===================================================================

class SessionRunRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.SessionRunRequest) */ {
 public:
  SessionRunRequest();
  virtual ~SessionRunRequest();

  SessionRunRequest(const SessionRunRequest& from);

  inline SessionRunRequest& operator=(const SessionRunRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionRunRequest& default_instance();

  void UnsafeArenaSwap(SessionRunRequest* other);
  void Swap(SessionRunRequest* other);

  // implements Message ----------------------------------------------

  inline SessionRunRequest* New() const { return New(NULL); }

  SessionRunRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SessionRunRequest& from);
  void MergeFrom(const SessionRunRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SessionRunRequest* other);
  protected:
  explicit SessionRunRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .tensorflow.serving.ModelSpec model_spec = 1;
  bool has_model_spec() const;
  void clear_model_spec();
  static const int kModelSpecFieldNumber = 1;
  private:
  void _slow_mutable_model_spec();
  void _slow_set_allocated_model_spec(
      ::google::protobuf::Arena* message_arena, ::tensorflow::serving::ModelSpec** model_spec);
  ::tensorflow::serving::ModelSpec* _slow_release_model_spec();
  public:
  const ::tensorflow::serving::ModelSpec& model_spec() const;
  ::tensorflow::serving::ModelSpec* mutable_model_spec();
  ::tensorflow::serving::ModelSpec* release_model_spec();
  void set_allocated_model_spec(::tensorflow::serving::ModelSpec* model_spec);
  ::tensorflow::serving::ModelSpec* unsafe_arena_release_model_spec();
  void unsafe_arena_set_allocated_model_spec(
      ::tensorflow::serving::ModelSpec* model_spec);

  // repeated .tensorflow.NamedTensorProto feed = 2;
  int feed_size() const;
  void clear_feed();
  static const int kFeedFieldNumber = 2;
  const ::tensorflow::NamedTensorProto& feed(int index) const;
  ::tensorflow::NamedTensorProto* mutable_feed(int index);
  ::tensorflow::NamedTensorProto* add_feed();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::NamedTensorProto >*
      mutable_feed();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::NamedTensorProto >&
      feed() const;

  // repeated string fetch = 3;
  int fetch_size() const;
  void clear_fetch();
  static const int kFetchFieldNumber = 3;
  const ::std::string& fetch(int index) const;
  ::std::string* mutable_fetch(int index);
  void set_fetch(int index, const ::std::string& value);
  void set_fetch(int index, const char* value);
  void set_fetch(int index, const char* value, size_t size);
  ::std::string* add_fetch();
  void add_fetch(const ::std::string& value);
  void add_fetch(const char* value);
  void add_fetch(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& fetch() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_fetch();

  // repeated string target = 4;
  int target_size() const;
  void clear_target();
  static const int kTargetFieldNumber = 4;
  const ::std::string& target(int index) const;
  ::std::string* mutable_target(int index);
  void set_target(int index, const ::std::string& value);
  void set_target(int index, const char* value);
  void set_target(int index, const char* value, size_t size);
  ::std::string* add_target();
  void add_target(const ::std::string& value);
  void add_target(const char* value);
  void add_target(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& target() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_target();

  // optional .tensorflow.RunOptions options = 5;
  bool has_options() const;
  void clear_options();
  static const int kOptionsFieldNumber = 5;
  private:
  void _slow_mutable_options();
  void _slow_set_allocated_options(
      ::google::protobuf::Arena* message_arena, ::tensorflow::RunOptions** options);
  ::tensorflow::RunOptions* _slow_release_options();
  public:
  const ::tensorflow::RunOptions& options() const;
  ::tensorflow::RunOptions* mutable_options();
  ::tensorflow::RunOptions* release_options();
  void set_allocated_options(::tensorflow::RunOptions* options);
  ::tensorflow::RunOptions* unsafe_arena_release_options();
  void unsafe_arena_set_allocated_options(
      ::tensorflow::RunOptions* options);

  // @@protoc_insertion_point(class_scope:tensorflow.serving.SessionRunRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::tensorflow::serving::ModelSpec* model_spec_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::NamedTensorProto > feed_;
  ::google::protobuf::RepeatedPtrField< ::std::string> fetch_;
  ::google::protobuf::RepeatedPtrField< ::std::string> target_;
  ::tensorflow::RunOptions* options_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto();
  friend void protobuf_AssignDesc_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto();

  void InitAsDefaultInstance();
  static SessionRunRequest* default_instance_;
};
// -------------------------------------------------------------------

class SessionRunResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.SessionRunResponse) */ {
 public:
  SessionRunResponse();
  virtual ~SessionRunResponse();

  SessionRunResponse(const SessionRunResponse& from);

  inline SessionRunResponse& operator=(const SessionRunResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionRunResponse& default_instance();

  void UnsafeArenaSwap(SessionRunResponse* other);
  void Swap(SessionRunResponse* other);

  // implements Message ----------------------------------------------

  inline SessionRunResponse* New() const { return New(NULL); }

  SessionRunResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SessionRunResponse& from);
  void MergeFrom(const SessionRunResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SessionRunResponse* other);
  protected:
  explicit SessionRunResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .tensorflow.serving.ModelSpec model_spec = 3;
  bool has_model_spec() const;
  void clear_model_spec();
  static const int kModelSpecFieldNumber = 3;
  private:
  void _slow_mutable_model_spec();
  void _slow_set_allocated_model_spec(
      ::google::protobuf::Arena* message_arena, ::tensorflow::serving::ModelSpec** model_spec);
  ::tensorflow::serving::ModelSpec* _slow_release_model_spec();
  public:
  const ::tensorflow::serving::ModelSpec& model_spec() const;
  ::tensorflow::serving::ModelSpec* mutable_model_spec();
  ::tensorflow::serving::ModelSpec* release_model_spec();
  void set_allocated_model_spec(::tensorflow::serving::ModelSpec* model_spec);
  ::tensorflow::serving::ModelSpec* unsafe_arena_release_model_spec();
  void unsafe_arena_set_allocated_model_spec(
      ::tensorflow::serving::ModelSpec* model_spec);

  // repeated .tensorflow.NamedTensorProto tensor = 1;
  int tensor_size() const;
  void clear_tensor();
  static const int kTensorFieldNumber = 1;
  const ::tensorflow::NamedTensorProto& tensor(int index) const;
  ::tensorflow::NamedTensorProto* mutable_tensor(int index);
  ::tensorflow::NamedTensorProto* add_tensor();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::NamedTensorProto >*
      mutable_tensor();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::NamedTensorProto >&
      tensor() const;

  // optional .tensorflow.RunMetadata metadata = 2;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 2;
  private:
  void _slow_mutable_metadata();
  void _slow_set_allocated_metadata(
      ::google::protobuf::Arena* message_arena, ::tensorflow::RunMetadata** metadata);
  ::tensorflow::RunMetadata* _slow_release_metadata();
  public:
  const ::tensorflow::RunMetadata& metadata() const;
  ::tensorflow::RunMetadata* mutable_metadata();
  ::tensorflow::RunMetadata* release_metadata();
  void set_allocated_metadata(::tensorflow::RunMetadata* metadata);
  ::tensorflow::RunMetadata* unsafe_arena_release_metadata();
  void unsafe_arena_set_allocated_metadata(
      ::tensorflow::RunMetadata* metadata);

  // @@protoc_insertion_point(class_scope:tensorflow.serving.SessionRunResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::tensorflow::serving::ModelSpec* model_spec_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::NamedTensorProto > tensor_;
  ::tensorflow::RunMetadata* metadata_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto();
  friend void protobuf_AssignDesc_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto();

  void InitAsDefaultInstance();
  static SessionRunResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionRunRequest

// optional .tensorflow.serving.ModelSpec model_spec = 1;
inline bool SessionRunRequest::has_model_spec() const {
  return !_is_default_instance_ && model_spec_ != NULL;
}
inline void SessionRunRequest::clear_model_spec() {
  if (GetArenaNoVirtual() == NULL && model_spec_ != NULL) delete model_spec_;
  model_spec_ = NULL;
}
inline const ::tensorflow::serving::ModelSpec& SessionRunRequest::model_spec() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SessionRunRequest.model_spec)
  return model_spec_ != NULL ? *model_spec_ : *default_instance_->model_spec_;
}
inline ::tensorflow::serving::ModelSpec* SessionRunRequest::mutable_model_spec() {
  
  if (model_spec_ == NULL) {
    _slow_mutable_model_spec();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SessionRunRequest.model_spec)
  return model_spec_;
}
inline ::tensorflow::serving::ModelSpec* SessionRunRequest::release_model_spec() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.SessionRunRequest.model_spec)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_model_spec();
  } else {
    ::tensorflow::serving::ModelSpec* temp = model_spec_;
    model_spec_ = NULL;
    return temp;
  }
}
inline  void SessionRunRequest::set_allocated_model_spec(::tensorflow::serving::ModelSpec* model_spec) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete model_spec_;
  }
  if (model_spec != NULL) {
    _slow_set_allocated_model_spec(message_arena, &model_spec);
  }
  model_spec_ = model_spec;
  if (model_spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.SessionRunRequest.model_spec)
}

// repeated .tensorflow.NamedTensorProto feed = 2;
inline int SessionRunRequest::feed_size() const {
  return feed_.size();
}
inline void SessionRunRequest::clear_feed() {
  feed_.Clear();
}
inline const ::tensorflow::NamedTensorProto& SessionRunRequest::feed(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SessionRunRequest.feed)
  return feed_.Get(index);
}
inline ::tensorflow::NamedTensorProto* SessionRunRequest::mutable_feed(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SessionRunRequest.feed)
  return feed_.Mutable(index);
}
inline ::tensorflow::NamedTensorProto* SessionRunRequest::add_feed() {
  // @@protoc_insertion_point(field_add:tensorflow.serving.SessionRunRequest.feed)
  return feed_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::NamedTensorProto >*
SessionRunRequest::mutable_feed() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.SessionRunRequest.feed)
  return &feed_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::NamedTensorProto >&
SessionRunRequest::feed() const {
  // @@protoc_insertion_point(field_list:tensorflow.serving.SessionRunRequest.feed)
  return feed_;
}

// repeated string fetch = 3;
inline int SessionRunRequest::fetch_size() const {
  return fetch_.size();
}
inline void SessionRunRequest::clear_fetch() {
  fetch_.Clear();
}
inline const ::std::string& SessionRunRequest::fetch(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SessionRunRequest.fetch)
  return fetch_.Get(index);
}
inline ::std::string* SessionRunRequest::mutable_fetch(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SessionRunRequest.fetch)
  return fetch_.Mutable(index);
}
inline void SessionRunRequest::set_fetch(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.serving.SessionRunRequest.fetch)
  fetch_.Mutable(index)->assign(value);
}
inline void SessionRunRequest::set_fetch(int index, const char* value) {
  fetch_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.SessionRunRequest.fetch)
}
inline void SessionRunRequest::set_fetch(int index, const char* value, size_t size) {
  fetch_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.SessionRunRequest.fetch)
}
inline ::std::string* SessionRunRequest::add_fetch() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.serving.SessionRunRequest.fetch)
  return fetch_.Add();
}
inline void SessionRunRequest::add_fetch(const ::std::string& value) {
  fetch_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.serving.SessionRunRequest.fetch)
}
inline void SessionRunRequest::add_fetch(const char* value) {
  fetch_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.serving.SessionRunRequest.fetch)
}
inline void SessionRunRequest::add_fetch(const char* value, size_t size) {
  fetch_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.serving.SessionRunRequest.fetch)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SessionRunRequest::fetch() const {
  // @@protoc_insertion_point(field_list:tensorflow.serving.SessionRunRequest.fetch)
  return fetch_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SessionRunRequest::mutable_fetch() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.SessionRunRequest.fetch)
  return &fetch_;
}

// repeated string target = 4;
inline int SessionRunRequest::target_size() const {
  return target_.size();
}
inline void SessionRunRequest::clear_target() {
  target_.Clear();
}
inline const ::std::string& SessionRunRequest::target(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SessionRunRequest.target)
  return target_.Get(index);
}
inline ::std::string* SessionRunRequest::mutable_target(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SessionRunRequest.target)
  return target_.Mutable(index);
}
inline void SessionRunRequest::set_target(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.serving.SessionRunRequest.target)
  target_.Mutable(index)->assign(value);
}
inline void SessionRunRequest::set_target(int index, const char* value) {
  target_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.SessionRunRequest.target)
}
inline void SessionRunRequest::set_target(int index, const char* value, size_t size) {
  target_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.SessionRunRequest.target)
}
inline ::std::string* SessionRunRequest::add_target() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.serving.SessionRunRequest.target)
  return target_.Add();
}
inline void SessionRunRequest::add_target(const ::std::string& value) {
  target_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.serving.SessionRunRequest.target)
}
inline void SessionRunRequest::add_target(const char* value) {
  target_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.serving.SessionRunRequest.target)
}
inline void SessionRunRequest::add_target(const char* value, size_t size) {
  target_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.serving.SessionRunRequest.target)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SessionRunRequest::target() const {
  // @@protoc_insertion_point(field_list:tensorflow.serving.SessionRunRequest.target)
  return target_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SessionRunRequest::mutable_target() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.SessionRunRequest.target)
  return &target_;
}

// optional .tensorflow.RunOptions options = 5;
inline bool SessionRunRequest::has_options() const {
  return !_is_default_instance_ && options_ != NULL;
}
inline void SessionRunRequest::clear_options() {
  if (GetArenaNoVirtual() == NULL && options_ != NULL) delete options_;
  options_ = NULL;
}
inline const ::tensorflow::RunOptions& SessionRunRequest::options() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SessionRunRequest.options)
  return options_ != NULL ? *options_ : *default_instance_->options_;
}
inline ::tensorflow::RunOptions* SessionRunRequest::mutable_options() {
  
  if (options_ == NULL) {
    _slow_mutable_options();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SessionRunRequest.options)
  return options_;
}
inline ::tensorflow::RunOptions* SessionRunRequest::release_options() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.SessionRunRequest.options)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_options();
  } else {
    ::tensorflow::RunOptions* temp = options_;
    options_ = NULL;
    return temp;
  }
}
inline  void SessionRunRequest::set_allocated_options(::tensorflow::RunOptions* options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete options_;
  }
  if (options != NULL) {
    _slow_set_allocated_options(message_arena, &options);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.SessionRunRequest.options)
}

// -------------------------------------------------------------------

// SessionRunResponse

// optional .tensorflow.serving.ModelSpec model_spec = 3;
inline bool SessionRunResponse::has_model_spec() const {
  return !_is_default_instance_ && model_spec_ != NULL;
}
inline void SessionRunResponse::clear_model_spec() {
  if (GetArenaNoVirtual() == NULL && model_spec_ != NULL) delete model_spec_;
  model_spec_ = NULL;
}
inline const ::tensorflow::serving::ModelSpec& SessionRunResponse::model_spec() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SessionRunResponse.model_spec)
  return model_spec_ != NULL ? *model_spec_ : *default_instance_->model_spec_;
}
inline ::tensorflow::serving::ModelSpec* SessionRunResponse::mutable_model_spec() {
  
  if (model_spec_ == NULL) {
    _slow_mutable_model_spec();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SessionRunResponse.model_spec)
  return model_spec_;
}
inline ::tensorflow::serving::ModelSpec* SessionRunResponse::release_model_spec() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.SessionRunResponse.model_spec)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_model_spec();
  } else {
    ::tensorflow::serving::ModelSpec* temp = model_spec_;
    model_spec_ = NULL;
    return temp;
  }
}
inline  void SessionRunResponse::set_allocated_model_spec(::tensorflow::serving::ModelSpec* model_spec) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete model_spec_;
  }
  if (model_spec != NULL) {
    _slow_set_allocated_model_spec(message_arena, &model_spec);
  }
  model_spec_ = model_spec;
  if (model_spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.SessionRunResponse.model_spec)
}

// repeated .tensorflow.NamedTensorProto tensor = 1;
inline int SessionRunResponse::tensor_size() const {
  return tensor_.size();
}
inline void SessionRunResponse::clear_tensor() {
  tensor_.Clear();
}
inline const ::tensorflow::NamedTensorProto& SessionRunResponse::tensor(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SessionRunResponse.tensor)
  return tensor_.Get(index);
}
inline ::tensorflow::NamedTensorProto* SessionRunResponse::mutable_tensor(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SessionRunResponse.tensor)
  return tensor_.Mutable(index);
}
inline ::tensorflow::NamedTensorProto* SessionRunResponse::add_tensor() {
  // @@protoc_insertion_point(field_add:tensorflow.serving.SessionRunResponse.tensor)
  return tensor_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::NamedTensorProto >*
SessionRunResponse::mutable_tensor() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.SessionRunResponse.tensor)
  return &tensor_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::NamedTensorProto >&
SessionRunResponse::tensor() const {
  // @@protoc_insertion_point(field_list:tensorflow.serving.SessionRunResponse.tensor)
  return tensor_;
}

// optional .tensorflow.RunMetadata metadata = 2;
inline bool SessionRunResponse::has_metadata() const {
  return !_is_default_instance_ && metadata_ != NULL;
}
inline void SessionRunResponse::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
inline const ::tensorflow::RunMetadata& SessionRunResponse::metadata() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SessionRunResponse.metadata)
  return metadata_ != NULL ? *metadata_ : *default_instance_->metadata_;
}
inline ::tensorflow::RunMetadata* SessionRunResponse::mutable_metadata() {
  
  if (metadata_ == NULL) {
    _slow_mutable_metadata();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SessionRunResponse.metadata)
  return metadata_;
}
inline ::tensorflow::RunMetadata* SessionRunResponse::release_metadata() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.SessionRunResponse.metadata)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_metadata();
  } else {
    ::tensorflow::RunMetadata* temp = metadata_;
    metadata_ = NULL;
    return temp;
  }
}
inline  void SessionRunResponse::set_allocated_metadata(::tensorflow::RunMetadata* metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete metadata_;
  }
  if (metadata != NULL) {
    _slow_set_allocated_metadata(message_arena, &metadata);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.SessionRunResponse.metadata)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serving
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto__INCLUDED
