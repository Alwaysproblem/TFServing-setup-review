// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tensorflow_serving/apis/session_service.proto
#ifndef GRPC_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto__INCLUDED
#define GRPC_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto__INCLUDED

#include "tensorflow_serving/apis/session_service.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace tensorflow {
namespace serving {

// SessionService defines a service with which a client can interact to execute
// Tensorflow model inference. The SessionService::SessionRun method is similar
// to MasterService::RunStep of Tensorflow, except that all sessions are ready
// to run, and you request a specific model/session with ModelSpec.
class SessionService final {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Runs inference of a given model.
    virtual ::grpc::Status SessionRun(::grpc::ClientContext* context, const ::tensorflow::serving::SessionRunRequest& request, ::tensorflow::serving::SessionRunResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::serving::SessionRunResponse>> AsyncSessionRun(::grpc::ClientContext* context, const ::tensorflow::serving::SessionRunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::serving::SessionRunResponse>>(AsyncSessionRunRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::serving::SessionRunResponse>* AsyncSessionRunRaw(::grpc::ClientContext* context, const ::tensorflow::serving::SessionRunRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SessionRun(::grpc::ClientContext* context, const ::tensorflow::serving::SessionRunRequest& request, ::tensorflow::serving::SessionRunResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::serving::SessionRunResponse>> AsyncSessionRun(::grpc::ClientContext* context, const ::tensorflow::serving::SessionRunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::serving::SessionRunResponse>>(AsyncSessionRunRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::serving::SessionRunResponse>* AsyncSessionRunRaw(::grpc::ClientContext* context, const ::tensorflow::serving::SessionRunRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_SessionRun_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Runs inference of a given model.
    virtual ::grpc::Status SessionRun(::grpc::ServerContext* context, const ::tensorflow::serving::SessionRunRequest* request, ::tensorflow::serving::SessionRunResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SessionRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SessionRun() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SessionRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SessionRun(::grpc::ServerContext* context, const ::tensorflow::serving::SessionRunRequest* request, ::tensorflow::serving::SessionRunResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSessionRun(::grpc::ServerContext* context, ::tensorflow::serving::SessionRunRequest* request, ::grpc::ServerAsyncResponseWriter< ::tensorflow::serving::SessionRunResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SessionRun<Service > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_SessionRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SessionRun() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SessionRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SessionRun(::grpc::ServerContext* context, const ::tensorflow::serving::SessionRunRequest* request, ::tensorflow::serving::SessionRunResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SessionRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SessionRun() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::tensorflow::serving::SessionRunRequest, ::tensorflow::serving::SessionRunResponse>(std::bind(&WithStreamedUnaryMethod_SessionRun<BaseClass>::StreamedSessionRun, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SessionRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SessionRun(::grpc::ServerContext* context, const ::tensorflow::serving::SessionRunRequest* request, ::tensorflow::serving::SessionRunResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSessionRun(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tensorflow::serving::SessionRunRequest,::tensorflow::serving::SessionRunResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SessionRun<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SessionRun<Service > StreamedService;
};

}  // namespace serving
}  // namespace tensorflow


#endif  // GRPC_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto__INCLUDED
