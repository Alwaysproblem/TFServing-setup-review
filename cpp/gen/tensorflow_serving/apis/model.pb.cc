// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/apis/model.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow_serving/apis/model.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {
namespace serving {

namespace {

const ::google::protobuf::Descriptor* ModelSpec_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModelSpec_reflection_ = NULL;
struct ModelSpecOneofInstance {
  const ::google::protobuf::Int64Value* version_;
  ::google::protobuf::internal::ArenaStringPtr version_label_;
}* ModelSpec_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_5fserving_2fapis_2fmodel_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tensorflow_5fserving_2fapis_2fmodel_2eproto() {
  protobuf_AddDesc_tensorflow_5fserving_2fapis_2fmodel_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow_serving/apis/model.proto");
  GOOGLE_CHECK(file != NULL);
  ModelSpec_descriptor_ = file->message_type(0);
  static const int ModelSpec_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelSpec, name_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ModelSpec_default_oneof_instance_, version_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ModelSpec_default_oneof_instance_, version_label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelSpec, signature_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelSpec, version_choice_),
  };
  ModelSpec_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ModelSpec_descriptor_,
      ModelSpec::default_instance_,
      ModelSpec_offsets_,
      -1,
      -1,
      -1,
      ModelSpec_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelSpec, _oneof_case_[0]),
      sizeof(ModelSpec),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelSpec, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelSpec, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_5fserving_2fapis_2fmodel_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ModelSpec_descriptor_, &ModelSpec::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_5fserving_2fapis_2fmodel_2eproto() {
  delete ModelSpec::default_instance_;
  delete ModelSpec_default_oneof_instance_;
  delete ModelSpec_reflection_;
}

void protobuf_AddDesc_tensorflow_5fserving_2fapis_2fmodel_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_tensorflow_5fserving_2fapis_2fmodel_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fwrappers_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#tensorflow_serving/apis/model.proto\022\022t"
    "ensorflow.serving\032\036google/protobuf/wrapp"
    "ers.proto\"\214\001\n\tModelSpec\022\014\n\004name\030\001 \001(\t\022.\n"
    "\007version\030\002 \001(\0132\033.google.protobuf.Int64Va"
    "lueH\000\022\027\n\rversion_label\030\004 \001(\tH\000\022\026\n\016signat"
    "ure_name\030\003 \001(\tB\020\n\016version_choiceB\003\370\001\001b\006p"
    "roto3", 245);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow_serving/apis/model.proto", &protobuf_RegisterTypes);
  ModelSpec::default_instance_ = new ModelSpec();
  ModelSpec_default_oneof_instance_ = new ModelSpecOneofInstance();
  ModelSpec::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_5fserving_2fapis_2fmodel_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_5fserving_2fapis_2fmodel_2eproto {
  StaticDescriptorInitializer_tensorflow_5fserving_2fapis_2fmodel_2eproto() {
    protobuf_AddDesc_tensorflow_5fserving_2fapis_2fmodel_2eproto();
  }
} static_descriptor_initializer_tensorflow_5fserving_2fapis_2fmodel_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModelSpec::kNameFieldNumber;
const int ModelSpec::kVersionFieldNumber;
const int ModelSpec::kVersionLabelFieldNumber;
const int ModelSpec::kSignatureNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModelSpec::ModelSpec()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.ModelSpec)
}

ModelSpec::ModelSpec(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.ModelSpec)
}

void ModelSpec::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  ModelSpec_default_oneof_instance_->version_ = const_cast< ::google::protobuf::Int64Value*>(&::google::protobuf::Int64Value::default_instance());
  ModelSpec_default_oneof_instance_->version_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ModelSpec::ModelSpec(const ModelSpec& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.ModelSpec)
}

void ModelSpec::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version_choice();
}

ModelSpec::~ModelSpec() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.ModelSpec)
  SharedDtor();
}

void ModelSpec::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  signature_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (has_version_choice()) {
    clear_version_choice();
  }
  if (this != default_instance_) {
  }
}

void ModelSpec::ArenaDtor(void* object) {
  ModelSpec* _this = reinterpret_cast< ModelSpec* >(object);
  (void)_this;
}
void ModelSpec::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ModelSpec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelSpec::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelSpec_descriptor_;
}

const ModelSpec& ModelSpec::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_5fserving_2fapis_2fmodel_2eproto();
  return *default_instance_;
}

ModelSpec* ModelSpec::default_instance_ = NULL;

ModelSpec* ModelSpec::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ModelSpec>(arena);
}

void ModelSpec::clear_version_choice() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.serving.ModelSpec)
  switch(version_choice_case()) {
    case kVersion: {
      if (GetArenaNoVirtual() == NULL) {
        delete version_choice_.version_;
      }
      break;
    }
    case kVersionLabel: {
      version_choice_.version_label_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case VERSION_CHOICE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VERSION_CHOICE_NOT_SET;
}


void ModelSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.ModelSpec)
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  signature_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_version_choice();
}

bool ModelSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.serving.ModelSpec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.serving.ModelSpec.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }

      // optional .google.protobuf.Int64Value version = 2;
      case 2: {
        if (tag == 18) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_signature_name;
        break;
      }

      // optional string signature_name = 3;
      case 3: {
        if (tag == 26) {
         parse_signature_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signature_name().data(), this->signature_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.serving.ModelSpec.signature_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_version_label;
        break;
      }

      // optional string version_label = 4;
      case 4: {
        if (tag == 34) {
         parse_version_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version_label()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version_label().data(), this->version_label().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.serving.ModelSpec.version_label"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.serving.ModelSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.serving.ModelSpec)
  return false;
#undef DO_
}

void ModelSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.serving.ModelSpec)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.ModelSpec.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .google.protobuf.Int64Value version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *version_choice_.version_, output);
  }

  // optional string signature_name = 3;
  if (this->signature_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature_name().data(), this->signature_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.ModelSpec.signature_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->signature_name(), output);
  }

  // optional string version_label = 4;
  if (has_version_label()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version_label().data(), this->version_label().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.ModelSpec.version_label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->version_label(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.serving.ModelSpec)
}

::google::protobuf::uint8* ModelSpec::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.ModelSpec)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.ModelSpec.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .google.protobuf.Int64Value version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *version_choice_.version_, false, target);
  }

  // optional string signature_name = 3;
  if (this->signature_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature_name().data(), this->signature_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.ModelSpec.signature_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->signature_name(), target);
  }

  // optional string version_label = 4;
  if (has_version_label()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version_label().data(), this->version_label().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.ModelSpec.version_label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->version_label(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.ModelSpec)
  return target;
}

int ModelSpec::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.ModelSpec)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string signature_name = 3;
  if (this->signature_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signature_name());
  }

  switch (version_choice_case()) {
    // optional .google.protobuf.Int64Value version = 2;
    case kVersion: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *version_choice_.version_);
      break;
    }
    // optional string version_label = 4;
    case kVersionLabel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version_label());
      break;
    }
    case VERSION_CHOICE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelSpec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.ModelSpec)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ModelSpec* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ModelSpec>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.ModelSpec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.ModelSpec)
    MergeFrom(*source);
  }
}

void ModelSpec::MergeFrom(const ModelSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.ModelSpec)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.version_choice_case()) {
    case kVersion: {
      mutable_version()->::google::protobuf::Int64Value::MergeFrom(from.version());
      break;
    }
    case kVersionLabel: {
      set_version_label(from.version_label());
      break;
    }
    case VERSION_CHOICE_NOT_SET: {
      break;
    }
  }
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.signature_name().size() > 0) {
    set_signature_name(from.signature_name());
  }
}

void ModelSpec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.ModelSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelSpec::CopyFrom(const ModelSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.ModelSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelSpec::IsInitialized() const {

  return true;
}

void ModelSpec::Swap(ModelSpec* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ModelSpec temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ModelSpec::UnsafeArenaSwap(ModelSpec* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ModelSpec::InternalSwap(ModelSpec* other) {
  name_.Swap(&other->name_);
  signature_name_.Swap(&other->signature_name_);
  std::swap(version_choice_, other->version_choice_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModelSpec::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModelSpec_descriptor_;
  metadata.reflection = ModelSpec_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModelSpec

// optional string name = 1;
void ModelSpec::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& ModelSpec::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ModelSpec.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModelSpec::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.serving.ModelSpec.name)
}
 void ModelSpec::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.ModelSpec.name)
}
 void ModelSpec::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.ModelSpec.name)
}
 ::std::string* ModelSpec::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ModelSpec.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* ModelSpec::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.ModelSpec.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* ModelSpec::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.ModelSpec.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void ModelSpec::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ModelSpec.name)
}
 void ModelSpec::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.ModelSpec.name)
}

// optional .google.protobuf.Int64Value version = 2;
bool ModelSpec::has_version() const {
  return version_choice_case() == kVersion;
}
void ModelSpec::set_has_version() {
  _oneof_case_[0] = kVersion;
}
void ModelSpec::clear_version() {
  if (has_version()) {
    if (GetArenaNoVirtual() == NULL) {
      delete version_choice_.version_;
    }
    clear_has_version_choice();
  }
}
 const ::google::protobuf::Int64Value& ModelSpec::version() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ModelSpec.version)
  return has_version()
      ? *version_choice_.version_
      : ::google::protobuf::Int64Value::default_instance();
}
::google::protobuf::Int64Value* ModelSpec::mutable_version() {
  if (!has_version()) {
    clear_version_choice();
    set_has_version();
    version_choice_.version_ = 
      ::google::protobuf::Arena::CreateMessage< ::google::protobuf::Int64Value >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ModelSpec.version)
  return version_choice_.version_;
}
::google::protobuf::Int64Value* ModelSpec::release_version() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.ModelSpec.version)
  if (has_version()) {
    clear_has_version_choice();
    if (GetArenaNoVirtual() != NULL) {
      ::google::protobuf::Int64Value* temp = new ::google::protobuf::Int64Value;
      temp->MergeFrom(*version_choice_.version_);
      version_choice_.version_ = NULL;
      return temp;
    } else {
      ::google::protobuf::Int64Value* temp = version_choice_.version_;
      version_choice_.version_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void ModelSpec::set_allocated_version(::google::protobuf::Int64Value* version) {
  clear_version_choice();
  if (version) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(version) == NULL) {
      GetArenaNoVirtual()->Own(version);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(version)) {
      ::google::protobuf::Int64Value* new_version = 
          ::google::protobuf::Arena::CreateMessage< ::google::protobuf::Int64Value >(
          GetArenaNoVirtual());
      new_version->CopyFrom(*version);
      version = new_version;
    }
    set_has_version();
    version_choice_.version_ = version;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ModelSpec.version)
}
 ::google::protobuf::Int64Value* ModelSpec::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.ModelSpec.version)
  if (has_version()) {
    clear_has_version_choice();
    ::google::protobuf::Int64Value* temp = version_choice_.version_;
    version_choice_.version_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ModelSpec::unsafe_arena_set_allocated_version(::google::protobuf::Int64Value* version) {
  clear_version_choice();
  if (version) {
    set_has_version();
    version_choice_.version_ = version;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.ModelSpec.version)
}

// optional string version_label = 4;
bool ModelSpec::has_version_label() const {
  return version_choice_case() == kVersionLabel;
}
void ModelSpec::set_has_version_label() {
  _oneof_case_[0] = kVersionLabel;
}
void ModelSpec::clear_version_label() {
  if (has_version_label()) {
    version_choice_.version_label_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_version_choice();
  }
}
 const ::std::string& ModelSpec::version_label() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ModelSpec.version_label)
  if (has_version_label()) {
    return version_choice_.version_label_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void ModelSpec::set_version_label(const ::std::string& value) {
  if (!has_version_label()) {
    clear_version_choice();
    set_has_version_label();
    version_choice_.version_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  version_choice_.version_label_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.serving.ModelSpec.version_label)
}
 void ModelSpec::set_version_label(const char* value) {
  if (!has_version_label()) {
    clear_version_choice();
    set_has_version_label();
    version_choice_.version_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  version_choice_.version_label_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.ModelSpec.version_label)
}
 void ModelSpec::set_version_label(const char* value,
                             size_t size) {
  if (!has_version_label()) {
    clear_version_choice();
    set_has_version_label();
    version_choice_.version_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  version_choice_.version_label_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.ModelSpec.version_label)
}
 ::std::string* ModelSpec::mutable_version_label() {
  if (!has_version_label()) {
    clear_version_choice();
    set_has_version_label();
    version_choice_.version_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return version_choice_.version_label_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ModelSpec.version_label)
}
 ::std::string* ModelSpec::release_version_label() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.ModelSpec.version_label)
  if (has_version_label()) {
    clear_has_version_choice();
    return version_choice_.version_label_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
 ::std::string* ModelSpec::unsafe_arena_release_version_label() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.ModelSpec.version_label)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (has_version_label()) {
    clear_has_version_choice();
    return version_choice_.version_label_.UnsafeArenaRelease(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
 void ModelSpec::set_allocated_version_label(::std::string* version_label) {
  if (!has_version_label()) {
    version_choice_.version_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_version_choice();
  if (version_label != NULL) {
    set_has_version_label();
    version_choice_.version_label_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version_label,
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ModelSpec.version_label)
}
 void ModelSpec::unsafe_arena_set_allocated_version_label(::std::string* version_label) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (!has_version_label()) {
    version_choice_.version_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_version_choice();
  if (version_label) {
    set_has_version_label();
    version_choice_.version_label_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version_label, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.ModelSpec.version_label)
}

// optional string signature_name = 3;
void ModelSpec::clear_signature_name() {
  signature_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& ModelSpec::signature_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ModelSpec.signature_name)
  return signature_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModelSpec::set_signature_name(const ::std::string& value) {
  
  signature_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.serving.ModelSpec.signature_name)
}
 void ModelSpec::set_signature_name(const char* value) {
  
  signature_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.ModelSpec.signature_name)
}
 void ModelSpec::set_signature_name(const char* value,
    size_t size) {
  
  signature_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.ModelSpec.signature_name)
}
 ::std::string* ModelSpec::mutable_signature_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ModelSpec.signature_name)
  return signature_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* ModelSpec::release_signature_name() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.ModelSpec.signature_name)
  
  return signature_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* ModelSpec::unsafe_arena_release_signature_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.ModelSpec.signature_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return signature_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void ModelSpec::set_allocated_signature_name(::std::string* signature_name) {
  if (signature_name != NULL) {
    
  } else {
    
  }
  signature_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ModelSpec.signature_name)
}
 void ModelSpec::unsafe_arena_set_allocated_signature_name(
    ::std::string* signature_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (signature_name != NULL) {
    
  } else {
    
  }
  signature_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      signature_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.ModelSpec.signature_name)
}

bool ModelSpec::has_version_choice() const {
  return version_choice_case() != VERSION_CHOICE_NOT_SET;
}
void ModelSpec::clear_has_version_choice() {
  _oneof_case_[0] = VERSION_CHOICE_NOT_SET;
}
ModelSpec::VersionChoiceCase ModelSpec::version_choice_case() const {
  return ModelSpec::VersionChoiceCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace serving
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
