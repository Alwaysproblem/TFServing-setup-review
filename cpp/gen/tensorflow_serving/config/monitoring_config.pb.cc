// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/config/monitoring_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow_serving/config/monitoring_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {
namespace serving {

namespace {

const ::google::protobuf::Descriptor* PrometheusConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrometheusConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonitoringConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonitoringConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto() {
  protobuf_AddDesc_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow_serving/config/monitoring_config.proto");
  GOOGLE_CHECK(file != NULL);
  PrometheusConfig_descriptor_ = file->message_type(0);
  static const int PrometheusConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrometheusConfig, enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrometheusConfig, path_),
  };
  PrometheusConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PrometheusConfig_descriptor_,
      PrometheusConfig::default_instance_,
      PrometheusConfig_offsets_,
      -1,
      -1,
      -1,
      sizeof(PrometheusConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrometheusConfig, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrometheusConfig, _is_default_instance_));
  MonitoringConfig_descriptor_ = file->message_type(1);
  static const int MonitoringConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitoringConfig, prometheus_config_),
  };
  MonitoringConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MonitoringConfig_descriptor_,
      MonitoringConfig::default_instance_,
      MonitoringConfig_offsets_,
      -1,
      -1,
      -1,
      sizeof(MonitoringConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitoringConfig, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitoringConfig, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PrometheusConfig_descriptor_, &PrometheusConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MonitoringConfig_descriptor_, &MonitoringConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto() {
  delete PrometheusConfig::default_instance_;
  delete PrometheusConfig_reflection_;
  delete MonitoringConfig::default_instance_;
  delete MonitoringConfig_reflection_;
}

void protobuf_AddDesc_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n1tensorflow_serving/config/monitoring_c"
    "onfig.proto\022\022tensorflow.serving\"0\n\020Prome"
    "theusConfig\022\016\n\006enable\030\001 \001(\010\022\014\n\004path\030\002 \001("
    "\t\"S\n\020MonitoringConfig\022\?\n\021prometheus_conf"
    "ig\030\001 \001(\0132$.tensorflow.serving.Prometheus"
    "ConfigB\003\370\001\001b\006proto3", 219);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow_serving/config/monitoring_config.proto", &protobuf_RegisterTypes);
  PrometheusConfig::default_instance_ = new PrometheusConfig();
  MonitoringConfig::default_instance_ = new MonitoringConfig();
  PrometheusConfig::default_instance_->InitAsDefaultInstance();
  MonitoringConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto {
  StaticDescriptorInitializer_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto() {
    protobuf_AddDesc_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto();
  }
} static_descriptor_initializer_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrometheusConfig::kEnableFieldNumber;
const int PrometheusConfig::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrometheusConfig::PrometheusConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.PrometheusConfig)
}

PrometheusConfig::PrometheusConfig(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.PrometheusConfig)
}

void PrometheusConfig::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PrometheusConfig::PrometheusConfig(const PrometheusConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.PrometheusConfig)
}

void PrometheusConfig::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  enable_ = false;
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PrometheusConfig::~PrometheusConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.PrometheusConfig)
  SharedDtor();
}

void PrometheusConfig::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  path_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void PrometheusConfig::ArenaDtor(void* object) {
  PrometheusConfig* _this = reinterpret_cast< PrometheusConfig* >(object);
  (void)_this;
}
void PrometheusConfig::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PrometheusConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrometheusConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrometheusConfig_descriptor_;
}

const PrometheusConfig& PrometheusConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto();
  return *default_instance_;
}

PrometheusConfig* PrometheusConfig::default_instance_ = NULL;

PrometheusConfig* PrometheusConfig::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<PrometheusConfig>(arena);
}

void PrometheusConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.PrometheusConfig)
  enable_ = false;
  path_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool PrometheusConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.serving.PrometheusConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enable = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // optional string path = 2;
      case 2: {
        if (tag == 18) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.serving.PrometheusConfig.path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.serving.PrometheusConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.serving.PrometheusConfig)
  return false;
#undef DO_
}

void PrometheusConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.serving.PrometheusConfig)
  // optional bool enable = 1;
  if (this->enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable(), output);
  }

  // optional string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.PrometheusConfig.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.serving.PrometheusConfig)
}

::google::protobuf::uint8* PrometheusConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.PrometheusConfig)
  // optional bool enable = 1;
  if (this->enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable(), target);
  }

  // optional string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.PrometheusConfig.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.PrometheusConfig)
  return target;
}

int PrometheusConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.PrometheusConfig)
  int total_size = 0;

  // optional bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // optional string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrometheusConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.PrometheusConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PrometheusConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PrometheusConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.PrometheusConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.PrometheusConfig)
    MergeFrom(*source);
  }
}

void PrometheusConfig::MergeFrom(const PrometheusConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.PrometheusConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.enable() != 0) {
    set_enable(from.enable());
  }
  if (from.path().size() > 0) {
    set_path(from.path());
  }
}

void PrometheusConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.PrometheusConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrometheusConfig::CopyFrom(const PrometheusConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.PrometheusConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrometheusConfig::IsInitialized() const {

  return true;
}

void PrometheusConfig::Swap(PrometheusConfig* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PrometheusConfig temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void PrometheusConfig::UnsafeArenaSwap(PrometheusConfig* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PrometheusConfig::InternalSwap(PrometheusConfig* other) {
  std::swap(enable_, other->enable_);
  path_.Swap(&other->path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrometheusConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrometheusConfig_descriptor_;
  metadata.reflection = PrometheusConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PrometheusConfig

// optional bool enable = 1;
void PrometheusConfig::clear_enable() {
  enable_ = false;
}
 bool PrometheusConfig::enable() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.PrometheusConfig.enable)
  return enable_;
}
 void PrometheusConfig::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.serving.PrometheusConfig.enable)
}

// optional string path = 2;
void PrometheusConfig::clear_path() {
  path_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& PrometheusConfig::path() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.PrometheusConfig.path)
  return path_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PrometheusConfig::set_path(const ::std::string& value) {
  
  path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.serving.PrometheusConfig.path)
}
 void PrometheusConfig::set_path(const char* value) {
  
  path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.PrometheusConfig.path)
}
 void PrometheusConfig::set_path(const char* value,
    size_t size) {
  
  path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.PrometheusConfig.path)
}
 ::std::string* PrometheusConfig::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.PrometheusConfig.path)
  return path_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* PrometheusConfig::release_path() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.PrometheusConfig.path)
  
  return path_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* PrometheusConfig::unsafe_arena_release_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.PrometheusConfig.path)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return path_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void PrometheusConfig::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.PrometheusConfig.path)
}
 void PrometheusConfig::unsafe_arena_set_allocated_path(
    ::std::string* path) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (path != NULL) {
    
  } else {
    
  }
  path_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      path, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.PrometheusConfig.path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void MonitoringConfig::_slow_mutable_prometheus_config() {
  prometheus_config_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::serving::PrometheusConfig >(
      GetArenaNoVirtual());
}
::tensorflow::serving::PrometheusConfig* MonitoringConfig::_slow_release_prometheus_config() {
  if (prometheus_config_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::serving::PrometheusConfig* temp = new ::tensorflow::serving::PrometheusConfig;
    temp->MergeFrom(*prometheus_config_);
    prometheus_config_ = NULL;
    return temp;
  }
}
::tensorflow::serving::PrometheusConfig* MonitoringConfig::unsafe_arena_release_prometheus_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.MonitoringConfig.prometheus_config)
  
  ::tensorflow::serving::PrometheusConfig* temp = prometheus_config_;
  prometheus_config_ = NULL;
  return temp;
}
void MonitoringConfig::_slow_set_allocated_prometheus_config(
    ::google::protobuf::Arena* message_arena, ::tensorflow::serving::PrometheusConfig** prometheus_config) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*prometheus_config) == NULL) {
      message_arena->Own(*prometheus_config);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*prometheus_config)) {
      ::tensorflow::serving::PrometheusConfig* new_prometheus_config = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::serving::PrometheusConfig >(
            message_arena);
      new_prometheus_config->CopyFrom(**prometheus_config);
      *prometheus_config = new_prometheus_config;
    }
}
void MonitoringConfig::unsafe_arena_set_allocated_prometheus_config(
    ::tensorflow::serving::PrometheusConfig* prometheus_config) {
  if (GetArenaNoVirtual() == NULL) {
    delete prometheus_config_;
  }
  prometheus_config_ = prometheus_config;
  if (prometheus_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.MonitoringConfig.prometheus_config)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MonitoringConfig::kPrometheusConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MonitoringConfig::MonitoringConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.MonitoringConfig)
}

MonitoringConfig::MonitoringConfig(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.MonitoringConfig)
}

void MonitoringConfig::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  prometheus_config_ = const_cast< ::tensorflow::serving::PrometheusConfig*>(&::tensorflow::serving::PrometheusConfig::default_instance());
}

MonitoringConfig::MonitoringConfig(const MonitoringConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.MonitoringConfig)
}

void MonitoringConfig::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  prometheus_config_ = NULL;
}

MonitoringConfig::~MonitoringConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.MonitoringConfig)
  SharedDtor();
}

void MonitoringConfig::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
    delete prometheus_config_;
  }
}

void MonitoringConfig::ArenaDtor(void* object) {
  MonitoringConfig* _this = reinterpret_cast< MonitoringConfig* >(object);
  (void)_this;
}
void MonitoringConfig::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MonitoringConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonitoringConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonitoringConfig_descriptor_;
}

const MonitoringConfig& MonitoringConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto();
  return *default_instance_;
}

MonitoringConfig* MonitoringConfig::default_instance_ = NULL;

MonitoringConfig* MonitoringConfig::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<MonitoringConfig>(arena);
}

void MonitoringConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.MonitoringConfig)
  if (GetArenaNoVirtual() == NULL && prometheus_config_ != NULL) delete prometheus_config_;
  prometheus_config_ = NULL;
}

bool MonitoringConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.serving.MonitoringConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tensorflow.serving.PrometheusConfig prometheus_config = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prometheus_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.serving.MonitoringConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.serving.MonitoringConfig)
  return false;
#undef DO_
}

void MonitoringConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.serving.MonitoringConfig)
  // optional .tensorflow.serving.PrometheusConfig prometheus_config = 1;
  if (this->has_prometheus_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->prometheus_config_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.serving.MonitoringConfig)
}

::google::protobuf::uint8* MonitoringConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.MonitoringConfig)
  // optional .tensorflow.serving.PrometheusConfig prometheus_config = 1;
  if (this->has_prometheus_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->prometheus_config_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.MonitoringConfig)
  return target;
}

int MonitoringConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.MonitoringConfig)
  int total_size = 0;

  // optional .tensorflow.serving.PrometheusConfig prometheus_config = 1;
  if (this->has_prometheus_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->prometheus_config_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonitoringConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.MonitoringConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MonitoringConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MonitoringConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.MonitoringConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.MonitoringConfig)
    MergeFrom(*source);
  }
}

void MonitoringConfig::MergeFrom(const MonitoringConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.MonitoringConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_prometheus_config()) {
    mutable_prometheus_config()->::tensorflow::serving::PrometheusConfig::MergeFrom(from.prometheus_config());
  }
}

void MonitoringConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.MonitoringConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonitoringConfig::CopyFrom(const MonitoringConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.MonitoringConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitoringConfig::IsInitialized() const {

  return true;
}

void MonitoringConfig::Swap(MonitoringConfig* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MonitoringConfig temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void MonitoringConfig::UnsafeArenaSwap(MonitoringConfig* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MonitoringConfig::InternalSwap(MonitoringConfig* other) {
  std::swap(prometheus_config_, other->prometheus_config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MonitoringConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonitoringConfig_descriptor_;
  metadata.reflection = MonitoringConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MonitoringConfig

// optional .tensorflow.serving.PrometheusConfig prometheus_config = 1;
bool MonitoringConfig::has_prometheus_config() const {
  return !_is_default_instance_ && prometheus_config_ != NULL;
}
void MonitoringConfig::clear_prometheus_config() {
  if (GetArenaNoVirtual() == NULL && prometheus_config_ != NULL) delete prometheus_config_;
  prometheus_config_ = NULL;
}
const ::tensorflow::serving::PrometheusConfig& MonitoringConfig::prometheus_config() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.MonitoringConfig.prometheus_config)
  return prometheus_config_ != NULL ? *prometheus_config_ : *default_instance_->prometheus_config_;
}
::tensorflow::serving::PrometheusConfig* MonitoringConfig::mutable_prometheus_config() {
  
  if (prometheus_config_ == NULL) {
    _slow_mutable_prometheus_config();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.MonitoringConfig.prometheus_config)
  return prometheus_config_;
}
::tensorflow::serving::PrometheusConfig* MonitoringConfig::release_prometheus_config() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.MonitoringConfig.prometheus_config)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_prometheus_config();
  } else {
    ::tensorflow::serving::PrometheusConfig* temp = prometheus_config_;
    prometheus_config_ = NULL;
    return temp;
  }
}
 void MonitoringConfig::set_allocated_prometheus_config(::tensorflow::serving::PrometheusConfig* prometheus_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete prometheus_config_;
  }
  if (prometheus_config != NULL) {
    _slow_set_allocated_prometheus_config(message_arena, &prometheus_config);
  }
  prometheus_config_ = prometheus_config;
  if (prometheus_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.MonitoringConfig.prometheus_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace serving
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
