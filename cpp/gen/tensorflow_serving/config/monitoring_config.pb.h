// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/config/monitoring_config.proto

#ifndef PROTOBUF_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto__INCLUDED
#define PROTOBUF_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {
namespace serving {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto();
void protobuf_AssignDesc_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto();
void protobuf_ShutdownFile_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto();

class MonitoringConfig;
class PrometheusConfig;

// ===================================================================

class PrometheusConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.PrometheusConfig) */ {
 public:
  PrometheusConfig();
  virtual ~PrometheusConfig();

  PrometheusConfig(const PrometheusConfig& from);

  inline PrometheusConfig& operator=(const PrometheusConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PrometheusConfig& default_instance();

  void UnsafeArenaSwap(PrometheusConfig* other);
  void Swap(PrometheusConfig* other);

  // implements Message ----------------------------------------------

  inline PrometheusConfig* New() const { return New(NULL); }

  PrometheusConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PrometheusConfig& from);
  void MergeFrom(const PrometheusConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PrometheusConfig* other);
  protected:
  explicit PrometheusConfig(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool enable = 1;
  void clear_enable();
  static const int kEnableFieldNumber = 1;
  bool enable() const;
  void set_enable(bool value);

  // optional string path = 2;
  void clear_path();
  static const int kPathFieldNumber = 2;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);
  ::std::string* unsafe_arena_release_path();
  void unsafe_arena_set_allocated_path(
      ::std::string* path);

  // @@protoc_insertion_point(class_scope:tensorflow.serving.PrometheusConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  bool enable_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto();
  friend void protobuf_AssignDesc_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static PrometheusConfig* default_instance_;
};
// -------------------------------------------------------------------

class MonitoringConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.MonitoringConfig) */ {
 public:
  MonitoringConfig();
  virtual ~MonitoringConfig();

  MonitoringConfig(const MonitoringConfig& from);

  inline MonitoringConfig& operator=(const MonitoringConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const MonitoringConfig& default_instance();

  void UnsafeArenaSwap(MonitoringConfig* other);
  void Swap(MonitoringConfig* other);

  // implements Message ----------------------------------------------

  inline MonitoringConfig* New() const { return New(NULL); }

  MonitoringConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MonitoringConfig& from);
  void MergeFrom(const MonitoringConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MonitoringConfig* other);
  protected:
  explicit MonitoringConfig(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .tensorflow.serving.PrometheusConfig prometheus_config = 1;
  bool has_prometheus_config() const;
  void clear_prometheus_config();
  static const int kPrometheusConfigFieldNumber = 1;
  private:
  void _slow_mutable_prometheus_config();
  void _slow_set_allocated_prometheus_config(
      ::google::protobuf::Arena* message_arena, ::tensorflow::serving::PrometheusConfig** prometheus_config);
  ::tensorflow::serving::PrometheusConfig* _slow_release_prometheus_config();
  public:
  const ::tensorflow::serving::PrometheusConfig& prometheus_config() const;
  ::tensorflow::serving::PrometheusConfig* mutable_prometheus_config();
  ::tensorflow::serving::PrometheusConfig* release_prometheus_config();
  void set_allocated_prometheus_config(::tensorflow::serving::PrometheusConfig* prometheus_config);
  ::tensorflow::serving::PrometheusConfig* unsafe_arena_release_prometheus_config();
  void unsafe_arena_set_allocated_prometheus_config(
      ::tensorflow::serving::PrometheusConfig* prometheus_config);

  // @@protoc_insertion_point(class_scope:tensorflow.serving.MonitoringConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::tensorflow::serving::PrometheusConfig* prometheus_config_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto();
  friend void protobuf_AssignDesc_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static MonitoringConfig* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PrometheusConfig

// optional bool enable = 1;
inline void PrometheusConfig::clear_enable() {
  enable_ = false;
}
inline bool PrometheusConfig::enable() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.PrometheusConfig.enable)
  return enable_;
}
inline void PrometheusConfig::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.serving.PrometheusConfig.enable)
}

// optional string path = 2;
inline void PrometheusConfig::clear_path() {
  path_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& PrometheusConfig::path() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.PrometheusConfig.path)
  return path_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrometheusConfig::set_path(const ::std::string& value) {
  
  path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.serving.PrometheusConfig.path)
}
inline void PrometheusConfig::set_path(const char* value) {
  
  path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.PrometheusConfig.path)
}
inline void PrometheusConfig::set_path(const char* value,
    size_t size) {
  
  path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.PrometheusConfig.path)
}
inline ::std::string* PrometheusConfig::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.PrometheusConfig.path)
  return path_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PrometheusConfig::release_path() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.PrometheusConfig.path)
  
  return path_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PrometheusConfig::unsafe_arena_release_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.PrometheusConfig.path)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return path_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PrometheusConfig::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.PrometheusConfig.path)
}
inline void PrometheusConfig::unsafe_arena_set_allocated_path(
    ::std::string* path) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (path != NULL) {
    
  } else {
    
  }
  path_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      path, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.PrometheusConfig.path)
}

// -------------------------------------------------------------------

// MonitoringConfig

// optional .tensorflow.serving.PrometheusConfig prometheus_config = 1;
inline bool MonitoringConfig::has_prometheus_config() const {
  return !_is_default_instance_ && prometheus_config_ != NULL;
}
inline void MonitoringConfig::clear_prometheus_config() {
  if (GetArenaNoVirtual() == NULL && prometheus_config_ != NULL) delete prometheus_config_;
  prometheus_config_ = NULL;
}
inline const ::tensorflow::serving::PrometheusConfig& MonitoringConfig::prometheus_config() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.MonitoringConfig.prometheus_config)
  return prometheus_config_ != NULL ? *prometheus_config_ : *default_instance_->prometheus_config_;
}
inline ::tensorflow::serving::PrometheusConfig* MonitoringConfig::mutable_prometheus_config() {
  
  if (prometheus_config_ == NULL) {
    _slow_mutable_prometheus_config();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.MonitoringConfig.prometheus_config)
  return prometheus_config_;
}
inline ::tensorflow::serving::PrometheusConfig* MonitoringConfig::release_prometheus_config() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.MonitoringConfig.prometheus_config)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_prometheus_config();
  } else {
    ::tensorflow::serving::PrometheusConfig* temp = prometheus_config_;
    prometheus_config_ = NULL;
    return temp;
  }
}
inline  void MonitoringConfig::set_allocated_prometheus_config(::tensorflow::serving::PrometheusConfig* prometheus_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete prometheus_config_;
  }
  if (prometheus_config != NULL) {
    _slow_set_allocated_prometheus_config(message_arena, &prometheus_config);
  }
  prometheus_config_ = prometheus_config;
  if (prometheus_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.MonitoringConfig.prometheus_config)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serving
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto__INCLUDED
