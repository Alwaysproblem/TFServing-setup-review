// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/config/ssl_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow_serving/config/ssl_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {
namespace serving {

namespace {

const ::google::protobuf::Descriptor* SSLConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSLConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto() {
  protobuf_AddDesc_tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow_serving/config/ssl_config.proto");
  GOOGLE_CHECK(file != NULL);
  SSLConfig_descriptor_ = file->message_type(0);
  static const int SSLConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSLConfig, server_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSLConfig, server_cert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSLConfig, custom_ca_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSLConfig, client_verify_),
  };
  SSLConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SSLConfig_descriptor_,
      SSLConfig::default_instance_,
      SSLConfig_offsets_,
      -1,
      -1,
      -1,
      sizeof(SSLConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSLConfig, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSLConfig, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SSLConfig_descriptor_, &SSLConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto() {
  delete SSLConfig::default_instance_;
  delete SSLConfig_reflection_;
}

void protobuf_AddDesc_tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n*tensorflow_serving/config/ssl_config.p"
    "roto\022\022tensorflow.serving\"^\n\tSSLConfig\022\022\n"
    "\nserver_key\030\001 \001(\t\022\023\n\013server_cert\030\002 \001(\t\022\021"
    "\n\tcustom_ca\030\003 \001(\t\022\025\n\rclient_verify\030\004 \001(\010"
    "B\003\370\001\001b\006proto3", 173);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow_serving/config/ssl_config.proto", &protobuf_RegisterTypes);
  SSLConfig::default_instance_ = new SSLConfig();
  SSLConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto {
  StaticDescriptorInitializer_tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto() {
    protobuf_AddDesc_tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto();
  }
} static_descriptor_initializer_tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSLConfig::kServerKeyFieldNumber;
const int SSLConfig::kServerCertFieldNumber;
const int SSLConfig::kCustomCaFieldNumber;
const int SSLConfig::kClientVerifyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSLConfig::SSLConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.SSLConfig)
}

SSLConfig::SSLConfig(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.SSLConfig)
}

void SSLConfig::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SSLConfig::SSLConfig(const SSLConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.SSLConfig)
}

void SSLConfig::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  server_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_cert_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_ca_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_verify_ = false;
}

SSLConfig::~SSLConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.SSLConfig)
  SharedDtor();
}

void SSLConfig::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  server_key_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  server_cert_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  custom_ca_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void SSLConfig::ArenaDtor(void* object) {
  SSLConfig* _this = reinterpret_cast< SSLConfig* >(object);
  (void)_this;
}
void SSLConfig::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SSLConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSLConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSLConfig_descriptor_;
}

const SSLConfig& SSLConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto();
  return *default_instance_;
}

SSLConfig* SSLConfig::default_instance_ = NULL;

SSLConfig* SSLConfig::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SSLConfig>(arena);
}

void SSLConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.SSLConfig)
  server_key_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  server_cert_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  custom_ca_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  client_verify_ = false;
}

bool SSLConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.serving.SSLConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string server_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->server_key().data(), this->server_key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.serving.SSLConfig.server_key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_server_cert;
        break;
      }

      // optional string server_cert = 2;
      case 2: {
        if (tag == 18) {
         parse_server_cert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_cert()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->server_cert().data(), this->server_cert().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.serving.SSLConfig.server_cert"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_custom_ca;
        break;
      }

      // optional string custom_ca = 3;
      case 3: {
        if (tag == 26) {
         parse_custom_ca:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_ca()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->custom_ca().data(), this->custom_ca().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.serving.SSLConfig.custom_ca"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_client_verify;
        break;
      }

      // optional bool client_verify = 4;
      case 4: {
        if (tag == 32) {
         parse_client_verify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &client_verify_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.serving.SSLConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.serving.SSLConfig)
  return false;
#undef DO_
}

void SSLConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.serving.SSLConfig)
  // optional string server_key = 1;
  if (this->server_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_key().data(), this->server_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.SSLConfig.server_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->server_key(), output);
  }

  // optional string server_cert = 2;
  if (this->server_cert().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_cert().data(), this->server_cert().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.SSLConfig.server_cert");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->server_cert(), output);
  }

  // optional string custom_ca = 3;
  if (this->custom_ca().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->custom_ca().data(), this->custom_ca().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.SSLConfig.custom_ca");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->custom_ca(), output);
  }

  // optional bool client_verify = 4;
  if (this->client_verify() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->client_verify(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.serving.SSLConfig)
}

::google::protobuf::uint8* SSLConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.SSLConfig)
  // optional string server_key = 1;
  if (this->server_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_key().data(), this->server_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.SSLConfig.server_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->server_key(), target);
  }

  // optional string server_cert = 2;
  if (this->server_cert().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_cert().data(), this->server_cert().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.SSLConfig.server_cert");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_cert(), target);
  }

  // optional string custom_ca = 3;
  if (this->custom_ca().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->custom_ca().data(), this->custom_ca().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.SSLConfig.custom_ca");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->custom_ca(), target);
  }

  // optional bool client_verify = 4;
  if (this->client_verify() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->client_verify(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.SSLConfig)
  return target;
}

int SSLConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.SSLConfig)
  int total_size = 0;

  // optional string server_key = 1;
  if (this->server_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_key());
  }

  // optional string server_cert = 2;
  if (this->server_cert().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_cert());
  }

  // optional string custom_ca = 3;
  if (this->custom_ca().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->custom_ca());
  }

  // optional bool client_verify = 4;
  if (this->client_verify() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSLConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.SSLConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SSLConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SSLConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.SSLConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.SSLConfig)
    MergeFrom(*source);
  }
}

void SSLConfig::MergeFrom(const SSLConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.SSLConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.server_key().size() > 0) {
    set_server_key(from.server_key());
  }
  if (from.server_cert().size() > 0) {
    set_server_cert(from.server_cert());
  }
  if (from.custom_ca().size() > 0) {
    set_custom_ca(from.custom_ca());
  }
  if (from.client_verify() != 0) {
    set_client_verify(from.client_verify());
  }
}

void SSLConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.SSLConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSLConfig::CopyFrom(const SSLConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.SSLConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSLConfig::IsInitialized() const {

  return true;
}

void SSLConfig::Swap(SSLConfig* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SSLConfig temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void SSLConfig::UnsafeArenaSwap(SSLConfig* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SSLConfig::InternalSwap(SSLConfig* other) {
  server_key_.Swap(&other->server_key_);
  server_cert_.Swap(&other->server_cert_);
  custom_ca_.Swap(&other->custom_ca_);
  std::swap(client_verify_, other->client_verify_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SSLConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSLConfig_descriptor_;
  metadata.reflection = SSLConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SSLConfig

// optional string server_key = 1;
void SSLConfig::clear_server_key() {
  server_key_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& SSLConfig::server_key() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SSLConfig.server_key)
  return server_key_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SSLConfig::set_server_key(const ::std::string& value) {
  
  server_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.serving.SSLConfig.server_key)
}
 void SSLConfig::set_server_key(const char* value) {
  
  server_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.SSLConfig.server_key)
}
 void SSLConfig::set_server_key(const char* value,
    size_t size) {
  
  server_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.SSLConfig.server_key)
}
 ::std::string* SSLConfig::mutable_server_key() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SSLConfig.server_key)
  return server_key_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* SSLConfig::release_server_key() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.SSLConfig.server_key)
  
  return server_key_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* SSLConfig::unsafe_arena_release_server_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.SSLConfig.server_key)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return server_key_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void SSLConfig::set_allocated_server_key(::std::string* server_key) {
  if (server_key != NULL) {
    
  } else {
    
  }
  server_key_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_key,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.SSLConfig.server_key)
}
 void SSLConfig::unsafe_arena_set_allocated_server_key(
    ::std::string* server_key) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (server_key != NULL) {
    
  } else {
    
  }
  server_key_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      server_key, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.SSLConfig.server_key)
}

// optional string server_cert = 2;
void SSLConfig::clear_server_cert() {
  server_cert_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& SSLConfig::server_cert() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SSLConfig.server_cert)
  return server_cert_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SSLConfig::set_server_cert(const ::std::string& value) {
  
  server_cert_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.serving.SSLConfig.server_cert)
}
 void SSLConfig::set_server_cert(const char* value) {
  
  server_cert_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.SSLConfig.server_cert)
}
 void SSLConfig::set_server_cert(const char* value,
    size_t size) {
  
  server_cert_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.SSLConfig.server_cert)
}
 ::std::string* SSLConfig::mutable_server_cert() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SSLConfig.server_cert)
  return server_cert_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* SSLConfig::release_server_cert() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.SSLConfig.server_cert)
  
  return server_cert_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* SSLConfig::unsafe_arena_release_server_cert() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.SSLConfig.server_cert)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return server_cert_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void SSLConfig::set_allocated_server_cert(::std::string* server_cert) {
  if (server_cert != NULL) {
    
  } else {
    
  }
  server_cert_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_cert,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.SSLConfig.server_cert)
}
 void SSLConfig::unsafe_arena_set_allocated_server_cert(
    ::std::string* server_cert) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (server_cert != NULL) {
    
  } else {
    
  }
  server_cert_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      server_cert, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.SSLConfig.server_cert)
}

// optional string custom_ca = 3;
void SSLConfig::clear_custom_ca() {
  custom_ca_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& SSLConfig::custom_ca() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SSLConfig.custom_ca)
  return custom_ca_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SSLConfig::set_custom_ca(const ::std::string& value) {
  
  custom_ca_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.serving.SSLConfig.custom_ca)
}
 void SSLConfig::set_custom_ca(const char* value) {
  
  custom_ca_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.SSLConfig.custom_ca)
}
 void SSLConfig::set_custom_ca(const char* value,
    size_t size) {
  
  custom_ca_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.SSLConfig.custom_ca)
}
 ::std::string* SSLConfig::mutable_custom_ca() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SSLConfig.custom_ca)
  return custom_ca_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* SSLConfig::release_custom_ca() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.SSLConfig.custom_ca)
  
  return custom_ca_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* SSLConfig::unsafe_arena_release_custom_ca() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.SSLConfig.custom_ca)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return custom_ca_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void SSLConfig::set_allocated_custom_ca(::std::string* custom_ca) {
  if (custom_ca != NULL) {
    
  } else {
    
  }
  custom_ca_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_ca,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.SSLConfig.custom_ca)
}
 void SSLConfig::unsafe_arena_set_allocated_custom_ca(
    ::std::string* custom_ca) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (custom_ca != NULL) {
    
  } else {
    
  }
  custom_ca_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      custom_ca, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.SSLConfig.custom_ca)
}

// optional bool client_verify = 4;
void SSLConfig::clear_client_verify() {
  client_verify_ = false;
}
 bool SSLConfig::client_verify() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SSLConfig.client_verify)
  return client_verify_;
}
 void SSLConfig::set_client_verify(bool value) {
  
  client_verify_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.serving.SSLConfig.client_verify)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace serving
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
