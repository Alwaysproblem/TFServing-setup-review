// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/util/status.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow_serving/util/status.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {
namespace serving {

namespace {

const ::google::protobuf::Descriptor* StatusProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_5fserving_2futil_2fstatus_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tensorflow_5fserving_2futil_2fstatus_2eproto() {
  protobuf_AddDesc_tensorflow_5fserving_2futil_2fstatus_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow_serving/util/status.proto");
  GOOGLE_CHECK(file != NULL);
  StatusProto_descriptor_ = file->message_type(0);
  static const int StatusProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusProto, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusProto, error_message_),
  };
  StatusProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StatusProto_descriptor_,
      StatusProto::default_instance_,
      StatusProto_offsets_,
      -1,
      -1,
      -1,
      sizeof(StatusProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusProto, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusProto, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_5fserving_2futil_2fstatus_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StatusProto_descriptor_, &StatusProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_5fserving_2futil_2fstatus_2eproto() {
  delete StatusProto::default_instance_;
  delete StatusProto_reflection_;
}

void protobuf_AddDesc_tensorflow_5fserving_2futil_2fstatus_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_tensorflow_5fserving_2futil_2fstatus_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tensorflow::error::protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2ferror_5fcodes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n$tensorflow_serving/util/status.proto\022\022"
    "tensorflow.serving\032*tensorflow/core/prot"
    "obuf/error_codes.proto\"k\n\013StatusProto\0226\n"
    "\nerror_code\030\001 \001(\0162\026.tensorflow.error.Cod"
    "eR\nerror_code\022$\n\rerror_message\030\002 \001(\tR\rer"
    "ror_messageB\003\370\001\001b\006proto3", 224);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow_serving/util/status.proto", &protobuf_RegisterTypes);
  StatusProto::default_instance_ = new StatusProto();
  StatusProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_5fserving_2futil_2fstatus_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_5fserving_2futil_2fstatus_2eproto {
  StaticDescriptorInitializer_tensorflow_5fserving_2futil_2fstatus_2eproto() {
    protobuf_AddDesc_tensorflow_5fserving_2futil_2fstatus_2eproto();
  }
} static_descriptor_initializer_tensorflow_5fserving_2futil_2fstatus_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatusProto::kErrorCodeFieldNumber;
const int StatusProto::kErrorMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatusProto::StatusProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.StatusProto)
}

StatusProto::StatusProto(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.StatusProto)
}

void StatusProto::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StatusProto::StatusProto(const StatusProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.StatusProto)
}

void StatusProto::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_code_ = 0;
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

StatusProto::~StatusProto() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.StatusProto)
  SharedDtor();
}

void StatusProto::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  error_message_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void StatusProto::ArenaDtor(void* object) {
  StatusProto* _this = reinterpret_cast< StatusProto* >(object);
  (void)_this;
}
void StatusProto::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StatusProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusProto_descriptor_;
}

const StatusProto& StatusProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_5fserving_2futil_2fstatus_2eproto();
  return *default_instance_;
}

StatusProto* StatusProto::default_instance_ = NULL;

StatusProto* StatusProto::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<StatusProto>(arena);
}

void StatusProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.StatusProto)
  error_code_ = 0;
  error_message_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool StatusProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.serving.StatusProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tensorflow.error.Code error_code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_error_code(static_cast< ::tensorflow::error::Code >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error_message;
        break;
      }

      // optional string error_message = 2;
      case 2: {
        if (tag == 18) {
         parse_error_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_message().data(), this->error_message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.serving.StatusProto.error_message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.serving.StatusProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.serving.StatusProto)
  return false;
#undef DO_
}

void StatusProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.serving.StatusProto)
  // optional .tensorflow.error.Code error_code = 1;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }

  // optional string error_message = 2;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.StatusProto.error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_message(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.serving.StatusProto)
}

::google::protobuf::uint8* StatusProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.StatusProto)
  // optional .tensorflow.error.Code error_code = 1;
  if (this->error_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_code(), target);
  }

  // optional string error_message = 2;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.StatusProto.error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.StatusProto)
  return target;
}

int StatusProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.StatusProto)
  int total_size = 0;

  // optional .tensorflow.error.Code error_code = 1;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
  }

  // optional string error_message = 2;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_message());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.StatusProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StatusProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StatusProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.StatusProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.StatusProto)
    MergeFrom(*source);
  }
}

void StatusProto::MergeFrom(const StatusProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.StatusProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
  if (from.error_message().size() > 0) {
    set_error_message(from.error_message());
  }
}

void StatusProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.StatusProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusProto::CopyFrom(const StatusProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.StatusProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusProto::IsInitialized() const {

  return true;
}

void StatusProto::Swap(StatusProto* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StatusProto temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void StatusProto::UnsafeArenaSwap(StatusProto* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StatusProto::InternalSwap(StatusProto* other) {
  std::swap(error_code_, other->error_code_);
  error_message_.Swap(&other->error_message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatusProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusProto_descriptor_;
  metadata.reflection = StatusProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StatusProto

// optional .tensorflow.error.Code error_code = 1;
void StatusProto::clear_error_code() {
  error_code_ = 0;
}
 ::tensorflow::error::Code StatusProto::error_code() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.StatusProto.error_code)
  return static_cast< ::tensorflow::error::Code >(error_code_);
}
 void StatusProto::set_error_code(::tensorflow::error::Code value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.serving.StatusProto.error_code)
}

// optional string error_message = 2;
void StatusProto::clear_error_message() {
  error_message_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& StatusProto::error_message() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.StatusProto.error_message)
  return error_message_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StatusProto::set_error_message(const ::std::string& value) {
  
  error_message_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.serving.StatusProto.error_message)
}
 void StatusProto::set_error_message(const char* value) {
  
  error_message_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.StatusProto.error_message)
}
 void StatusProto::set_error_message(const char* value,
    size_t size) {
  
  error_message_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.StatusProto.error_message)
}
 ::std::string* StatusProto::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.StatusProto.error_message)
  return error_message_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* StatusProto::release_error_message() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.StatusProto.error_message)
  
  return error_message_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* StatusProto::unsafe_arena_release_error_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.StatusProto.error_message)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return error_message_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void StatusProto::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.StatusProto.error_message)
}
 void StatusProto::unsafe_arena_set_allocated_error_message(
    ::std::string* error_message) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      error_message, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.StatusProto.error_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace serving
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
