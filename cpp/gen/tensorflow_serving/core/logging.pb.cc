// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/core/logging.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow_serving/core/logging.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {
namespace serving {

namespace {

const ::google::protobuf::Descriptor* LogMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogMetadata_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_5fserving_2fcore_2flogging_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tensorflow_5fserving_2fcore_2flogging_2eproto() {
  protobuf_AddDesc_tensorflow_5fserving_2fcore_2flogging_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow_serving/core/logging.proto");
  GOOGLE_CHECK(file != NULL);
  LogMetadata_descriptor_ = file->message_type(0);
  static const int LogMetadata_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetadata, model_spec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetadata, sampling_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetadata, saved_model_tags_),
  };
  LogMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogMetadata_descriptor_,
      LogMetadata::default_instance_,
      LogMetadata_offsets_,
      -1,
      -1,
      -1,
      sizeof(LogMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetadata, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMetadata, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_5fserving_2fcore_2flogging_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogMetadata_descriptor_, &LogMetadata::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_5fserving_2fcore_2flogging_2eproto() {
  delete LogMetadata::default_instance_;
  delete LogMetadata_reflection_;
}

void protobuf_AddDesc_tensorflow_5fserving_2fcore_2flogging_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_tensorflow_5fserving_2fcore_2flogging_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tensorflow::serving::protobuf_AddDesc_tensorflow_5fserving_2fapis_2fmodel_2eproto();
  ::tensorflow::serving::protobuf_AddDesc_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n%tensorflow_serving/core/logging.proto\022"
    "\022tensorflow.serving\032#tensorflow_serving/"
    "apis/model.proto\032.tensorflow_serving/con"
    "fig/logging_config.proto\"\227\001\n\013LogMetadata"
    "\0221\n\nmodel_spec\030\001 \001(\0132\035.tensorflow.servin"
    "g.ModelSpec\022;\n\017sampling_config\030\002 \001(\0132\".t"
    "ensorflow.serving.SamplingConfig\022\030\n\020save"
    "d_model_tags\030\003 \003(\tB\003\370\001\001b\006proto3", 311);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow_serving/core/logging.proto", &protobuf_RegisterTypes);
  LogMetadata::default_instance_ = new LogMetadata();
  LogMetadata::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_5fserving_2fcore_2flogging_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_5fserving_2fcore_2flogging_2eproto {
  StaticDescriptorInitializer_tensorflow_5fserving_2fcore_2flogging_2eproto() {
    protobuf_AddDesc_tensorflow_5fserving_2fcore_2flogging_2eproto();
  }
} static_descriptor_initializer_tensorflow_5fserving_2fcore_2flogging_2eproto_;

// ===================================================================

void LogMetadata::_slow_mutable_model_spec() {
  model_spec_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::serving::ModelSpec >(
      GetArenaNoVirtual());
}
::tensorflow::serving::ModelSpec* LogMetadata::_slow_release_model_spec() {
  if (model_spec_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::serving::ModelSpec* temp = new ::tensorflow::serving::ModelSpec;
    temp->MergeFrom(*model_spec_);
    model_spec_ = NULL;
    return temp;
  }
}
::tensorflow::serving::ModelSpec* LogMetadata::unsafe_arena_release_model_spec() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.LogMetadata.model_spec)
  
  ::tensorflow::serving::ModelSpec* temp = model_spec_;
  model_spec_ = NULL;
  return temp;
}
void LogMetadata::_slow_set_allocated_model_spec(
    ::google::protobuf::Arena* message_arena, ::tensorflow::serving::ModelSpec** model_spec) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*model_spec) == NULL) {
      message_arena->Own(*model_spec);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*model_spec)) {
      ::tensorflow::serving::ModelSpec* new_model_spec = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::serving::ModelSpec >(
            message_arena);
      new_model_spec->CopyFrom(**model_spec);
      *model_spec = new_model_spec;
    }
}
void LogMetadata::unsafe_arena_set_allocated_model_spec(
    ::tensorflow::serving::ModelSpec* model_spec) {
  if (GetArenaNoVirtual() == NULL) {
    delete model_spec_;
  }
  model_spec_ = model_spec;
  if (model_spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.LogMetadata.model_spec)
}
void LogMetadata::_slow_mutable_sampling_config() {
  sampling_config_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::serving::SamplingConfig >(
      GetArenaNoVirtual());
}
::tensorflow::serving::SamplingConfig* LogMetadata::_slow_release_sampling_config() {
  if (sampling_config_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::serving::SamplingConfig* temp = new ::tensorflow::serving::SamplingConfig;
    temp->MergeFrom(*sampling_config_);
    sampling_config_ = NULL;
    return temp;
  }
}
::tensorflow::serving::SamplingConfig* LogMetadata::unsafe_arena_release_sampling_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.LogMetadata.sampling_config)
  
  ::tensorflow::serving::SamplingConfig* temp = sampling_config_;
  sampling_config_ = NULL;
  return temp;
}
void LogMetadata::_slow_set_allocated_sampling_config(
    ::google::protobuf::Arena* message_arena, ::tensorflow::serving::SamplingConfig** sampling_config) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*sampling_config) == NULL) {
      message_arena->Own(*sampling_config);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*sampling_config)) {
      ::tensorflow::serving::SamplingConfig* new_sampling_config = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::serving::SamplingConfig >(
            message_arena);
      new_sampling_config->CopyFrom(**sampling_config);
      *sampling_config = new_sampling_config;
    }
}
void LogMetadata::unsafe_arena_set_allocated_sampling_config(
    ::tensorflow::serving::SamplingConfig* sampling_config) {
  if (GetArenaNoVirtual() == NULL) {
    delete sampling_config_;
  }
  sampling_config_ = sampling_config;
  if (sampling_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.LogMetadata.sampling_config)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogMetadata::kModelSpecFieldNumber;
const int LogMetadata::kSamplingConfigFieldNumber;
const int LogMetadata::kSavedModelTagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogMetadata::LogMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.LogMetadata)
}

LogMetadata::LogMetadata(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  saved_model_tags_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.LogMetadata)
}

void LogMetadata::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  model_spec_ = const_cast< ::tensorflow::serving::ModelSpec*>(&::tensorflow::serving::ModelSpec::default_instance());
  sampling_config_ = const_cast< ::tensorflow::serving::SamplingConfig*>(&::tensorflow::serving::SamplingConfig::default_instance());
}

LogMetadata::LogMetadata(const LogMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.LogMetadata)
}

void LogMetadata::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  model_spec_ = NULL;
  sampling_config_ = NULL;
}

LogMetadata::~LogMetadata() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.LogMetadata)
  SharedDtor();
}

void LogMetadata::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
    delete model_spec_;
    delete sampling_config_;
  }
}

void LogMetadata::ArenaDtor(void* object) {
  LogMetadata* _this = reinterpret_cast< LogMetadata* >(object);
  (void)_this;
}
void LogMetadata::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LogMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogMetadata_descriptor_;
}

const LogMetadata& LogMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_5fserving_2fcore_2flogging_2eproto();
  return *default_instance_;
}

LogMetadata* LogMetadata::default_instance_ = NULL;

LogMetadata* LogMetadata::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<LogMetadata>(arena);
}

void LogMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.LogMetadata)
  if (GetArenaNoVirtual() == NULL && model_spec_ != NULL) delete model_spec_;
  model_spec_ = NULL;
  if (GetArenaNoVirtual() == NULL && sampling_config_ != NULL) delete sampling_config_;
  sampling_config_ = NULL;
  saved_model_tags_.Clear();
}

bool LogMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.serving.LogMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tensorflow.serving.ModelSpec model_spec = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_model_spec()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sampling_config;
        break;
      }

      // optional .tensorflow.serving.SamplingConfig sampling_config = 2;
      case 2: {
        if (tag == 18) {
         parse_sampling_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sampling_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_saved_model_tags;
        break;
      }

      // repeated string saved_model_tags = 3;
      case 3: {
        if (tag == 26) {
         parse_saved_model_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_saved_model_tags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->saved_model_tags(this->saved_model_tags_size() - 1).data(),
            this->saved_model_tags(this->saved_model_tags_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.serving.LogMetadata.saved_model_tags"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_saved_model_tags;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.serving.LogMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.serving.LogMetadata)
  return false;
#undef DO_
}

void LogMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.serving.LogMetadata)
  // optional .tensorflow.serving.ModelSpec model_spec = 1;
  if (this->has_model_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->model_spec_, output);
  }

  // optional .tensorflow.serving.SamplingConfig sampling_config = 2;
  if (this->has_sampling_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->sampling_config_, output);
  }

  // repeated string saved_model_tags = 3;
  for (int i = 0; i < this->saved_model_tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->saved_model_tags(i).data(), this->saved_model_tags(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.LogMetadata.saved_model_tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->saved_model_tags(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.serving.LogMetadata)
}

::google::protobuf::uint8* LogMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.LogMetadata)
  // optional .tensorflow.serving.ModelSpec model_spec = 1;
  if (this->has_model_spec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->model_spec_, false, target);
  }

  // optional .tensorflow.serving.SamplingConfig sampling_config = 2;
  if (this->has_sampling_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->sampling_config_, false, target);
  }

  // repeated string saved_model_tags = 3;
  for (int i = 0; i < this->saved_model_tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->saved_model_tags(i).data(), this->saved_model_tags(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.LogMetadata.saved_model_tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->saved_model_tags(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.LogMetadata)
  return target;
}

int LogMetadata::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.LogMetadata)
  int total_size = 0;

  // optional .tensorflow.serving.ModelSpec model_spec = 1;
  if (this->has_model_spec()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->model_spec_);
  }

  // optional .tensorflow.serving.SamplingConfig sampling_config = 2;
  if (this->has_sampling_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sampling_config_);
  }

  // repeated string saved_model_tags = 3;
  total_size += 1 * this->saved_model_tags_size();
  for (int i = 0; i < this->saved_model_tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->saved_model_tags(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.LogMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LogMetadata* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.LogMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.LogMetadata)
    MergeFrom(*source);
  }
}

void LogMetadata::MergeFrom(const LogMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.LogMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  saved_model_tags_.MergeFrom(from.saved_model_tags_);
  if (from.has_model_spec()) {
    mutable_model_spec()->::tensorflow::serving::ModelSpec::MergeFrom(from.model_spec());
  }
  if (from.has_sampling_config()) {
    mutable_sampling_config()->::tensorflow::serving::SamplingConfig::MergeFrom(from.sampling_config());
  }
}

void LogMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.LogMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogMetadata::CopyFrom(const LogMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.LogMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogMetadata::IsInitialized() const {

  return true;
}

void LogMetadata::Swap(LogMetadata* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LogMetadata temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void LogMetadata::UnsafeArenaSwap(LogMetadata* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LogMetadata::InternalSwap(LogMetadata* other) {
  std::swap(model_spec_, other->model_spec_);
  std::swap(sampling_config_, other->sampling_config_);
  saved_model_tags_.UnsafeArenaSwap(&other->saved_model_tags_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogMetadata_descriptor_;
  metadata.reflection = LogMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogMetadata

// optional .tensorflow.serving.ModelSpec model_spec = 1;
bool LogMetadata::has_model_spec() const {
  return !_is_default_instance_ && model_spec_ != NULL;
}
void LogMetadata::clear_model_spec() {
  if (GetArenaNoVirtual() == NULL && model_spec_ != NULL) delete model_spec_;
  model_spec_ = NULL;
}
const ::tensorflow::serving::ModelSpec& LogMetadata::model_spec() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.LogMetadata.model_spec)
  return model_spec_ != NULL ? *model_spec_ : *default_instance_->model_spec_;
}
::tensorflow::serving::ModelSpec* LogMetadata::mutable_model_spec() {
  
  if (model_spec_ == NULL) {
    _slow_mutable_model_spec();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.LogMetadata.model_spec)
  return model_spec_;
}
::tensorflow::serving::ModelSpec* LogMetadata::release_model_spec() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.LogMetadata.model_spec)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_model_spec();
  } else {
    ::tensorflow::serving::ModelSpec* temp = model_spec_;
    model_spec_ = NULL;
    return temp;
  }
}
 void LogMetadata::set_allocated_model_spec(::tensorflow::serving::ModelSpec* model_spec) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete model_spec_;
  }
  if (model_spec != NULL) {
    _slow_set_allocated_model_spec(message_arena, &model_spec);
  }
  model_spec_ = model_spec;
  if (model_spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.LogMetadata.model_spec)
}

// optional .tensorflow.serving.SamplingConfig sampling_config = 2;
bool LogMetadata::has_sampling_config() const {
  return !_is_default_instance_ && sampling_config_ != NULL;
}
void LogMetadata::clear_sampling_config() {
  if (GetArenaNoVirtual() == NULL && sampling_config_ != NULL) delete sampling_config_;
  sampling_config_ = NULL;
}
const ::tensorflow::serving::SamplingConfig& LogMetadata::sampling_config() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.LogMetadata.sampling_config)
  return sampling_config_ != NULL ? *sampling_config_ : *default_instance_->sampling_config_;
}
::tensorflow::serving::SamplingConfig* LogMetadata::mutable_sampling_config() {
  
  if (sampling_config_ == NULL) {
    _slow_mutable_sampling_config();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.LogMetadata.sampling_config)
  return sampling_config_;
}
::tensorflow::serving::SamplingConfig* LogMetadata::release_sampling_config() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.LogMetadata.sampling_config)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_sampling_config();
  } else {
    ::tensorflow::serving::SamplingConfig* temp = sampling_config_;
    sampling_config_ = NULL;
    return temp;
  }
}
 void LogMetadata::set_allocated_sampling_config(::tensorflow::serving::SamplingConfig* sampling_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sampling_config_;
  }
  if (sampling_config != NULL) {
    _slow_set_allocated_sampling_config(message_arena, &sampling_config);
  }
  sampling_config_ = sampling_config;
  if (sampling_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.LogMetadata.sampling_config)
}

// repeated string saved_model_tags = 3;
int LogMetadata::saved_model_tags_size() const {
  return saved_model_tags_.size();
}
void LogMetadata::clear_saved_model_tags() {
  saved_model_tags_.Clear();
}
 const ::std::string& LogMetadata::saved_model_tags(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.LogMetadata.saved_model_tags)
  return saved_model_tags_.Get(index);
}
 ::std::string* LogMetadata::mutable_saved_model_tags(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.LogMetadata.saved_model_tags)
  return saved_model_tags_.Mutable(index);
}
 void LogMetadata::set_saved_model_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.serving.LogMetadata.saved_model_tags)
  saved_model_tags_.Mutable(index)->assign(value);
}
 void LogMetadata::set_saved_model_tags(int index, const char* value) {
  saved_model_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.LogMetadata.saved_model_tags)
}
 void LogMetadata::set_saved_model_tags(int index, const char* value, size_t size) {
  saved_model_tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.LogMetadata.saved_model_tags)
}
 ::std::string* LogMetadata::add_saved_model_tags() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.serving.LogMetadata.saved_model_tags)
  return saved_model_tags_.Add();
}
 void LogMetadata::add_saved_model_tags(const ::std::string& value) {
  saved_model_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.serving.LogMetadata.saved_model_tags)
}
 void LogMetadata::add_saved_model_tags(const char* value) {
  saved_model_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.serving.LogMetadata.saved_model_tags)
}
 void LogMetadata::add_saved_model_tags(const char* value, size_t size) {
  saved_model_tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.serving.LogMetadata.saved_model_tags)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
LogMetadata::saved_model_tags() const {
  // @@protoc_insertion_point(field_list:tensorflow.serving.LogMetadata.saved_model_tags)
  return saved_model_tags_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
LogMetadata::mutable_saved_model_tags() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.LogMetadata.saved_model_tags)
  return &saved_model_tags_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace serving
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
