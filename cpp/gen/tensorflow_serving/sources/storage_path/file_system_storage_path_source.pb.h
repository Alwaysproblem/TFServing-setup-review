// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/sources/storage_path/file_system_storage_path_source.proto

#ifndef PROTOBUF_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto__INCLUDED
#define PROTOBUF_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {
namespace serving {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto();
void protobuf_AssignDesc_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto();
void protobuf_ShutdownFile_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto();

class FileSystemStoragePathSourceConfig;
class FileSystemStoragePathSourceConfig_ServableToMonitor;
class FileSystemStoragePathSourceConfig_ServableVersionPolicy;
class FileSystemStoragePathSourceConfig_ServableVersionPolicy_All;
class FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest;
class FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific;

// ===================================================================

class FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest) */ {
 public:
  FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest();
  virtual ~FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest();

  FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& from);

  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& operator=(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& default_instance();

  void Swap(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* other);

  // implements Message ----------------------------------------------

  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* New() const { return New(NULL); }

  FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& from);
  void MergeFrom(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_versions = 1;
  void clear_num_versions();
  static const int kNumVersionsFieldNumber = 1;
  ::google::protobuf::uint32 num_versions() const;
  void set_num_versions(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 num_versions_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto();
  friend void protobuf_AssignDesc_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto();

  void InitAsDefaultInstance();
  static FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* default_instance_;
};
// -------------------------------------------------------------------

class FileSystemStoragePathSourceConfig_ServableVersionPolicy_All : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All) */ {
 public:
  FileSystemStoragePathSourceConfig_ServableVersionPolicy_All();
  virtual ~FileSystemStoragePathSourceConfig_ServableVersionPolicy_All();

  FileSystemStoragePathSourceConfig_ServableVersionPolicy_All(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& from);

  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& operator=(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& default_instance();

  void Swap(FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* other);

  // implements Message ----------------------------------------------

  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* New() const { return New(NULL); }

  FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& from);
  void MergeFrom(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto();
  friend void protobuf_AssignDesc_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto();

  void InitAsDefaultInstance();
  static FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* default_instance_;
};
// -------------------------------------------------------------------

class FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific) */ {
 public:
  FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific();
  virtual ~FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific();

  FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& from);

  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& operator=(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& default_instance();

  void Swap(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* other);

  // implements Message ----------------------------------------------

  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* New() const { return New(NULL); }

  FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& from);
  void MergeFrom(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 versions = 1;
  int versions_size() const;
  void clear_versions();
  static const int kVersionsFieldNumber = 1;
  ::google::protobuf::int64 versions(int index) const;
  void set_versions(int index, ::google::protobuf::int64 value);
  void add_versions(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      versions() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_versions();

  // @@protoc_insertion_point(class_scope:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > versions_;
  mutable int _versions_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto();
  friend void protobuf_AssignDesc_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto();

  void InitAsDefaultInstance();
  static FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* default_instance_;
};
// -------------------------------------------------------------------

class FileSystemStoragePathSourceConfig_ServableVersionPolicy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy) */ {
 public:
  FileSystemStoragePathSourceConfig_ServableVersionPolicy();
  virtual ~FileSystemStoragePathSourceConfig_ServableVersionPolicy();

  FileSystemStoragePathSourceConfig_ServableVersionPolicy(const FileSystemStoragePathSourceConfig_ServableVersionPolicy& from);

  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy& operator=(const FileSystemStoragePathSourceConfig_ServableVersionPolicy& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystemStoragePathSourceConfig_ServableVersionPolicy& default_instance();

  enum PolicyChoiceCase {
    kLatest = 100,
    kAll = 101,
    kSpecific = 102,
    POLICY_CHOICE_NOT_SET = 0,
  };

  void Swap(FileSystemStoragePathSourceConfig_ServableVersionPolicy* other);

  // implements Message ----------------------------------------------

  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy* New() const { return New(NULL); }

  FileSystemStoragePathSourceConfig_ServableVersionPolicy* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystemStoragePathSourceConfig_ServableVersionPolicy& from);
  void MergeFrom(const FileSystemStoragePathSourceConfig_ServableVersionPolicy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileSystemStoragePathSourceConfig_ServableVersionPolicy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest Latest;
  typedef FileSystemStoragePathSourceConfig_ServableVersionPolicy_All All;
  typedef FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific Specific;

  // accessors -------------------------------------------------------

  // optional .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest latest = 100;
  bool has_latest() const;
  void clear_latest();
  static const int kLatestFieldNumber = 100;
  const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& latest() const;
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* mutable_latest();
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* release_latest();
  void set_allocated_latest(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* latest);

  // optional .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All all = 101;
  bool has_all() const;
  void clear_all();
  static const int kAllFieldNumber = 101;
  const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& all() const;
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* mutable_all();
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* release_all();
  void set_allocated_all(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* all);

  // optional .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific specific = 102;
  bool has_specific() const;
  void clear_specific();
  static const int kSpecificFieldNumber = 102;
  const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& specific() const;
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* mutable_specific();
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* release_specific();
  void set_allocated_specific(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* specific);

  PolicyChoiceCase policy_choice_case() const;
  // @@protoc_insertion_point(class_scope:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
 private:
  inline void set_has_latest();
  inline void set_has_all();
  inline void set_has_specific();

  inline bool has_policy_choice() const;
  void clear_policy_choice();
  inline void clear_has_policy_choice();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  union PolicyChoiceUnion {
    PolicyChoiceUnion() {}
    ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* latest_;
    ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* all_;
    ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* specific_;
  } policy_choice_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto();
  friend void protobuf_AssignDesc_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto();

  void InitAsDefaultInstance();
  static FileSystemStoragePathSourceConfig_ServableVersionPolicy* default_instance_;
};
// -------------------------------------------------------------------

class FileSystemStoragePathSourceConfig_ServableToMonitor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor) */ {
 public:
  FileSystemStoragePathSourceConfig_ServableToMonitor();
  virtual ~FileSystemStoragePathSourceConfig_ServableToMonitor();

  FileSystemStoragePathSourceConfig_ServableToMonitor(const FileSystemStoragePathSourceConfig_ServableToMonitor& from);

  inline FileSystemStoragePathSourceConfig_ServableToMonitor& operator=(const FileSystemStoragePathSourceConfig_ServableToMonitor& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystemStoragePathSourceConfig_ServableToMonitor& default_instance();

  void Swap(FileSystemStoragePathSourceConfig_ServableToMonitor* other);

  // implements Message ----------------------------------------------

  inline FileSystemStoragePathSourceConfig_ServableToMonitor* New() const { return New(NULL); }

  FileSystemStoragePathSourceConfig_ServableToMonitor* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystemStoragePathSourceConfig_ServableToMonitor& from);
  void MergeFrom(const FileSystemStoragePathSourceConfig_ServableToMonitor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileSystemStoragePathSourceConfig_ServableToMonitor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string servable_name = 1;
  void clear_servable_name();
  static const int kServableNameFieldNumber = 1;
  const ::std::string& servable_name() const;
  void set_servable_name(const ::std::string& value);
  void set_servable_name(const char* value);
  void set_servable_name(const char* value, size_t size);
  ::std::string* mutable_servable_name();
  ::std::string* release_servable_name();
  void set_allocated_servable_name(::std::string* servable_name);

  // optional string base_path = 2;
  void clear_base_path();
  static const int kBasePathFieldNumber = 2;
  const ::std::string& base_path() const;
  void set_base_path(const ::std::string& value);
  void set_base_path(const char* value);
  void set_base_path(const char* value, size_t size);
  ::std::string* mutable_base_path();
  ::std::string* release_base_path();
  void set_allocated_base_path(::std::string* base_path);

  // optional .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy servable_version_policy = 4;
  bool has_servable_version_policy() const;
  void clear_servable_version_policy();
  static const int kServableVersionPolicyFieldNumber = 4;
  const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy& servable_version_policy() const;
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* mutable_servable_version_policy();
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* release_servable_version_policy();
  void set_allocated_servable_version_policy(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* servable_version_policy);

  // @@protoc_insertion_point(class_scope:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr servable_name_;
  ::google::protobuf::internal::ArenaStringPtr base_path_;
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* servable_version_policy_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto();
  friend void protobuf_AssignDesc_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto();

  void InitAsDefaultInstance();
  static FileSystemStoragePathSourceConfig_ServableToMonitor* default_instance_;
};
// -------------------------------------------------------------------

class FileSystemStoragePathSourceConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.FileSystemStoragePathSourceConfig) */ {
 public:
  FileSystemStoragePathSourceConfig();
  virtual ~FileSystemStoragePathSourceConfig();

  FileSystemStoragePathSourceConfig(const FileSystemStoragePathSourceConfig& from);

  inline FileSystemStoragePathSourceConfig& operator=(const FileSystemStoragePathSourceConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSystemStoragePathSourceConfig& default_instance();

  void Swap(FileSystemStoragePathSourceConfig* other);

  // implements Message ----------------------------------------------

  inline FileSystemStoragePathSourceConfig* New() const { return New(NULL); }

  FileSystemStoragePathSourceConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileSystemStoragePathSourceConfig& from);
  void MergeFrom(const FileSystemStoragePathSourceConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileSystemStoragePathSourceConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FileSystemStoragePathSourceConfig_ServableVersionPolicy ServableVersionPolicy;
  typedef FileSystemStoragePathSourceConfig_ServableToMonitor ServableToMonitor;

  // accessors -------------------------------------------------------

  // repeated .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor servables = 5;
  int servables_size() const;
  void clear_servables();
  static const int kServablesFieldNumber = 5;
  const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor& servables(int index) const;
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor* mutable_servables(int index);
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor* add_servables();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor >*
      mutable_servables();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor >&
      servables() const;

  // optional string servable_name = 1 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_servable_name();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kServableNameFieldNumber = 1;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::std::string& servable_name() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_servable_name(const ::std::string& value);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_servable_name(const char* value);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_servable_name(const char* value, size_t size);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::std::string* mutable_servable_name();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::std::string* release_servable_name();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_allocated_servable_name(::std::string* servable_name);

  // optional string base_path = 2 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_base_path();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kBasePathFieldNumber = 2;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::std::string& base_path() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_base_path(const ::std::string& value);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_base_path(const char* value);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_base_path(const char* value, size_t size);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::std::string* mutable_base_path();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::std::string* release_base_path();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_allocated_base_path(::std::string* base_path);

  // optional int64 file_system_poll_wait_seconds = 3;
  void clear_file_system_poll_wait_seconds();
  static const int kFileSystemPollWaitSecondsFieldNumber = 3;
  ::google::protobuf::int64 file_system_poll_wait_seconds() const;
  void set_file_system_poll_wait_seconds(::google::protobuf::int64 value);

  // optional bool fail_if_zero_versions_at_startup = 4 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_fail_if_zero_versions_at_startup();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kFailIfZeroVersionsAtStartupFieldNumber = 4;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool fail_if_zero_versions_at_startup() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_fail_if_zero_versions_at_startup(bool value);

  // optional bool servable_versions_always_present = 6;
  void clear_servable_versions_always_present();
  static const int kServableVersionsAlwaysPresentFieldNumber = 6;
  bool servable_versions_always_present() const;
  void set_servable_versions_always_present(bool value);

  // @@protoc_insertion_point(class_scope:tensorflow.serving.FileSystemStoragePathSourceConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor > servables_;
  ::google::protobuf::internal::ArenaStringPtr servable_name_;
  ::google::protobuf::internal::ArenaStringPtr base_path_;
  ::google::protobuf::int64 file_system_poll_wait_seconds_;
  bool fail_if_zero_versions_at_startup_;
  bool servable_versions_always_present_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto();
  friend void protobuf_AssignDesc_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto();

  void InitAsDefaultInstance();
  static FileSystemStoragePathSourceConfig* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest

// optional uint32 num_versions = 1;
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::clear_num_versions() {
  num_versions_ = 0u;
}
inline ::google::protobuf::uint32 FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::num_versions() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest.num_versions)
  return num_versions_;
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::set_num_versions(::google::protobuf::uint32 value) {
  
  num_versions_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest.num_versions)
}

// -------------------------------------------------------------------

// FileSystemStoragePathSourceConfig_ServableVersionPolicy_All

// -------------------------------------------------------------------

// FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific

// repeated int64 versions = 1;
inline int FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::versions_size() const {
  return versions_.size();
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::clear_versions() {
  versions_.Clear();
}
inline ::google::protobuf::int64 FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::versions(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific.versions)
  return versions_.Get(index);
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::set_versions(int index, ::google::protobuf::int64 value) {
  versions_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific.versions)
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::add_versions(::google::protobuf::int64 value) {
  versions_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific.versions)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::versions() const {
  // @@protoc_insertion_point(field_list:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific.versions)
  return versions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::mutable_versions() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific.versions)
  return &versions_;
}

// -------------------------------------------------------------------

// FileSystemStoragePathSourceConfig_ServableVersionPolicy

// optional .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest latest = 100;
inline bool FileSystemStoragePathSourceConfig_ServableVersionPolicy::has_latest() const {
  return policy_choice_case() == kLatest;
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy::set_has_latest() {
  _oneof_case_[0] = kLatest;
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy::clear_latest() {
  if (has_latest()) {
    delete policy_choice_.latest_;
    clear_has_policy_choice();
  }
}
inline  const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& FileSystemStoragePathSourceConfig_ServableVersionPolicy::latest() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.latest)
  return has_latest()
      ? *policy_choice_.latest_
      : ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::default_instance();
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* FileSystemStoragePathSourceConfig_ServableVersionPolicy::mutable_latest() {
  if (!has_latest()) {
    clear_policy_choice();
    set_has_latest();
    policy_choice_.latest_ = new ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.latest)
  return policy_choice_.latest_;
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* FileSystemStoragePathSourceConfig_ServableVersionPolicy::release_latest() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.latest)
  if (has_latest()) {
    clear_has_policy_choice();
    ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* temp = policy_choice_.latest_;
    policy_choice_.latest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy::set_allocated_latest(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* latest) {
  clear_policy_choice();
  if (latest) {
    set_has_latest();
    policy_choice_.latest_ = latest;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.latest)
}

// optional .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All all = 101;
inline bool FileSystemStoragePathSourceConfig_ServableVersionPolicy::has_all() const {
  return policy_choice_case() == kAll;
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy::set_has_all() {
  _oneof_case_[0] = kAll;
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy::clear_all() {
  if (has_all()) {
    delete policy_choice_.all_;
    clear_has_policy_choice();
  }
}
inline  const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& FileSystemStoragePathSourceConfig_ServableVersionPolicy::all() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.all)
  return has_all()
      ? *policy_choice_.all_
      : ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::default_instance();
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* FileSystemStoragePathSourceConfig_ServableVersionPolicy::mutable_all() {
  if (!has_all()) {
    clear_policy_choice();
    set_has_all();
    policy_choice_.all_ = new ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.all)
  return policy_choice_.all_;
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* FileSystemStoragePathSourceConfig_ServableVersionPolicy::release_all() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.all)
  if (has_all()) {
    clear_has_policy_choice();
    ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* temp = policy_choice_.all_;
    policy_choice_.all_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy::set_allocated_all(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* all) {
  clear_policy_choice();
  if (all) {
    set_has_all();
    policy_choice_.all_ = all;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.all)
}

// optional .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific specific = 102;
inline bool FileSystemStoragePathSourceConfig_ServableVersionPolicy::has_specific() const {
  return policy_choice_case() == kSpecific;
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy::set_has_specific() {
  _oneof_case_[0] = kSpecific;
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy::clear_specific() {
  if (has_specific()) {
    delete policy_choice_.specific_;
    clear_has_policy_choice();
  }
}
inline  const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& FileSystemStoragePathSourceConfig_ServableVersionPolicy::specific() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.specific)
  return has_specific()
      ? *policy_choice_.specific_
      : ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::default_instance();
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* FileSystemStoragePathSourceConfig_ServableVersionPolicy::mutable_specific() {
  if (!has_specific()) {
    clear_policy_choice();
    set_has_specific();
    policy_choice_.specific_ = new ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.specific)
  return policy_choice_.specific_;
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* FileSystemStoragePathSourceConfig_ServableVersionPolicy::release_specific() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.specific)
  if (has_specific()) {
    clear_has_policy_choice();
    ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* temp = policy_choice_.specific_;
    policy_choice_.specific_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy::set_allocated_specific(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* specific) {
  clear_policy_choice();
  if (specific) {
    set_has_specific();
    policy_choice_.specific_ = specific;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.specific)
}

inline bool FileSystemStoragePathSourceConfig_ServableVersionPolicy::has_policy_choice() const {
  return policy_choice_case() != POLICY_CHOICE_NOT_SET;
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy::clear_has_policy_choice() {
  _oneof_case_[0] = POLICY_CHOICE_NOT_SET;
}
inline FileSystemStoragePathSourceConfig_ServableVersionPolicy::PolicyChoiceCase FileSystemStoragePathSourceConfig_ServableVersionPolicy::policy_choice_case() const {
  return FileSystemStoragePathSourceConfig_ServableVersionPolicy::PolicyChoiceCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FileSystemStoragePathSourceConfig_ServableToMonitor

// optional string servable_name = 1;
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::clear_servable_name() {
  servable_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileSystemStoragePathSourceConfig_ServableToMonitor::servable_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name)
  return servable_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::set_servable_name(const ::std::string& value) {
  
  servable_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name)
}
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::set_servable_name(const char* value) {
  
  servable_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name)
}
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::set_servable_name(const char* value, size_t size) {
  
  servable_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name)
}
inline ::std::string* FileSystemStoragePathSourceConfig_ServableToMonitor::mutable_servable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name)
  return servable_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileSystemStoragePathSourceConfig_ServableToMonitor::release_servable_name() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name)
  
  return servable_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::set_allocated_servable_name(::std::string* servable_name) {
  if (servable_name != NULL) {
    
  } else {
    
  }
  servable_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servable_name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name)
}

// optional string base_path = 2;
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::clear_base_path() {
  base_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileSystemStoragePathSourceConfig_ServableToMonitor::base_path() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path)
  return base_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::set_base_path(const ::std::string& value) {
  
  base_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path)
}
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::set_base_path(const char* value) {
  
  base_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path)
}
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::set_base_path(const char* value, size_t size) {
  
  base_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path)
}
inline ::std::string* FileSystemStoragePathSourceConfig_ServableToMonitor::mutable_base_path() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path)
  return base_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileSystemStoragePathSourceConfig_ServableToMonitor::release_base_path() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path)
  
  return base_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::set_allocated_base_path(::std::string* base_path) {
  if (base_path != NULL) {
    
  } else {
    
  }
  base_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), base_path);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path)
}

// optional .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy servable_version_policy = 4;
inline bool FileSystemStoragePathSourceConfig_ServableToMonitor::has_servable_version_policy() const {
  return !_is_default_instance_ && servable_version_policy_ != NULL;
}
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::clear_servable_version_policy() {
  if (GetArenaNoVirtual() == NULL && servable_version_policy_ != NULL) delete servable_version_policy_;
  servable_version_policy_ = NULL;
}
inline const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy& FileSystemStoragePathSourceConfig_ServableToMonitor::servable_version_policy() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_version_policy)
  return servable_version_policy_ != NULL ? *servable_version_policy_ : *default_instance_->servable_version_policy_;
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* FileSystemStoragePathSourceConfig_ServableToMonitor::mutable_servable_version_policy() {
  
  if (servable_version_policy_ == NULL) {
    servable_version_policy_ = new ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_version_policy)
  return servable_version_policy_;
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* FileSystemStoragePathSourceConfig_ServableToMonitor::release_servable_version_policy() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_version_policy)
  
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* temp = servable_version_policy_;
  servable_version_policy_ = NULL;
  return temp;
}
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::set_allocated_servable_version_policy(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* servable_version_policy) {
  delete servable_version_policy_;
  servable_version_policy_ = servable_version_policy;
  if (servable_version_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_version_policy)
}

// -------------------------------------------------------------------

// FileSystemStoragePathSourceConfig

// repeated .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor servables = 5;
inline int FileSystemStoragePathSourceConfig::servables_size() const {
  return servables_.size();
}
inline void FileSystemStoragePathSourceConfig::clear_servables() {
  servables_.Clear();
}
inline const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor& FileSystemStoragePathSourceConfig::servables(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.servables)
  return servables_.Get(index);
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor* FileSystemStoragePathSourceConfig::mutable_servables(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.servables)
  return servables_.Mutable(index);
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor* FileSystemStoragePathSourceConfig::add_servables() {
  // @@protoc_insertion_point(field_add:tensorflow.serving.FileSystemStoragePathSourceConfig.servables)
  return servables_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor >*
FileSystemStoragePathSourceConfig::mutable_servables() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.FileSystemStoragePathSourceConfig.servables)
  return &servables_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor >&
FileSystemStoragePathSourceConfig::servables() const {
  // @@protoc_insertion_point(field_list:tensorflow.serving.FileSystemStoragePathSourceConfig.servables)
  return servables_;
}

// optional string servable_name = 1 [deprecated = true];
inline void FileSystemStoragePathSourceConfig::clear_servable_name() {
  servable_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileSystemStoragePathSourceConfig::servable_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name)
  return servable_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileSystemStoragePathSourceConfig::set_servable_name(const ::std::string& value) {
  
  servable_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name)
}
inline void FileSystemStoragePathSourceConfig::set_servable_name(const char* value) {
  
  servable_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name)
}
inline void FileSystemStoragePathSourceConfig::set_servable_name(const char* value, size_t size) {
  
  servable_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name)
}
inline ::std::string* FileSystemStoragePathSourceConfig::mutable_servable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name)
  return servable_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileSystemStoragePathSourceConfig::release_servable_name() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name)
  
  return servable_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileSystemStoragePathSourceConfig::set_allocated_servable_name(::std::string* servable_name) {
  if (servable_name != NULL) {
    
  } else {
    
  }
  servable_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servable_name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name)
}

// optional string base_path = 2 [deprecated = true];
inline void FileSystemStoragePathSourceConfig::clear_base_path() {
  base_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileSystemStoragePathSourceConfig::base_path() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.base_path)
  return base_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileSystemStoragePathSourceConfig::set_base_path(const ::std::string& value) {
  
  base_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.base_path)
}
inline void FileSystemStoragePathSourceConfig::set_base_path(const char* value) {
  
  base_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.FileSystemStoragePathSourceConfig.base_path)
}
inline void FileSystemStoragePathSourceConfig::set_base_path(const char* value, size_t size) {
  
  base_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.FileSystemStoragePathSourceConfig.base_path)
}
inline ::std::string* FileSystemStoragePathSourceConfig::mutable_base_path() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.base_path)
  return base_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileSystemStoragePathSourceConfig::release_base_path() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.FileSystemStoragePathSourceConfig.base_path)
  
  return base_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileSystemStoragePathSourceConfig::set_allocated_base_path(::std::string* base_path) {
  if (base_path != NULL) {
    
  } else {
    
  }
  base_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), base_path);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.base_path)
}

// optional int64 file_system_poll_wait_seconds = 3;
inline void FileSystemStoragePathSourceConfig::clear_file_system_poll_wait_seconds() {
  file_system_poll_wait_seconds_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FileSystemStoragePathSourceConfig::file_system_poll_wait_seconds() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.file_system_poll_wait_seconds)
  return file_system_poll_wait_seconds_;
}
inline void FileSystemStoragePathSourceConfig::set_file_system_poll_wait_seconds(::google::protobuf::int64 value) {
  
  file_system_poll_wait_seconds_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.file_system_poll_wait_seconds)
}

// optional bool fail_if_zero_versions_at_startup = 4 [deprecated = true];
inline void FileSystemStoragePathSourceConfig::clear_fail_if_zero_versions_at_startup() {
  fail_if_zero_versions_at_startup_ = false;
}
inline bool FileSystemStoragePathSourceConfig::fail_if_zero_versions_at_startup() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.fail_if_zero_versions_at_startup)
  return fail_if_zero_versions_at_startup_;
}
inline void FileSystemStoragePathSourceConfig::set_fail_if_zero_versions_at_startup(bool value) {
  
  fail_if_zero_versions_at_startup_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.fail_if_zero_versions_at_startup)
}

// optional bool servable_versions_always_present = 6;
inline void FileSystemStoragePathSourceConfig::clear_servable_versions_always_present() {
  servable_versions_always_present_ = false;
}
inline bool FileSystemStoragePathSourceConfig::servable_versions_always_present() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_versions_always_present)
  return servable_versions_always_present_;
}
inline void FileSystemStoragePathSourceConfig::set_servable_versions_always_present(bool value) {
  
  servable_versions_always_present_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_versions_always_present)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serving
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto__INCLUDED
