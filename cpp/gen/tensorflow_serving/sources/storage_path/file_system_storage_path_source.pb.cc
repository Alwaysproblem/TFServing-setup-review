// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/sources/storage_path/file_system_storage_path_source.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow_serving/sources/storage_path/file_system_storage_path_source.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {
namespace serving {

namespace {

const ::google::protobuf::Descriptor* FileSystemStoragePathSourceConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystemStoragePathSourceConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystemStoragePathSourceConfig_ServableVersionPolicy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystemStoragePathSourceConfig_ServableVersionPolicy_reflection_ = NULL;
struct FileSystemStoragePathSourceConfig_ServableVersionPolicyOneofInstance {
  const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* latest_;
  const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* all_;
  const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* specific_;
}* FileSystemStoragePathSourceConfig_ServableVersionPolicy_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileSystemStoragePathSourceConfig_ServableToMonitor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileSystemStoragePathSourceConfig_ServableToMonitor_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto() {
  protobuf_AddDesc_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow_serving/sources/storage_path/file_system_storage_path_source.proto");
  GOOGLE_CHECK(file != NULL);
  FileSystemStoragePathSourceConfig_descriptor_ = file->message_type(0);
  static const int FileSystemStoragePathSourceConfig_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemStoragePathSourceConfig, servables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemStoragePathSourceConfig, servable_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemStoragePathSourceConfig, base_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemStoragePathSourceConfig, file_system_poll_wait_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemStoragePathSourceConfig, fail_if_zero_versions_at_startup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemStoragePathSourceConfig, servable_versions_always_present_),
  };
  FileSystemStoragePathSourceConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FileSystemStoragePathSourceConfig_descriptor_,
      FileSystemStoragePathSourceConfig::default_instance_,
      FileSystemStoragePathSourceConfig_offsets_,
      -1,
      -1,
      -1,
      sizeof(FileSystemStoragePathSourceConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemStoragePathSourceConfig, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemStoragePathSourceConfig, _is_default_instance_));
  FileSystemStoragePathSourceConfig_ServableVersionPolicy_descriptor_ = FileSystemStoragePathSourceConfig_descriptor_->nested_type(0);
  static const int FileSystemStoragePathSourceConfig_ServableVersionPolicy_offsets_[4] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(FileSystemStoragePathSourceConfig_ServableVersionPolicy_default_oneof_instance_, latest_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(FileSystemStoragePathSourceConfig_ServableVersionPolicy_default_oneof_instance_, all_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(FileSystemStoragePathSourceConfig_ServableVersionPolicy_default_oneof_instance_, specific_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemStoragePathSourceConfig_ServableVersionPolicy, policy_choice_),
  };
  FileSystemStoragePathSourceConfig_ServableVersionPolicy_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FileSystemStoragePathSourceConfig_ServableVersionPolicy_descriptor_,
      FileSystemStoragePathSourceConfig_ServableVersionPolicy::default_instance_,
      FileSystemStoragePathSourceConfig_ServableVersionPolicy_offsets_,
      -1,
      -1,
      -1,
      FileSystemStoragePathSourceConfig_ServableVersionPolicy_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemStoragePathSourceConfig_ServableVersionPolicy, _oneof_case_[0]),
      sizeof(FileSystemStoragePathSourceConfig_ServableVersionPolicy),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemStoragePathSourceConfig_ServableVersionPolicy, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemStoragePathSourceConfig_ServableVersionPolicy, _is_default_instance_));
  FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_descriptor_ = FileSystemStoragePathSourceConfig_ServableVersionPolicy_descriptor_->nested_type(0);
  static const int FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest, num_versions_),
  };
  FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_descriptor_,
      FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::default_instance_,
      FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_offsets_,
      -1,
      -1,
      -1,
      sizeof(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest, _is_default_instance_));
  FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_descriptor_ = FileSystemStoragePathSourceConfig_ServableVersionPolicy_descriptor_->nested_type(1);
  static const int FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_offsets_[1] = {
  };
  FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_descriptor_,
      FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::default_instance_,
      FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_offsets_,
      -1,
      -1,
      -1,
      sizeof(FileSystemStoragePathSourceConfig_ServableVersionPolicy_All),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemStoragePathSourceConfig_ServableVersionPolicy_All, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemStoragePathSourceConfig_ServableVersionPolicy_All, _is_default_instance_));
  FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_descriptor_ = FileSystemStoragePathSourceConfig_ServableVersionPolicy_descriptor_->nested_type(2);
  static const int FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific, versions_),
  };
  FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_descriptor_,
      FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::default_instance_,
      FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_offsets_,
      -1,
      -1,
      -1,
      sizeof(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific, _is_default_instance_));
  FileSystemStoragePathSourceConfig_ServableToMonitor_descriptor_ = FileSystemStoragePathSourceConfig_descriptor_->nested_type(1);
  static const int FileSystemStoragePathSourceConfig_ServableToMonitor_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemStoragePathSourceConfig_ServableToMonitor, servable_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemStoragePathSourceConfig_ServableToMonitor, base_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemStoragePathSourceConfig_ServableToMonitor, servable_version_policy_),
  };
  FileSystemStoragePathSourceConfig_ServableToMonitor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FileSystemStoragePathSourceConfig_ServableToMonitor_descriptor_,
      FileSystemStoragePathSourceConfig_ServableToMonitor::default_instance_,
      FileSystemStoragePathSourceConfig_ServableToMonitor_offsets_,
      -1,
      -1,
      -1,
      sizeof(FileSystemStoragePathSourceConfig_ServableToMonitor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemStoragePathSourceConfig_ServableToMonitor, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSystemStoragePathSourceConfig_ServableToMonitor, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FileSystemStoragePathSourceConfig_descriptor_, &FileSystemStoragePathSourceConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FileSystemStoragePathSourceConfig_ServableVersionPolicy_descriptor_, &FileSystemStoragePathSourceConfig_ServableVersionPolicy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_descriptor_, &FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_descriptor_, &FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_descriptor_, &FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FileSystemStoragePathSourceConfig_ServableToMonitor_descriptor_, &FileSystemStoragePathSourceConfig_ServableToMonitor::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto() {
  delete FileSystemStoragePathSourceConfig::default_instance_;
  delete FileSystemStoragePathSourceConfig_reflection_;
  delete FileSystemStoragePathSourceConfig_ServableVersionPolicy::default_instance_;
  delete FileSystemStoragePathSourceConfig_ServableVersionPolicy_default_oneof_instance_;
  delete FileSystemStoragePathSourceConfig_ServableVersionPolicy_reflection_;
  delete FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::default_instance_;
  delete FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_reflection_;
  delete FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::default_instance_;
  delete FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_reflection_;
  delete FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::default_instance_;
  delete FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_reflection_;
  delete FileSystemStoragePathSourceConfig_ServableToMonitor::default_instance_;
  delete FileSystemStoragePathSourceConfig_ServableToMonitor_reflection_;
}

void protobuf_AddDesc_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\nMtensorflow_serving/sources/storage_pat"
    "h/file_system_storage_path_source.proto\022"
    "\022tensorflow.serving\"\204\007\n!FileSystemStorag"
    "ePathSourceConfig\022Z\n\tservables\030\005 \003(\0132G.t"
    "ensorflow.serving.FileSystemStoragePathS"
    "ourceConfig.ServableToMonitor\022\031\n\rservabl"
    "e_name\030\001 \001(\tB\002\030\001\022\025\n\tbase_path\030\002 \001(\tB\002\030\001\022"
    "%\n\035file_system_poll_wait_seconds\030\003 \001(\003\022,"
    "\n fail_if_zero_versions_at_startup\030\004 \001(\010"
    "B\002\030\001\022(\n servable_versions_always_present"
    "\030\006 \001(\010\032\235\003\n\025ServableVersionPolicy\022d\n\006late"
    "st\030d \001(\0132R.tensorflow.serving.FileSystem"
    "StoragePathSourceConfig.ServableVersionP"
    "olicy.LatestH\000\022^\n\003all\030e \001(\0132O.tensorflow"
    ".serving.FileSystemStoragePathSourceConf"
    "ig.ServableVersionPolicy.AllH\000\022h\n\010specif"
    "ic\030f \001(\0132T.tensorflow.serving.FileSystem"
    "StoragePathSourceConfig.ServableVersionP"
    "olicy.SpecificH\000\032\036\n\006Latest\022\024\n\014num_versio"
    "ns\030\001 \001(\r\032\005\n\003All\032\034\n\010Specific\022\020\n\010versions\030"
    "\001 \003(\003B\017\n\rpolicy_choice\032\261\001\n\021ServableToMon"
    "itor\022\025\n\rservable_name\030\001 \001(\t\022\021\n\tbase_path"
    "\030\002 \001(\t\022l\n\027servable_version_policy\030\004 \001(\0132"
    "K.tensorflow.serving.FileSystemStoragePa"
    "thSourceConfig.ServableVersionPolicyJ\004\010\003"
    "\020\004b\006proto3", 1010);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow_serving/sources/storage_path/file_system_storage_path_source.proto", &protobuf_RegisterTypes);
  FileSystemStoragePathSourceConfig::default_instance_ = new FileSystemStoragePathSourceConfig();
  FileSystemStoragePathSourceConfig_ServableVersionPolicy::default_instance_ = new FileSystemStoragePathSourceConfig_ServableVersionPolicy();
  FileSystemStoragePathSourceConfig_ServableVersionPolicy_default_oneof_instance_ = new FileSystemStoragePathSourceConfig_ServableVersionPolicyOneofInstance();
  FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::default_instance_ = new FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest();
  FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::default_instance_ = new FileSystemStoragePathSourceConfig_ServableVersionPolicy_All();
  FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::default_instance_ = new FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific();
  FileSystemStoragePathSourceConfig_ServableToMonitor::default_instance_ = new FileSystemStoragePathSourceConfig_ServableToMonitor();
  FileSystemStoragePathSourceConfig::default_instance_->InitAsDefaultInstance();
  FileSystemStoragePathSourceConfig_ServableVersionPolicy::default_instance_->InitAsDefaultInstance();
  FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::default_instance_->InitAsDefaultInstance();
  FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::default_instance_->InitAsDefaultInstance();
  FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::default_instance_->InitAsDefaultInstance();
  FileSystemStoragePathSourceConfig_ServableToMonitor::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto {
  StaticDescriptorInitializer_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto() {
    protobuf_AddDesc_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto();
  }
} static_descriptor_initializer_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::kNumVersionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  num_versions_ = 0u;
}

FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::~FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
  SharedDtor();
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_descriptor_;
}

const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto();
  return *default_instance_;
}

FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::default_instance_ = NULL;

FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::New(::google::protobuf::Arena* arena) const {
  FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* n = new FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
  num_versions_ = 0u;
}

bool FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_versions = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_versions_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
  return false;
#undef DO_
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
  // optional uint32 num_versions = 1;
  if (this->num_versions() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_versions(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
}

::google::protobuf::uint8* FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
  // optional uint32 num_versions = 1;
  if (this->num_versions() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_versions(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
  return target;
}

int FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
  int total_size = 0;

  // optional uint32 num_versions = 1;
  if (this->num_versions() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_versions());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
    MergeFrom(*source);
  }
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::MergeFrom(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.num_versions() != 0) {
    set_num_versions(from.num_versions());
  }
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::CopyFrom(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::IsInitialized() const {

  return true;
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::Swap(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::InternalSwap(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* other) {
  std::swap(num_versions_, other->num_versions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_descriptor_;
  metadata.reflection = FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All)
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All)
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::~FileSystemStoragePathSourceConfig_ServableVersionPolicy_All() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All)
  SharedDtor();
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_descriptor_;
}

const FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto();
  return *default_instance_;
}

FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::default_instance_ = NULL;

FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::New(::google::protobuf::Arena* arena) const {
  FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* n = new FileSystemStoragePathSourceConfig_ServableVersionPolicy_All;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All)
}

bool FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All)
  return false;
#undef DO_
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All)
  // @@protoc_insertion_point(serialize_end:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All)
}

::google::protobuf::uint8* FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All)
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All)
  return target;
}

int FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FileSystemStoragePathSourceConfig_ServableVersionPolicy_All>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All)
    MergeFrom(*source);
  }
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::MergeFrom(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::CopyFrom(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::IsInitialized() const {

  return true;
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::Swap(FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::InternalSwap(FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_descriptor_;
  metadata.reflection = FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::kVersionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::~FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)
  SharedDtor();
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_descriptor_;
}

const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto();
  return *default_instance_;
}

FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::default_instance_ = NULL;

FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::New(::google::protobuf::Arena* arena) const {
  FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* n = new FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)
  versions_.Clear();
}

bool FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 versions = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_versions())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10, input, this->mutable_versions())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)
  return false;
#undef DO_
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)
  // repeated int64 versions = 1;
  if (this->versions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_versions_cached_byte_size_);
  }
  for (int i = 0; i < this->versions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->versions(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)
}

::google::protobuf::uint8* FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)
  // repeated int64 versions = 1;
  if (this->versions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _versions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->versions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->versions(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)
  return target;
}

int FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)
  int total_size = 0;

  // repeated int64 versions = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->versions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->versions(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _versions_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)
    MergeFrom(*source);
  }
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::MergeFrom(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  versions_.MergeFrom(from.versions_);
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::CopyFrom(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::IsInitialized() const {

  return true;
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::Swap(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::InternalSwap(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* other) {
  versions_.UnsafeArenaSwap(&other->versions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_descriptor_;
  metadata.reflection = FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileSystemStoragePathSourceConfig_ServableVersionPolicy::kLatestFieldNumber;
const int FileSystemStoragePathSourceConfig_ServableVersionPolicy::kAllFieldNumber;
const int FileSystemStoragePathSourceConfig_ServableVersionPolicy::kSpecificFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileSystemStoragePathSourceConfig_ServableVersionPolicy::FileSystemStoragePathSourceConfig_ServableVersionPolicy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  FileSystemStoragePathSourceConfig_ServableVersionPolicy_default_oneof_instance_->latest_ = const_cast< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest*>(&::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::default_instance());
  FileSystemStoragePathSourceConfig_ServableVersionPolicy_default_oneof_instance_->all_ = const_cast< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All*>(&::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::default_instance());
  FileSystemStoragePathSourceConfig_ServableVersionPolicy_default_oneof_instance_->specific_ = const_cast< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific*>(&::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::default_instance());
}

FileSystemStoragePathSourceConfig_ServableVersionPolicy::FileSystemStoragePathSourceConfig_ServableVersionPolicy(const FileSystemStoragePathSourceConfig_ServableVersionPolicy& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_policy_choice();
}

FileSystemStoragePathSourceConfig_ServableVersionPolicy::~FileSystemStoragePathSourceConfig_ServableVersionPolicy() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
  SharedDtor();
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy::SharedDtor() {
  if (has_policy_choice()) {
    clear_policy_choice();
  }
  if (this != default_instance_) {
  }
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystemStoragePathSourceConfig_ServableVersionPolicy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystemStoragePathSourceConfig_ServableVersionPolicy_descriptor_;
}

const FileSystemStoragePathSourceConfig_ServableVersionPolicy& FileSystemStoragePathSourceConfig_ServableVersionPolicy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto();
  return *default_instance_;
}

FileSystemStoragePathSourceConfig_ServableVersionPolicy* FileSystemStoragePathSourceConfig_ServableVersionPolicy::default_instance_ = NULL;

FileSystemStoragePathSourceConfig_ServableVersionPolicy* FileSystemStoragePathSourceConfig_ServableVersionPolicy::New(::google::protobuf::Arena* arena) const {
  FileSystemStoragePathSourceConfig_ServableVersionPolicy* n = new FileSystemStoragePathSourceConfig_ServableVersionPolicy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy::clear_policy_choice() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
  switch(policy_choice_case()) {
    case kLatest: {
      delete policy_choice_.latest_;
      break;
    }
    case kAll: {
      delete policy_choice_.all_;
      break;
    }
    case kSpecific: {
      delete policy_choice_.specific_;
      break;
    }
    case POLICY_CHOICE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = POLICY_CHOICE_NOT_SET;
}


void FileSystemStoragePathSourceConfig_ServableVersionPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
  clear_policy_choice();
}

bool FileSystemStoragePathSourceConfig_ServableVersionPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest latest = 100;
      case 100: {
        if (tag == 802) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_latest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_all;
        break;
      }

      // optional .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All all = 101;
      case 101: {
        if (tag == 810) {
         parse_all:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_all()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(818)) goto parse_specific;
        break;
      }

      // optional .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific specific = 102;
      case 102: {
        if (tag == 818) {
         parse_specific:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_specific()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
  return false;
#undef DO_
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
  // optional .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest latest = 100;
  if (has_latest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, *policy_choice_.latest_, output);
  }

  // optional .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All all = 101;
  if (has_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, *policy_choice_.all_, output);
  }

  // optional .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific specific = 102;
  if (has_specific()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, *policy_choice_.specific_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
}

::google::protobuf::uint8* FileSystemStoragePathSourceConfig_ServableVersionPolicy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
  // optional .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest latest = 100;
  if (has_latest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        100, *policy_choice_.latest_, false, target);
  }

  // optional .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All all = 101;
  if (has_all()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        101, *policy_choice_.all_, false, target);
  }

  // optional .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific specific = 102;
  if (has_specific()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        102, *policy_choice_.specific_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
  return target;
}

int FileSystemStoragePathSourceConfig_ServableVersionPolicy::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
  int total_size = 0;

  switch (policy_choice_case()) {
    // optional .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest latest = 100;
    case kLatest: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *policy_choice_.latest_);
      break;
    }
    // optional .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All all = 101;
    case kAll: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *policy_choice_.all_);
      break;
    }
    // optional .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific specific = 102;
    case kSpecific: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *policy_choice_.specific_);
      break;
    }
    case POLICY_CHOICE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FileSystemStoragePathSourceConfig_ServableVersionPolicy* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FileSystemStoragePathSourceConfig_ServableVersionPolicy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
    MergeFrom(*source);
  }
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy::MergeFrom(const FileSystemStoragePathSourceConfig_ServableVersionPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.policy_choice_case()) {
    case kLatest: {
      mutable_latest()->::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::MergeFrom(from.latest());
      break;
    }
    case kAll: {
      mutable_all()->::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::MergeFrom(from.all());
      break;
    }
    case kSpecific: {
      mutable_specific()->::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::MergeFrom(from.specific());
      break;
    }
    case POLICY_CHOICE_NOT_SET: {
      break;
    }
  }
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy::CopyFrom(const FileSystemStoragePathSourceConfig_ServableVersionPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystemStoragePathSourceConfig_ServableVersionPolicy::IsInitialized() const {

  return true;
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy::Swap(FileSystemStoragePathSourceConfig_ServableVersionPolicy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileSystemStoragePathSourceConfig_ServableVersionPolicy::InternalSwap(FileSystemStoragePathSourceConfig_ServableVersionPolicy* other) {
  std::swap(policy_choice_, other->policy_choice_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FileSystemStoragePathSourceConfig_ServableVersionPolicy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystemStoragePathSourceConfig_ServableVersionPolicy_descriptor_;
  metadata.reflection = FileSystemStoragePathSourceConfig_ServableVersionPolicy_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileSystemStoragePathSourceConfig_ServableToMonitor::kServableNameFieldNumber;
const int FileSystemStoragePathSourceConfig_ServableToMonitor::kBasePathFieldNumber;
const int FileSystemStoragePathSourceConfig_ServableToMonitor::kServableVersionPolicyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileSystemStoragePathSourceConfig_ServableToMonitor::FileSystemStoragePathSourceConfig_ServableToMonitor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
}

void FileSystemStoragePathSourceConfig_ServableToMonitor::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  servable_version_policy_ = const_cast< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy*>(&::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy::default_instance());
}

FileSystemStoragePathSourceConfig_ServableToMonitor::FileSystemStoragePathSourceConfig_ServableToMonitor(const FileSystemStoragePathSourceConfig_ServableToMonitor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
}

void FileSystemStoragePathSourceConfig_ServableToMonitor::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  servable_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  servable_version_policy_ = NULL;
}

FileSystemStoragePathSourceConfig_ServableToMonitor::~FileSystemStoragePathSourceConfig_ServableToMonitor() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
  SharedDtor();
}

void FileSystemStoragePathSourceConfig_ServableToMonitor::SharedDtor() {
  servable_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete servable_version_policy_;
  }
}

void FileSystemStoragePathSourceConfig_ServableToMonitor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystemStoragePathSourceConfig_ServableToMonitor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystemStoragePathSourceConfig_ServableToMonitor_descriptor_;
}

const FileSystemStoragePathSourceConfig_ServableToMonitor& FileSystemStoragePathSourceConfig_ServableToMonitor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto();
  return *default_instance_;
}

FileSystemStoragePathSourceConfig_ServableToMonitor* FileSystemStoragePathSourceConfig_ServableToMonitor::default_instance_ = NULL;

FileSystemStoragePathSourceConfig_ServableToMonitor* FileSystemStoragePathSourceConfig_ServableToMonitor::New(::google::protobuf::Arena* arena) const {
  FileSystemStoragePathSourceConfig_ServableToMonitor* n = new FileSystemStoragePathSourceConfig_ServableToMonitor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileSystemStoragePathSourceConfig_ServableToMonitor::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
  servable_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && servable_version_policy_ != NULL) delete servable_version_policy_;
  servable_version_policy_ = NULL;
}

bool FileSystemStoragePathSourceConfig_ServableToMonitor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string servable_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->servable_name().data(), this->servable_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_base_path;
        break;
      }

      // optional string base_path = 2;
      case 2: {
        if (tag == 18) {
         parse_base_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_base_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->base_path().data(), this->base_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_servable_version_policy;
        break;
      }

      // optional .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy servable_version_policy = 4;
      case 4: {
        if (tag == 34) {
         parse_servable_version_policy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_servable_version_policy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
  return false;
#undef DO_
}

void FileSystemStoragePathSourceConfig_ServableToMonitor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
  // optional string servable_name = 1;
  if (this->servable_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->servable_name().data(), this->servable_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->servable_name(), output);
  }

  // optional string base_path = 2;
  if (this->base_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->base_path().data(), this->base_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->base_path(), output);
  }

  // optional .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy servable_version_policy = 4;
  if (this->has_servable_version_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->servable_version_policy_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
}

::google::protobuf::uint8* FileSystemStoragePathSourceConfig_ServableToMonitor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
  // optional string servable_name = 1;
  if (this->servable_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->servable_name().data(), this->servable_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->servable_name(), target);
  }

  // optional string base_path = 2;
  if (this->base_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->base_path().data(), this->base_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->base_path(), target);
  }

  // optional .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy servable_version_policy = 4;
  if (this->has_servable_version_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->servable_version_policy_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
  return target;
}

int FileSystemStoragePathSourceConfig_ServableToMonitor::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
  int total_size = 0;

  // optional string servable_name = 1;
  if (this->servable_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->servable_name());
  }

  // optional string base_path = 2;
  if (this->base_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->base_path());
  }

  // optional .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy servable_version_policy = 4;
  if (this->has_servable_version_policy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->servable_version_policy_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystemStoragePathSourceConfig_ServableToMonitor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FileSystemStoragePathSourceConfig_ServableToMonitor* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FileSystemStoragePathSourceConfig_ServableToMonitor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
    MergeFrom(*source);
  }
}

void FileSystemStoragePathSourceConfig_ServableToMonitor::MergeFrom(const FileSystemStoragePathSourceConfig_ServableToMonitor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.servable_name().size() > 0) {

    servable_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.servable_name_);
  }
  if (from.base_path().size() > 0) {

    base_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.base_path_);
  }
  if (from.has_servable_version_policy()) {
    mutable_servable_version_policy()->::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy::MergeFrom(from.servable_version_policy());
  }
}

void FileSystemStoragePathSourceConfig_ServableToMonitor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystemStoragePathSourceConfig_ServableToMonitor::CopyFrom(const FileSystemStoragePathSourceConfig_ServableToMonitor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystemStoragePathSourceConfig_ServableToMonitor::IsInitialized() const {

  return true;
}

void FileSystemStoragePathSourceConfig_ServableToMonitor::Swap(FileSystemStoragePathSourceConfig_ServableToMonitor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileSystemStoragePathSourceConfig_ServableToMonitor::InternalSwap(FileSystemStoragePathSourceConfig_ServableToMonitor* other) {
  servable_name_.Swap(&other->servable_name_);
  base_path_.Swap(&other->base_path_);
  std::swap(servable_version_policy_, other->servable_version_policy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FileSystemStoragePathSourceConfig_ServableToMonitor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystemStoragePathSourceConfig_ServableToMonitor_descriptor_;
  metadata.reflection = FileSystemStoragePathSourceConfig_ServableToMonitor_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileSystemStoragePathSourceConfig::kServablesFieldNumber;
const int FileSystemStoragePathSourceConfig::kServableNameFieldNumber;
const int FileSystemStoragePathSourceConfig::kBasePathFieldNumber;
const int FileSystemStoragePathSourceConfig::kFileSystemPollWaitSecondsFieldNumber;
const int FileSystemStoragePathSourceConfig::kFailIfZeroVersionsAtStartupFieldNumber;
const int FileSystemStoragePathSourceConfig::kServableVersionsAlwaysPresentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileSystemStoragePathSourceConfig::FileSystemStoragePathSourceConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.FileSystemStoragePathSourceConfig)
}

void FileSystemStoragePathSourceConfig::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FileSystemStoragePathSourceConfig::FileSystemStoragePathSourceConfig(const FileSystemStoragePathSourceConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.FileSystemStoragePathSourceConfig)
}

void FileSystemStoragePathSourceConfig::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  servable_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_system_poll_wait_seconds_ = GOOGLE_LONGLONG(0);
  fail_if_zero_versions_at_startup_ = false;
  servable_versions_always_present_ = false;
}

FileSystemStoragePathSourceConfig::~FileSystemStoragePathSourceConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.FileSystemStoragePathSourceConfig)
  SharedDtor();
}

void FileSystemStoragePathSourceConfig::SharedDtor() {
  servable_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FileSystemStoragePathSourceConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSystemStoragePathSourceConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileSystemStoragePathSourceConfig_descriptor_;
}

const FileSystemStoragePathSourceConfig& FileSystemStoragePathSourceConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto();
  return *default_instance_;
}

FileSystemStoragePathSourceConfig* FileSystemStoragePathSourceConfig::default_instance_ = NULL;

FileSystemStoragePathSourceConfig* FileSystemStoragePathSourceConfig::New(::google::protobuf::Arena* arena) const {
  FileSystemStoragePathSourceConfig* n = new FileSystemStoragePathSourceConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileSystemStoragePathSourceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.FileSystemStoragePathSourceConfig)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FileSystemStoragePathSourceConfig, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FileSystemStoragePathSourceConfig*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(file_system_poll_wait_seconds_, servable_versions_always_present_);
  servable_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  servables_.Clear();
}

bool FileSystemStoragePathSourceConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.serving.FileSystemStoragePathSourceConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string servable_name = 1 [deprecated = true];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->servable_name().data(), this->servable_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_base_path;
        break;
      }

      // optional string base_path = 2 [deprecated = true];
      case 2: {
        if (tag == 18) {
         parse_base_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_base_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->base_path().data(), this->base_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.serving.FileSystemStoragePathSourceConfig.base_path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_file_system_poll_wait_seconds;
        break;
      }

      // optional int64 file_system_poll_wait_seconds = 3;
      case 3: {
        if (tag == 24) {
         parse_file_system_poll_wait_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &file_system_poll_wait_seconds_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_fail_if_zero_versions_at_startup;
        break;
      }

      // optional bool fail_if_zero_versions_at_startup = 4 [deprecated = true];
      case 4: {
        if (tag == 32) {
         parse_fail_if_zero_versions_at_startup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fail_if_zero_versions_at_startup_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_servables;
        break;
      }

      // repeated .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor servables = 5;
      case 5: {
        if (tag == 42) {
         parse_servables:
          DO_(input->IncrementRecursionDepth());
         parse_loop_servables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_servables()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_servables;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(48)) goto parse_servable_versions_always_present;
        break;
      }

      // optional bool servable_versions_always_present = 6;
      case 6: {
        if (tag == 48) {
         parse_servable_versions_always_present:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &servable_versions_always_present_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.serving.FileSystemStoragePathSourceConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.serving.FileSystemStoragePathSourceConfig)
  return false;
#undef DO_
}

void FileSystemStoragePathSourceConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.serving.FileSystemStoragePathSourceConfig)
  // optional string servable_name = 1 [deprecated = true];
  if (this->servable_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->servable_name().data(), this->servable_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->servable_name(), output);
  }

  // optional string base_path = 2 [deprecated = true];
  if (this->base_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->base_path().data(), this->base_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.FileSystemStoragePathSourceConfig.base_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->base_path(), output);
  }

  // optional int64 file_system_poll_wait_seconds = 3;
  if (this->file_system_poll_wait_seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->file_system_poll_wait_seconds(), output);
  }

  // optional bool fail_if_zero_versions_at_startup = 4 [deprecated = true];
  if (this->fail_if_zero_versions_at_startup() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->fail_if_zero_versions_at_startup(), output);
  }

  // repeated .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor servables = 5;
  for (unsigned int i = 0, n = this->servables_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->servables(i), output);
  }

  // optional bool servable_versions_always_present = 6;
  if (this->servable_versions_always_present() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->servable_versions_always_present(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.serving.FileSystemStoragePathSourceConfig)
}

::google::protobuf::uint8* FileSystemStoragePathSourceConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.FileSystemStoragePathSourceConfig)
  // optional string servable_name = 1 [deprecated = true];
  if (this->servable_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->servable_name().data(), this->servable_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->servable_name(), target);
  }

  // optional string base_path = 2 [deprecated = true];
  if (this->base_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->base_path().data(), this->base_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.FileSystemStoragePathSourceConfig.base_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->base_path(), target);
  }

  // optional int64 file_system_poll_wait_seconds = 3;
  if (this->file_system_poll_wait_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->file_system_poll_wait_seconds(), target);
  }

  // optional bool fail_if_zero_versions_at_startup = 4 [deprecated = true];
  if (this->fail_if_zero_versions_at_startup() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->fail_if_zero_versions_at_startup(), target);
  }

  // repeated .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor servables = 5;
  for (unsigned int i = 0, n = this->servables_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->servables(i), false, target);
  }

  // optional bool servable_versions_always_present = 6;
  if (this->servable_versions_always_present() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->servable_versions_always_present(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.FileSystemStoragePathSourceConfig)
  return target;
}

int FileSystemStoragePathSourceConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.FileSystemStoragePathSourceConfig)
  int total_size = 0;

  // optional string servable_name = 1 [deprecated = true];
  if (this->servable_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->servable_name());
  }

  // optional string base_path = 2 [deprecated = true];
  if (this->base_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->base_path());
  }

  // optional int64 file_system_poll_wait_seconds = 3;
  if (this->file_system_poll_wait_seconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->file_system_poll_wait_seconds());
  }

  // optional bool fail_if_zero_versions_at_startup = 4 [deprecated = true];
  if (this->fail_if_zero_versions_at_startup() != 0) {
    total_size += 1 + 1;
  }

  // optional bool servable_versions_always_present = 6;
  if (this->servable_versions_always_present() != 0) {
    total_size += 1 + 1;
  }

  // repeated .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor servables = 5;
  total_size += 1 * this->servables_size();
  for (int i = 0; i < this->servables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->servables(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSystemStoragePathSourceConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FileSystemStoragePathSourceConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FileSystemStoragePathSourceConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.FileSystemStoragePathSourceConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.FileSystemStoragePathSourceConfig)
    MergeFrom(*source);
  }
}

void FileSystemStoragePathSourceConfig::MergeFrom(const FileSystemStoragePathSourceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  servables_.MergeFrom(from.servables_);
  if (from.servable_name().size() > 0) {

    servable_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.servable_name_);
  }
  if (from.base_path().size() > 0) {

    base_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.base_path_);
  }
  if (from.file_system_poll_wait_seconds() != 0) {
    set_file_system_poll_wait_seconds(from.file_system_poll_wait_seconds());
  }
  if (from.fail_if_zero_versions_at_startup() != 0) {
    set_fail_if_zero_versions_at_startup(from.fail_if_zero_versions_at_startup());
  }
  if (from.servable_versions_always_present() != 0) {
    set_servable_versions_always_present(from.servable_versions_always_present());
  }
}

void FileSystemStoragePathSourceConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystemStoragePathSourceConfig::CopyFrom(const FileSystemStoragePathSourceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystemStoragePathSourceConfig::IsInitialized() const {

  return true;
}

void FileSystemStoragePathSourceConfig::Swap(FileSystemStoragePathSourceConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileSystemStoragePathSourceConfig::InternalSwap(FileSystemStoragePathSourceConfig* other) {
  servables_.UnsafeArenaSwap(&other->servables_);
  servable_name_.Swap(&other->servable_name_);
  base_path_.Swap(&other->base_path_);
  std::swap(file_system_poll_wait_seconds_, other->file_system_poll_wait_seconds_);
  std::swap(fail_if_zero_versions_at_startup_, other->fail_if_zero_versions_at_startup_);
  std::swap(servable_versions_always_present_, other->servable_versions_always_present_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FileSystemStoragePathSourceConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileSystemStoragePathSourceConfig_descriptor_;
  metadata.reflection = FileSystemStoragePathSourceConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest

// optional uint32 num_versions = 1;
void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::clear_num_versions() {
  num_versions_ = 0u;
}
 ::google::protobuf::uint32 FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::num_versions() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest.num_versions)
  return num_versions_;
}
 void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::set_num_versions(::google::protobuf::uint32 value) {
  
  num_versions_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest.num_versions)
}

// -------------------------------------------------------------------

// FileSystemStoragePathSourceConfig_ServableVersionPolicy_All

// -------------------------------------------------------------------

// FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific

// repeated int64 versions = 1;
int FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::versions_size() const {
  return versions_.size();
}
void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::clear_versions() {
  versions_.Clear();
}
 ::google::protobuf::int64 FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::versions(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific.versions)
  return versions_.Get(index);
}
 void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::set_versions(int index, ::google::protobuf::int64 value) {
  versions_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific.versions)
}
 void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::add_versions(::google::protobuf::int64 value) {
  versions_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific.versions)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::versions() const {
  // @@protoc_insertion_point(field_list:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific.versions)
  return versions_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::mutable_versions() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific.versions)
  return &versions_;
}

// -------------------------------------------------------------------

// FileSystemStoragePathSourceConfig_ServableVersionPolicy

// optional .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest latest = 100;
bool FileSystemStoragePathSourceConfig_ServableVersionPolicy::has_latest() const {
  return policy_choice_case() == kLatest;
}
void FileSystemStoragePathSourceConfig_ServableVersionPolicy::set_has_latest() {
  _oneof_case_[0] = kLatest;
}
void FileSystemStoragePathSourceConfig_ServableVersionPolicy::clear_latest() {
  if (has_latest()) {
    delete policy_choice_.latest_;
    clear_has_policy_choice();
  }
}
 const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& FileSystemStoragePathSourceConfig_ServableVersionPolicy::latest() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.latest)
  return has_latest()
      ? *policy_choice_.latest_
      : ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::default_instance();
}
::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* FileSystemStoragePathSourceConfig_ServableVersionPolicy::mutable_latest() {
  if (!has_latest()) {
    clear_policy_choice();
    set_has_latest();
    policy_choice_.latest_ = new ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.latest)
  return policy_choice_.latest_;
}
::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* FileSystemStoragePathSourceConfig_ServableVersionPolicy::release_latest() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.latest)
  if (has_latest()) {
    clear_has_policy_choice();
    ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* temp = policy_choice_.latest_;
    policy_choice_.latest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FileSystemStoragePathSourceConfig_ServableVersionPolicy::set_allocated_latest(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* latest) {
  clear_policy_choice();
  if (latest) {
    set_has_latest();
    policy_choice_.latest_ = latest;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.latest)
}

// optional .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All all = 101;
bool FileSystemStoragePathSourceConfig_ServableVersionPolicy::has_all() const {
  return policy_choice_case() == kAll;
}
void FileSystemStoragePathSourceConfig_ServableVersionPolicy::set_has_all() {
  _oneof_case_[0] = kAll;
}
void FileSystemStoragePathSourceConfig_ServableVersionPolicy::clear_all() {
  if (has_all()) {
    delete policy_choice_.all_;
    clear_has_policy_choice();
  }
}
 const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& FileSystemStoragePathSourceConfig_ServableVersionPolicy::all() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.all)
  return has_all()
      ? *policy_choice_.all_
      : ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::default_instance();
}
::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* FileSystemStoragePathSourceConfig_ServableVersionPolicy::mutable_all() {
  if (!has_all()) {
    clear_policy_choice();
    set_has_all();
    policy_choice_.all_ = new ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.all)
  return policy_choice_.all_;
}
::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* FileSystemStoragePathSourceConfig_ServableVersionPolicy::release_all() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.all)
  if (has_all()) {
    clear_has_policy_choice();
    ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* temp = policy_choice_.all_;
    policy_choice_.all_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FileSystemStoragePathSourceConfig_ServableVersionPolicy::set_allocated_all(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* all) {
  clear_policy_choice();
  if (all) {
    set_has_all();
    policy_choice_.all_ = all;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.all)
}

// optional .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific specific = 102;
bool FileSystemStoragePathSourceConfig_ServableVersionPolicy::has_specific() const {
  return policy_choice_case() == kSpecific;
}
void FileSystemStoragePathSourceConfig_ServableVersionPolicy::set_has_specific() {
  _oneof_case_[0] = kSpecific;
}
void FileSystemStoragePathSourceConfig_ServableVersionPolicy::clear_specific() {
  if (has_specific()) {
    delete policy_choice_.specific_;
    clear_has_policy_choice();
  }
}
 const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& FileSystemStoragePathSourceConfig_ServableVersionPolicy::specific() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.specific)
  return has_specific()
      ? *policy_choice_.specific_
      : ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::default_instance();
}
::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* FileSystemStoragePathSourceConfig_ServableVersionPolicy::mutable_specific() {
  if (!has_specific()) {
    clear_policy_choice();
    set_has_specific();
    policy_choice_.specific_ = new ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.specific)
  return policy_choice_.specific_;
}
::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* FileSystemStoragePathSourceConfig_ServableVersionPolicy::release_specific() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.specific)
  if (has_specific()) {
    clear_has_policy_choice();
    ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* temp = policy_choice_.specific_;
    policy_choice_.specific_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FileSystemStoragePathSourceConfig_ServableVersionPolicy::set_allocated_specific(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* specific) {
  clear_policy_choice();
  if (specific) {
    set_has_specific();
    policy_choice_.specific_ = specific;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.specific)
}

bool FileSystemStoragePathSourceConfig_ServableVersionPolicy::has_policy_choice() const {
  return policy_choice_case() != POLICY_CHOICE_NOT_SET;
}
void FileSystemStoragePathSourceConfig_ServableVersionPolicy::clear_has_policy_choice() {
  _oneof_case_[0] = POLICY_CHOICE_NOT_SET;
}
FileSystemStoragePathSourceConfig_ServableVersionPolicy::PolicyChoiceCase FileSystemStoragePathSourceConfig_ServableVersionPolicy::policy_choice_case() const {
  return FileSystemStoragePathSourceConfig_ServableVersionPolicy::PolicyChoiceCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FileSystemStoragePathSourceConfig_ServableToMonitor

// optional string servable_name = 1;
void FileSystemStoragePathSourceConfig_ServableToMonitor::clear_servable_name() {
  servable_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FileSystemStoragePathSourceConfig_ServableToMonitor::servable_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name)
  return servable_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FileSystemStoragePathSourceConfig_ServableToMonitor::set_servable_name(const ::std::string& value) {
  
  servable_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name)
}
 void FileSystemStoragePathSourceConfig_ServableToMonitor::set_servable_name(const char* value) {
  
  servable_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name)
}
 void FileSystemStoragePathSourceConfig_ServableToMonitor::set_servable_name(const char* value, size_t size) {
  
  servable_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name)
}
 ::std::string* FileSystemStoragePathSourceConfig_ServableToMonitor::mutable_servable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name)
  return servable_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FileSystemStoragePathSourceConfig_ServableToMonitor::release_servable_name() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name)
  
  return servable_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FileSystemStoragePathSourceConfig_ServableToMonitor::set_allocated_servable_name(::std::string* servable_name) {
  if (servable_name != NULL) {
    
  } else {
    
  }
  servable_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servable_name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name)
}

// optional string base_path = 2;
void FileSystemStoragePathSourceConfig_ServableToMonitor::clear_base_path() {
  base_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FileSystemStoragePathSourceConfig_ServableToMonitor::base_path() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path)
  return base_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FileSystemStoragePathSourceConfig_ServableToMonitor::set_base_path(const ::std::string& value) {
  
  base_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path)
}
 void FileSystemStoragePathSourceConfig_ServableToMonitor::set_base_path(const char* value) {
  
  base_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path)
}
 void FileSystemStoragePathSourceConfig_ServableToMonitor::set_base_path(const char* value, size_t size) {
  
  base_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path)
}
 ::std::string* FileSystemStoragePathSourceConfig_ServableToMonitor::mutable_base_path() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path)
  return base_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FileSystemStoragePathSourceConfig_ServableToMonitor::release_base_path() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path)
  
  return base_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FileSystemStoragePathSourceConfig_ServableToMonitor::set_allocated_base_path(::std::string* base_path) {
  if (base_path != NULL) {
    
  } else {
    
  }
  base_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), base_path);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path)
}

// optional .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy servable_version_policy = 4;
bool FileSystemStoragePathSourceConfig_ServableToMonitor::has_servable_version_policy() const {
  return !_is_default_instance_ && servable_version_policy_ != NULL;
}
void FileSystemStoragePathSourceConfig_ServableToMonitor::clear_servable_version_policy() {
  if (GetArenaNoVirtual() == NULL && servable_version_policy_ != NULL) delete servable_version_policy_;
  servable_version_policy_ = NULL;
}
const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy& FileSystemStoragePathSourceConfig_ServableToMonitor::servable_version_policy() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_version_policy)
  return servable_version_policy_ != NULL ? *servable_version_policy_ : *default_instance_->servable_version_policy_;
}
::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* FileSystemStoragePathSourceConfig_ServableToMonitor::mutable_servable_version_policy() {
  
  if (servable_version_policy_ == NULL) {
    servable_version_policy_ = new ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_version_policy)
  return servable_version_policy_;
}
::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* FileSystemStoragePathSourceConfig_ServableToMonitor::release_servable_version_policy() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_version_policy)
  
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* temp = servable_version_policy_;
  servable_version_policy_ = NULL;
  return temp;
}
void FileSystemStoragePathSourceConfig_ServableToMonitor::set_allocated_servable_version_policy(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* servable_version_policy) {
  delete servable_version_policy_;
  servable_version_policy_ = servable_version_policy;
  if (servable_version_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_version_policy)
}

// -------------------------------------------------------------------

// FileSystemStoragePathSourceConfig

// repeated .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor servables = 5;
int FileSystemStoragePathSourceConfig::servables_size() const {
  return servables_.size();
}
void FileSystemStoragePathSourceConfig::clear_servables() {
  servables_.Clear();
}
const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor& FileSystemStoragePathSourceConfig::servables(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.servables)
  return servables_.Get(index);
}
::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor* FileSystemStoragePathSourceConfig::mutable_servables(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.servables)
  return servables_.Mutable(index);
}
::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor* FileSystemStoragePathSourceConfig::add_servables() {
  // @@protoc_insertion_point(field_add:tensorflow.serving.FileSystemStoragePathSourceConfig.servables)
  return servables_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor >*
FileSystemStoragePathSourceConfig::mutable_servables() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.FileSystemStoragePathSourceConfig.servables)
  return &servables_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor >&
FileSystemStoragePathSourceConfig::servables() const {
  // @@protoc_insertion_point(field_list:tensorflow.serving.FileSystemStoragePathSourceConfig.servables)
  return servables_;
}

// optional string servable_name = 1 [deprecated = true];
void FileSystemStoragePathSourceConfig::clear_servable_name() {
  servable_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FileSystemStoragePathSourceConfig::servable_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name)
  return servable_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FileSystemStoragePathSourceConfig::set_servable_name(const ::std::string& value) {
  
  servable_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name)
}
 void FileSystemStoragePathSourceConfig::set_servable_name(const char* value) {
  
  servable_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name)
}
 void FileSystemStoragePathSourceConfig::set_servable_name(const char* value, size_t size) {
  
  servable_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name)
}
 ::std::string* FileSystemStoragePathSourceConfig::mutable_servable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name)
  return servable_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FileSystemStoragePathSourceConfig::release_servable_name() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name)
  
  return servable_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FileSystemStoragePathSourceConfig::set_allocated_servable_name(::std::string* servable_name) {
  if (servable_name != NULL) {
    
  } else {
    
  }
  servable_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servable_name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name)
}

// optional string base_path = 2 [deprecated = true];
void FileSystemStoragePathSourceConfig::clear_base_path() {
  base_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FileSystemStoragePathSourceConfig::base_path() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.base_path)
  return base_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FileSystemStoragePathSourceConfig::set_base_path(const ::std::string& value) {
  
  base_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.base_path)
}
 void FileSystemStoragePathSourceConfig::set_base_path(const char* value) {
  
  base_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.FileSystemStoragePathSourceConfig.base_path)
}
 void FileSystemStoragePathSourceConfig::set_base_path(const char* value, size_t size) {
  
  base_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.FileSystemStoragePathSourceConfig.base_path)
}
 ::std::string* FileSystemStoragePathSourceConfig::mutable_base_path() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.base_path)
  return base_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FileSystemStoragePathSourceConfig::release_base_path() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.FileSystemStoragePathSourceConfig.base_path)
  
  return base_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FileSystemStoragePathSourceConfig::set_allocated_base_path(::std::string* base_path) {
  if (base_path != NULL) {
    
  } else {
    
  }
  base_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), base_path);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.base_path)
}

// optional int64 file_system_poll_wait_seconds = 3;
void FileSystemStoragePathSourceConfig::clear_file_system_poll_wait_seconds() {
  file_system_poll_wait_seconds_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 FileSystemStoragePathSourceConfig::file_system_poll_wait_seconds() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.file_system_poll_wait_seconds)
  return file_system_poll_wait_seconds_;
}
 void FileSystemStoragePathSourceConfig::set_file_system_poll_wait_seconds(::google::protobuf::int64 value) {
  
  file_system_poll_wait_seconds_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.file_system_poll_wait_seconds)
}

// optional bool fail_if_zero_versions_at_startup = 4 [deprecated = true];
void FileSystemStoragePathSourceConfig::clear_fail_if_zero_versions_at_startup() {
  fail_if_zero_versions_at_startup_ = false;
}
 bool FileSystemStoragePathSourceConfig::fail_if_zero_versions_at_startup() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.fail_if_zero_versions_at_startup)
  return fail_if_zero_versions_at_startup_;
}
 void FileSystemStoragePathSourceConfig::set_fail_if_zero_versions_at_startup(bool value) {
  
  fail_if_zero_versions_at_startup_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.fail_if_zero_versions_at_startup)
}

// optional bool servable_versions_always_present = 6;
void FileSystemStoragePathSourceConfig::clear_servable_versions_always_present() {
  servable_versions_always_present_ = false;
}
 bool FileSystemStoragePathSourceConfig::servable_versions_always_present() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_versions_always_present)
  return servable_versions_always_present_;
}
 void FileSystemStoragePathSourceConfig::set_servable_versions_always_present(bool value) {
  
  servable_versions_always_present_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_versions_always_present)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace serving
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
