// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/bfc_memory_map.proto

#include "tensorflow/core/protobuf/bfc_memory_map.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BinSummary_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemAllocatorStats_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemChunk_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SnapShot_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto;
namespace tensorflow {
class MemAllocatorStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemAllocatorStats> _instance;
} _MemAllocatorStats_default_instance_;
class MemChunkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemChunk> _instance;
} _MemChunk_default_instance_;
class BinSummaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BinSummary> _instance;
} _BinSummary_default_instance_;
class SnapShotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SnapShot> _instance;
} _SnapShot_default_instance_;
class MemoryDumpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemoryDump> _instance;
} _MemoryDump_default_instance_;
}  // namespace tensorflow
static void InitDefaultsscc_info_BinSummary_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_BinSummary_default_instance_;
    new (ptr) ::tensorflow::BinSummary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::BinSummary::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BinSummary_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BinSummary_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_MemAllocatorStats_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_MemAllocatorStats_default_instance_;
    new (ptr) ::tensorflow::MemAllocatorStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::MemAllocatorStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemAllocatorStats_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MemAllocatorStats_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_MemChunk_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_MemChunk_default_instance_;
    new (ptr) ::tensorflow::MemChunk();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::MemChunk::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemChunk_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MemChunk_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_MemoryDump_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_MemoryDump_default_instance_;
    new (ptr) ::tensorflow::MemoryDump();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::MemoryDump::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_MemoryDump_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_MemoryDump_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto}, {
      &scc_info_BinSummary_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto.base,
      &scc_info_MemChunk_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto.base,
      &scc_info_SnapShot_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto.base,
      &scc_info_MemAllocatorStats_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto.base,}};

static void InitDefaultsscc_info_SnapShot_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_SnapShot_default_instance_;
    new (ptr) ::tensorflow::SnapShot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::SnapShot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SnapShot_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SnapShot_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemAllocatorStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemAllocatorStats, num_allocs_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemAllocatorStats, bytes_in_use_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemAllocatorStats, peak_bytes_in_use_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemAllocatorStats, largest_alloc_size_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemAllocatorStats, fragmentation_metric_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemChunk, address_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemChunk, size_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemChunk, requested_size_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemChunk, bin_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemChunk, op_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemChunk, freed_at_count_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemChunk, action_count_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemChunk, in_use_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemChunk, step_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::BinSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::BinSummary, bin_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::BinSummary, total_bytes_in_use_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::BinSummary, total_bytes_in_bin_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::BinSummary, total_chunks_in_use_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::BinSummary, total_chunks_in_bin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SnapShot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SnapShot, action_count_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SnapShot, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryDump, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryDump, allocator_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryDump, bin_summary_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryDump, chunk_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryDump, snap_shot_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryDump, stats_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::MemAllocatorStats)},
  { 10, -1, sizeof(::tensorflow::MemChunk)},
  { 24, -1, sizeof(::tensorflow::BinSummary)},
  { 34, -1, sizeof(::tensorflow::SnapShot)},
  { 41, -1, sizeof(::tensorflow::MemoryDump)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_MemAllocatorStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_MemChunk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_BinSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_SnapShot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_MemoryDump_default_instance_),
};

const char descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-tensorflow/core/protobuf/bfc_memory_ma"
  "p.proto\022\ntensorflow\"\222\001\n\021MemAllocatorStat"
  "s\022\022\n\nnum_allocs\030\001 \001(\003\022\024\n\014bytes_in_use\030\002 "
  "\001(\003\022\031\n\021peak_bytes_in_use\030\003 \001(\003\022\032\n\022larges"
  "t_alloc_size\030\004 \001(\003\022\034\n\024fragmentation_metr"
  "ic\030\005 \001(\002\"\256\001\n\010MemChunk\022\017\n\007address\030\001 \001(\004\022\014"
  "\n\004size\030\002 \001(\003\022\026\n\016requested_size\030\003 \001(\003\022\013\n\003"
  "bin\030\004 \001(\005\022\017\n\007op_name\030\005 \001(\t\022\026\n\016freed_at_c"
  "ount\030\006 \001(\004\022\024\n\014action_count\030\007 \001(\004\022\016\n\006in_u"
  "se\030\010 \001(\010\022\017\n\007step_id\030\t \001(\004\"\213\001\n\nBinSummary"
  "\022\013\n\003bin\030\001 \001(\005\022\032\n\022total_bytes_in_use\030\002 \001("
  "\003\022\032\n\022total_bytes_in_bin\030\003 \001(\003\022\033\n\023total_c"
  "hunks_in_use\030\004 \001(\003\022\033\n\023total_chunks_in_bi"
  "n\030\005 \001(\003\".\n\010SnapShot\022\024\n\014action_count\030\001 \001("
  "\004\022\014\n\004size\030\002 \001(\003\"\315\001\n\nMemoryDump\022\026\n\016alloca"
  "tor_name\030\001 \001(\t\022+\n\013bin_summary\030\002 \003(\0132\026.te"
  "nsorflow.BinSummary\022#\n\005chunk\030\003 \003(\0132\024.ten"
  "sorflow.MemChunk\022\'\n\tsnap_shot\030\004 \003(\0132\024.te"
  "nsorflow.SnapShot\022,\n\005stats\030\005 \001(\0132\035.tenso"
  "rflow.MemAllocatorStatsBWZUgithub.com/te"
  "nsorflow/tensorflow/tensorflow/go/core/p"
  "rotobuf/for_core_protos_go_protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto_sccs[5] = {
  &scc_info_BinSummary_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto.base,
  &scc_info_MemAllocatorStats_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto.base,
  &scc_info_MemChunk_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto.base,
  &scc_info_MemoryDump_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto.base,
  &scc_info_SnapShot_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto = {
  false, false, descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto, "tensorflow/core/protobuf/bfc_memory_map.proto", 880,
  &descriptor_table_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto_once, descriptor_table_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto_sccs, descriptor_table_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto::offsets,
  file_level_metadata_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto, 5, file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto, file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto)), true);
namespace tensorflow {

// ===================================================================

void MemAllocatorStats::InitAsDefaultInstance() {
}
class MemAllocatorStats::_Internal {
 public:
};

MemAllocatorStats::MemAllocatorStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MemAllocatorStats)
}
MemAllocatorStats::MemAllocatorStats(const MemAllocatorStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&num_allocs_, &from.num_allocs_,
    static_cast<size_t>(reinterpret_cast<char*>(&fragmentation_metric_) -
    reinterpret_cast<char*>(&num_allocs_)) + sizeof(fragmentation_metric_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.MemAllocatorStats)
}

void MemAllocatorStats::SharedCtor() {
  ::memset(&num_allocs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fragmentation_metric_) -
      reinterpret_cast<char*>(&num_allocs_)) + sizeof(fragmentation_metric_));
}

MemAllocatorStats::~MemAllocatorStats() {
  // @@protoc_insertion_point(destructor:tensorflow.MemAllocatorStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MemAllocatorStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MemAllocatorStats::ArenaDtor(void* object) {
  MemAllocatorStats* _this = reinterpret_cast< MemAllocatorStats* >(object);
  (void)_this;
}
void MemAllocatorStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemAllocatorStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemAllocatorStats& MemAllocatorStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemAllocatorStats_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto.base);
  return *internal_default_instance();
}


void MemAllocatorStats::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MemAllocatorStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&num_allocs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fragmentation_metric_) -
      reinterpret_cast<char*>(&num_allocs_)) + sizeof(fragmentation_metric_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemAllocatorStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 num_allocs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_allocs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 bytes_in_use = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bytes_in_use_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 peak_bytes_in_use = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          peak_bytes_in_use_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 largest_alloc_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          largest_alloc_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float fragmentation_metric = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          fragmentation_metric_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemAllocatorStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MemAllocatorStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 num_allocs = 1;
  if (this->num_allocs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_num_allocs(), target);
  }

  // int64 bytes_in_use = 2;
  if (this->bytes_in_use() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_bytes_in_use(), target);
  }

  // int64 peak_bytes_in_use = 3;
  if (this->peak_bytes_in_use() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_peak_bytes_in_use(), target);
  }

  // int64 largest_alloc_size = 4;
  if (this->largest_alloc_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_largest_alloc_size(), target);
  }

  // float fragmentation_metric = 5;
  if (!(this->fragmentation_metric() <= 0 && this->fragmentation_metric() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_fragmentation_metric(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MemAllocatorStats)
  return target;
}

size_t MemAllocatorStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MemAllocatorStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 num_allocs = 1;
  if (this->num_allocs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num_allocs());
  }

  // int64 bytes_in_use = 2;
  if (this->bytes_in_use() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_bytes_in_use());
  }

  // int64 peak_bytes_in_use = 3;
  if (this->peak_bytes_in_use() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_peak_bytes_in_use());
  }

  // int64 largest_alloc_size = 4;
  if (this->largest_alloc_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_largest_alloc_size());
  }

  // float fragmentation_metric = 5;
  if (!(this->fragmentation_metric() <= 0 && this->fragmentation_metric() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemAllocatorStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.MemAllocatorStats)
  GOOGLE_DCHECK_NE(&from, this);
  const MemAllocatorStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemAllocatorStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.MemAllocatorStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.MemAllocatorStats)
    MergeFrom(*source);
  }
}

void MemAllocatorStats::MergeFrom(const MemAllocatorStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MemAllocatorStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num_allocs() != 0) {
    _internal_set_num_allocs(from._internal_num_allocs());
  }
  if (from.bytes_in_use() != 0) {
    _internal_set_bytes_in_use(from._internal_bytes_in_use());
  }
  if (from.peak_bytes_in_use() != 0) {
    _internal_set_peak_bytes_in_use(from._internal_peak_bytes_in_use());
  }
  if (from.largest_alloc_size() != 0) {
    _internal_set_largest_alloc_size(from._internal_largest_alloc_size());
  }
  if (!(from.fragmentation_metric() <= 0 && from.fragmentation_metric() >= 0)) {
    _internal_set_fragmentation_metric(from._internal_fragmentation_metric());
  }
}

void MemAllocatorStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.MemAllocatorStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemAllocatorStats::CopyFrom(const MemAllocatorStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MemAllocatorStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemAllocatorStats::IsInitialized() const {
  return true;
}

void MemAllocatorStats::InternalSwap(MemAllocatorStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemAllocatorStats, fragmentation_metric_)
      + sizeof(MemAllocatorStats::fragmentation_metric_)
      - PROTOBUF_FIELD_OFFSET(MemAllocatorStats, num_allocs_)>(
          reinterpret_cast<char*>(&num_allocs_),
          reinterpret_cast<char*>(&other->num_allocs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MemAllocatorStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemChunk::InitAsDefaultInstance() {
}
class MemChunk::_Internal {
 public:
};

MemChunk::MemChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MemChunk)
}
MemChunk::MemChunk(const MemChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  op_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_op_name().empty()) {
    op_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_op_name(),
      GetArena());
  }
  ::memcpy(&address_, &from.address_,
    static_cast<size_t>(reinterpret_cast<char*>(&step_id_) -
    reinterpret_cast<char*>(&address_)) + sizeof(step_id_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.MemChunk)
}

void MemChunk::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemChunk_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto.base);
  op_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&step_id_) -
      reinterpret_cast<char*>(&address_)) + sizeof(step_id_));
}

MemChunk::~MemChunk() {
  // @@protoc_insertion_point(destructor:tensorflow.MemChunk)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MemChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  op_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MemChunk::ArenaDtor(void* object) {
  MemChunk* _this = reinterpret_cast< MemChunk* >(object);
  (void)_this;
}
void MemChunk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemChunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemChunk& MemChunk::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemChunk_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto.base);
  return *internal_default_instance();
}


void MemChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MemChunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  op_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&step_id_) -
      reinterpret_cast<char*>(&address_)) + sizeof(step_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemChunk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 requested_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          requested_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string op_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_op_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.MemChunk.op_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 freed_at_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          freed_at_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 action_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          action_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool in_use = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          in_use_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 step_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          step_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemChunk::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MemChunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 address = 1;
  if (this->address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_address(), target);
  }

  // int64 size = 2;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_size(), target);
  }

  // int64 requested_size = 3;
  if (this->requested_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_requested_size(), target);
  }

  // int32 bin = 4;
  if (this->bin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_bin(), target);
  }

  // string op_name = 5;
  if (this->op_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_op_name().data(), static_cast<int>(this->_internal_op_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemChunk.op_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_op_name(), target);
  }

  // uint64 freed_at_count = 6;
  if (this->freed_at_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_freed_at_count(), target);
  }

  // uint64 action_count = 7;
  if (this->action_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_action_count(), target);
  }

  // bool in_use = 8;
  if (this->in_use() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_in_use(), target);
  }

  // uint64 step_id = 9;
  if (this->step_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_step_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MemChunk)
  return target;
}

size_t MemChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MemChunk)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string op_name = 5;
  if (this->op_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_op_name());
  }

  // uint64 address = 1;
  if (this->address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_address());
  }

  // int64 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_size());
  }

  // int64 requested_size = 3;
  if (this->requested_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_requested_size());
  }

  // uint64 freed_at_count = 6;
  if (this->freed_at_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_freed_at_count());
  }

  // int32 bin = 4;
  if (this->bin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bin());
  }

  // bool in_use = 8;
  if (this->in_use() != 0) {
    total_size += 1 + 1;
  }

  // uint64 action_count = 7;
  if (this->action_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_action_count());
  }

  // uint64 step_id = 9;
  if (this->step_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_step_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemChunk::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.MemChunk)
  GOOGLE_DCHECK_NE(&from, this);
  const MemChunk* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemChunk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.MemChunk)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.MemChunk)
    MergeFrom(*source);
  }
}

void MemChunk::MergeFrom(const MemChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MemChunk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.op_name().size() > 0) {
    _internal_set_op_name(from._internal_op_name());
  }
  if (from.address() != 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.requested_size() != 0) {
    _internal_set_requested_size(from._internal_requested_size());
  }
  if (from.freed_at_count() != 0) {
    _internal_set_freed_at_count(from._internal_freed_at_count());
  }
  if (from.bin() != 0) {
    _internal_set_bin(from._internal_bin());
  }
  if (from.in_use() != 0) {
    _internal_set_in_use(from._internal_in_use());
  }
  if (from.action_count() != 0) {
    _internal_set_action_count(from._internal_action_count());
  }
  if (from.step_id() != 0) {
    _internal_set_step_id(from._internal_step_id());
  }
}

void MemChunk::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.MemChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemChunk::CopyFrom(const MemChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MemChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemChunk::IsInitialized() const {
  return true;
}

void MemChunk::InternalSwap(MemChunk* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  op_name_.Swap(&other->op_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemChunk, step_id_)
      + sizeof(MemChunk::step_id_)
      - PROTOBUF_FIELD_OFFSET(MemChunk, address_)>(
          reinterpret_cast<char*>(&address_),
          reinterpret_cast<char*>(&other->address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MemChunk::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BinSummary::InitAsDefaultInstance() {
}
class BinSummary::_Internal {
 public:
};

BinSummary::BinSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.BinSummary)
}
BinSummary::BinSummary(const BinSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_bytes_in_use_, &from.total_bytes_in_use_,
    static_cast<size_t>(reinterpret_cast<char*>(&bin_) -
    reinterpret_cast<char*>(&total_bytes_in_use_)) + sizeof(bin_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.BinSummary)
}

void BinSummary::SharedCtor() {
  ::memset(&total_bytes_in_use_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bin_) -
      reinterpret_cast<char*>(&total_bytes_in_use_)) + sizeof(bin_));
}

BinSummary::~BinSummary() {
  // @@protoc_insertion_point(destructor:tensorflow.BinSummary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BinSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BinSummary::ArenaDtor(void* object) {
  BinSummary* _this = reinterpret_cast< BinSummary* >(object);
  (void)_this;
}
void BinSummary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BinSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinSummary& BinSummary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BinSummary_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto.base);
  return *internal_default_instance();
}


void BinSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.BinSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&total_bytes_in_use_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bin_) -
      reinterpret_cast<char*>(&total_bytes_in_use_)) + sizeof(bin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BinSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 bin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_bytes_in_use = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_bytes_in_use_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_bytes_in_bin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_bytes_in_bin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_chunks_in_use = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          total_chunks_in_use_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_chunks_in_bin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          total_chunks_in_bin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BinSummary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.BinSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bin = 1;
  if (this->bin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_bin(), target);
  }

  // int64 total_bytes_in_use = 2;
  if (this->total_bytes_in_use() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_total_bytes_in_use(), target);
  }

  // int64 total_bytes_in_bin = 3;
  if (this->total_bytes_in_bin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_total_bytes_in_bin(), target);
  }

  // int64 total_chunks_in_use = 4;
  if (this->total_chunks_in_use() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_total_chunks_in_use(), target);
  }

  // int64 total_chunks_in_bin = 5;
  if (this->total_chunks_in_bin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_total_chunks_in_bin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.BinSummary)
  return target;
}

size_t BinSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.BinSummary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 total_bytes_in_use = 2;
  if (this->total_bytes_in_use() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_bytes_in_use());
  }

  // int64 total_bytes_in_bin = 3;
  if (this->total_bytes_in_bin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_bytes_in_bin());
  }

  // int64 total_chunks_in_use = 4;
  if (this->total_chunks_in_use() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_chunks_in_use());
  }

  // int64 total_chunks_in_bin = 5;
  if (this->total_chunks_in_bin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_chunks_in_bin());
  }

  // int32 bin = 1;
  if (this->bin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinSummary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.BinSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const BinSummary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BinSummary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.BinSummary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.BinSummary)
    MergeFrom(*source);
  }
}

void BinSummary::MergeFrom(const BinSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.BinSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.total_bytes_in_use() != 0) {
    _internal_set_total_bytes_in_use(from._internal_total_bytes_in_use());
  }
  if (from.total_bytes_in_bin() != 0) {
    _internal_set_total_bytes_in_bin(from._internal_total_bytes_in_bin());
  }
  if (from.total_chunks_in_use() != 0) {
    _internal_set_total_chunks_in_use(from._internal_total_chunks_in_use());
  }
  if (from.total_chunks_in_bin() != 0) {
    _internal_set_total_chunks_in_bin(from._internal_total_chunks_in_bin());
  }
  if (from.bin() != 0) {
    _internal_set_bin(from._internal_bin());
  }
}

void BinSummary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.BinSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinSummary::CopyFrom(const BinSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.BinSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinSummary::IsInitialized() const {
  return true;
}

void BinSummary::InternalSwap(BinSummary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BinSummary, bin_)
      + sizeof(BinSummary::bin_)
      - PROTOBUF_FIELD_OFFSET(BinSummary, total_bytes_in_use_)>(
          reinterpret_cast<char*>(&total_bytes_in_use_),
          reinterpret_cast<char*>(&other->total_bytes_in_use_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BinSummary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SnapShot::InitAsDefaultInstance() {
}
class SnapShot::_Internal {
 public:
};

SnapShot::SnapShot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.SnapShot)
}
SnapShot::SnapShot(const SnapShot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&action_count_, &from.action_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&action_count_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.SnapShot)
}

void SnapShot::SharedCtor() {
  ::memset(&action_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&action_count_)) + sizeof(size_));
}

SnapShot::~SnapShot() {
  // @@protoc_insertion_point(destructor:tensorflow.SnapShot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SnapShot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SnapShot::ArenaDtor(void* object) {
  SnapShot* _this = reinterpret_cast< SnapShot* >(object);
  (void)_this;
}
void SnapShot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SnapShot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SnapShot& SnapShot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SnapShot_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto.base);
  return *internal_default_instance();
}


void SnapShot::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.SnapShot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&action_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&action_count_)) + sizeof(size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnapShot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 action_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          action_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SnapShot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.SnapShot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 action_count = 1;
  if (this->action_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_action_count(), target);
  }

  // int64 size = 2;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.SnapShot)
  return target;
}

size_t SnapShot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.SnapShot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 action_count = 1;
  if (this->action_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_action_count());
  }

  // int64 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SnapShot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.SnapShot)
  GOOGLE_DCHECK_NE(&from, this);
  const SnapShot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SnapShot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.SnapShot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.SnapShot)
    MergeFrom(*source);
  }
}

void SnapShot::MergeFrom(const SnapShot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.SnapShot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.action_count() != 0) {
    _internal_set_action_count(from._internal_action_count());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void SnapShot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.SnapShot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapShot::CopyFrom(const SnapShot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.SnapShot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapShot::IsInitialized() const {
  return true;
}

void SnapShot::InternalSwap(SnapShot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SnapShot, size_)
      + sizeof(SnapShot::size_)
      - PROTOBUF_FIELD_OFFSET(SnapShot, action_count_)>(
          reinterpret_cast<char*>(&action_count_),
          reinterpret_cast<char*>(&other->action_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SnapShot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemoryDump::InitAsDefaultInstance() {
  ::tensorflow::_MemoryDump_default_instance_._instance.get_mutable()->stats_ = const_cast< ::tensorflow::MemAllocatorStats*>(
      ::tensorflow::MemAllocatorStats::internal_default_instance());
}
class MemoryDump::_Internal {
 public:
  static const ::tensorflow::MemAllocatorStats& stats(const MemoryDump* msg);
};

const ::tensorflow::MemAllocatorStats&
MemoryDump::_Internal::stats(const MemoryDump* msg) {
  return *msg->stats_;
}
MemoryDump::MemoryDump(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bin_summary_(arena),
  chunk_(arena),
  snap_shot_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MemoryDump)
}
MemoryDump::MemoryDump(const MemoryDump& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bin_summary_(from.bin_summary_),
      chunk_(from.chunk_),
      snap_shot_(from.snap_shot_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  allocator_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_allocator_name().empty()) {
    allocator_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_allocator_name(),
      GetArena());
  }
  if (from._internal_has_stats()) {
    stats_ = new ::tensorflow::MemAllocatorStats(*from.stats_);
  } else {
    stats_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.MemoryDump)
}

void MemoryDump::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemoryDump_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto.base);
  allocator_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stats_ = nullptr;
}

MemoryDump::~MemoryDump() {
  // @@protoc_insertion_point(destructor:tensorflow.MemoryDump)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MemoryDump::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  allocator_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stats_;
}

void MemoryDump::ArenaDtor(void* object) {
  MemoryDump* _this = reinterpret_cast< MemoryDump* >(object);
  (void)_this;
}
void MemoryDump::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemoryDump::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemoryDump& MemoryDump::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemoryDump_tensorflow_2fcore_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto.base);
  return *internal_default_instance();
}


void MemoryDump::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MemoryDump)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bin_summary_.Clear();
  chunk_.Clear();
  snap_shot_.Clear();
  allocator_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && stats_ != nullptr) {
    delete stats_;
  }
  stats_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemoryDump::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string allocator_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_allocator_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.MemoryDump.allocator_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.BinSummary bin_summary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bin_summary(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.MemChunk chunk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chunk(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.SnapShot snap_shot = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_snap_shot(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .tensorflow.MemAllocatorStats stats = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemoryDump::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MemoryDump)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string allocator_name = 1;
  if (this->allocator_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_allocator_name().data(), static_cast<int>(this->_internal_allocator_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemoryDump.allocator_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_allocator_name(), target);
  }

  // repeated .tensorflow.BinSummary bin_summary = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bin_summary_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_bin_summary(i), target, stream);
  }

  // repeated .tensorflow.MemChunk chunk = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chunk_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_chunk(i), target, stream);
  }

  // repeated .tensorflow.SnapShot snap_shot = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_snap_shot_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_snap_shot(i), target, stream);
  }

  // .tensorflow.MemAllocatorStats stats = 5;
  if (this->has_stats()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::stats(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MemoryDump)
  return target;
}

size_t MemoryDump::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MemoryDump)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.BinSummary bin_summary = 2;
  total_size += 1UL * this->_internal_bin_summary_size();
  for (const auto& msg : this->bin_summary_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tensorflow.MemChunk chunk = 3;
  total_size += 1UL * this->_internal_chunk_size();
  for (const auto& msg : this->chunk_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tensorflow.SnapShot snap_shot = 4;
  total_size += 1UL * this->_internal_snap_shot_size();
  for (const auto& msg : this->snap_shot_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string allocator_name = 1;
  if (this->allocator_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_allocator_name());
  }

  // .tensorflow.MemAllocatorStats stats = 5;
  if (this->has_stats()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stats_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryDump::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.MemoryDump)
  GOOGLE_DCHECK_NE(&from, this);
  const MemoryDump* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemoryDump>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.MemoryDump)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.MemoryDump)
    MergeFrom(*source);
  }
}

void MemoryDump::MergeFrom(const MemoryDump& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MemoryDump)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bin_summary_.MergeFrom(from.bin_summary_);
  chunk_.MergeFrom(from.chunk_);
  snap_shot_.MergeFrom(from.snap_shot_);
  if (from.allocator_name().size() > 0) {
    _internal_set_allocator_name(from._internal_allocator_name());
  }
  if (from.has_stats()) {
    _internal_mutable_stats()->::tensorflow::MemAllocatorStats::MergeFrom(from._internal_stats());
  }
}

void MemoryDump::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.MemoryDump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryDump::CopyFrom(const MemoryDump& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MemoryDump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryDump::IsInitialized() const {
  return true;
}

void MemoryDump::InternalSwap(MemoryDump* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bin_summary_.InternalSwap(&other->bin_summary_);
  chunk_.InternalSwap(&other->chunk_);
  snap_shot_.InternalSwap(&other->snap_shot_);
  allocator_name_.Swap(&other->allocator_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(stats_, other->stats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemoryDump::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::MemAllocatorStats* Arena::CreateMaybeMessage< ::tensorflow::MemAllocatorStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::MemAllocatorStats >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::MemChunk* Arena::CreateMaybeMessage< ::tensorflow::MemChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::MemChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::BinSummary* Arena::CreateMaybeMessage< ::tensorflow::BinSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::BinSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::SnapShot* Arena::CreateMaybeMessage< ::tensorflow::SnapShot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::SnapShot >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::MemoryDump* Arena::CreateMaybeMessage< ::tensorflow::MemoryDump >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::MemoryDump >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
