// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/debug_event.proto

#include "tensorflow/core/protobuf/debug_event.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CodeLocation_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DebugMetadata_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DebuggedDevice_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DebuggedGraph_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Execution_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GraphDebugInfo_FileLineCol_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphExecutionTrace_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphOpCreation_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceFile_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StackFrameWithId_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2ftensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TensorProto_tensorflow_2fcore_2fframework_2ftensor_2eproto;
namespace tensorflow {
class DebugEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DebugEvent> _instance;
  const ::tensorflow::DebugMetadata* debug_metadata_;
  const ::tensorflow::SourceFile* source_file_;
  const ::tensorflow::StackFrameWithId* stack_frame_with_id_;
  const ::tensorflow::GraphOpCreation* graph_op_creation_;
  const ::tensorflow::DebuggedGraph* debugged_graph_;
  const ::tensorflow::Execution* execution_;
  const ::tensorflow::GraphExecutionTrace* graph_execution_trace_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr graph_id_;
  const ::tensorflow::DebuggedDevice* debugged_device_;
} _DebugEvent_default_instance_;
class DebugMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DebugMetadata> _instance;
} _DebugMetadata_default_instance_;
class SourceFileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SourceFile> _instance;
} _SourceFile_default_instance_;
class StackFrameWithIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StackFrameWithId> _instance;
} _StackFrameWithId_default_instance_;
class CodeLocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CodeLocation> _instance;
} _CodeLocation_default_instance_;
class GraphOpCreationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphOpCreation> _instance;
} _GraphOpCreation_default_instance_;
class DebuggedGraphDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DebuggedGraph> _instance;
} _DebuggedGraph_default_instance_;
class DebuggedDeviceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DebuggedDevice> _instance;
} _DebuggedDevice_default_instance_;
class ExecutionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Execution> _instance;
} _Execution_default_instance_;
class GraphExecutionTraceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphExecutionTrace> _instance;
} _GraphExecutionTrace_default_instance_;
}  // namespace tensorflow
static void InitDefaultsscc_info_CodeLocation_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_CodeLocation_default_instance_;
    new (ptr) ::tensorflow::CodeLocation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::CodeLocation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CodeLocation_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CodeLocation_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_DebugEvent_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_DebugEvent_default_instance_;
    new (ptr) ::tensorflow::DebugEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::DebugEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_DebugEvent_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_DebugEvent_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto}, {
      &scc_info_DebugMetadata_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto.base,
      &scc_info_SourceFile_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto.base,
      &scc_info_StackFrameWithId_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto.base,
      &scc_info_GraphOpCreation_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto.base,
      &scc_info_DebuggedGraph_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto.base,
      &scc_info_Execution_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto.base,
      &scc_info_GraphExecutionTrace_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto.base,
      &scc_info_DebuggedDevice_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto.base,}};

static void InitDefaultsscc_info_DebugMetadata_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_DebugMetadata_default_instance_;
    new (ptr) ::tensorflow::DebugMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::DebugMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DebugMetadata_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DebugMetadata_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_DebuggedDevice_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_DebuggedDevice_default_instance_;
    new (ptr) ::tensorflow::DebuggedDevice();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::DebuggedDevice::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DebuggedDevice_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DebuggedDevice_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_DebuggedGraph_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_DebuggedGraph_default_instance_;
    new (ptr) ::tensorflow::DebuggedGraph();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::DebuggedGraph::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DebuggedGraph_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DebuggedGraph_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_Execution_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_Execution_default_instance_;
    new (ptr) ::tensorflow::Execution();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::Execution::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Execution_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Execution_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto}, {
      &scc_info_TensorProto_tensorflow_2fcore_2fframework_2ftensor_2eproto.base,
      &scc_info_CodeLocation_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto.base,}};

static void InitDefaultsscc_info_GraphExecutionTrace_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_GraphExecutionTrace_default_instance_;
    new (ptr) ::tensorflow::GraphExecutionTrace();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::GraphExecutionTrace::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphExecutionTrace_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GraphExecutionTrace_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto}, {
      &scc_info_TensorProto_tensorflow_2fcore_2fframework_2ftensor_2eproto.base,}};

static void InitDefaultsscc_info_GraphOpCreation_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_GraphOpCreation_default_instance_;
    new (ptr) ::tensorflow::GraphOpCreation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::GraphOpCreation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphOpCreation_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GraphOpCreation_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto}, {
      &scc_info_CodeLocation_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto.base,}};

static void InitDefaultsscc_info_SourceFile_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_SourceFile_default_instance_;
    new (ptr) ::tensorflow::SourceFile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::SourceFile::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceFile_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SourceFile_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_StackFrameWithId_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_StackFrameWithId_default_instance_;
    new (ptr) ::tensorflow::StackFrameWithId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::StackFrameWithId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StackFrameWithId_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StackFrameWithId_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto}, {
      &scc_info_GraphDebugInfo_FileLineCol_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebugEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebugEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebugEvent, wall_time_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebugEvent, step_),
  offsetof(::tensorflow::DebugEventDefaultTypeInternal, debug_metadata_),
  offsetof(::tensorflow::DebugEventDefaultTypeInternal, source_file_),
  offsetof(::tensorflow::DebugEventDefaultTypeInternal, stack_frame_with_id_),
  offsetof(::tensorflow::DebugEventDefaultTypeInternal, graph_op_creation_),
  offsetof(::tensorflow::DebugEventDefaultTypeInternal, debugged_graph_),
  offsetof(::tensorflow::DebugEventDefaultTypeInternal, execution_),
  offsetof(::tensorflow::DebugEventDefaultTypeInternal, graph_execution_trace_),
  offsetof(::tensorflow::DebugEventDefaultTypeInternal, graph_id_),
  offsetof(::tensorflow::DebugEventDefaultTypeInternal, debugged_device_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebugEvent, what_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebugMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebugMetadata, tensorflow_version_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebugMetadata, file_version_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebugMetadata, tfdbg_run_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SourceFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SourceFile, file_path_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SourceFile, host_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SourceFile, lines_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::StackFrameWithId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::StackFrameWithId, id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::StackFrameWithId, file_line_col_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CodeLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CodeLocation, host_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CodeLocation, stack_frame_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphOpCreation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphOpCreation, op_type_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphOpCreation, op_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphOpCreation, graph_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphOpCreation, graph_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphOpCreation, device_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphOpCreation, input_names_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphOpCreation, num_outputs_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphOpCreation, code_location_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphOpCreation, output_tensor_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebuggedGraph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebuggedGraph, graph_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebuggedGraph, graph_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebuggedGraph, instrumented_ops_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebuggedGraph, original_graph_def_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebuggedGraph, instrumented_graph_def_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebuggedGraph, outer_context_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebuggedDevice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebuggedDevice, device_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebuggedDevice, device_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::Execution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::Execution, op_type_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::Execution, num_outputs_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::Execution, graph_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::Execution, input_tensor_ids_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::Execution, output_tensor_ids_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::Execution, tensor_debug_mode_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::Execution, tensor_protos_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::Execution, code_location_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::Execution, output_tensor_device_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphExecutionTrace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphExecutionTrace, tfdbg_context_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphExecutionTrace, op_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphExecutionTrace, output_slot_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphExecutionTrace, tensor_debug_mode_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphExecutionTrace, tensor_proto_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphExecutionTrace, device_name_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::DebugEvent)},
  { 17, -1, sizeof(::tensorflow::DebugMetadata)},
  { 25, -1, sizeof(::tensorflow::SourceFile)},
  { 33, -1, sizeof(::tensorflow::StackFrameWithId)},
  { 40, -1, sizeof(::tensorflow::CodeLocation)},
  { 47, -1, sizeof(::tensorflow::GraphOpCreation)},
  { 61, -1, sizeof(::tensorflow::DebuggedGraph)},
  { 72, -1, sizeof(::tensorflow::DebuggedDevice)},
  { 79, -1, sizeof(::tensorflow::Execution)},
  { 93, -1, sizeof(::tensorflow::GraphExecutionTrace)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_DebugEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_DebugMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_SourceFile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_StackFrameWithId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_CodeLocation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_GraphOpCreation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_DebuggedGraph_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_DebuggedDevice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_Execution_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_GraphExecutionTrace_default_instance_),
};

const char descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*tensorflow/core/protobuf/debug_event.p"
  "roto\022\ntensorflow\032&tensorflow/core/framew"
  "ork/tensor.proto\032/tensorflow/core/protob"
  "uf/graph_debug_info.proto\"\376\003\n\nDebugEvent"
  "\022\021\n\twall_time\030\001 \001(\001\022\014\n\004step\030\002 \001(\003\0223\n\016deb"
  "ug_metadata\030\003 \001(\0132\031.tensorflow.DebugMeta"
  "dataH\000\022-\n\013source_file\030\004 \001(\0132\026.tensorflow"
  ".SourceFileH\000\022;\n\023stack_frame_with_id\030\006 \001"
  "(\0132\034.tensorflow.StackFrameWithIdH\000\0228\n\021gr"
  "aph_op_creation\030\007 \001(\0132\033.tensorflow.Graph"
  "OpCreationH\000\0223\n\016debugged_graph\030\010 \001(\0132\031.t"
  "ensorflow.DebuggedGraphH\000\022*\n\texecution\030\t"
  " \001(\0132\025.tensorflow.ExecutionH\000\022@\n\025graph_e"
  "xecution_trace\030\n \001(\0132\037.tensorflow.GraphE"
  "xecutionTraceH\000\022\022\n\010graph_id\030\013 \001(\tH\000\0225\n\017d"
  "ebugged_device\030\014 \001(\0132\032.tensorflow.Debugg"
  "edDeviceH\000B\006\n\004what\"W\n\rDebugMetadata\022\032\n\022t"
  "ensorflow_version\030\001 \001(\t\022\024\n\014file_version\030"
  "\002 \001(\t\022\024\n\014tfdbg_run_id\030\003 \001(\t\"A\n\nSourceFil"
  "e\022\021\n\tfile_path\030\001 \001(\t\022\021\n\thost_name\030\002 \001(\t\022"
  "\r\n\005lines\030\003 \003(\t\"]\n\020StackFrameWithId\022\n\n\002id"
  "\030\001 \001(\t\022=\n\rfile_line_col\030\002 \001(\0132&.tensorfl"
  "ow.GraphDebugInfo.FileLineCol\":\n\014CodeLoc"
  "ation\022\021\n\thost_name\030\001 \001(\t\022\027\n\017stack_frame_"
  "ids\030\002 \003(\t\"\344\001\n\017GraphOpCreation\022\017\n\007op_type"
  "\030\001 \001(\t\022\017\n\007op_name\030\002 \001(\t\022\022\n\ngraph_name\030\003 "
  "\001(\t\022\020\n\010graph_id\030\004 \001(\t\022\023\n\013device_name\030\005 \001"
  "(\t\022\023\n\013input_names\030\006 \003(\t\022\023\n\013num_outputs\030\007"
  " \001(\005\022/\n\rcode_location\030\010 \001(\0132\030.tensorflow"
  ".CodeLocation\022\031\n\021output_tensor_ids\030\t \003(\005"
  "\"\245\001\n\rDebuggedGraph\022\020\n\010graph_id\030\001 \001(\t\022\022\n\n"
  "graph_name\030\002 \001(\t\022\030\n\020instrumented_ops\030\003 \003"
  "(\t\022\032\n\022original_graph_def\030\004 \001(\014\022\036\n\026instru"
  "mented_graph_def\030\005 \001(\014\022\030\n\020outer_context_"
  "id\030\006 \001(\t\"8\n\016DebuggedDevice\022\023\n\013device_nam"
  "e\030\001 \001(\t\022\021\n\tdevice_id\030\002 \001(\005\"\263\002\n\tExecution"
  "\022\017\n\007op_type\030\001 \001(\t\022\023\n\013num_outputs\030\002 \001(\005\022\020"
  "\n\010graph_id\030\003 \001(\t\022\030\n\020input_tensor_ids\030\004 \003"
  "(\003\022\031\n\021output_tensor_ids\030\005 \003(\003\0226\n\021tensor_"
  "debug_mode\030\006 \001(\0162\033.tensorflow.TensorDebu"
  "gMode\022.\n\rtensor_protos\030\007 \003(\0132\027.tensorflo"
  "w.TensorProto\022/\n\rcode_location\030\010 \001(\0132\030.t"
  "ensorflow.CodeLocation\022 \n\030output_tensor_"
  "device_ids\030\t \003(\005\"\321\001\n\023GraphExecutionTrace"
  "\022\030\n\020tfdbg_context_id\030\001 \001(\t\022\017\n\007op_name\030\002 "
  "\001(\t\022\023\n\013output_slot\030\003 \001(\005\0226\n\021tensor_debug"
  "_mode\030\004 \001(\0162\033.tensorflow.TensorDebugMode"
  "\022-\n\014tensor_proto\030\005 \001(\0132\027.tensorflow.Tens"
  "orProto\022\023\n\013device_name\030\006 \001(\t*\266\001\n\017TensorD"
  "ebugMode\022\017\n\013UNSPECIFIED\020\000\022\r\n\tNO_TENSOR\020\001"
  "\022\017\n\013CURT_HEALTH\020\002\022\022\n\016CONCISE_HEALTH\020\003\022\017\n"
  "\013FULL_HEALTH\020\004\022\t\n\005SHAPE\020\005\022\021\n\rFULL_NUMERI"
  "CS\020\006\022\017\n\013FULL_TENSOR\020\007\022\036\n\032REDUCE_INF_NAN_"
  "THREE_SLOTS\020\010B\203\001\n\023org.tensorflow.utilB\020D"
  "ebugEventProtosP\001ZUgithub.com/tensorflow"
  "/tensorflow/tensorflow/go/core/protobuf/"
  "for_core_protos_go_proto\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto_deps[2] = {
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto_sccs[10] = {
  &scc_info_CodeLocation_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto.base,
  &scc_info_DebugEvent_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto.base,
  &scc_info_DebugMetadata_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto.base,
  &scc_info_DebuggedDevice_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto.base,
  &scc_info_DebuggedGraph_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto.base,
  &scc_info_Execution_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto.base,
  &scc_info_GraphExecutionTrace_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto.base,
  &scc_info_GraphOpCreation_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto.base,
  &scc_info_SourceFile_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto.base,
  &scc_info_StackFrameWithId_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto = {
  false, false, descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto, "tensorflow/core/protobuf/debug_event.proto", 2275,
  &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto_once, descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto_sccs, descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto_deps, 10, 2,
  schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto::offsets,
  file_level_metadata_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto, 10, file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto, file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto)), true);
namespace tensorflow {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TensorDebugMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto);
  return file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto[0];
}
bool TensorDebugMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void DebugEvent::InitAsDefaultInstance() {
  ::tensorflow::_DebugEvent_default_instance_.debug_metadata_ = const_cast< ::tensorflow::DebugMetadata*>(
      ::tensorflow::DebugMetadata::internal_default_instance());
  ::tensorflow::_DebugEvent_default_instance_.source_file_ = const_cast< ::tensorflow::SourceFile*>(
      ::tensorflow::SourceFile::internal_default_instance());
  ::tensorflow::_DebugEvent_default_instance_.stack_frame_with_id_ = const_cast< ::tensorflow::StackFrameWithId*>(
      ::tensorflow::StackFrameWithId::internal_default_instance());
  ::tensorflow::_DebugEvent_default_instance_.graph_op_creation_ = const_cast< ::tensorflow::GraphOpCreation*>(
      ::tensorflow::GraphOpCreation::internal_default_instance());
  ::tensorflow::_DebugEvent_default_instance_.debugged_graph_ = const_cast< ::tensorflow::DebuggedGraph*>(
      ::tensorflow::DebuggedGraph::internal_default_instance());
  ::tensorflow::_DebugEvent_default_instance_.execution_ = const_cast< ::tensorflow::Execution*>(
      ::tensorflow::Execution::internal_default_instance());
  ::tensorflow::_DebugEvent_default_instance_.graph_execution_trace_ = const_cast< ::tensorflow::GraphExecutionTrace*>(
      ::tensorflow::GraphExecutionTrace::internal_default_instance());
  ::tensorflow::_DebugEvent_default_instance_.graph_id_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::tensorflow::_DebugEvent_default_instance_.debugged_device_ = const_cast< ::tensorflow::DebuggedDevice*>(
      ::tensorflow::DebuggedDevice::internal_default_instance());
}
class DebugEvent::_Internal {
 public:
  static const ::tensorflow::DebugMetadata& debug_metadata(const DebugEvent* msg);
  static const ::tensorflow::SourceFile& source_file(const DebugEvent* msg);
  static const ::tensorflow::StackFrameWithId& stack_frame_with_id(const DebugEvent* msg);
  static const ::tensorflow::GraphOpCreation& graph_op_creation(const DebugEvent* msg);
  static const ::tensorflow::DebuggedGraph& debugged_graph(const DebugEvent* msg);
  static const ::tensorflow::Execution& execution(const DebugEvent* msg);
  static const ::tensorflow::GraphExecutionTrace& graph_execution_trace(const DebugEvent* msg);
  static const ::tensorflow::DebuggedDevice& debugged_device(const DebugEvent* msg);
};

const ::tensorflow::DebugMetadata&
DebugEvent::_Internal::debug_metadata(const DebugEvent* msg) {
  return *msg->what_.debug_metadata_;
}
const ::tensorflow::SourceFile&
DebugEvent::_Internal::source_file(const DebugEvent* msg) {
  return *msg->what_.source_file_;
}
const ::tensorflow::StackFrameWithId&
DebugEvent::_Internal::stack_frame_with_id(const DebugEvent* msg) {
  return *msg->what_.stack_frame_with_id_;
}
const ::tensorflow::GraphOpCreation&
DebugEvent::_Internal::graph_op_creation(const DebugEvent* msg) {
  return *msg->what_.graph_op_creation_;
}
const ::tensorflow::DebuggedGraph&
DebugEvent::_Internal::debugged_graph(const DebugEvent* msg) {
  return *msg->what_.debugged_graph_;
}
const ::tensorflow::Execution&
DebugEvent::_Internal::execution(const DebugEvent* msg) {
  return *msg->what_.execution_;
}
const ::tensorflow::GraphExecutionTrace&
DebugEvent::_Internal::graph_execution_trace(const DebugEvent* msg) {
  return *msg->what_.graph_execution_trace_;
}
const ::tensorflow::DebuggedDevice&
DebugEvent::_Internal::debugged_device(const DebugEvent* msg) {
  return *msg->what_.debugged_device_;
}
void DebugEvent::set_allocated_debug_metadata(::tensorflow::DebugMetadata* debug_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_what();
  if (debug_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(debug_metadata);
    if (message_arena != submessage_arena) {
      debug_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debug_metadata, submessage_arena);
    }
    set_has_debug_metadata();
    what_.debug_metadata_ = debug_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DebugEvent.debug_metadata)
}
void DebugEvent::set_allocated_source_file(::tensorflow::SourceFile* source_file) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_what();
  if (source_file) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(source_file);
    if (message_arena != submessage_arena) {
      source_file = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_file, submessage_arena);
    }
    set_has_source_file();
    what_.source_file_ = source_file;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DebugEvent.source_file)
}
void DebugEvent::set_allocated_stack_frame_with_id(::tensorflow::StackFrameWithId* stack_frame_with_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_what();
  if (stack_frame_with_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stack_frame_with_id);
    if (message_arena != submessage_arena) {
      stack_frame_with_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stack_frame_with_id, submessage_arena);
    }
    set_has_stack_frame_with_id();
    what_.stack_frame_with_id_ = stack_frame_with_id;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DebugEvent.stack_frame_with_id)
}
void DebugEvent::set_allocated_graph_op_creation(::tensorflow::GraphOpCreation* graph_op_creation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_what();
  if (graph_op_creation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(graph_op_creation);
    if (message_arena != submessage_arena) {
      graph_op_creation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph_op_creation, submessage_arena);
    }
    set_has_graph_op_creation();
    what_.graph_op_creation_ = graph_op_creation;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DebugEvent.graph_op_creation)
}
void DebugEvent::set_allocated_debugged_graph(::tensorflow::DebuggedGraph* debugged_graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_what();
  if (debugged_graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(debugged_graph);
    if (message_arena != submessage_arena) {
      debugged_graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debugged_graph, submessage_arena);
    }
    set_has_debugged_graph();
    what_.debugged_graph_ = debugged_graph;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DebugEvent.debugged_graph)
}
void DebugEvent::set_allocated_execution(::tensorflow::Execution* execution) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_what();
  if (execution) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(execution);
    if (message_arena != submessage_arena) {
      execution = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, execution, submessage_arena);
    }
    set_has_execution();
    what_.execution_ = execution;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DebugEvent.execution)
}
void DebugEvent::set_allocated_graph_execution_trace(::tensorflow::GraphExecutionTrace* graph_execution_trace) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_what();
  if (graph_execution_trace) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(graph_execution_trace);
    if (message_arena != submessage_arena) {
      graph_execution_trace = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph_execution_trace, submessage_arena);
    }
    set_has_graph_execution_trace();
    what_.graph_execution_trace_ = graph_execution_trace;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DebugEvent.graph_execution_trace)
}
void DebugEvent::set_allocated_debugged_device(::tensorflow::DebuggedDevice* debugged_device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_what();
  if (debugged_device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(debugged_device);
    if (message_arena != submessage_arena) {
      debugged_device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debugged_device, submessage_arena);
    }
    set_has_debugged_device();
    what_.debugged_device_ = debugged_device;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DebugEvent.debugged_device)
}
DebugEvent::DebugEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DebugEvent)
}
DebugEvent::DebugEvent(const DebugEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&wall_time_, &from.wall_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&step_) -
    reinterpret_cast<char*>(&wall_time_)) + sizeof(step_));
  clear_has_what();
  switch (from.what_case()) {
    case kDebugMetadata: {
      _internal_mutable_debug_metadata()->::tensorflow::DebugMetadata::MergeFrom(from._internal_debug_metadata());
      break;
    }
    case kSourceFile: {
      _internal_mutable_source_file()->::tensorflow::SourceFile::MergeFrom(from._internal_source_file());
      break;
    }
    case kStackFrameWithId: {
      _internal_mutable_stack_frame_with_id()->::tensorflow::StackFrameWithId::MergeFrom(from._internal_stack_frame_with_id());
      break;
    }
    case kGraphOpCreation: {
      _internal_mutable_graph_op_creation()->::tensorflow::GraphOpCreation::MergeFrom(from._internal_graph_op_creation());
      break;
    }
    case kDebuggedGraph: {
      _internal_mutable_debugged_graph()->::tensorflow::DebuggedGraph::MergeFrom(from._internal_debugged_graph());
      break;
    }
    case kExecution: {
      _internal_mutable_execution()->::tensorflow::Execution::MergeFrom(from._internal_execution());
      break;
    }
    case kGraphExecutionTrace: {
      _internal_mutable_graph_execution_trace()->::tensorflow::GraphExecutionTrace::MergeFrom(from._internal_graph_execution_trace());
      break;
    }
    case kGraphId: {
      _internal_set_graph_id(from._internal_graph_id());
      break;
    }
    case kDebuggedDevice: {
      _internal_mutable_debugged_device()->::tensorflow::DebuggedDevice::MergeFrom(from._internal_debugged_device());
      break;
    }
    case WHAT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.DebugEvent)
}

void DebugEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DebugEvent_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto.base);
  ::memset(&wall_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&step_) -
      reinterpret_cast<char*>(&wall_time_)) + sizeof(step_));
  clear_has_what();
}

DebugEvent::~DebugEvent() {
  // @@protoc_insertion_point(destructor:tensorflow.DebugEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DebugEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_what()) {
    clear_what();
  }
}

void DebugEvent::ArenaDtor(void* object) {
  DebugEvent* _this = reinterpret_cast< DebugEvent* >(object);
  (void)_this;
}
void DebugEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DebugEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DebugEvent& DebugEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DebugEvent_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto.base);
  return *internal_default_instance();
}


void DebugEvent::clear_what() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.DebugEvent)
  switch (what_case()) {
    case kDebugMetadata: {
      if (GetArena() == nullptr) {
        delete what_.debug_metadata_;
      }
      break;
    }
    case kSourceFile: {
      if (GetArena() == nullptr) {
        delete what_.source_file_;
      }
      break;
    }
    case kStackFrameWithId: {
      if (GetArena() == nullptr) {
        delete what_.stack_frame_with_id_;
      }
      break;
    }
    case kGraphOpCreation: {
      if (GetArena() == nullptr) {
        delete what_.graph_op_creation_;
      }
      break;
    }
    case kDebuggedGraph: {
      if (GetArena() == nullptr) {
        delete what_.debugged_graph_;
      }
      break;
    }
    case kExecution: {
      if (GetArena() == nullptr) {
        delete what_.execution_;
      }
      break;
    }
    case kGraphExecutionTrace: {
      if (GetArena() == nullptr) {
        delete what_.graph_execution_trace_;
      }
      break;
    }
    case kGraphId: {
      what_.graph_id_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kDebuggedDevice: {
      if (GetArena() == nullptr) {
        delete what_.debugged_device_;
      }
      break;
    }
    case WHAT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = WHAT_NOT_SET;
}


void DebugEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DebugEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&wall_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&step_) -
      reinterpret_cast<char*>(&wall_time_)) + sizeof(step_));
  clear_what();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebugEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double wall_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          wall_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 step = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.DebugMetadata debug_metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_debug_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.SourceFile source_file = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_file(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.StackFrameWithId stack_frame_with_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_stack_frame_with_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.GraphOpCreation graph_op_creation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_graph_op_creation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.DebuggedGraph debugged_graph = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_debugged_graph(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.Execution execution = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_execution(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.GraphExecutionTrace graph_execution_trace = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_graph_execution_trace(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string graph_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_graph_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.DebugEvent.graph_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.DebuggedDevice debugged_device = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_debugged_device(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DebugEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DebugEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double wall_time = 1;
  if (!(this->wall_time() <= 0 && this->wall_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_wall_time(), target);
  }

  // int64 step = 2;
  if (this->step() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_step(), target);
  }

  // .tensorflow.DebugMetadata debug_metadata = 3;
  if (_internal_has_debug_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::debug_metadata(this), target, stream);
  }

  // .tensorflow.SourceFile source_file = 4;
  if (_internal_has_source_file()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::source_file(this), target, stream);
  }

  // .tensorflow.StackFrameWithId stack_frame_with_id = 6;
  if (_internal_has_stack_frame_with_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::stack_frame_with_id(this), target, stream);
  }

  // .tensorflow.GraphOpCreation graph_op_creation = 7;
  if (_internal_has_graph_op_creation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::graph_op_creation(this), target, stream);
  }

  // .tensorflow.DebuggedGraph debugged_graph = 8;
  if (_internal_has_debugged_graph()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::debugged_graph(this), target, stream);
  }

  // .tensorflow.Execution execution = 9;
  if (_internal_has_execution()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::execution(this), target, stream);
  }

  // .tensorflow.GraphExecutionTrace graph_execution_trace = 10;
  if (_internal_has_graph_execution_trace()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::graph_execution_trace(this), target, stream);
  }

  // string graph_id = 11;
  if (_internal_has_graph_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_graph_id().data(), static_cast<int>(this->_internal_graph_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebugEvent.graph_id");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_graph_id(), target);
  }

  // .tensorflow.DebuggedDevice debugged_device = 12;
  if (_internal_has_debugged_device()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::debugged_device(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DebugEvent)
  return target;
}

size_t DebugEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DebugEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double wall_time = 1;
  if (!(this->wall_time() <= 0 && this->wall_time() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 step = 2;
  if (this->step() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_step());
  }

  switch (what_case()) {
    // .tensorflow.DebugMetadata debug_metadata = 3;
    case kDebugMetadata: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *what_.debug_metadata_);
      break;
    }
    // .tensorflow.SourceFile source_file = 4;
    case kSourceFile: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *what_.source_file_);
      break;
    }
    // .tensorflow.StackFrameWithId stack_frame_with_id = 6;
    case kStackFrameWithId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *what_.stack_frame_with_id_);
      break;
    }
    // .tensorflow.GraphOpCreation graph_op_creation = 7;
    case kGraphOpCreation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *what_.graph_op_creation_);
      break;
    }
    // .tensorflow.DebuggedGraph debugged_graph = 8;
    case kDebuggedGraph: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *what_.debugged_graph_);
      break;
    }
    // .tensorflow.Execution execution = 9;
    case kExecution: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *what_.execution_);
      break;
    }
    // .tensorflow.GraphExecutionTrace graph_execution_trace = 10;
    case kGraphExecutionTrace: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *what_.graph_execution_trace_);
      break;
    }
    // string graph_id = 11;
    case kGraphId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_graph_id());
      break;
    }
    // .tensorflow.DebuggedDevice debugged_device = 12;
    case kDebuggedDevice: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *what_.debugged_device_);
      break;
    }
    case WHAT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebugEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.DebugEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DebugEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.DebugEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.DebugEvent)
    MergeFrom(*source);
  }
}

void DebugEvent::MergeFrom(const DebugEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DebugEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.wall_time() <= 0 && from.wall_time() >= 0)) {
    _internal_set_wall_time(from._internal_wall_time());
  }
  if (from.step() != 0) {
    _internal_set_step(from._internal_step());
  }
  switch (from.what_case()) {
    case kDebugMetadata: {
      _internal_mutable_debug_metadata()->::tensorflow::DebugMetadata::MergeFrom(from._internal_debug_metadata());
      break;
    }
    case kSourceFile: {
      _internal_mutable_source_file()->::tensorflow::SourceFile::MergeFrom(from._internal_source_file());
      break;
    }
    case kStackFrameWithId: {
      _internal_mutable_stack_frame_with_id()->::tensorflow::StackFrameWithId::MergeFrom(from._internal_stack_frame_with_id());
      break;
    }
    case kGraphOpCreation: {
      _internal_mutable_graph_op_creation()->::tensorflow::GraphOpCreation::MergeFrom(from._internal_graph_op_creation());
      break;
    }
    case kDebuggedGraph: {
      _internal_mutable_debugged_graph()->::tensorflow::DebuggedGraph::MergeFrom(from._internal_debugged_graph());
      break;
    }
    case kExecution: {
      _internal_mutable_execution()->::tensorflow::Execution::MergeFrom(from._internal_execution());
      break;
    }
    case kGraphExecutionTrace: {
      _internal_mutable_graph_execution_trace()->::tensorflow::GraphExecutionTrace::MergeFrom(from._internal_graph_execution_trace());
      break;
    }
    case kGraphId: {
      _internal_set_graph_id(from._internal_graph_id());
      break;
    }
    case kDebuggedDevice: {
      _internal_mutable_debugged_device()->::tensorflow::DebuggedDevice::MergeFrom(from._internal_debugged_device());
      break;
    }
    case WHAT_NOT_SET: {
      break;
    }
  }
}

void DebugEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.DebugEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugEvent::CopyFrom(const DebugEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DebugEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugEvent::IsInitialized() const {
  return true;
}

void DebugEvent::InternalSwap(DebugEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DebugEvent, step_)
      + sizeof(DebugEvent::step_)
      - PROTOBUF_FIELD_OFFSET(DebugEvent, wall_time_)>(
          reinterpret_cast<char*>(&wall_time_),
          reinterpret_cast<char*>(&other->wall_time_));
  swap(what_, other->what_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DebugEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DebugMetadata::InitAsDefaultInstance() {
}
class DebugMetadata::_Internal {
 public:
};

DebugMetadata::DebugMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DebugMetadata)
}
DebugMetadata::DebugMetadata(const DebugMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tensorflow_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tensorflow_version().empty()) {
    tensorflow_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tensorflow_version(),
      GetArena());
  }
  file_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_version().empty()) {
    file_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_file_version(),
      GetArena());
  }
  tfdbg_run_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tfdbg_run_id().empty()) {
    tfdbg_run_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tfdbg_run_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.DebugMetadata)
}

void DebugMetadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DebugMetadata_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto.base);
  tensorflow_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tfdbg_run_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DebugMetadata::~DebugMetadata() {
  // @@protoc_insertion_point(destructor:tensorflow.DebugMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DebugMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tensorflow_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tfdbg_run_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DebugMetadata::ArenaDtor(void* object) {
  DebugMetadata* _this = reinterpret_cast< DebugMetadata* >(object);
  (void)_this;
}
void DebugMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DebugMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DebugMetadata& DebugMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DebugMetadata_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto.base);
  return *internal_default_instance();
}


void DebugMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DebugMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tensorflow_version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  file_version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tfdbg_run_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebugMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tensorflow_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tensorflow_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.DebugMetadata.tensorflow_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_file_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.DebugMetadata.file_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tfdbg_run_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_tfdbg_run_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.DebugMetadata.tfdbg_run_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DebugMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DebugMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tensorflow_version = 1;
  if (this->tensorflow_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tensorflow_version().data(), static_cast<int>(this->_internal_tensorflow_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebugMetadata.tensorflow_version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tensorflow_version(), target);
  }

  // string file_version = 2;
  if (this->file_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_version().data(), static_cast<int>(this->_internal_file_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebugMetadata.file_version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_version(), target);
  }

  // string tfdbg_run_id = 3;
  if (this->tfdbg_run_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tfdbg_run_id().data(), static_cast<int>(this->_internal_tfdbg_run_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebugMetadata.tfdbg_run_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tfdbg_run_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DebugMetadata)
  return target;
}

size_t DebugMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DebugMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tensorflow_version = 1;
  if (this->tensorflow_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tensorflow_version());
  }

  // string file_version = 2;
  if (this->file_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_version());
  }

  // string tfdbg_run_id = 3;
  if (this->tfdbg_run_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tfdbg_run_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebugMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.DebugMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DebugMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.DebugMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.DebugMetadata)
    MergeFrom(*source);
  }
}

void DebugMetadata::MergeFrom(const DebugMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DebugMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tensorflow_version().size() > 0) {
    _internal_set_tensorflow_version(from._internal_tensorflow_version());
  }
  if (from.file_version().size() > 0) {
    _internal_set_file_version(from._internal_file_version());
  }
  if (from.tfdbg_run_id().size() > 0) {
    _internal_set_tfdbg_run_id(from._internal_tfdbg_run_id());
  }
}

void DebugMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.DebugMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugMetadata::CopyFrom(const DebugMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DebugMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugMetadata::IsInitialized() const {
  return true;
}

void DebugMetadata::InternalSwap(DebugMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tensorflow_version_.Swap(&other->tensorflow_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  file_version_.Swap(&other->file_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tfdbg_run_id_.Swap(&other->tfdbg_run_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DebugMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SourceFile::InitAsDefaultInstance() {
}
class SourceFile::_Internal {
 public:
};

SourceFile::SourceFile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lines_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.SourceFile)
}
SourceFile::SourceFile(const SourceFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lines_(from.lines_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_path().empty()) {
    file_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_file_path(),
      GetArena());
  }
  host_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host_name().empty()) {
    host_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_host_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.SourceFile)
}

void SourceFile::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SourceFile_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto.base);
  file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SourceFile::~SourceFile() {
  // @@protoc_insertion_point(destructor:tensorflow.SourceFile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SourceFile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  file_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SourceFile::ArenaDtor(void* object) {
  SourceFile* _this = reinterpret_cast< SourceFile* >(object);
  (void)_this;
}
void SourceFile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SourceFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SourceFile& SourceFile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SourceFile_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto.base);
  return *internal_default_instance();
}


void SourceFile::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.SourceFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lines_.Clear();
  file_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  host_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SourceFile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string file_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_file_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.SourceFile.file_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string host_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_host_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.SourceFile.host_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string lines = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_lines();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.SourceFile.lines"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SourceFile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.SourceFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_path = 1;
  if (this->file_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_path().data(), static_cast<int>(this->_internal_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SourceFile.file_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_path(), target);
  }

  // string host_name = 2;
  if (this->host_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host_name().data(), static_cast<int>(this->_internal_host_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SourceFile.host_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_host_name(), target);
  }

  // repeated string lines = 3;
  for (int i = 0, n = this->_internal_lines_size(); i < n; i++) {
    const auto& s = this->_internal_lines(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SourceFile.lines");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.SourceFile)
  return target;
}

size_t SourceFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.SourceFile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string lines = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(lines_.size());
  for (int i = 0, n = lines_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      lines_.Get(i));
  }

  // string file_path = 1;
  if (this->file_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_path());
  }

  // string host_name = 2;
  if (this->host_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SourceFile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.SourceFile)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceFile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SourceFile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.SourceFile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.SourceFile)
    MergeFrom(*source);
  }
}

void SourceFile::MergeFrom(const SourceFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.SourceFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lines_.MergeFrom(from.lines_);
  if (from.file_path().size() > 0) {
    _internal_set_file_path(from._internal_file_path());
  }
  if (from.host_name().size() > 0) {
    _internal_set_host_name(from._internal_host_name());
  }
}

void SourceFile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.SourceFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceFile::CopyFrom(const SourceFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.SourceFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceFile::IsInitialized() const {
  return true;
}

void SourceFile::InternalSwap(SourceFile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  lines_.InternalSwap(&other->lines_);
  file_path_.Swap(&other->file_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  host_name_.Swap(&other->host_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SourceFile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StackFrameWithId::InitAsDefaultInstance() {
  ::tensorflow::_StackFrameWithId_default_instance_._instance.get_mutable()->file_line_col_ = const_cast< ::tensorflow::GraphDebugInfo_FileLineCol*>(
      ::tensorflow::GraphDebugInfo_FileLineCol::internal_default_instance());
}
class StackFrameWithId::_Internal {
 public:
  static const ::tensorflow::GraphDebugInfo_FileLineCol& file_line_col(const StackFrameWithId* msg);
};

const ::tensorflow::GraphDebugInfo_FileLineCol&
StackFrameWithId::_Internal::file_line_col(const StackFrameWithId* msg) {
  return *msg->file_line_col_;
}
void StackFrameWithId::clear_file_line_col() {
  if (GetArena() == nullptr && file_line_col_ != nullptr) {
    delete file_line_col_;
  }
  file_line_col_ = nullptr;
}
StackFrameWithId::StackFrameWithId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.StackFrameWithId)
}
StackFrameWithId::StackFrameWithId(const StackFrameWithId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  if (from._internal_has_file_line_col()) {
    file_line_col_ = new ::tensorflow::GraphDebugInfo_FileLineCol(*from.file_line_col_);
  } else {
    file_line_col_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.StackFrameWithId)
}

void StackFrameWithId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StackFrameWithId_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_line_col_ = nullptr;
}

StackFrameWithId::~StackFrameWithId() {
  // @@protoc_insertion_point(destructor:tensorflow.StackFrameWithId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StackFrameWithId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete file_line_col_;
}

void StackFrameWithId::ArenaDtor(void* object) {
  StackFrameWithId* _this = reinterpret_cast< StackFrameWithId* >(object);
  (void)_this;
}
void StackFrameWithId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StackFrameWithId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StackFrameWithId& StackFrameWithId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StackFrameWithId_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto.base);
  return *internal_default_instance();
}


void StackFrameWithId::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.StackFrameWithId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && file_line_col_ != nullptr) {
    delete file_line_col_;
  }
  file_line_col_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StackFrameWithId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.StackFrameWithId.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.GraphDebugInfo.FileLineCol file_line_col = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_file_line_col(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StackFrameWithId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.StackFrameWithId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.StackFrameWithId.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .tensorflow.GraphDebugInfo.FileLineCol file_line_col = 2;
  if (this->has_file_line_col()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::file_line_col(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.StackFrameWithId)
  return target;
}

size_t StackFrameWithId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.StackFrameWithId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .tensorflow.GraphDebugInfo.FileLineCol file_line_col = 2;
  if (this->has_file_line_col()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *file_line_col_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StackFrameWithId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.StackFrameWithId)
  GOOGLE_DCHECK_NE(&from, this);
  const StackFrameWithId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StackFrameWithId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.StackFrameWithId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.StackFrameWithId)
    MergeFrom(*source);
  }
}

void StackFrameWithId::MergeFrom(const StackFrameWithId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.StackFrameWithId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.has_file_line_col()) {
    _internal_mutable_file_line_col()->::tensorflow::GraphDebugInfo_FileLineCol::MergeFrom(from._internal_file_line_col());
  }
}

void StackFrameWithId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.StackFrameWithId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StackFrameWithId::CopyFrom(const StackFrameWithId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.StackFrameWithId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StackFrameWithId::IsInitialized() const {
  return true;
}

void StackFrameWithId::InternalSwap(StackFrameWithId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(file_line_col_, other->file_line_col_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StackFrameWithId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CodeLocation::InitAsDefaultInstance() {
}
class CodeLocation::_Internal {
 public:
};

CodeLocation::CodeLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stack_frame_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CodeLocation)
}
CodeLocation::CodeLocation(const CodeLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stack_frame_ids_(from.stack_frame_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  host_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host_name().empty()) {
    host_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_host_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.CodeLocation)
}

void CodeLocation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CodeLocation_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto.base);
  host_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CodeLocation::~CodeLocation() {
  // @@protoc_insertion_point(destructor:tensorflow.CodeLocation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CodeLocation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  host_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CodeLocation::ArenaDtor(void* object) {
  CodeLocation* _this = reinterpret_cast< CodeLocation* >(object);
  (void)_this;
}
void CodeLocation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CodeLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CodeLocation& CodeLocation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CodeLocation_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto.base);
  return *internal_default_instance();
}


void CodeLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CodeLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stack_frame_ids_.Clear();
  host_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CodeLocation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string host_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_host_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.CodeLocation.host_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string stack_frame_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_stack_frame_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.CodeLocation.stack_frame_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CodeLocation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CodeLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host_name = 1;
  if (this->host_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host_name().data(), static_cast<int>(this->_internal_host_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CodeLocation.host_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_host_name(), target);
  }

  // repeated string stack_frame_ids = 2;
  for (int i = 0, n = this->_internal_stack_frame_ids_size(); i < n; i++) {
    const auto& s = this->_internal_stack_frame_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CodeLocation.stack_frame_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CodeLocation)
  return target;
}

size_t CodeLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CodeLocation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string stack_frame_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(stack_frame_ids_.size());
  for (int i = 0, n = stack_frame_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      stack_frame_ids_.Get(i));
  }

  // string host_name = 1;
  if (this->host_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CodeLocation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CodeLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const CodeLocation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CodeLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CodeLocation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CodeLocation)
    MergeFrom(*source);
  }
}

void CodeLocation::MergeFrom(const CodeLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CodeLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stack_frame_ids_.MergeFrom(from.stack_frame_ids_);
  if (from.host_name().size() > 0) {
    _internal_set_host_name(from._internal_host_name());
  }
}

void CodeLocation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CodeLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CodeLocation::CopyFrom(const CodeLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CodeLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CodeLocation::IsInitialized() const {
  return true;
}

void CodeLocation::InternalSwap(CodeLocation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stack_frame_ids_.InternalSwap(&other->stack_frame_ids_);
  host_name_.Swap(&other->host_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CodeLocation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GraphOpCreation::InitAsDefaultInstance() {
  ::tensorflow::_GraphOpCreation_default_instance_._instance.get_mutable()->code_location_ = const_cast< ::tensorflow::CodeLocation*>(
      ::tensorflow::CodeLocation::internal_default_instance());
}
class GraphOpCreation::_Internal {
 public:
  static const ::tensorflow::CodeLocation& code_location(const GraphOpCreation* msg);
};

const ::tensorflow::CodeLocation&
GraphOpCreation::_Internal::code_location(const GraphOpCreation* msg) {
  return *msg->code_location_;
}
GraphOpCreation::GraphOpCreation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  input_names_(arena),
  output_tensor_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphOpCreation)
}
GraphOpCreation::GraphOpCreation(const GraphOpCreation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      input_names_(from.input_names_),
      output_tensor_ids_(from.output_tensor_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  op_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_op_type().empty()) {
    op_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_op_type(),
      GetArena());
  }
  op_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_op_name().empty()) {
    op_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_op_name(),
      GetArena());
  }
  graph_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_graph_name().empty()) {
    graph_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_graph_name(),
      GetArena());
  }
  graph_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_graph_id().empty()) {
    graph_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_graph_id(),
      GetArena());
  }
  device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_name().empty()) {
    device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_name(),
      GetArena());
  }
  if (from._internal_has_code_location()) {
    code_location_ = new ::tensorflow::CodeLocation(*from.code_location_);
  } else {
    code_location_ = nullptr;
  }
  num_outputs_ = from.num_outputs_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphOpCreation)
}

void GraphOpCreation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GraphOpCreation_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto.base);
  op_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  op_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  graph_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  graph_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_outputs_) -
      reinterpret_cast<char*>(&code_location_)) + sizeof(num_outputs_));
}

GraphOpCreation::~GraphOpCreation() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphOpCreation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GraphOpCreation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  op_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  op_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  graph_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  graph_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete code_location_;
}

void GraphOpCreation::ArenaDtor(void* object) {
  GraphOpCreation* _this = reinterpret_cast< GraphOpCreation* >(object);
  (void)_this;
}
void GraphOpCreation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphOpCreation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GraphOpCreation& GraphOpCreation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GraphOpCreation_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GraphOpCreation::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphOpCreation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_names_.Clear();
  output_tensor_ids_.Clear();
  op_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  op_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  graph_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  graph_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && code_location_ != nullptr) {
    delete code_location_;
  }
  code_location_ = nullptr;
  num_outputs_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GraphOpCreation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string op_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_op_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.GraphOpCreation.op_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string op_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_op_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.GraphOpCreation.op_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string graph_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_graph_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.GraphOpCreation.graph_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string graph_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_graph_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.GraphOpCreation.graph_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_device_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.GraphOpCreation.device_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string input_names = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_input_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.GraphOpCreation.input_names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 num_outputs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          num_outputs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.CodeLocation code_location = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_code_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 output_tensor_ids = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_output_tensor_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          _internal_add_output_tensor_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GraphOpCreation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphOpCreation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string op_type = 1;
  if (this->op_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_op_type().data(), static_cast<int>(this->_internal_op_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphOpCreation.op_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_op_type(), target);
  }

  // string op_name = 2;
  if (this->op_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_op_name().data(), static_cast<int>(this->_internal_op_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphOpCreation.op_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_op_name(), target);
  }

  // string graph_name = 3;
  if (this->graph_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_graph_name().data(), static_cast<int>(this->_internal_graph_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphOpCreation.graph_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_graph_name(), target);
  }

  // string graph_id = 4;
  if (this->graph_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_graph_id().data(), static_cast<int>(this->_internal_graph_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphOpCreation.graph_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_graph_id(), target);
  }

  // string device_name = 5;
  if (this->device_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_name().data(), static_cast<int>(this->_internal_device_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphOpCreation.device_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_device_name(), target);
  }

  // repeated string input_names = 6;
  for (int i = 0, n = this->_internal_input_names_size(); i < n; i++) {
    const auto& s = this->_internal_input_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphOpCreation.input_names");
    target = stream->WriteString(6, s, target);
  }

  // int32 num_outputs = 7;
  if (this->num_outputs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_num_outputs(), target);
  }

  // .tensorflow.CodeLocation code_location = 8;
  if (this->has_code_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::code_location(this), target, stream);
  }

  // repeated int32 output_tensor_ids = 9;
  {
    int byte_size = _output_tensor_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          9, _internal_output_tensor_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphOpCreation)
  return target;
}

size_t GraphOpCreation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphOpCreation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string input_names = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(input_names_.size());
  for (int i = 0, n = input_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      input_names_.Get(i));
  }

  // repeated int32 output_tensor_ids = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->output_tensor_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _output_tensor_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string op_type = 1;
  if (this->op_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_op_type());
  }

  // string op_name = 2;
  if (this->op_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_op_name());
  }

  // string graph_name = 3;
  if (this->graph_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_graph_name());
  }

  // string graph_id = 4;
  if (this->graph_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_graph_id());
  }

  // string device_name = 5;
  if (this->device_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_name());
  }

  // .tensorflow.CodeLocation code_location = 8;
  if (this->has_code_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *code_location_);
  }

  // int32 num_outputs = 7;
  if (this->num_outputs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_outputs());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphOpCreation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GraphOpCreation)
  GOOGLE_DCHECK_NE(&from, this);
  const GraphOpCreation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GraphOpCreation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GraphOpCreation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GraphOpCreation)
    MergeFrom(*source);
  }
}

void GraphOpCreation::MergeFrom(const GraphOpCreation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphOpCreation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_names_.MergeFrom(from.input_names_);
  output_tensor_ids_.MergeFrom(from.output_tensor_ids_);
  if (from.op_type().size() > 0) {
    _internal_set_op_type(from._internal_op_type());
  }
  if (from.op_name().size() > 0) {
    _internal_set_op_name(from._internal_op_name());
  }
  if (from.graph_name().size() > 0) {
    _internal_set_graph_name(from._internal_graph_name());
  }
  if (from.graph_id().size() > 0) {
    _internal_set_graph_id(from._internal_graph_id());
  }
  if (from.device_name().size() > 0) {
    _internal_set_device_name(from._internal_device_name());
  }
  if (from.has_code_location()) {
    _internal_mutable_code_location()->::tensorflow::CodeLocation::MergeFrom(from._internal_code_location());
  }
  if (from.num_outputs() != 0) {
    _internal_set_num_outputs(from._internal_num_outputs());
  }
}

void GraphOpCreation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GraphOpCreation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphOpCreation::CopyFrom(const GraphOpCreation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphOpCreation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphOpCreation::IsInitialized() const {
  return true;
}

void GraphOpCreation::InternalSwap(GraphOpCreation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  input_names_.InternalSwap(&other->input_names_);
  output_tensor_ids_.InternalSwap(&other->output_tensor_ids_);
  op_type_.Swap(&other->op_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  op_name_.Swap(&other->op_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  graph_name_.Swap(&other->graph_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  graph_id_.Swap(&other->graph_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_name_.Swap(&other->device_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GraphOpCreation, num_outputs_)
      + sizeof(GraphOpCreation::num_outputs_)
      - PROTOBUF_FIELD_OFFSET(GraphOpCreation, code_location_)>(
          reinterpret_cast<char*>(&code_location_),
          reinterpret_cast<char*>(&other->code_location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphOpCreation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DebuggedGraph::InitAsDefaultInstance() {
}
class DebuggedGraph::_Internal {
 public:
};

DebuggedGraph::DebuggedGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  instrumented_ops_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DebuggedGraph)
}
DebuggedGraph::DebuggedGraph(const DebuggedGraph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      instrumented_ops_(from.instrumented_ops_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  graph_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_graph_id().empty()) {
    graph_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_graph_id(),
      GetArena());
  }
  graph_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_graph_name().empty()) {
    graph_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_graph_name(),
      GetArena());
  }
  original_graph_def_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_original_graph_def().empty()) {
    original_graph_def_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_original_graph_def(),
      GetArena());
  }
  instrumented_graph_def_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instrumented_graph_def().empty()) {
    instrumented_graph_def_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instrumented_graph_def(),
      GetArena());
  }
  outer_context_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_outer_context_id().empty()) {
    outer_context_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_outer_context_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.DebuggedGraph)
}

void DebuggedGraph::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DebuggedGraph_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto.base);
  graph_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  graph_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  original_graph_def_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrumented_graph_def_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  outer_context_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DebuggedGraph::~DebuggedGraph() {
  // @@protoc_insertion_point(destructor:tensorflow.DebuggedGraph)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DebuggedGraph::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  graph_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  graph_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  original_graph_def_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrumented_graph_def_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  outer_context_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DebuggedGraph::ArenaDtor(void* object) {
  DebuggedGraph* _this = reinterpret_cast< DebuggedGraph* >(object);
  (void)_this;
}
void DebuggedGraph::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DebuggedGraph::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DebuggedGraph& DebuggedGraph::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DebuggedGraph_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto.base);
  return *internal_default_instance();
}


void DebuggedGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DebuggedGraph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instrumented_ops_.Clear();
  graph_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  graph_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  original_graph_def_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrumented_graph_def_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  outer_context_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebuggedGraph::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string graph_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_graph_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.DebuggedGraph.graph_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string graph_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_graph_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.DebuggedGraph.graph_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string instrumented_ops = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_instrumented_ops();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.DebuggedGraph.instrumented_ops"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes original_graph_def = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_original_graph_def();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes instrumented_graph_def = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_instrumented_graph_def();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string outer_context_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_outer_context_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.DebuggedGraph.outer_context_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DebuggedGraph::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DebuggedGraph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string graph_id = 1;
  if (this->graph_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_graph_id().data(), static_cast<int>(this->_internal_graph_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebuggedGraph.graph_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_graph_id(), target);
  }

  // string graph_name = 2;
  if (this->graph_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_graph_name().data(), static_cast<int>(this->_internal_graph_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebuggedGraph.graph_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_graph_name(), target);
  }

  // repeated string instrumented_ops = 3;
  for (int i = 0, n = this->_internal_instrumented_ops_size(); i < n; i++) {
    const auto& s = this->_internal_instrumented_ops(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebuggedGraph.instrumented_ops");
    target = stream->WriteString(3, s, target);
  }

  // bytes original_graph_def = 4;
  if (this->original_graph_def().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_original_graph_def(), target);
  }

  // bytes instrumented_graph_def = 5;
  if (this->instrumented_graph_def().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_instrumented_graph_def(), target);
  }

  // string outer_context_id = 6;
  if (this->outer_context_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_outer_context_id().data(), static_cast<int>(this->_internal_outer_context_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebuggedGraph.outer_context_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_outer_context_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DebuggedGraph)
  return target;
}

size_t DebuggedGraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DebuggedGraph)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string instrumented_ops = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(instrumented_ops_.size());
  for (int i = 0, n = instrumented_ops_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      instrumented_ops_.Get(i));
  }

  // string graph_id = 1;
  if (this->graph_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_graph_id());
  }

  // string graph_name = 2;
  if (this->graph_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_graph_name());
  }

  // bytes original_graph_def = 4;
  if (this->original_graph_def().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_original_graph_def());
  }

  // bytes instrumented_graph_def = 5;
  if (this->instrumented_graph_def().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_instrumented_graph_def());
  }

  // string outer_context_id = 6;
  if (this->outer_context_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_outer_context_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebuggedGraph::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.DebuggedGraph)
  GOOGLE_DCHECK_NE(&from, this);
  const DebuggedGraph* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DebuggedGraph>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.DebuggedGraph)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.DebuggedGraph)
    MergeFrom(*source);
  }
}

void DebuggedGraph::MergeFrom(const DebuggedGraph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DebuggedGraph)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  instrumented_ops_.MergeFrom(from.instrumented_ops_);
  if (from.graph_id().size() > 0) {
    _internal_set_graph_id(from._internal_graph_id());
  }
  if (from.graph_name().size() > 0) {
    _internal_set_graph_name(from._internal_graph_name());
  }
  if (from.original_graph_def().size() > 0) {
    _internal_set_original_graph_def(from._internal_original_graph_def());
  }
  if (from.instrumented_graph_def().size() > 0) {
    _internal_set_instrumented_graph_def(from._internal_instrumented_graph_def());
  }
  if (from.outer_context_id().size() > 0) {
    _internal_set_outer_context_id(from._internal_outer_context_id());
  }
}

void DebuggedGraph::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.DebuggedGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebuggedGraph::CopyFrom(const DebuggedGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DebuggedGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebuggedGraph::IsInitialized() const {
  return true;
}

void DebuggedGraph::InternalSwap(DebuggedGraph* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  instrumented_ops_.InternalSwap(&other->instrumented_ops_);
  graph_id_.Swap(&other->graph_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  graph_name_.Swap(&other->graph_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  original_graph_def_.Swap(&other->original_graph_def_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrumented_graph_def_.Swap(&other->instrumented_graph_def_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  outer_context_id_.Swap(&other->outer_context_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DebuggedGraph::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DebuggedDevice::InitAsDefaultInstance() {
}
class DebuggedDevice::_Internal {
 public:
};

DebuggedDevice::DebuggedDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DebuggedDevice)
}
DebuggedDevice::DebuggedDevice(const DebuggedDevice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_name().empty()) {
    device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_name(),
      GetArena());
  }
  device_id_ = from.device_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.DebuggedDevice)
}

void DebuggedDevice::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DebuggedDevice_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto.base);
  device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_ = 0;
}

DebuggedDevice::~DebuggedDevice() {
  // @@protoc_insertion_point(destructor:tensorflow.DebuggedDevice)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DebuggedDevice::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DebuggedDevice::ArenaDtor(void* object) {
  DebuggedDevice* _this = reinterpret_cast< DebuggedDevice* >(object);
  (void)_this;
}
void DebuggedDevice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DebuggedDevice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DebuggedDevice& DebuggedDevice::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DebuggedDevice_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto.base);
  return *internal_default_instance();
}


void DebuggedDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DebuggedDevice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebuggedDevice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string device_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.DebuggedDevice.device_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 device_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DebuggedDevice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DebuggedDevice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_name = 1;
  if (this->device_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_name().data(), static_cast<int>(this->_internal_device_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebuggedDevice.device_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_name(), target);
  }

  // int32 device_id = 2;
  if (this->device_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_device_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DebuggedDevice)
  return target;
}

size_t DebuggedDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DebuggedDevice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_name = 1;
  if (this->device_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_name());
  }

  // int32 device_id = 2;
  if (this->device_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_device_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebuggedDevice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.DebuggedDevice)
  GOOGLE_DCHECK_NE(&from, this);
  const DebuggedDevice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DebuggedDevice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.DebuggedDevice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.DebuggedDevice)
    MergeFrom(*source);
  }
}

void DebuggedDevice::MergeFrom(const DebuggedDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DebuggedDevice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_name().size() > 0) {
    _internal_set_device_name(from._internal_device_name());
  }
  if (from.device_id() != 0) {
    _internal_set_device_id(from._internal_device_id());
  }
}

void DebuggedDevice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.DebuggedDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebuggedDevice::CopyFrom(const DebuggedDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DebuggedDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebuggedDevice::IsInitialized() const {
  return true;
}

void DebuggedDevice::InternalSwap(DebuggedDevice* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_name_.Swap(&other->device_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(device_id_, other->device_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DebuggedDevice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Execution::InitAsDefaultInstance() {
  ::tensorflow::_Execution_default_instance_._instance.get_mutable()->code_location_ = const_cast< ::tensorflow::CodeLocation*>(
      ::tensorflow::CodeLocation::internal_default_instance());
}
class Execution::_Internal {
 public:
  static const ::tensorflow::CodeLocation& code_location(const Execution* msg);
};

const ::tensorflow::CodeLocation&
Execution::_Internal::code_location(const Execution* msg) {
  return *msg->code_location_;
}
void Execution::clear_tensor_protos() {
  tensor_protos_.Clear();
}
Execution::Execution(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  input_tensor_ids_(arena),
  output_tensor_ids_(arena),
  tensor_protos_(arena),
  output_tensor_device_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.Execution)
}
Execution::Execution(const Execution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      input_tensor_ids_(from.input_tensor_ids_),
      output_tensor_ids_(from.output_tensor_ids_),
      tensor_protos_(from.tensor_protos_),
      output_tensor_device_ids_(from.output_tensor_device_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  op_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_op_type().empty()) {
    op_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_op_type(),
      GetArena());
  }
  graph_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_graph_id().empty()) {
    graph_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_graph_id(),
      GetArena());
  }
  if (from._internal_has_code_location()) {
    code_location_ = new ::tensorflow::CodeLocation(*from.code_location_);
  } else {
    code_location_ = nullptr;
  }
  ::memcpy(&num_outputs_, &from.num_outputs_,
    static_cast<size_t>(reinterpret_cast<char*>(&tensor_debug_mode_) -
    reinterpret_cast<char*>(&num_outputs_)) + sizeof(tensor_debug_mode_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.Execution)
}

void Execution::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Execution_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto.base);
  op_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  graph_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tensor_debug_mode_) -
      reinterpret_cast<char*>(&code_location_)) + sizeof(tensor_debug_mode_));
}

Execution::~Execution() {
  // @@protoc_insertion_point(destructor:tensorflow.Execution)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Execution::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  op_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  graph_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete code_location_;
}

void Execution::ArenaDtor(void* object) {
  Execution* _this = reinterpret_cast< Execution* >(object);
  (void)_this;
}
void Execution::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Execution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Execution& Execution::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Execution_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto.base);
  return *internal_default_instance();
}


void Execution::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.Execution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_tensor_ids_.Clear();
  output_tensor_ids_.Clear();
  tensor_protos_.Clear();
  output_tensor_device_ids_.Clear();
  op_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  graph_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && code_location_ != nullptr) {
    delete code_location_;
  }
  code_location_ = nullptr;
  ::memset(&num_outputs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tensor_debug_mode_) -
      reinterpret_cast<char*>(&num_outputs_)) + sizeof(tensor_debug_mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Execution::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string op_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_op_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.Execution.op_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_outputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_outputs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string graph_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_graph_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.Execution.graph_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 input_tensor_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_input_tensor_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_input_tensor_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 output_tensor_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_output_tensor_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_output_tensor_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.TensorDebugMode tensor_debug_mode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tensor_debug_mode(static_cast<::tensorflow::TensorDebugMode>(val));
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.TensorProto tensor_protos = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tensor_protos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // .tensorflow.CodeLocation code_location = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_code_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 output_tensor_device_ids = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_output_tensor_device_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          _internal_add_output_tensor_device_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Execution::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.Execution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string op_type = 1;
  if (this->op_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_op_type().data(), static_cast<int>(this->_internal_op_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.Execution.op_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_op_type(), target);
  }

  // int32 num_outputs = 2;
  if (this->num_outputs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num_outputs(), target);
  }

  // string graph_id = 3;
  if (this->graph_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_graph_id().data(), static_cast<int>(this->_internal_graph_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.Execution.graph_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_graph_id(), target);
  }

  // repeated int64 input_tensor_ids = 4;
  {
    int byte_size = _input_tensor_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_input_tensor_ids(), byte_size, target);
    }
  }

  // repeated int64 output_tensor_ids = 5;
  {
    int byte_size = _output_tensor_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          5, _internal_output_tensor_ids(), byte_size, target);
    }
  }

  // .tensorflow.TensorDebugMode tensor_debug_mode = 6;
  if (this->tensor_debug_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_tensor_debug_mode(), target);
  }

  // repeated .tensorflow.TensorProto tensor_protos = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tensor_protos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_tensor_protos(i), target, stream);
  }

  // .tensorflow.CodeLocation code_location = 8;
  if (this->has_code_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::code_location(this), target, stream);
  }

  // repeated int32 output_tensor_device_ids = 9;
  {
    int byte_size = _output_tensor_device_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          9, _internal_output_tensor_device_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.Execution)
  return target;
}

size_t Execution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.Execution)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 input_tensor_ids = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->input_tensor_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _input_tensor_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 output_tensor_ids = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->output_tensor_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _output_tensor_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .tensorflow.TensorProto tensor_protos = 7;
  total_size += 1UL * this->_internal_tensor_protos_size();
  for (const auto& msg : this->tensor_protos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 output_tensor_device_ids = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->output_tensor_device_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _output_tensor_device_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string op_type = 1;
  if (this->op_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_op_type());
  }

  // string graph_id = 3;
  if (this->graph_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_graph_id());
  }

  // .tensorflow.CodeLocation code_location = 8;
  if (this->has_code_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *code_location_);
  }

  // int32 num_outputs = 2;
  if (this->num_outputs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_outputs());
  }

  // .tensorflow.TensorDebugMode tensor_debug_mode = 6;
  if (this->tensor_debug_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tensor_debug_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Execution::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.Execution)
  GOOGLE_DCHECK_NE(&from, this);
  const Execution* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Execution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.Execution)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.Execution)
    MergeFrom(*source);
  }
}

void Execution::MergeFrom(const Execution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.Execution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_tensor_ids_.MergeFrom(from.input_tensor_ids_);
  output_tensor_ids_.MergeFrom(from.output_tensor_ids_);
  tensor_protos_.MergeFrom(from.tensor_protos_);
  output_tensor_device_ids_.MergeFrom(from.output_tensor_device_ids_);
  if (from.op_type().size() > 0) {
    _internal_set_op_type(from._internal_op_type());
  }
  if (from.graph_id().size() > 0) {
    _internal_set_graph_id(from._internal_graph_id());
  }
  if (from.has_code_location()) {
    _internal_mutable_code_location()->::tensorflow::CodeLocation::MergeFrom(from._internal_code_location());
  }
  if (from.num_outputs() != 0) {
    _internal_set_num_outputs(from._internal_num_outputs());
  }
  if (from.tensor_debug_mode() != 0) {
    _internal_set_tensor_debug_mode(from._internal_tensor_debug_mode());
  }
}

void Execution::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.Execution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Execution::CopyFrom(const Execution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.Execution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Execution::IsInitialized() const {
  return true;
}

void Execution::InternalSwap(Execution* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  input_tensor_ids_.InternalSwap(&other->input_tensor_ids_);
  output_tensor_ids_.InternalSwap(&other->output_tensor_ids_);
  tensor_protos_.InternalSwap(&other->tensor_protos_);
  output_tensor_device_ids_.InternalSwap(&other->output_tensor_device_ids_);
  op_type_.Swap(&other->op_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  graph_id_.Swap(&other->graph_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Execution, tensor_debug_mode_)
      + sizeof(Execution::tensor_debug_mode_)
      - PROTOBUF_FIELD_OFFSET(Execution, code_location_)>(
          reinterpret_cast<char*>(&code_location_),
          reinterpret_cast<char*>(&other->code_location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Execution::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GraphExecutionTrace::InitAsDefaultInstance() {
  ::tensorflow::_GraphExecutionTrace_default_instance_._instance.get_mutable()->tensor_proto_ = const_cast< ::tensorflow::TensorProto*>(
      ::tensorflow::TensorProto::internal_default_instance());
}
class GraphExecutionTrace::_Internal {
 public:
  static const ::tensorflow::TensorProto& tensor_proto(const GraphExecutionTrace* msg);
};

const ::tensorflow::TensorProto&
GraphExecutionTrace::_Internal::tensor_proto(const GraphExecutionTrace* msg) {
  return *msg->tensor_proto_;
}
void GraphExecutionTrace::clear_tensor_proto() {
  if (GetArena() == nullptr && tensor_proto_ != nullptr) {
    delete tensor_proto_;
  }
  tensor_proto_ = nullptr;
}
GraphExecutionTrace::GraphExecutionTrace(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphExecutionTrace)
}
GraphExecutionTrace::GraphExecutionTrace(const GraphExecutionTrace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tfdbg_context_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tfdbg_context_id().empty()) {
    tfdbg_context_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tfdbg_context_id(),
      GetArena());
  }
  op_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_op_name().empty()) {
    op_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_op_name(),
      GetArena());
  }
  device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_name().empty()) {
    device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_name(),
      GetArena());
  }
  if (from._internal_has_tensor_proto()) {
    tensor_proto_ = new ::tensorflow::TensorProto(*from.tensor_proto_);
  } else {
    tensor_proto_ = nullptr;
  }
  ::memcpy(&output_slot_, &from.output_slot_,
    static_cast<size_t>(reinterpret_cast<char*>(&tensor_debug_mode_) -
    reinterpret_cast<char*>(&output_slot_)) + sizeof(tensor_debug_mode_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphExecutionTrace)
}

void GraphExecutionTrace::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GraphExecutionTrace_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto.base);
  tfdbg_context_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  op_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tensor_proto_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tensor_debug_mode_) -
      reinterpret_cast<char*>(&tensor_proto_)) + sizeof(tensor_debug_mode_));
}

GraphExecutionTrace::~GraphExecutionTrace() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphExecutionTrace)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GraphExecutionTrace::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tfdbg_context_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  op_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tensor_proto_;
}

void GraphExecutionTrace::ArenaDtor(void* object) {
  GraphExecutionTrace* _this = reinterpret_cast< GraphExecutionTrace* >(object);
  (void)_this;
}
void GraphExecutionTrace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphExecutionTrace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GraphExecutionTrace& GraphExecutionTrace::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GraphExecutionTrace_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto.base);
  return *internal_default_instance();
}


void GraphExecutionTrace::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphExecutionTrace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tfdbg_context_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  op_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && tensor_proto_ != nullptr) {
    delete tensor_proto_;
  }
  tensor_proto_ = nullptr;
  ::memset(&output_slot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tensor_debug_mode_) -
      reinterpret_cast<char*>(&output_slot_)) + sizeof(tensor_debug_mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GraphExecutionTrace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tfdbg_context_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tfdbg_context_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.GraphExecutionTrace.tfdbg_context_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string op_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_op_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.GraphExecutionTrace.op_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 output_slot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          output_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.TensorDebugMode tensor_debug_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tensor_debug_mode(static_cast<::tensorflow::TensorDebugMode>(val));
        } else goto handle_unusual;
        continue;
      // .tensorflow.TensorProto tensor_proto = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tensor_proto(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_device_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.GraphExecutionTrace.device_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GraphExecutionTrace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphExecutionTrace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tfdbg_context_id = 1;
  if (this->tfdbg_context_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tfdbg_context_id().data(), static_cast<int>(this->_internal_tfdbg_context_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphExecutionTrace.tfdbg_context_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tfdbg_context_id(), target);
  }

  // string op_name = 2;
  if (this->op_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_op_name().data(), static_cast<int>(this->_internal_op_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphExecutionTrace.op_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_op_name(), target);
  }

  // int32 output_slot = 3;
  if (this->output_slot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_output_slot(), target);
  }

  // .tensorflow.TensorDebugMode tensor_debug_mode = 4;
  if (this->tensor_debug_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_tensor_debug_mode(), target);
  }

  // .tensorflow.TensorProto tensor_proto = 5;
  if (this->has_tensor_proto()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::tensor_proto(this), target, stream);
  }

  // string device_name = 6;
  if (this->device_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_name().data(), static_cast<int>(this->_internal_device_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphExecutionTrace.device_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_device_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphExecutionTrace)
  return target;
}

size_t GraphExecutionTrace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphExecutionTrace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tfdbg_context_id = 1;
  if (this->tfdbg_context_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tfdbg_context_id());
  }

  // string op_name = 2;
  if (this->op_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_op_name());
  }

  // string device_name = 6;
  if (this->device_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_name());
  }

  // .tensorflow.TensorProto tensor_proto = 5;
  if (this->has_tensor_proto()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tensor_proto_);
  }

  // int32 output_slot = 3;
  if (this->output_slot() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_output_slot());
  }

  // .tensorflow.TensorDebugMode tensor_debug_mode = 4;
  if (this->tensor_debug_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tensor_debug_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphExecutionTrace::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GraphExecutionTrace)
  GOOGLE_DCHECK_NE(&from, this);
  const GraphExecutionTrace* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GraphExecutionTrace>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GraphExecutionTrace)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GraphExecutionTrace)
    MergeFrom(*source);
  }
}

void GraphExecutionTrace::MergeFrom(const GraphExecutionTrace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphExecutionTrace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tfdbg_context_id().size() > 0) {
    _internal_set_tfdbg_context_id(from._internal_tfdbg_context_id());
  }
  if (from.op_name().size() > 0) {
    _internal_set_op_name(from._internal_op_name());
  }
  if (from.device_name().size() > 0) {
    _internal_set_device_name(from._internal_device_name());
  }
  if (from.has_tensor_proto()) {
    _internal_mutable_tensor_proto()->::tensorflow::TensorProto::MergeFrom(from._internal_tensor_proto());
  }
  if (from.output_slot() != 0) {
    _internal_set_output_slot(from._internal_output_slot());
  }
  if (from.tensor_debug_mode() != 0) {
    _internal_set_tensor_debug_mode(from._internal_tensor_debug_mode());
  }
}

void GraphExecutionTrace::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GraphExecutionTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphExecutionTrace::CopyFrom(const GraphExecutionTrace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphExecutionTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphExecutionTrace::IsInitialized() const {
  return true;
}

void GraphExecutionTrace::InternalSwap(GraphExecutionTrace* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tfdbg_context_id_.Swap(&other->tfdbg_context_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  op_name_.Swap(&other->op_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_name_.Swap(&other->device_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GraphExecutionTrace, tensor_debug_mode_)
      + sizeof(GraphExecutionTrace::tensor_debug_mode_)
      - PROTOBUF_FIELD_OFFSET(GraphExecutionTrace, tensor_proto_)>(
          reinterpret_cast<char*>(&tensor_proto_),
          reinterpret_cast<char*>(&other->tensor_proto_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphExecutionTrace::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::DebugEvent* Arena::CreateMaybeMessage< ::tensorflow::DebugEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::DebugEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::DebugMetadata* Arena::CreateMaybeMessage< ::tensorflow::DebugMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::DebugMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::SourceFile* Arena::CreateMaybeMessage< ::tensorflow::SourceFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::SourceFile >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::StackFrameWithId* Arena::CreateMaybeMessage< ::tensorflow::StackFrameWithId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::StackFrameWithId >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::CodeLocation* Arena::CreateMaybeMessage< ::tensorflow::CodeLocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CodeLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::GraphOpCreation* Arena::CreateMaybeMessage< ::tensorflow::GraphOpCreation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::GraphOpCreation >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::DebuggedGraph* Arena::CreateMaybeMessage< ::tensorflow::DebuggedGraph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::DebuggedGraph >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::DebuggedDevice* Arena::CreateMaybeMessage< ::tensorflow::DebuggedDevice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::DebuggedDevice >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::Execution* Arena::CreateMaybeMessage< ::tensorflow::Execution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::Execution >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::GraphExecutionTrace* Arena::CreateMaybeMessage< ::tensorflow::GraphExecutionTrace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::GraphExecutionTrace >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
