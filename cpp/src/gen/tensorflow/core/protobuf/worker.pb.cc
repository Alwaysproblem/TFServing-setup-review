// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/worker.proto

#include "tensorflow/core/protobuf/worker.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_ConfigProto_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CostGraphDef_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DebugOptions_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeviceAttributes_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeviceLocality_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fworker_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExecutorOpts_tensorflow_2fcore_2fprotobuf_2fworker_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GraphDef_tensorflow_2fcore_2fframework_2fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GraphOptions_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fworker_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LabeledStepStats_tensorflow_2fcore_2fprotobuf_2fworker_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fnamed_5ftensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NamedTensorProto_tensorflow_2fcore_2fprotobuf_2fnamed_5ftensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ServerDef_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fworker_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StepSequence_tensorflow_2fcore_2fprotobuf_2fworker_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StepStats_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2ftensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TensorProto_tensorflow_2fcore_2fframework_2ftensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TensorShapeProto_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fworker_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TraceOpts_tensorflow_2fcore_2fprotobuf_2fworker_2eproto;
namespace tensorflow {
class GetStatusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStatusRequest> _instance;
} _GetStatusRequest_default_instance_;
class GetStatusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStatusResponse> _instance;
} _GetStatusResponse_default_instance_;
class CreateWorkerSessionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateWorkerSessionRequest> _instance;
} _CreateWorkerSessionRequest_default_instance_;
class CreateWorkerSessionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateWorkerSessionResponse> _instance;
} _CreateWorkerSessionResponse_default_instance_;
class DeleteWorkerSessionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteWorkerSessionRequest> _instance;
} _DeleteWorkerSessionRequest_default_instance_;
class DeleteWorkerSessionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteWorkerSessionResponse> _instance;
} _DeleteWorkerSessionResponse_default_instance_;
class RegisterGraphRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterGraphRequest> _instance;
} _RegisterGraphRequest_default_instance_;
class RegisterGraphResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterGraphResponse> _instance;
} _RegisterGraphResponse_default_instance_;
class DeregisterGraphRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeregisterGraphRequest> _instance;
} _DeregisterGraphRequest_default_instance_;
class DeregisterGraphResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeregisterGraphResponse> _instance;
} _DeregisterGraphResponse_default_instance_;
class CleanupAllRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CleanupAllRequest> _instance;
} _CleanupAllRequest_default_instance_;
class CleanupAllResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CleanupAllResponse> _instance;
} _CleanupAllResponse_default_instance_;
class ExecutorOptsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExecutorOpts> _instance;
} _ExecutorOpts_default_instance_;
class RunGraphRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RunGraphRequest> _instance;
} _RunGraphRequest_default_instance_;
class RunGraphResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RunGraphResponse> _instance;
} _RunGraphResponse_default_instance_;
class CleanupGraphRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CleanupGraphRequest> _instance;
} _CleanupGraphRequest_default_instance_;
class CleanupGraphResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CleanupGraphResponse> _instance;
} _CleanupGraphResponse_default_instance_;
class RecvTensorRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecvTensorRequest> _instance;
} _RecvTensorRequest_default_instance_;
class RecvTensorResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecvTensorResponse> _instance;
} _RecvTensorResponse_default_instance_;
class MarkRecvFinishedRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarkRecvFinishedRequest> _instance;
} _MarkRecvFinishedRequest_default_instance_;
class MarkRecvFinishedResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarkRecvFinishedResponse> _instance;
} _MarkRecvFinishedResponse_default_instance_;
class LoggingRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoggingRequest> _instance;
} _LoggingRequest_default_instance_;
class LabeledStepStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LabeledStepStats> _instance;
} _LabeledStepStats_default_instance_;
class LoggingResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoggingResponse> _instance;
} _LoggingResponse_default_instance_;
class TraceOptsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TraceOpts> _instance;
} _TraceOpts_default_instance_;
class TracingRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TracingRequest> _instance;
} _TracingRequest_default_instance_;
class TracingResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TracingResponse> _instance;
} _TracingResponse_default_instance_;
class RecvBufRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecvBufRequest> _instance;
} _RecvBufRequest_default_instance_;
class RecvBufResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecvBufResponse> _instance;
} _RecvBufResponse_default_instance_;
class CompleteGroupRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompleteGroupRequest> _instance;
} _CompleteGroupRequest_default_instance_;
class CompleteGroupResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompleteGroupResponse> _instance;
} _CompleteGroupResponse_default_instance_;
class CompleteInstanceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompleteInstanceRequest> _instance;
} _CompleteInstanceRequest_default_instance_;
class CompleteInstanceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompleteInstanceResponse> _instance;
} _CompleteInstanceResponse_default_instance_;
class GetStepSequenceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStepSequenceRequest> _instance;
} _GetStepSequenceRequest_default_instance_;
class StepSequenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StepSequence> _instance;
} _StepSequence_default_instance_;
class GetStepSequenceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStepSequenceResponse> _instance;
} _GetStepSequenceResponse_default_instance_;
}  // namespace tensorflow
static void InitDefaultsscc_info_CleanupAllRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_CleanupAllRequest_default_instance_;
    new (ptr) ::tensorflow::CleanupAllRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::CleanupAllRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CleanupAllRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CleanupAllRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto}, {}};

static void InitDefaultsscc_info_CleanupAllResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_CleanupAllResponse_default_instance_;
    new (ptr) ::tensorflow::CleanupAllResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::CleanupAllResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CleanupAllResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CleanupAllResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto}, {}};

static void InitDefaultsscc_info_CleanupGraphRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_CleanupGraphRequest_default_instance_;
    new (ptr) ::tensorflow::CleanupGraphRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::CleanupGraphRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CleanupGraphRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CleanupGraphRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto}, {}};

static void InitDefaultsscc_info_CleanupGraphResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_CleanupGraphResponse_default_instance_;
    new (ptr) ::tensorflow::CleanupGraphResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::CleanupGraphResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CleanupGraphResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CleanupGraphResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto}, {}};

static void InitDefaultsscc_info_CompleteGroupRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_CompleteGroupRequest_default_instance_;
    new (ptr) ::tensorflow::CompleteGroupRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::CompleteGroupRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CompleteGroupRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CompleteGroupRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto}, {}};

static void InitDefaultsscc_info_CompleteGroupResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_CompleteGroupResponse_default_instance_;
    new (ptr) ::tensorflow::CompleteGroupResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::CompleteGroupResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CompleteGroupResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CompleteGroupResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto}, {}};

static void InitDefaultsscc_info_CompleteInstanceRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_CompleteInstanceRequest_default_instance_;
    new (ptr) ::tensorflow::CompleteInstanceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::CompleteInstanceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CompleteInstanceRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CompleteInstanceRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto}, {
      &scc_info_TensorShapeProto_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto.base,}};

static void InitDefaultsscc_info_CompleteInstanceResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_CompleteInstanceResponse_default_instance_;
    new (ptr) ::tensorflow::CompleteInstanceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::CompleteInstanceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CompleteInstanceResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CompleteInstanceResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto}, {}};

static void InitDefaultsscc_info_CreateWorkerSessionRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_CreateWorkerSessionRequest_default_instance_;
    new (ptr) ::tensorflow::CreateWorkerSessionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::CreateWorkerSessionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CreateWorkerSessionRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_CreateWorkerSessionRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto}, {
      &scc_info_ServerDef_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto.base,
      &scc_info_DeviceAttributes_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto.base,}};

static void InitDefaultsscc_info_CreateWorkerSessionResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_CreateWorkerSessionResponse_default_instance_;
    new (ptr) ::tensorflow::CreateWorkerSessionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::CreateWorkerSessionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateWorkerSessionResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CreateWorkerSessionResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto}, {}};

static void InitDefaultsscc_info_DeleteWorkerSessionRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_DeleteWorkerSessionRequest_default_instance_;
    new (ptr) ::tensorflow::DeleteWorkerSessionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::DeleteWorkerSessionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteWorkerSessionRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeleteWorkerSessionRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto}, {}};

static void InitDefaultsscc_info_DeleteWorkerSessionResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_DeleteWorkerSessionResponse_default_instance_;
    new (ptr) ::tensorflow::DeleteWorkerSessionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::DeleteWorkerSessionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteWorkerSessionResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeleteWorkerSessionResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto}, {}};

static void InitDefaultsscc_info_DeregisterGraphRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_DeregisterGraphRequest_default_instance_;
    new (ptr) ::tensorflow::DeregisterGraphRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::DeregisterGraphRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeregisterGraphRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeregisterGraphRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto}, {}};

static void InitDefaultsscc_info_DeregisterGraphResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_DeregisterGraphResponse_default_instance_;
    new (ptr) ::tensorflow::DeregisterGraphResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::DeregisterGraphResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeregisterGraphResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeregisterGraphResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto}, {}};

static void InitDefaultsscc_info_ExecutorOpts_tensorflow_2fcore_2fprotobuf_2fworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_ExecutorOpts_default_instance_;
    new (ptr) ::tensorflow::ExecutorOpts();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::ExecutorOpts::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExecutorOpts_tensorflow_2fcore_2fprotobuf_2fworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ExecutorOpts_tensorflow_2fcore_2fprotobuf_2fworker_2eproto}, {}};

static void InitDefaultsscc_info_GetStatusRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_GetStatusRequest_default_instance_;
    new (ptr) ::tensorflow::GetStatusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::GetStatusRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetStatusRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetStatusRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto}, {}};

static void InitDefaultsscc_info_GetStatusResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_GetStatusResponse_default_instance_;
    new (ptr) ::tensorflow::GetStatusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::GetStatusResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetStatusResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetStatusResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto}, {
      &scc_info_DeviceAttributes_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto.base,}};

static void InitDefaultsscc_info_GetStepSequenceRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_GetStepSequenceRequest_default_instance_;
    new (ptr) ::tensorflow::GetStepSequenceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::GetStepSequenceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetStepSequenceRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetStepSequenceRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto}, {}};

static void InitDefaultsscc_info_GetStepSequenceResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_GetStepSequenceResponse_default_instance_;
    new (ptr) ::tensorflow::GetStepSequenceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::GetStepSequenceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetStepSequenceResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetStepSequenceResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto}, {
      &scc_info_StepSequence_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base,}};

static void InitDefaultsscc_info_LabeledStepStats_tensorflow_2fcore_2fprotobuf_2fworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_LabeledStepStats_default_instance_;
    new (ptr) ::tensorflow::LabeledStepStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::LabeledStepStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LabeledStepStats_tensorflow_2fcore_2fprotobuf_2fworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_LabeledStepStats_tensorflow_2fcore_2fprotobuf_2fworker_2eproto}, {
      &scc_info_StepStats_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto.base,}};

static void InitDefaultsscc_info_LoggingRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_LoggingRequest_default_instance_;
    new (ptr) ::tensorflow::LoggingRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::LoggingRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoggingRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LoggingRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto}, {}};

static void InitDefaultsscc_info_LoggingResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_LoggingResponse_default_instance_;
    new (ptr) ::tensorflow::LoggingResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::LoggingResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoggingResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_LoggingResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto}, {
      &scc_info_LabeledStepStats_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base,}};

static void InitDefaultsscc_info_MarkRecvFinishedRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_MarkRecvFinishedRequest_default_instance_;
    new (ptr) ::tensorflow::MarkRecvFinishedRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::MarkRecvFinishedRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarkRecvFinishedRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MarkRecvFinishedRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto}, {}};

static void InitDefaultsscc_info_MarkRecvFinishedResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_MarkRecvFinishedResponse_default_instance_;
    new (ptr) ::tensorflow::MarkRecvFinishedResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::MarkRecvFinishedResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarkRecvFinishedResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MarkRecvFinishedResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto}, {}};

static void InitDefaultsscc_info_RecvBufRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_RecvBufRequest_default_instance_;
    new (ptr) ::tensorflow::RecvBufRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::RecvBufRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RecvBufRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RecvBufRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto}, {
      &scc_info_DeviceLocality_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto.base,
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_RecvBufResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_RecvBufResponse_default_instance_;
    new (ptr) ::tensorflow::RecvBufResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::RecvBufResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RecvBufResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RecvBufResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_RecvTensorRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_RecvTensorRequest_default_instance_;
    new (ptr) ::tensorflow::RecvTensorRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::RecvTensorRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RecvTensorRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RecvTensorRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto}, {
      &scc_info_DeviceLocality_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto.base,
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_RecvTensorResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_RecvTensorResponse_default_instance_;
    new (ptr) ::tensorflow::RecvTensorResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::RecvTensorResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RecvTensorResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RecvTensorResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto}, {
      &scc_info_TensorProto_tensorflow_2fcore_2fframework_2ftensor_2eproto.base,
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_RegisterGraphRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_RegisterGraphRequest_default_instance_;
    new (ptr) ::tensorflow::RegisterGraphRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::RegisterGraphRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_RegisterGraphRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_RegisterGraphRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto}, {
      &scc_info_GraphDef_tensorflow_2fcore_2fframework_2fgraph_2eproto.base,
      &scc_info_GraphOptions_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto.base,
      &scc_info_DebugOptions_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto.base,
      &scc_info_ConfigProto_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto.base,}};

static void InitDefaultsscc_info_RegisterGraphResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_RegisterGraphResponse_default_instance_;
    new (ptr) ::tensorflow::RegisterGraphResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::RegisterGraphResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterGraphResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RegisterGraphResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto}, {}};

static void InitDefaultsscc_info_RunGraphRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_RunGraphRequest_default_instance_;
    new (ptr) ::tensorflow::RunGraphRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::RunGraphRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RunGraphRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RunGraphRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto}, {
      &scc_info_ExecutorOpts_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base,
      &scc_info_NamedTensorProto_tensorflow_2fcore_2fprotobuf_2fnamed_5ftensor_2eproto.base,}};

static void InitDefaultsscc_info_RunGraphResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_RunGraphResponse_default_instance_;
    new (ptr) ::tensorflow::RunGraphResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::RunGraphResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_RunGraphResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_RunGraphResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto}, {
      &scc_info_NamedTensorProto_tensorflow_2fcore_2fprotobuf_2fnamed_5ftensor_2eproto.base,
      &scc_info_StepStats_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto.base,
      &scc_info_CostGraphDef_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto.base,
      &scc_info_GraphDef_tensorflow_2fcore_2fframework_2fgraph_2eproto.base,}};

static void InitDefaultsscc_info_StepSequence_tensorflow_2fcore_2fprotobuf_2fworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_StepSequence_default_instance_;
    new (ptr) ::tensorflow::StepSequence();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::StepSequence::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StepSequence_tensorflow_2fcore_2fprotobuf_2fworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StepSequence_tensorflow_2fcore_2fprotobuf_2fworker_2eproto}, {}};

static void InitDefaultsscc_info_TraceOpts_tensorflow_2fcore_2fprotobuf_2fworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_TraceOpts_default_instance_;
    new (ptr) ::tensorflow::TraceOpts();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::TraceOpts::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TraceOpts_tensorflow_2fcore_2fprotobuf_2fworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TraceOpts_tensorflow_2fcore_2fprotobuf_2fworker_2eproto}, {}};

static void InitDefaultsscc_info_TracingRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_TracingRequest_default_instance_;
    new (ptr) ::tensorflow::TracingRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::TracingRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TracingRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TracingRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto}, {
      &scc_info_TraceOpts_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base,}};

static void InitDefaultsscc_info_TracingResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_TracingResponse_default_instance_;
    new (ptr) ::tensorflow::TracingResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::TracingResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TracingResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TracingResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_2fcore_2fprotobuf_2fworker_2eproto[36];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fworker_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fworker_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GetStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GetStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GetStatusResponse, device_attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CreateWorkerSessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CreateWorkerSessionRequest, session_handle_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CreateWorkerSessionRequest, server_def_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CreateWorkerSessionRequest, isolate_session_state_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CreateWorkerSessionRequest, cluster_device_attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CreateWorkerSessionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeleteWorkerSessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeleteWorkerSessionRequest, session_handle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeleteWorkerSessionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RegisterGraphRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RegisterGraphRequest, session_handle_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RegisterGraphRequest, create_worker_session_called_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RegisterGraphRequest, graph_def_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RegisterGraphRequest, has_control_flow_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RegisterGraphRequest, graph_options_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RegisterGraphRequest, debug_options_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RegisterGraphRequest, collective_graph_key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RegisterGraphRequest, config_proto_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RegisterGraphResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RegisterGraphResponse, graph_handle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeregisterGraphRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeregisterGraphRequest, session_handle_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeregisterGraphRequest, create_worker_session_called_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeregisterGraphRequest, graph_handle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeregisterGraphResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CleanupAllRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CleanupAllRequest, container_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CleanupAllResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ExecutorOpts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ExecutorOpts, record_costs_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ExecutorOpts, record_timeline_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ExecutorOpts, record_partition_graphs_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ExecutorOpts, report_tensor_allocations_upon_oom_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunGraphRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunGraphRequest, session_handle_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunGraphRequest, create_worker_session_called_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunGraphRequest, graph_handle_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunGraphRequest, step_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunGraphRequest, exec_opts_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunGraphRequest, send_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunGraphRequest, recv_key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunGraphRequest, is_partial_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunGraphRequest, is_last_partial_run_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunGraphRequest, store_errors_in_response_body_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunGraphRequest, request_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunGraphResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunGraphResponse, recv_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunGraphResponse, step_stats_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunGraphResponse, cost_graph_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunGraphResponse, partition_graph_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunGraphResponse, status_code_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunGraphResponse, status_error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CleanupGraphRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CleanupGraphRequest, step_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CleanupGraphResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RecvTensorRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RecvTensorRequest, step_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RecvTensorRequest, rendezvous_key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RecvTensorRequest, dma_ok_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RecvTensorRequest, client_locality_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RecvTensorRequest, server_locality_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RecvTensorRequest, transport_options_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RecvTensorRequest, request_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RecvTensorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RecvTensorResponse, tensor_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RecvTensorResponse, is_dead_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RecvTensorResponse, send_start_micros_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RecvTensorResponse, transport_options_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RecvTensorResponse, require_ack_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MarkRecvFinishedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MarkRecvFinishedRequest, request_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MarkRecvFinishedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::LoggingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::LoggingRequest, enable_rpc_logging_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::LoggingRequest, disable_rpc_logging_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::LoggingRequest, clear_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::LoggingRequest, fetch_step_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::LabeledStepStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::LabeledStepStats, step_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::LabeledStepStats, step_stats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::LoggingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::LoggingResponse, step_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TraceOpts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TraceOpts, duration_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TraceOpts, use_step_profiler_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TraceOpts, use_kernel_profiler_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TraceOpts, use_extended_profiler_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TraceOpts, use_gpu_profiler_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TraceOpts, use_sample_profiler_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TracingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TracingRequest, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TracingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RecvBufRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RecvBufRequest, step_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RecvBufRequest, buf_rendezvous_key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RecvBufRequest, num_bytes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RecvBufRequest, buf_ptr_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RecvBufRequest, client_locality_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RecvBufRequest, server_locality_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RecvBufRequest, transport_options_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RecvBufRequest, src_device_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RecvBufRequest, dst_device_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RecvBufRequest, request_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RecvBufRequest, src_incarnation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RecvBufResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RecvBufResponse, buf_ptr_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RecvBufResponse, num_bytes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RecvBufResponse, is_dead_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RecvBufResponse, transport_options_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RecvBufResponse, send_start_micros_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RecvBufResponse, require_ack_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CompleteGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CompleteGroupRequest, group_key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CompleteGroupRequest, group_size_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CompleteGroupRequest, device_type_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CompleteGroupRequest, device_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CompleteGroupRequest, collective_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CompleteGroupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CompleteGroupResponse, group_key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CompleteGroupResponse, group_size_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CompleteGroupResponse, device_type_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CompleteGroupResponse, num_tasks_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CompleteGroupResponse, device_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CompleteGroupResponse, task_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CompleteGroupResponse, communicator_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CompleteInstanceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CompleteInstanceRequest, name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CompleteInstanceRequest, type_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CompleteInstanceRequest, data_type_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CompleteInstanceRequest, shape_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CompleteInstanceRequest, group_key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CompleteInstanceRequest, group_size_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CompleteInstanceRequest, instance_key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CompleteInstanceRequest, device_type_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CompleteInstanceRequest, subdiv_offset_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CompleteInstanceRequest, device_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CompleteInstanceRequest, is_source_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CompleteInstanceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CompleteInstanceResponse, instance_key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CompleteInstanceResponse, source_rank_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GetStepSequenceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GetStepSequenceRequest, graph_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::StepSequence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::StepSequence, graph_key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::StepSequence, next_step_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GetStepSequenceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GetStepSequenceResponse, step_sequence_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::GetStatusRequest)},
  { 5, -1, sizeof(::tensorflow::GetStatusResponse)},
  { 11, -1, sizeof(::tensorflow::CreateWorkerSessionRequest)},
  { 20, -1, sizeof(::tensorflow::CreateWorkerSessionResponse)},
  { 25, -1, sizeof(::tensorflow::DeleteWorkerSessionRequest)},
  { 31, -1, sizeof(::tensorflow::DeleteWorkerSessionResponse)},
  { 36, -1, sizeof(::tensorflow::RegisterGraphRequest)},
  { 49, -1, sizeof(::tensorflow::RegisterGraphResponse)},
  { 55, -1, sizeof(::tensorflow::DeregisterGraphRequest)},
  { 63, -1, sizeof(::tensorflow::DeregisterGraphResponse)},
  { 68, -1, sizeof(::tensorflow::CleanupAllRequest)},
  { 74, -1, sizeof(::tensorflow::CleanupAllResponse)},
  { 79, -1, sizeof(::tensorflow::ExecutorOpts)},
  { 88, -1, sizeof(::tensorflow::RunGraphRequest)},
  { 104, -1, sizeof(::tensorflow::RunGraphResponse)},
  { 115, -1, sizeof(::tensorflow::CleanupGraphRequest)},
  { 121, -1, sizeof(::tensorflow::CleanupGraphResponse)},
  { 126, -1, sizeof(::tensorflow::RecvTensorRequest)},
  { 138, -1, sizeof(::tensorflow::RecvTensorResponse)},
  { 148, -1, sizeof(::tensorflow::MarkRecvFinishedRequest)},
  { 154, -1, sizeof(::tensorflow::MarkRecvFinishedResponse)},
  { 159, -1, sizeof(::tensorflow::LoggingRequest)},
  { 168, -1, sizeof(::tensorflow::LabeledStepStats)},
  { 175, -1, sizeof(::tensorflow::LoggingResponse)},
  { 181, -1, sizeof(::tensorflow::TraceOpts)},
  { 192, -1, sizeof(::tensorflow::TracingRequest)},
  { 198, -1, sizeof(::tensorflow::TracingResponse)},
  { 203, -1, sizeof(::tensorflow::RecvBufRequest)},
  { 219, -1, sizeof(::tensorflow::RecvBufResponse)},
  { 230, -1, sizeof(::tensorflow::CompleteGroupRequest)},
  { 240, -1, sizeof(::tensorflow::CompleteGroupResponse)},
  { 252, -1, sizeof(::tensorflow::CompleteInstanceRequest)},
  { 268, -1, sizeof(::tensorflow::CompleteInstanceResponse)},
  { 275, -1, sizeof(::tensorflow::GetStepSequenceRequest)},
  { 281, -1, sizeof(::tensorflow::StepSequence)},
  { 288, -1, sizeof(::tensorflow::GetStepSequenceResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_GetStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_GetStatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_CreateWorkerSessionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_CreateWorkerSessionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_DeleteWorkerSessionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_DeleteWorkerSessionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_RegisterGraphRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_RegisterGraphResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_DeregisterGraphRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_DeregisterGraphResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_CleanupAllRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_CleanupAllResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_ExecutorOpts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_RunGraphRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_RunGraphResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_CleanupGraphRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_CleanupGraphResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_RecvTensorRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_RecvTensorResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_MarkRecvFinishedRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_MarkRecvFinishedResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_LoggingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_LabeledStepStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_LoggingResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_TraceOpts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_TracingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_TracingResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_RecvBufRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_RecvBufResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_CompleteGroupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_CompleteGroupResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_CompleteInstanceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_CompleteInstanceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_GetStepSequenceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_StepSequence_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_GetStepSequenceResponse_default_instance_),
};

const char descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fworker_2eproto[] =
  "\n%tensorflow/core/protobuf/worker.proto\022"
  "\ntensorflow\032\031google/protobuf/any.proto\032*"
  "tensorflow/core/framework/cost_graph.pro"
  "to\0321tensorflow/core/framework/device_att"
  "ributes.proto\032%tensorflow/core/framework"
  "/graph.proto\032*tensorflow/core/framework/"
  "step_stats.proto\032&tensorflow/core/framew"
  "ork/tensor.proto\032,tensorflow/core/framew"
  "ork/tensor_shape.proto\032%tensorflow/core/"
  "framework/types.proto\032%tensorflow/core/p"
  "rotobuf/config.proto\032$tensorflow/core/pr"
  "otobuf/debug.proto\032*tensorflow/core/prot"
  "obuf/error_codes.proto\032+tensorflow/core/"
  "protobuf/named_tensor.proto\0320tensorflow/"
  "core/protobuf/tensorflow_server.proto\"\022\n"
  "\020GetStatusRequest\"L\n\021GetStatusResponse\0227"
  "\n\021device_attributes\030\001 \003(\0132\034.tensorflow.D"
  "eviceAttributes\"\277\001\n\032CreateWorkerSessionR"
  "equest\022\026\n\016session_handle\030\001 \001(\t\022)\n\nserver"
  "_def\030\002 \001(\0132\025.tensorflow.ServerDef\022\035\n\025iso"
  "late_session_state\030\003 \001(\010\022\?\n\031cluster_devi"
  "ce_attributes\030\004 \003(\0132\034.tensorflow.DeviceA"
  "ttributes\"\035\n\033CreateWorkerSessionResponse"
  "\"4\n\032DeleteWorkerSessionRequest\022\026\n\016sessio"
  "n_handle\030\001 \001(\t\"\035\n\033DeleteWorkerSessionRes"
  "ponse\"\312\002\n\024RegisterGraphRequest\022\026\n\016sessio"
  "n_handle\030\001 \001(\t\022$\n\034create_worker_session_"
  "called\030\006 \001(\010\022\'\n\tgraph_def\030\002 \001(\0132\024.tensor"
  "flow.GraphDef\022\034\n\020has_control_flow\030\003 \001(\010B"
  "\002\030\001\022/\n\rgraph_options\030\004 \001(\0132\030.tensorflow."
  "GraphOptions\022/\n\rdebug_options\030\005 \001(\0132\030.te"
  "nsorflow.DebugOptions\022\034\n\024collective_grap"
  "h_key\030\007 \001(\003\022-\n\014config_proto\030\010 \001(\0132\027.tens"
  "orflow.ConfigProto\"-\n\025RegisterGraphRespo"
  "nse\022\024\n\014graph_handle\030\001 \001(\t\"l\n\026DeregisterG"
  "raphRequest\022\026\n\016session_handle\030\002 \001(\t\022$\n\034c"
  "reate_worker_session_called\030\003 \001(\010\022\024\n\014gra"
  "ph_handle\030\001 \001(\t\"\031\n\027DeregisterGraphRespon"
  "se\"&\n\021CleanupAllRequest\022\021\n\tcontainer\030\001 \003"
  "(\t\"\024\n\022CleanupAllResponse\"\212\001\n\014ExecutorOpt"
  "s\022\024\n\014record_costs\030\001 \001(\010\022\027\n\017record_timeli"
  "ne\030\003 \001(\010\022\037\n\027record_partition_graphs\030\004 \001("
  "\010\022*\n\"report_tensor_allocations_upon_oom\030"
  "\005 \001(\010\"\315\002\n\017RunGraphRequest\022\026\n\016session_han"
  "dle\030\010 \001(\t\022$\n\034create_worker_session_calle"
  "d\030\n \001(\010\022\024\n\014graph_handle\030\001 \001(\t\022\017\n\007step_id"
  "\030\002 \001(\003\022+\n\texec_opts\030\005 \001(\0132\030.tensorflow.E"
  "xecutorOpts\022*\n\004send\030\003 \003(\0132\034.tensorflow.N"
  "amedTensorProto\022\020\n\010recv_key\030\004 \003(\t\022\022\n\nis_"
  "partial\030\006 \001(\010\022\033\n\023is_last_partial_run\030\007 \001"
  "(\010\022%\n\035store_errors_in_response_body\030\t \001("
  "\010\022\022\n\nrequest_id\030\013 \001(\003\"\221\002\n\020RunGraphRespon"
  "se\022*\n\004recv\030\001 \003(\0132\034.tensorflow.NamedTenso"
  "rProto\022)\n\nstep_stats\030\002 \001(\0132\025.tensorflow."
  "StepStats\022,\n\ncost_graph\030\003 \001(\0132\030.tensorfl"
  "ow.CostGraphDef\022-\n\017partition_graph\030\004 \003(\013"
  "2\024.tensorflow.GraphDef\022+\n\013status_code\030\005 "
  "\001(\0162\026.tensorflow.error.Code\022\034\n\024status_er"
  "ror_message\030\006 \001(\t\"&\n\023CleanupGraphRequest"
  "\022\017\n\007step_id\030\001 \001(\003\"\026\n\024CleanupGraphRespons"
  "e\"\373\001\n\021RecvTensorRequest\022\017\n\007step_id\030\001 \001(\003"
  "\022\026\n\016rendezvous_key\030\002 \001(\t\022\016\n\006dma_ok\030\003 \001(\010"
  "\0223\n\017client_locality\030\004 \001(\0132\032.tensorflow.D"
  "eviceLocality\0223\n\017server_locality\030\005 \001(\0132\032"
  ".tensorflow.DeviceLocality\022/\n\021transport_"
  "options\030\006 \001(\0132\024.google.protobuf.Any\022\022\n\nr"
  "equest_id\030\007 \001(\003\"\257\001\n\022RecvTensorResponse\022\'"
  "\n\006tensor\030\001 \001(\0132\027.tensorflow.TensorProto\022"
  "\017\n\007is_dead\030\002 \001(\010\022\031\n\021send_start_micros\030\003 "
  "\001(\003\022/\n\021transport_options\030\004 \001(\0132\024.google."
  "protobuf.Any\022\023\n\013require_ack\030\005 \001(\010\"-\n\027Mar"
  "kRecvFinishedRequest\022\022\n\nrequest_id\030\001 \001(\003"
  "\"\032\n\030MarkRecvFinishedResponse\"o\n\016LoggingR"
  "equest\022\032\n\022enable_rpc_logging\030\001 \001(\010\022\033\n\023di"
  "sable_rpc_logging\030\004 \001(\010\022\r\n\005clear\030\002 \001(\010\022\025"
  "\n\rfetch_step_id\030\003 \003(\003\"N\n\020LabeledStepStat"
  "s\022\017\n\007step_id\030\001 \001(\003\022)\n\nstep_stats\030\002 \001(\0132\025"
  ".tensorflow.StepStats\"=\n\017LoggingResponse"
  "\022*\n\004step\030\001 \003(\0132\034.tensorflow.LabeledStepS"
  "tats\"\253\001\n\tTraceOpts\022\020\n\010duration\030\001 \001(\001\022\031\n\021"
  "use_step_profiler\030\002 \001(\010\022\033\n\023use_kernel_pr"
  "ofiler\030\003 \001(\010\022\035\n\025use_extended_profiler\030\004 "
  "\001(\010\022\030\n\020use_gpu_profiler\030\005 \001(\010\022\033\n\023use_sam"
  "ple_profiler\030\006 \001(\010\"8\n\016TracingRequest\022&\n\007"
  "options\030\001 \001(\0132\025.tensorflow.TraceOpts\"\021\n\017"
  "TracingResponse\"\321\002\n\016RecvBufRequest\022\017\n\007st"
  "ep_id\030\001 \001(\003\022\032\n\022buf_rendezvous_key\030\002 \001(\t\022"
  "\021\n\tnum_bytes\030\003 \001(\003\022\017\n\007buf_ptr\030\004 \001(\006\0223\n\017c"
  "lient_locality\030\005 \001(\0132\032.tensorflow.Device"
  "Locality\0223\n\017server_locality\030\006 \001(\0132\032.tens"
  "orflow.DeviceLocality\022/\n\021transport_optio"
  "ns\030\007 \001(\0132\024.google.protobuf.Any\022\022\n\nsrc_de"
  "vice\030\010 \001(\t\022\022\n\ndst_device\030\t \001(\t\022\022\n\nreques"
  "t_id\030\n \001(\003\022\027\n\017src_incarnation\030\013 \001(\004\"\247\001\n\017"
  "RecvBufResponse\022\017\n\007buf_ptr\030\001 \001(\006\022\021\n\tnum_"
  "bytes\030\002 \001(\003\022\017\n\007is_dead\030\003 \001(\010\022/\n\021transpor"
  "t_options\030\004 \001(\0132\024.google.protobuf.Any\022\031\n"
  "\021send_start_micros\030\005 \001(\003\022\023\n\013require_ack\030"
  "\006 \001(\010\"\200\001\n\024CompleteGroupRequest\022\021\n\tgroup_"
  "key\030\001 \001(\005\022\022\n\ngroup_size\030\002 \001(\005\022\023\n\013device_"
  "type\030\003 \001(\t\022\023\n\013device_name\030\004 \003(\t\022\027\n\017colle"
  "ctive_type\030\005 \001(\005\"\250\001\n\025CompleteGroupRespon"
  "se\022\021\n\tgroup_key\030\001 \001(\005\022\022\n\ngroup_size\030\002 \001("
  "\005\022\023\n\013device_type\030\003 \001(\t\022\021\n\tnum_tasks\030\004 \001("
  "\005\022\023\n\013device_name\030\005 \003(\t\022\021\n\ttask_name\030\006 \003("
  "\t\022\030\n\020communicator_key\030\007 \001(\014\"\227\002\n\027Complete"
  "InstanceRequest\022\014\n\004name\030\001 \001(\t\022\014\n\004type\030\002 "
  "\001(\005\022\'\n\tdata_type\030\003 \001(\0162\024.tensorflow.Data"
  "Type\022+\n\005shape\030\004 \001(\0132\034.tensorflow.TensorS"
  "hapeProto\022\021\n\tgroup_key\030\005 \001(\005\022\022\n\ngroup_si"
  "ze\030\006 \001(\005\022\024\n\014instance_key\030\007 \001(\005\022\023\n\013device"
  "_type\030\010 \001(\t\022\025\n\rsubdiv_offset\030\t \003(\005\022\016\n\006de"
  "vice\030\n \001(\t\022\021\n\tis_source\030\013 \001(\010\"K\n\030Complet"
  "eInstanceResponse\022\024\n\014instance_key\030\001 \001(\005\022"
  "\023\n\013source_rank\030\002 \001(\005J\004\010\003\020\004\"+\n\026GetStepSeq"
  "uenceRequest\022\021\n\tgraph_key\030\001 \003(\003\"7\n\014StepS"
  "equence\022\021\n\tgraph_key\030\001 \001(\003\022\024\n\014next_step_"
  "id\030\002 \001(\003\"J\n\027GetStepSequenceResponse\022/\n\rs"
  "tep_sequence\030\001 \003(\0132\030.tensorflow.StepSequ"
  "enceBy\n\032org.tensorflow.distruntimeB\014Work"
  "erProtosP\001ZHgithub.com/tensorflow/tensor"
  "flow/tensorflow/go/core/core_protos_go_p"
  "roto\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_2fcore_2fprotobuf_2fworker_2eproto_deps[13] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2fgraph_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftypes_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fprotobuf_2ferror_5fcodes_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fprotobuf_2fnamed_5ftensor_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_2fcore_2fprotobuf_2fworker_2eproto_sccs[36] = {
  &scc_info_CleanupAllRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base,
  &scc_info_CleanupAllResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base,
  &scc_info_CleanupGraphRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base,
  &scc_info_CleanupGraphResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base,
  &scc_info_CompleteGroupRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base,
  &scc_info_CompleteGroupResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base,
  &scc_info_CompleteInstanceRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base,
  &scc_info_CompleteInstanceResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base,
  &scc_info_CreateWorkerSessionRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base,
  &scc_info_CreateWorkerSessionResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base,
  &scc_info_DeleteWorkerSessionRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base,
  &scc_info_DeleteWorkerSessionResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base,
  &scc_info_DeregisterGraphRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base,
  &scc_info_DeregisterGraphResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base,
  &scc_info_ExecutorOpts_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base,
  &scc_info_GetStatusRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base,
  &scc_info_GetStatusResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base,
  &scc_info_GetStepSequenceRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base,
  &scc_info_GetStepSequenceResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base,
  &scc_info_LabeledStepStats_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base,
  &scc_info_LoggingRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base,
  &scc_info_LoggingResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base,
  &scc_info_MarkRecvFinishedRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base,
  &scc_info_MarkRecvFinishedResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base,
  &scc_info_RecvBufRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base,
  &scc_info_RecvBufResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base,
  &scc_info_RecvTensorRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base,
  &scc_info_RecvTensorResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base,
  &scc_info_RegisterGraphRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base,
  &scc_info_RegisterGraphResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base,
  &scc_info_RunGraphRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base,
  &scc_info_RunGraphResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base,
  &scc_info_StepSequence_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base,
  &scc_info_TraceOpts_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base,
  &scc_info_TracingRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base,
  &scc_info_TracingResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_2fcore_2fprotobuf_2fworker_2eproto_once;
static bool descriptor_table_tensorflow_2fcore_2fprotobuf_2fworker_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2fworker_2eproto = {
  &descriptor_table_tensorflow_2fcore_2fprotobuf_2fworker_2eproto_initialized, descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fworker_2eproto, "tensorflow/core/protobuf/worker.proto", 4895,
  &descriptor_table_tensorflow_2fcore_2fprotobuf_2fworker_2eproto_once, descriptor_table_tensorflow_2fcore_2fprotobuf_2fworker_2eproto_sccs, descriptor_table_tensorflow_2fcore_2fprotobuf_2fworker_2eproto_deps, 36, 13,
  schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fprotobuf_2fworker_2eproto::offsets,
  file_level_metadata_tensorflow_2fcore_2fprotobuf_2fworker_2eproto, 36, file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fworker_2eproto, file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fworker_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_2fcore_2fprotobuf_2fworker_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_2fcore_2fprotobuf_2fworker_2eproto), true);
namespace tensorflow {

// ===================================================================

void GetStatusRequest::InitAsDefaultInstance() {
}
class GetStatusRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetStatusRequest::GetStatusRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GetStatusRequest)
}
GetStatusRequest::GetStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GetStatusRequest)
}
GetStatusRequest::GetStatusRequest(const GetStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.GetStatusRequest)
}

void GetStatusRequest::SharedCtor() {
}

GetStatusRequest::~GetStatusRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.GetStatusRequest)
  SharedDtor();
}

void GetStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void GetStatusRequest::ArenaDtor(void* object) {
  GetStatusRequest* _this = reinterpret_cast< GetStatusRequest* >(object);
  (void)_this;
}
void GetStatusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStatusRequest& GetStatusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStatusRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  return *internal_default_instance();
}


void GetStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GetStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetStatusRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GetStatusRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GetStatusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GetStatusRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetStatusRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GetStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.GetStatusRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStatusRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GetStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GetStatusRequest)
  return target;
}

size_t GetStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GetStatusRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GetStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GetStatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GetStatusRequest)
    MergeFrom(*source);
  }
}

void GetStatusRequest::MergeFrom(const GetStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GetStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetStatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GetStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStatusRequest::CopyFrom(const GetStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GetStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStatusRequest::IsInitialized() const {
  return true;
}

void GetStatusRequest::Swap(GetStatusRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetStatusRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void GetStatusRequest::UnsafeArenaSwap(GetStatusRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetStatusRequest::InternalSwap(GetStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetStatusResponse::InitAsDefaultInstance() {
}
class GetStatusResponse::HasBitSetters {
 public:
};

void GetStatusResponse::clear_device_attributes() {
  device_attributes_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetStatusResponse::kDeviceAttributesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetStatusResponse::GetStatusResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GetStatusResponse)
}
GetStatusResponse::GetStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  device_attributes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GetStatusResponse)
}
GetStatusResponse::GetStatusResponse(const GetStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      device_attributes_(from.device_attributes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.GetStatusResponse)
}

void GetStatusResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetStatusResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
}

GetStatusResponse::~GetStatusResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.GetStatusResponse)
  SharedDtor();
}

void GetStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void GetStatusResponse::ArenaDtor(void* object) {
  GetStatusResponse* _this = reinterpret_cast< GetStatusResponse* >(object);
  (void)_this;
}
void GetStatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStatusResponse& GetStatusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStatusResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  return *internal_default_instance();
}


void GetStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GetStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_attributes_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tensorflow.DeviceAttributes device_attributes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_device_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetStatusResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GetStatusResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.DeviceAttributes device_attributes = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_device_attributes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GetStatusResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GetStatusResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetStatusResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GetStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.DeviceAttributes device_attributes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->device_attributes_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->device_attributes(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.GetStatusResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStatusResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GetStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.DeviceAttributes device_attributes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->device_attributes_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->device_attributes(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GetStatusResponse)
  return target;
}

size_t GetStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GetStatusResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.DeviceAttributes device_attributes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->device_attributes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->device_attributes(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GetStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GetStatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GetStatusResponse)
    MergeFrom(*source);
  }
}

void GetStatusResponse::MergeFrom(const GetStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GetStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  device_attributes_.MergeFrom(from.device_attributes_);
}

void GetStatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GetStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStatusResponse::CopyFrom(const GetStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GetStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStatusResponse::IsInitialized() const {
  return true;
}

void GetStatusResponse::Swap(GetStatusResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetStatusResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void GetStatusResponse::UnsafeArenaSwap(GetStatusResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetStatusResponse::InternalSwap(GetStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&device_attributes_)->InternalSwap(CastToBase(&other->device_attributes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateWorkerSessionRequest::InitAsDefaultInstance() {
  ::tensorflow::_CreateWorkerSessionRequest_default_instance_._instance.get_mutable()->server_def_ = const_cast< ::tensorflow::ServerDef*>(
      ::tensorflow::ServerDef::internal_default_instance());
}
class CreateWorkerSessionRequest::HasBitSetters {
 public:
  static const ::tensorflow::ServerDef& server_def(const CreateWorkerSessionRequest* msg);
};

const ::tensorflow::ServerDef&
CreateWorkerSessionRequest::HasBitSetters::server_def(const CreateWorkerSessionRequest* msg) {
  return *msg->server_def_;
}
void CreateWorkerSessionRequest::unsafe_arena_set_allocated_server_def(
    ::tensorflow::ServerDef* server_def) {
  if (GetArenaNoVirtual() == nullptr) {
    delete server_def_;
  }
  server_def_ = server_def;
  if (server_def) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.CreateWorkerSessionRequest.server_def)
}
void CreateWorkerSessionRequest::clear_server_def() {
  if (GetArenaNoVirtual() == nullptr && server_def_ != nullptr) {
    delete server_def_;
  }
  server_def_ = nullptr;
}
void CreateWorkerSessionRequest::clear_cluster_device_attributes() {
  cluster_device_attributes_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateWorkerSessionRequest::kSessionHandleFieldNumber;
const int CreateWorkerSessionRequest::kServerDefFieldNumber;
const int CreateWorkerSessionRequest::kIsolateSessionStateFieldNumber;
const int CreateWorkerSessionRequest::kClusterDeviceAttributesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateWorkerSessionRequest::CreateWorkerSessionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CreateWorkerSessionRequest)
}
CreateWorkerSessionRequest::CreateWorkerSessionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  cluster_device_attributes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CreateWorkerSessionRequest)
}
CreateWorkerSessionRequest::CreateWorkerSessionRequest(const CreateWorkerSessionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      cluster_device_attributes_(from.cluster_device_attributes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.session_handle().size() > 0) {
    session_handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_handle(),
      GetArenaNoVirtual());
  }
  if (from.has_server_def()) {
    server_def_ = new ::tensorflow::ServerDef(*from.server_def_);
  } else {
    server_def_ = nullptr;
  }
  isolate_session_state_ = from.isolate_session_state_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.CreateWorkerSessionRequest)
}

void CreateWorkerSessionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateWorkerSessionRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  session_handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_def_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isolate_session_state_) -
      reinterpret_cast<char*>(&server_def_)) + sizeof(isolate_session_state_));
}

CreateWorkerSessionRequest::~CreateWorkerSessionRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.CreateWorkerSessionRequest)
  SharedDtor();
}

void CreateWorkerSessionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  session_handle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete server_def_;
}

void CreateWorkerSessionRequest::ArenaDtor(void* object) {
  CreateWorkerSessionRequest* _this = reinterpret_cast< CreateWorkerSessionRequest* >(object);
  (void)_this;
}
void CreateWorkerSessionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateWorkerSessionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateWorkerSessionRequest& CreateWorkerSessionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateWorkerSessionRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  return *internal_default_instance();
}


void CreateWorkerSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CreateWorkerSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cluster_device_attributes_.Clear();
  session_handle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && server_def_ != nullptr) {
    delete server_def_;
  }
  server_def_ = nullptr;
  isolate_session_state_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateWorkerSessionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string session_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_session_handle(), ptr, ctx, "tensorflow.CreateWorkerSessionRequest.session_handle");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.ServerDef server_def = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_server_def(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isolate_session_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          isolate_session_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.DeviceAttributes cluster_device_attributes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_cluster_device_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateWorkerSessionRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CreateWorkerSessionRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string session_handle = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_session_handle()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->session_handle().data(), static_cast<int>(this->session_handle().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.CreateWorkerSessionRequest.session_handle"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.ServerDef server_def = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_server_def()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isolate_session_state = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isolate_session_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.DeviceAttributes cluster_device_attributes = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_cluster_device_attributes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CreateWorkerSessionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CreateWorkerSessionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateWorkerSessionRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CreateWorkerSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), static_cast<int>(this->session_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CreateWorkerSessionRequest.session_handle");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_handle(), output);
  }

  // .tensorflow.ServerDef server_def = 2;
  if (this->has_server_def()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::server_def(this), output);
  }

  // bool isolate_session_state = 3;
  if (this->isolate_session_state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->isolate_session_state(), output);
  }

  // repeated .tensorflow.DeviceAttributes cluster_device_attributes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cluster_device_attributes_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->cluster_device_attributes(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.CreateWorkerSessionRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateWorkerSessionRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CreateWorkerSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), static_cast<int>(this->session_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CreateWorkerSessionRequest.session_handle");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->session_handle(), target);
  }

  // .tensorflow.ServerDef server_def = 2;
  if (this->has_server_def()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::server_def(this), target);
  }

  // bool isolate_session_state = 3;
  if (this->isolate_session_state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->isolate_session_state(), target);
  }

  // repeated .tensorflow.DeviceAttributes cluster_device_attributes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cluster_device_attributes_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->cluster_device_attributes(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CreateWorkerSessionRequest)
  return target;
}

size_t CreateWorkerSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CreateWorkerSessionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.DeviceAttributes cluster_device_attributes = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->cluster_device_attributes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->cluster_device_attributes(static_cast<int>(i)));
    }
  }

  // string session_handle = 1;
  if (this->session_handle().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->session_handle());
  }

  // .tensorflow.ServerDef server_def = 2;
  if (this->has_server_def()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_def_);
  }

  // bool isolate_session_state = 3;
  if (this->isolate_session_state() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateWorkerSessionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CreateWorkerSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateWorkerSessionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateWorkerSessionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CreateWorkerSessionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CreateWorkerSessionRequest)
    MergeFrom(*source);
  }
}

void CreateWorkerSessionRequest::MergeFrom(const CreateWorkerSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CreateWorkerSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cluster_device_attributes_.MergeFrom(from.cluster_device_attributes_);
  if (from.session_handle().size() > 0) {
    set_session_handle(from.session_handle());
  }
  if (from.has_server_def()) {
    mutable_server_def()->::tensorflow::ServerDef::MergeFrom(from.server_def());
  }
  if (from.isolate_session_state() != 0) {
    set_isolate_session_state(from.isolate_session_state());
  }
}

void CreateWorkerSessionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CreateWorkerSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateWorkerSessionRequest::CopyFrom(const CreateWorkerSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CreateWorkerSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateWorkerSessionRequest::IsInitialized() const {
  return true;
}

void CreateWorkerSessionRequest::Swap(CreateWorkerSessionRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CreateWorkerSessionRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void CreateWorkerSessionRequest::UnsafeArenaSwap(CreateWorkerSessionRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CreateWorkerSessionRequest::InternalSwap(CreateWorkerSessionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&cluster_device_attributes_)->InternalSwap(CastToBase(&other->cluster_device_attributes_));
  session_handle_.Swap(&other->session_handle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(server_def_, other->server_def_);
  swap(isolate_session_state_, other->isolate_session_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateWorkerSessionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateWorkerSessionResponse::InitAsDefaultInstance() {
}
class CreateWorkerSessionResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateWorkerSessionResponse::CreateWorkerSessionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CreateWorkerSessionResponse)
}
CreateWorkerSessionResponse::CreateWorkerSessionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CreateWorkerSessionResponse)
}
CreateWorkerSessionResponse::CreateWorkerSessionResponse(const CreateWorkerSessionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.CreateWorkerSessionResponse)
}

void CreateWorkerSessionResponse::SharedCtor() {
}

CreateWorkerSessionResponse::~CreateWorkerSessionResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.CreateWorkerSessionResponse)
  SharedDtor();
}

void CreateWorkerSessionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void CreateWorkerSessionResponse::ArenaDtor(void* object) {
  CreateWorkerSessionResponse* _this = reinterpret_cast< CreateWorkerSessionResponse* >(object);
  (void)_this;
}
void CreateWorkerSessionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateWorkerSessionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateWorkerSessionResponse& CreateWorkerSessionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateWorkerSessionResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  return *internal_default_instance();
}


void CreateWorkerSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CreateWorkerSessionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateWorkerSessionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateWorkerSessionResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CreateWorkerSessionResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CreateWorkerSessionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CreateWorkerSessionResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateWorkerSessionResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CreateWorkerSessionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.CreateWorkerSessionResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateWorkerSessionResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CreateWorkerSessionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CreateWorkerSessionResponse)
  return target;
}

size_t CreateWorkerSessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CreateWorkerSessionResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateWorkerSessionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CreateWorkerSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateWorkerSessionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateWorkerSessionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CreateWorkerSessionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CreateWorkerSessionResponse)
    MergeFrom(*source);
  }
}

void CreateWorkerSessionResponse::MergeFrom(const CreateWorkerSessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CreateWorkerSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CreateWorkerSessionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CreateWorkerSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateWorkerSessionResponse::CopyFrom(const CreateWorkerSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CreateWorkerSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateWorkerSessionResponse::IsInitialized() const {
  return true;
}

void CreateWorkerSessionResponse::Swap(CreateWorkerSessionResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CreateWorkerSessionResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void CreateWorkerSessionResponse::UnsafeArenaSwap(CreateWorkerSessionResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CreateWorkerSessionResponse::InternalSwap(CreateWorkerSessionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateWorkerSessionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteWorkerSessionRequest::InitAsDefaultInstance() {
}
class DeleteWorkerSessionRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteWorkerSessionRequest::kSessionHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteWorkerSessionRequest::DeleteWorkerSessionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.DeleteWorkerSessionRequest)
}
DeleteWorkerSessionRequest::DeleteWorkerSessionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DeleteWorkerSessionRequest)
}
DeleteWorkerSessionRequest::DeleteWorkerSessionRequest(const DeleteWorkerSessionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.session_handle().size() > 0) {
    session_handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_handle(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.DeleteWorkerSessionRequest)
}

void DeleteWorkerSessionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteWorkerSessionRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  session_handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteWorkerSessionRequest::~DeleteWorkerSessionRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.DeleteWorkerSessionRequest)
  SharedDtor();
}

void DeleteWorkerSessionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  session_handle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteWorkerSessionRequest::ArenaDtor(void* object) {
  DeleteWorkerSessionRequest* _this = reinterpret_cast< DeleteWorkerSessionRequest* >(object);
  (void)_this;
}
void DeleteWorkerSessionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteWorkerSessionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteWorkerSessionRequest& DeleteWorkerSessionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteWorkerSessionRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  return *internal_default_instance();
}


void DeleteWorkerSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DeleteWorkerSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_handle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteWorkerSessionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string session_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_session_handle(), ptr, ctx, "tensorflow.DeleteWorkerSessionRequest.session_handle");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteWorkerSessionRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.DeleteWorkerSessionRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string session_handle = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_session_handle()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->session_handle().data(), static_cast<int>(this->session_handle().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.DeleteWorkerSessionRequest.session_handle"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.DeleteWorkerSessionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.DeleteWorkerSessionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteWorkerSessionRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.DeleteWorkerSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), static_cast<int>(this->session_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeleteWorkerSessionRequest.session_handle");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.DeleteWorkerSessionRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteWorkerSessionRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DeleteWorkerSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), static_cast<int>(this->session_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeleteWorkerSessionRequest.session_handle");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->session_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DeleteWorkerSessionRequest)
  return target;
}

size_t DeleteWorkerSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DeleteWorkerSessionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_handle = 1;
  if (this->session_handle().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->session_handle());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteWorkerSessionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.DeleteWorkerSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteWorkerSessionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteWorkerSessionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.DeleteWorkerSessionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.DeleteWorkerSessionRequest)
    MergeFrom(*source);
  }
}

void DeleteWorkerSessionRequest::MergeFrom(const DeleteWorkerSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DeleteWorkerSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_handle().size() > 0) {
    set_session_handle(from.session_handle());
  }
}

void DeleteWorkerSessionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.DeleteWorkerSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteWorkerSessionRequest::CopyFrom(const DeleteWorkerSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DeleteWorkerSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteWorkerSessionRequest::IsInitialized() const {
  return true;
}

void DeleteWorkerSessionRequest::Swap(DeleteWorkerSessionRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DeleteWorkerSessionRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void DeleteWorkerSessionRequest::UnsafeArenaSwap(DeleteWorkerSessionRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DeleteWorkerSessionRequest::InternalSwap(DeleteWorkerSessionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  session_handle_.Swap(&other->session_handle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteWorkerSessionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteWorkerSessionResponse::InitAsDefaultInstance() {
}
class DeleteWorkerSessionResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteWorkerSessionResponse::DeleteWorkerSessionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.DeleteWorkerSessionResponse)
}
DeleteWorkerSessionResponse::DeleteWorkerSessionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DeleteWorkerSessionResponse)
}
DeleteWorkerSessionResponse::DeleteWorkerSessionResponse(const DeleteWorkerSessionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.DeleteWorkerSessionResponse)
}

void DeleteWorkerSessionResponse::SharedCtor() {
}

DeleteWorkerSessionResponse::~DeleteWorkerSessionResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.DeleteWorkerSessionResponse)
  SharedDtor();
}

void DeleteWorkerSessionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void DeleteWorkerSessionResponse::ArenaDtor(void* object) {
  DeleteWorkerSessionResponse* _this = reinterpret_cast< DeleteWorkerSessionResponse* >(object);
  (void)_this;
}
void DeleteWorkerSessionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteWorkerSessionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteWorkerSessionResponse& DeleteWorkerSessionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteWorkerSessionResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  return *internal_default_instance();
}


void DeleteWorkerSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DeleteWorkerSessionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteWorkerSessionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteWorkerSessionResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.DeleteWorkerSessionResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.DeleteWorkerSessionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.DeleteWorkerSessionResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteWorkerSessionResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.DeleteWorkerSessionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.DeleteWorkerSessionResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteWorkerSessionResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DeleteWorkerSessionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DeleteWorkerSessionResponse)
  return target;
}

size_t DeleteWorkerSessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DeleteWorkerSessionResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteWorkerSessionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.DeleteWorkerSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteWorkerSessionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteWorkerSessionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.DeleteWorkerSessionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.DeleteWorkerSessionResponse)
    MergeFrom(*source);
  }
}

void DeleteWorkerSessionResponse::MergeFrom(const DeleteWorkerSessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DeleteWorkerSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteWorkerSessionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.DeleteWorkerSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteWorkerSessionResponse::CopyFrom(const DeleteWorkerSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DeleteWorkerSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteWorkerSessionResponse::IsInitialized() const {
  return true;
}

void DeleteWorkerSessionResponse::Swap(DeleteWorkerSessionResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DeleteWorkerSessionResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void DeleteWorkerSessionResponse::UnsafeArenaSwap(DeleteWorkerSessionResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DeleteWorkerSessionResponse::InternalSwap(DeleteWorkerSessionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteWorkerSessionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisterGraphRequest::InitAsDefaultInstance() {
  ::tensorflow::_RegisterGraphRequest_default_instance_._instance.get_mutable()->graph_def_ = const_cast< ::tensorflow::GraphDef*>(
      ::tensorflow::GraphDef::internal_default_instance());
  ::tensorflow::_RegisterGraphRequest_default_instance_._instance.get_mutable()->graph_options_ = const_cast< ::tensorflow::GraphOptions*>(
      ::tensorflow::GraphOptions::internal_default_instance());
  ::tensorflow::_RegisterGraphRequest_default_instance_._instance.get_mutable()->debug_options_ = const_cast< ::tensorflow::DebugOptions*>(
      ::tensorflow::DebugOptions::internal_default_instance());
  ::tensorflow::_RegisterGraphRequest_default_instance_._instance.get_mutable()->config_proto_ = const_cast< ::tensorflow::ConfigProto*>(
      ::tensorflow::ConfigProto::internal_default_instance());
}
class RegisterGraphRequest::HasBitSetters {
 public:
  static const ::tensorflow::GraphDef& graph_def(const RegisterGraphRequest* msg);
  static const ::tensorflow::GraphOptions& graph_options(const RegisterGraphRequest* msg);
  static const ::tensorflow::DebugOptions& debug_options(const RegisterGraphRequest* msg);
  static const ::tensorflow::ConfigProto& config_proto(const RegisterGraphRequest* msg);
};

const ::tensorflow::GraphDef&
RegisterGraphRequest::HasBitSetters::graph_def(const RegisterGraphRequest* msg) {
  return *msg->graph_def_;
}
const ::tensorflow::GraphOptions&
RegisterGraphRequest::HasBitSetters::graph_options(const RegisterGraphRequest* msg) {
  return *msg->graph_options_;
}
const ::tensorflow::DebugOptions&
RegisterGraphRequest::HasBitSetters::debug_options(const RegisterGraphRequest* msg) {
  return *msg->debug_options_;
}
const ::tensorflow::ConfigProto&
RegisterGraphRequest::HasBitSetters::config_proto(const RegisterGraphRequest* msg) {
  return *msg->config_proto_;
}
void RegisterGraphRequest::unsafe_arena_set_allocated_graph_def(
    ::tensorflow::GraphDef* graph_def) {
  if (GetArenaNoVirtual() == nullptr) {
    delete graph_def_;
  }
  graph_def_ = graph_def;
  if (graph_def) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RegisterGraphRequest.graph_def)
}
void RegisterGraphRequest::clear_graph_def() {
  if (GetArenaNoVirtual() == nullptr && graph_def_ != nullptr) {
    delete graph_def_;
  }
  graph_def_ = nullptr;
}
void RegisterGraphRequest::unsafe_arena_set_allocated_graph_options(
    ::tensorflow::GraphOptions* graph_options) {
  if (GetArenaNoVirtual() == nullptr) {
    delete graph_options_;
  }
  graph_options_ = graph_options;
  if (graph_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RegisterGraphRequest.graph_options)
}
void RegisterGraphRequest::clear_graph_options() {
  if (GetArenaNoVirtual() == nullptr && graph_options_ != nullptr) {
    delete graph_options_;
  }
  graph_options_ = nullptr;
}
void RegisterGraphRequest::unsafe_arena_set_allocated_debug_options(
    ::tensorflow::DebugOptions* debug_options) {
  if (GetArenaNoVirtual() == nullptr) {
    delete debug_options_;
  }
  debug_options_ = debug_options;
  if (debug_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RegisterGraphRequest.debug_options)
}
void RegisterGraphRequest::clear_debug_options() {
  if (GetArenaNoVirtual() == nullptr && debug_options_ != nullptr) {
    delete debug_options_;
  }
  debug_options_ = nullptr;
}
void RegisterGraphRequest::unsafe_arena_set_allocated_config_proto(
    ::tensorflow::ConfigProto* config_proto) {
  if (GetArenaNoVirtual() == nullptr) {
    delete config_proto_;
  }
  config_proto_ = config_proto;
  if (config_proto) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RegisterGraphRequest.config_proto)
}
void RegisterGraphRequest::clear_config_proto() {
  if (GetArenaNoVirtual() == nullptr && config_proto_ != nullptr) {
    delete config_proto_;
  }
  config_proto_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterGraphRequest::kSessionHandleFieldNumber;
const int RegisterGraphRequest::kCreateWorkerSessionCalledFieldNumber;
const int RegisterGraphRequest::kGraphDefFieldNumber;
const int RegisterGraphRequest::kHasControlFlowFieldNumber;
const int RegisterGraphRequest::kGraphOptionsFieldNumber;
const int RegisterGraphRequest::kDebugOptionsFieldNumber;
const int RegisterGraphRequest::kCollectiveGraphKeyFieldNumber;
const int RegisterGraphRequest::kConfigProtoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterGraphRequest::RegisterGraphRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RegisterGraphRequest)
}
RegisterGraphRequest::RegisterGraphRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RegisterGraphRequest)
}
RegisterGraphRequest::RegisterGraphRequest(const RegisterGraphRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.session_handle().size() > 0) {
    session_handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_handle(),
      GetArenaNoVirtual());
  }
  if (from.has_graph_def()) {
    graph_def_ = new ::tensorflow::GraphDef(*from.graph_def_);
  } else {
    graph_def_ = nullptr;
  }
  if (from.has_graph_options()) {
    graph_options_ = new ::tensorflow::GraphOptions(*from.graph_options_);
  } else {
    graph_options_ = nullptr;
  }
  if (from.has_debug_options()) {
    debug_options_ = new ::tensorflow::DebugOptions(*from.debug_options_);
  } else {
    debug_options_ = nullptr;
  }
  if (from.has_config_proto()) {
    config_proto_ = new ::tensorflow::ConfigProto(*from.config_proto_);
  } else {
    config_proto_ = nullptr;
  }
  ::memcpy(&collective_graph_key_, &from.collective_graph_key_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_control_flow_) -
    reinterpret_cast<char*>(&collective_graph_key_)) + sizeof(has_control_flow_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.RegisterGraphRequest)
}

void RegisterGraphRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegisterGraphRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  session_handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&graph_def_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_control_flow_) -
      reinterpret_cast<char*>(&graph_def_)) + sizeof(has_control_flow_));
}

RegisterGraphRequest::~RegisterGraphRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.RegisterGraphRequest)
  SharedDtor();
}

void RegisterGraphRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  session_handle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete graph_def_;
  if (this != internal_default_instance()) delete graph_options_;
  if (this != internal_default_instance()) delete debug_options_;
  if (this != internal_default_instance()) delete config_proto_;
}

void RegisterGraphRequest::ArenaDtor(void* object) {
  RegisterGraphRequest* _this = reinterpret_cast< RegisterGraphRequest* >(object);
  (void)_this;
}
void RegisterGraphRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterGraphRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterGraphRequest& RegisterGraphRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterGraphRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  return *internal_default_instance();
}


void RegisterGraphRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RegisterGraphRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_handle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && graph_def_ != nullptr) {
    delete graph_def_;
  }
  graph_def_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && graph_options_ != nullptr) {
    delete graph_options_;
  }
  graph_options_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && debug_options_ != nullptr) {
    delete debug_options_;
  }
  debug_options_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && config_proto_ != nullptr) {
    delete config_proto_;
  }
  config_proto_ = nullptr;
  ::memset(&collective_graph_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_control_flow_) -
      reinterpret_cast<char*>(&collective_graph_key_)) + sizeof(has_control_flow_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegisterGraphRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string session_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_session_handle(), ptr, ctx, "tensorflow.RegisterGraphRequest.session_handle");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.GraphDef graph_def = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_graph_def(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool has_control_flow = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          has_control_flow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.GraphOptions graph_options = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_graph_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.DebugOptions debug_options = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_debug_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool create_worker_session_called = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          create_worker_session_called_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 collective_graph_key = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          collective_graph_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.ConfigProto config_proto = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_config_proto(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegisterGraphRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RegisterGraphRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string session_handle = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_session_handle()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->session_handle().data(), static_cast<int>(this->session_handle().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.RegisterGraphRequest.session_handle"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.GraphDef graph_def = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_graph_def()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_control_flow = 3 [deprecated = true];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_control_flow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.GraphOptions graph_options = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_graph_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.DebugOptions debug_options = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_debug_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool create_worker_session_called = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &create_worker_session_called_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 collective_graph_key = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &collective_graph_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.ConfigProto config_proto = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_config_proto()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RegisterGraphRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RegisterGraphRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegisterGraphRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RegisterGraphRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), static_cast<int>(this->session_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RegisterGraphRequest.session_handle");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_handle(), output);
  }

  // .tensorflow.GraphDef graph_def = 2;
  if (this->has_graph_def()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::graph_def(this), output);
  }

  // bool has_control_flow = 3 [deprecated = true];
  if (this->has_control_flow() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->has_control_flow(), output);
  }

  // .tensorflow.GraphOptions graph_options = 4;
  if (this->has_graph_options()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::graph_options(this), output);
  }

  // .tensorflow.DebugOptions debug_options = 5;
  if (this->has_debug_options()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::debug_options(this), output);
  }

  // bool create_worker_session_called = 6;
  if (this->create_worker_session_called() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->create_worker_session_called(), output);
  }

  // int64 collective_graph_key = 7;
  if (this->collective_graph_key() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->collective_graph_key(), output);
  }

  // .tensorflow.ConfigProto config_proto = 8;
  if (this->has_config_proto()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::config_proto(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.RegisterGraphRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterGraphRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RegisterGraphRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_handle = 1;
  if (this->session_handle().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), static_cast<int>(this->session_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RegisterGraphRequest.session_handle");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->session_handle(), target);
  }

  // .tensorflow.GraphDef graph_def = 2;
  if (this->has_graph_def()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::graph_def(this), target);
  }

  // bool has_control_flow = 3 [deprecated = true];
  if (this->has_control_flow() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->has_control_flow(), target);
  }

  // .tensorflow.GraphOptions graph_options = 4;
  if (this->has_graph_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::graph_options(this), target);
  }

  // .tensorflow.DebugOptions debug_options = 5;
  if (this->has_debug_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::debug_options(this), target);
  }

  // bool create_worker_session_called = 6;
  if (this->create_worker_session_called() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->create_worker_session_called(), target);
  }

  // int64 collective_graph_key = 7;
  if (this->collective_graph_key() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->collective_graph_key(), target);
  }

  // .tensorflow.ConfigProto config_proto = 8;
  if (this->has_config_proto()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::config_proto(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RegisterGraphRequest)
  return target;
}

size_t RegisterGraphRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RegisterGraphRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_handle = 1;
  if (this->session_handle().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->session_handle());
  }

  // .tensorflow.GraphDef graph_def = 2;
  if (this->has_graph_def()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *graph_def_);
  }

  // .tensorflow.GraphOptions graph_options = 4;
  if (this->has_graph_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *graph_options_);
  }

  // .tensorflow.DebugOptions debug_options = 5;
  if (this->has_debug_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *debug_options_);
  }

  // .tensorflow.ConfigProto config_proto = 8;
  if (this->has_config_proto()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_proto_);
  }

  // int64 collective_graph_key = 7;
  if (this->collective_graph_key() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->collective_graph_key());
  }

  // bool create_worker_session_called = 6;
  if (this->create_worker_session_called() != 0) {
    total_size += 1 + 1;
  }

  // bool has_control_flow = 3 [deprecated = true];
  if (this->has_control_flow() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterGraphRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RegisterGraphRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterGraphRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterGraphRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RegisterGraphRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RegisterGraphRequest)
    MergeFrom(*source);
  }
}

void RegisterGraphRequest::MergeFrom(const RegisterGraphRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RegisterGraphRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_handle().size() > 0) {
    set_session_handle(from.session_handle());
  }
  if (from.has_graph_def()) {
    mutable_graph_def()->::tensorflow::GraphDef::MergeFrom(from.graph_def());
  }
  if (from.has_graph_options()) {
    mutable_graph_options()->::tensorflow::GraphOptions::MergeFrom(from.graph_options());
  }
  if (from.has_debug_options()) {
    mutable_debug_options()->::tensorflow::DebugOptions::MergeFrom(from.debug_options());
  }
  if (from.has_config_proto()) {
    mutable_config_proto()->::tensorflow::ConfigProto::MergeFrom(from.config_proto());
  }
  if (from.collective_graph_key() != 0) {
    set_collective_graph_key(from.collective_graph_key());
  }
  if (from.create_worker_session_called() != 0) {
    set_create_worker_session_called(from.create_worker_session_called());
  }
  if (from.has_control_flow() != 0) {
    set_has_control_flow(from.has_control_flow());
  }
}

void RegisterGraphRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RegisterGraphRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterGraphRequest::CopyFrom(const RegisterGraphRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RegisterGraphRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterGraphRequest::IsInitialized() const {
  return true;
}

void RegisterGraphRequest::Swap(RegisterGraphRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RegisterGraphRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void RegisterGraphRequest::UnsafeArenaSwap(RegisterGraphRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RegisterGraphRequest::InternalSwap(RegisterGraphRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  session_handle_.Swap(&other->session_handle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(graph_def_, other->graph_def_);
  swap(graph_options_, other->graph_options_);
  swap(debug_options_, other->debug_options_);
  swap(config_proto_, other->config_proto_);
  swap(collective_graph_key_, other->collective_graph_key_);
  swap(create_worker_session_called_, other->create_worker_session_called_);
  swap(has_control_flow_, other->has_control_flow_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterGraphRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisterGraphResponse::InitAsDefaultInstance() {
}
class RegisterGraphResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterGraphResponse::kGraphHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterGraphResponse::RegisterGraphResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RegisterGraphResponse)
}
RegisterGraphResponse::RegisterGraphResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RegisterGraphResponse)
}
RegisterGraphResponse::RegisterGraphResponse(const RegisterGraphResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  graph_handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.graph_handle().size() > 0) {
    graph_handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.graph_handle(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.RegisterGraphResponse)
}

void RegisterGraphResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegisterGraphResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  graph_handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RegisterGraphResponse::~RegisterGraphResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.RegisterGraphResponse)
  SharedDtor();
}

void RegisterGraphResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  graph_handle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegisterGraphResponse::ArenaDtor(void* object) {
  RegisterGraphResponse* _this = reinterpret_cast< RegisterGraphResponse* >(object);
  (void)_this;
}
void RegisterGraphResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterGraphResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterGraphResponse& RegisterGraphResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterGraphResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  return *internal_default_instance();
}


void RegisterGraphResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RegisterGraphResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  graph_handle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegisterGraphResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string graph_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_graph_handle(), ptr, ctx, "tensorflow.RegisterGraphResponse.graph_handle");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegisterGraphResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RegisterGraphResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string graph_handle = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_graph_handle()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->graph_handle().data(), static_cast<int>(this->graph_handle().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.RegisterGraphResponse.graph_handle"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RegisterGraphResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RegisterGraphResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegisterGraphResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RegisterGraphResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string graph_handle = 1;
  if (this->graph_handle().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->graph_handle().data(), static_cast<int>(this->graph_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RegisterGraphResponse.graph_handle");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->graph_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.RegisterGraphResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterGraphResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RegisterGraphResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string graph_handle = 1;
  if (this->graph_handle().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->graph_handle().data(), static_cast<int>(this->graph_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RegisterGraphResponse.graph_handle");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->graph_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RegisterGraphResponse)
  return target;
}

size_t RegisterGraphResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RegisterGraphResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string graph_handle = 1;
  if (this->graph_handle().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->graph_handle());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterGraphResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RegisterGraphResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterGraphResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterGraphResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RegisterGraphResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RegisterGraphResponse)
    MergeFrom(*source);
  }
}

void RegisterGraphResponse::MergeFrom(const RegisterGraphResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RegisterGraphResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.graph_handle().size() > 0) {
    set_graph_handle(from.graph_handle());
  }
}

void RegisterGraphResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RegisterGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterGraphResponse::CopyFrom(const RegisterGraphResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RegisterGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterGraphResponse::IsInitialized() const {
  return true;
}

void RegisterGraphResponse::Swap(RegisterGraphResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RegisterGraphResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void RegisterGraphResponse::UnsafeArenaSwap(RegisterGraphResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RegisterGraphResponse::InternalSwap(RegisterGraphResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  graph_handle_.Swap(&other->graph_handle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterGraphResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeregisterGraphRequest::InitAsDefaultInstance() {
}
class DeregisterGraphRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeregisterGraphRequest::kSessionHandleFieldNumber;
const int DeregisterGraphRequest::kCreateWorkerSessionCalledFieldNumber;
const int DeregisterGraphRequest::kGraphHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeregisterGraphRequest::DeregisterGraphRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.DeregisterGraphRequest)
}
DeregisterGraphRequest::DeregisterGraphRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DeregisterGraphRequest)
}
DeregisterGraphRequest::DeregisterGraphRequest(const DeregisterGraphRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  graph_handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.graph_handle().size() > 0) {
    graph_handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.graph_handle(),
      GetArenaNoVirtual());
  }
  session_handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.session_handle().size() > 0) {
    session_handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_handle(),
      GetArenaNoVirtual());
  }
  create_worker_session_called_ = from.create_worker_session_called_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.DeregisterGraphRequest)
}

void DeregisterGraphRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeregisterGraphRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  graph_handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_worker_session_called_ = false;
}

DeregisterGraphRequest::~DeregisterGraphRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.DeregisterGraphRequest)
  SharedDtor();
}

void DeregisterGraphRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  graph_handle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_handle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeregisterGraphRequest::ArenaDtor(void* object) {
  DeregisterGraphRequest* _this = reinterpret_cast< DeregisterGraphRequest* >(object);
  (void)_this;
}
void DeregisterGraphRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeregisterGraphRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeregisterGraphRequest& DeregisterGraphRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeregisterGraphRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  return *internal_default_instance();
}


void DeregisterGraphRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DeregisterGraphRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  graph_handle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  session_handle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  create_worker_session_called_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeregisterGraphRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string graph_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_graph_handle(), ptr, ctx, "tensorflow.DeregisterGraphRequest.graph_handle");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_session_handle(), ptr, ctx, "tensorflow.DeregisterGraphRequest.session_handle");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool create_worker_session_called = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          create_worker_session_called_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeregisterGraphRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.DeregisterGraphRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string graph_handle = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_graph_handle()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->graph_handle().data(), static_cast<int>(this->graph_handle().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.DeregisterGraphRequest.graph_handle"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_handle = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_session_handle()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->session_handle().data(), static_cast<int>(this->session_handle().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.DeregisterGraphRequest.session_handle"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool create_worker_session_called = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &create_worker_session_called_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.DeregisterGraphRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.DeregisterGraphRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeregisterGraphRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.DeregisterGraphRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string graph_handle = 1;
  if (this->graph_handle().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->graph_handle().data(), static_cast<int>(this->graph_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeregisterGraphRequest.graph_handle");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->graph_handle(), output);
  }

  // string session_handle = 2;
  if (this->session_handle().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), static_cast<int>(this->session_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeregisterGraphRequest.session_handle");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session_handle(), output);
  }

  // bool create_worker_session_called = 3;
  if (this->create_worker_session_called() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->create_worker_session_called(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.DeregisterGraphRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DeregisterGraphRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DeregisterGraphRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string graph_handle = 1;
  if (this->graph_handle().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->graph_handle().data(), static_cast<int>(this->graph_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeregisterGraphRequest.graph_handle");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->graph_handle(), target);
  }

  // string session_handle = 2;
  if (this->session_handle().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), static_cast<int>(this->session_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeregisterGraphRequest.session_handle");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->session_handle(), target);
  }

  // bool create_worker_session_called = 3;
  if (this->create_worker_session_called() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->create_worker_session_called(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DeregisterGraphRequest)
  return target;
}

size_t DeregisterGraphRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DeregisterGraphRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string graph_handle = 1;
  if (this->graph_handle().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->graph_handle());
  }

  // string session_handle = 2;
  if (this->session_handle().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->session_handle());
  }

  // bool create_worker_session_called = 3;
  if (this->create_worker_session_called() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeregisterGraphRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.DeregisterGraphRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeregisterGraphRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeregisterGraphRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.DeregisterGraphRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.DeregisterGraphRequest)
    MergeFrom(*source);
  }
}

void DeregisterGraphRequest::MergeFrom(const DeregisterGraphRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DeregisterGraphRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.graph_handle().size() > 0) {
    set_graph_handle(from.graph_handle());
  }
  if (from.session_handle().size() > 0) {
    set_session_handle(from.session_handle());
  }
  if (from.create_worker_session_called() != 0) {
    set_create_worker_session_called(from.create_worker_session_called());
  }
}

void DeregisterGraphRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.DeregisterGraphRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeregisterGraphRequest::CopyFrom(const DeregisterGraphRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DeregisterGraphRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeregisterGraphRequest::IsInitialized() const {
  return true;
}

void DeregisterGraphRequest::Swap(DeregisterGraphRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DeregisterGraphRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void DeregisterGraphRequest::UnsafeArenaSwap(DeregisterGraphRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DeregisterGraphRequest::InternalSwap(DeregisterGraphRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  graph_handle_.Swap(&other->graph_handle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  session_handle_.Swap(&other->session_handle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(create_worker_session_called_, other->create_worker_session_called_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeregisterGraphRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeregisterGraphResponse::InitAsDefaultInstance() {
}
class DeregisterGraphResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeregisterGraphResponse::DeregisterGraphResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.DeregisterGraphResponse)
}
DeregisterGraphResponse::DeregisterGraphResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DeregisterGraphResponse)
}
DeregisterGraphResponse::DeregisterGraphResponse(const DeregisterGraphResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.DeregisterGraphResponse)
}

void DeregisterGraphResponse::SharedCtor() {
}

DeregisterGraphResponse::~DeregisterGraphResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.DeregisterGraphResponse)
  SharedDtor();
}

void DeregisterGraphResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void DeregisterGraphResponse::ArenaDtor(void* object) {
  DeregisterGraphResponse* _this = reinterpret_cast< DeregisterGraphResponse* >(object);
  (void)_this;
}
void DeregisterGraphResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeregisterGraphResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeregisterGraphResponse& DeregisterGraphResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeregisterGraphResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  return *internal_default_instance();
}


void DeregisterGraphResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DeregisterGraphResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeregisterGraphResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeregisterGraphResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.DeregisterGraphResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.DeregisterGraphResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.DeregisterGraphResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeregisterGraphResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.DeregisterGraphResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.DeregisterGraphResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* DeregisterGraphResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DeregisterGraphResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DeregisterGraphResponse)
  return target;
}

size_t DeregisterGraphResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DeregisterGraphResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeregisterGraphResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.DeregisterGraphResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeregisterGraphResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeregisterGraphResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.DeregisterGraphResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.DeregisterGraphResponse)
    MergeFrom(*source);
  }
}

void DeregisterGraphResponse::MergeFrom(const DeregisterGraphResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DeregisterGraphResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeregisterGraphResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.DeregisterGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeregisterGraphResponse::CopyFrom(const DeregisterGraphResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DeregisterGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeregisterGraphResponse::IsInitialized() const {
  return true;
}

void DeregisterGraphResponse::Swap(DeregisterGraphResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DeregisterGraphResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void DeregisterGraphResponse::UnsafeArenaSwap(DeregisterGraphResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DeregisterGraphResponse::InternalSwap(DeregisterGraphResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeregisterGraphResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CleanupAllRequest::InitAsDefaultInstance() {
}
class CleanupAllRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CleanupAllRequest::kContainerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CleanupAllRequest::CleanupAllRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CleanupAllRequest)
}
CleanupAllRequest::CleanupAllRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  container_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CleanupAllRequest)
}
CleanupAllRequest::CleanupAllRequest(const CleanupAllRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      container_(from.container_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.CleanupAllRequest)
}

void CleanupAllRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CleanupAllRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
}

CleanupAllRequest::~CleanupAllRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.CleanupAllRequest)
  SharedDtor();
}

void CleanupAllRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void CleanupAllRequest::ArenaDtor(void* object) {
  CleanupAllRequest* _this = reinterpret_cast< CleanupAllRequest* >(object);
  (void)_this;
}
void CleanupAllRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CleanupAllRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CleanupAllRequest& CleanupAllRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CleanupAllRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  return *internal_default_instance();
}


void CleanupAllRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CleanupAllRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CleanupAllRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string container = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_container(), ptr, ctx, "tensorflow.CleanupAllRequest.container");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CleanupAllRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CleanupAllRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string container = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_container()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->container(this->container_size() - 1).data(),
            static_cast<int>(this->container(this->container_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.CleanupAllRequest.container"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CleanupAllRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CleanupAllRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CleanupAllRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CleanupAllRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string container = 1;
  for (int i = 0, n = this->container_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->container(i).data(), static_cast<int>(this->container(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CleanupAllRequest.container");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->container(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.CleanupAllRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* CleanupAllRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CleanupAllRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string container = 1;
  for (int i = 0, n = this->container_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->container(i).data(), static_cast<int>(this->container(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CleanupAllRequest.container");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(1, this->container(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CleanupAllRequest)
  return target;
}

size_t CleanupAllRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CleanupAllRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string container = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->container_size());
  for (int i = 0, n = this->container_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->container(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CleanupAllRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CleanupAllRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CleanupAllRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CleanupAllRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CleanupAllRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CleanupAllRequest)
    MergeFrom(*source);
  }
}

void CleanupAllRequest::MergeFrom(const CleanupAllRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CleanupAllRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  container_.MergeFrom(from.container_);
}

void CleanupAllRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CleanupAllRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CleanupAllRequest::CopyFrom(const CleanupAllRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CleanupAllRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanupAllRequest::IsInitialized() const {
  return true;
}

void CleanupAllRequest::Swap(CleanupAllRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CleanupAllRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void CleanupAllRequest::UnsafeArenaSwap(CleanupAllRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CleanupAllRequest::InternalSwap(CleanupAllRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  container_.InternalSwap(CastToBase(&other->container_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CleanupAllRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CleanupAllResponse::InitAsDefaultInstance() {
}
class CleanupAllResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CleanupAllResponse::CleanupAllResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CleanupAllResponse)
}
CleanupAllResponse::CleanupAllResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CleanupAllResponse)
}
CleanupAllResponse::CleanupAllResponse(const CleanupAllResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.CleanupAllResponse)
}

void CleanupAllResponse::SharedCtor() {
}

CleanupAllResponse::~CleanupAllResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.CleanupAllResponse)
  SharedDtor();
}

void CleanupAllResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void CleanupAllResponse::ArenaDtor(void* object) {
  CleanupAllResponse* _this = reinterpret_cast< CleanupAllResponse* >(object);
  (void)_this;
}
void CleanupAllResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CleanupAllResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CleanupAllResponse& CleanupAllResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CleanupAllResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  return *internal_default_instance();
}


void CleanupAllResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CleanupAllResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CleanupAllResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CleanupAllResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CleanupAllResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CleanupAllResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CleanupAllResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CleanupAllResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CleanupAllResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.CleanupAllResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* CleanupAllResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CleanupAllResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CleanupAllResponse)
  return target;
}

size_t CleanupAllResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CleanupAllResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CleanupAllResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CleanupAllResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CleanupAllResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CleanupAllResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CleanupAllResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CleanupAllResponse)
    MergeFrom(*source);
  }
}

void CleanupAllResponse::MergeFrom(const CleanupAllResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CleanupAllResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CleanupAllResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CleanupAllResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CleanupAllResponse::CopyFrom(const CleanupAllResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CleanupAllResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanupAllResponse::IsInitialized() const {
  return true;
}

void CleanupAllResponse::Swap(CleanupAllResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CleanupAllResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void CleanupAllResponse::UnsafeArenaSwap(CleanupAllResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CleanupAllResponse::InternalSwap(CleanupAllResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CleanupAllResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExecutorOpts::InitAsDefaultInstance() {
}
class ExecutorOpts::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecutorOpts::kRecordCostsFieldNumber;
const int ExecutorOpts::kRecordTimelineFieldNumber;
const int ExecutorOpts::kRecordPartitionGraphsFieldNumber;
const int ExecutorOpts::kReportTensorAllocationsUponOomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecutorOpts::ExecutorOpts()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ExecutorOpts)
}
ExecutorOpts::ExecutorOpts(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ExecutorOpts)
}
ExecutorOpts::ExecutorOpts(const ExecutorOpts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&record_costs_, &from.record_costs_,
    static_cast<size_t>(reinterpret_cast<char*>(&report_tensor_allocations_upon_oom_) -
    reinterpret_cast<char*>(&record_costs_)) + sizeof(report_tensor_allocations_upon_oom_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.ExecutorOpts)
}

void ExecutorOpts::SharedCtor() {
  ::memset(&record_costs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&report_tensor_allocations_upon_oom_) -
      reinterpret_cast<char*>(&record_costs_)) + sizeof(report_tensor_allocations_upon_oom_));
}

ExecutorOpts::~ExecutorOpts() {
  // @@protoc_insertion_point(destructor:tensorflow.ExecutorOpts)
  SharedDtor();
}

void ExecutorOpts::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void ExecutorOpts::ArenaDtor(void* object) {
  ExecutorOpts* _this = reinterpret_cast< ExecutorOpts* >(object);
  (void)_this;
}
void ExecutorOpts::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecutorOpts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExecutorOpts& ExecutorOpts::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExecutorOpts_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  return *internal_default_instance();
}


void ExecutorOpts::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ExecutorOpts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&record_costs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&report_tensor_allocations_upon_oom_) -
      reinterpret_cast<char*>(&record_costs_)) + sizeof(report_tensor_allocations_upon_oom_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExecutorOpts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool record_costs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          record_costs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool record_timeline = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          record_timeline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool record_partition_graphs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          record_partition_graphs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool report_tensor_allocations_upon_oom = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          report_tensor_allocations_upon_oom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExecutorOpts::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.ExecutorOpts)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool record_costs = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &record_costs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool record_timeline = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &record_timeline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool record_partition_graphs = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &record_partition_graphs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool report_tensor_allocations_upon_oom = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &report_tensor_allocations_upon_oom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.ExecutorOpts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.ExecutorOpts)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExecutorOpts::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.ExecutorOpts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool record_costs = 1;
  if (this->record_costs() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->record_costs(), output);
  }

  // bool record_timeline = 3;
  if (this->record_timeline() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->record_timeline(), output);
  }

  // bool record_partition_graphs = 4;
  if (this->record_partition_graphs() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->record_partition_graphs(), output);
  }

  // bool report_tensor_allocations_upon_oom = 5;
  if (this->report_tensor_allocations_upon_oom() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->report_tensor_allocations_upon_oom(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.ExecutorOpts)
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecutorOpts::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ExecutorOpts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool record_costs = 1;
  if (this->record_costs() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->record_costs(), target);
  }

  // bool record_timeline = 3;
  if (this->record_timeline() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->record_timeline(), target);
  }

  // bool record_partition_graphs = 4;
  if (this->record_partition_graphs() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->record_partition_graphs(), target);
  }

  // bool report_tensor_allocations_upon_oom = 5;
  if (this->report_tensor_allocations_upon_oom() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->report_tensor_allocations_upon_oom(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ExecutorOpts)
  return target;
}

size_t ExecutorOpts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ExecutorOpts)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool record_costs = 1;
  if (this->record_costs() != 0) {
    total_size += 1 + 1;
  }

  // bool record_timeline = 3;
  if (this->record_timeline() != 0) {
    total_size += 1 + 1;
  }

  // bool record_partition_graphs = 4;
  if (this->record_partition_graphs() != 0) {
    total_size += 1 + 1;
  }

  // bool report_tensor_allocations_upon_oom = 5;
  if (this->report_tensor_allocations_upon_oom() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecutorOpts::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ExecutorOpts)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecutorOpts* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExecutorOpts>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ExecutorOpts)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ExecutorOpts)
    MergeFrom(*source);
  }
}

void ExecutorOpts::MergeFrom(const ExecutorOpts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ExecutorOpts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.record_costs() != 0) {
    set_record_costs(from.record_costs());
  }
  if (from.record_timeline() != 0) {
    set_record_timeline(from.record_timeline());
  }
  if (from.record_partition_graphs() != 0) {
    set_record_partition_graphs(from.record_partition_graphs());
  }
  if (from.report_tensor_allocations_upon_oom() != 0) {
    set_report_tensor_allocations_upon_oom(from.report_tensor_allocations_upon_oom());
  }
}

void ExecutorOpts::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ExecutorOpts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutorOpts::CopyFrom(const ExecutorOpts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ExecutorOpts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutorOpts::IsInitialized() const {
  return true;
}

void ExecutorOpts::Swap(ExecutorOpts* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ExecutorOpts* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void ExecutorOpts::UnsafeArenaSwap(ExecutorOpts* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ExecutorOpts::InternalSwap(ExecutorOpts* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(record_costs_, other->record_costs_);
  swap(record_timeline_, other->record_timeline_);
  swap(record_partition_graphs_, other->record_partition_graphs_);
  swap(report_tensor_allocations_upon_oom_, other->report_tensor_allocations_upon_oom_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecutorOpts::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RunGraphRequest::InitAsDefaultInstance() {
  ::tensorflow::_RunGraphRequest_default_instance_._instance.get_mutable()->exec_opts_ = const_cast< ::tensorflow::ExecutorOpts*>(
      ::tensorflow::ExecutorOpts::internal_default_instance());
}
class RunGraphRequest::HasBitSetters {
 public:
  static const ::tensorflow::ExecutorOpts& exec_opts(const RunGraphRequest* msg);
};

const ::tensorflow::ExecutorOpts&
RunGraphRequest::HasBitSetters::exec_opts(const RunGraphRequest* msg) {
  return *msg->exec_opts_;
}
void RunGraphRequest::unsafe_arena_set_allocated_exec_opts(
    ::tensorflow::ExecutorOpts* exec_opts) {
  if (GetArenaNoVirtual() == nullptr) {
    delete exec_opts_;
  }
  exec_opts_ = exec_opts;
  if (exec_opts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RunGraphRequest.exec_opts)
}
void RunGraphRequest::clear_send() {
  send_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunGraphRequest::kSessionHandleFieldNumber;
const int RunGraphRequest::kCreateWorkerSessionCalledFieldNumber;
const int RunGraphRequest::kGraphHandleFieldNumber;
const int RunGraphRequest::kStepIdFieldNumber;
const int RunGraphRequest::kExecOptsFieldNumber;
const int RunGraphRequest::kSendFieldNumber;
const int RunGraphRequest::kRecvKeyFieldNumber;
const int RunGraphRequest::kIsPartialFieldNumber;
const int RunGraphRequest::kIsLastPartialRunFieldNumber;
const int RunGraphRequest::kStoreErrorsInResponseBodyFieldNumber;
const int RunGraphRequest::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunGraphRequest::RunGraphRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RunGraphRequest)
}
RunGraphRequest::RunGraphRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  send_(arena),
  recv_key_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RunGraphRequest)
}
RunGraphRequest::RunGraphRequest(const RunGraphRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      send_(from.send_),
      recv_key_(from.recv_key_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  graph_handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.graph_handle().size() > 0) {
    graph_handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.graph_handle(),
      GetArenaNoVirtual());
  }
  session_handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.session_handle().size() > 0) {
    session_handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_handle(),
      GetArenaNoVirtual());
  }
  if (from.has_exec_opts()) {
    exec_opts_ = new ::tensorflow::ExecutorOpts(*from.exec_opts_);
  } else {
    exec_opts_ = nullptr;
  }
  ::memcpy(&step_id_, &from.step_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&store_errors_in_response_body_) -
    reinterpret_cast<char*>(&step_id_)) + sizeof(store_errors_in_response_body_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.RunGraphRequest)
}

void RunGraphRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RunGraphRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  graph_handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&exec_opts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&store_errors_in_response_body_) -
      reinterpret_cast<char*>(&exec_opts_)) + sizeof(store_errors_in_response_body_));
}

RunGraphRequest::~RunGraphRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.RunGraphRequest)
  SharedDtor();
}

void RunGraphRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  graph_handle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_handle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete exec_opts_;
}

void RunGraphRequest::ArenaDtor(void* object) {
  RunGraphRequest* _this = reinterpret_cast< RunGraphRequest* >(object);
  (void)_this;
}
void RunGraphRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RunGraphRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RunGraphRequest& RunGraphRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RunGraphRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  return *internal_default_instance();
}


void RunGraphRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RunGraphRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  send_.Clear();
  recv_key_.Clear();
  graph_handle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  session_handle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && exec_opts_ != nullptr) {
    delete exec_opts_;
  }
  exec_opts_ = nullptr;
  ::memset(&step_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&store_errors_in_response_body_) -
      reinterpret_cast<char*>(&step_id_)) + sizeof(store_errors_in_response_body_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RunGraphRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string graph_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_graph_handle(), ptr, ctx, "tensorflow.RunGraphRequest.graph_handle");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 step_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          step_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.NamedTensorProto send = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_send(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated string recv_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_recv_key(), ptr, ctx, "tensorflow.RunGraphRequest.recv_key");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // .tensorflow.ExecutorOpts exec_opts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_exec_opts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_partial = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_partial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_last_partial_run = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          is_last_partial_run_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_handle = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_session_handle(), ptr, ctx, "tensorflow.RunGraphRequest.session_handle");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool store_errors_in_response_body = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          store_errors_in_response_body_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool create_worker_session_called = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          create_worker_session_called_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 request_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RunGraphRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RunGraphRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string graph_handle = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_graph_handle()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->graph_handle().data(), static_cast<int>(this->graph_handle().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.RunGraphRequest.graph_handle"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 step_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &step_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.NamedTensorProto send = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_send()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string recv_key = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_recv_key()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->recv_key(this->recv_key_size() - 1).data(),
            static_cast<int>(this->recv_key(this->recv_key_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.RunGraphRequest.recv_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.ExecutorOpts exec_opts = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_exec_opts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_partial = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_partial_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_last_partial_run = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_last_partial_run_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_handle = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_session_handle()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->session_handle().data(), static_cast<int>(this->session_handle().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.RunGraphRequest.session_handle"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool store_errors_in_response_body = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &store_errors_in_response_body_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool create_worker_session_called = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &create_worker_session_called_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 request_id = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RunGraphRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RunGraphRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RunGraphRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RunGraphRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string graph_handle = 1;
  if (this->graph_handle().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->graph_handle().data(), static_cast<int>(this->graph_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunGraphRequest.graph_handle");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->graph_handle(), output);
  }

  // int64 step_id = 2;
  if (this->step_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->step_id(), output);
  }

  // repeated .tensorflow.NamedTensorProto send = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->send_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->send(static_cast<int>(i)),
      output);
  }

  // repeated string recv_key = 4;
  for (int i = 0, n = this->recv_key_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->recv_key(i).data(), static_cast<int>(this->recv_key(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunGraphRequest.recv_key");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      4, this->recv_key(i), output);
  }

  // .tensorflow.ExecutorOpts exec_opts = 5;
  if (this->has_exec_opts()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::exec_opts(this), output);
  }

  // bool is_partial = 6;
  if (this->is_partial() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->is_partial(), output);
  }

  // bool is_last_partial_run = 7;
  if (this->is_last_partial_run() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->is_last_partial_run(), output);
  }

  // string session_handle = 8;
  if (this->session_handle().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), static_cast<int>(this->session_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunGraphRequest.session_handle");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->session_handle(), output);
  }

  // bool store_errors_in_response_body = 9;
  if (this->store_errors_in_response_body() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->store_errors_in_response_body(), output);
  }

  // bool create_worker_session_called = 10;
  if (this->create_worker_session_called() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(10, this->create_worker_session_called(), output);
  }

  // int64 request_id = 11;
  if (this->request_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(11, this->request_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.RunGraphRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* RunGraphRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RunGraphRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string graph_handle = 1;
  if (this->graph_handle().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->graph_handle().data(), static_cast<int>(this->graph_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunGraphRequest.graph_handle");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->graph_handle(), target);
  }

  // int64 step_id = 2;
  if (this->step_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->step_id(), target);
  }

  // repeated .tensorflow.NamedTensorProto send = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->send_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->send(static_cast<int>(i)), target);
  }

  // repeated string recv_key = 4;
  for (int i = 0, n = this->recv_key_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->recv_key(i).data(), static_cast<int>(this->recv_key(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunGraphRequest.recv_key");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(4, this->recv_key(i), target);
  }

  // .tensorflow.ExecutorOpts exec_opts = 5;
  if (this->has_exec_opts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::exec_opts(this), target);
  }

  // bool is_partial = 6;
  if (this->is_partial() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->is_partial(), target);
  }

  // bool is_last_partial_run = 7;
  if (this->is_last_partial_run() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->is_last_partial_run(), target);
  }

  // string session_handle = 8;
  if (this->session_handle().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), static_cast<int>(this->session_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunGraphRequest.session_handle");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        8, this->session_handle(), target);
  }

  // bool store_errors_in_response_body = 9;
  if (this->store_errors_in_response_body() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->store_errors_in_response_body(), target);
  }

  // bool create_worker_session_called = 10;
  if (this->create_worker_session_called() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->create_worker_session_called(), target);
  }

  // int64 request_id = 11;
  if (this->request_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->request_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RunGraphRequest)
  return target;
}

size_t RunGraphRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RunGraphRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.NamedTensorProto send = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->send_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->send(static_cast<int>(i)));
    }
  }

  // repeated string recv_key = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->recv_key_size());
  for (int i = 0, n = this->recv_key_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->recv_key(i));
  }

  // string graph_handle = 1;
  if (this->graph_handle().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->graph_handle());
  }

  // string session_handle = 8;
  if (this->session_handle().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->session_handle());
  }

  // .tensorflow.ExecutorOpts exec_opts = 5;
  if (this->has_exec_opts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *exec_opts_);
  }

  // int64 step_id = 2;
  if (this->step_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->step_id());
  }

  // int64 request_id = 11;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->request_id());
  }

  // bool create_worker_session_called = 10;
  if (this->create_worker_session_called() != 0) {
    total_size += 1 + 1;
  }

  // bool is_partial = 6;
  if (this->is_partial() != 0) {
    total_size += 1 + 1;
  }

  // bool is_last_partial_run = 7;
  if (this->is_last_partial_run() != 0) {
    total_size += 1 + 1;
  }

  // bool store_errors_in_response_body = 9;
  if (this->store_errors_in_response_body() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RunGraphRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RunGraphRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RunGraphRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RunGraphRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RunGraphRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RunGraphRequest)
    MergeFrom(*source);
  }
}

void RunGraphRequest::MergeFrom(const RunGraphRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RunGraphRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  send_.MergeFrom(from.send_);
  recv_key_.MergeFrom(from.recv_key_);
  if (from.graph_handle().size() > 0) {
    set_graph_handle(from.graph_handle());
  }
  if (from.session_handle().size() > 0) {
    set_session_handle(from.session_handle());
  }
  if (from.has_exec_opts()) {
    mutable_exec_opts()->::tensorflow::ExecutorOpts::MergeFrom(from.exec_opts());
  }
  if (from.step_id() != 0) {
    set_step_id(from.step_id());
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
  if (from.create_worker_session_called() != 0) {
    set_create_worker_session_called(from.create_worker_session_called());
  }
  if (from.is_partial() != 0) {
    set_is_partial(from.is_partial());
  }
  if (from.is_last_partial_run() != 0) {
    set_is_last_partial_run(from.is_last_partial_run());
  }
  if (from.store_errors_in_response_body() != 0) {
    set_store_errors_in_response_body(from.store_errors_in_response_body());
  }
}

void RunGraphRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RunGraphRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunGraphRequest::CopyFrom(const RunGraphRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RunGraphRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunGraphRequest::IsInitialized() const {
  return true;
}

void RunGraphRequest::Swap(RunGraphRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RunGraphRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void RunGraphRequest::UnsafeArenaSwap(RunGraphRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RunGraphRequest::InternalSwap(RunGraphRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&send_)->InternalSwap(CastToBase(&other->send_));
  recv_key_.InternalSwap(CastToBase(&other->recv_key_));
  graph_handle_.Swap(&other->graph_handle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  session_handle_.Swap(&other->session_handle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(exec_opts_, other->exec_opts_);
  swap(step_id_, other->step_id_);
  swap(request_id_, other->request_id_);
  swap(create_worker_session_called_, other->create_worker_session_called_);
  swap(is_partial_, other->is_partial_);
  swap(is_last_partial_run_, other->is_last_partial_run_);
  swap(store_errors_in_response_body_, other->store_errors_in_response_body_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RunGraphRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RunGraphResponse::InitAsDefaultInstance() {
  ::tensorflow::_RunGraphResponse_default_instance_._instance.get_mutable()->step_stats_ = const_cast< ::tensorflow::StepStats*>(
      ::tensorflow::StepStats::internal_default_instance());
  ::tensorflow::_RunGraphResponse_default_instance_._instance.get_mutable()->cost_graph_ = const_cast< ::tensorflow::CostGraphDef*>(
      ::tensorflow::CostGraphDef::internal_default_instance());
}
class RunGraphResponse::HasBitSetters {
 public:
  static const ::tensorflow::StepStats& step_stats(const RunGraphResponse* msg);
  static const ::tensorflow::CostGraphDef& cost_graph(const RunGraphResponse* msg);
};

const ::tensorflow::StepStats&
RunGraphResponse::HasBitSetters::step_stats(const RunGraphResponse* msg) {
  return *msg->step_stats_;
}
const ::tensorflow::CostGraphDef&
RunGraphResponse::HasBitSetters::cost_graph(const RunGraphResponse* msg) {
  return *msg->cost_graph_;
}
void RunGraphResponse::clear_recv() {
  recv_.Clear();
}
void RunGraphResponse::unsafe_arena_set_allocated_step_stats(
    ::tensorflow::StepStats* step_stats) {
  if (GetArenaNoVirtual() == nullptr) {
    delete step_stats_;
  }
  step_stats_ = step_stats;
  if (step_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RunGraphResponse.step_stats)
}
void RunGraphResponse::clear_step_stats() {
  if (GetArenaNoVirtual() == nullptr && step_stats_ != nullptr) {
    delete step_stats_;
  }
  step_stats_ = nullptr;
}
void RunGraphResponse::unsafe_arena_set_allocated_cost_graph(
    ::tensorflow::CostGraphDef* cost_graph) {
  if (GetArenaNoVirtual() == nullptr) {
    delete cost_graph_;
  }
  cost_graph_ = cost_graph;
  if (cost_graph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RunGraphResponse.cost_graph)
}
void RunGraphResponse::clear_cost_graph() {
  if (GetArenaNoVirtual() == nullptr && cost_graph_ != nullptr) {
    delete cost_graph_;
  }
  cost_graph_ = nullptr;
}
void RunGraphResponse::clear_partition_graph() {
  partition_graph_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunGraphResponse::kRecvFieldNumber;
const int RunGraphResponse::kStepStatsFieldNumber;
const int RunGraphResponse::kCostGraphFieldNumber;
const int RunGraphResponse::kPartitionGraphFieldNumber;
const int RunGraphResponse::kStatusCodeFieldNumber;
const int RunGraphResponse::kStatusErrorMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunGraphResponse::RunGraphResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RunGraphResponse)
}
RunGraphResponse::RunGraphResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  recv_(arena),
  partition_graph_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RunGraphResponse)
}
RunGraphResponse::RunGraphResponse(const RunGraphResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      recv_(from.recv_),
      partition_graph_(from.partition_graph_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.status_error_message().size() > 0) {
    status_error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_error_message(),
      GetArenaNoVirtual());
  }
  if (from.has_step_stats()) {
    step_stats_ = new ::tensorflow::StepStats(*from.step_stats_);
  } else {
    step_stats_ = nullptr;
  }
  if (from.has_cost_graph()) {
    cost_graph_ = new ::tensorflow::CostGraphDef(*from.cost_graph_);
  } else {
    cost_graph_ = nullptr;
  }
  status_code_ = from.status_code_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.RunGraphResponse)
}

void RunGraphResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RunGraphResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  status_error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&step_stats_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_code_) -
      reinterpret_cast<char*>(&step_stats_)) + sizeof(status_code_));
}

RunGraphResponse::~RunGraphResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.RunGraphResponse)
  SharedDtor();
}

void RunGraphResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  status_error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete step_stats_;
  if (this != internal_default_instance()) delete cost_graph_;
}

void RunGraphResponse::ArenaDtor(void* object) {
  RunGraphResponse* _this = reinterpret_cast< RunGraphResponse* >(object);
  (void)_this;
}
void RunGraphResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RunGraphResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RunGraphResponse& RunGraphResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RunGraphResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  return *internal_default_instance();
}


void RunGraphResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RunGraphResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recv_.Clear();
  partition_graph_.Clear();
  status_error_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && step_stats_ != nullptr) {
    delete step_stats_;
  }
  step_stats_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && cost_graph_ != nullptr) {
    delete cost_graph_;
  }
  cost_graph_ = nullptr;
  status_code_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RunGraphResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tensorflow.NamedTensorProto recv = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_recv(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // .tensorflow.StepStats step_stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_step_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.CostGraphDef cost_graph = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_cost_graph(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.GraphDef partition_graph = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_partition_graph(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // .tensorflow.error.Code status_code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_status_code(static_cast<::tensorflow::error::Code>(val));
        } else goto handle_unusual;
        continue;
      // string status_error_message = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_status_error_message(), ptr, ctx, "tensorflow.RunGraphResponse.status_error_message");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RunGraphResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RunGraphResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.NamedTensorProto recv = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_recv()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.StepStats step_stats = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_step_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.CostGraphDef cost_graph = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cost_graph()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.GraphDef partition_graph = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_partition_graph()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.error.Code status_code = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status_code(static_cast< ::tensorflow::error::Code >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string status_error_message = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_status_error_message()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->status_error_message().data(), static_cast<int>(this->status_error_message().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.RunGraphResponse.status_error_message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RunGraphResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RunGraphResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RunGraphResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RunGraphResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.NamedTensorProto recv = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->recv_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->recv(static_cast<int>(i)),
      output);
  }

  // .tensorflow.StepStats step_stats = 2;
  if (this->has_step_stats()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::step_stats(this), output);
  }

  // .tensorflow.CostGraphDef cost_graph = 3;
  if (this->has_cost_graph()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::cost_graph(this), output);
  }

  // repeated .tensorflow.GraphDef partition_graph = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->partition_graph_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->partition_graph(static_cast<int>(i)),
      output);
  }

  // .tensorflow.error.Code status_code = 5;
  if (this->status_code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->status_code(), output);
  }

  // string status_error_message = 6;
  if (this->status_error_message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->status_error_message().data(), static_cast<int>(this->status_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunGraphResponse.status_error_message");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->status_error_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.RunGraphResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* RunGraphResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RunGraphResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.NamedTensorProto recv = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->recv_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->recv(static_cast<int>(i)), target);
  }

  // .tensorflow.StepStats step_stats = 2;
  if (this->has_step_stats()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::step_stats(this), target);
  }

  // .tensorflow.CostGraphDef cost_graph = 3;
  if (this->has_cost_graph()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::cost_graph(this), target);
  }

  // repeated .tensorflow.GraphDef partition_graph = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->partition_graph_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->partition_graph(static_cast<int>(i)), target);
  }

  // .tensorflow.error.Code status_code = 5;
  if (this->status_code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->status_code(), target);
  }

  // string status_error_message = 6;
  if (this->status_error_message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->status_error_message().data(), static_cast<int>(this->status_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunGraphResponse.status_error_message");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->status_error_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RunGraphResponse)
  return target;
}

size_t RunGraphResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RunGraphResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.NamedTensorProto recv = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->recv_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->recv(static_cast<int>(i)));
    }
  }

  // repeated .tensorflow.GraphDef partition_graph = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->partition_graph_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->partition_graph(static_cast<int>(i)));
    }
  }

  // string status_error_message = 6;
  if (this->status_error_message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->status_error_message());
  }

  // .tensorflow.StepStats step_stats = 2;
  if (this->has_step_stats()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *step_stats_);
  }

  // .tensorflow.CostGraphDef cost_graph = 3;
  if (this->has_cost_graph()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cost_graph_);
  }

  // .tensorflow.error.Code status_code = 5;
  if (this->status_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status_code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RunGraphResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RunGraphResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RunGraphResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RunGraphResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RunGraphResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RunGraphResponse)
    MergeFrom(*source);
  }
}

void RunGraphResponse::MergeFrom(const RunGraphResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RunGraphResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  recv_.MergeFrom(from.recv_);
  partition_graph_.MergeFrom(from.partition_graph_);
  if (from.status_error_message().size() > 0) {
    set_status_error_message(from.status_error_message());
  }
  if (from.has_step_stats()) {
    mutable_step_stats()->::tensorflow::StepStats::MergeFrom(from.step_stats());
  }
  if (from.has_cost_graph()) {
    mutable_cost_graph()->::tensorflow::CostGraphDef::MergeFrom(from.cost_graph());
  }
  if (from.status_code() != 0) {
    set_status_code(from.status_code());
  }
}

void RunGraphResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RunGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunGraphResponse::CopyFrom(const RunGraphResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RunGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunGraphResponse::IsInitialized() const {
  return true;
}

void RunGraphResponse::Swap(RunGraphResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RunGraphResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void RunGraphResponse::UnsafeArenaSwap(RunGraphResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RunGraphResponse::InternalSwap(RunGraphResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&recv_)->InternalSwap(CastToBase(&other->recv_));
  CastToBase(&partition_graph_)->InternalSwap(CastToBase(&other->partition_graph_));
  status_error_message_.Swap(&other->status_error_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(step_stats_, other->step_stats_);
  swap(cost_graph_, other->cost_graph_);
  swap(status_code_, other->status_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RunGraphResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CleanupGraphRequest::InitAsDefaultInstance() {
}
class CleanupGraphRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CleanupGraphRequest::kStepIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CleanupGraphRequest::CleanupGraphRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CleanupGraphRequest)
}
CleanupGraphRequest::CleanupGraphRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CleanupGraphRequest)
}
CleanupGraphRequest::CleanupGraphRequest(const CleanupGraphRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  step_id_ = from.step_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.CleanupGraphRequest)
}

void CleanupGraphRequest::SharedCtor() {
  step_id_ = PROTOBUF_LONGLONG(0);
}

CleanupGraphRequest::~CleanupGraphRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.CleanupGraphRequest)
  SharedDtor();
}

void CleanupGraphRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void CleanupGraphRequest::ArenaDtor(void* object) {
  CleanupGraphRequest* _this = reinterpret_cast< CleanupGraphRequest* >(object);
  (void)_this;
}
void CleanupGraphRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CleanupGraphRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CleanupGraphRequest& CleanupGraphRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CleanupGraphRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  return *internal_default_instance();
}


void CleanupGraphRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CleanupGraphRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  step_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CleanupGraphRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 step_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          step_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CleanupGraphRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CleanupGraphRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 step_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &step_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CleanupGraphRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CleanupGraphRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CleanupGraphRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CleanupGraphRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 step_id = 1;
  if (this->step_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->step_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.CleanupGraphRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* CleanupGraphRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CleanupGraphRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 step_id = 1;
  if (this->step_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->step_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CleanupGraphRequest)
  return target;
}

size_t CleanupGraphRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CleanupGraphRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 step_id = 1;
  if (this->step_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->step_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CleanupGraphRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CleanupGraphRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CleanupGraphRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CleanupGraphRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CleanupGraphRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CleanupGraphRequest)
    MergeFrom(*source);
  }
}

void CleanupGraphRequest::MergeFrom(const CleanupGraphRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CleanupGraphRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.step_id() != 0) {
    set_step_id(from.step_id());
  }
}

void CleanupGraphRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CleanupGraphRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CleanupGraphRequest::CopyFrom(const CleanupGraphRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CleanupGraphRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanupGraphRequest::IsInitialized() const {
  return true;
}

void CleanupGraphRequest::Swap(CleanupGraphRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CleanupGraphRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void CleanupGraphRequest::UnsafeArenaSwap(CleanupGraphRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CleanupGraphRequest::InternalSwap(CleanupGraphRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(step_id_, other->step_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CleanupGraphRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CleanupGraphResponse::InitAsDefaultInstance() {
}
class CleanupGraphResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CleanupGraphResponse::CleanupGraphResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CleanupGraphResponse)
}
CleanupGraphResponse::CleanupGraphResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CleanupGraphResponse)
}
CleanupGraphResponse::CleanupGraphResponse(const CleanupGraphResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.CleanupGraphResponse)
}

void CleanupGraphResponse::SharedCtor() {
}

CleanupGraphResponse::~CleanupGraphResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.CleanupGraphResponse)
  SharedDtor();
}

void CleanupGraphResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void CleanupGraphResponse::ArenaDtor(void* object) {
  CleanupGraphResponse* _this = reinterpret_cast< CleanupGraphResponse* >(object);
  (void)_this;
}
void CleanupGraphResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CleanupGraphResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CleanupGraphResponse& CleanupGraphResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CleanupGraphResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  return *internal_default_instance();
}


void CleanupGraphResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CleanupGraphResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CleanupGraphResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CleanupGraphResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CleanupGraphResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CleanupGraphResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CleanupGraphResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CleanupGraphResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CleanupGraphResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.CleanupGraphResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* CleanupGraphResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CleanupGraphResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CleanupGraphResponse)
  return target;
}

size_t CleanupGraphResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CleanupGraphResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CleanupGraphResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CleanupGraphResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CleanupGraphResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CleanupGraphResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CleanupGraphResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CleanupGraphResponse)
    MergeFrom(*source);
  }
}

void CleanupGraphResponse::MergeFrom(const CleanupGraphResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CleanupGraphResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CleanupGraphResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CleanupGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CleanupGraphResponse::CopyFrom(const CleanupGraphResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CleanupGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanupGraphResponse::IsInitialized() const {
  return true;
}

void CleanupGraphResponse::Swap(CleanupGraphResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CleanupGraphResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void CleanupGraphResponse::UnsafeArenaSwap(CleanupGraphResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CleanupGraphResponse::InternalSwap(CleanupGraphResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CleanupGraphResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecvTensorRequest::InitAsDefaultInstance() {
  ::tensorflow::_RecvTensorRequest_default_instance_._instance.get_mutable()->client_locality_ = const_cast< ::tensorflow::DeviceLocality*>(
      ::tensorflow::DeviceLocality::internal_default_instance());
  ::tensorflow::_RecvTensorRequest_default_instance_._instance.get_mutable()->server_locality_ = const_cast< ::tensorflow::DeviceLocality*>(
      ::tensorflow::DeviceLocality::internal_default_instance());
  ::tensorflow::_RecvTensorRequest_default_instance_._instance.get_mutable()->transport_options_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class RecvTensorRequest::HasBitSetters {
 public:
  static const ::tensorflow::DeviceLocality& client_locality(const RecvTensorRequest* msg);
  static const ::tensorflow::DeviceLocality& server_locality(const RecvTensorRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::Any& transport_options(const RecvTensorRequest* msg);
};

const ::tensorflow::DeviceLocality&
RecvTensorRequest::HasBitSetters::client_locality(const RecvTensorRequest* msg) {
  return *msg->client_locality_;
}
const ::tensorflow::DeviceLocality&
RecvTensorRequest::HasBitSetters::server_locality(const RecvTensorRequest* msg) {
  return *msg->server_locality_;
}
const PROTOBUF_NAMESPACE_ID::Any&
RecvTensorRequest::HasBitSetters::transport_options(const RecvTensorRequest* msg) {
  return *msg->transport_options_;
}
void RecvTensorRequest::unsafe_arena_set_allocated_client_locality(
    ::tensorflow::DeviceLocality* client_locality) {
  if (GetArenaNoVirtual() == nullptr) {
    delete client_locality_;
  }
  client_locality_ = client_locality;
  if (client_locality) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RecvTensorRequest.client_locality)
}
void RecvTensorRequest::clear_client_locality() {
  if (GetArenaNoVirtual() == nullptr && client_locality_ != nullptr) {
    delete client_locality_;
  }
  client_locality_ = nullptr;
}
void RecvTensorRequest::unsafe_arena_set_allocated_server_locality(
    ::tensorflow::DeviceLocality* server_locality) {
  if (GetArenaNoVirtual() == nullptr) {
    delete server_locality_;
  }
  server_locality_ = server_locality;
  if (server_locality) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RecvTensorRequest.server_locality)
}
void RecvTensorRequest::clear_server_locality() {
  if (GetArenaNoVirtual() == nullptr && server_locality_ != nullptr) {
    delete server_locality_;
  }
  server_locality_ = nullptr;
}
void RecvTensorRequest::unsafe_arena_set_allocated_transport_options(
    PROTOBUF_NAMESPACE_ID::Any* transport_options) {
  if (GetArenaNoVirtual() == nullptr) {
    delete transport_options_;
  }
  transport_options_ = transport_options;
  if (transport_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RecvTensorRequest.transport_options)
}
void RecvTensorRequest::clear_transport_options() {
  if (GetArenaNoVirtual() == nullptr && transport_options_ != nullptr) {
    delete transport_options_;
  }
  transport_options_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecvTensorRequest::kStepIdFieldNumber;
const int RecvTensorRequest::kRendezvousKeyFieldNumber;
const int RecvTensorRequest::kDmaOkFieldNumber;
const int RecvTensorRequest::kClientLocalityFieldNumber;
const int RecvTensorRequest::kServerLocalityFieldNumber;
const int RecvTensorRequest::kTransportOptionsFieldNumber;
const int RecvTensorRequest::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecvTensorRequest::RecvTensorRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RecvTensorRequest)
}
RecvTensorRequest::RecvTensorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RecvTensorRequest)
}
RecvTensorRequest::RecvTensorRequest(const RecvTensorRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rendezvous_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.rendezvous_key().size() > 0) {
    rendezvous_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rendezvous_key(),
      GetArenaNoVirtual());
  }
  if (from.has_client_locality()) {
    client_locality_ = new ::tensorflow::DeviceLocality(*from.client_locality_);
  } else {
    client_locality_ = nullptr;
  }
  if (from.has_server_locality()) {
    server_locality_ = new ::tensorflow::DeviceLocality(*from.server_locality_);
  } else {
    server_locality_ = nullptr;
  }
  if (from.has_transport_options()) {
    transport_options_ = new PROTOBUF_NAMESPACE_ID::Any(*from.transport_options_);
  } else {
    transport_options_ = nullptr;
  }
  ::memcpy(&step_id_, &from.step_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dma_ok_) -
    reinterpret_cast<char*>(&step_id_)) + sizeof(dma_ok_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.RecvTensorRequest)
}

void RecvTensorRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecvTensorRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  rendezvous_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&client_locality_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dma_ok_) -
      reinterpret_cast<char*>(&client_locality_)) + sizeof(dma_ok_));
}

RecvTensorRequest::~RecvTensorRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.RecvTensorRequest)
  SharedDtor();
}

void RecvTensorRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  rendezvous_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete client_locality_;
  if (this != internal_default_instance()) delete server_locality_;
  if (this != internal_default_instance()) delete transport_options_;
}

void RecvTensorRequest::ArenaDtor(void* object) {
  RecvTensorRequest* _this = reinterpret_cast< RecvTensorRequest* >(object);
  (void)_this;
}
void RecvTensorRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecvTensorRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecvTensorRequest& RecvTensorRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecvTensorRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  return *internal_default_instance();
}


void RecvTensorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RecvTensorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rendezvous_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && client_locality_ != nullptr) {
    delete client_locality_;
  }
  client_locality_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && server_locality_ != nullptr) {
    delete server_locality_;
  }
  server_locality_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && transport_options_ != nullptr) {
    delete transport_options_;
  }
  transport_options_ = nullptr;
  ::memset(&step_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dma_ok_) -
      reinterpret_cast<char*>(&step_id_)) + sizeof(dma_ok_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RecvTensorRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 step_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          step_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string rendezvous_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_rendezvous_key(), ptr, ctx, "tensorflow.RecvTensorRequest.rendezvous_key");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool dma_ok = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          dma_ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.DeviceLocality client_locality = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_client_locality(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.DeviceLocality server_locality = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_server_locality(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any transport_options = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_transport_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 request_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RecvTensorRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RecvTensorRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 step_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &step_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string rendezvous_key = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_rendezvous_key()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->rendezvous_key().data(), static_cast<int>(this->rendezvous_key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.RecvTensorRequest.rendezvous_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool dma_ok = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dma_ok_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.DeviceLocality client_locality = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_client_locality()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.DeviceLocality server_locality = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_server_locality()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any transport_options = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_transport_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 request_id = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RecvTensorRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RecvTensorRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RecvTensorRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RecvTensorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 step_id = 1;
  if (this->step_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->step_id(), output);
  }

  // string rendezvous_key = 2;
  if (this->rendezvous_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->rendezvous_key().data(), static_cast<int>(this->rendezvous_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RecvTensorRequest.rendezvous_key");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rendezvous_key(), output);
  }

  // bool dma_ok = 3;
  if (this->dma_ok() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->dma_ok(), output);
  }

  // .tensorflow.DeviceLocality client_locality = 4;
  if (this->has_client_locality()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::client_locality(this), output);
  }

  // .tensorflow.DeviceLocality server_locality = 5;
  if (this->has_server_locality()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::server_locality(this), output);
  }

  // .google.protobuf.Any transport_options = 6;
  if (this->has_transport_options()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::transport_options(this), output);
  }

  // int64 request_id = 7;
  if (this->request_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->request_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.RecvTensorRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* RecvTensorRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RecvTensorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 step_id = 1;
  if (this->step_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->step_id(), target);
  }

  // string rendezvous_key = 2;
  if (this->rendezvous_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->rendezvous_key().data(), static_cast<int>(this->rendezvous_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RecvTensorRequest.rendezvous_key");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->rendezvous_key(), target);
  }

  // bool dma_ok = 3;
  if (this->dma_ok() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->dma_ok(), target);
  }

  // .tensorflow.DeviceLocality client_locality = 4;
  if (this->has_client_locality()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::client_locality(this), target);
  }

  // .tensorflow.DeviceLocality server_locality = 5;
  if (this->has_server_locality()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::server_locality(this), target);
  }

  // .google.protobuf.Any transport_options = 6;
  if (this->has_transport_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::transport_options(this), target);
  }

  // int64 request_id = 7;
  if (this->request_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->request_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RecvTensorRequest)
  return target;
}

size_t RecvTensorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RecvTensorRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rendezvous_key = 2;
  if (this->rendezvous_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->rendezvous_key());
  }

  // .tensorflow.DeviceLocality client_locality = 4;
  if (this->has_client_locality()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_locality_);
  }

  // .tensorflow.DeviceLocality server_locality = 5;
  if (this->has_server_locality()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_locality_);
  }

  // .google.protobuf.Any transport_options = 6;
  if (this->has_transport_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transport_options_);
  }

  // int64 step_id = 1;
  if (this->step_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->step_id());
  }

  // int64 request_id = 7;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->request_id());
  }

  // bool dma_ok = 3;
  if (this->dma_ok() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecvTensorRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RecvTensorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RecvTensorRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecvTensorRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RecvTensorRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RecvTensorRequest)
    MergeFrom(*source);
  }
}

void RecvTensorRequest::MergeFrom(const RecvTensorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RecvTensorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rendezvous_key().size() > 0) {
    set_rendezvous_key(from.rendezvous_key());
  }
  if (from.has_client_locality()) {
    mutable_client_locality()->::tensorflow::DeviceLocality::MergeFrom(from.client_locality());
  }
  if (from.has_server_locality()) {
    mutable_server_locality()->::tensorflow::DeviceLocality::MergeFrom(from.server_locality());
  }
  if (from.has_transport_options()) {
    mutable_transport_options()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from.transport_options());
  }
  if (from.step_id() != 0) {
    set_step_id(from.step_id());
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
  if (from.dma_ok() != 0) {
    set_dma_ok(from.dma_ok());
  }
}

void RecvTensorRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RecvTensorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecvTensorRequest::CopyFrom(const RecvTensorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RecvTensorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecvTensorRequest::IsInitialized() const {
  return true;
}

void RecvTensorRequest::Swap(RecvTensorRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RecvTensorRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void RecvTensorRequest::UnsafeArenaSwap(RecvTensorRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RecvTensorRequest::InternalSwap(RecvTensorRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  rendezvous_key_.Swap(&other->rendezvous_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(client_locality_, other->client_locality_);
  swap(server_locality_, other->server_locality_);
  swap(transport_options_, other->transport_options_);
  swap(step_id_, other->step_id_);
  swap(request_id_, other->request_id_);
  swap(dma_ok_, other->dma_ok_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecvTensorRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecvTensorResponse::InitAsDefaultInstance() {
  ::tensorflow::_RecvTensorResponse_default_instance_._instance.get_mutable()->tensor_ = const_cast< ::tensorflow::TensorProto*>(
      ::tensorflow::TensorProto::internal_default_instance());
  ::tensorflow::_RecvTensorResponse_default_instance_._instance.get_mutable()->transport_options_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class RecvTensorResponse::HasBitSetters {
 public:
  static const ::tensorflow::TensorProto& tensor(const RecvTensorResponse* msg);
  static const PROTOBUF_NAMESPACE_ID::Any& transport_options(const RecvTensorResponse* msg);
};

const ::tensorflow::TensorProto&
RecvTensorResponse::HasBitSetters::tensor(const RecvTensorResponse* msg) {
  return *msg->tensor_;
}
const PROTOBUF_NAMESPACE_ID::Any&
RecvTensorResponse::HasBitSetters::transport_options(const RecvTensorResponse* msg) {
  return *msg->transport_options_;
}
void RecvTensorResponse::unsafe_arena_set_allocated_tensor(
    ::tensorflow::TensorProto* tensor) {
  if (GetArenaNoVirtual() == nullptr) {
    delete tensor_;
  }
  tensor_ = tensor;
  if (tensor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RecvTensorResponse.tensor)
}
void RecvTensorResponse::clear_tensor() {
  if (GetArenaNoVirtual() == nullptr && tensor_ != nullptr) {
    delete tensor_;
  }
  tensor_ = nullptr;
}
void RecvTensorResponse::unsafe_arena_set_allocated_transport_options(
    PROTOBUF_NAMESPACE_ID::Any* transport_options) {
  if (GetArenaNoVirtual() == nullptr) {
    delete transport_options_;
  }
  transport_options_ = transport_options;
  if (transport_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RecvTensorResponse.transport_options)
}
void RecvTensorResponse::clear_transport_options() {
  if (GetArenaNoVirtual() == nullptr && transport_options_ != nullptr) {
    delete transport_options_;
  }
  transport_options_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecvTensorResponse::kTensorFieldNumber;
const int RecvTensorResponse::kIsDeadFieldNumber;
const int RecvTensorResponse::kSendStartMicrosFieldNumber;
const int RecvTensorResponse::kTransportOptionsFieldNumber;
const int RecvTensorResponse::kRequireAckFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecvTensorResponse::RecvTensorResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RecvTensorResponse)
}
RecvTensorResponse::RecvTensorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RecvTensorResponse)
}
RecvTensorResponse::RecvTensorResponse(const RecvTensorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tensor()) {
    tensor_ = new ::tensorflow::TensorProto(*from.tensor_);
  } else {
    tensor_ = nullptr;
  }
  if (from.has_transport_options()) {
    transport_options_ = new PROTOBUF_NAMESPACE_ID::Any(*from.transport_options_);
  } else {
    transport_options_ = nullptr;
  }
  ::memcpy(&send_start_micros_, &from.send_start_micros_,
    static_cast<size_t>(reinterpret_cast<char*>(&require_ack_) -
    reinterpret_cast<char*>(&send_start_micros_)) + sizeof(require_ack_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.RecvTensorResponse)
}

void RecvTensorResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecvTensorResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  ::memset(&tensor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&require_ack_) -
      reinterpret_cast<char*>(&tensor_)) + sizeof(require_ack_));
}

RecvTensorResponse::~RecvTensorResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.RecvTensorResponse)
  SharedDtor();
}

void RecvTensorResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete tensor_;
  if (this != internal_default_instance()) delete transport_options_;
}

void RecvTensorResponse::ArenaDtor(void* object) {
  RecvTensorResponse* _this = reinterpret_cast< RecvTensorResponse* >(object);
  (void)_this;
}
void RecvTensorResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecvTensorResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecvTensorResponse& RecvTensorResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecvTensorResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  return *internal_default_instance();
}


void RecvTensorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RecvTensorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && tensor_ != nullptr) {
    delete tensor_;
  }
  tensor_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && transport_options_ != nullptr) {
    delete transport_options_;
  }
  transport_options_ = nullptr;
  ::memset(&send_start_micros_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&require_ack_) -
      reinterpret_cast<char*>(&send_start_micros_)) + sizeof(require_ack_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RecvTensorResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.TensorProto tensor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_tensor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_dead = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_dead_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 send_start_micros = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          send_start_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any transport_options = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_transport_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool require_ack = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          require_ack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RecvTensorResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RecvTensorResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.TensorProto tensor = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tensor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_dead = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dead_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 send_start_micros = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &send_start_micros_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any transport_options = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_transport_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool require_ack = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &require_ack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RecvTensorResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RecvTensorResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RecvTensorResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RecvTensorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.TensorProto tensor = 1;
  if (this->has_tensor()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::tensor(this), output);
  }

  // bool is_dead = 2;
  if (this->is_dead() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->is_dead(), output);
  }

  // int64 send_start_micros = 3;
  if (this->send_start_micros() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->send_start_micros(), output);
  }

  // .google.protobuf.Any transport_options = 4;
  if (this->has_transport_options()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::transport_options(this), output);
  }

  // bool require_ack = 5;
  if (this->require_ack() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->require_ack(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.RecvTensorResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* RecvTensorResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RecvTensorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.TensorProto tensor = 1;
  if (this->has_tensor()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::tensor(this), target);
  }

  // bool is_dead = 2;
  if (this->is_dead() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->is_dead(), target);
  }

  // int64 send_start_micros = 3;
  if (this->send_start_micros() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->send_start_micros(), target);
  }

  // .google.protobuf.Any transport_options = 4;
  if (this->has_transport_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::transport_options(this), target);
  }

  // bool require_ack = 5;
  if (this->require_ack() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->require_ack(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RecvTensorResponse)
  return target;
}

size_t RecvTensorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RecvTensorResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.TensorProto tensor = 1;
  if (this->has_tensor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tensor_);
  }

  // .google.protobuf.Any transport_options = 4;
  if (this->has_transport_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transport_options_);
  }

  // int64 send_start_micros = 3;
  if (this->send_start_micros() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->send_start_micros());
  }

  // bool is_dead = 2;
  if (this->is_dead() != 0) {
    total_size += 1 + 1;
  }

  // bool require_ack = 5;
  if (this->require_ack() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecvTensorResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RecvTensorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RecvTensorResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecvTensorResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RecvTensorResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RecvTensorResponse)
    MergeFrom(*source);
  }
}

void RecvTensorResponse::MergeFrom(const RecvTensorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RecvTensorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tensor()) {
    mutable_tensor()->::tensorflow::TensorProto::MergeFrom(from.tensor());
  }
  if (from.has_transport_options()) {
    mutable_transport_options()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from.transport_options());
  }
  if (from.send_start_micros() != 0) {
    set_send_start_micros(from.send_start_micros());
  }
  if (from.is_dead() != 0) {
    set_is_dead(from.is_dead());
  }
  if (from.require_ack() != 0) {
    set_require_ack(from.require_ack());
  }
}

void RecvTensorResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RecvTensorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecvTensorResponse::CopyFrom(const RecvTensorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RecvTensorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecvTensorResponse::IsInitialized() const {
  return true;
}

void RecvTensorResponse::Swap(RecvTensorResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RecvTensorResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void RecvTensorResponse::UnsafeArenaSwap(RecvTensorResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RecvTensorResponse::InternalSwap(RecvTensorResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(tensor_, other->tensor_);
  swap(transport_options_, other->transport_options_);
  swap(send_start_micros_, other->send_start_micros_);
  swap(is_dead_, other->is_dead_);
  swap(require_ack_, other->require_ack_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecvTensorResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MarkRecvFinishedRequest::InitAsDefaultInstance() {
}
class MarkRecvFinishedRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarkRecvFinishedRequest::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarkRecvFinishedRequest::MarkRecvFinishedRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.MarkRecvFinishedRequest)
}
MarkRecvFinishedRequest::MarkRecvFinishedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MarkRecvFinishedRequest)
}
MarkRecvFinishedRequest::MarkRecvFinishedRequest(const MarkRecvFinishedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_ = from.request_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.MarkRecvFinishedRequest)
}

void MarkRecvFinishedRequest::SharedCtor() {
  request_id_ = PROTOBUF_LONGLONG(0);
}

MarkRecvFinishedRequest::~MarkRecvFinishedRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.MarkRecvFinishedRequest)
  SharedDtor();
}

void MarkRecvFinishedRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void MarkRecvFinishedRequest::ArenaDtor(void* object) {
  MarkRecvFinishedRequest* _this = reinterpret_cast< MarkRecvFinishedRequest* >(object);
  (void)_this;
}
void MarkRecvFinishedRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarkRecvFinishedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarkRecvFinishedRequest& MarkRecvFinishedRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarkRecvFinishedRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  return *internal_default_instance();
}


void MarkRecvFinishedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MarkRecvFinishedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MarkRecvFinishedRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MarkRecvFinishedRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.MarkRecvFinishedRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 request_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.MarkRecvFinishedRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.MarkRecvFinishedRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MarkRecvFinishedRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.MarkRecvFinishedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 request_id = 1;
  if (this->request_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->request_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.MarkRecvFinishedRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* MarkRecvFinishedRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MarkRecvFinishedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 request_id = 1;
  if (this->request_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->request_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MarkRecvFinishedRequest)
  return target;
}

size_t MarkRecvFinishedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MarkRecvFinishedRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 request_id = 1;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->request_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarkRecvFinishedRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.MarkRecvFinishedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MarkRecvFinishedRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarkRecvFinishedRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.MarkRecvFinishedRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.MarkRecvFinishedRequest)
    MergeFrom(*source);
  }
}

void MarkRecvFinishedRequest::MergeFrom(const MarkRecvFinishedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MarkRecvFinishedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
}

void MarkRecvFinishedRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.MarkRecvFinishedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarkRecvFinishedRequest::CopyFrom(const MarkRecvFinishedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MarkRecvFinishedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkRecvFinishedRequest::IsInitialized() const {
  return true;
}

void MarkRecvFinishedRequest::Swap(MarkRecvFinishedRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MarkRecvFinishedRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void MarkRecvFinishedRequest::UnsafeArenaSwap(MarkRecvFinishedRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MarkRecvFinishedRequest::InternalSwap(MarkRecvFinishedRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(request_id_, other->request_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarkRecvFinishedRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MarkRecvFinishedResponse::InitAsDefaultInstance() {
}
class MarkRecvFinishedResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarkRecvFinishedResponse::MarkRecvFinishedResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.MarkRecvFinishedResponse)
}
MarkRecvFinishedResponse::MarkRecvFinishedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MarkRecvFinishedResponse)
}
MarkRecvFinishedResponse::MarkRecvFinishedResponse(const MarkRecvFinishedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.MarkRecvFinishedResponse)
}

void MarkRecvFinishedResponse::SharedCtor() {
}

MarkRecvFinishedResponse::~MarkRecvFinishedResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.MarkRecvFinishedResponse)
  SharedDtor();
}

void MarkRecvFinishedResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void MarkRecvFinishedResponse::ArenaDtor(void* object) {
  MarkRecvFinishedResponse* _this = reinterpret_cast< MarkRecvFinishedResponse* >(object);
  (void)_this;
}
void MarkRecvFinishedResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarkRecvFinishedResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarkRecvFinishedResponse& MarkRecvFinishedResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarkRecvFinishedResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  return *internal_default_instance();
}


void MarkRecvFinishedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MarkRecvFinishedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MarkRecvFinishedResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MarkRecvFinishedResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.MarkRecvFinishedResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.MarkRecvFinishedResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.MarkRecvFinishedResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MarkRecvFinishedResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.MarkRecvFinishedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.MarkRecvFinishedResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* MarkRecvFinishedResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MarkRecvFinishedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MarkRecvFinishedResponse)
  return target;
}

size_t MarkRecvFinishedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MarkRecvFinishedResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarkRecvFinishedResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.MarkRecvFinishedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MarkRecvFinishedResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarkRecvFinishedResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.MarkRecvFinishedResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.MarkRecvFinishedResponse)
    MergeFrom(*source);
  }
}

void MarkRecvFinishedResponse::MergeFrom(const MarkRecvFinishedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MarkRecvFinishedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MarkRecvFinishedResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.MarkRecvFinishedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarkRecvFinishedResponse::CopyFrom(const MarkRecvFinishedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MarkRecvFinishedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkRecvFinishedResponse::IsInitialized() const {
  return true;
}

void MarkRecvFinishedResponse::Swap(MarkRecvFinishedResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MarkRecvFinishedResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void MarkRecvFinishedResponse::UnsafeArenaSwap(MarkRecvFinishedResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MarkRecvFinishedResponse::InternalSwap(MarkRecvFinishedResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarkRecvFinishedResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoggingRequest::InitAsDefaultInstance() {
}
class LoggingRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoggingRequest::kEnableRpcLoggingFieldNumber;
const int LoggingRequest::kDisableRpcLoggingFieldNumber;
const int LoggingRequest::kClearFieldNumber;
const int LoggingRequest::kFetchStepIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoggingRequest::LoggingRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.LoggingRequest)
}
LoggingRequest::LoggingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  fetch_step_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.LoggingRequest)
}
LoggingRequest::LoggingRequest(const LoggingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      fetch_step_id_(from.fetch_step_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enable_rpc_logging_, &from.enable_rpc_logging_,
    static_cast<size_t>(reinterpret_cast<char*>(&clear_) -
    reinterpret_cast<char*>(&enable_rpc_logging_)) + sizeof(clear_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.LoggingRequest)
}

void LoggingRequest::SharedCtor() {
  ::memset(&enable_rpc_logging_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clear_) -
      reinterpret_cast<char*>(&enable_rpc_logging_)) + sizeof(clear_));
}

LoggingRequest::~LoggingRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.LoggingRequest)
  SharedDtor();
}

void LoggingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void LoggingRequest::ArenaDtor(void* object) {
  LoggingRequest* _this = reinterpret_cast< LoggingRequest* >(object);
  (void)_this;
}
void LoggingRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoggingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoggingRequest& LoggingRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoggingRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  return *internal_default_instance();
}


void LoggingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.LoggingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fetch_step_id_.Clear();
  ::memset(&enable_rpc_logging_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clear_) -
      reinterpret_cast<char*>(&enable_rpc_logging_)) + sizeof(clear_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LoggingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enable_rpc_logging = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enable_rpc_logging_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool clear = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          clear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 fetch_step_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_fetch_step_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          add_fetch_step_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool disable_rpc_logging = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          disable_rpc_logging_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LoggingRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.LoggingRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enable_rpc_logging = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_rpc_logging_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool clear = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 fetch_step_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_fetch_step_id())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 26u, input, this->mutable_fetch_step_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool disable_rpc_logging = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_rpc_logging_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.LoggingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.LoggingRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LoggingRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.LoggingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable_rpc_logging = 1;
  if (this->enable_rpc_logging() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->enable_rpc_logging(), output);
  }

  // bool clear = 2;
  if (this->clear() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->clear(), output);
  }

  // repeated int64 fetch_step_id = 3;
  if (this->fetch_step_id_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_fetch_step_id_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->fetch_step_id_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64NoTag(
      this->fetch_step_id(i), output);
  }

  // bool disable_rpc_logging = 4;
  if (this->disable_rpc_logging() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->disable_rpc_logging(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.LoggingRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* LoggingRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.LoggingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable_rpc_logging = 1;
  if (this->enable_rpc_logging() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->enable_rpc_logging(), target);
  }

  // bool clear = 2;
  if (this->clear() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->clear(), target);
  }

  // repeated int64 fetch_step_id = 3;
  if (this->fetch_step_id_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _fetch_step_id_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->fetch_step_id_, target);
  }

  // bool disable_rpc_logging = 4;
  if (this->disable_rpc_logging() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->disable_rpc_logging(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.LoggingRequest)
  return target;
}

size_t LoggingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.LoggingRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 fetch_step_id = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->fetch_step_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _fetch_step_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bool enable_rpc_logging = 1;
  if (this->enable_rpc_logging() != 0) {
    total_size += 1 + 1;
  }

  // bool disable_rpc_logging = 4;
  if (this->disable_rpc_logging() != 0) {
    total_size += 1 + 1;
  }

  // bool clear = 2;
  if (this->clear() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoggingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.LoggingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LoggingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoggingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.LoggingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.LoggingRequest)
    MergeFrom(*source);
  }
}

void LoggingRequest::MergeFrom(const LoggingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.LoggingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fetch_step_id_.MergeFrom(from.fetch_step_id_);
  if (from.enable_rpc_logging() != 0) {
    set_enable_rpc_logging(from.enable_rpc_logging());
  }
  if (from.disable_rpc_logging() != 0) {
    set_disable_rpc_logging(from.disable_rpc_logging());
  }
  if (from.clear() != 0) {
    set_clear(from.clear());
  }
}

void LoggingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.LoggingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoggingRequest::CopyFrom(const LoggingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.LoggingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoggingRequest::IsInitialized() const {
  return true;
}

void LoggingRequest::Swap(LoggingRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LoggingRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void LoggingRequest::UnsafeArenaSwap(LoggingRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LoggingRequest::InternalSwap(LoggingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fetch_step_id_.InternalSwap(&other->fetch_step_id_);
  swap(enable_rpc_logging_, other->enable_rpc_logging_);
  swap(disable_rpc_logging_, other->disable_rpc_logging_);
  swap(clear_, other->clear_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoggingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LabeledStepStats::InitAsDefaultInstance() {
  ::tensorflow::_LabeledStepStats_default_instance_._instance.get_mutable()->step_stats_ = const_cast< ::tensorflow::StepStats*>(
      ::tensorflow::StepStats::internal_default_instance());
}
class LabeledStepStats::HasBitSetters {
 public:
  static const ::tensorflow::StepStats& step_stats(const LabeledStepStats* msg);
};

const ::tensorflow::StepStats&
LabeledStepStats::HasBitSetters::step_stats(const LabeledStepStats* msg) {
  return *msg->step_stats_;
}
void LabeledStepStats::unsafe_arena_set_allocated_step_stats(
    ::tensorflow::StepStats* step_stats) {
  if (GetArenaNoVirtual() == nullptr) {
    delete step_stats_;
  }
  step_stats_ = step_stats;
  if (step_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.LabeledStepStats.step_stats)
}
void LabeledStepStats::clear_step_stats() {
  if (GetArenaNoVirtual() == nullptr && step_stats_ != nullptr) {
    delete step_stats_;
  }
  step_stats_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LabeledStepStats::kStepIdFieldNumber;
const int LabeledStepStats::kStepStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LabeledStepStats::LabeledStepStats()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.LabeledStepStats)
}
LabeledStepStats::LabeledStepStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.LabeledStepStats)
}
LabeledStepStats::LabeledStepStats(const LabeledStepStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_step_stats()) {
    step_stats_ = new ::tensorflow::StepStats(*from.step_stats_);
  } else {
    step_stats_ = nullptr;
  }
  step_id_ = from.step_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.LabeledStepStats)
}

void LabeledStepStats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LabeledStepStats_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  ::memset(&step_stats_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&step_id_) -
      reinterpret_cast<char*>(&step_stats_)) + sizeof(step_id_));
}

LabeledStepStats::~LabeledStepStats() {
  // @@protoc_insertion_point(destructor:tensorflow.LabeledStepStats)
  SharedDtor();
}

void LabeledStepStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete step_stats_;
}

void LabeledStepStats::ArenaDtor(void* object) {
  LabeledStepStats* _this = reinterpret_cast< LabeledStepStats* >(object);
  (void)_this;
}
void LabeledStepStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LabeledStepStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LabeledStepStats& LabeledStepStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LabeledStepStats_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  return *internal_default_instance();
}


void LabeledStepStats::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.LabeledStepStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && step_stats_ != nullptr) {
    delete step_stats_;
  }
  step_stats_ = nullptr;
  step_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LabeledStepStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 step_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          step_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.StepStats step_stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_step_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LabeledStepStats::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.LabeledStepStats)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 step_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &step_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.StepStats step_stats = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_step_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.LabeledStepStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.LabeledStepStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LabeledStepStats::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.LabeledStepStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 step_id = 1;
  if (this->step_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->step_id(), output);
  }

  // .tensorflow.StepStats step_stats = 2;
  if (this->has_step_stats()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::step_stats(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.LabeledStepStats)
}

::PROTOBUF_NAMESPACE_ID::uint8* LabeledStepStats::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.LabeledStepStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 step_id = 1;
  if (this->step_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->step_id(), target);
  }

  // .tensorflow.StepStats step_stats = 2;
  if (this->has_step_stats()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::step_stats(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.LabeledStepStats)
  return target;
}

size_t LabeledStepStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.LabeledStepStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.StepStats step_stats = 2;
  if (this->has_step_stats()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *step_stats_);
  }

  // int64 step_id = 1;
  if (this->step_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->step_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabeledStepStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.LabeledStepStats)
  GOOGLE_DCHECK_NE(&from, this);
  const LabeledStepStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LabeledStepStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.LabeledStepStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.LabeledStepStats)
    MergeFrom(*source);
  }
}

void LabeledStepStats::MergeFrom(const LabeledStepStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.LabeledStepStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_step_stats()) {
    mutable_step_stats()->::tensorflow::StepStats::MergeFrom(from.step_stats());
  }
  if (from.step_id() != 0) {
    set_step_id(from.step_id());
  }
}

void LabeledStepStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.LabeledStepStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabeledStepStats::CopyFrom(const LabeledStepStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.LabeledStepStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabeledStepStats::IsInitialized() const {
  return true;
}

void LabeledStepStats::Swap(LabeledStepStats* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LabeledStepStats* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void LabeledStepStats::UnsafeArenaSwap(LabeledStepStats* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LabeledStepStats::InternalSwap(LabeledStepStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(step_stats_, other->step_stats_);
  swap(step_id_, other->step_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LabeledStepStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoggingResponse::InitAsDefaultInstance() {
}
class LoggingResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoggingResponse::kStepFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoggingResponse::LoggingResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.LoggingResponse)
}
LoggingResponse::LoggingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  step_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.LoggingResponse)
}
LoggingResponse::LoggingResponse(const LoggingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      step_(from.step_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.LoggingResponse)
}

void LoggingResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoggingResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
}

LoggingResponse::~LoggingResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.LoggingResponse)
  SharedDtor();
}

void LoggingResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void LoggingResponse::ArenaDtor(void* object) {
  LoggingResponse* _this = reinterpret_cast< LoggingResponse* >(object);
  (void)_this;
}
void LoggingResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoggingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoggingResponse& LoggingResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoggingResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  return *internal_default_instance();
}


void LoggingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.LoggingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  step_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LoggingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tensorflow.LabeledStepStats step = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_step(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LoggingResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.LoggingResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.LabeledStepStats step = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_step()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.LoggingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.LoggingResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LoggingResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.LoggingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.LabeledStepStats step = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->step_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->step(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.LoggingResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* LoggingResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.LoggingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.LabeledStepStats step = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->step_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->step(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.LoggingResponse)
  return target;
}

size_t LoggingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.LoggingResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.LabeledStepStats step = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->step_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->step(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoggingResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.LoggingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LoggingResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoggingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.LoggingResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.LoggingResponse)
    MergeFrom(*source);
  }
}

void LoggingResponse::MergeFrom(const LoggingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.LoggingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  step_.MergeFrom(from.step_);
}

void LoggingResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.LoggingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoggingResponse::CopyFrom(const LoggingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.LoggingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoggingResponse::IsInitialized() const {
  return true;
}

void LoggingResponse::Swap(LoggingResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LoggingResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void LoggingResponse::UnsafeArenaSwap(LoggingResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LoggingResponse::InternalSwap(LoggingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&step_)->InternalSwap(CastToBase(&other->step_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoggingResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TraceOpts::InitAsDefaultInstance() {
}
class TraceOpts::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TraceOpts::kDurationFieldNumber;
const int TraceOpts::kUseStepProfilerFieldNumber;
const int TraceOpts::kUseKernelProfilerFieldNumber;
const int TraceOpts::kUseExtendedProfilerFieldNumber;
const int TraceOpts::kUseGpuProfilerFieldNumber;
const int TraceOpts::kUseSampleProfilerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TraceOpts::TraceOpts()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.TraceOpts)
}
TraceOpts::TraceOpts(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.TraceOpts)
}
TraceOpts::TraceOpts(const TraceOpts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&duration_, &from.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_sample_profiler_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(use_sample_profiler_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.TraceOpts)
}

void TraceOpts::SharedCtor() {
  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_sample_profiler_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(use_sample_profiler_));
}

TraceOpts::~TraceOpts() {
  // @@protoc_insertion_point(destructor:tensorflow.TraceOpts)
  SharedDtor();
}

void TraceOpts::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TraceOpts::ArenaDtor(void* object) {
  TraceOpts* _this = reinterpret_cast< TraceOpts* >(object);
  (void)_this;
}
void TraceOpts::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TraceOpts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TraceOpts& TraceOpts::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TraceOpts_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  return *internal_default_instance();
}


void TraceOpts::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TraceOpts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_sample_profiler_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(use_sample_profiler_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TraceOpts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double duration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool use_step_profiler = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          use_step_profiler_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_kernel_profiler = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          use_kernel_profiler_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_extended_profiler = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          use_extended_profiler_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_gpu_profiler = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          use_gpu_profiler_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_sample_profiler = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          use_sample_profiler_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TraceOpts::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.TraceOpts)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double duration = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_step_profiler = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_step_profiler_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_kernel_profiler = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_kernel_profiler_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_extended_profiler = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_extended_profiler_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_gpu_profiler = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_gpu_profiler_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_sample_profiler = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_sample_profiler_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.TraceOpts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.TraceOpts)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TraceOpts::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.TraceOpts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double duration = 1;
  if (!(this->duration() <= 0 && this->duration() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->duration(), output);
  }

  // bool use_step_profiler = 2;
  if (this->use_step_profiler() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->use_step_profiler(), output);
  }

  // bool use_kernel_profiler = 3;
  if (this->use_kernel_profiler() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->use_kernel_profiler(), output);
  }

  // bool use_extended_profiler = 4;
  if (this->use_extended_profiler() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->use_extended_profiler(), output);
  }

  // bool use_gpu_profiler = 5;
  if (this->use_gpu_profiler() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->use_gpu_profiler(), output);
  }

  // bool use_sample_profiler = 6;
  if (this->use_sample_profiler() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->use_sample_profiler(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.TraceOpts)
}

::PROTOBUF_NAMESPACE_ID::uint8* TraceOpts::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TraceOpts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double duration = 1;
  if (!(this->duration() <= 0 && this->duration() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->duration(), target);
  }

  // bool use_step_profiler = 2;
  if (this->use_step_profiler() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->use_step_profiler(), target);
  }

  // bool use_kernel_profiler = 3;
  if (this->use_kernel_profiler() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->use_kernel_profiler(), target);
  }

  // bool use_extended_profiler = 4;
  if (this->use_extended_profiler() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->use_extended_profiler(), target);
  }

  // bool use_gpu_profiler = 5;
  if (this->use_gpu_profiler() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->use_gpu_profiler(), target);
  }

  // bool use_sample_profiler = 6;
  if (this->use_sample_profiler() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->use_sample_profiler(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TraceOpts)
  return target;
}

size_t TraceOpts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TraceOpts)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double duration = 1;
  if (!(this->duration() <= 0 && this->duration() >= 0)) {
    total_size += 1 + 8;
  }

  // bool use_step_profiler = 2;
  if (this->use_step_profiler() != 0) {
    total_size += 1 + 1;
  }

  // bool use_kernel_profiler = 3;
  if (this->use_kernel_profiler() != 0) {
    total_size += 1 + 1;
  }

  // bool use_extended_profiler = 4;
  if (this->use_extended_profiler() != 0) {
    total_size += 1 + 1;
  }

  // bool use_gpu_profiler = 5;
  if (this->use_gpu_profiler() != 0) {
    total_size += 1 + 1;
  }

  // bool use_sample_profiler = 6;
  if (this->use_sample_profiler() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceOpts::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.TraceOpts)
  GOOGLE_DCHECK_NE(&from, this);
  const TraceOpts* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TraceOpts>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.TraceOpts)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.TraceOpts)
    MergeFrom(*source);
  }
}

void TraceOpts::MergeFrom(const TraceOpts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TraceOpts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.duration() <= 0 && from.duration() >= 0)) {
    set_duration(from.duration());
  }
  if (from.use_step_profiler() != 0) {
    set_use_step_profiler(from.use_step_profiler());
  }
  if (from.use_kernel_profiler() != 0) {
    set_use_kernel_profiler(from.use_kernel_profiler());
  }
  if (from.use_extended_profiler() != 0) {
    set_use_extended_profiler(from.use_extended_profiler());
  }
  if (from.use_gpu_profiler() != 0) {
    set_use_gpu_profiler(from.use_gpu_profiler());
  }
  if (from.use_sample_profiler() != 0) {
    set_use_sample_profiler(from.use_sample_profiler());
  }
}

void TraceOpts::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.TraceOpts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TraceOpts::CopyFrom(const TraceOpts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TraceOpts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceOpts::IsInitialized() const {
  return true;
}

void TraceOpts::Swap(TraceOpts* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TraceOpts* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void TraceOpts::UnsafeArenaSwap(TraceOpts* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TraceOpts::InternalSwap(TraceOpts* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(duration_, other->duration_);
  swap(use_step_profiler_, other->use_step_profiler_);
  swap(use_kernel_profiler_, other->use_kernel_profiler_);
  swap(use_extended_profiler_, other->use_extended_profiler_);
  swap(use_gpu_profiler_, other->use_gpu_profiler_);
  swap(use_sample_profiler_, other->use_sample_profiler_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceOpts::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TracingRequest::InitAsDefaultInstance() {
  ::tensorflow::_TracingRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::tensorflow::TraceOpts*>(
      ::tensorflow::TraceOpts::internal_default_instance());
}
class TracingRequest::HasBitSetters {
 public:
  static const ::tensorflow::TraceOpts& options(const TracingRequest* msg);
};

const ::tensorflow::TraceOpts&
TracingRequest::HasBitSetters::options(const TracingRequest* msg) {
  return *msg->options_;
}
void TracingRequest::unsafe_arena_set_allocated_options(
    ::tensorflow::TraceOpts* options) {
  if (GetArenaNoVirtual() == nullptr) {
    delete options_;
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.TracingRequest.options)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TracingRequest::kOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TracingRequest::TracingRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.TracingRequest)
}
TracingRequest::TracingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.TracingRequest)
}
TracingRequest::TracingRequest(const TracingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_options()) {
    options_ = new ::tensorflow::TraceOpts(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.TracingRequest)
}

void TracingRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TracingRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  options_ = nullptr;
}

TracingRequest::~TracingRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.TracingRequest)
  SharedDtor();
}

void TracingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete options_;
}

void TracingRequest::ArenaDtor(void* object) {
  TracingRequest* _this = reinterpret_cast< TracingRequest* >(object);
  (void)_this;
}
void TracingRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TracingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TracingRequest& TracingRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TracingRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  return *internal_default_instance();
}


void TracingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TracingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TracingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.TraceOpts options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TracingRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.TracingRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.TraceOpts options = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.TracingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.TracingRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TracingRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.TracingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.TraceOpts options = 1;
  if (this->has_options()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::options(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.TracingRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* TracingRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TracingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.TraceOpts options = 1;
  if (this->has_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::options(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TracingRequest)
  return target;
}

size_t TracingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TracingRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.TraceOpts options = 1;
  if (this->has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TracingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.TracingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TracingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TracingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.TracingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.TracingRequest)
    MergeFrom(*source);
  }
}

void TracingRequest::MergeFrom(const TracingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TracingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_options()) {
    mutable_options()->::tensorflow::TraceOpts::MergeFrom(from.options());
  }
}

void TracingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.TracingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TracingRequest::CopyFrom(const TracingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TracingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TracingRequest::IsInitialized() const {
  return true;
}

void TracingRequest::Swap(TracingRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TracingRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void TracingRequest::UnsafeArenaSwap(TracingRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TracingRequest::InternalSwap(TracingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(options_, other->options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TracingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TracingResponse::InitAsDefaultInstance() {
}
class TracingResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TracingResponse::TracingResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.TracingResponse)
}
TracingResponse::TracingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.TracingResponse)
}
TracingResponse::TracingResponse(const TracingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.TracingResponse)
}

void TracingResponse::SharedCtor() {
}

TracingResponse::~TracingResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.TracingResponse)
  SharedDtor();
}

void TracingResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TracingResponse::ArenaDtor(void* object) {
  TracingResponse* _this = reinterpret_cast< TracingResponse* >(object);
  (void)_this;
}
void TracingResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TracingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TracingResponse& TracingResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TracingResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  return *internal_default_instance();
}


void TracingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TracingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TracingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TracingResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.TracingResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.TracingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.TracingResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TracingResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.TracingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.TracingResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* TracingResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TracingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TracingResponse)
  return target;
}

size_t TracingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TracingResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TracingResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.TracingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TracingResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TracingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.TracingResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.TracingResponse)
    MergeFrom(*source);
  }
}

void TracingResponse::MergeFrom(const TracingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TracingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TracingResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.TracingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TracingResponse::CopyFrom(const TracingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TracingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TracingResponse::IsInitialized() const {
  return true;
}

void TracingResponse::Swap(TracingResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TracingResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void TracingResponse::UnsafeArenaSwap(TracingResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TracingResponse::InternalSwap(TracingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TracingResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecvBufRequest::InitAsDefaultInstance() {
  ::tensorflow::_RecvBufRequest_default_instance_._instance.get_mutable()->client_locality_ = const_cast< ::tensorflow::DeviceLocality*>(
      ::tensorflow::DeviceLocality::internal_default_instance());
  ::tensorflow::_RecvBufRequest_default_instance_._instance.get_mutable()->server_locality_ = const_cast< ::tensorflow::DeviceLocality*>(
      ::tensorflow::DeviceLocality::internal_default_instance());
  ::tensorflow::_RecvBufRequest_default_instance_._instance.get_mutable()->transport_options_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class RecvBufRequest::HasBitSetters {
 public:
  static const ::tensorflow::DeviceLocality& client_locality(const RecvBufRequest* msg);
  static const ::tensorflow::DeviceLocality& server_locality(const RecvBufRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::Any& transport_options(const RecvBufRequest* msg);
};

const ::tensorflow::DeviceLocality&
RecvBufRequest::HasBitSetters::client_locality(const RecvBufRequest* msg) {
  return *msg->client_locality_;
}
const ::tensorflow::DeviceLocality&
RecvBufRequest::HasBitSetters::server_locality(const RecvBufRequest* msg) {
  return *msg->server_locality_;
}
const PROTOBUF_NAMESPACE_ID::Any&
RecvBufRequest::HasBitSetters::transport_options(const RecvBufRequest* msg) {
  return *msg->transport_options_;
}
void RecvBufRequest::unsafe_arena_set_allocated_client_locality(
    ::tensorflow::DeviceLocality* client_locality) {
  if (GetArenaNoVirtual() == nullptr) {
    delete client_locality_;
  }
  client_locality_ = client_locality;
  if (client_locality) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RecvBufRequest.client_locality)
}
void RecvBufRequest::clear_client_locality() {
  if (GetArenaNoVirtual() == nullptr && client_locality_ != nullptr) {
    delete client_locality_;
  }
  client_locality_ = nullptr;
}
void RecvBufRequest::unsafe_arena_set_allocated_server_locality(
    ::tensorflow::DeviceLocality* server_locality) {
  if (GetArenaNoVirtual() == nullptr) {
    delete server_locality_;
  }
  server_locality_ = server_locality;
  if (server_locality) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RecvBufRequest.server_locality)
}
void RecvBufRequest::clear_server_locality() {
  if (GetArenaNoVirtual() == nullptr && server_locality_ != nullptr) {
    delete server_locality_;
  }
  server_locality_ = nullptr;
}
void RecvBufRequest::unsafe_arena_set_allocated_transport_options(
    PROTOBUF_NAMESPACE_ID::Any* transport_options) {
  if (GetArenaNoVirtual() == nullptr) {
    delete transport_options_;
  }
  transport_options_ = transport_options;
  if (transport_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RecvBufRequest.transport_options)
}
void RecvBufRequest::clear_transport_options() {
  if (GetArenaNoVirtual() == nullptr && transport_options_ != nullptr) {
    delete transport_options_;
  }
  transport_options_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecvBufRequest::kStepIdFieldNumber;
const int RecvBufRequest::kBufRendezvousKeyFieldNumber;
const int RecvBufRequest::kNumBytesFieldNumber;
const int RecvBufRequest::kBufPtrFieldNumber;
const int RecvBufRequest::kClientLocalityFieldNumber;
const int RecvBufRequest::kServerLocalityFieldNumber;
const int RecvBufRequest::kTransportOptionsFieldNumber;
const int RecvBufRequest::kSrcDeviceFieldNumber;
const int RecvBufRequest::kDstDeviceFieldNumber;
const int RecvBufRequest::kRequestIdFieldNumber;
const int RecvBufRequest::kSrcIncarnationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecvBufRequest::RecvBufRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RecvBufRequest)
}
RecvBufRequest::RecvBufRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RecvBufRequest)
}
RecvBufRequest::RecvBufRequest(const RecvBufRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  buf_rendezvous_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.buf_rendezvous_key().size() > 0) {
    buf_rendezvous_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.buf_rendezvous_key(),
      GetArenaNoVirtual());
  }
  src_device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.src_device().size() > 0) {
    src_device_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.src_device(),
      GetArenaNoVirtual());
  }
  dst_device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.dst_device().size() > 0) {
    dst_device_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dst_device(),
      GetArenaNoVirtual());
  }
  if (from.has_client_locality()) {
    client_locality_ = new ::tensorflow::DeviceLocality(*from.client_locality_);
  } else {
    client_locality_ = nullptr;
  }
  if (from.has_server_locality()) {
    server_locality_ = new ::tensorflow::DeviceLocality(*from.server_locality_);
  } else {
    server_locality_ = nullptr;
  }
  if (from.has_transport_options()) {
    transport_options_ = new PROTOBUF_NAMESPACE_ID::Any(*from.transport_options_);
  } else {
    transport_options_ = nullptr;
  }
  ::memcpy(&step_id_, &from.step_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&src_incarnation_) -
    reinterpret_cast<char*>(&step_id_)) + sizeof(src_incarnation_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.RecvBufRequest)
}

void RecvBufRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecvBufRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  buf_rendezvous_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  src_device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dst_device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&client_locality_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&src_incarnation_) -
      reinterpret_cast<char*>(&client_locality_)) + sizeof(src_incarnation_));
}

RecvBufRequest::~RecvBufRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.RecvBufRequest)
  SharedDtor();
}

void RecvBufRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  buf_rendezvous_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  src_device_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dst_device_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete client_locality_;
  if (this != internal_default_instance()) delete server_locality_;
  if (this != internal_default_instance()) delete transport_options_;
}

void RecvBufRequest::ArenaDtor(void* object) {
  RecvBufRequest* _this = reinterpret_cast< RecvBufRequest* >(object);
  (void)_this;
}
void RecvBufRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecvBufRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecvBufRequest& RecvBufRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecvBufRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  return *internal_default_instance();
}


void RecvBufRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RecvBufRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buf_rendezvous_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  src_device_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  dst_device_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && client_locality_ != nullptr) {
    delete client_locality_;
  }
  client_locality_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && server_locality_ != nullptr) {
    delete server_locality_;
  }
  server_locality_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && transport_options_ != nullptr) {
    delete transport_options_;
  }
  transport_options_ = nullptr;
  ::memset(&step_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&src_incarnation_) -
      reinterpret_cast<char*>(&step_id_)) + sizeof(src_incarnation_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RecvBufRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 step_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          step_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string buf_rendezvous_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_buf_rendezvous_key(), ptr, ctx, "tensorflow.RecvBufRequest.buf_rendezvous_key");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 num_bytes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // fixed64 buf_ptr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          buf_ptr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // .tensorflow.DeviceLocality client_locality = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_client_locality(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.DeviceLocality server_locality = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_server_locality(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any transport_options = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_transport_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string src_device = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_src_device(), ptr, ctx, "tensorflow.RecvBufRequest.src_device");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dst_device = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_dst_device(), ptr, ctx, "tensorflow.RecvBufRequest.dst_device");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 request_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 src_incarnation = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          src_incarnation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RecvBufRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RecvBufRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 step_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &step_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string buf_rendezvous_key = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_buf_rendezvous_key()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->buf_rendezvous_key().data(), static_cast<int>(this->buf_rendezvous_key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.RecvBufRequest.buf_rendezvous_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 num_bytes = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed64 buf_ptr = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &buf_ptr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.DeviceLocality client_locality = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_client_locality()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.DeviceLocality server_locality = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_server_locality()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any transport_options = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_transport_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string src_device = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_src_device()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->src_device().data(), static_cast<int>(this->src_device().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.RecvBufRequest.src_device"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dst_device = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_dst_device()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->dst_device().data(), static_cast<int>(this->dst_device().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.RecvBufRequest.dst_device"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 request_id = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 src_incarnation = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &src_incarnation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RecvBufRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RecvBufRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RecvBufRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RecvBufRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 step_id = 1;
  if (this->step_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->step_id(), output);
  }

  // string buf_rendezvous_key = 2;
  if (this->buf_rendezvous_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->buf_rendezvous_key().data(), static_cast<int>(this->buf_rendezvous_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RecvBufRequest.buf_rendezvous_key");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->buf_rendezvous_key(), output);
  }

  // int64 num_bytes = 3;
  if (this->num_bytes() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->num_bytes(), output);
  }

  // fixed64 buf_ptr = 4;
  if (this->buf_ptr() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(4, this->buf_ptr(), output);
  }

  // .tensorflow.DeviceLocality client_locality = 5;
  if (this->has_client_locality()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::client_locality(this), output);
  }

  // .tensorflow.DeviceLocality server_locality = 6;
  if (this->has_server_locality()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::server_locality(this), output);
  }

  // .google.protobuf.Any transport_options = 7;
  if (this->has_transport_options()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::transport_options(this), output);
  }

  // string src_device = 8;
  if (this->src_device().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->src_device().data(), static_cast<int>(this->src_device().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RecvBufRequest.src_device");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->src_device(), output);
  }

  // string dst_device = 9;
  if (this->dst_device().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->dst_device().data(), static_cast<int>(this->dst_device().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RecvBufRequest.dst_device");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->dst_device(), output);
  }

  // int64 request_id = 10;
  if (this->request_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(10, this->request_id(), output);
  }

  // uint64 src_incarnation = 11;
  if (this->src_incarnation() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(11, this->src_incarnation(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.RecvBufRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* RecvBufRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RecvBufRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 step_id = 1;
  if (this->step_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->step_id(), target);
  }

  // string buf_rendezvous_key = 2;
  if (this->buf_rendezvous_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->buf_rendezvous_key().data(), static_cast<int>(this->buf_rendezvous_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RecvBufRequest.buf_rendezvous_key");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->buf_rendezvous_key(), target);
  }

  // int64 num_bytes = 3;
  if (this->num_bytes() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->num_bytes(), target);
  }

  // fixed64 buf_ptr = 4;
  if (this->buf_ptr() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->buf_ptr(), target);
  }

  // .tensorflow.DeviceLocality client_locality = 5;
  if (this->has_client_locality()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::client_locality(this), target);
  }

  // .tensorflow.DeviceLocality server_locality = 6;
  if (this->has_server_locality()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::server_locality(this), target);
  }

  // .google.protobuf.Any transport_options = 7;
  if (this->has_transport_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::transport_options(this), target);
  }

  // string src_device = 8;
  if (this->src_device().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->src_device().data(), static_cast<int>(this->src_device().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RecvBufRequest.src_device");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        8, this->src_device(), target);
  }

  // string dst_device = 9;
  if (this->dst_device().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->dst_device().data(), static_cast<int>(this->dst_device().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RecvBufRequest.dst_device");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        9, this->dst_device(), target);
  }

  // int64 request_id = 10;
  if (this->request_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->request_id(), target);
  }

  // uint64 src_incarnation = 11;
  if (this->src_incarnation() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->src_incarnation(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RecvBufRequest)
  return target;
}

size_t RecvBufRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RecvBufRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string buf_rendezvous_key = 2;
  if (this->buf_rendezvous_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->buf_rendezvous_key());
  }

  // string src_device = 8;
  if (this->src_device().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->src_device());
  }

  // string dst_device = 9;
  if (this->dst_device().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->dst_device());
  }

  // .tensorflow.DeviceLocality client_locality = 5;
  if (this->has_client_locality()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_locality_);
  }

  // .tensorflow.DeviceLocality server_locality = 6;
  if (this->has_server_locality()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_locality_);
  }

  // .google.protobuf.Any transport_options = 7;
  if (this->has_transport_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transport_options_);
  }

  // int64 step_id = 1;
  if (this->step_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->step_id());
  }

  // int64 num_bytes = 3;
  if (this->num_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->num_bytes());
  }

  // fixed64 buf_ptr = 4;
  if (this->buf_ptr() != 0) {
    total_size += 1 + 8;
  }

  // int64 request_id = 10;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->request_id());
  }

  // uint64 src_incarnation = 11;
  if (this->src_incarnation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->src_incarnation());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecvBufRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RecvBufRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RecvBufRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecvBufRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RecvBufRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RecvBufRequest)
    MergeFrom(*source);
  }
}

void RecvBufRequest::MergeFrom(const RecvBufRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RecvBufRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.buf_rendezvous_key().size() > 0) {
    set_buf_rendezvous_key(from.buf_rendezvous_key());
  }
  if (from.src_device().size() > 0) {
    set_src_device(from.src_device());
  }
  if (from.dst_device().size() > 0) {
    set_dst_device(from.dst_device());
  }
  if (from.has_client_locality()) {
    mutable_client_locality()->::tensorflow::DeviceLocality::MergeFrom(from.client_locality());
  }
  if (from.has_server_locality()) {
    mutable_server_locality()->::tensorflow::DeviceLocality::MergeFrom(from.server_locality());
  }
  if (from.has_transport_options()) {
    mutable_transport_options()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from.transport_options());
  }
  if (from.step_id() != 0) {
    set_step_id(from.step_id());
  }
  if (from.num_bytes() != 0) {
    set_num_bytes(from.num_bytes());
  }
  if (from.buf_ptr() != 0) {
    set_buf_ptr(from.buf_ptr());
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
  if (from.src_incarnation() != 0) {
    set_src_incarnation(from.src_incarnation());
  }
}

void RecvBufRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RecvBufRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecvBufRequest::CopyFrom(const RecvBufRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RecvBufRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecvBufRequest::IsInitialized() const {
  return true;
}

void RecvBufRequest::Swap(RecvBufRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RecvBufRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void RecvBufRequest::UnsafeArenaSwap(RecvBufRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RecvBufRequest::InternalSwap(RecvBufRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  buf_rendezvous_key_.Swap(&other->buf_rendezvous_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  src_device_.Swap(&other->src_device_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dst_device_.Swap(&other->dst_device_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(client_locality_, other->client_locality_);
  swap(server_locality_, other->server_locality_);
  swap(transport_options_, other->transport_options_);
  swap(step_id_, other->step_id_);
  swap(num_bytes_, other->num_bytes_);
  swap(buf_ptr_, other->buf_ptr_);
  swap(request_id_, other->request_id_);
  swap(src_incarnation_, other->src_incarnation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecvBufRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecvBufResponse::InitAsDefaultInstance() {
  ::tensorflow::_RecvBufResponse_default_instance_._instance.get_mutable()->transport_options_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class RecvBufResponse::HasBitSetters {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& transport_options(const RecvBufResponse* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
RecvBufResponse::HasBitSetters::transport_options(const RecvBufResponse* msg) {
  return *msg->transport_options_;
}
void RecvBufResponse::unsafe_arena_set_allocated_transport_options(
    PROTOBUF_NAMESPACE_ID::Any* transport_options) {
  if (GetArenaNoVirtual() == nullptr) {
    delete transport_options_;
  }
  transport_options_ = transport_options;
  if (transport_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RecvBufResponse.transport_options)
}
void RecvBufResponse::clear_transport_options() {
  if (GetArenaNoVirtual() == nullptr && transport_options_ != nullptr) {
    delete transport_options_;
  }
  transport_options_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecvBufResponse::kBufPtrFieldNumber;
const int RecvBufResponse::kNumBytesFieldNumber;
const int RecvBufResponse::kIsDeadFieldNumber;
const int RecvBufResponse::kTransportOptionsFieldNumber;
const int RecvBufResponse::kSendStartMicrosFieldNumber;
const int RecvBufResponse::kRequireAckFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecvBufResponse::RecvBufResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RecvBufResponse)
}
RecvBufResponse::RecvBufResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RecvBufResponse)
}
RecvBufResponse::RecvBufResponse(const RecvBufResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_transport_options()) {
    transport_options_ = new PROTOBUF_NAMESPACE_ID::Any(*from.transport_options_);
  } else {
    transport_options_ = nullptr;
  }
  ::memcpy(&buf_ptr_, &from.buf_ptr_,
    static_cast<size_t>(reinterpret_cast<char*>(&require_ack_) -
    reinterpret_cast<char*>(&buf_ptr_)) + sizeof(require_ack_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.RecvBufResponse)
}

void RecvBufResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecvBufResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  ::memset(&transport_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&require_ack_) -
      reinterpret_cast<char*>(&transport_options_)) + sizeof(require_ack_));
}

RecvBufResponse::~RecvBufResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.RecvBufResponse)
  SharedDtor();
}

void RecvBufResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete transport_options_;
}

void RecvBufResponse::ArenaDtor(void* object) {
  RecvBufResponse* _this = reinterpret_cast< RecvBufResponse* >(object);
  (void)_this;
}
void RecvBufResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecvBufResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecvBufResponse& RecvBufResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecvBufResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  return *internal_default_instance();
}


void RecvBufResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RecvBufResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && transport_options_ != nullptr) {
    delete transport_options_;
  }
  transport_options_ = nullptr;
  ::memset(&buf_ptr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&require_ack_) -
      reinterpret_cast<char*>(&buf_ptr_)) + sizeof(require_ack_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RecvBufResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // fixed64 buf_ptr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          buf_ptr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // int64 num_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_dead = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_dead_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any transport_options = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_transport_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 send_start_micros = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          send_start_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool require_ack = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          require_ack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RecvBufResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RecvBufResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed64 buf_ptr = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &buf_ptr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 num_bytes = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_dead = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dead_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any transport_options = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_transport_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 send_start_micros = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &send_start_micros_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool require_ack = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &require_ack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RecvBufResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RecvBufResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RecvBufResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RecvBufResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 buf_ptr = 1;
  if (this->buf_ptr() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(1, this->buf_ptr(), output);
  }

  // int64 num_bytes = 2;
  if (this->num_bytes() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->num_bytes(), output);
  }

  // bool is_dead = 3;
  if (this->is_dead() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->is_dead(), output);
  }

  // .google.protobuf.Any transport_options = 4;
  if (this->has_transport_options()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::transport_options(this), output);
  }

  // int64 send_start_micros = 5;
  if (this->send_start_micros() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->send_start_micros(), output);
  }

  // bool require_ack = 6;
  if (this->require_ack() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->require_ack(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.RecvBufResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* RecvBufResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RecvBufResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 buf_ptr = 1;
  if (this->buf_ptr() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->buf_ptr(), target);
  }

  // int64 num_bytes = 2;
  if (this->num_bytes() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->num_bytes(), target);
  }

  // bool is_dead = 3;
  if (this->is_dead() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->is_dead(), target);
  }

  // .google.protobuf.Any transport_options = 4;
  if (this->has_transport_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::transport_options(this), target);
  }

  // int64 send_start_micros = 5;
  if (this->send_start_micros() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->send_start_micros(), target);
  }

  // bool require_ack = 6;
  if (this->require_ack() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->require_ack(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RecvBufResponse)
  return target;
}

size_t RecvBufResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RecvBufResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any transport_options = 4;
  if (this->has_transport_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transport_options_);
  }

  // fixed64 buf_ptr = 1;
  if (this->buf_ptr() != 0) {
    total_size += 1 + 8;
  }

  // int64 num_bytes = 2;
  if (this->num_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->num_bytes());
  }

  // int64 send_start_micros = 5;
  if (this->send_start_micros() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->send_start_micros());
  }

  // bool is_dead = 3;
  if (this->is_dead() != 0) {
    total_size += 1 + 1;
  }

  // bool require_ack = 6;
  if (this->require_ack() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecvBufResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RecvBufResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RecvBufResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecvBufResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RecvBufResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RecvBufResponse)
    MergeFrom(*source);
  }
}

void RecvBufResponse::MergeFrom(const RecvBufResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RecvBufResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_transport_options()) {
    mutable_transport_options()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from.transport_options());
  }
  if (from.buf_ptr() != 0) {
    set_buf_ptr(from.buf_ptr());
  }
  if (from.num_bytes() != 0) {
    set_num_bytes(from.num_bytes());
  }
  if (from.send_start_micros() != 0) {
    set_send_start_micros(from.send_start_micros());
  }
  if (from.is_dead() != 0) {
    set_is_dead(from.is_dead());
  }
  if (from.require_ack() != 0) {
    set_require_ack(from.require_ack());
  }
}

void RecvBufResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RecvBufResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecvBufResponse::CopyFrom(const RecvBufResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RecvBufResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecvBufResponse::IsInitialized() const {
  return true;
}

void RecvBufResponse::Swap(RecvBufResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RecvBufResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void RecvBufResponse::UnsafeArenaSwap(RecvBufResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RecvBufResponse::InternalSwap(RecvBufResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(transport_options_, other->transport_options_);
  swap(buf_ptr_, other->buf_ptr_);
  swap(num_bytes_, other->num_bytes_);
  swap(send_start_micros_, other->send_start_micros_);
  swap(is_dead_, other->is_dead_);
  swap(require_ack_, other->require_ack_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecvBufResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CompleteGroupRequest::InitAsDefaultInstance() {
}
class CompleteGroupRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompleteGroupRequest::kGroupKeyFieldNumber;
const int CompleteGroupRequest::kGroupSizeFieldNumber;
const int CompleteGroupRequest::kDeviceTypeFieldNumber;
const int CompleteGroupRequest::kDeviceNameFieldNumber;
const int CompleteGroupRequest::kCollectiveTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompleteGroupRequest::CompleteGroupRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CompleteGroupRequest)
}
CompleteGroupRequest::CompleteGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  device_name_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CompleteGroupRequest)
}
CompleteGroupRequest::CompleteGroupRequest(const CompleteGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      device_name_(from.device_name_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.device_type().size() > 0) {
    device_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_type(),
      GetArenaNoVirtual());
  }
  ::memcpy(&group_key_, &from.group_key_,
    static_cast<size_t>(reinterpret_cast<char*>(&collective_type_) -
    reinterpret_cast<char*>(&group_key_)) + sizeof(collective_type_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.CompleteGroupRequest)
}

void CompleteGroupRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CompleteGroupRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  device_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&group_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collective_type_) -
      reinterpret_cast<char*>(&group_key_)) + sizeof(collective_type_));
}

CompleteGroupRequest::~CompleteGroupRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.CompleteGroupRequest)
  SharedDtor();
}

void CompleteGroupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  device_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CompleteGroupRequest::ArenaDtor(void* object) {
  CompleteGroupRequest* _this = reinterpret_cast< CompleteGroupRequest* >(object);
  (void)_this;
}
void CompleteGroupRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompleteGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompleteGroupRequest& CompleteGroupRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CompleteGroupRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  return *internal_default_instance();
}


void CompleteGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CompleteGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_name_.Clear();
  device_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&group_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collective_type_) -
      reinterpret_cast<char*>(&group_key_)) + sizeof(collective_type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CompleteGroupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 group_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          group_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 group_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          group_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_device_type(), ptr, ctx, "tensorflow.CompleteGroupRequest.device_type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string device_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_device_name(), ptr, ctx, "tensorflow.CompleteGroupRequest.device_name");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // int32 collective_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          collective_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CompleteGroupRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CompleteGroupRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 group_key = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 group_size = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string device_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_device_type()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->device_type().data(), static_cast<int>(this->device_type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.CompleteGroupRequest.device_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string device_name = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_device_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->device_name(this->device_name_size() - 1).data(),
            static_cast<int>(this->device_name(this->device_name_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.CompleteGroupRequest.device_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 collective_type = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &collective_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CompleteGroupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CompleteGroupRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CompleteGroupRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CompleteGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 group_key = 1;
  if (this->group_key() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->group_key(), output);
  }

  // int32 group_size = 2;
  if (this->group_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->group_size(), output);
  }

  // string device_type = 3;
  if (this->device_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->device_type().data(), static_cast<int>(this->device_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CompleteGroupRequest.device_type");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->device_type(), output);
  }

  // repeated string device_name = 4;
  for (int i = 0, n = this->device_name_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->device_name(i).data(), static_cast<int>(this->device_name(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CompleteGroupRequest.device_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      4, this->device_name(i), output);
  }

  // int32 collective_type = 5;
  if (this->collective_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->collective_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.CompleteGroupRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* CompleteGroupRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CompleteGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 group_key = 1;
  if (this->group_key() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->group_key(), target);
  }

  // int32 group_size = 2;
  if (this->group_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->group_size(), target);
  }

  // string device_type = 3;
  if (this->device_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->device_type().data(), static_cast<int>(this->device_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CompleteGroupRequest.device_type");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->device_type(), target);
  }

  // repeated string device_name = 4;
  for (int i = 0, n = this->device_name_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->device_name(i).data(), static_cast<int>(this->device_name(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CompleteGroupRequest.device_name");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(4, this->device_name(i), target);
  }

  // int32 collective_type = 5;
  if (this->collective_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->collective_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CompleteGroupRequest)
  return target;
}

size_t CompleteGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CompleteGroupRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string device_name = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->device_name_size());
  for (int i = 0, n = this->device_name_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->device_name(i));
  }

  // string device_type = 3;
  if (this->device_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->device_type());
  }

  // int32 group_key = 1;
  if (this->group_key() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->group_key());
  }

  // int32 group_size = 2;
  if (this->group_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->group_size());
  }

  // int32 collective_type = 5;
  if (this->collective_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->collective_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompleteGroupRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CompleteGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CompleteGroupRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompleteGroupRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CompleteGroupRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CompleteGroupRequest)
    MergeFrom(*source);
  }
}

void CompleteGroupRequest::MergeFrom(const CompleteGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CompleteGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  device_name_.MergeFrom(from.device_name_);
  if (from.device_type().size() > 0) {
    set_device_type(from.device_type());
  }
  if (from.group_key() != 0) {
    set_group_key(from.group_key());
  }
  if (from.group_size() != 0) {
    set_group_size(from.group_size());
  }
  if (from.collective_type() != 0) {
    set_collective_type(from.collective_type());
  }
}

void CompleteGroupRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CompleteGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompleteGroupRequest::CopyFrom(const CompleteGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CompleteGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompleteGroupRequest::IsInitialized() const {
  return true;
}

void CompleteGroupRequest::Swap(CompleteGroupRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CompleteGroupRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void CompleteGroupRequest::UnsafeArenaSwap(CompleteGroupRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CompleteGroupRequest::InternalSwap(CompleteGroupRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  device_name_.InternalSwap(CastToBase(&other->device_name_));
  device_type_.Swap(&other->device_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(group_key_, other->group_key_);
  swap(group_size_, other->group_size_);
  swap(collective_type_, other->collective_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompleteGroupRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CompleteGroupResponse::InitAsDefaultInstance() {
}
class CompleteGroupResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompleteGroupResponse::kGroupKeyFieldNumber;
const int CompleteGroupResponse::kGroupSizeFieldNumber;
const int CompleteGroupResponse::kDeviceTypeFieldNumber;
const int CompleteGroupResponse::kNumTasksFieldNumber;
const int CompleteGroupResponse::kDeviceNameFieldNumber;
const int CompleteGroupResponse::kTaskNameFieldNumber;
const int CompleteGroupResponse::kCommunicatorKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompleteGroupResponse::CompleteGroupResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CompleteGroupResponse)
}
CompleteGroupResponse::CompleteGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  device_name_(arena),
  task_name_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CompleteGroupResponse)
}
CompleteGroupResponse::CompleteGroupResponse(const CompleteGroupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      device_name_(from.device_name_),
      task_name_(from.task_name_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.device_type().size() > 0) {
    device_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_type(),
      GetArenaNoVirtual());
  }
  communicator_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.communicator_key().size() > 0) {
    communicator_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.communicator_key(),
      GetArenaNoVirtual());
  }
  ::memcpy(&group_key_, &from.group_key_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_tasks_) -
    reinterpret_cast<char*>(&group_key_)) + sizeof(num_tasks_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.CompleteGroupResponse)
}

void CompleteGroupResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CompleteGroupResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  device_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  communicator_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&group_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_tasks_) -
      reinterpret_cast<char*>(&group_key_)) + sizeof(num_tasks_));
}

CompleteGroupResponse::~CompleteGroupResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.CompleteGroupResponse)
  SharedDtor();
}

void CompleteGroupResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  device_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  communicator_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CompleteGroupResponse::ArenaDtor(void* object) {
  CompleteGroupResponse* _this = reinterpret_cast< CompleteGroupResponse* >(object);
  (void)_this;
}
void CompleteGroupResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompleteGroupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompleteGroupResponse& CompleteGroupResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CompleteGroupResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  return *internal_default_instance();
}


void CompleteGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CompleteGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_name_.Clear();
  task_name_.Clear();
  device_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  communicator_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&group_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_tasks_) -
      reinterpret_cast<char*>(&group_key_)) + sizeof(num_tasks_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CompleteGroupResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 group_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          group_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 group_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          group_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_device_type(), ptr, ctx, "tensorflow.CompleteGroupResponse.device_type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_tasks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          num_tasks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string device_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_device_name(), ptr, ctx, "tensorflow.CompleteGroupResponse.device_name");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated string task_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_task_name(), ptr, ctx, "tensorflow.CompleteGroupResponse.task_name");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // bytes communicator_key = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_communicator_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CompleteGroupResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CompleteGroupResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 group_key = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 group_size = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string device_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_device_type()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->device_type().data(), static_cast<int>(this->device_type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.CompleteGroupResponse.device_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_tasks = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_tasks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string device_name = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_device_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->device_name(this->device_name_size() - 1).data(),
            static_cast<int>(this->device_name(this->device_name_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.CompleteGroupResponse.device_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string task_name = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_task_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->task_name(this->task_name_size() - 1).data(),
            static_cast<int>(this->task_name(this->task_name_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.CompleteGroupResponse.task_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes communicator_key = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_communicator_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CompleteGroupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CompleteGroupResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CompleteGroupResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CompleteGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 group_key = 1;
  if (this->group_key() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->group_key(), output);
  }

  // int32 group_size = 2;
  if (this->group_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->group_size(), output);
  }

  // string device_type = 3;
  if (this->device_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->device_type().data(), static_cast<int>(this->device_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CompleteGroupResponse.device_type");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->device_type(), output);
  }

  // int32 num_tasks = 4;
  if (this->num_tasks() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->num_tasks(), output);
  }

  // repeated string device_name = 5;
  for (int i = 0, n = this->device_name_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->device_name(i).data(), static_cast<int>(this->device_name(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CompleteGroupResponse.device_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      5, this->device_name(i), output);
  }

  // repeated string task_name = 6;
  for (int i = 0, n = this->task_name_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->task_name(i).data(), static_cast<int>(this->task_name(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CompleteGroupResponse.task_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      6, this->task_name(i), output);
  }

  // bytes communicator_key = 7;
  if (this->communicator_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->communicator_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.CompleteGroupResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* CompleteGroupResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CompleteGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 group_key = 1;
  if (this->group_key() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->group_key(), target);
  }

  // int32 group_size = 2;
  if (this->group_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->group_size(), target);
  }

  // string device_type = 3;
  if (this->device_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->device_type().data(), static_cast<int>(this->device_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CompleteGroupResponse.device_type");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->device_type(), target);
  }

  // int32 num_tasks = 4;
  if (this->num_tasks() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->num_tasks(), target);
  }

  // repeated string device_name = 5;
  for (int i = 0, n = this->device_name_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->device_name(i).data(), static_cast<int>(this->device_name(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CompleteGroupResponse.device_name");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(5, this->device_name(i), target);
  }

  // repeated string task_name = 6;
  for (int i = 0, n = this->task_name_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->task_name(i).data(), static_cast<int>(this->task_name(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CompleteGroupResponse.task_name");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(6, this->task_name(i), target);
  }

  // bytes communicator_key = 7;
  if (this->communicator_key().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        7, this->communicator_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CompleteGroupResponse)
  return target;
}

size_t CompleteGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CompleteGroupResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string device_name = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->device_name_size());
  for (int i = 0, n = this->device_name_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->device_name(i));
  }

  // repeated string task_name = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->task_name_size());
  for (int i = 0, n = this->task_name_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->task_name(i));
  }

  // string device_type = 3;
  if (this->device_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->device_type());
  }

  // bytes communicator_key = 7;
  if (this->communicator_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->communicator_key());
  }

  // int32 group_key = 1;
  if (this->group_key() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->group_key());
  }

  // int32 group_size = 2;
  if (this->group_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->group_size());
  }

  // int32 num_tasks = 4;
  if (this->num_tasks() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->num_tasks());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompleteGroupResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CompleteGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CompleteGroupResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompleteGroupResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CompleteGroupResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CompleteGroupResponse)
    MergeFrom(*source);
  }
}

void CompleteGroupResponse::MergeFrom(const CompleteGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CompleteGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  device_name_.MergeFrom(from.device_name_);
  task_name_.MergeFrom(from.task_name_);
  if (from.device_type().size() > 0) {
    set_device_type(from.device_type());
  }
  if (from.communicator_key().size() > 0) {
    set_communicator_key(from.communicator_key());
  }
  if (from.group_key() != 0) {
    set_group_key(from.group_key());
  }
  if (from.group_size() != 0) {
    set_group_size(from.group_size());
  }
  if (from.num_tasks() != 0) {
    set_num_tasks(from.num_tasks());
  }
}

void CompleteGroupResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CompleteGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompleteGroupResponse::CopyFrom(const CompleteGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CompleteGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompleteGroupResponse::IsInitialized() const {
  return true;
}

void CompleteGroupResponse::Swap(CompleteGroupResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CompleteGroupResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void CompleteGroupResponse::UnsafeArenaSwap(CompleteGroupResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CompleteGroupResponse::InternalSwap(CompleteGroupResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  device_name_.InternalSwap(CastToBase(&other->device_name_));
  task_name_.InternalSwap(CastToBase(&other->task_name_));
  device_type_.Swap(&other->device_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  communicator_key_.Swap(&other->communicator_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(group_key_, other->group_key_);
  swap(group_size_, other->group_size_);
  swap(num_tasks_, other->num_tasks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompleteGroupResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CompleteInstanceRequest::InitAsDefaultInstance() {
  ::tensorflow::_CompleteInstanceRequest_default_instance_._instance.get_mutable()->shape_ = const_cast< ::tensorflow::TensorShapeProto*>(
      ::tensorflow::TensorShapeProto::internal_default_instance());
}
class CompleteInstanceRequest::HasBitSetters {
 public:
  static const ::tensorflow::TensorShapeProto& shape(const CompleteInstanceRequest* msg);
};

const ::tensorflow::TensorShapeProto&
CompleteInstanceRequest::HasBitSetters::shape(const CompleteInstanceRequest* msg) {
  return *msg->shape_;
}
void CompleteInstanceRequest::unsafe_arena_set_allocated_shape(
    ::tensorflow::TensorShapeProto* shape) {
  if (GetArenaNoVirtual() == nullptr) {
    delete shape_;
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.CompleteInstanceRequest.shape)
}
void CompleteInstanceRequest::clear_shape() {
  if (GetArenaNoVirtual() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompleteInstanceRequest::kNameFieldNumber;
const int CompleteInstanceRequest::kTypeFieldNumber;
const int CompleteInstanceRequest::kDataTypeFieldNumber;
const int CompleteInstanceRequest::kShapeFieldNumber;
const int CompleteInstanceRequest::kGroupKeyFieldNumber;
const int CompleteInstanceRequest::kGroupSizeFieldNumber;
const int CompleteInstanceRequest::kInstanceKeyFieldNumber;
const int CompleteInstanceRequest::kDeviceTypeFieldNumber;
const int CompleteInstanceRequest::kSubdivOffsetFieldNumber;
const int CompleteInstanceRequest::kDeviceFieldNumber;
const int CompleteInstanceRequest::kIsSourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompleteInstanceRequest::CompleteInstanceRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CompleteInstanceRequest)
}
CompleteInstanceRequest::CompleteInstanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  subdiv_offset_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CompleteInstanceRequest)
}
CompleteInstanceRequest::CompleteInstanceRequest(const CompleteInstanceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      subdiv_offset_(from.subdiv_offset_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  device_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.device_type().size() > 0) {
    device_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_type(),
      GetArenaNoVirtual());
  }
  device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.device().size() > 0) {
    device_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device(),
      GetArenaNoVirtual());
  }
  if (from.has_shape()) {
    shape_ = new ::tensorflow::TensorShapeProto(*from.shape_);
  } else {
    shape_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_source_) -
    reinterpret_cast<char*>(&type_)) + sizeof(is_source_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.CompleteInstanceRequest)
}

void CompleteInstanceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CompleteInstanceRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&shape_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_source_) -
      reinterpret_cast<char*>(&shape_)) + sizeof(is_source_));
}

CompleteInstanceRequest::~CompleteInstanceRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.CompleteInstanceRequest)
  SharedDtor();
}

void CompleteInstanceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete shape_;
}

void CompleteInstanceRequest::ArenaDtor(void* object) {
  CompleteInstanceRequest* _this = reinterpret_cast< CompleteInstanceRequest* >(object);
  (void)_this;
}
void CompleteInstanceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompleteInstanceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompleteInstanceRequest& CompleteInstanceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CompleteInstanceRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  return *internal_default_instance();
}


void CompleteInstanceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CompleteInstanceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subdiv_offset_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  device_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  device_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_source_) -
      reinterpret_cast<char*>(&type_)) + sizeof(is_source_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CompleteInstanceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "tensorflow.CompleteInstanceRequest.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.DataType data_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_data_type(static_cast<::tensorflow::DataType>(val));
        } else goto handle_unusual;
        continue;
      // .tensorflow.TensorShapeProto shape = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_shape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 group_key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          group_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 group_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          group_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 instance_key = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          instance_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_device_type(), ptr, ctx, "tensorflow.CompleteInstanceRequest.device_type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 subdiv_offset = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_subdiv_offset(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          add_subdiv_offset(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_device(), ptr, ctx, "tensorflow.CompleteInstanceRequest.device");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_source = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          is_source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CompleteInstanceRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CompleteInstanceRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.CompleteInstanceRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.DataType data_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_data_type(static_cast< ::tensorflow::DataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.TensorShapeProto shape = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 group_key = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 group_size = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 instance_key = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string device_type = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_device_type()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->device_type().data(), static_cast<int>(this->device_type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.CompleteInstanceRequest.device_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 subdiv_offset = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_subdiv_offset())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 74u, input, this->mutable_subdiv_offset())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string device = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->device().data(), static_cast<int>(this->device().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.CompleteInstanceRequest.device"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_source = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CompleteInstanceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CompleteInstanceRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CompleteInstanceRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CompleteInstanceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CompleteInstanceRequest.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // .tensorflow.DataType data_type = 3;
  if (this->data_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->data_type(), output);
  }

  // .tensorflow.TensorShapeProto shape = 4;
  if (this->has_shape()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::shape(this), output);
  }

  // int32 group_key = 5;
  if (this->group_key() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->group_key(), output);
  }

  // int32 group_size = 6;
  if (this->group_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->group_size(), output);
  }

  // int32 instance_key = 7;
  if (this->instance_key() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->instance_key(), output);
  }

  // string device_type = 8;
  if (this->device_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->device_type().data(), static_cast<int>(this->device_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CompleteInstanceRequest.device_type");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->device_type(), output);
  }

  // repeated int32 subdiv_offset = 9;
  if (this->subdiv_offset_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(9, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_subdiv_offset_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->subdiv_offset_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->subdiv_offset(i), output);
  }

  // string device = 10;
  if (this->device().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), static_cast<int>(this->device().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CompleteInstanceRequest.device");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->device(), output);
  }

  // bool is_source = 11;
  if (this->is_source() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(11, this->is_source(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.CompleteInstanceRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* CompleteInstanceRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CompleteInstanceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CompleteInstanceRequest.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // .tensorflow.DataType data_type = 3;
  if (this->data_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->data_type(), target);
  }

  // .tensorflow.TensorShapeProto shape = 4;
  if (this->has_shape()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::shape(this), target);
  }

  // int32 group_key = 5;
  if (this->group_key() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->group_key(), target);
  }

  // int32 group_size = 6;
  if (this->group_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->group_size(), target);
  }

  // int32 instance_key = 7;
  if (this->instance_key() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->instance_key(), target);
  }

  // string device_type = 8;
  if (this->device_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->device_type().data(), static_cast<int>(this->device_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CompleteInstanceRequest.device_type");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        8, this->device_type(), target);
  }

  // repeated int32 subdiv_offset = 9;
  if (this->subdiv_offset_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      9,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _subdiv_offset_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->subdiv_offset_, target);
  }

  // string device = 10;
  if (this->device().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), static_cast<int>(this->device().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CompleteInstanceRequest.device");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        10, this->device(), target);
  }

  // bool is_source = 11;
  if (this->is_source() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->is_source(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CompleteInstanceRequest)
  return target;
}

size_t CompleteInstanceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CompleteInstanceRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 subdiv_offset = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->subdiv_offset_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _subdiv_offset_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string device_type = 8;
  if (this->device_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->device_type());
  }

  // string device = 10;
  if (this->device().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->device());
  }

  // .tensorflow.TensorShapeProto shape = 4;
  if (this->has_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shape_);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // .tensorflow.DataType data_type = 3;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->data_type());
  }

  // int32 group_key = 5;
  if (this->group_key() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->group_key());
  }

  // int32 group_size = 6;
  if (this->group_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->group_size());
  }

  // int32 instance_key = 7;
  if (this->instance_key() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->instance_key());
  }

  // bool is_source = 11;
  if (this->is_source() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompleteInstanceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CompleteInstanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CompleteInstanceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompleteInstanceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CompleteInstanceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CompleteInstanceRequest)
    MergeFrom(*source);
  }
}

void CompleteInstanceRequest::MergeFrom(const CompleteInstanceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CompleteInstanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subdiv_offset_.MergeFrom(from.subdiv_offset_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.device_type().size() > 0) {
    set_device_type(from.device_type());
  }
  if (from.device().size() > 0) {
    set_device(from.device());
  }
  if (from.has_shape()) {
    mutable_shape()->::tensorflow::TensorShapeProto::MergeFrom(from.shape());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.data_type() != 0) {
    set_data_type(from.data_type());
  }
  if (from.group_key() != 0) {
    set_group_key(from.group_key());
  }
  if (from.group_size() != 0) {
    set_group_size(from.group_size());
  }
  if (from.instance_key() != 0) {
    set_instance_key(from.instance_key());
  }
  if (from.is_source() != 0) {
    set_is_source(from.is_source());
  }
}

void CompleteInstanceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CompleteInstanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompleteInstanceRequest::CopyFrom(const CompleteInstanceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CompleteInstanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompleteInstanceRequest::IsInitialized() const {
  return true;
}

void CompleteInstanceRequest::Swap(CompleteInstanceRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CompleteInstanceRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void CompleteInstanceRequest::UnsafeArenaSwap(CompleteInstanceRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CompleteInstanceRequest::InternalSwap(CompleteInstanceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  subdiv_offset_.InternalSwap(&other->subdiv_offset_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  device_type_.Swap(&other->device_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  device_.Swap(&other->device_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(shape_, other->shape_);
  swap(type_, other->type_);
  swap(data_type_, other->data_type_);
  swap(group_key_, other->group_key_);
  swap(group_size_, other->group_size_);
  swap(instance_key_, other->instance_key_);
  swap(is_source_, other->is_source_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompleteInstanceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CompleteInstanceResponse::InitAsDefaultInstance() {
}
class CompleteInstanceResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompleteInstanceResponse::kInstanceKeyFieldNumber;
const int CompleteInstanceResponse::kSourceRankFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompleteInstanceResponse::CompleteInstanceResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CompleteInstanceResponse)
}
CompleteInstanceResponse::CompleteInstanceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CompleteInstanceResponse)
}
CompleteInstanceResponse::CompleteInstanceResponse(const CompleteInstanceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&instance_key_, &from.instance_key_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_rank_) -
    reinterpret_cast<char*>(&instance_key_)) + sizeof(source_rank_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.CompleteInstanceResponse)
}

void CompleteInstanceResponse::SharedCtor() {
  ::memset(&instance_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_rank_) -
      reinterpret_cast<char*>(&instance_key_)) + sizeof(source_rank_));
}

CompleteInstanceResponse::~CompleteInstanceResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.CompleteInstanceResponse)
  SharedDtor();
}

void CompleteInstanceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void CompleteInstanceResponse::ArenaDtor(void* object) {
  CompleteInstanceResponse* _this = reinterpret_cast< CompleteInstanceResponse* >(object);
  (void)_this;
}
void CompleteInstanceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompleteInstanceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompleteInstanceResponse& CompleteInstanceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CompleteInstanceResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  return *internal_default_instance();
}


void CompleteInstanceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CompleteInstanceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&instance_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_rank_) -
      reinterpret_cast<char*>(&instance_key_)) + sizeof(source_rank_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CompleteInstanceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 instance_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          instance_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 source_rank = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          source_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CompleteInstanceResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CompleteInstanceResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 instance_key = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 source_rank = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CompleteInstanceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CompleteInstanceResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CompleteInstanceResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CompleteInstanceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 instance_key = 1;
  if (this->instance_key() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->instance_key(), output);
  }

  // int32 source_rank = 2;
  if (this->source_rank() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->source_rank(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.CompleteInstanceResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* CompleteInstanceResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CompleteInstanceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 instance_key = 1;
  if (this->instance_key() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->instance_key(), target);
  }

  // int32 source_rank = 2;
  if (this->source_rank() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->source_rank(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CompleteInstanceResponse)
  return target;
}

size_t CompleteInstanceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CompleteInstanceResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 instance_key = 1;
  if (this->instance_key() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->instance_key());
  }

  // int32 source_rank = 2;
  if (this->source_rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->source_rank());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompleteInstanceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CompleteInstanceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CompleteInstanceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompleteInstanceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CompleteInstanceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CompleteInstanceResponse)
    MergeFrom(*source);
  }
}

void CompleteInstanceResponse::MergeFrom(const CompleteInstanceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CompleteInstanceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.instance_key() != 0) {
    set_instance_key(from.instance_key());
  }
  if (from.source_rank() != 0) {
    set_source_rank(from.source_rank());
  }
}

void CompleteInstanceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CompleteInstanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompleteInstanceResponse::CopyFrom(const CompleteInstanceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CompleteInstanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompleteInstanceResponse::IsInitialized() const {
  return true;
}

void CompleteInstanceResponse::Swap(CompleteInstanceResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CompleteInstanceResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void CompleteInstanceResponse::UnsafeArenaSwap(CompleteInstanceResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CompleteInstanceResponse::InternalSwap(CompleteInstanceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(instance_key_, other->instance_key_);
  swap(source_rank_, other->source_rank_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompleteInstanceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetStepSequenceRequest::InitAsDefaultInstance() {
}
class GetStepSequenceRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetStepSequenceRequest::kGraphKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetStepSequenceRequest::GetStepSequenceRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GetStepSequenceRequest)
}
GetStepSequenceRequest::GetStepSequenceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  graph_key_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GetStepSequenceRequest)
}
GetStepSequenceRequest::GetStepSequenceRequest(const GetStepSequenceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      graph_key_(from.graph_key_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.GetStepSequenceRequest)
}

void GetStepSequenceRequest::SharedCtor() {
}

GetStepSequenceRequest::~GetStepSequenceRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.GetStepSequenceRequest)
  SharedDtor();
}

void GetStepSequenceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void GetStepSequenceRequest::ArenaDtor(void* object) {
  GetStepSequenceRequest* _this = reinterpret_cast< GetStepSequenceRequest* >(object);
  (void)_this;
}
void GetStepSequenceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetStepSequenceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStepSequenceRequest& GetStepSequenceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStepSequenceRequest_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  return *internal_default_instance();
}


void GetStepSequenceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GetStepSequenceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  graph_key_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetStepSequenceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 graph_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_graph_key(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          add_graph_key(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetStepSequenceRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GetStepSequenceRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 graph_key = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_graph_key())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 10u, input, this->mutable_graph_key())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GetStepSequenceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GetStepSequenceRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetStepSequenceRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GetStepSequenceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 graph_key = 1;
  if (this->graph_key_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_graph_key_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->graph_key_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64NoTag(
      this->graph_key(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.GetStepSequenceRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStepSequenceRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GetStepSequenceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 graph_key = 1;
  if (this->graph_key_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _graph_key_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->graph_key_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GetStepSequenceRequest)
  return target;
}

size_t GetStepSequenceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GetStepSequenceRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 graph_key = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->graph_key_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _graph_key_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStepSequenceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GetStepSequenceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStepSequenceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStepSequenceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GetStepSequenceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GetStepSequenceRequest)
    MergeFrom(*source);
  }
}

void GetStepSequenceRequest::MergeFrom(const GetStepSequenceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GetStepSequenceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  graph_key_.MergeFrom(from.graph_key_);
}

void GetStepSequenceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GetStepSequenceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStepSequenceRequest::CopyFrom(const GetStepSequenceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GetStepSequenceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStepSequenceRequest::IsInitialized() const {
  return true;
}

void GetStepSequenceRequest::Swap(GetStepSequenceRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetStepSequenceRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void GetStepSequenceRequest::UnsafeArenaSwap(GetStepSequenceRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetStepSequenceRequest::InternalSwap(GetStepSequenceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  graph_key_.InternalSwap(&other->graph_key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStepSequenceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StepSequence::InitAsDefaultInstance() {
}
class StepSequence::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StepSequence::kGraphKeyFieldNumber;
const int StepSequence::kNextStepIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StepSequence::StepSequence()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.StepSequence)
}
StepSequence::StepSequence(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.StepSequence)
}
StepSequence::StepSequence(const StepSequence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&graph_key_, &from.graph_key_,
    static_cast<size_t>(reinterpret_cast<char*>(&next_step_id_) -
    reinterpret_cast<char*>(&graph_key_)) + sizeof(next_step_id_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.StepSequence)
}

void StepSequence::SharedCtor() {
  ::memset(&graph_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_step_id_) -
      reinterpret_cast<char*>(&graph_key_)) + sizeof(next_step_id_));
}

StepSequence::~StepSequence() {
  // @@protoc_insertion_point(destructor:tensorflow.StepSequence)
  SharedDtor();
}

void StepSequence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void StepSequence::ArenaDtor(void* object) {
  StepSequence* _this = reinterpret_cast< StepSequence* >(object);
  (void)_this;
}
void StepSequence::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StepSequence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StepSequence& StepSequence::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StepSequence_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  return *internal_default_instance();
}


void StepSequence::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.StepSequence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&graph_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_step_id_) -
      reinterpret_cast<char*>(&graph_key_)) + sizeof(next_step_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StepSequence::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 graph_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          graph_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 next_step_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          next_step_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StepSequence::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.StepSequence)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 graph_key = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &graph_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 next_step_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &next_step_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.StepSequence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.StepSequence)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StepSequence::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.StepSequence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 graph_key = 1;
  if (this->graph_key() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->graph_key(), output);
  }

  // int64 next_step_id = 2;
  if (this->next_step_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->next_step_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.StepSequence)
}

::PROTOBUF_NAMESPACE_ID::uint8* StepSequence::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.StepSequence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 graph_key = 1;
  if (this->graph_key() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->graph_key(), target);
  }

  // int64 next_step_id = 2;
  if (this->next_step_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->next_step_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.StepSequence)
  return target;
}

size_t StepSequence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.StepSequence)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 graph_key = 1;
  if (this->graph_key() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->graph_key());
  }

  // int64 next_step_id = 2;
  if (this->next_step_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->next_step_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StepSequence::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.StepSequence)
  GOOGLE_DCHECK_NE(&from, this);
  const StepSequence* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StepSequence>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.StepSequence)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.StepSequence)
    MergeFrom(*source);
  }
}

void StepSequence::MergeFrom(const StepSequence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.StepSequence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.graph_key() != 0) {
    set_graph_key(from.graph_key());
  }
  if (from.next_step_id() != 0) {
    set_next_step_id(from.next_step_id());
  }
}

void StepSequence::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.StepSequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StepSequence::CopyFrom(const StepSequence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.StepSequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StepSequence::IsInitialized() const {
  return true;
}

void StepSequence::Swap(StepSequence* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StepSequence* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void StepSequence::UnsafeArenaSwap(StepSequence* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StepSequence::InternalSwap(StepSequence* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(graph_key_, other->graph_key_);
  swap(next_step_id_, other->next_step_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StepSequence::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetStepSequenceResponse::InitAsDefaultInstance() {
}
class GetStepSequenceResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetStepSequenceResponse::kStepSequenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetStepSequenceResponse::GetStepSequenceResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GetStepSequenceResponse)
}
GetStepSequenceResponse::GetStepSequenceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  step_sequence_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GetStepSequenceResponse)
}
GetStepSequenceResponse::GetStepSequenceResponse(const GetStepSequenceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      step_sequence_(from.step_sequence_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.GetStepSequenceResponse)
}

void GetStepSequenceResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetStepSequenceResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
}

GetStepSequenceResponse::~GetStepSequenceResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.GetStepSequenceResponse)
  SharedDtor();
}

void GetStepSequenceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void GetStepSequenceResponse::ArenaDtor(void* object) {
  GetStepSequenceResponse* _this = reinterpret_cast< GetStepSequenceResponse* >(object);
  (void)_this;
}
void GetStepSequenceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetStepSequenceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStepSequenceResponse& GetStepSequenceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStepSequenceResponse_tensorflow_2fcore_2fprotobuf_2fworker_2eproto.base);
  return *internal_default_instance();
}


void GetStepSequenceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GetStepSequenceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  step_sequence_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetStepSequenceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tensorflow.StepSequence step_sequence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_step_sequence(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetStepSequenceResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GetStepSequenceResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.StepSequence step_sequence = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_step_sequence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GetStepSequenceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GetStepSequenceResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetStepSequenceResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GetStepSequenceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.StepSequence step_sequence = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->step_sequence_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->step_sequence(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.GetStepSequenceResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStepSequenceResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GetStepSequenceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.StepSequence step_sequence = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->step_sequence_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->step_sequence(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GetStepSequenceResponse)
  return target;
}

size_t GetStepSequenceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GetStepSequenceResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.StepSequence step_sequence = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->step_sequence_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->step_sequence(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStepSequenceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GetStepSequenceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStepSequenceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStepSequenceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GetStepSequenceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GetStepSequenceResponse)
    MergeFrom(*source);
  }
}

void GetStepSequenceResponse::MergeFrom(const GetStepSequenceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GetStepSequenceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  step_sequence_.MergeFrom(from.step_sequence_);
}

void GetStepSequenceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GetStepSequenceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStepSequenceResponse::CopyFrom(const GetStepSequenceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GetStepSequenceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStepSequenceResponse::IsInitialized() const {
  return true;
}

void GetStepSequenceResponse::Swap(GetStepSequenceResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetStepSequenceResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void GetStepSequenceResponse::UnsafeArenaSwap(GetStepSequenceResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetStepSequenceResponse::InternalSwap(GetStepSequenceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&step_sequence_)->InternalSwap(CastToBase(&other->step_sequence_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStepSequenceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::GetStatusRequest* Arena::CreateMaybeMessage< ::tensorflow::GetStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::GetStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::GetStatusResponse* Arena::CreateMaybeMessage< ::tensorflow::GetStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::GetStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::CreateWorkerSessionRequest* Arena::CreateMaybeMessage< ::tensorflow::CreateWorkerSessionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CreateWorkerSessionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::CreateWorkerSessionResponse* Arena::CreateMaybeMessage< ::tensorflow::CreateWorkerSessionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CreateWorkerSessionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::DeleteWorkerSessionRequest* Arena::CreateMaybeMessage< ::tensorflow::DeleteWorkerSessionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::DeleteWorkerSessionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::DeleteWorkerSessionResponse* Arena::CreateMaybeMessage< ::tensorflow::DeleteWorkerSessionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::DeleteWorkerSessionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::RegisterGraphRequest* Arena::CreateMaybeMessage< ::tensorflow::RegisterGraphRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::RegisterGraphRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::RegisterGraphResponse* Arena::CreateMaybeMessage< ::tensorflow::RegisterGraphResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::RegisterGraphResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::DeregisterGraphRequest* Arena::CreateMaybeMessage< ::tensorflow::DeregisterGraphRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::DeregisterGraphRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::DeregisterGraphResponse* Arena::CreateMaybeMessage< ::tensorflow::DeregisterGraphResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::DeregisterGraphResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::CleanupAllRequest* Arena::CreateMaybeMessage< ::tensorflow::CleanupAllRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CleanupAllRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::CleanupAllResponse* Arena::CreateMaybeMessage< ::tensorflow::CleanupAllResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CleanupAllResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::ExecutorOpts* Arena::CreateMaybeMessage< ::tensorflow::ExecutorOpts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::ExecutorOpts >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::RunGraphRequest* Arena::CreateMaybeMessage< ::tensorflow::RunGraphRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::RunGraphRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::RunGraphResponse* Arena::CreateMaybeMessage< ::tensorflow::RunGraphResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::RunGraphResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::CleanupGraphRequest* Arena::CreateMaybeMessage< ::tensorflow::CleanupGraphRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CleanupGraphRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::CleanupGraphResponse* Arena::CreateMaybeMessage< ::tensorflow::CleanupGraphResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CleanupGraphResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::RecvTensorRequest* Arena::CreateMaybeMessage< ::tensorflow::RecvTensorRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::RecvTensorRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::RecvTensorResponse* Arena::CreateMaybeMessage< ::tensorflow::RecvTensorResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::RecvTensorResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::MarkRecvFinishedRequest* Arena::CreateMaybeMessage< ::tensorflow::MarkRecvFinishedRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::MarkRecvFinishedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::MarkRecvFinishedResponse* Arena::CreateMaybeMessage< ::tensorflow::MarkRecvFinishedResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::MarkRecvFinishedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::LoggingRequest* Arena::CreateMaybeMessage< ::tensorflow::LoggingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::LoggingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::LabeledStepStats* Arena::CreateMaybeMessage< ::tensorflow::LabeledStepStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::LabeledStepStats >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::LoggingResponse* Arena::CreateMaybeMessage< ::tensorflow::LoggingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::LoggingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::TraceOpts* Arena::CreateMaybeMessage< ::tensorflow::TraceOpts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::TraceOpts >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::TracingRequest* Arena::CreateMaybeMessage< ::tensorflow::TracingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::TracingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::TracingResponse* Arena::CreateMaybeMessage< ::tensorflow::TracingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::TracingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::RecvBufRequest* Arena::CreateMaybeMessage< ::tensorflow::RecvBufRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::RecvBufRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::RecvBufResponse* Arena::CreateMaybeMessage< ::tensorflow::RecvBufResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::RecvBufResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::CompleteGroupRequest* Arena::CreateMaybeMessage< ::tensorflow::CompleteGroupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CompleteGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::CompleteGroupResponse* Arena::CreateMaybeMessage< ::tensorflow::CompleteGroupResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CompleteGroupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::CompleteInstanceRequest* Arena::CreateMaybeMessage< ::tensorflow::CompleteInstanceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CompleteInstanceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::CompleteInstanceResponse* Arena::CreateMaybeMessage< ::tensorflow::CompleteInstanceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CompleteInstanceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::GetStepSequenceRequest* Arena::CreateMaybeMessage< ::tensorflow::GetStepSequenceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::GetStepSequenceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::StepSequence* Arena::CreateMaybeMessage< ::tensorflow::StepSequence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::StepSequence >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::GetStepSequenceResponse* Arena::CreateMaybeMessage< ::tensorflow::GetStepSequenceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::GetStepSequenceResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
