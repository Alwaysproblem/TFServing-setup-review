// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/eager_service.proto

#include "tensorflow/core/protobuf/eager_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AttrValue_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeviceAttributes_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2ffunction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_FunctionDef_tensorflow_2fcore_2fframework_2ffunction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2ffunction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FunctionDefLibrary_tensorflow_2fcore_2fframework_2ffunction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ServerDef_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2ftensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TensorProto_tensorflow_2fcore_2fframework_2ftensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TensorShapeProto_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2fversions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VersionDef_tensorflow_2fcore_2fframework_2fversions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CleanupFunctionOp_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Operation_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Operation_AttrsEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Operation_Input_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_QueueItem_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_QueueResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RegisterFunctionOp_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RemoteTensorHandle_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SendPackedHandleOp_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SendPackedHandleOp_Handle_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SendPackedHandleOp_LocalTensorHandle_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SendTensorOp_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SyncRemoteExecutorForStream_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto;
namespace tensorflow {
namespace eager {
class Operation_InputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Operation_Input> _instance;
  const ::tensorflow::eager::RemoteTensorHandle* remote_handle_;
  const ::tensorflow::TensorProto* tensor_;
} _Operation_Input_default_instance_;
class Operation_AttrsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Operation_AttrsEntry_DoNotUse> _instance;
} _Operation_AttrsEntry_DoNotUse_default_instance_;
class OperationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Operation> _instance;
} _Operation_default_instance_;
class QueueItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueueItem> _instance;
  const ::tensorflow::eager::RemoteTensorHandle* handle_to_decref_;
  const ::tensorflow::eager::Operation* operation_;
  const ::tensorflow::eager::SendTensorOp* send_tensor_;
  const ::tensorflow::eager::RegisterFunctionOp* register_function_;
  const ::tensorflow::eager::CleanupFunctionOp* cleanup_function_;
  const ::tensorflow::eager::SyncRemoteExecutorForStream* sync_remote_executor_for_stream_;
  const ::tensorflow::eager::SendPackedHandleOp* send_packed_handle_;
} _QueueItem_default_instance_;
class QueueResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueueResponse> _instance;
} _QueueResponse_default_instance_;
class CreateContextRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateContextRequest> _instance;
} _CreateContextRequest_default_instance_;
class CreateContextResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateContextResponse> _instance;
} _CreateContextResponse_default_instance_;
class UpdateContextRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateContextRequest> _instance;
} _UpdateContextRequest_default_instance_;
class UpdateContextResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateContextResponse> _instance;
} _UpdateContextResponse_default_instance_;
class EnqueueRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnqueueRequest> _instance;
} _EnqueueRequest_default_instance_;
class EnqueueResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnqueueResponse> _instance;
} _EnqueueResponse_default_instance_;
class WaitQueueDoneRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WaitQueueDoneRequest> _instance;
} _WaitQueueDoneRequest_default_instance_;
class WaitQueueDoneResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WaitQueueDoneResponse> _instance;
} _WaitQueueDoneResponse_default_instance_;
class RunComponentFunctionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RunComponentFunctionRequest> _instance;
} _RunComponentFunctionRequest_default_instance_;
class RunComponentFunctionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RunComponentFunctionResponse> _instance;
} _RunComponentFunctionResponse_default_instance_;
class KeepAliveRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeepAliveRequest> _instance;
} _KeepAliveRequest_default_instance_;
class KeepAliveResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeepAliveResponse> _instance;
} _KeepAliveResponse_default_instance_;
class CloseContextRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CloseContextRequest> _instance;
} _CloseContextRequest_default_instance_;
class CloseContextResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CloseContextResponse> _instance;
} _CloseContextResponse_default_instance_;
class RegisterFunctionOpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterFunctionOp> _instance;
} _RegisterFunctionOp_default_instance_;
class CleanupFunctionOpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CleanupFunctionOp> _instance;
} _CleanupFunctionOp_default_instance_;
class SyncRemoteExecutorForStreamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SyncRemoteExecutorForStream> _instance;
} _SyncRemoteExecutorForStream_default_instance_;
class SendTensorOpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendTensorOp> _instance;
} _SendTensorOp_default_instance_;
class SendPackedHandleOp_LocalTensorHandleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendPackedHandleOp_LocalTensorHandle> _instance;
} _SendPackedHandleOp_LocalTensorHandle_default_instance_;
class SendPackedHandleOp_HandleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendPackedHandleOp_Handle> _instance;
  const ::tensorflow::eager::SendPackedHandleOp_LocalTensorHandle* local_handle_;
  const ::tensorflow::eager::RemoteTensorHandle* remote_handle_;
} _SendPackedHandleOp_Handle_default_instance_;
class SendPackedHandleOpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendPackedHandleOp> _instance;
} _SendPackedHandleOp_default_instance_;
}  // namespace eager
}  // namespace tensorflow
static void InitDefaultsscc_info_CleanupFunctionOp_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::eager::_CleanupFunctionOp_default_instance_;
    new (ptr) ::tensorflow::eager::CleanupFunctionOp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::eager::CleanupFunctionOp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CleanupFunctionOp_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CleanupFunctionOp_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CloseContextRequest_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::eager::_CloseContextRequest_default_instance_;
    new (ptr) ::tensorflow::eager::CloseContextRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::eager::CloseContextRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CloseContextRequest_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CloseContextRequest_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CloseContextResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::eager::_CloseContextResponse_default_instance_;
    new (ptr) ::tensorflow::eager::CloseContextResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::eager::CloseContextResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CloseContextResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CloseContextResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CreateContextRequest_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::eager::_CreateContextRequest_default_instance_;
    new (ptr) ::tensorflow::eager::CreateContextRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::eager::CreateContextRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CreateContextRequest_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_CreateContextRequest_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto}, {
      &scc_info_ServerDef_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto.base,
      &scc_info_VersionDef_tensorflow_2fcore_2fframework_2fversions_2eproto.base,
      &scc_info_DeviceAttributes_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto.base,}};

static void InitDefaultsscc_info_CreateContextResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::eager::_CreateContextResponse_default_instance_;
    new (ptr) ::tensorflow::eager::CreateContextResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::eager::CreateContextResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateContextResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CreateContextResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto}, {
      &scc_info_DeviceAttributes_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto.base,}};

static void InitDefaultsscc_info_EnqueueRequest_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::eager::_EnqueueRequest_default_instance_;
    new (ptr) ::tensorflow::eager::EnqueueRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::eager::EnqueueRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EnqueueRequest_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_EnqueueRequest_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto}, {
      &scc_info_QueueItem_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_EnqueueResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::eager::_EnqueueResponse_default_instance_;
    new (ptr) ::tensorflow::eager::EnqueueResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::eager::EnqueueResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EnqueueResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_EnqueueResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto}, {
      &scc_info_QueueResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_KeepAliveRequest_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::eager::_KeepAliveRequest_default_instance_;
    new (ptr) ::tensorflow::eager::KeepAliveRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::eager::KeepAliveRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeepAliveRequest_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_KeepAliveRequest_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_KeepAliveResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::eager::_KeepAliveResponse_default_instance_;
    new (ptr) ::tensorflow::eager::KeepAliveResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::eager::KeepAliveResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeepAliveResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_KeepAliveResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_Operation_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::eager::_Operation_default_instance_;
    new (ptr) ::tensorflow::eager::Operation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::eager::Operation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Operation_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Operation_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto}, {
      &scc_info_Operation_Input_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base,
      &scc_info_Operation_AttrsEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_Operation_AttrsEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::eager::_Operation_AttrsEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::eager::Operation_AttrsEntry_DoNotUse();
  }
  ::tensorflow::eager::Operation_AttrsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Operation_AttrsEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Operation_AttrsEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto}, {
      &scc_info_AttrValue_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto.base,}};

static void InitDefaultsscc_info_Operation_Input_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::eager::_Operation_Input_default_instance_;
    new (ptr) ::tensorflow::eager::Operation_Input();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::eager::Operation_Input::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Operation_Input_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Operation_Input_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto}, {
      &scc_info_RemoteTensorHandle_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto.base,
      &scc_info_TensorProto_tensorflow_2fcore_2fframework_2ftensor_2eproto.base,}};

static void InitDefaultsscc_info_QueueItem_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::eager::_QueueItem_default_instance_;
    new (ptr) ::tensorflow::eager::QueueItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::eager::QueueItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_QueueItem_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsscc_info_QueueItem_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto}, {
      &scc_info_RemoteTensorHandle_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto.base,
      &scc_info_Operation_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base,
      &scc_info_SendTensorOp_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base,
      &scc_info_RegisterFunctionOp_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base,
      &scc_info_CleanupFunctionOp_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base,
      &scc_info_SyncRemoteExecutorForStream_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base,
      &scc_info_SendPackedHandleOp_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_QueueResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::eager::_QueueResponse_default_instance_;
    new (ptr) ::tensorflow::eager::QueueResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::eager::QueueResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_QueueResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_QueueResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto}, {
      &scc_info_TensorShapeProto_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto.base,
      &scc_info_TensorProto_tensorflow_2fcore_2fframework_2ftensor_2eproto.base,}};

static void InitDefaultsscc_info_RegisterFunctionOp_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::eager::_RegisterFunctionOp_default_instance_;
    new (ptr) ::tensorflow::eager::RegisterFunctionOp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::eager::RegisterFunctionOp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RegisterFunctionOp_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RegisterFunctionOp_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto}, {
      &scc_info_FunctionDef_tensorflow_2fcore_2fframework_2ffunction_2eproto.base,
      &scc_info_FunctionDefLibrary_tensorflow_2fcore_2fframework_2ffunction_2eproto.base,}};

static void InitDefaultsscc_info_RunComponentFunctionRequest_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::eager::_RunComponentFunctionRequest_default_instance_;
    new (ptr) ::tensorflow::eager::RunComponentFunctionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::eager::RunComponentFunctionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RunComponentFunctionRequest_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RunComponentFunctionRequest_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto}, {
      &scc_info_Operation_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_RunComponentFunctionResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::eager::_RunComponentFunctionResponse_default_instance_;
    new (ptr) ::tensorflow::eager::RunComponentFunctionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::eager::RunComponentFunctionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RunComponentFunctionResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RunComponentFunctionResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto}, {
      &scc_info_TensorShapeProto_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto.base,
      &scc_info_TensorProto_tensorflow_2fcore_2fframework_2ftensor_2eproto.base,}};

static void InitDefaultsscc_info_SendPackedHandleOp_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::eager::_SendPackedHandleOp_default_instance_;
    new (ptr) ::tensorflow::eager::SendPackedHandleOp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::eager::SendPackedHandleOp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SendPackedHandleOp_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SendPackedHandleOp_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto}, {
      &scc_info_SendPackedHandleOp_Handle_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_SendPackedHandleOp_Handle_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::eager::_SendPackedHandleOp_Handle_default_instance_;
    new (ptr) ::tensorflow::eager::SendPackedHandleOp_Handle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::eager::SendPackedHandleOp_Handle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SendPackedHandleOp_Handle_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_SendPackedHandleOp_Handle_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto}, {
      &scc_info_SendPackedHandleOp_LocalTensorHandle_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base,
      &scc_info_RemoteTensorHandle_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto.base,}};

static void InitDefaultsscc_info_SendPackedHandleOp_LocalTensorHandle_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::eager::_SendPackedHandleOp_LocalTensorHandle_default_instance_;
    new (ptr) ::tensorflow::eager::SendPackedHandleOp_LocalTensorHandle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::eager::SendPackedHandleOp_LocalTensorHandle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SendPackedHandleOp_LocalTensorHandle_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SendPackedHandleOp_LocalTensorHandle_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto}, {
      &scc_info_TensorProto_tensorflow_2fcore_2fframework_2ftensor_2eproto.base,}};

static void InitDefaultsscc_info_SendTensorOp_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::eager::_SendTensorOp_default_instance_;
    new (ptr) ::tensorflow::eager::SendTensorOp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::eager::SendTensorOp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SendTensorOp_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SendTensorOp_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto}, {
      &scc_info_TensorProto_tensorflow_2fcore_2fframework_2ftensor_2eproto.base,}};

static void InitDefaultsscc_info_SyncRemoteExecutorForStream_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::eager::_SyncRemoteExecutorForStream_default_instance_;
    new (ptr) ::tensorflow::eager::SyncRemoteExecutorForStream();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::eager::SyncRemoteExecutorForStream::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SyncRemoteExecutorForStream_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SyncRemoteExecutorForStream_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_UpdateContextRequest_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::eager::_UpdateContextRequest_default_instance_;
    new (ptr) ::tensorflow::eager::UpdateContextRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::eager::UpdateContextRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateContextRequest_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_UpdateContextRequest_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto}, {
      &scc_info_ServerDef_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto.base,
      &scc_info_DeviceAttributes_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto.base,}};

static void InitDefaultsscc_info_UpdateContextResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::eager::_UpdateContextResponse_default_instance_;
    new (ptr) ::tensorflow::eager::UpdateContextResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::eager::UpdateContextResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateContextResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_UpdateContextResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto}, {
      &scc_info_DeviceAttributes_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto.base,}};

static void InitDefaultsscc_info_WaitQueueDoneRequest_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::eager::_WaitQueueDoneRequest_default_instance_;
    new (ptr) ::tensorflow::eager::WaitQueueDoneRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::eager::WaitQueueDoneRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WaitQueueDoneRequest_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WaitQueueDoneRequest_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_WaitQueueDoneResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::eager::_WaitQueueDoneResponse_default_instance_;
    new (ptr) ::tensorflow::eager::WaitQueueDoneResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::eager::WaitQueueDoneResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WaitQueueDoneResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WaitQueueDoneResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto[26];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::Operation_Input, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::Operation_Input, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::tensorflow::eager::Operation_InputDefaultTypeInternal, remote_handle_),
  offsetof(::tensorflow::eager::Operation_InputDefaultTypeInternal, tensor_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::Operation_Input, item_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::Operation_AttrsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::Operation_AttrsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::Operation_AttrsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::Operation_AttrsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::Operation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::Operation, id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::Operation, name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::Operation, op_inputs_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::Operation, control_op_ids_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::Operation, attrs_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::Operation, device_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::Operation, is_component_function_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::Operation, func_step_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::Operation, is_function_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::QueueItem, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::QueueItem, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::tensorflow::eager::QueueItemDefaultTypeInternal, handle_to_decref_),
  offsetof(::tensorflow::eager::QueueItemDefaultTypeInternal, operation_),
  offsetof(::tensorflow::eager::QueueItemDefaultTypeInternal, send_tensor_),
  offsetof(::tensorflow::eager::QueueItemDefaultTypeInternal, register_function_),
  offsetof(::tensorflow::eager::QueueItemDefaultTypeInternal, cleanup_function_),
  offsetof(::tensorflow::eager::QueueItemDefaultTypeInternal, sync_remote_executor_for_stream_),
  offsetof(::tensorflow::eager::QueueItemDefaultTypeInternal, send_packed_handle_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::QueueItem, item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::QueueResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::QueueResponse, shape_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::QueueResponse, tensor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::CreateContextRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::CreateContextRequest, server_def_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::CreateContextRequest, async_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::CreateContextRequest, keep_alive_secs_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::CreateContextRequest, version_def_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::CreateContextRequest, cluster_device_attributes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::CreateContextRequest, context_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::CreateContextRequest, context_view_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::CreateContextRequest, lazy_copy_remote_function_inputs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::CreateContextResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::CreateContextResponse, device_attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::UpdateContextRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::UpdateContextRequest, server_def_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::UpdateContextRequest, cluster_device_attributes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::UpdateContextRequest, context_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::UpdateContextRequest, context_view_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::UpdateContextResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::UpdateContextResponse, device_attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::EnqueueRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::EnqueueRequest, context_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::EnqueueRequest, queue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::EnqueueResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::EnqueueResponse, queue_response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::WaitQueueDoneRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::WaitQueueDoneRequest, context_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::WaitQueueDoneRequest, op_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::WaitQueueDoneResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::RunComponentFunctionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::RunComponentFunctionRequest, context_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::RunComponentFunctionRequest, operation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::RunComponentFunctionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::RunComponentFunctionResponse, shape_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::RunComponentFunctionResponse, tensor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::KeepAliveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::KeepAliveRequest, context_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::KeepAliveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::KeepAliveResponse, context_view_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::CloseContextRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::CloseContextRequest, context_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::CloseContextRequest, context_view_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::CloseContextResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::RegisterFunctionOp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::RegisterFunctionOp, function_def_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::RegisterFunctionOp, is_component_function_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::RegisterFunctionOp, library_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::CleanupFunctionOp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::CleanupFunctionOp, step_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::SyncRemoteExecutorForStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::SendTensorOp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::SendTensorOp, op_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::SendTensorOp, tensors_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::SendTensorOp, device_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::SendPackedHandleOp_LocalTensorHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::SendPackedHandleOp_LocalTensorHandle, tensor_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::SendPackedHandleOp_LocalTensorHandle, device_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::SendPackedHandleOp_Handle, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::SendPackedHandleOp_Handle, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::tensorflow::eager::SendPackedHandleOp_HandleDefaultTypeInternal, local_handle_),
  offsetof(::tensorflow::eager::SendPackedHandleOp_HandleDefaultTypeInternal, remote_handle_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::SendPackedHandleOp_Handle, item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::SendPackedHandleOp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::SendPackedHandleOp, op_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::SendPackedHandleOp, handles_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::SendPackedHandleOp, device_name_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::eager::Operation_Input)},
  { 8, 15, sizeof(::tensorflow::eager::Operation_AttrsEntry_DoNotUse)},
  { 17, -1, sizeof(::tensorflow::eager::Operation)},
  { 31, -1, sizeof(::tensorflow::eager::QueueItem)},
  { 44, -1, sizeof(::tensorflow::eager::QueueResponse)},
  { 51, -1, sizeof(::tensorflow::eager::CreateContextRequest)},
  { 64, -1, sizeof(::tensorflow::eager::CreateContextResponse)},
  { 70, -1, sizeof(::tensorflow::eager::UpdateContextRequest)},
  { 79, -1, sizeof(::tensorflow::eager::UpdateContextResponse)},
  { 85, -1, sizeof(::tensorflow::eager::EnqueueRequest)},
  { 92, -1, sizeof(::tensorflow::eager::EnqueueResponse)},
  { 98, -1, sizeof(::tensorflow::eager::WaitQueueDoneRequest)},
  { 105, -1, sizeof(::tensorflow::eager::WaitQueueDoneResponse)},
  { 110, -1, sizeof(::tensorflow::eager::RunComponentFunctionRequest)},
  { 117, -1, sizeof(::tensorflow::eager::RunComponentFunctionResponse)},
  { 124, -1, sizeof(::tensorflow::eager::KeepAliveRequest)},
  { 130, -1, sizeof(::tensorflow::eager::KeepAliveResponse)},
  { 136, -1, sizeof(::tensorflow::eager::CloseContextRequest)},
  { 143, -1, sizeof(::tensorflow::eager::CloseContextResponse)},
  { 148, -1, sizeof(::tensorflow::eager::RegisterFunctionOp)},
  { 156, -1, sizeof(::tensorflow::eager::CleanupFunctionOp)},
  { 162, -1, sizeof(::tensorflow::eager::SyncRemoteExecutorForStream)},
  { 167, -1, sizeof(::tensorflow::eager::SendTensorOp)},
  { 175, -1, sizeof(::tensorflow::eager::SendPackedHandleOp_LocalTensorHandle)},
  { 182, -1, sizeof(::tensorflow::eager::SendPackedHandleOp_Handle)},
  { 190, -1, sizeof(::tensorflow::eager::SendPackedHandleOp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::eager::_Operation_Input_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::eager::_Operation_AttrsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::eager::_Operation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::eager::_QueueItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::eager::_QueueResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::eager::_CreateContextRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::eager::_CreateContextResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::eager::_UpdateContextRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::eager::_UpdateContextResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::eager::_EnqueueRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::eager::_EnqueueResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::eager::_WaitQueueDoneRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::eager::_WaitQueueDoneResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::eager::_RunComponentFunctionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::eager::_RunComponentFunctionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::eager::_KeepAliveRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::eager::_KeepAliveResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::eager::_CloseContextRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::eager::_CloseContextResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::eager::_RegisterFunctionOp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::eager::_CleanupFunctionOp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::eager::_SyncRemoteExecutorForStream_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::eager::_SendTensorOp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::eager::_SendPackedHandleOp_LocalTensorHandle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::eager::_SendPackedHandleOp_Handle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::eager::_SendPackedHandleOp_default_instance_),
};

const char descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto[] =
  "\n,tensorflow/core/protobuf/eager_service"
  ".proto\022\020tensorflow.eager\032*tensorflow/cor"
  "e/framework/attr_value.proto\0321tensorflow"
  "/core/framework/device_attributes.proto\032"
  "(tensorflow/core/framework/function.prot"
  "o\032&tensorflow/core/framework/tensor.prot"
  "o\032,tensorflow/core/framework/tensor_shap"
  "e.proto\032(tensorflow/core/framework/versi"
  "ons.proto\0323tensorflow/core/protobuf/remo"
  "te_tensor_handle.proto\0320tensorflow/core/"
  "protobuf/tensorflow_server.proto\"\312\003\n\tOpe"
  "ration\022\n\n\002id\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\0224\n\top_i"
  "nputs\030\n \003(\0132!.tensorflow.eager.Operation"
  ".Input\022\026\n\016control_op_ids\030\004 \003(\003\0225\n\005attrs\030"
  "\005 \003(\0132&.tensorflow.eager.Operation.Attrs"
  "Entry\022\016\n\006device\030\006 \001(\t\022\035\n\025is_component_fu"
  "nction\030\007 \001(\010\022\024\n\014func_step_id\030\010 \001(\003\022\023\n\013is"
  "_function\030\t \001(\010\032y\n\005Input\022=\n\rremote_handl"
  "e\030\001 \001(\0132$.tensorflow.eager.RemoteTensorH"
  "andleH\000\022)\n\006tensor\030\002 \001(\0132\027.tensorflow.Ten"
  "sorProtoH\000B\006\n\004item\032C\n\nAttrsEntry\022\013\n\003key\030"
  "\001 \001(\t\022$\n\005value\030\002 \001(\0132\025.tensorflow.AttrVa"
  "lue:\0028\001J\004\010\003\020\004\"\340\003\n\tQueueItem\022@\n\020handle_to"
  "_decref\030\001 \001(\0132$.tensorflow.eager.RemoteT"
  "ensorHandleH\000\0220\n\toperation\030\002 \001(\0132\033.tenso"
  "rflow.eager.OperationH\000\0225\n\013send_tensor\030\003"
  " \001(\0132\036.tensorflow.eager.SendTensorOpH\000\022A"
  "\n\021register_function\030\004 \001(\0132$.tensorflow.e"
  "ager.RegisterFunctionOpH\000\022\?\n\020cleanup_fun"
  "ction\030\005 \001(\0132#.tensorflow.eager.CleanupFu"
  "nctionOpH\000\022X\n\037sync_remote_executor_for_s"
  "tream\030\006 \001(\0132-.tensorflow.eager.SyncRemot"
  "eExecutorForStreamH\000\022B\n\022send_packed_hand"
  "le\030\007 \001(\0132$.tensorflow.eager.SendPackedHa"
  "ndleOpH\000B\006\n\004item\"e\n\rQueueResponse\022+\n\005sha"
  "pe\030\001 \003(\0132\034.tensorflow.TensorShapeProto\022\'"
  "\n\006tensor\030\002 \003(\0132\027.tensorflow.TensorProto\""
  "\264\002\n\024CreateContextRequest\022)\n\nserver_def\030\001"
  " \001(\0132\025.tensorflow.ServerDef\022\r\n\005async\030\002 \001"
  "(\010\022\027\n\017keep_alive_secs\030\003 \001(\003\022+\n\013version_d"
  "ef\030\004 \001(\0132\026.tensorflow.VersionDef\022\?\n\031clus"
  "ter_device_attributes\030\006 \003(\0132\034.tensorflow"
  ".DeviceAttributes\022\022\n\ncontext_id\030\007 \001(\006\022\027\n"
  "\017context_view_id\030\010 \001(\006\022(\n lazy_copy_remo"
  "te_function_inputs\030\t \001(\010J\004\010\005\020\006\"V\n\025Create"
  "ContextResponse\0227\n\021device_attributes\030\002 \003"
  "(\0132\034.tensorflow.DeviceAttributesJ\004\010\001\020\002\"\257"
  "\001\n\024UpdateContextRequest\022)\n\nserver_def\030\001 "
  "\001(\0132\025.tensorflow.ServerDef\022\?\n\031cluster_de"
  "vice_attributes\030\002 \003(\0132\034.tensorflow.Devic"
  "eAttributes\022\022\n\ncontext_id\030\003 \001(\006\022\027\n\017conte"
  "xt_view_id\030\004 \001(\006\"P\n\025UpdateContextRespons"
  "e\0227\n\021device_attributes\030\001 \003(\0132\034.tensorflo"
  "w.DeviceAttributes\"P\n\016EnqueueRequest\022\022\n\n"
  "context_id\030\001 \001(\006\022*\n\005queue\030\003 \003(\0132\033.tensor"
  "flow.eager.QueueItem\"J\n\017EnqueueResponse\022"
  "7\n\016queue_response\030\001 \003(\0132\037.tensorflow.eag"
  "er.QueueResponse\"9\n\024WaitQueueDoneRequest"
  "\022\022\n\ncontext_id\030\001 \001(\006\022\r\n\005op_id\030\002 \003(\003\"\027\n\025W"
  "aitQueueDoneResponse\"a\n\033RunComponentFunc"
  "tionRequest\022\022\n\ncontext_id\030\001 \001(\006\022.\n\topera"
  "tion\030\002 \001(\0132\033.tensorflow.eager.Operation\""
  "t\n\034RunComponentFunctionResponse\022+\n\005shape"
  "\030\001 \003(\0132\034.tensorflow.TensorShapeProto\022\'\n\006"
  "tensor\030\002 \003(\0132\027.tensorflow.TensorProto\"&\n"
  "\020KeepAliveRequest\022\022\n\ncontext_id\030\001 \001(\006\",\n"
  "\021KeepAliveResponse\022\027\n\017context_view_id\030\001 "
  "\001(\006\"B\n\023CloseContextRequest\022\022\n\ncontext_id"
  "\030\001 \001(\006\022\027\n\017context_view_id\030\002 \001(\006\"\026\n\024Close"
  "ContextResponse\"\223\001\n\022RegisterFunctionOp\022-"
  "\n\014function_def\030\001 \001(\0132\027.tensorflow.Functi"
  "onDef\022\035\n\025is_component_function\030\002 \001(\010\022/\n\007"
  "library\030\003 \001(\0132\036.tensorflow.FunctionDefLi"
  "brary\"$\n\021CleanupFunctionOp\022\017\n\007step_id\030\001 "
  "\001(\003\"\035\n\033SyncRemoteExecutorForStream\"\\\n\014Se"
  "ndTensorOp\022\r\n\005op_id\030\001 \001(\003\022(\n\007tensors\030\002 \003"
  "(\0132\027.tensorflow.TensorProto\022\023\n\013device_na"
  "me\030\003 \001(\t\"\346\002\n\022SendPackedHandleOp\022\r\n\005op_id"
  "\030\001 \001(\003\022<\n\007handles\030\002 \003(\0132+.tensorflow.eag"
  "er.SendPackedHandleOp.Handle\022\023\n\013device_n"
  "ame\030\003 \001(\t\032L\n\021LocalTensorHandle\022\'\n\006tensor"
  "\030\001 \001(\0132\027.tensorflow.TensorProto\022\016\n\006devic"
  "e\030\002 \001(\t\032\237\001\n\006Handle\022N\n\014local_handle\030\001 \001(\013"
  "26.tensorflow.eager.SendPackedHandleOp.L"
  "ocalTensorHandleH\000\022=\n\rremote_handle\030\002 \001("
  "\0132$.tensorflow.eager.RemoteTensorHandleH"
  "\000B\006\n\004item2\215\006\n\014EagerService\022`\n\rCreateCont"
  "ext\022&.tensorflow.eager.CreateContextRequ"
  "est\032\'.tensorflow.eager.CreateContextResp"
  "onse\022`\n\rUpdateContext\022&.tensorflow.eager"
  ".UpdateContextRequest\032\'.tensorflow.eager"
  ".UpdateContextResponse\022N\n\007Enqueue\022 .tens"
  "orflow.eager.EnqueueRequest\032!.tensorflow"
  ".eager.EnqueueResponse\022[\n\020StreamingEnque"
  "ue\022 .tensorflow.eager.EnqueueRequest\032!.t"
  "ensorflow.eager.EnqueueResponse(\0010\001\022`\n\rW"
  "aitQueueDone\022&.tensorflow.eager.WaitQueu"
  "eDoneRequest\032\'.tensorflow.eager.WaitQueu"
  "eDoneResponse\022u\n\024RunComponentFunction\022-."
  "tensorflow.eager.RunComponentFunctionReq"
  "uest\032..tensorflow.eager.RunComponentFunc"
  "tionResponse\022T\n\tKeepAlive\022\".tensorflow.e"
  "ager.KeepAliveRequest\032#.tensorflow.eager"
  ".KeepAliveResponse\022]\n\014CloseContext\022%.ten"
  "sorflow.eager.CloseContextRequest\032&.tens"
  "orflow.eager.CloseContextResponseBJZHgit"
  "hub.com/tensorflow/tensorflow/tensorflow"
  "/go/core/core_protos_go_protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_deps[8] = {
  &::descriptor_table_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ffunction_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2fversions_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_sccs[26] = {
  &scc_info_CleanupFunctionOp_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base,
  &scc_info_CloseContextRequest_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base,
  &scc_info_CloseContextResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base,
  &scc_info_CreateContextRequest_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base,
  &scc_info_CreateContextResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base,
  &scc_info_EnqueueRequest_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base,
  &scc_info_EnqueueResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base,
  &scc_info_KeepAliveRequest_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base,
  &scc_info_KeepAliveResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base,
  &scc_info_Operation_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base,
  &scc_info_Operation_AttrsEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base,
  &scc_info_Operation_Input_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base,
  &scc_info_QueueItem_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base,
  &scc_info_QueueResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base,
  &scc_info_RegisterFunctionOp_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base,
  &scc_info_RunComponentFunctionRequest_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base,
  &scc_info_RunComponentFunctionResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base,
  &scc_info_SendPackedHandleOp_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base,
  &scc_info_SendPackedHandleOp_Handle_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base,
  &scc_info_SendPackedHandleOp_LocalTensorHandle_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base,
  &scc_info_SendTensorOp_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base,
  &scc_info_SyncRemoteExecutorForStream_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base,
  &scc_info_UpdateContextRequest_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base,
  &scc_info_UpdateContextResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base,
  &scc_info_WaitQueueDoneRequest_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base,
  &scc_info_WaitQueueDoneResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_once;
static bool descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto = {
  &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_initialized, descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto, "tensorflow/core/protobuf/eager_service.proto", 4317,
  &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_once, descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_sccs, descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_deps, 26, 8,
  schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto::offsets,
  file_level_metadata_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto, 26, file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto, file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto), true);
namespace tensorflow {
namespace eager {

// ===================================================================

void Operation_Input::InitAsDefaultInstance() {
  ::tensorflow::eager::_Operation_Input_default_instance_.remote_handle_ = const_cast< ::tensorflow::eager::RemoteTensorHandle*>(
      ::tensorflow::eager::RemoteTensorHandle::internal_default_instance());
  ::tensorflow::eager::_Operation_Input_default_instance_.tensor_ = const_cast< ::tensorflow::TensorProto*>(
      ::tensorflow::TensorProto::internal_default_instance());
}
class Operation_Input::HasBitSetters {
 public:
  static const ::tensorflow::eager::RemoteTensorHandle& remote_handle(const Operation_Input* msg);
  static const ::tensorflow::TensorProto& tensor(const Operation_Input* msg);
};

const ::tensorflow::eager::RemoteTensorHandle&
Operation_Input::HasBitSetters::remote_handle(const Operation_Input* msg) {
  return *msg->item_.remote_handle_;
}
const ::tensorflow::TensorProto&
Operation_Input::HasBitSetters::tensor(const Operation_Input* msg) {
  return *msg->item_.tensor_;
}
void Operation_Input::set_allocated_remote_handle(::tensorflow::eager::RemoteTensorHandle* remote_handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_item();
  if (remote_handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remote_handle)->GetArena();
    if (message_arena != submessage_arena) {
      remote_handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remote_handle, submessage_arena);
    }
    set_has_remote_handle();
    item_.remote_handle_ = remote_handle;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.Operation.Input.remote_handle)
}
void Operation_Input::clear_remote_handle() {
  if (has_remote_handle()) {
    delete item_.remote_handle_;
    clear_has_item();
  }
}
void Operation_Input::set_allocated_tensor(::tensorflow::TensorProto* tensor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_item();
  if (tensor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tensor)->GetArena();
    if (message_arena != submessage_arena) {
      tensor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tensor, submessage_arena);
    }
    set_has_tensor();
    item_.tensor_ = tensor;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.Operation.Input.tensor)
}
void Operation_Input::clear_tensor() {
  if (has_tensor()) {
    delete item_.tensor_;
    clear_has_item();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Operation_Input::kRemoteHandleFieldNumber;
const int Operation_Input::kTensorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Operation_Input::Operation_Input()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.eager.Operation.Input)
}
Operation_Input::Operation_Input(const Operation_Input& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_item();
  switch (from.item_case()) {
    case kRemoteHandle: {
      mutable_remote_handle()->::tensorflow::eager::RemoteTensorHandle::MergeFrom(from.remote_handle());
      break;
    }
    case kTensor: {
      mutable_tensor()->::tensorflow::TensorProto::MergeFrom(from.tensor());
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.Operation.Input)
}

void Operation_Input::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Operation_Input_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base);
  clear_has_item();
}

Operation_Input::~Operation_Input() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.Operation.Input)
  SharedDtor();
}

void Operation_Input::SharedDtor() {
  if (has_item()) {
    clear_item();
  }
}

void Operation_Input::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Operation_Input& Operation_Input::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Operation_Input_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base);
  return *internal_default_instance();
}


void Operation_Input::clear_item() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.eager.Operation.Input)
  switch (item_case()) {
    case kRemoteHandle: {
      delete item_.remote_handle_;
      break;
    }
    case kTensor: {
      delete item_.tensor_;
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ITEM_NOT_SET;
}


void Operation_Input::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.Operation.Input)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_item();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Operation_Input::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.eager.RemoteTensorHandle remote_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_remote_handle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.TensorProto tensor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_tensor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Operation_Input::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.eager.Operation.Input)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.eager.RemoteTensorHandle remote_handle = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_remote_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.TensorProto tensor = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tensor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.eager.Operation.Input)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.eager.Operation.Input)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Operation_Input::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.eager.Operation.Input)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.eager.RemoteTensorHandle remote_handle = 1;
  if (has_remote_handle()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::remote_handle(this), output);
  }

  // .tensorflow.TensorProto tensor = 2;
  if (has_tensor()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::tensor(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.eager.Operation.Input)
}

::PROTOBUF_NAMESPACE_ID::uint8* Operation_Input::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.Operation.Input)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.eager.RemoteTensorHandle remote_handle = 1;
  if (has_remote_handle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::remote_handle(this), target);
  }

  // .tensorflow.TensorProto tensor = 2;
  if (has_tensor()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::tensor(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.Operation.Input)
  return target;
}

size_t Operation_Input::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.Operation.Input)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (item_case()) {
    // .tensorflow.eager.RemoteTensorHandle remote_handle = 1;
    case kRemoteHandle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *item_.remote_handle_);
      break;
    }
    // .tensorflow.TensorProto tensor = 2;
    case kTensor: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *item_.tensor_);
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Operation_Input::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.eager.Operation.Input)
  GOOGLE_DCHECK_NE(&from, this);
  const Operation_Input* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Operation_Input>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.eager.Operation.Input)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.eager.Operation.Input)
    MergeFrom(*source);
  }
}

void Operation_Input::MergeFrom(const Operation_Input& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.Operation.Input)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.item_case()) {
    case kRemoteHandle: {
      mutable_remote_handle()->::tensorflow::eager::RemoteTensorHandle::MergeFrom(from.remote_handle());
      break;
    }
    case kTensor: {
      mutable_tensor()->::tensorflow::TensorProto::MergeFrom(from.tensor());
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
}

void Operation_Input::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.eager.Operation.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Operation_Input::CopyFrom(const Operation_Input& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.Operation.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operation_Input::IsInitialized() const {
  return true;
}

void Operation_Input::Swap(Operation_Input* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Operation_Input::InternalSwap(Operation_Input* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(item_, other->item_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Operation_Input::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Operation_AttrsEntry_DoNotUse::Operation_AttrsEntry_DoNotUse() {}
Operation_AttrsEntry_DoNotUse::Operation_AttrsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Operation_AttrsEntry_DoNotUse::MergeFrom(const Operation_AttrsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Operation_AttrsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Operation_AttrsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Operation::InitAsDefaultInstance() {
}
class Operation::HasBitSetters {
 public:
};

void Operation::clear_attrs() {
  attrs_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Operation::kIdFieldNumber;
const int Operation::kNameFieldNumber;
const int Operation::kOpInputsFieldNumber;
const int Operation::kControlOpIdsFieldNumber;
const int Operation::kAttrsFieldNumber;
const int Operation::kDeviceFieldNumber;
const int Operation::kIsComponentFunctionFieldNumber;
const int Operation::kFuncStepIdFieldNumber;
const int Operation::kIsFunctionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Operation::Operation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.eager.Operation)
}
Operation::Operation(const Operation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      control_op_ids_(from.control_op_ids_),
      op_inputs_(from.op_inputs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attrs_.MergeFrom(from.attrs_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.device().size() > 0) {
    device_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_function_) -
    reinterpret_cast<char*>(&id_)) + sizeof(is_function_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.Operation)
}

void Operation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Operation_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_function_) -
      reinterpret_cast<char*>(&id_)) + sizeof(is_function_));
}

Operation::~Operation() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.Operation)
  SharedDtor();
}

void Operation::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Operation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Operation& Operation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Operation_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base);
  return *internal_default_instance();
}


void Operation::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.Operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  control_op_ids_.Clear();
  attrs_.Clear();
  op_inputs_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_function_) -
      reinterpret_cast<char*>(&id_)) + sizeof(is_function_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Operation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "tensorflow.eager.Operation.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 control_op_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_control_op_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          add_control_op_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .tensorflow.AttrValue> attrs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&attrs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // string device = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_device(), ptr, ctx, "tensorflow.eager.Operation.device");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_component_function = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          is_component_function_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 func_step_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          func_step_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_function = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          is_function_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.eager.Operation.Input op_inputs = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_op_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 82);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Operation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.eager.Operation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.eager.Operation.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 control_op_ids = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_control_op_ids())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 34u, input, this->mutable_control_op_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .tensorflow.AttrValue> attrs = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          Operation_AttrsEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              Operation_AttrsEntry_DoNotUse,
              std::string, ::tensorflow::AttrValue,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::AttrValue > > parser(&attrs_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.eager.Operation.AttrsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string device = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->device().data(), static_cast<int>(this->device().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.eager.Operation.device"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_component_function = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_component_function_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 func_step_id = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &func_step_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_function = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_function_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.eager.Operation.Input op_inputs = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_op_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.eager.Operation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.eager.Operation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Operation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.eager.Operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.eager.Operation.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated int64 control_op_ids = 4;
  if (this->control_op_ids_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_control_op_ids_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->control_op_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64NoTag(
      this->control_op_ids(i), output);
  }

  // map<string, .tensorflow.AttrValue> attrs = 5;
  if (!this->attrs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::AttrValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.eager.Operation.AttrsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->attrs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->attrs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::AttrValue >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::AttrValue >::const_iterator
          it = this->attrs().begin();
          it != this->attrs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        Operation_AttrsEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(5, entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::AttrValue >::const_iterator
          it = this->attrs().begin();
          it != this->attrs().end(); ++it) {
        Operation_AttrsEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(5, entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string device = 6;
  if (this->device().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), static_cast<int>(this->device().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.eager.Operation.device");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->device(), output);
  }

  // bool is_component_function = 7;
  if (this->is_component_function() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->is_component_function(), output);
  }

  // int64 func_step_id = 8;
  if (this->func_step_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(8, this->func_step_id(), output);
  }

  // bool is_function = 9;
  if (this->is_function() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->is_function(), output);
  }

  // repeated .tensorflow.eager.Operation.Input op_inputs = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->op_inputs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->op_inputs(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.eager.Operation)
}

::PROTOBUF_NAMESPACE_ID::uint8* Operation::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.Operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.eager.Operation.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated int64 control_op_ids = 4;
  if (this->control_op_ids_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _control_op_ids_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->control_op_ids_, target);
  }

  // map<string, .tensorflow.AttrValue> attrs = 5;
  if (!this->attrs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::AttrValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.eager.Operation.AttrsEntry.key");
      }
    };

    if (false &&
        this->attrs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->attrs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::AttrValue >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::AttrValue >::const_iterator
          it = this->attrs().begin();
          it != this->attrs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        Operation_AttrsEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(5, entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::AttrValue >::const_iterator
          it = this->attrs().begin();
          it != this->attrs().end(); ++it) {
        Operation_AttrsEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(5, entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string device = 6;
  if (this->device().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), static_cast<int>(this->device().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.eager.Operation.device");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->device(), target);
  }

  // bool is_component_function = 7;
  if (this->is_component_function() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->is_component_function(), target);
  }

  // int64 func_step_id = 8;
  if (this->func_step_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->func_step_id(), target);
  }

  // bool is_function = 9;
  if (this->is_function() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->is_function(), target);
  }

  // repeated .tensorflow.eager.Operation.Input op_inputs = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->op_inputs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->op_inputs(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.Operation)
  return target;
}

size_t Operation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.Operation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 control_op_ids = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->control_op_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _control_op_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<string, .tensorflow.AttrValue> attrs = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->attrs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::AttrValue >::const_iterator
      it = this->attrs().begin();
      it != this->attrs().end(); ++it) {
    Operation_AttrsEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        MessageSizeNoVirtual(entry);
  }

  // repeated .tensorflow.eager.Operation.Input op_inputs = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->op_inputs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->op_inputs(static_cast<int>(i)));
    }
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string device = 6;
  if (this->device().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->device());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // int64 func_step_id = 8;
  if (this->func_step_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->func_step_id());
  }

  // bool is_component_function = 7;
  if (this->is_component_function() != 0) {
    total_size += 1 + 1;
  }

  // bool is_function = 9;
  if (this->is_function() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Operation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.eager.Operation)
  GOOGLE_DCHECK_NE(&from, this);
  const Operation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Operation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.eager.Operation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.eager.Operation)
    MergeFrom(*source);
  }
}

void Operation::MergeFrom(const Operation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.Operation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  control_op_ids_.MergeFrom(from.control_op_ids_);
  attrs_.MergeFrom(from.attrs_);
  op_inputs_.MergeFrom(from.op_inputs_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.device().size() > 0) {

    device_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.func_step_id() != 0) {
    set_func_step_id(from.func_step_id());
  }
  if (from.is_component_function() != 0) {
    set_is_component_function(from.is_component_function());
  }
  if (from.is_function() != 0) {
    set_is_function(from.is_function());
  }
}

void Operation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.eager.Operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Operation::CopyFrom(const Operation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.Operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operation::IsInitialized() const {
  return true;
}

void Operation::Swap(Operation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Operation::InternalSwap(Operation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  control_op_ids_.InternalSwap(&other->control_op_ids_);
  attrs_.Swap(&other->attrs_);
  CastToBase(&op_inputs_)->InternalSwap(CastToBase(&other->op_inputs_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  device_.Swap(&other->device_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(func_step_id_, other->func_step_id_);
  swap(is_component_function_, other->is_component_function_);
  swap(is_function_, other->is_function_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Operation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueueItem::InitAsDefaultInstance() {
  ::tensorflow::eager::_QueueItem_default_instance_.handle_to_decref_ = const_cast< ::tensorflow::eager::RemoteTensorHandle*>(
      ::tensorflow::eager::RemoteTensorHandle::internal_default_instance());
  ::tensorflow::eager::_QueueItem_default_instance_.operation_ = const_cast< ::tensorflow::eager::Operation*>(
      ::tensorflow::eager::Operation::internal_default_instance());
  ::tensorflow::eager::_QueueItem_default_instance_.send_tensor_ = const_cast< ::tensorflow::eager::SendTensorOp*>(
      ::tensorflow::eager::SendTensorOp::internal_default_instance());
  ::tensorflow::eager::_QueueItem_default_instance_.register_function_ = const_cast< ::tensorflow::eager::RegisterFunctionOp*>(
      ::tensorflow::eager::RegisterFunctionOp::internal_default_instance());
  ::tensorflow::eager::_QueueItem_default_instance_.cleanup_function_ = const_cast< ::tensorflow::eager::CleanupFunctionOp*>(
      ::tensorflow::eager::CleanupFunctionOp::internal_default_instance());
  ::tensorflow::eager::_QueueItem_default_instance_.sync_remote_executor_for_stream_ = const_cast< ::tensorflow::eager::SyncRemoteExecutorForStream*>(
      ::tensorflow::eager::SyncRemoteExecutorForStream::internal_default_instance());
  ::tensorflow::eager::_QueueItem_default_instance_.send_packed_handle_ = const_cast< ::tensorflow::eager::SendPackedHandleOp*>(
      ::tensorflow::eager::SendPackedHandleOp::internal_default_instance());
}
class QueueItem::HasBitSetters {
 public:
  static const ::tensorflow::eager::RemoteTensorHandle& handle_to_decref(const QueueItem* msg);
  static const ::tensorflow::eager::Operation& operation(const QueueItem* msg);
  static const ::tensorflow::eager::SendTensorOp& send_tensor(const QueueItem* msg);
  static const ::tensorflow::eager::RegisterFunctionOp& register_function(const QueueItem* msg);
  static const ::tensorflow::eager::CleanupFunctionOp& cleanup_function(const QueueItem* msg);
  static const ::tensorflow::eager::SyncRemoteExecutorForStream& sync_remote_executor_for_stream(const QueueItem* msg);
  static const ::tensorflow::eager::SendPackedHandleOp& send_packed_handle(const QueueItem* msg);
};

const ::tensorflow::eager::RemoteTensorHandle&
QueueItem::HasBitSetters::handle_to_decref(const QueueItem* msg) {
  return *msg->item_.handle_to_decref_;
}
const ::tensorflow::eager::Operation&
QueueItem::HasBitSetters::operation(const QueueItem* msg) {
  return *msg->item_.operation_;
}
const ::tensorflow::eager::SendTensorOp&
QueueItem::HasBitSetters::send_tensor(const QueueItem* msg) {
  return *msg->item_.send_tensor_;
}
const ::tensorflow::eager::RegisterFunctionOp&
QueueItem::HasBitSetters::register_function(const QueueItem* msg) {
  return *msg->item_.register_function_;
}
const ::tensorflow::eager::CleanupFunctionOp&
QueueItem::HasBitSetters::cleanup_function(const QueueItem* msg) {
  return *msg->item_.cleanup_function_;
}
const ::tensorflow::eager::SyncRemoteExecutorForStream&
QueueItem::HasBitSetters::sync_remote_executor_for_stream(const QueueItem* msg) {
  return *msg->item_.sync_remote_executor_for_stream_;
}
const ::tensorflow::eager::SendPackedHandleOp&
QueueItem::HasBitSetters::send_packed_handle(const QueueItem* msg) {
  return *msg->item_.send_packed_handle_;
}
void QueueItem::set_allocated_handle_to_decref(::tensorflow::eager::RemoteTensorHandle* handle_to_decref) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_item();
  if (handle_to_decref) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle_to_decref)->GetArena();
    if (message_arena != submessage_arena) {
      handle_to_decref = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handle_to_decref, submessage_arena);
    }
    set_has_handle_to_decref();
    item_.handle_to_decref_ = handle_to_decref;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.QueueItem.handle_to_decref)
}
void QueueItem::clear_handle_to_decref() {
  if (has_handle_to_decref()) {
    delete item_.handle_to_decref_;
    clear_has_item();
  }
}
void QueueItem::set_allocated_operation(::tensorflow::eager::Operation* operation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_item();
  if (operation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      operation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, operation, submessage_arena);
    }
    set_has_operation();
    item_.operation_ = operation;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.QueueItem.operation)
}
void QueueItem::set_allocated_send_tensor(::tensorflow::eager::SendTensorOp* send_tensor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_item();
  if (send_tensor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      send_tensor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_tensor, submessage_arena);
    }
    set_has_send_tensor();
    item_.send_tensor_ = send_tensor;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.QueueItem.send_tensor)
}
void QueueItem::set_allocated_register_function(::tensorflow::eager::RegisterFunctionOp* register_function) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_item();
  if (register_function) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      register_function = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, register_function, submessage_arena);
    }
    set_has_register_function();
    item_.register_function_ = register_function;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.QueueItem.register_function)
}
void QueueItem::set_allocated_cleanup_function(::tensorflow::eager::CleanupFunctionOp* cleanup_function) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_item();
  if (cleanup_function) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cleanup_function = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cleanup_function, submessage_arena);
    }
    set_has_cleanup_function();
    item_.cleanup_function_ = cleanup_function;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.QueueItem.cleanup_function)
}
void QueueItem::set_allocated_sync_remote_executor_for_stream(::tensorflow::eager::SyncRemoteExecutorForStream* sync_remote_executor_for_stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_item();
  if (sync_remote_executor_for_stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sync_remote_executor_for_stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sync_remote_executor_for_stream, submessage_arena);
    }
    set_has_sync_remote_executor_for_stream();
    item_.sync_remote_executor_for_stream_ = sync_remote_executor_for_stream;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.QueueItem.sync_remote_executor_for_stream)
}
void QueueItem::set_allocated_send_packed_handle(::tensorflow::eager::SendPackedHandleOp* send_packed_handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_item();
  if (send_packed_handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      send_packed_handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_packed_handle, submessage_arena);
    }
    set_has_send_packed_handle();
    item_.send_packed_handle_ = send_packed_handle;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.QueueItem.send_packed_handle)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueueItem::kHandleToDecrefFieldNumber;
const int QueueItem::kOperationFieldNumber;
const int QueueItem::kSendTensorFieldNumber;
const int QueueItem::kRegisterFunctionFieldNumber;
const int QueueItem::kCleanupFunctionFieldNumber;
const int QueueItem::kSyncRemoteExecutorForStreamFieldNumber;
const int QueueItem::kSendPackedHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueueItem::QueueItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.eager.QueueItem)
}
QueueItem::QueueItem(const QueueItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_item();
  switch (from.item_case()) {
    case kHandleToDecref: {
      mutable_handle_to_decref()->::tensorflow::eager::RemoteTensorHandle::MergeFrom(from.handle_to_decref());
      break;
    }
    case kOperation: {
      mutable_operation()->::tensorflow::eager::Operation::MergeFrom(from.operation());
      break;
    }
    case kSendTensor: {
      mutable_send_tensor()->::tensorflow::eager::SendTensorOp::MergeFrom(from.send_tensor());
      break;
    }
    case kRegisterFunction: {
      mutable_register_function()->::tensorflow::eager::RegisterFunctionOp::MergeFrom(from.register_function());
      break;
    }
    case kCleanupFunction: {
      mutable_cleanup_function()->::tensorflow::eager::CleanupFunctionOp::MergeFrom(from.cleanup_function());
      break;
    }
    case kSyncRemoteExecutorForStream: {
      mutable_sync_remote_executor_for_stream()->::tensorflow::eager::SyncRemoteExecutorForStream::MergeFrom(from.sync_remote_executor_for_stream());
      break;
    }
    case kSendPackedHandle: {
      mutable_send_packed_handle()->::tensorflow::eager::SendPackedHandleOp::MergeFrom(from.send_packed_handle());
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.QueueItem)
}

void QueueItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueueItem_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base);
  clear_has_item();
}

QueueItem::~QueueItem() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.QueueItem)
  SharedDtor();
}

void QueueItem::SharedDtor() {
  if (has_item()) {
    clear_item();
  }
}

void QueueItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueueItem& QueueItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueueItem_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base);
  return *internal_default_instance();
}


void QueueItem::clear_item() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.eager.QueueItem)
  switch (item_case()) {
    case kHandleToDecref: {
      delete item_.handle_to_decref_;
      break;
    }
    case kOperation: {
      delete item_.operation_;
      break;
    }
    case kSendTensor: {
      delete item_.send_tensor_;
      break;
    }
    case kRegisterFunction: {
      delete item_.register_function_;
      break;
    }
    case kCleanupFunction: {
      delete item_.cleanup_function_;
      break;
    }
    case kSyncRemoteExecutorForStream: {
      delete item_.sync_remote_executor_for_stream_;
      break;
    }
    case kSendPackedHandle: {
      delete item_.send_packed_handle_;
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ITEM_NOT_SET;
}


void QueueItem::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.QueueItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_item();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QueueItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.eager.RemoteTensorHandle handle_to_decref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_handle_to_decref(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.eager.Operation operation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_operation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.eager.SendTensorOp send_tensor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_send_tensor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.eager.RegisterFunctionOp register_function = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_register_function(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.eager.CleanupFunctionOp cleanup_function = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_cleanup_function(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.eager.SyncRemoteExecutorForStream sync_remote_executor_for_stream = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_sync_remote_executor_for_stream(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.eager.SendPackedHandleOp send_packed_handle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_send_packed_handle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QueueItem::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.eager.QueueItem)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.eager.RemoteTensorHandle handle_to_decref = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_handle_to_decref()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.eager.Operation operation = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_operation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.eager.SendTensorOp send_tensor = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_send_tensor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.eager.RegisterFunctionOp register_function = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_register_function()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.eager.CleanupFunctionOp cleanup_function = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cleanup_function()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.eager.SyncRemoteExecutorForStream sync_remote_executor_for_stream = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sync_remote_executor_for_stream()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.eager.SendPackedHandleOp send_packed_handle = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_send_packed_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.eager.QueueItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.eager.QueueItem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QueueItem::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.eager.QueueItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.eager.RemoteTensorHandle handle_to_decref = 1;
  if (has_handle_to_decref()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::handle_to_decref(this), output);
  }

  // .tensorflow.eager.Operation operation = 2;
  if (has_operation()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::operation(this), output);
  }

  // .tensorflow.eager.SendTensorOp send_tensor = 3;
  if (has_send_tensor()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::send_tensor(this), output);
  }

  // .tensorflow.eager.RegisterFunctionOp register_function = 4;
  if (has_register_function()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::register_function(this), output);
  }

  // .tensorflow.eager.CleanupFunctionOp cleanup_function = 5;
  if (has_cleanup_function()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::cleanup_function(this), output);
  }

  // .tensorflow.eager.SyncRemoteExecutorForStream sync_remote_executor_for_stream = 6;
  if (has_sync_remote_executor_for_stream()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::sync_remote_executor_for_stream(this), output);
  }

  // .tensorflow.eager.SendPackedHandleOp send_packed_handle = 7;
  if (has_send_packed_handle()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::send_packed_handle(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.eager.QueueItem)
}

::PROTOBUF_NAMESPACE_ID::uint8* QueueItem::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.QueueItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.eager.RemoteTensorHandle handle_to_decref = 1;
  if (has_handle_to_decref()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::handle_to_decref(this), target);
  }

  // .tensorflow.eager.Operation operation = 2;
  if (has_operation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::operation(this), target);
  }

  // .tensorflow.eager.SendTensorOp send_tensor = 3;
  if (has_send_tensor()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::send_tensor(this), target);
  }

  // .tensorflow.eager.RegisterFunctionOp register_function = 4;
  if (has_register_function()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::register_function(this), target);
  }

  // .tensorflow.eager.CleanupFunctionOp cleanup_function = 5;
  if (has_cleanup_function()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::cleanup_function(this), target);
  }

  // .tensorflow.eager.SyncRemoteExecutorForStream sync_remote_executor_for_stream = 6;
  if (has_sync_remote_executor_for_stream()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::sync_remote_executor_for_stream(this), target);
  }

  // .tensorflow.eager.SendPackedHandleOp send_packed_handle = 7;
  if (has_send_packed_handle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::send_packed_handle(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.QueueItem)
  return target;
}

size_t QueueItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.QueueItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (item_case()) {
    // .tensorflow.eager.RemoteTensorHandle handle_to_decref = 1;
    case kHandleToDecref: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *item_.handle_to_decref_);
      break;
    }
    // .tensorflow.eager.Operation operation = 2;
    case kOperation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *item_.operation_);
      break;
    }
    // .tensorflow.eager.SendTensorOp send_tensor = 3;
    case kSendTensor: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *item_.send_tensor_);
      break;
    }
    // .tensorflow.eager.RegisterFunctionOp register_function = 4;
    case kRegisterFunction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *item_.register_function_);
      break;
    }
    // .tensorflow.eager.CleanupFunctionOp cleanup_function = 5;
    case kCleanupFunction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *item_.cleanup_function_);
      break;
    }
    // .tensorflow.eager.SyncRemoteExecutorForStream sync_remote_executor_for_stream = 6;
    case kSyncRemoteExecutorForStream: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *item_.sync_remote_executor_for_stream_);
      break;
    }
    // .tensorflow.eager.SendPackedHandleOp send_packed_handle = 7;
    case kSendPackedHandle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *item_.send_packed_handle_);
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueueItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.eager.QueueItem)
  GOOGLE_DCHECK_NE(&from, this);
  const QueueItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueueItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.eager.QueueItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.eager.QueueItem)
    MergeFrom(*source);
  }
}

void QueueItem::MergeFrom(const QueueItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.QueueItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.item_case()) {
    case kHandleToDecref: {
      mutable_handle_to_decref()->::tensorflow::eager::RemoteTensorHandle::MergeFrom(from.handle_to_decref());
      break;
    }
    case kOperation: {
      mutable_operation()->::tensorflow::eager::Operation::MergeFrom(from.operation());
      break;
    }
    case kSendTensor: {
      mutable_send_tensor()->::tensorflow::eager::SendTensorOp::MergeFrom(from.send_tensor());
      break;
    }
    case kRegisterFunction: {
      mutable_register_function()->::tensorflow::eager::RegisterFunctionOp::MergeFrom(from.register_function());
      break;
    }
    case kCleanupFunction: {
      mutable_cleanup_function()->::tensorflow::eager::CleanupFunctionOp::MergeFrom(from.cleanup_function());
      break;
    }
    case kSyncRemoteExecutorForStream: {
      mutable_sync_remote_executor_for_stream()->::tensorflow::eager::SyncRemoteExecutorForStream::MergeFrom(from.sync_remote_executor_for_stream());
      break;
    }
    case kSendPackedHandle: {
      mutable_send_packed_handle()->::tensorflow::eager::SendPackedHandleOp::MergeFrom(from.send_packed_handle());
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
}

void QueueItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.eager.QueueItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueueItem::CopyFrom(const QueueItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.QueueItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueueItem::IsInitialized() const {
  return true;
}

void QueueItem::Swap(QueueItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueueItem::InternalSwap(QueueItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(item_, other->item_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueueItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueueResponse::InitAsDefaultInstance() {
}
class QueueResponse::HasBitSetters {
 public:
};

void QueueResponse::clear_shape() {
  shape_.Clear();
}
void QueueResponse::clear_tensor() {
  tensor_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueueResponse::kShapeFieldNumber;
const int QueueResponse::kTensorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueueResponse::QueueResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.eager.QueueResponse)
}
QueueResponse::QueueResponse(const QueueResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      shape_(from.shape_),
      tensor_(from.tensor_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.QueueResponse)
}

void QueueResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueueResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base);
}

QueueResponse::~QueueResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.QueueResponse)
  SharedDtor();
}

void QueueResponse::SharedDtor() {
}

void QueueResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueueResponse& QueueResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueueResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base);
  return *internal_default_instance();
}


void QueueResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.QueueResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shape_.Clear();
  tensor_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QueueResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tensorflow.TensorShapeProto shape = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_shape(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.TensorProto tensor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_tensor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QueueResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.eager.QueueResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.TensorShapeProto shape = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.TensorProto tensor = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_tensor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.eager.QueueResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.eager.QueueResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QueueResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.eager.QueueResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.TensorShapeProto shape = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->shape_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->shape(static_cast<int>(i)),
      output);
  }

  // repeated .tensorflow.TensorProto tensor = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tensor_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->tensor(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.eager.QueueResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* QueueResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.QueueResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.TensorShapeProto shape = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->shape_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->shape(static_cast<int>(i)), target);
  }

  // repeated .tensorflow.TensorProto tensor = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tensor_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->tensor(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.QueueResponse)
  return target;
}

size_t QueueResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.QueueResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.TensorShapeProto shape = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->shape_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->shape(static_cast<int>(i)));
    }
  }

  // repeated .tensorflow.TensorProto tensor = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->tensor_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->tensor(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueueResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.eager.QueueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const QueueResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueueResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.eager.QueueResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.eager.QueueResponse)
    MergeFrom(*source);
  }
}

void QueueResponse::MergeFrom(const QueueResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.QueueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shape_.MergeFrom(from.shape_);
  tensor_.MergeFrom(from.tensor_);
}

void QueueResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.eager.QueueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueueResponse::CopyFrom(const QueueResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.QueueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueueResponse::IsInitialized() const {
  return true;
}

void QueueResponse::Swap(QueueResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueueResponse::InternalSwap(QueueResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&shape_)->InternalSwap(CastToBase(&other->shape_));
  CastToBase(&tensor_)->InternalSwap(CastToBase(&other->tensor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueueResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateContextRequest::InitAsDefaultInstance() {
  ::tensorflow::eager::_CreateContextRequest_default_instance_._instance.get_mutable()->server_def_ = const_cast< ::tensorflow::ServerDef*>(
      ::tensorflow::ServerDef::internal_default_instance());
  ::tensorflow::eager::_CreateContextRequest_default_instance_._instance.get_mutable()->version_def_ = const_cast< ::tensorflow::VersionDef*>(
      ::tensorflow::VersionDef::internal_default_instance());
}
class CreateContextRequest::HasBitSetters {
 public:
  static const ::tensorflow::ServerDef& server_def(const CreateContextRequest* msg);
  static const ::tensorflow::VersionDef& version_def(const CreateContextRequest* msg);
};

const ::tensorflow::ServerDef&
CreateContextRequest::HasBitSetters::server_def(const CreateContextRequest* msg) {
  return *msg->server_def_;
}
const ::tensorflow::VersionDef&
CreateContextRequest::HasBitSetters::version_def(const CreateContextRequest* msg) {
  return *msg->version_def_;
}
void CreateContextRequest::clear_server_def() {
  if (GetArenaNoVirtual() == nullptr && server_def_ != nullptr) {
    delete server_def_;
  }
  server_def_ = nullptr;
}
void CreateContextRequest::clear_version_def() {
  if (GetArenaNoVirtual() == nullptr && version_def_ != nullptr) {
    delete version_def_;
  }
  version_def_ = nullptr;
}
void CreateContextRequest::clear_cluster_device_attributes() {
  cluster_device_attributes_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateContextRequest::kServerDefFieldNumber;
const int CreateContextRequest::kAsyncFieldNumber;
const int CreateContextRequest::kKeepAliveSecsFieldNumber;
const int CreateContextRequest::kVersionDefFieldNumber;
const int CreateContextRequest::kClusterDeviceAttributesFieldNumber;
const int CreateContextRequest::kContextIdFieldNumber;
const int CreateContextRequest::kContextViewIdFieldNumber;
const int CreateContextRequest::kLazyCopyRemoteFunctionInputsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateContextRequest::CreateContextRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.eager.CreateContextRequest)
}
CreateContextRequest::CreateContextRequest(const CreateContextRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      cluster_device_attributes_(from.cluster_device_attributes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_server_def()) {
    server_def_ = new ::tensorflow::ServerDef(*from.server_def_);
  } else {
    server_def_ = nullptr;
  }
  if (from.has_version_def()) {
    version_def_ = new ::tensorflow::VersionDef(*from.version_def_);
  } else {
    version_def_ = nullptr;
  }
  ::memcpy(&keep_alive_secs_, &from.keep_alive_secs_,
    static_cast<size_t>(reinterpret_cast<char*>(&lazy_copy_remote_function_inputs_) -
    reinterpret_cast<char*>(&keep_alive_secs_)) + sizeof(lazy_copy_remote_function_inputs_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.CreateContextRequest)
}

void CreateContextRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateContextRequest_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base);
  ::memset(&server_def_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lazy_copy_remote_function_inputs_) -
      reinterpret_cast<char*>(&server_def_)) + sizeof(lazy_copy_remote_function_inputs_));
}

CreateContextRequest::~CreateContextRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.CreateContextRequest)
  SharedDtor();
}

void CreateContextRequest::SharedDtor() {
  if (this != internal_default_instance()) delete server_def_;
  if (this != internal_default_instance()) delete version_def_;
}

void CreateContextRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateContextRequest& CreateContextRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateContextRequest_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CreateContextRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.CreateContextRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cluster_device_attributes_.Clear();
  if (GetArenaNoVirtual() == nullptr && server_def_ != nullptr) {
    delete server_def_;
  }
  server_def_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && version_def_ != nullptr) {
    delete version_def_;
  }
  version_def_ = nullptr;
  ::memset(&keep_alive_secs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lazy_copy_remote_function_inputs_) -
      reinterpret_cast<char*>(&keep_alive_secs_)) + sizeof(lazy_copy_remote_function_inputs_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateContextRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.ServerDef server_def = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_server_def(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool async = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          async_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 keep_alive_secs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          keep_alive_secs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.VersionDef version_def = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_version_def(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.DeviceAttributes cluster_device_attributes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_cluster_device_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // fixed64 context_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          context_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // fixed64 context_view_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          context_view_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // bool lazy_copy_remote_function_inputs = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          lazy_copy_remote_function_inputs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateContextRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.eager.CreateContextRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.ServerDef server_def = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_server_def()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool async = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &async_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 keep_alive_secs = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &keep_alive_secs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.VersionDef version_def = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_version_def()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.DeviceAttributes cluster_device_attributes = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_cluster_device_attributes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed64 context_id = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &context_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed64 context_view_id = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (65 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &context_view_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool lazy_copy_remote_function_inputs = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lazy_copy_remote_function_inputs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.eager.CreateContextRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.eager.CreateContextRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateContextRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.eager.CreateContextRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.ServerDef server_def = 1;
  if (this->has_server_def()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::server_def(this), output);
  }

  // bool async = 2;
  if (this->async() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->async(), output);
  }

  // int64 keep_alive_secs = 3;
  if (this->keep_alive_secs() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->keep_alive_secs(), output);
  }

  // .tensorflow.VersionDef version_def = 4;
  if (this->has_version_def()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::version_def(this), output);
  }

  // repeated .tensorflow.DeviceAttributes cluster_device_attributes = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cluster_device_attributes_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->cluster_device_attributes(static_cast<int>(i)),
      output);
  }

  // fixed64 context_id = 7;
  if (this->context_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(7, this->context_id(), output);
  }

  // fixed64 context_view_id = 8;
  if (this->context_view_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(8, this->context_view_id(), output);
  }

  // bool lazy_copy_remote_function_inputs = 9;
  if (this->lazy_copy_remote_function_inputs() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->lazy_copy_remote_function_inputs(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.eager.CreateContextRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateContextRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.CreateContextRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.ServerDef server_def = 1;
  if (this->has_server_def()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::server_def(this), target);
  }

  // bool async = 2;
  if (this->async() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->async(), target);
  }

  // int64 keep_alive_secs = 3;
  if (this->keep_alive_secs() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->keep_alive_secs(), target);
  }

  // .tensorflow.VersionDef version_def = 4;
  if (this->has_version_def()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::version_def(this), target);
  }

  // repeated .tensorflow.DeviceAttributes cluster_device_attributes = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cluster_device_attributes_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->cluster_device_attributes(static_cast<int>(i)), target);
  }

  // fixed64 context_id = 7;
  if (this->context_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(7, this->context_id(), target);
  }

  // fixed64 context_view_id = 8;
  if (this->context_view_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(8, this->context_view_id(), target);
  }

  // bool lazy_copy_remote_function_inputs = 9;
  if (this->lazy_copy_remote_function_inputs() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->lazy_copy_remote_function_inputs(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.CreateContextRequest)
  return target;
}

size_t CreateContextRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.CreateContextRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.DeviceAttributes cluster_device_attributes = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->cluster_device_attributes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->cluster_device_attributes(static_cast<int>(i)));
    }
  }

  // .tensorflow.ServerDef server_def = 1;
  if (this->has_server_def()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_def_);
  }

  // .tensorflow.VersionDef version_def = 4;
  if (this->has_version_def()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *version_def_);
  }

  // int64 keep_alive_secs = 3;
  if (this->keep_alive_secs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->keep_alive_secs());
  }

  // fixed64 context_id = 7;
  if (this->context_id() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 context_view_id = 8;
  if (this->context_view_id() != 0) {
    total_size += 1 + 8;
  }

  // bool async = 2;
  if (this->async() != 0) {
    total_size += 1 + 1;
  }

  // bool lazy_copy_remote_function_inputs = 9;
  if (this->lazy_copy_remote_function_inputs() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateContextRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.eager.CreateContextRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateContextRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateContextRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.eager.CreateContextRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.eager.CreateContextRequest)
    MergeFrom(*source);
  }
}

void CreateContextRequest::MergeFrom(const CreateContextRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.CreateContextRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cluster_device_attributes_.MergeFrom(from.cluster_device_attributes_);
  if (from.has_server_def()) {
    mutable_server_def()->::tensorflow::ServerDef::MergeFrom(from.server_def());
  }
  if (from.has_version_def()) {
    mutable_version_def()->::tensorflow::VersionDef::MergeFrom(from.version_def());
  }
  if (from.keep_alive_secs() != 0) {
    set_keep_alive_secs(from.keep_alive_secs());
  }
  if (from.context_id() != 0) {
    set_context_id(from.context_id());
  }
  if (from.context_view_id() != 0) {
    set_context_view_id(from.context_view_id());
  }
  if (from.async() != 0) {
    set_async(from.async());
  }
  if (from.lazy_copy_remote_function_inputs() != 0) {
    set_lazy_copy_remote_function_inputs(from.lazy_copy_remote_function_inputs());
  }
}

void CreateContextRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.eager.CreateContextRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateContextRequest::CopyFrom(const CreateContextRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.CreateContextRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateContextRequest::IsInitialized() const {
  return true;
}

void CreateContextRequest::Swap(CreateContextRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateContextRequest::InternalSwap(CreateContextRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&cluster_device_attributes_)->InternalSwap(CastToBase(&other->cluster_device_attributes_));
  swap(server_def_, other->server_def_);
  swap(version_def_, other->version_def_);
  swap(keep_alive_secs_, other->keep_alive_secs_);
  swap(context_id_, other->context_id_);
  swap(context_view_id_, other->context_view_id_);
  swap(async_, other->async_);
  swap(lazy_copy_remote_function_inputs_, other->lazy_copy_remote_function_inputs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateContextRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateContextResponse::InitAsDefaultInstance() {
}
class CreateContextResponse::HasBitSetters {
 public:
};

void CreateContextResponse::clear_device_attributes() {
  device_attributes_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateContextResponse::kDeviceAttributesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateContextResponse::CreateContextResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.eager.CreateContextResponse)
}
CreateContextResponse::CreateContextResponse(const CreateContextResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      device_attributes_(from.device_attributes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.CreateContextResponse)
}

void CreateContextResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateContextResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base);
}

CreateContextResponse::~CreateContextResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.CreateContextResponse)
  SharedDtor();
}

void CreateContextResponse::SharedDtor() {
}

void CreateContextResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateContextResponse& CreateContextResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateContextResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CreateContextResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.CreateContextResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_attributes_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateContextResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tensorflow.DeviceAttributes device_attributes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_device_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateContextResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.eager.CreateContextResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.DeviceAttributes device_attributes = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_device_attributes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.eager.CreateContextResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.eager.CreateContextResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateContextResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.eager.CreateContextResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.DeviceAttributes device_attributes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->device_attributes_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->device_attributes(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.eager.CreateContextResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateContextResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.CreateContextResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.DeviceAttributes device_attributes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->device_attributes_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->device_attributes(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.CreateContextResponse)
  return target;
}

size_t CreateContextResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.CreateContextResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.DeviceAttributes device_attributes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->device_attributes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->device_attributes(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateContextResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.eager.CreateContextResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateContextResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateContextResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.eager.CreateContextResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.eager.CreateContextResponse)
    MergeFrom(*source);
  }
}

void CreateContextResponse::MergeFrom(const CreateContextResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.CreateContextResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  device_attributes_.MergeFrom(from.device_attributes_);
}

void CreateContextResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.eager.CreateContextResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateContextResponse::CopyFrom(const CreateContextResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.CreateContextResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateContextResponse::IsInitialized() const {
  return true;
}

void CreateContextResponse::Swap(CreateContextResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateContextResponse::InternalSwap(CreateContextResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&device_attributes_)->InternalSwap(CastToBase(&other->device_attributes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateContextResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateContextRequest::InitAsDefaultInstance() {
  ::tensorflow::eager::_UpdateContextRequest_default_instance_._instance.get_mutable()->server_def_ = const_cast< ::tensorflow::ServerDef*>(
      ::tensorflow::ServerDef::internal_default_instance());
}
class UpdateContextRequest::HasBitSetters {
 public:
  static const ::tensorflow::ServerDef& server_def(const UpdateContextRequest* msg);
};

const ::tensorflow::ServerDef&
UpdateContextRequest::HasBitSetters::server_def(const UpdateContextRequest* msg) {
  return *msg->server_def_;
}
void UpdateContextRequest::clear_server_def() {
  if (GetArenaNoVirtual() == nullptr && server_def_ != nullptr) {
    delete server_def_;
  }
  server_def_ = nullptr;
}
void UpdateContextRequest::clear_cluster_device_attributes() {
  cluster_device_attributes_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateContextRequest::kServerDefFieldNumber;
const int UpdateContextRequest::kClusterDeviceAttributesFieldNumber;
const int UpdateContextRequest::kContextIdFieldNumber;
const int UpdateContextRequest::kContextViewIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateContextRequest::UpdateContextRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.eager.UpdateContextRequest)
}
UpdateContextRequest::UpdateContextRequest(const UpdateContextRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      cluster_device_attributes_(from.cluster_device_attributes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_server_def()) {
    server_def_ = new ::tensorflow::ServerDef(*from.server_def_);
  } else {
    server_def_ = nullptr;
  }
  ::memcpy(&context_id_, &from.context_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&context_view_id_) -
    reinterpret_cast<char*>(&context_id_)) + sizeof(context_view_id_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.UpdateContextRequest)
}

void UpdateContextRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateContextRequest_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base);
  ::memset(&server_def_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&context_view_id_) -
      reinterpret_cast<char*>(&server_def_)) + sizeof(context_view_id_));
}

UpdateContextRequest::~UpdateContextRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.UpdateContextRequest)
  SharedDtor();
}

void UpdateContextRequest::SharedDtor() {
  if (this != internal_default_instance()) delete server_def_;
}

void UpdateContextRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateContextRequest& UpdateContextRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateContextRequest_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base);
  return *internal_default_instance();
}


void UpdateContextRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.UpdateContextRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cluster_device_attributes_.Clear();
  if (GetArenaNoVirtual() == nullptr && server_def_ != nullptr) {
    delete server_def_;
  }
  server_def_ = nullptr;
  ::memset(&context_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&context_view_id_) -
      reinterpret_cast<char*>(&context_id_)) + sizeof(context_view_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateContextRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.ServerDef server_def = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_server_def(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.DeviceAttributes cluster_device_attributes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_cluster_device_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // fixed64 context_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          context_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // fixed64 context_view_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          context_view_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateContextRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.eager.UpdateContextRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.ServerDef server_def = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_server_def()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.DeviceAttributes cluster_device_attributes = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_cluster_device_attributes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed64 context_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &context_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed64 context_view_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &context_view_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.eager.UpdateContextRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.eager.UpdateContextRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateContextRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.eager.UpdateContextRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.ServerDef server_def = 1;
  if (this->has_server_def()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::server_def(this), output);
  }

  // repeated .tensorflow.DeviceAttributes cluster_device_attributes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cluster_device_attributes_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->cluster_device_attributes(static_cast<int>(i)),
      output);
  }

  // fixed64 context_id = 3;
  if (this->context_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(3, this->context_id(), output);
  }

  // fixed64 context_view_id = 4;
  if (this->context_view_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(4, this->context_view_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.eager.UpdateContextRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateContextRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.UpdateContextRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.ServerDef server_def = 1;
  if (this->has_server_def()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::server_def(this), target);
  }

  // repeated .tensorflow.DeviceAttributes cluster_device_attributes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cluster_device_attributes_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->cluster_device_attributes(static_cast<int>(i)), target);
  }

  // fixed64 context_id = 3;
  if (this->context_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->context_id(), target);
  }

  // fixed64 context_view_id = 4;
  if (this->context_view_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->context_view_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.UpdateContextRequest)
  return target;
}

size_t UpdateContextRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.UpdateContextRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.DeviceAttributes cluster_device_attributes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->cluster_device_attributes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->cluster_device_attributes(static_cast<int>(i)));
    }
  }

  // .tensorflow.ServerDef server_def = 1;
  if (this->has_server_def()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_def_);
  }

  // fixed64 context_id = 3;
  if (this->context_id() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 context_view_id = 4;
  if (this->context_view_id() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateContextRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.eager.UpdateContextRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateContextRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateContextRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.eager.UpdateContextRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.eager.UpdateContextRequest)
    MergeFrom(*source);
  }
}

void UpdateContextRequest::MergeFrom(const UpdateContextRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.UpdateContextRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cluster_device_attributes_.MergeFrom(from.cluster_device_attributes_);
  if (from.has_server_def()) {
    mutable_server_def()->::tensorflow::ServerDef::MergeFrom(from.server_def());
  }
  if (from.context_id() != 0) {
    set_context_id(from.context_id());
  }
  if (from.context_view_id() != 0) {
    set_context_view_id(from.context_view_id());
  }
}

void UpdateContextRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.eager.UpdateContextRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateContextRequest::CopyFrom(const UpdateContextRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.UpdateContextRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateContextRequest::IsInitialized() const {
  return true;
}

void UpdateContextRequest::Swap(UpdateContextRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateContextRequest::InternalSwap(UpdateContextRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&cluster_device_attributes_)->InternalSwap(CastToBase(&other->cluster_device_attributes_));
  swap(server_def_, other->server_def_);
  swap(context_id_, other->context_id_);
  swap(context_view_id_, other->context_view_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateContextRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateContextResponse::InitAsDefaultInstance() {
}
class UpdateContextResponse::HasBitSetters {
 public:
};

void UpdateContextResponse::clear_device_attributes() {
  device_attributes_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateContextResponse::kDeviceAttributesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateContextResponse::UpdateContextResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.eager.UpdateContextResponse)
}
UpdateContextResponse::UpdateContextResponse(const UpdateContextResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      device_attributes_(from.device_attributes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.UpdateContextResponse)
}

void UpdateContextResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateContextResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base);
}

UpdateContextResponse::~UpdateContextResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.UpdateContextResponse)
  SharedDtor();
}

void UpdateContextResponse::SharedDtor() {
}

void UpdateContextResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateContextResponse& UpdateContextResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateContextResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base);
  return *internal_default_instance();
}


void UpdateContextResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.UpdateContextResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_attributes_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateContextResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tensorflow.DeviceAttributes device_attributes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_device_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateContextResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.eager.UpdateContextResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.DeviceAttributes device_attributes = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_device_attributes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.eager.UpdateContextResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.eager.UpdateContextResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateContextResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.eager.UpdateContextResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.DeviceAttributes device_attributes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->device_attributes_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->device_attributes(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.eager.UpdateContextResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateContextResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.UpdateContextResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.DeviceAttributes device_attributes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->device_attributes_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->device_attributes(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.UpdateContextResponse)
  return target;
}

size_t UpdateContextResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.UpdateContextResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.DeviceAttributes device_attributes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->device_attributes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->device_attributes(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateContextResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.eager.UpdateContextResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateContextResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateContextResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.eager.UpdateContextResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.eager.UpdateContextResponse)
    MergeFrom(*source);
  }
}

void UpdateContextResponse::MergeFrom(const UpdateContextResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.UpdateContextResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  device_attributes_.MergeFrom(from.device_attributes_);
}

void UpdateContextResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.eager.UpdateContextResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateContextResponse::CopyFrom(const UpdateContextResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.UpdateContextResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateContextResponse::IsInitialized() const {
  return true;
}

void UpdateContextResponse::Swap(UpdateContextResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateContextResponse::InternalSwap(UpdateContextResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&device_attributes_)->InternalSwap(CastToBase(&other->device_attributes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateContextResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnqueueRequest::InitAsDefaultInstance() {
}
class EnqueueRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnqueueRequest::kContextIdFieldNumber;
const int EnqueueRequest::kQueueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnqueueRequest::EnqueueRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.eager.EnqueueRequest)
}
EnqueueRequest::EnqueueRequest(const EnqueueRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      queue_(from.queue_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  context_id_ = from.context_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.EnqueueRequest)
}

void EnqueueRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnqueueRequest_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base);
  context_id_ = PROTOBUF_ULONGLONG(0);
}

EnqueueRequest::~EnqueueRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.EnqueueRequest)
  SharedDtor();
}

void EnqueueRequest::SharedDtor() {
}

void EnqueueRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnqueueRequest& EnqueueRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnqueueRequest_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base);
  return *internal_default_instance();
}


void EnqueueRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.EnqueueRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  queue_.Clear();
  context_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EnqueueRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // fixed64 context_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          context_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.eager.QueueItem queue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_queue(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EnqueueRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.eager.EnqueueRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed64 context_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &context_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.eager.QueueItem queue = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_queue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.eager.EnqueueRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.eager.EnqueueRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EnqueueRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.eager.EnqueueRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 context_id = 1;
  if (this->context_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(1, this->context_id(), output);
  }

  // repeated .tensorflow.eager.QueueItem queue = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->queue_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->queue(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.eager.EnqueueRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* EnqueueRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.EnqueueRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 context_id = 1;
  if (this->context_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->context_id(), target);
  }

  // repeated .tensorflow.eager.QueueItem queue = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->queue_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->queue(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.EnqueueRequest)
  return target;
}

size_t EnqueueRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.EnqueueRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.eager.QueueItem queue = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->queue_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->queue(static_cast<int>(i)));
    }
  }

  // fixed64 context_id = 1;
  if (this->context_id() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnqueueRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.eager.EnqueueRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EnqueueRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnqueueRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.eager.EnqueueRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.eager.EnqueueRequest)
    MergeFrom(*source);
  }
}

void EnqueueRequest::MergeFrom(const EnqueueRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.EnqueueRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  queue_.MergeFrom(from.queue_);
  if (from.context_id() != 0) {
    set_context_id(from.context_id());
  }
}

void EnqueueRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.eager.EnqueueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnqueueRequest::CopyFrom(const EnqueueRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.EnqueueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnqueueRequest::IsInitialized() const {
  return true;
}

void EnqueueRequest::Swap(EnqueueRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnqueueRequest::InternalSwap(EnqueueRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&queue_)->InternalSwap(CastToBase(&other->queue_));
  swap(context_id_, other->context_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnqueueRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnqueueResponse::InitAsDefaultInstance() {
}
class EnqueueResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnqueueResponse::kQueueResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnqueueResponse::EnqueueResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.eager.EnqueueResponse)
}
EnqueueResponse::EnqueueResponse(const EnqueueResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      queue_response_(from.queue_response_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.EnqueueResponse)
}

void EnqueueResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnqueueResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base);
}

EnqueueResponse::~EnqueueResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.EnqueueResponse)
  SharedDtor();
}

void EnqueueResponse::SharedDtor() {
}

void EnqueueResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnqueueResponse& EnqueueResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnqueueResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base);
  return *internal_default_instance();
}


void EnqueueResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.EnqueueResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  queue_response_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EnqueueResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tensorflow.eager.QueueResponse queue_response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_queue_response(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EnqueueResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.eager.EnqueueResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.eager.QueueResponse queue_response = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_queue_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.eager.EnqueueResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.eager.EnqueueResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EnqueueResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.eager.EnqueueResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.eager.QueueResponse queue_response = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->queue_response_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->queue_response(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.eager.EnqueueResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* EnqueueResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.EnqueueResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.eager.QueueResponse queue_response = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->queue_response_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->queue_response(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.EnqueueResponse)
  return target;
}

size_t EnqueueResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.EnqueueResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.eager.QueueResponse queue_response = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->queue_response_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->queue_response(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnqueueResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.eager.EnqueueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EnqueueResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnqueueResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.eager.EnqueueResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.eager.EnqueueResponse)
    MergeFrom(*source);
  }
}

void EnqueueResponse::MergeFrom(const EnqueueResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.EnqueueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  queue_response_.MergeFrom(from.queue_response_);
}

void EnqueueResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.eager.EnqueueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnqueueResponse::CopyFrom(const EnqueueResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.EnqueueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnqueueResponse::IsInitialized() const {
  return true;
}

void EnqueueResponse::Swap(EnqueueResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnqueueResponse::InternalSwap(EnqueueResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&queue_response_)->InternalSwap(CastToBase(&other->queue_response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnqueueResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WaitQueueDoneRequest::InitAsDefaultInstance() {
}
class WaitQueueDoneRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WaitQueueDoneRequest::kContextIdFieldNumber;
const int WaitQueueDoneRequest::kOpIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WaitQueueDoneRequest::WaitQueueDoneRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.eager.WaitQueueDoneRequest)
}
WaitQueueDoneRequest::WaitQueueDoneRequest(const WaitQueueDoneRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      op_id_(from.op_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  context_id_ = from.context_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.WaitQueueDoneRequest)
}

void WaitQueueDoneRequest::SharedCtor() {
  context_id_ = PROTOBUF_ULONGLONG(0);
}

WaitQueueDoneRequest::~WaitQueueDoneRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.WaitQueueDoneRequest)
  SharedDtor();
}

void WaitQueueDoneRequest::SharedDtor() {
}

void WaitQueueDoneRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WaitQueueDoneRequest& WaitQueueDoneRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WaitQueueDoneRequest_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base);
  return *internal_default_instance();
}


void WaitQueueDoneRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.WaitQueueDoneRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  op_id_.Clear();
  context_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WaitQueueDoneRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // fixed64 context_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          context_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated int64 op_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_op_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          add_op_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WaitQueueDoneRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.eager.WaitQueueDoneRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed64 context_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &context_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 op_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_op_id())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 18u, input, this->mutable_op_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.eager.WaitQueueDoneRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.eager.WaitQueueDoneRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WaitQueueDoneRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.eager.WaitQueueDoneRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 context_id = 1;
  if (this->context_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(1, this->context_id(), output);
  }

  // repeated int64 op_id = 2;
  if (this->op_id_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_op_id_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->op_id_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64NoTag(
      this->op_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.eager.WaitQueueDoneRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* WaitQueueDoneRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.WaitQueueDoneRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 context_id = 1;
  if (this->context_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->context_id(), target);
  }

  // repeated int64 op_id = 2;
  if (this->op_id_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _op_id_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->op_id_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.WaitQueueDoneRequest)
  return target;
}

size_t WaitQueueDoneRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.WaitQueueDoneRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 op_id = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->op_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _op_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // fixed64 context_id = 1;
  if (this->context_id() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WaitQueueDoneRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.eager.WaitQueueDoneRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WaitQueueDoneRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WaitQueueDoneRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.eager.WaitQueueDoneRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.eager.WaitQueueDoneRequest)
    MergeFrom(*source);
  }
}

void WaitQueueDoneRequest::MergeFrom(const WaitQueueDoneRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.WaitQueueDoneRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  op_id_.MergeFrom(from.op_id_);
  if (from.context_id() != 0) {
    set_context_id(from.context_id());
  }
}

void WaitQueueDoneRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.eager.WaitQueueDoneRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WaitQueueDoneRequest::CopyFrom(const WaitQueueDoneRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.WaitQueueDoneRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitQueueDoneRequest::IsInitialized() const {
  return true;
}

void WaitQueueDoneRequest::Swap(WaitQueueDoneRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WaitQueueDoneRequest::InternalSwap(WaitQueueDoneRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  op_id_.InternalSwap(&other->op_id_);
  swap(context_id_, other->context_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WaitQueueDoneRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WaitQueueDoneResponse::InitAsDefaultInstance() {
}
class WaitQueueDoneResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WaitQueueDoneResponse::WaitQueueDoneResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.eager.WaitQueueDoneResponse)
}
WaitQueueDoneResponse::WaitQueueDoneResponse(const WaitQueueDoneResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.WaitQueueDoneResponse)
}

void WaitQueueDoneResponse::SharedCtor() {
}

WaitQueueDoneResponse::~WaitQueueDoneResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.WaitQueueDoneResponse)
  SharedDtor();
}

void WaitQueueDoneResponse::SharedDtor() {
}

void WaitQueueDoneResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WaitQueueDoneResponse& WaitQueueDoneResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WaitQueueDoneResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base);
  return *internal_default_instance();
}


void WaitQueueDoneResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.WaitQueueDoneResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WaitQueueDoneResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WaitQueueDoneResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.eager.WaitQueueDoneResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.eager.WaitQueueDoneResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.eager.WaitQueueDoneResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WaitQueueDoneResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.eager.WaitQueueDoneResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.eager.WaitQueueDoneResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* WaitQueueDoneResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.WaitQueueDoneResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.WaitQueueDoneResponse)
  return target;
}

size_t WaitQueueDoneResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.WaitQueueDoneResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WaitQueueDoneResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.eager.WaitQueueDoneResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WaitQueueDoneResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WaitQueueDoneResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.eager.WaitQueueDoneResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.eager.WaitQueueDoneResponse)
    MergeFrom(*source);
  }
}

void WaitQueueDoneResponse::MergeFrom(const WaitQueueDoneResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.WaitQueueDoneResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WaitQueueDoneResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.eager.WaitQueueDoneResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WaitQueueDoneResponse::CopyFrom(const WaitQueueDoneResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.WaitQueueDoneResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitQueueDoneResponse::IsInitialized() const {
  return true;
}

void WaitQueueDoneResponse::Swap(WaitQueueDoneResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WaitQueueDoneResponse::InternalSwap(WaitQueueDoneResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WaitQueueDoneResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RunComponentFunctionRequest::InitAsDefaultInstance() {
  ::tensorflow::eager::_RunComponentFunctionRequest_default_instance_._instance.get_mutable()->operation_ = const_cast< ::tensorflow::eager::Operation*>(
      ::tensorflow::eager::Operation::internal_default_instance());
}
class RunComponentFunctionRequest::HasBitSetters {
 public:
  static const ::tensorflow::eager::Operation& operation(const RunComponentFunctionRequest* msg);
};

const ::tensorflow::eager::Operation&
RunComponentFunctionRequest::HasBitSetters::operation(const RunComponentFunctionRequest* msg) {
  return *msg->operation_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunComponentFunctionRequest::kContextIdFieldNumber;
const int RunComponentFunctionRequest::kOperationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunComponentFunctionRequest::RunComponentFunctionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.eager.RunComponentFunctionRequest)
}
RunComponentFunctionRequest::RunComponentFunctionRequest(const RunComponentFunctionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_operation()) {
    operation_ = new ::tensorflow::eager::Operation(*from.operation_);
  } else {
    operation_ = nullptr;
  }
  context_id_ = from.context_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.RunComponentFunctionRequest)
}

void RunComponentFunctionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RunComponentFunctionRequest_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base);
  ::memset(&operation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&context_id_) -
      reinterpret_cast<char*>(&operation_)) + sizeof(context_id_));
}

RunComponentFunctionRequest::~RunComponentFunctionRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.RunComponentFunctionRequest)
  SharedDtor();
}

void RunComponentFunctionRequest::SharedDtor() {
  if (this != internal_default_instance()) delete operation_;
}

void RunComponentFunctionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RunComponentFunctionRequest& RunComponentFunctionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RunComponentFunctionRequest_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base);
  return *internal_default_instance();
}


void RunComponentFunctionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.RunComponentFunctionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && operation_ != nullptr) {
    delete operation_;
  }
  operation_ = nullptr;
  context_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RunComponentFunctionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // fixed64 context_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          context_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // .tensorflow.eager.Operation operation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_operation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RunComponentFunctionRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.eager.RunComponentFunctionRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed64 context_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &context_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.eager.Operation operation = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_operation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.eager.RunComponentFunctionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.eager.RunComponentFunctionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RunComponentFunctionRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.eager.RunComponentFunctionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 context_id = 1;
  if (this->context_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(1, this->context_id(), output);
  }

  // .tensorflow.eager.Operation operation = 2;
  if (this->has_operation()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::operation(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.eager.RunComponentFunctionRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* RunComponentFunctionRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.RunComponentFunctionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 context_id = 1;
  if (this->context_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->context_id(), target);
  }

  // .tensorflow.eager.Operation operation = 2;
  if (this->has_operation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::operation(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.RunComponentFunctionRequest)
  return target;
}

size_t RunComponentFunctionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.RunComponentFunctionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.eager.Operation operation = 2;
  if (this->has_operation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *operation_);
  }

  // fixed64 context_id = 1;
  if (this->context_id() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RunComponentFunctionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.eager.RunComponentFunctionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RunComponentFunctionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RunComponentFunctionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.eager.RunComponentFunctionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.eager.RunComponentFunctionRequest)
    MergeFrom(*source);
  }
}

void RunComponentFunctionRequest::MergeFrom(const RunComponentFunctionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.RunComponentFunctionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_operation()) {
    mutable_operation()->::tensorflow::eager::Operation::MergeFrom(from.operation());
  }
  if (from.context_id() != 0) {
    set_context_id(from.context_id());
  }
}

void RunComponentFunctionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.eager.RunComponentFunctionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunComponentFunctionRequest::CopyFrom(const RunComponentFunctionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.RunComponentFunctionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunComponentFunctionRequest::IsInitialized() const {
  return true;
}

void RunComponentFunctionRequest::Swap(RunComponentFunctionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RunComponentFunctionRequest::InternalSwap(RunComponentFunctionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(operation_, other->operation_);
  swap(context_id_, other->context_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RunComponentFunctionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RunComponentFunctionResponse::InitAsDefaultInstance() {
}
class RunComponentFunctionResponse::HasBitSetters {
 public:
};

void RunComponentFunctionResponse::clear_shape() {
  shape_.Clear();
}
void RunComponentFunctionResponse::clear_tensor() {
  tensor_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunComponentFunctionResponse::kShapeFieldNumber;
const int RunComponentFunctionResponse::kTensorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunComponentFunctionResponse::RunComponentFunctionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.eager.RunComponentFunctionResponse)
}
RunComponentFunctionResponse::RunComponentFunctionResponse(const RunComponentFunctionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      shape_(from.shape_),
      tensor_(from.tensor_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.RunComponentFunctionResponse)
}

void RunComponentFunctionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RunComponentFunctionResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base);
}

RunComponentFunctionResponse::~RunComponentFunctionResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.RunComponentFunctionResponse)
  SharedDtor();
}

void RunComponentFunctionResponse::SharedDtor() {
}

void RunComponentFunctionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RunComponentFunctionResponse& RunComponentFunctionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RunComponentFunctionResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base);
  return *internal_default_instance();
}


void RunComponentFunctionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.RunComponentFunctionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shape_.Clear();
  tensor_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RunComponentFunctionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tensorflow.TensorShapeProto shape = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_shape(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.TensorProto tensor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_tensor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RunComponentFunctionResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.eager.RunComponentFunctionResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.TensorShapeProto shape = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.TensorProto tensor = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_tensor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.eager.RunComponentFunctionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.eager.RunComponentFunctionResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RunComponentFunctionResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.eager.RunComponentFunctionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.TensorShapeProto shape = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->shape_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->shape(static_cast<int>(i)),
      output);
  }

  // repeated .tensorflow.TensorProto tensor = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tensor_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->tensor(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.eager.RunComponentFunctionResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* RunComponentFunctionResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.RunComponentFunctionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.TensorShapeProto shape = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->shape_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->shape(static_cast<int>(i)), target);
  }

  // repeated .tensorflow.TensorProto tensor = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tensor_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->tensor(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.RunComponentFunctionResponse)
  return target;
}

size_t RunComponentFunctionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.RunComponentFunctionResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.TensorShapeProto shape = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->shape_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->shape(static_cast<int>(i)));
    }
  }

  // repeated .tensorflow.TensorProto tensor = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->tensor_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->tensor(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RunComponentFunctionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.eager.RunComponentFunctionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RunComponentFunctionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RunComponentFunctionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.eager.RunComponentFunctionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.eager.RunComponentFunctionResponse)
    MergeFrom(*source);
  }
}

void RunComponentFunctionResponse::MergeFrom(const RunComponentFunctionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.RunComponentFunctionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shape_.MergeFrom(from.shape_);
  tensor_.MergeFrom(from.tensor_);
}

void RunComponentFunctionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.eager.RunComponentFunctionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunComponentFunctionResponse::CopyFrom(const RunComponentFunctionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.RunComponentFunctionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunComponentFunctionResponse::IsInitialized() const {
  return true;
}

void RunComponentFunctionResponse::Swap(RunComponentFunctionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RunComponentFunctionResponse::InternalSwap(RunComponentFunctionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&shape_)->InternalSwap(CastToBase(&other->shape_));
  CastToBase(&tensor_)->InternalSwap(CastToBase(&other->tensor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RunComponentFunctionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KeepAliveRequest::InitAsDefaultInstance() {
}
class KeepAliveRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeepAliveRequest::kContextIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeepAliveRequest::KeepAliveRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.eager.KeepAliveRequest)
}
KeepAliveRequest::KeepAliveRequest(const KeepAliveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  context_id_ = from.context_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.KeepAliveRequest)
}

void KeepAliveRequest::SharedCtor() {
  context_id_ = PROTOBUF_ULONGLONG(0);
}

KeepAliveRequest::~KeepAliveRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.KeepAliveRequest)
  SharedDtor();
}

void KeepAliveRequest::SharedDtor() {
}

void KeepAliveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeepAliveRequest& KeepAliveRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeepAliveRequest_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base);
  return *internal_default_instance();
}


void KeepAliveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.KeepAliveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  context_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* KeepAliveRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // fixed64 context_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          context_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool KeepAliveRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.eager.KeepAliveRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed64 context_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &context_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.eager.KeepAliveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.eager.KeepAliveRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void KeepAliveRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.eager.KeepAliveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 context_id = 1;
  if (this->context_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(1, this->context_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.eager.KeepAliveRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* KeepAliveRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.KeepAliveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 context_id = 1;
  if (this->context_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->context_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.KeepAliveRequest)
  return target;
}

size_t KeepAliveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.KeepAliveRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed64 context_id = 1;
  if (this->context_id() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeepAliveRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.eager.KeepAliveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const KeepAliveRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeepAliveRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.eager.KeepAliveRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.eager.KeepAliveRequest)
    MergeFrom(*source);
  }
}

void KeepAliveRequest::MergeFrom(const KeepAliveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.KeepAliveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.context_id() != 0) {
    set_context_id(from.context_id());
  }
}

void KeepAliveRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.eager.KeepAliveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeepAliveRequest::CopyFrom(const KeepAliveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.KeepAliveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeepAliveRequest::IsInitialized() const {
  return true;
}

void KeepAliveRequest::Swap(KeepAliveRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeepAliveRequest::InternalSwap(KeepAliveRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(context_id_, other->context_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeepAliveRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KeepAliveResponse::InitAsDefaultInstance() {
}
class KeepAliveResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeepAliveResponse::kContextViewIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeepAliveResponse::KeepAliveResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.eager.KeepAliveResponse)
}
KeepAliveResponse::KeepAliveResponse(const KeepAliveResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  context_view_id_ = from.context_view_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.KeepAliveResponse)
}

void KeepAliveResponse::SharedCtor() {
  context_view_id_ = PROTOBUF_ULONGLONG(0);
}

KeepAliveResponse::~KeepAliveResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.KeepAliveResponse)
  SharedDtor();
}

void KeepAliveResponse::SharedDtor() {
}

void KeepAliveResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeepAliveResponse& KeepAliveResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeepAliveResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base);
  return *internal_default_instance();
}


void KeepAliveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.KeepAliveResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  context_view_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* KeepAliveResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // fixed64 context_view_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          context_view_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool KeepAliveResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.eager.KeepAliveResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed64 context_view_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &context_view_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.eager.KeepAliveResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.eager.KeepAliveResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void KeepAliveResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.eager.KeepAliveResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 context_view_id = 1;
  if (this->context_view_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(1, this->context_view_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.eager.KeepAliveResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* KeepAliveResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.KeepAliveResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 context_view_id = 1;
  if (this->context_view_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->context_view_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.KeepAliveResponse)
  return target;
}

size_t KeepAliveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.KeepAliveResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed64 context_view_id = 1;
  if (this->context_view_id() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeepAliveResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.eager.KeepAliveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const KeepAliveResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeepAliveResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.eager.KeepAliveResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.eager.KeepAliveResponse)
    MergeFrom(*source);
  }
}

void KeepAliveResponse::MergeFrom(const KeepAliveResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.KeepAliveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.context_view_id() != 0) {
    set_context_view_id(from.context_view_id());
  }
}

void KeepAliveResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.eager.KeepAliveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeepAliveResponse::CopyFrom(const KeepAliveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.KeepAliveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeepAliveResponse::IsInitialized() const {
  return true;
}

void KeepAliveResponse::Swap(KeepAliveResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeepAliveResponse::InternalSwap(KeepAliveResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(context_view_id_, other->context_view_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeepAliveResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CloseContextRequest::InitAsDefaultInstance() {
}
class CloseContextRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloseContextRequest::kContextIdFieldNumber;
const int CloseContextRequest::kContextViewIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloseContextRequest::CloseContextRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.eager.CloseContextRequest)
}
CloseContextRequest::CloseContextRequest(const CloseContextRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&context_id_, &from.context_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&context_view_id_) -
    reinterpret_cast<char*>(&context_id_)) + sizeof(context_view_id_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.CloseContextRequest)
}

void CloseContextRequest::SharedCtor() {
  ::memset(&context_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&context_view_id_) -
      reinterpret_cast<char*>(&context_id_)) + sizeof(context_view_id_));
}

CloseContextRequest::~CloseContextRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.CloseContextRequest)
  SharedDtor();
}

void CloseContextRequest::SharedDtor() {
}

void CloseContextRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloseContextRequest& CloseContextRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CloseContextRequest_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CloseContextRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.CloseContextRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&context_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&context_view_id_) -
      reinterpret_cast<char*>(&context_id_)) + sizeof(context_view_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CloseContextRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // fixed64 context_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          context_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // fixed64 context_view_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          context_view_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CloseContextRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.eager.CloseContextRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed64 context_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &context_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed64 context_view_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &context_view_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.eager.CloseContextRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.eager.CloseContextRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CloseContextRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.eager.CloseContextRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 context_id = 1;
  if (this->context_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(1, this->context_id(), output);
  }

  // fixed64 context_view_id = 2;
  if (this->context_view_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(2, this->context_view_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.eager.CloseContextRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* CloseContextRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.CloseContextRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 context_id = 1;
  if (this->context_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->context_id(), target);
  }

  // fixed64 context_view_id = 2;
  if (this->context_view_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->context_view_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.CloseContextRequest)
  return target;
}

size_t CloseContextRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.CloseContextRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed64 context_id = 1;
  if (this->context_id() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 context_view_id = 2;
  if (this->context_view_id() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloseContextRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.eager.CloseContextRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseContextRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CloseContextRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.eager.CloseContextRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.eager.CloseContextRequest)
    MergeFrom(*source);
  }
}

void CloseContextRequest::MergeFrom(const CloseContextRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.CloseContextRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.context_id() != 0) {
    set_context_id(from.context_id());
  }
  if (from.context_view_id() != 0) {
    set_context_view_id(from.context_view_id());
  }
}

void CloseContextRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.eager.CloseContextRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseContextRequest::CopyFrom(const CloseContextRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.CloseContextRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseContextRequest::IsInitialized() const {
  return true;
}

void CloseContextRequest::Swap(CloseContextRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloseContextRequest::InternalSwap(CloseContextRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(context_id_, other->context_id_);
  swap(context_view_id_, other->context_view_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseContextRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CloseContextResponse::InitAsDefaultInstance() {
}
class CloseContextResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloseContextResponse::CloseContextResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.eager.CloseContextResponse)
}
CloseContextResponse::CloseContextResponse(const CloseContextResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.CloseContextResponse)
}

void CloseContextResponse::SharedCtor() {
}

CloseContextResponse::~CloseContextResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.CloseContextResponse)
  SharedDtor();
}

void CloseContextResponse::SharedDtor() {
}

void CloseContextResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloseContextResponse& CloseContextResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CloseContextResponse_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CloseContextResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.CloseContextResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CloseContextResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CloseContextResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.eager.CloseContextResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.eager.CloseContextResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.eager.CloseContextResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CloseContextResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.eager.CloseContextResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.eager.CloseContextResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* CloseContextResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.CloseContextResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.CloseContextResponse)
  return target;
}

size_t CloseContextResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.CloseContextResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloseContextResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.eager.CloseContextResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseContextResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CloseContextResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.eager.CloseContextResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.eager.CloseContextResponse)
    MergeFrom(*source);
  }
}

void CloseContextResponse::MergeFrom(const CloseContextResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.CloseContextResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CloseContextResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.eager.CloseContextResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseContextResponse::CopyFrom(const CloseContextResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.CloseContextResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseContextResponse::IsInitialized() const {
  return true;
}

void CloseContextResponse::Swap(CloseContextResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloseContextResponse::InternalSwap(CloseContextResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseContextResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisterFunctionOp::InitAsDefaultInstance() {
  ::tensorflow::eager::_RegisterFunctionOp_default_instance_._instance.get_mutable()->function_def_ = const_cast< ::tensorflow::FunctionDef*>(
      ::tensorflow::FunctionDef::internal_default_instance());
  ::tensorflow::eager::_RegisterFunctionOp_default_instance_._instance.get_mutable()->library_ = const_cast< ::tensorflow::FunctionDefLibrary*>(
      ::tensorflow::FunctionDefLibrary::internal_default_instance());
}
class RegisterFunctionOp::HasBitSetters {
 public:
  static const ::tensorflow::FunctionDef& function_def(const RegisterFunctionOp* msg);
  static const ::tensorflow::FunctionDefLibrary& library(const RegisterFunctionOp* msg);
};

const ::tensorflow::FunctionDef&
RegisterFunctionOp::HasBitSetters::function_def(const RegisterFunctionOp* msg) {
  return *msg->function_def_;
}
const ::tensorflow::FunctionDefLibrary&
RegisterFunctionOp::HasBitSetters::library(const RegisterFunctionOp* msg) {
  return *msg->library_;
}
void RegisterFunctionOp::clear_function_def() {
  if (GetArenaNoVirtual() == nullptr && function_def_ != nullptr) {
    delete function_def_;
  }
  function_def_ = nullptr;
}
void RegisterFunctionOp::clear_library() {
  if (GetArenaNoVirtual() == nullptr && library_ != nullptr) {
    delete library_;
  }
  library_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterFunctionOp::kFunctionDefFieldNumber;
const int RegisterFunctionOp::kIsComponentFunctionFieldNumber;
const int RegisterFunctionOp::kLibraryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterFunctionOp::RegisterFunctionOp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.eager.RegisterFunctionOp)
}
RegisterFunctionOp::RegisterFunctionOp(const RegisterFunctionOp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_function_def()) {
    function_def_ = new ::tensorflow::FunctionDef(*from.function_def_);
  } else {
    function_def_ = nullptr;
  }
  if (from.has_library()) {
    library_ = new ::tensorflow::FunctionDefLibrary(*from.library_);
  } else {
    library_ = nullptr;
  }
  is_component_function_ = from.is_component_function_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.RegisterFunctionOp)
}

void RegisterFunctionOp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegisterFunctionOp_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base);
  ::memset(&function_def_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_component_function_) -
      reinterpret_cast<char*>(&function_def_)) + sizeof(is_component_function_));
}

RegisterFunctionOp::~RegisterFunctionOp() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.RegisterFunctionOp)
  SharedDtor();
}

void RegisterFunctionOp::SharedDtor() {
  if (this != internal_default_instance()) delete function_def_;
  if (this != internal_default_instance()) delete library_;
}

void RegisterFunctionOp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterFunctionOp& RegisterFunctionOp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterFunctionOp_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base);
  return *internal_default_instance();
}


void RegisterFunctionOp::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.RegisterFunctionOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && function_def_ != nullptr) {
    delete function_def_;
  }
  function_def_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && library_ != nullptr) {
    delete library_;
  }
  library_ = nullptr;
  is_component_function_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegisterFunctionOp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.FunctionDef function_def = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_function_def(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_component_function = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_component_function_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.FunctionDefLibrary library = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_library(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegisterFunctionOp::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.eager.RegisterFunctionOp)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.FunctionDef function_def = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_function_def()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_component_function = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_component_function_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.FunctionDefLibrary library = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_library()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.eager.RegisterFunctionOp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.eager.RegisterFunctionOp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegisterFunctionOp::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.eager.RegisterFunctionOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.FunctionDef function_def = 1;
  if (this->has_function_def()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::function_def(this), output);
  }

  // bool is_component_function = 2;
  if (this->is_component_function() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->is_component_function(), output);
  }

  // .tensorflow.FunctionDefLibrary library = 3;
  if (this->has_library()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::library(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.eager.RegisterFunctionOp)
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterFunctionOp::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.RegisterFunctionOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.FunctionDef function_def = 1;
  if (this->has_function_def()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::function_def(this), target);
  }

  // bool is_component_function = 2;
  if (this->is_component_function() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->is_component_function(), target);
  }

  // .tensorflow.FunctionDefLibrary library = 3;
  if (this->has_library()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::library(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.RegisterFunctionOp)
  return target;
}

size_t RegisterFunctionOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.RegisterFunctionOp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.FunctionDef function_def = 1;
  if (this->has_function_def()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *function_def_);
  }

  // .tensorflow.FunctionDefLibrary library = 3;
  if (this->has_library()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *library_);
  }

  // bool is_component_function = 2;
  if (this->is_component_function() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterFunctionOp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.eager.RegisterFunctionOp)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterFunctionOp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterFunctionOp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.eager.RegisterFunctionOp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.eager.RegisterFunctionOp)
    MergeFrom(*source);
  }
}

void RegisterFunctionOp::MergeFrom(const RegisterFunctionOp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.RegisterFunctionOp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_function_def()) {
    mutable_function_def()->::tensorflow::FunctionDef::MergeFrom(from.function_def());
  }
  if (from.has_library()) {
    mutable_library()->::tensorflow::FunctionDefLibrary::MergeFrom(from.library());
  }
  if (from.is_component_function() != 0) {
    set_is_component_function(from.is_component_function());
  }
}

void RegisterFunctionOp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.eager.RegisterFunctionOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterFunctionOp::CopyFrom(const RegisterFunctionOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.RegisterFunctionOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterFunctionOp::IsInitialized() const {
  return true;
}

void RegisterFunctionOp::Swap(RegisterFunctionOp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterFunctionOp::InternalSwap(RegisterFunctionOp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(function_def_, other->function_def_);
  swap(library_, other->library_);
  swap(is_component_function_, other->is_component_function_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterFunctionOp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CleanupFunctionOp::InitAsDefaultInstance() {
}
class CleanupFunctionOp::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CleanupFunctionOp::kStepIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CleanupFunctionOp::CleanupFunctionOp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.eager.CleanupFunctionOp)
}
CleanupFunctionOp::CleanupFunctionOp(const CleanupFunctionOp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  step_id_ = from.step_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.CleanupFunctionOp)
}

void CleanupFunctionOp::SharedCtor() {
  step_id_ = PROTOBUF_LONGLONG(0);
}

CleanupFunctionOp::~CleanupFunctionOp() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.CleanupFunctionOp)
  SharedDtor();
}

void CleanupFunctionOp::SharedDtor() {
}

void CleanupFunctionOp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CleanupFunctionOp& CleanupFunctionOp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CleanupFunctionOp_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CleanupFunctionOp::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.CleanupFunctionOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  step_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CleanupFunctionOp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 step_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          step_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CleanupFunctionOp::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.eager.CleanupFunctionOp)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 step_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &step_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.eager.CleanupFunctionOp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.eager.CleanupFunctionOp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CleanupFunctionOp::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.eager.CleanupFunctionOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 step_id = 1;
  if (this->step_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->step_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.eager.CleanupFunctionOp)
}

::PROTOBUF_NAMESPACE_ID::uint8* CleanupFunctionOp::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.CleanupFunctionOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 step_id = 1;
  if (this->step_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->step_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.CleanupFunctionOp)
  return target;
}

size_t CleanupFunctionOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.CleanupFunctionOp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 step_id = 1;
  if (this->step_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->step_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CleanupFunctionOp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.eager.CleanupFunctionOp)
  GOOGLE_DCHECK_NE(&from, this);
  const CleanupFunctionOp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CleanupFunctionOp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.eager.CleanupFunctionOp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.eager.CleanupFunctionOp)
    MergeFrom(*source);
  }
}

void CleanupFunctionOp::MergeFrom(const CleanupFunctionOp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.CleanupFunctionOp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.step_id() != 0) {
    set_step_id(from.step_id());
  }
}

void CleanupFunctionOp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.eager.CleanupFunctionOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CleanupFunctionOp::CopyFrom(const CleanupFunctionOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.CleanupFunctionOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanupFunctionOp::IsInitialized() const {
  return true;
}

void CleanupFunctionOp::Swap(CleanupFunctionOp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CleanupFunctionOp::InternalSwap(CleanupFunctionOp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(step_id_, other->step_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CleanupFunctionOp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SyncRemoteExecutorForStream::InitAsDefaultInstance() {
}
class SyncRemoteExecutorForStream::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SyncRemoteExecutorForStream::SyncRemoteExecutorForStream()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.eager.SyncRemoteExecutorForStream)
}
SyncRemoteExecutorForStream::SyncRemoteExecutorForStream(const SyncRemoteExecutorForStream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.SyncRemoteExecutorForStream)
}

void SyncRemoteExecutorForStream::SharedCtor() {
}

SyncRemoteExecutorForStream::~SyncRemoteExecutorForStream() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.SyncRemoteExecutorForStream)
  SharedDtor();
}

void SyncRemoteExecutorForStream::SharedDtor() {
}

void SyncRemoteExecutorForStream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncRemoteExecutorForStream& SyncRemoteExecutorForStream::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SyncRemoteExecutorForStream_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SyncRemoteExecutorForStream::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.SyncRemoteExecutorForStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SyncRemoteExecutorForStream::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SyncRemoteExecutorForStream::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.eager.SyncRemoteExecutorForStream)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.eager.SyncRemoteExecutorForStream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.eager.SyncRemoteExecutorForStream)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SyncRemoteExecutorForStream::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.eager.SyncRemoteExecutorForStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.eager.SyncRemoteExecutorForStream)
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncRemoteExecutorForStream::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.SyncRemoteExecutorForStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.SyncRemoteExecutorForStream)
  return target;
}

size_t SyncRemoteExecutorForStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.SyncRemoteExecutorForStream)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncRemoteExecutorForStream::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.eager.SyncRemoteExecutorForStream)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncRemoteExecutorForStream* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncRemoteExecutorForStream>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.eager.SyncRemoteExecutorForStream)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.eager.SyncRemoteExecutorForStream)
    MergeFrom(*source);
  }
}

void SyncRemoteExecutorForStream::MergeFrom(const SyncRemoteExecutorForStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.SyncRemoteExecutorForStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SyncRemoteExecutorForStream::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.eager.SyncRemoteExecutorForStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncRemoteExecutorForStream::CopyFrom(const SyncRemoteExecutorForStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.SyncRemoteExecutorForStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncRemoteExecutorForStream::IsInitialized() const {
  return true;
}

void SyncRemoteExecutorForStream::Swap(SyncRemoteExecutorForStream* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SyncRemoteExecutorForStream::InternalSwap(SyncRemoteExecutorForStream* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncRemoteExecutorForStream::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendTensorOp::InitAsDefaultInstance() {
}
class SendTensorOp::HasBitSetters {
 public:
};

void SendTensorOp::clear_tensors() {
  tensors_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendTensorOp::kOpIdFieldNumber;
const int SendTensorOp::kTensorsFieldNumber;
const int SendTensorOp::kDeviceNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendTensorOp::SendTensorOp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.eager.SendTensorOp)
}
SendTensorOp::SendTensorOp(const SendTensorOp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tensors_(from.tensors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.device_name().size() > 0) {
    device_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_name_);
  }
  op_id_ = from.op_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.SendTensorOp)
}

void SendTensorOp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendTensorOp_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base);
  device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  op_id_ = PROTOBUF_LONGLONG(0);
}

SendTensorOp::~SendTensorOp() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.SendTensorOp)
  SharedDtor();
}

void SendTensorOp::SharedDtor() {
  device_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SendTensorOp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendTensorOp& SendTensorOp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendTensorOp_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SendTensorOp::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.SendTensorOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tensors_.Clear();
  device_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  op_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SendTensorOp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 op_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          op_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.TensorProto tensors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_tensors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // string device_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_device_name(), ptr, ctx, "tensorflow.eager.SendTensorOp.device_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SendTensorOp::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.eager.SendTensorOp)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 op_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &op_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.TensorProto tensors = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_tensors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string device_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->device_name().data(), static_cast<int>(this->device_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.eager.SendTensorOp.device_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.eager.SendTensorOp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.eager.SendTensorOp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SendTensorOp::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.eager.SendTensorOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 op_id = 1;
  if (this->op_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->op_id(), output);
  }

  // repeated .tensorflow.TensorProto tensors = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tensors_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->tensors(static_cast<int>(i)),
      output);
  }

  // string device_name = 3;
  if (this->device_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->device_name().data(), static_cast<int>(this->device_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.eager.SendTensorOp.device_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->device_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.eager.SendTensorOp)
}

::PROTOBUF_NAMESPACE_ID::uint8* SendTensorOp::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.SendTensorOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 op_id = 1;
  if (this->op_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->op_id(), target);
  }

  // repeated .tensorflow.TensorProto tensors = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tensors_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->tensors(static_cast<int>(i)), target);
  }

  // string device_name = 3;
  if (this->device_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->device_name().data(), static_cast<int>(this->device_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.eager.SendTensorOp.device_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->device_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.SendTensorOp)
  return target;
}

size_t SendTensorOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.SendTensorOp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.TensorProto tensors = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->tensors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->tensors(static_cast<int>(i)));
    }
  }

  // string device_name = 3;
  if (this->device_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->device_name());
  }

  // int64 op_id = 1;
  if (this->op_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->op_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendTensorOp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.eager.SendTensorOp)
  GOOGLE_DCHECK_NE(&from, this);
  const SendTensorOp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendTensorOp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.eager.SendTensorOp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.eager.SendTensorOp)
    MergeFrom(*source);
  }
}

void SendTensorOp::MergeFrom(const SendTensorOp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.SendTensorOp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tensors_.MergeFrom(from.tensors_);
  if (from.device_name().size() > 0) {

    device_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_name_);
  }
  if (from.op_id() != 0) {
    set_op_id(from.op_id());
  }
}

void SendTensorOp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.eager.SendTensorOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendTensorOp::CopyFrom(const SendTensorOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.SendTensorOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendTensorOp::IsInitialized() const {
  return true;
}

void SendTensorOp::Swap(SendTensorOp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendTensorOp::InternalSwap(SendTensorOp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&tensors_)->InternalSwap(CastToBase(&other->tensors_));
  device_name_.Swap(&other->device_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(op_id_, other->op_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendTensorOp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendPackedHandleOp_LocalTensorHandle::InitAsDefaultInstance() {
  ::tensorflow::eager::_SendPackedHandleOp_LocalTensorHandle_default_instance_._instance.get_mutable()->tensor_ = const_cast< ::tensorflow::TensorProto*>(
      ::tensorflow::TensorProto::internal_default_instance());
}
class SendPackedHandleOp_LocalTensorHandle::HasBitSetters {
 public:
  static const ::tensorflow::TensorProto& tensor(const SendPackedHandleOp_LocalTensorHandle* msg);
};

const ::tensorflow::TensorProto&
SendPackedHandleOp_LocalTensorHandle::HasBitSetters::tensor(const SendPackedHandleOp_LocalTensorHandle* msg) {
  return *msg->tensor_;
}
void SendPackedHandleOp_LocalTensorHandle::clear_tensor() {
  if (GetArenaNoVirtual() == nullptr && tensor_ != nullptr) {
    delete tensor_;
  }
  tensor_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendPackedHandleOp_LocalTensorHandle::kTensorFieldNumber;
const int SendPackedHandleOp_LocalTensorHandle::kDeviceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendPackedHandleOp_LocalTensorHandle::SendPackedHandleOp_LocalTensorHandle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.eager.SendPackedHandleOp.LocalTensorHandle)
}
SendPackedHandleOp_LocalTensorHandle::SendPackedHandleOp_LocalTensorHandle(const SendPackedHandleOp_LocalTensorHandle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.device().size() > 0) {
    device_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_);
  }
  if (from.has_tensor()) {
    tensor_ = new ::tensorflow::TensorProto(*from.tensor_);
  } else {
    tensor_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.SendPackedHandleOp.LocalTensorHandle)
}

void SendPackedHandleOp_LocalTensorHandle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendPackedHandleOp_LocalTensorHandle_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base);
  device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tensor_ = nullptr;
}

SendPackedHandleOp_LocalTensorHandle::~SendPackedHandleOp_LocalTensorHandle() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.SendPackedHandleOp.LocalTensorHandle)
  SharedDtor();
}

void SendPackedHandleOp_LocalTensorHandle::SharedDtor() {
  device_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tensor_;
}

void SendPackedHandleOp_LocalTensorHandle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendPackedHandleOp_LocalTensorHandle& SendPackedHandleOp_LocalTensorHandle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendPackedHandleOp_LocalTensorHandle_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SendPackedHandleOp_LocalTensorHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.SendPackedHandleOp.LocalTensorHandle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && tensor_ != nullptr) {
    delete tensor_;
  }
  tensor_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SendPackedHandleOp_LocalTensorHandle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.TensorProto tensor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_tensor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_device(), ptr, ctx, "tensorflow.eager.SendPackedHandleOp.LocalTensorHandle.device");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SendPackedHandleOp_LocalTensorHandle::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.eager.SendPackedHandleOp.LocalTensorHandle)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.TensorProto tensor = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tensor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string device = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->device().data(), static_cast<int>(this->device().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.eager.SendPackedHandleOp.LocalTensorHandle.device"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.eager.SendPackedHandleOp.LocalTensorHandle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.eager.SendPackedHandleOp.LocalTensorHandle)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SendPackedHandleOp_LocalTensorHandle::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.eager.SendPackedHandleOp.LocalTensorHandle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.TensorProto tensor = 1;
  if (this->has_tensor()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::tensor(this), output);
  }

  // string device = 2;
  if (this->device().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), static_cast<int>(this->device().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.eager.SendPackedHandleOp.LocalTensorHandle.device");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->device(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.eager.SendPackedHandleOp.LocalTensorHandle)
}

::PROTOBUF_NAMESPACE_ID::uint8* SendPackedHandleOp_LocalTensorHandle::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.SendPackedHandleOp.LocalTensorHandle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.TensorProto tensor = 1;
  if (this->has_tensor()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::tensor(this), target);
  }

  // string device = 2;
  if (this->device().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), static_cast<int>(this->device().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.eager.SendPackedHandleOp.LocalTensorHandle.device");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->device(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.SendPackedHandleOp.LocalTensorHandle)
  return target;
}

size_t SendPackedHandleOp_LocalTensorHandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.SendPackedHandleOp.LocalTensorHandle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device = 2;
  if (this->device().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->device());
  }

  // .tensorflow.TensorProto tensor = 1;
  if (this->has_tensor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tensor_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendPackedHandleOp_LocalTensorHandle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.eager.SendPackedHandleOp.LocalTensorHandle)
  GOOGLE_DCHECK_NE(&from, this);
  const SendPackedHandleOp_LocalTensorHandle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendPackedHandleOp_LocalTensorHandle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.eager.SendPackedHandleOp.LocalTensorHandle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.eager.SendPackedHandleOp.LocalTensorHandle)
    MergeFrom(*source);
  }
}

void SendPackedHandleOp_LocalTensorHandle::MergeFrom(const SendPackedHandleOp_LocalTensorHandle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.SendPackedHandleOp.LocalTensorHandle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device().size() > 0) {

    device_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_);
  }
  if (from.has_tensor()) {
    mutable_tensor()->::tensorflow::TensorProto::MergeFrom(from.tensor());
  }
}

void SendPackedHandleOp_LocalTensorHandle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.eager.SendPackedHandleOp.LocalTensorHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendPackedHandleOp_LocalTensorHandle::CopyFrom(const SendPackedHandleOp_LocalTensorHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.SendPackedHandleOp.LocalTensorHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendPackedHandleOp_LocalTensorHandle::IsInitialized() const {
  return true;
}

void SendPackedHandleOp_LocalTensorHandle::Swap(SendPackedHandleOp_LocalTensorHandle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendPackedHandleOp_LocalTensorHandle::InternalSwap(SendPackedHandleOp_LocalTensorHandle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  device_.Swap(&other->device_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tensor_, other->tensor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendPackedHandleOp_LocalTensorHandle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendPackedHandleOp_Handle::InitAsDefaultInstance() {
  ::tensorflow::eager::_SendPackedHandleOp_Handle_default_instance_.local_handle_ = const_cast< ::tensorflow::eager::SendPackedHandleOp_LocalTensorHandle*>(
      ::tensorflow::eager::SendPackedHandleOp_LocalTensorHandle::internal_default_instance());
  ::tensorflow::eager::_SendPackedHandleOp_Handle_default_instance_.remote_handle_ = const_cast< ::tensorflow::eager::RemoteTensorHandle*>(
      ::tensorflow::eager::RemoteTensorHandle::internal_default_instance());
}
class SendPackedHandleOp_Handle::HasBitSetters {
 public:
  static const ::tensorflow::eager::SendPackedHandleOp_LocalTensorHandle& local_handle(const SendPackedHandleOp_Handle* msg);
  static const ::tensorflow::eager::RemoteTensorHandle& remote_handle(const SendPackedHandleOp_Handle* msg);
};

const ::tensorflow::eager::SendPackedHandleOp_LocalTensorHandle&
SendPackedHandleOp_Handle::HasBitSetters::local_handle(const SendPackedHandleOp_Handle* msg) {
  return *msg->item_.local_handle_;
}
const ::tensorflow::eager::RemoteTensorHandle&
SendPackedHandleOp_Handle::HasBitSetters::remote_handle(const SendPackedHandleOp_Handle* msg) {
  return *msg->item_.remote_handle_;
}
void SendPackedHandleOp_Handle::set_allocated_local_handle(::tensorflow::eager::SendPackedHandleOp_LocalTensorHandle* local_handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_item();
  if (local_handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      local_handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_handle, submessage_arena);
    }
    set_has_local_handle();
    item_.local_handle_ = local_handle;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.SendPackedHandleOp.Handle.local_handle)
}
void SendPackedHandleOp_Handle::set_allocated_remote_handle(::tensorflow::eager::RemoteTensorHandle* remote_handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_item();
  if (remote_handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remote_handle)->GetArena();
    if (message_arena != submessage_arena) {
      remote_handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remote_handle, submessage_arena);
    }
    set_has_remote_handle();
    item_.remote_handle_ = remote_handle;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.SendPackedHandleOp.Handle.remote_handle)
}
void SendPackedHandleOp_Handle::clear_remote_handle() {
  if (has_remote_handle()) {
    delete item_.remote_handle_;
    clear_has_item();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendPackedHandleOp_Handle::kLocalHandleFieldNumber;
const int SendPackedHandleOp_Handle::kRemoteHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendPackedHandleOp_Handle::SendPackedHandleOp_Handle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.eager.SendPackedHandleOp.Handle)
}
SendPackedHandleOp_Handle::SendPackedHandleOp_Handle(const SendPackedHandleOp_Handle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_item();
  switch (from.item_case()) {
    case kLocalHandle: {
      mutable_local_handle()->::tensorflow::eager::SendPackedHandleOp_LocalTensorHandle::MergeFrom(from.local_handle());
      break;
    }
    case kRemoteHandle: {
      mutable_remote_handle()->::tensorflow::eager::RemoteTensorHandle::MergeFrom(from.remote_handle());
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.SendPackedHandleOp.Handle)
}

void SendPackedHandleOp_Handle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendPackedHandleOp_Handle_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base);
  clear_has_item();
}

SendPackedHandleOp_Handle::~SendPackedHandleOp_Handle() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.SendPackedHandleOp.Handle)
  SharedDtor();
}

void SendPackedHandleOp_Handle::SharedDtor() {
  if (has_item()) {
    clear_item();
  }
}

void SendPackedHandleOp_Handle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendPackedHandleOp_Handle& SendPackedHandleOp_Handle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendPackedHandleOp_Handle_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SendPackedHandleOp_Handle::clear_item() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.eager.SendPackedHandleOp.Handle)
  switch (item_case()) {
    case kLocalHandle: {
      delete item_.local_handle_;
      break;
    }
    case kRemoteHandle: {
      delete item_.remote_handle_;
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ITEM_NOT_SET;
}


void SendPackedHandleOp_Handle::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.SendPackedHandleOp.Handle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_item();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SendPackedHandleOp_Handle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.eager.SendPackedHandleOp.LocalTensorHandle local_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_local_handle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.eager.RemoteTensorHandle remote_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_remote_handle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SendPackedHandleOp_Handle::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.eager.SendPackedHandleOp.Handle)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.eager.SendPackedHandleOp.LocalTensorHandle local_handle = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_local_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.eager.RemoteTensorHandle remote_handle = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_remote_handle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.eager.SendPackedHandleOp.Handle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.eager.SendPackedHandleOp.Handle)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SendPackedHandleOp_Handle::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.eager.SendPackedHandleOp.Handle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.eager.SendPackedHandleOp.LocalTensorHandle local_handle = 1;
  if (has_local_handle()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::local_handle(this), output);
  }

  // .tensorflow.eager.RemoteTensorHandle remote_handle = 2;
  if (has_remote_handle()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::remote_handle(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.eager.SendPackedHandleOp.Handle)
}

::PROTOBUF_NAMESPACE_ID::uint8* SendPackedHandleOp_Handle::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.SendPackedHandleOp.Handle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.eager.SendPackedHandleOp.LocalTensorHandle local_handle = 1;
  if (has_local_handle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::local_handle(this), target);
  }

  // .tensorflow.eager.RemoteTensorHandle remote_handle = 2;
  if (has_remote_handle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::remote_handle(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.SendPackedHandleOp.Handle)
  return target;
}

size_t SendPackedHandleOp_Handle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.SendPackedHandleOp.Handle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (item_case()) {
    // .tensorflow.eager.SendPackedHandleOp.LocalTensorHandle local_handle = 1;
    case kLocalHandle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *item_.local_handle_);
      break;
    }
    // .tensorflow.eager.RemoteTensorHandle remote_handle = 2;
    case kRemoteHandle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *item_.remote_handle_);
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendPackedHandleOp_Handle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.eager.SendPackedHandleOp.Handle)
  GOOGLE_DCHECK_NE(&from, this);
  const SendPackedHandleOp_Handle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendPackedHandleOp_Handle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.eager.SendPackedHandleOp.Handle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.eager.SendPackedHandleOp.Handle)
    MergeFrom(*source);
  }
}

void SendPackedHandleOp_Handle::MergeFrom(const SendPackedHandleOp_Handle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.SendPackedHandleOp.Handle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.item_case()) {
    case kLocalHandle: {
      mutable_local_handle()->::tensorflow::eager::SendPackedHandleOp_LocalTensorHandle::MergeFrom(from.local_handle());
      break;
    }
    case kRemoteHandle: {
      mutable_remote_handle()->::tensorflow::eager::RemoteTensorHandle::MergeFrom(from.remote_handle());
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
}

void SendPackedHandleOp_Handle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.eager.SendPackedHandleOp.Handle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendPackedHandleOp_Handle::CopyFrom(const SendPackedHandleOp_Handle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.SendPackedHandleOp.Handle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendPackedHandleOp_Handle::IsInitialized() const {
  return true;
}

void SendPackedHandleOp_Handle::Swap(SendPackedHandleOp_Handle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendPackedHandleOp_Handle::InternalSwap(SendPackedHandleOp_Handle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(item_, other->item_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendPackedHandleOp_Handle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendPackedHandleOp::InitAsDefaultInstance() {
}
class SendPackedHandleOp::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendPackedHandleOp::kOpIdFieldNumber;
const int SendPackedHandleOp::kHandlesFieldNumber;
const int SendPackedHandleOp::kDeviceNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendPackedHandleOp::SendPackedHandleOp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.eager.SendPackedHandleOp)
}
SendPackedHandleOp::SendPackedHandleOp(const SendPackedHandleOp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      handles_(from.handles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.device_name().size() > 0) {
    device_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_name_);
  }
  op_id_ = from.op_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.SendPackedHandleOp)
}

void SendPackedHandleOp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendPackedHandleOp_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base);
  device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  op_id_ = PROTOBUF_LONGLONG(0);
}

SendPackedHandleOp::~SendPackedHandleOp() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.SendPackedHandleOp)
  SharedDtor();
}

void SendPackedHandleOp::SharedDtor() {
  device_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SendPackedHandleOp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendPackedHandleOp& SendPackedHandleOp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendPackedHandleOp_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SendPackedHandleOp::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.SendPackedHandleOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  handles_.Clear();
  device_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  op_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SendPackedHandleOp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 op_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          op_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.eager.SendPackedHandleOp.Handle handles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_handles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // string device_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_device_name(), ptr, ctx, "tensorflow.eager.SendPackedHandleOp.device_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SendPackedHandleOp::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.eager.SendPackedHandleOp)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 op_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &op_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.eager.SendPackedHandleOp.Handle handles = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_handles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string device_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->device_name().data(), static_cast<int>(this->device_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.eager.SendPackedHandleOp.device_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.eager.SendPackedHandleOp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.eager.SendPackedHandleOp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SendPackedHandleOp::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.eager.SendPackedHandleOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 op_id = 1;
  if (this->op_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->op_id(), output);
  }

  // repeated .tensorflow.eager.SendPackedHandleOp.Handle handles = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->handles_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->handles(static_cast<int>(i)),
      output);
  }

  // string device_name = 3;
  if (this->device_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->device_name().data(), static_cast<int>(this->device_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.eager.SendPackedHandleOp.device_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->device_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.eager.SendPackedHandleOp)
}

::PROTOBUF_NAMESPACE_ID::uint8* SendPackedHandleOp::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.SendPackedHandleOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 op_id = 1;
  if (this->op_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->op_id(), target);
  }

  // repeated .tensorflow.eager.SendPackedHandleOp.Handle handles = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->handles_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->handles(static_cast<int>(i)), target);
  }

  // string device_name = 3;
  if (this->device_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->device_name().data(), static_cast<int>(this->device_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.eager.SendPackedHandleOp.device_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->device_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.SendPackedHandleOp)
  return target;
}

size_t SendPackedHandleOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.SendPackedHandleOp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.eager.SendPackedHandleOp.Handle handles = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->handles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->handles(static_cast<int>(i)));
    }
  }

  // string device_name = 3;
  if (this->device_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->device_name());
  }

  // int64 op_id = 1;
  if (this->op_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->op_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendPackedHandleOp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.eager.SendPackedHandleOp)
  GOOGLE_DCHECK_NE(&from, this);
  const SendPackedHandleOp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendPackedHandleOp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.eager.SendPackedHandleOp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.eager.SendPackedHandleOp)
    MergeFrom(*source);
  }
}

void SendPackedHandleOp::MergeFrom(const SendPackedHandleOp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.SendPackedHandleOp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  handles_.MergeFrom(from.handles_);
  if (from.device_name().size() > 0) {

    device_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_name_);
  }
  if (from.op_id() != 0) {
    set_op_id(from.op_id());
  }
}

void SendPackedHandleOp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.eager.SendPackedHandleOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendPackedHandleOp::CopyFrom(const SendPackedHandleOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.SendPackedHandleOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendPackedHandleOp::IsInitialized() const {
  return true;
}

void SendPackedHandleOp::Swap(SendPackedHandleOp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendPackedHandleOp::InternalSwap(SendPackedHandleOp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&handles_)->InternalSwap(CastToBase(&other->handles_));
  device_name_.Swap(&other->device_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(op_id_, other->op_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendPackedHandleOp::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace eager
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::eager::Operation_Input* Arena::CreateMaybeMessage< ::tensorflow::eager::Operation_Input >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::eager::Operation_Input >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::Operation_AttrsEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::eager::Operation_AttrsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::eager::Operation_AttrsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::Operation* Arena::CreateMaybeMessage< ::tensorflow::eager::Operation >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::eager::Operation >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::QueueItem* Arena::CreateMaybeMessage< ::tensorflow::eager::QueueItem >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::eager::QueueItem >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::QueueResponse* Arena::CreateMaybeMessage< ::tensorflow::eager::QueueResponse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::eager::QueueResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::CreateContextRequest* Arena::CreateMaybeMessage< ::tensorflow::eager::CreateContextRequest >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::eager::CreateContextRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::CreateContextResponse* Arena::CreateMaybeMessage< ::tensorflow::eager::CreateContextResponse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::eager::CreateContextResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::UpdateContextRequest* Arena::CreateMaybeMessage< ::tensorflow::eager::UpdateContextRequest >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::eager::UpdateContextRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::UpdateContextResponse* Arena::CreateMaybeMessage< ::tensorflow::eager::UpdateContextResponse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::eager::UpdateContextResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::EnqueueRequest* Arena::CreateMaybeMessage< ::tensorflow::eager::EnqueueRequest >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::eager::EnqueueRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::EnqueueResponse* Arena::CreateMaybeMessage< ::tensorflow::eager::EnqueueResponse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::eager::EnqueueResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::WaitQueueDoneRequest* Arena::CreateMaybeMessage< ::tensorflow::eager::WaitQueueDoneRequest >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::eager::WaitQueueDoneRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::WaitQueueDoneResponse* Arena::CreateMaybeMessage< ::tensorflow::eager::WaitQueueDoneResponse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::eager::WaitQueueDoneResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::RunComponentFunctionRequest* Arena::CreateMaybeMessage< ::tensorflow::eager::RunComponentFunctionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::eager::RunComponentFunctionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::RunComponentFunctionResponse* Arena::CreateMaybeMessage< ::tensorflow::eager::RunComponentFunctionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::eager::RunComponentFunctionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::KeepAliveRequest* Arena::CreateMaybeMessage< ::tensorflow::eager::KeepAliveRequest >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::eager::KeepAliveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::KeepAliveResponse* Arena::CreateMaybeMessage< ::tensorflow::eager::KeepAliveResponse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::eager::KeepAliveResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::CloseContextRequest* Arena::CreateMaybeMessage< ::tensorflow::eager::CloseContextRequest >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::eager::CloseContextRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::CloseContextResponse* Arena::CreateMaybeMessage< ::tensorflow::eager::CloseContextResponse >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::eager::CloseContextResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::RegisterFunctionOp* Arena::CreateMaybeMessage< ::tensorflow::eager::RegisterFunctionOp >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::eager::RegisterFunctionOp >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::CleanupFunctionOp* Arena::CreateMaybeMessage< ::tensorflow::eager::CleanupFunctionOp >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::eager::CleanupFunctionOp >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::SyncRemoteExecutorForStream* Arena::CreateMaybeMessage< ::tensorflow::eager::SyncRemoteExecutorForStream >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::eager::SyncRemoteExecutorForStream >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::SendTensorOp* Arena::CreateMaybeMessage< ::tensorflow::eager::SendTensorOp >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::eager::SendTensorOp >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::SendPackedHandleOp_LocalTensorHandle* Arena::CreateMaybeMessage< ::tensorflow::eager::SendPackedHandleOp_LocalTensorHandle >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::eager::SendPackedHandleOp_LocalTensorHandle >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::SendPackedHandleOp_Handle* Arena::CreateMaybeMessage< ::tensorflow::eager::SendPackedHandleOp_Handle >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::eager::SendPackedHandleOp_Handle >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::SendPackedHandleOp* Arena::CreateMaybeMessage< ::tensorflow::eager::SendPackedHandleOp >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::eager::SendPackedHandleOp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
