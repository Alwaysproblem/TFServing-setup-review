// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/device_filters.proto

#include "tensorflow/core/protobuf/device_filters.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JobDeviceFilters_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JobDeviceFilters_TasksEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TaskDeviceFilters_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto;
namespace tensorflow {
class TaskDeviceFiltersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaskDeviceFilters> _instance;
} _TaskDeviceFilters_default_instance_;
class JobDeviceFilters_TasksEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JobDeviceFilters_TasksEntry_DoNotUse> _instance;
} _JobDeviceFilters_TasksEntry_DoNotUse_default_instance_;
class JobDeviceFiltersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JobDeviceFilters> _instance;
} _JobDeviceFilters_default_instance_;
class ClusterDeviceFiltersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClusterDeviceFilters> _instance;
} _ClusterDeviceFilters_default_instance_;
}  // namespace tensorflow
static void InitDefaultsscc_info_ClusterDeviceFilters_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_ClusterDeviceFilters_default_instance_;
    new (ptr) ::tensorflow::ClusterDeviceFilters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::ClusterDeviceFilters::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClusterDeviceFilters_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClusterDeviceFilters_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto}, {
      &scc_info_JobDeviceFilters_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto.base,}};

static void InitDefaultsscc_info_JobDeviceFilters_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_JobDeviceFilters_default_instance_;
    new (ptr) ::tensorflow::JobDeviceFilters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::JobDeviceFilters::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JobDeviceFilters_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_JobDeviceFilters_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto}, {
      &scc_info_JobDeviceFilters_TasksEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto.base,}};

static void InitDefaultsscc_info_JobDeviceFilters_TasksEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_JobDeviceFilters_TasksEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::JobDeviceFilters_TasksEntry_DoNotUse();
  }
  ::tensorflow::JobDeviceFilters_TasksEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JobDeviceFilters_TasksEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_JobDeviceFilters_TasksEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto}, {
      &scc_info_TaskDeviceFilters_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto.base,}};

static void InitDefaultsscc_info_TaskDeviceFilters_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_TaskDeviceFilters_default_instance_;
    new (ptr) ::tensorflow::TaskDeviceFilters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::TaskDeviceFilters::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TaskDeviceFilters_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TaskDeviceFilters_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TaskDeviceFilters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TaskDeviceFilters, device_filters_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::JobDeviceFilters_TasksEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::JobDeviceFilters_TasksEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::JobDeviceFilters_TasksEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::JobDeviceFilters_TasksEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::JobDeviceFilters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::JobDeviceFilters, name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::JobDeviceFilters, tasks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ClusterDeviceFilters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ClusterDeviceFilters, jobs_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::TaskDeviceFilters)},
  { 6, 13, sizeof(::tensorflow::JobDeviceFilters_TasksEntry_DoNotUse)},
  { 15, -1, sizeof(::tensorflow::JobDeviceFilters)},
  { 22, -1, sizeof(::tensorflow::ClusterDeviceFilters)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_TaskDeviceFilters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_JobDeviceFilters_TasksEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_JobDeviceFilters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_ClusterDeviceFilters_default_instance_),
};

const char descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-tensorflow/core/protobuf/device_filter"
  "s.proto\022\ntensorflow\"+\n\021TaskDeviceFilters"
  "\022\026\n\016device_filters\030\001 \003(\t\"\245\001\n\020JobDeviceFi"
  "lters\022\014\n\004name\030\001 \001(\t\0226\n\005tasks\030\002 \003(\0132\'.ten"
  "sorflow.JobDeviceFilters.TasksEntry\032K\n\nT"
  "asksEntry\022\013\n\003key\030\001 \001(\005\022,\n\005value\030\002 \001(\0132\035."
  "tensorflow.TaskDeviceFilters:\0028\001\"B\n\024Clus"
  "terDeviceFilters\022*\n\004jobs\030\001 \003(\0132\034.tensorf"
  "low.JobDeviceFiltersB\215\001\n\032org.tensorflow."
  "distruntimeB\023DeviceFiltersProtosP\001ZUgith"
  "ub.com/tensorflow/tensorflow/tensorflow/"
  "go/core/protobuf/for_core_protos_go_prot"
  "o\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto_sccs[4] = {
  &scc_info_ClusterDeviceFilters_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto.base,
  &scc_info_JobDeviceFilters_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto.base,
  &scc_info_JobDeviceFilters_TasksEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto.base,
  &scc_info_TaskDeviceFilters_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto = {
  false, false, descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto, "tensorflow/core/protobuf/device_filters.proto", 492,
  &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto_once, descriptor_table_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto_sccs, descriptor_table_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto::offsets,
  file_level_metadata_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto, 4, file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto, file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto)), true);
namespace tensorflow {

// ===================================================================

void TaskDeviceFilters::InitAsDefaultInstance() {
}
class TaskDeviceFilters::_Internal {
 public:
};

TaskDeviceFilters::TaskDeviceFilters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  device_filters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.TaskDeviceFilters)
}
TaskDeviceFilters::TaskDeviceFilters(const TaskDeviceFilters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      device_filters_(from.device_filters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.TaskDeviceFilters)
}

void TaskDeviceFilters::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TaskDeviceFilters_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto.base);
}

TaskDeviceFilters::~TaskDeviceFilters() {
  // @@protoc_insertion_point(destructor:tensorflow.TaskDeviceFilters)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TaskDeviceFilters::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TaskDeviceFilters::ArenaDtor(void* object) {
  TaskDeviceFilters* _this = reinterpret_cast< TaskDeviceFilters* >(object);
  (void)_this;
}
void TaskDeviceFilters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskDeviceFilters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskDeviceFilters& TaskDeviceFilters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TaskDeviceFilters_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto.base);
  return *internal_default_instance();
}


void TaskDeviceFilters::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TaskDeviceFilters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_filters_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskDeviceFilters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string device_filters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_device_filters();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.TaskDeviceFilters.device_filters"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskDeviceFilters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TaskDeviceFilters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string device_filters = 1;
  for (int i = 0, n = this->_internal_device_filters_size(); i < n; i++) {
    const auto& s = this->_internal_device_filters(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TaskDeviceFilters.device_filters");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TaskDeviceFilters)
  return target;
}

size_t TaskDeviceFilters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TaskDeviceFilters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string device_filters = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(device_filters_.size());
  for (int i = 0, n = device_filters_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      device_filters_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskDeviceFilters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.TaskDeviceFilters)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskDeviceFilters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaskDeviceFilters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.TaskDeviceFilters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.TaskDeviceFilters)
    MergeFrom(*source);
  }
}

void TaskDeviceFilters::MergeFrom(const TaskDeviceFilters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TaskDeviceFilters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  device_filters_.MergeFrom(from.device_filters_);
}

void TaskDeviceFilters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.TaskDeviceFilters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskDeviceFilters::CopyFrom(const TaskDeviceFilters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TaskDeviceFilters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskDeviceFilters::IsInitialized() const {
  return true;
}

void TaskDeviceFilters::InternalSwap(TaskDeviceFilters* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_filters_.InternalSwap(&other->device_filters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskDeviceFilters::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

JobDeviceFilters_TasksEntry_DoNotUse::JobDeviceFilters_TasksEntry_DoNotUse() {}
JobDeviceFilters_TasksEntry_DoNotUse::JobDeviceFilters_TasksEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void JobDeviceFilters_TasksEntry_DoNotUse::MergeFrom(const JobDeviceFilters_TasksEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata JobDeviceFilters_TasksEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void JobDeviceFilters_TasksEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void JobDeviceFilters::InitAsDefaultInstance() {
}
class JobDeviceFilters::_Internal {
 public:
};

JobDeviceFilters::JobDeviceFilters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tasks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.JobDeviceFilters)
}
JobDeviceFilters::JobDeviceFilters(const JobDeviceFilters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tasks_.MergeFrom(from.tasks_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.JobDeviceFilters)
}

void JobDeviceFilters::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JobDeviceFilters_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

JobDeviceFilters::~JobDeviceFilters() {
  // @@protoc_insertion_point(destructor:tensorflow.JobDeviceFilters)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JobDeviceFilters::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void JobDeviceFilters::ArenaDtor(void* object) {
  JobDeviceFilters* _this = reinterpret_cast< JobDeviceFilters* >(object);
  (void)_this;
}
void JobDeviceFilters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JobDeviceFilters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobDeviceFilters& JobDeviceFilters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JobDeviceFilters_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto.base);
  return *internal_default_instance();
}


void JobDeviceFilters::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.JobDeviceFilters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tasks_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JobDeviceFilters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.JobDeviceFilters.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, .tensorflow.TaskDeviceFilters> tasks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&tasks_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JobDeviceFilters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.JobDeviceFilters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.JobDeviceFilters.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // map<int32, .tensorflow.TaskDeviceFilters> tasks = 2;
  if (!this->_internal_tasks().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::tensorflow::TaskDeviceFilters >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_tasks().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_tasks().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::tensorflow::TaskDeviceFilters >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::tensorflow::TaskDeviceFilters >::const_iterator
          it = this->_internal_tasks().begin();
          it != this->_internal_tasks().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = JobDeviceFilters_TasksEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::tensorflow::TaskDeviceFilters >::const_iterator
          it = this->_internal_tasks().begin();
          it != this->_internal_tasks().end(); ++it) {
        target = JobDeviceFilters_TasksEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.JobDeviceFilters)
  return target;
}

size_t JobDeviceFilters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.JobDeviceFilters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .tensorflow.TaskDeviceFilters> tasks = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tasks_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::tensorflow::TaskDeviceFilters >::const_iterator
      it = this->_internal_tasks().begin();
      it != this->_internal_tasks().end(); ++it) {
    total_size += JobDeviceFilters_TasksEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobDeviceFilters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.JobDeviceFilters)
  GOOGLE_DCHECK_NE(&from, this);
  const JobDeviceFilters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JobDeviceFilters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.JobDeviceFilters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.JobDeviceFilters)
    MergeFrom(*source);
  }
}

void JobDeviceFilters::MergeFrom(const JobDeviceFilters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.JobDeviceFilters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tasks_.MergeFrom(from.tasks_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void JobDeviceFilters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.JobDeviceFilters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobDeviceFilters::CopyFrom(const JobDeviceFilters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.JobDeviceFilters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobDeviceFilters::IsInitialized() const {
  return true;
}

void JobDeviceFilters::InternalSwap(JobDeviceFilters* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tasks_.Swap(&other->tasks_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata JobDeviceFilters::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClusterDeviceFilters::InitAsDefaultInstance() {
}
class ClusterDeviceFilters::_Internal {
 public:
};

ClusterDeviceFilters::ClusterDeviceFilters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  jobs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ClusterDeviceFilters)
}
ClusterDeviceFilters::ClusterDeviceFilters(const ClusterDeviceFilters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      jobs_(from.jobs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.ClusterDeviceFilters)
}

void ClusterDeviceFilters::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClusterDeviceFilters_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto.base);
}

ClusterDeviceFilters::~ClusterDeviceFilters() {
  // @@protoc_insertion_point(destructor:tensorflow.ClusterDeviceFilters)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClusterDeviceFilters::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ClusterDeviceFilters::ArenaDtor(void* object) {
  ClusterDeviceFilters* _this = reinterpret_cast< ClusterDeviceFilters* >(object);
  (void)_this;
}
void ClusterDeviceFilters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClusterDeviceFilters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClusterDeviceFilters& ClusterDeviceFilters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClusterDeviceFilters_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto.base);
  return *internal_default_instance();
}


void ClusterDeviceFilters::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ClusterDeviceFilters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  jobs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClusterDeviceFilters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tensorflow.JobDeviceFilters jobs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_jobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClusterDeviceFilters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ClusterDeviceFilters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.JobDeviceFilters jobs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_jobs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_jobs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ClusterDeviceFilters)
  return target;
}

size_t ClusterDeviceFilters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ClusterDeviceFilters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.JobDeviceFilters jobs = 1;
  total_size += 1UL * this->_internal_jobs_size();
  for (const auto& msg : this->jobs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClusterDeviceFilters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ClusterDeviceFilters)
  GOOGLE_DCHECK_NE(&from, this);
  const ClusterDeviceFilters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClusterDeviceFilters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ClusterDeviceFilters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ClusterDeviceFilters)
    MergeFrom(*source);
  }
}

void ClusterDeviceFilters::MergeFrom(const ClusterDeviceFilters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ClusterDeviceFilters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  jobs_.MergeFrom(from.jobs_);
}

void ClusterDeviceFilters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ClusterDeviceFilters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterDeviceFilters::CopyFrom(const ClusterDeviceFilters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ClusterDeviceFilters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterDeviceFilters::IsInitialized() const {
  return true;
}

void ClusterDeviceFilters::InternalSwap(ClusterDeviceFilters* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  jobs_.InternalSwap(&other->jobs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClusterDeviceFilters::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::TaskDeviceFilters* Arena::CreateMaybeMessage< ::tensorflow::TaskDeviceFilters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::TaskDeviceFilters >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::JobDeviceFilters_TasksEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::JobDeviceFilters_TasksEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::JobDeviceFilters_TasksEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::JobDeviceFilters* Arena::CreateMaybeMessage< ::tensorflow::JobDeviceFilters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::JobDeviceFilters >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::ClusterDeviceFilters* Arena::CreateMaybeMessage< ::tensorflow::ClusterDeviceFilters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::ClusterDeviceFilters >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
