// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/control_flow.proto

#include "tensorflow/core/protobuf/control_flow.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CondContextDef_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ValuesDef_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ValuesDef_ExternalValuesEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto;
namespace tensorflow {
class ValuesDef_ExternalValuesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValuesDef_ExternalValuesEntry_DoNotUse> _instance;
} _ValuesDef_ExternalValuesEntry_DoNotUse_default_instance_;
class ValuesDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValuesDef> _instance;
} _ValuesDef_default_instance_;
class ControlFlowContextDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ControlFlowContextDef> _instance;
  const ::tensorflow::CondContextDef* cond_ctxt_;
  const ::tensorflow::WhileContextDef* while_ctxt_;
} _ControlFlowContextDef_default_instance_;
class CondContextDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CondContextDef> _instance;
} _CondContextDef_default_instance_;
class WhileContextDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WhileContextDef> _instance;
} _WhileContextDef_default_instance_;
}  // namespace tensorflow
static void InitDefaultsscc_info_CondContextDef_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_ControlFlowContextDef_default_instance_;
    new (ptr) ::tensorflow::ControlFlowContextDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::tensorflow::_CondContextDef_default_instance_;
    new (ptr) ::tensorflow::CondContextDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::tensorflow::_WhileContextDef_default_instance_;
    new (ptr) ::tensorflow::WhileContextDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::ControlFlowContextDef::InitAsDefaultInstance();
  ::tensorflow::CondContextDef::InitAsDefaultInstance();
  ::tensorflow::WhileContextDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CondContextDef_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CondContextDef_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto}, {
      &scc_info_ValuesDef_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto.base,}};

static void InitDefaultsscc_info_ValuesDef_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_ValuesDef_default_instance_;
    new (ptr) ::tensorflow::ValuesDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::ValuesDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ValuesDef_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ValuesDef_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto}, {
      &scc_info_ValuesDef_ExternalValuesEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto.base,}};

static void InitDefaultsscc_info_ValuesDef_ExternalValuesEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_ValuesDef_ExternalValuesEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::ValuesDef_ExternalValuesEntry_DoNotUse();
  }
  ::tensorflow::ValuesDef_ExternalValuesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ValuesDef_ExternalValuesEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ValuesDef_ExternalValuesEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::tensorflow::ValuesDef_ExternalValuesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ValuesDef_ExternalValuesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ValuesDef_ExternalValuesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ValuesDef_ExternalValuesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ValuesDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ValuesDef, values_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ValuesDef, external_values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ControlFlowContextDef, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ControlFlowContextDef, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::tensorflow::ControlFlowContextDefDefaultTypeInternal, cond_ctxt_),
  offsetof(::tensorflow::ControlFlowContextDefDefaultTypeInternal, while_ctxt_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ControlFlowContextDef, ctxt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CondContextDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CondContextDef, context_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CondContextDef, pred_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CondContextDef, pivot_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CondContextDef, branch_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CondContextDef, values_def_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CondContextDef, nested_contexts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::WhileContextDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::WhileContextDef, context_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::WhileContextDef, parallel_iterations_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::WhileContextDef, back_prop_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::WhileContextDef, swap_memory_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::WhileContextDef, pivot_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::WhileContextDef, pivot_for_pred_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::WhileContextDef, pivot_for_body_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::WhileContextDef, loop_exit_names_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::WhileContextDef, loop_enter_names_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::WhileContextDef, values_def_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::WhileContextDef, maximum_iterations_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::WhileContextDef, nested_contexts_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::tensorflow::ValuesDef_ExternalValuesEntry_DoNotUse)},
  { 9, -1, sizeof(::tensorflow::ValuesDef)},
  { 16, -1, sizeof(::tensorflow::ControlFlowContextDef)},
  { 24, -1, sizeof(::tensorflow::CondContextDef)},
  { 35, -1, sizeof(::tensorflow::WhileContextDef)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_ValuesDef_ExternalValuesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_ValuesDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_ControlFlowContextDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_CondContextDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_WhileContextDef_default_instance_),
};

const char descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+tensorflow/core/protobuf/control_flow."
  "proto\022\ntensorflow\"\226\001\n\tValuesDef\022\016\n\006value"
  "s\030\001 \003(\t\022B\n\017external_values\030\002 \003(\0132).tenso"
  "rflow.ValuesDef.ExternalValuesEntry\0325\n\023E"
  "xternalValuesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
  "\030\002 \001(\t:\0028\001\"\203\001\n\025ControlFlowContextDef\022/\n\t"
  "cond_ctxt\030\001 \001(\0132\032.tensorflow.CondContext"
  "DefH\000\0221\n\nwhile_ctxt\030\002 \001(\0132\033.tensorflow.W"
  "hileContextDefH\000B\006\n\004ctxt\"\304\001\n\016CondContext"
  "Def\022\024\n\014context_name\030\001 \001(\t\022\021\n\tpred_name\030\002"
  " \001(\t\022\022\n\npivot_name\030\003 \001(\t\022\016\n\006branch\030\004 \001(\005"
  "\022)\n\nvalues_def\030\005 \001(\0132\025.tensorflow.Values"
  "Def\022:\n\017nested_contexts\030\006 \003(\0132!.tensorflo"
  "w.ControlFlowContextDef\"\365\002\n\017WhileContext"
  "Def\022\024\n\014context_name\030\001 \001(\t\022\033\n\023parallel_it"
  "erations\030\002 \001(\005\022\021\n\tback_prop\030\003 \001(\010\022\023\n\013swa"
  "p_memory\030\004 \001(\010\022\022\n\npivot_name\030\005 \001(\t\022\033\n\023pi"
  "vot_for_pred_name\030\006 \001(\t\022\033\n\023pivot_for_bod"
  "y_name\030\007 \001(\t\022\027\n\017loop_exit_names\030\010 \003(\t\022\030\n"
  "\020loop_enter_names\030\n \003(\t\022)\n\nvalues_def\030\t "
  "\001(\0132\025.tensorflow.ValuesDef\022\037\n\027maximum_it"
  "erations_name\030\013 \001(\t\022:\n\017nested_contexts\030\014"
  " \003(\0132!.tensorflow.ControlFlowContextDefB"
  "|\n\030org.tensorflow.frameworkB\021ControlFlow"
  "ProtosP\001ZHgithub.com/tensorflow/tensorfl"
  "ow/tensorflow/go/core/core_protos_go_pro"
  "to\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto_sccs[3] = {
  &scc_info_CondContextDef_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto.base,
  &scc_info_ValuesDef_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto.base,
  &scc_info_ValuesDef_ExternalValuesEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto = {
  false, false, descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto, "tensorflow/core/protobuf/control_flow.proto", 1053,
  &descriptor_table_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto_once, descriptor_table_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto_sccs, descriptor_table_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto::offsets,
  file_level_metadata_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto, 5, file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto, file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto)), true);
namespace tensorflow {

// ===================================================================

ValuesDef_ExternalValuesEntry_DoNotUse::ValuesDef_ExternalValuesEntry_DoNotUse() {}
ValuesDef_ExternalValuesEntry_DoNotUse::ValuesDef_ExternalValuesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ValuesDef_ExternalValuesEntry_DoNotUse::MergeFrom(const ValuesDef_ExternalValuesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ValuesDef_ExternalValuesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ValuesDef_ExternalValuesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ValuesDef::InitAsDefaultInstance() {
}
class ValuesDef::_Internal {
 public:
};

ValuesDef::ValuesDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena),
  external_values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ValuesDef)
}
ValuesDef::ValuesDef(const ValuesDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  external_values_.MergeFrom(from.external_values_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.ValuesDef)
}

void ValuesDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ValuesDef_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto.base);
}

ValuesDef::~ValuesDef() {
  // @@protoc_insertion_point(destructor:tensorflow.ValuesDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ValuesDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ValuesDef::ArenaDtor(void* object) {
  ValuesDef* _this = reinterpret_cast< ValuesDef* >(object);
  (void)_this;
}
void ValuesDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValuesDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValuesDef& ValuesDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValuesDef_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto.base);
  return *internal_default_instance();
}


void ValuesDef::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ValuesDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  external_values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValuesDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_values();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.ValuesDef.values"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> external_values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&external_values_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValuesDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ValuesDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string values = 1;
  for (int i = 0, n = this->_internal_values_size(); i < n; i++) {
    const auto& s = this->_internal_values(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ValuesDef.values");
    target = stream->WriteString(1, s, target);
  }

  // map<string, string> external_values = 2;
  if (!this->_internal_external_values().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.ValuesDef.ExternalValuesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.ValuesDef.ExternalValuesEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_external_values().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_external_values().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_external_values().begin();
          it != this->_internal_external_values().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ValuesDef_ExternalValuesEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_external_values().begin();
          it != this->_internal_external_values().end(); ++it) {
        target = ValuesDef_ExternalValuesEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ValuesDef)
  return target;
}

size_t ValuesDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ValuesDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string values = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(values_.size());
  for (int i = 0, n = values_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      values_.Get(i));
  }

  // map<string, string> external_values = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_external_values_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_external_values().begin();
      it != this->_internal_external_values().end(); ++it) {
    total_size += ValuesDef_ExternalValuesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValuesDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ValuesDef)
  GOOGLE_DCHECK_NE(&from, this);
  const ValuesDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValuesDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ValuesDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ValuesDef)
    MergeFrom(*source);
  }
}

void ValuesDef::MergeFrom(const ValuesDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ValuesDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  external_values_.MergeFrom(from.external_values_);
}

void ValuesDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ValuesDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValuesDef::CopyFrom(const ValuesDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ValuesDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValuesDef::IsInitialized() const {
  return true;
}

void ValuesDef::InternalSwap(ValuesDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  external_values_.Swap(&other->external_values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValuesDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ControlFlowContextDef::InitAsDefaultInstance() {
  ::tensorflow::_ControlFlowContextDef_default_instance_.cond_ctxt_ = const_cast< ::tensorflow::CondContextDef*>(
      ::tensorflow::CondContextDef::internal_default_instance());
  ::tensorflow::_ControlFlowContextDef_default_instance_.while_ctxt_ = const_cast< ::tensorflow::WhileContextDef*>(
      ::tensorflow::WhileContextDef::internal_default_instance());
}
class ControlFlowContextDef::_Internal {
 public:
  static const ::tensorflow::CondContextDef& cond_ctxt(const ControlFlowContextDef* msg);
  static const ::tensorflow::WhileContextDef& while_ctxt(const ControlFlowContextDef* msg);
};

const ::tensorflow::CondContextDef&
ControlFlowContextDef::_Internal::cond_ctxt(const ControlFlowContextDef* msg) {
  return *msg->ctxt_.cond_ctxt_;
}
const ::tensorflow::WhileContextDef&
ControlFlowContextDef::_Internal::while_ctxt(const ControlFlowContextDef* msg) {
  return *msg->ctxt_.while_ctxt_;
}
void ControlFlowContextDef::set_allocated_cond_ctxt(::tensorflow::CondContextDef* cond_ctxt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ctxt();
  if (cond_ctxt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cond_ctxt);
    if (message_arena != submessage_arena) {
      cond_ctxt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cond_ctxt, submessage_arena);
    }
    set_has_cond_ctxt();
    ctxt_.cond_ctxt_ = cond_ctxt;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ControlFlowContextDef.cond_ctxt)
}
void ControlFlowContextDef::set_allocated_while_ctxt(::tensorflow::WhileContextDef* while_ctxt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ctxt();
  if (while_ctxt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(while_ctxt);
    if (message_arena != submessage_arena) {
      while_ctxt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, while_ctxt, submessage_arena);
    }
    set_has_while_ctxt();
    ctxt_.while_ctxt_ = while_ctxt;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ControlFlowContextDef.while_ctxt)
}
ControlFlowContextDef::ControlFlowContextDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ControlFlowContextDef)
}
ControlFlowContextDef::ControlFlowContextDef(const ControlFlowContextDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_ctxt();
  switch (from.ctxt_case()) {
    case kCondCtxt: {
      _internal_mutable_cond_ctxt()->::tensorflow::CondContextDef::MergeFrom(from._internal_cond_ctxt());
      break;
    }
    case kWhileCtxt: {
      _internal_mutable_while_ctxt()->::tensorflow::WhileContextDef::MergeFrom(from._internal_while_ctxt());
      break;
    }
    case CTXT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.ControlFlowContextDef)
}

void ControlFlowContextDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CondContextDef_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto.base);
  clear_has_ctxt();
}

ControlFlowContextDef::~ControlFlowContextDef() {
  // @@protoc_insertion_point(destructor:tensorflow.ControlFlowContextDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControlFlowContextDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_ctxt()) {
    clear_ctxt();
  }
}

void ControlFlowContextDef::ArenaDtor(void* object) {
  ControlFlowContextDef* _this = reinterpret_cast< ControlFlowContextDef* >(object);
  (void)_this;
}
void ControlFlowContextDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlFlowContextDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ControlFlowContextDef& ControlFlowContextDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CondContextDef_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto.base);
  return *internal_default_instance();
}


void ControlFlowContextDef::clear_ctxt() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.ControlFlowContextDef)
  switch (ctxt_case()) {
    case kCondCtxt: {
      if (GetArena() == nullptr) {
        delete ctxt_.cond_ctxt_;
      }
      break;
    }
    case kWhileCtxt: {
      if (GetArena() == nullptr) {
        delete ctxt_.while_ctxt_;
      }
      break;
    }
    case CTXT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CTXT_NOT_SET;
}


void ControlFlowContextDef::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ControlFlowContextDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_ctxt();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlFlowContextDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.CondContextDef cond_ctxt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cond_ctxt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.WhileContextDef while_ctxt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_while_ctxt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlFlowContextDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ControlFlowContextDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.CondContextDef cond_ctxt = 1;
  if (_internal_has_cond_ctxt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cond_ctxt(this), target, stream);
  }

  // .tensorflow.WhileContextDef while_ctxt = 2;
  if (_internal_has_while_ctxt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::while_ctxt(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ControlFlowContextDef)
  return target;
}

size_t ControlFlowContextDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ControlFlowContextDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (ctxt_case()) {
    // .tensorflow.CondContextDef cond_ctxt = 1;
    case kCondCtxt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ctxt_.cond_ctxt_);
      break;
    }
    // .tensorflow.WhileContextDef while_ctxt = 2;
    case kWhileCtxt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ctxt_.while_ctxt_);
      break;
    }
    case CTXT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlFlowContextDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ControlFlowContextDef)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlFlowContextDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControlFlowContextDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ControlFlowContextDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ControlFlowContextDef)
    MergeFrom(*source);
  }
}

void ControlFlowContextDef::MergeFrom(const ControlFlowContextDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ControlFlowContextDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.ctxt_case()) {
    case kCondCtxt: {
      _internal_mutable_cond_ctxt()->::tensorflow::CondContextDef::MergeFrom(from._internal_cond_ctxt());
      break;
    }
    case kWhileCtxt: {
      _internal_mutable_while_ctxt()->::tensorflow::WhileContextDef::MergeFrom(from._internal_while_ctxt());
      break;
    }
    case CTXT_NOT_SET: {
      break;
    }
  }
}

void ControlFlowContextDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ControlFlowContextDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlFlowContextDef::CopyFrom(const ControlFlowContextDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ControlFlowContextDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlFlowContextDef::IsInitialized() const {
  return true;
}

void ControlFlowContextDef::InternalSwap(ControlFlowContextDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(ctxt_, other->ctxt_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlFlowContextDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CondContextDef::InitAsDefaultInstance() {
  ::tensorflow::_CondContextDef_default_instance_._instance.get_mutable()->values_def_ = const_cast< ::tensorflow::ValuesDef*>(
      ::tensorflow::ValuesDef::internal_default_instance());
}
class CondContextDef::_Internal {
 public:
  static const ::tensorflow::ValuesDef& values_def(const CondContextDef* msg);
};

const ::tensorflow::ValuesDef&
CondContextDef::_Internal::values_def(const CondContextDef* msg) {
  return *msg->values_def_;
}
CondContextDef::CondContextDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  nested_contexts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CondContextDef)
}
CondContextDef::CondContextDef(const CondContextDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nested_contexts_(from.nested_contexts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  context_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_context_name().empty()) {
    context_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_context_name(),
      GetArena());
  }
  pred_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pred_name().empty()) {
    pred_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pred_name(),
      GetArena());
  }
  pivot_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pivot_name().empty()) {
    pivot_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pivot_name(),
      GetArena());
  }
  if (from._internal_has_values_def()) {
    values_def_ = new ::tensorflow::ValuesDef(*from.values_def_);
  } else {
    values_def_ = nullptr;
  }
  branch_ = from.branch_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.CondContextDef)
}

void CondContextDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CondContextDef_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto.base);
  context_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pred_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pivot_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&values_def_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&branch_) -
      reinterpret_cast<char*>(&values_def_)) + sizeof(branch_));
}

CondContextDef::~CondContextDef() {
  // @@protoc_insertion_point(destructor:tensorflow.CondContextDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CondContextDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  context_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pred_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pivot_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete values_def_;
}

void CondContextDef::ArenaDtor(void* object) {
  CondContextDef* _this = reinterpret_cast< CondContextDef* >(object);
  (void)_this;
}
void CondContextDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CondContextDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CondContextDef& CondContextDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CondContextDef_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto.base);
  return *internal_default_instance();
}


void CondContextDef::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CondContextDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nested_contexts_.Clear();
  context_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pred_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pivot_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && values_def_ != nullptr) {
    delete values_def_;
  }
  values_def_ = nullptr;
  branch_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CondContextDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string context_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_context_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.CondContextDef.context_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pred_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pred_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.CondContextDef.pred_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pivot_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_pivot_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.CondContextDef.pivot_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 branch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          branch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.ValuesDef values_def = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_values_def(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.ControlFlowContextDef nested_contexts = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nested_contexts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CondContextDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CondContextDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string context_name = 1;
  if (this->context_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_context_name().data(), static_cast<int>(this->_internal_context_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CondContextDef.context_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_context_name(), target);
  }

  // string pred_name = 2;
  if (this->pred_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pred_name().data(), static_cast<int>(this->_internal_pred_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CondContextDef.pred_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pred_name(), target);
  }

  // string pivot_name = 3;
  if (this->pivot_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pivot_name().data(), static_cast<int>(this->_internal_pivot_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CondContextDef.pivot_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pivot_name(), target);
  }

  // int32 branch = 4;
  if (this->branch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_branch(), target);
  }

  // .tensorflow.ValuesDef values_def = 5;
  if (this->has_values_def()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::values_def(this), target, stream);
  }

  // repeated .tensorflow.ControlFlowContextDef nested_contexts = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nested_contexts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_nested_contexts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CondContextDef)
  return target;
}

size_t CondContextDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CondContextDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.ControlFlowContextDef nested_contexts = 6;
  total_size += 1UL * this->_internal_nested_contexts_size();
  for (const auto& msg : this->nested_contexts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string context_name = 1;
  if (this->context_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_context_name());
  }

  // string pred_name = 2;
  if (this->pred_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pred_name());
  }

  // string pivot_name = 3;
  if (this->pivot_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pivot_name());
  }

  // .tensorflow.ValuesDef values_def = 5;
  if (this->has_values_def()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *values_def_);
  }

  // int32 branch = 4;
  if (this->branch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_branch());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CondContextDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CondContextDef)
  GOOGLE_DCHECK_NE(&from, this);
  const CondContextDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CondContextDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CondContextDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CondContextDef)
    MergeFrom(*source);
  }
}

void CondContextDef::MergeFrom(const CondContextDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CondContextDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nested_contexts_.MergeFrom(from.nested_contexts_);
  if (from.context_name().size() > 0) {
    _internal_set_context_name(from._internal_context_name());
  }
  if (from.pred_name().size() > 0) {
    _internal_set_pred_name(from._internal_pred_name());
  }
  if (from.pivot_name().size() > 0) {
    _internal_set_pivot_name(from._internal_pivot_name());
  }
  if (from.has_values_def()) {
    _internal_mutable_values_def()->::tensorflow::ValuesDef::MergeFrom(from._internal_values_def());
  }
  if (from.branch() != 0) {
    _internal_set_branch(from._internal_branch());
  }
}

void CondContextDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CondContextDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CondContextDef::CopyFrom(const CondContextDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CondContextDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CondContextDef::IsInitialized() const {
  return true;
}

void CondContextDef::InternalSwap(CondContextDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nested_contexts_.InternalSwap(&other->nested_contexts_);
  context_name_.Swap(&other->context_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pred_name_.Swap(&other->pred_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pivot_name_.Swap(&other->pivot_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CondContextDef, branch_)
      + sizeof(CondContextDef::branch_)
      - PROTOBUF_FIELD_OFFSET(CondContextDef, values_def_)>(
          reinterpret_cast<char*>(&values_def_),
          reinterpret_cast<char*>(&other->values_def_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CondContextDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WhileContextDef::InitAsDefaultInstance() {
  ::tensorflow::_WhileContextDef_default_instance_._instance.get_mutable()->values_def_ = const_cast< ::tensorflow::ValuesDef*>(
      ::tensorflow::ValuesDef::internal_default_instance());
}
class WhileContextDef::_Internal {
 public:
  static const ::tensorflow::ValuesDef& values_def(const WhileContextDef* msg);
};

const ::tensorflow::ValuesDef&
WhileContextDef::_Internal::values_def(const WhileContextDef* msg) {
  return *msg->values_def_;
}
WhileContextDef::WhileContextDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  loop_exit_names_(arena),
  loop_enter_names_(arena),
  nested_contexts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.WhileContextDef)
}
WhileContextDef::WhileContextDef(const WhileContextDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      loop_exit_names_(from.loop_exit_names_),
      loop_enter_names_(from.loop_enter_names_),
      nested_contexts_(from.nested_contexts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  context_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_context_name().empty()) {
    context_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_context_name(),
      GetArena());
  }
  pivot_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pivot_name().empty()) {
    pivot_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pivot_name(),
      GetArena());
  }
  pivot_for_pred_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pivot_for_pred_name().empty()) {
    pivot_for_pred_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pivot_for_pred_name(),
      GetArena());
  }
  pivot_for_body_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pivot_for_body_name().empty()) {
    pivot_for_body_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pivot_for_body_name(),
      GetArena());
  }
  maximum_iterations_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_maximum_iterations_name().empty()) {
    maximum_iterations_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_maximum_iterations_name(),
      GetArena());
  }
  if (from._internal_has_values_def()) {
    values_def_ = new ::tensorflow::ValuesDef(*from.values_def_);
  } else {
    values_def_ = nullptr;
  }
  ::memcpy(&parallel_iterations_, &from.parallel_iterations_,
    static_cast<size_t>(reinterpret_cast<char*>(&swap_memory_) -
    reinterpret_cast<char*>(&parallel_iterations_)) + sizeof(swap_memory_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.WhileContextDef)
}

void WhileContextDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CondContextDef_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto.base);
  context_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pivot_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pivot_for_pred_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pivot_for_body_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maximum_iterations_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&values_def_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&swap_memory_) -
      reinterpret_cast<char*>(&values_def_)) + sizeof(swap_memory_));
}

WhileContextDef::~WhileContextDef() {
  // @@protoc_insertion_point(destructor:tensorflow.WhileContextDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WhileContextDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  context_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pivot_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pivot_for_pred_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pivot_for_body_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maximum_iterations_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete values_def_;
}

void WhileContextDef::ArenaDtor(void* object) {
  WhileContextDef* _this = reinterpret_cast< WhileContextDef* >(object);
  (void)_this;
}
void WhileContextDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WhileContextDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WhileContextDef& WhileContextDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CondContextDef_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto.base);
  return *internal_default_instance();
}


void WhileContextDef::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.WhileContextDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  loop_exit_names_.Clear();
  loop_enter_names_.Clear();
  nested_contexts_.Clear();
  context_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pivot_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pivot_for_pred_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pivot_for_body_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  maximum_iterations_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && values_def_ != nullptr) {
    delete values_def_;
  }
  values_def_ = nullptr;
  ::memset(&parallel_iterations_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&swap_memory_) -
      reinterpret_cast<char*>(&parallel_iterations_)) + sizeof(swap_memory_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WhileContextDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string context_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_context_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.WhileContextDef.context_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 parallel_iterations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          parallel_iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool back_prop = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          back_prop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool swap_memory = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          swap_memory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pivot_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_pivot_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.WhileContextDef.pivot_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pivot_for_pred_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_pivot_for_pred_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.WhileContextDef.pivot_for_pred_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pivot_for_body_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_pivot_for_body_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.WhileContextDef.pivot_for_body_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string loop_exit_names = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_loop_exit_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.WhileContextDef.loop_exit_names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // .tensorflow.ValuesDef values_def = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_values_def(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string loop_enter_names = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_loop_enter_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.WhileContextDef.loop_enter_names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // string maximum_iterations_name = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_maximum_iterations_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.WhileContextDef.maximum_iterations_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.ControlFlowContextDef nested_contexts = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nested_contexts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WhileContextDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.WhileContextDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string context_name = 1;
  if (this->context_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_context_name().data(), static_cast<int>(this->_internal_context_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.WhileContextDef.context_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_context_name(), target);
  }

  // int32 parallel_iterations = 2;
  if (this->parallel_iterations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_parallel_iterations(), target);
  }

  // bool back_prop = 3;
  if (this->back_prop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_back_prop(), target);
  }

  // bool swap_memory = 4;
  if (this->swap_memory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_swap_memory(), target);
  }

  // string pivot_name = 5;
  if (this->pivot_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pivot_name().data(), static_cast<int>(this->_internal_pivot_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.WhileContextDef.pivot_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_pivot_name(), target);
  }

  // string pivot_for_pred_name = 6;
  if (this->pivot_for_pred_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pivot_for_pred_name().data(), static_cast<int>(this->_internal_pivot_for_pred_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.WhileContextDef.pivot_for_pred_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_pivot_for_pred_name(), target);
  }

  // string pivot_for_body_name = 7;
  if (this->pivot_for_body_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pivot_for_body_name().data(), static_cast<int>(this->_internal_pivot_for_body_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.WhileContextDef.pivot_for_body_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_pivot_for_body_name(), target);
  }

  // repeated string loop_exit_names = 8;
  for (int i = 0, n = this->_internal_loop_exit_names_size(); i < n; i++) {
    const auto& s = this->_internal_loop_exit_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.WhileContextDef.loop_exit_names");
    target = stream->WriteString(8, s, target);
  }

  // .tensorflow.ValuesDef values_def = 9;
  if (this->has_values_def()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::values_def(this), target, stream);
  }

  // repeated string loop_enter_names = 10;
  for (int i = 0, n = this->_internal_loop_enter_names_size(); i < n; i++) {
    const auto& s = this->_internal_loop_enter_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.WhileContextDef.loop_enter_names");
    target = stream->WriteString(10, s, target);
  }

  // string maximum_iterations_name = 11;
  if (this->maximum_iterations_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_maximum_iterations_name().data(), static_cast<int>(this->_internal_maximum_iterations_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.WhileContextDef.maximum_iterations_name");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_maximum_iterations_name(), target);
  }

  // repeated .tensorflow.ControlFlowContextDef nested_contexts = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nested_contexts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_nested_contexts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.WhileContextDef)
  return target;
}

size_t WhileContextDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.WhileContextDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string loop_exit_names = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(loop_exit_names_.size());
  for (int i = 0, n = loop_exit_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      loop_exit_names_.Get(i));
  }

  // repeated string loop_enter_names = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(loop_enter_names_.size());
  for (int i = 0, n = loop_enter_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      loop_enter_names_.Get(i));
  }

  // repeated .tensorflow.ControlFlowContextDef nested_contexts = 12;
  total_size += 1UL * this->_internal_nested_contexts_size();
  for (const auto& msg : this->nested_contexts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string context_name = 1;
  if (this->context_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_context_name());
  }

  // string pivot_name = 5;
  if (this->pivot_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pivot_name());
  }

  // string pivot_for_pred_name = 6;
  if (this->pivot_for_pred_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pivot_for_pred_name());
  }

  // string pivot_for_body_name = 7;
  if (this->pivot_for_body_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pivot_for_body_name());
  }

  // string maximum_iterations_name = 11;
  if (this->maximum_iterations_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_maximum_iterations_name());
  }

  // .tensorflow.ValuesDef values_def = 9;
  if (this->has_values_def()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *values_def_);
  }

  // int32 parallel_iterations = 2;
  if (this->parallel_iterations() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_parallel_iterations());
  }

  // bool back_prop = 3;
  if (this->back_prop() != 0) {
    total_size += 1 + 1;
  }

  // bool swap_memory = 4;
  if (this->swap_memory() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WhileContextDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.WhileContextDef)
  GOOGLE_DCHECK_NE(&from, this);
  const WhileContextDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WhileContextDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.WhileContextDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.WhileContextDef)
    MergeFrom(*source);
  }
}

void WhileContextDef::MergeFrom(const WhileContextDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.WhileContextDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  loop_exit_names_.MergeFrom(from.loop_exit_names_);
  loop_enter_names_.MergeFrom(from.loop_enter_names_);
  nested_contexts_.MergeFrom(from.nested_contexts_);
  if (from.context_name().size() > 0) {
    _internal_set_context_name(from._internal_context_name());
  }
  if (from.pivot_name().size() > 0) {
    _internal_set_pivot_name(from._internal_pivot_name());
  }
  if (from.pivot_for_pred_name().size() > 0) {
    _internal_set_pivot_for_pred_name(from._internal_pivot_for_pred_name());
  }
  if (from.pivot_for_body_name().size() > 0) {
    _internal_set_pivot_for_body_name(from._internal_pivot_for_body_name());
  }
  if (from.maximum_iterations_name().size() > 0) {
    _internal_set_maximum_iterations_name(from._internal_maximum_iterations_name());
  }
  if (from.has_values_def()) {
    _internal_mutable_values_def()->::tensorflow::ValuesDef::MergeFrom(from._internal_values_def());
  }
  if (from.parallel_iterations() != 0) {
    _internal_set_parallel_iterations(from._internal_parallel_iterations());
  }
  if (from.back_prop() != 0) {
    _internal_set_back_prop(from._internal_back_prop());
  }
  if (from.swap_memory() != 0) {
    _internal_set_swap_memory(from._internal_swap_memory());
  }
}

void WhileContextDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.WhileContextDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WhileContextDef::CopyFrom(const WhileContextDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.WhileContextDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhileContextDef::IsInitialized() const {
  return true;
}

void WhileContextDef::InternalSwap(WhileContextDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  loop_exit_names_.InternalSwap(&other->loop_exit_names_);
  loop_enter_names_.InternalSwap(&other->loop_enter_names_);
  nested_contexts_.InternalSwap(&other->nested_contexts_);
  context_name_.Swap(&other->context_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pivot_name_.Swap(&other->pivot_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pivot_for_pred_name_.Swap(&other->pivot_for_pred_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pivot_for_body_name_.Swap(&other->pivot_for_body_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  maximum_iterations_name_.Swap(&other->maximum_iterations_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WhileContextDef, swap_memory_)
      + sizeof(WhileContextDef::swap_memory_)
      - PROTOBUF_FIELD_OFFSET(WhileContextDef, values_def_)>(
          reinterpret_cast<char*>(&values_def_),
          reinterpret_cast<char*>(&other->values_def_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WhileContextDef::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::ValuesDef_ExternalValuesEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::ValuesDef_ExternalValuesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::ValuesDef_ExternalValuesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::ValuesDef* Arena::CreateMaybeMessage< ::tensorflow::ValuesDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::ValuesDef >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::ControlFlowContextDef* Arena::CreateMaybeMessage< ::tensorflow::ControlFlowContextDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::ControlFlowContextDef >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::CondContextDef* Arena::CreateMaybeMessage< ::tensorflow::CondContextDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CondContextDef >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::WhileContextDef* Arena::CreateMaybeMessage< ::tensorflow::WhileContextDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::WhileContextDef >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
