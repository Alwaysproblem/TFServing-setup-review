// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/replay_log.proto

#include "tensorflow/core/protobuf/replay_log.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CloseSessionRequest_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CloseSessionResponse_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CreateSessionRequest_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateSessionResponse_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExtendSessionRequest_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExtendSessionResponse_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListDevicesRequest_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListDevicesResponse_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MakeCallableRequest_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MakeCallableResponse_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NewReplaySession_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PartialRunSetupRequest_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PartialRunSetupResponse_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReleaseCallableRequest_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReleaseCallableResponse_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResetRequest_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResetResponse_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RunCallableRequest_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RunCallableResponse_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RunStepRequest_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RunStepResponse_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto;
namespace tensorflow {
class NewReplaySessionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewReplaySession> _instance;
} _NewReplaySession_default_instance_;
class ReplayOpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplayOp> _instance;
  const ::tensorflow::CreateSessionRequest* create_session_;
  const ::tensorflow::ExtendSessionRequest* extend_session_;
  const ::tensorflow::PartialRunSetupRequest* partial_run_setup_;
  const ::tensorflow::RunStepRequest* run_step_;
  const ::tensorflow::CloseSessionRequest* close_session_;
  const ::tensorflow::ListDevicesRequest* list_devices_;
  const ::tensorflow::ResetRequest* reset_request_;
  const ::tensorflow::MakeCallableRequest* make_callable_;
  const ::tensorflow::RunCallableRequest* run_callable_;
  const ::tensorflow::ReleaseCallableRequest* release_callable_;
  const ::tensorflow::NewReplaySession* new_replay_session_;
  const ::tensorflow::CreateSessionResponse* create_session_response_;
  const ::tensorflow::ExtendSessionResponse* extend_session_response_;
  const ::tensorflow::PartialRunSetupResponse* partial_run_setup_response_;
  const ::tensorflow::RunStepResponse* run_step_response_;
  const ::tensorflow::CloseSessionResponse* close_session_response_;
  const ::tensorflow::ListDevicesResponse* list_devices_response_;
  const ::tensorflow::ResetResponse* reset_request_response_;
  const ::tensorflow::MakeCallableResponse* make_callable_response_;
  const ::tensorflow::RunCallableResponse* run_callable_response_;
  const ::tensorflow::ReleaseCallableResponse* release_callable_response_;
} _ReplayOp_default_instance_;
}  // namespace tensorflow
static void InitDefaultsscc_info_NewReplaySession_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_NewReplaySession_default_instance_;
    new (ptr) ::tensorflow::NewReplaySession();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::NewReplaySession::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NewReplaySession_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_NewReplaySession_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto}, {
      &scc_info_ListDevicesResponse_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto.base,}};

static void InitDefaultsscc_info_ReplayOp_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_ReplayOp_default_instance_;
    new (ptr) ::tensorflow::ReplayOp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::ReplayOp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<21> scc_info_ReplayOp_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 21, InitDefaultsscc_info_ReplayOp_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto}, {
      &scc_info_CreateSessionRequest_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto.base,
      &scc_info_ExtendSessionRequest_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto.base,
      &scc_info_PartialRunSetupRequest_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto.base,
      &scc_info_RunStepRequest_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto.base,
      &scc_info_CloseSessionRequest_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto.base,
      &scc_info_ListDevicesRequest_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto.base,
      &scc_info_ResetRequest_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto.base,
      &scc_info_MakeCallableRequest_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto.base,
      &scc_info_RunCallableRequest_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto.base,
      &scc_info_ReleaseCallableRequest_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto.base,
      &scc_info_NewReplaySession_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto.base,
      &scc_info_CreateSessionResponse_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto.base,
      &scc_info_ExtendSessionResponse_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto.base,
      &scc_info_PartialRunSetupResponse_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto.base,
      &scc_info_RunStepResponse_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto.base,
      &scc_info_CloseSessionResponse_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto.base,
      &scc_info_ListDevicesResponse_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto.base,
      &scc_info_ResetResponse_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto.base,
      &scc_info_MakeCallableResponse_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto.base,
      &scc_info_RunCallableResponse_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto.base,
      &scc_info_ReleaseCallableResponse_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::NewReplaySession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::NewReplaySession, devices_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::NewReplaySession, session_handle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ReplayOp, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ReplayOp, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ReplayOp, start_time_us_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ReplayOp, end_time_us_),
  offsetof(::tensorflow::ReplayOpDefaultTypeInternal, create_session_),
  offsetof(::tensorflow::ReplayOpDefaultTypeInternal, extend_session_),
  offsetof(::tensorflow::ReplayOpDefaultTypeInternal, partial_run_setup_),
  offsetof(::tensorflow::ReplayOpDefaultTypeInternal, run_step_),
  offsetof(::tensorflow::ReplayOpDefaultTypeInternal, close_session_),
  offsetof(::tensorflow::ReplayOpDefaultTypeInternal, list_devices_),
  offsetof(::tensorflow::ReplayOpDefaultTypeInternal, reset_request_),
  offsetof(::tensorflow::ReplayOpDefaultTypeInternal, make_callable_),
  offsetof(::tensorflow::ReplayOpDefaultTypeInternal, run_callable_),
  offsetof(::tensorflow::ReplayOpDefaultTypeInternal, release_callable_),
  offsetof(::tensorflow::ReplayOpDefaultTypeInternal, new_replay_session_),
  offsetof(::tensorflow::ReplayOpDefaultTypeInternal, create_session_response_),
  offsetof(::tensorflow::ReplayOpDefaultTypeInternal, extend_session_response_),
  offsetof(::tensorflow::ReplayOpDefaultTypeInternal, partial_run_setup_response_),
  offsetof(::tensorflow::ReplayOpDefaultTypeInternal, run_step_response_),
  offsetof(::tensorflow::ReplayOpDefaultTypeInternal, close_session_response_),
  offsetof(::tensorflow::ReplayOpDefaultTypeInternal, list_devices_response_),
  offsetof(::tensorflow::ReplayOpDefaultTypeInternal, reset_request_response_),
  offsetof(::tensorflow::ReplayOpDefaultTypeInternal, make_callable_response_),
  offsetof(::tensorflow::ReplayOpDefaultTypeInternal, run_callable_response_),
  offsetof(::tensorflow::ReplayOpDefaultTypeInternal, release_callable_response_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ReplayOp, op_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ReplayOp, response_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::NewReplaySession)},
  { 7, -1, sizeof(::tensorflow::ReplayOp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_NewReplaySession_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_ReplayOp_default_instance_),
};

const char descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto[] =
  "\n)tensorflow/core/protobuf/replay_log.pr"
  "oto\022\ntensorflow\032%tensorflow/core/protobu"
  "f/master.proto\"\\\n\020NewReplaySession\0220\n\007de"
  "vices\030\001 \001(\0132\037.tensorflow.ListDevicesResp"
  "onse\022\026\n\016session_handle\030\002 \001(\t\"\350\n\n\010ReplayO"
  "p\022\025\n\rstart_time_us\030\037 \001(\001\022\023\n\013end_time_us\030"
  "  \001(\001\022:\n\016create_session\030\001 \001(\0132 .tensorfl"
  "ow.CreateSessionRequestH\000\022:\n\016extend_sess"
  "ion\030\002 \001(\0132 .tensorflow.ExtendSessionRequ"
  "estH\000\022\?\n\021partial_run_setup\030\003 \001(\0132\".tenso"
  "rflow.PartialRunSetupRequestH\000\022.\n\010run_st"
  "ep\030\004 \001(\0132\032.tensorflow.RunStepRequestH\000\0228"
  "\n\rclose_session\030\005 \001(\0132\037.tensorflow.Close"
  "SessionRequestH\000\0226\n\014list_devices\030\006 \001(\0132\036"
  ".tensorflow.ListDevicesRequestH\000\0221\n\rrese"
  "t_request\030\007 \001(\0132\030.tensorflow.ResetReques"
  "tH\000\0228\n\rmake_callable\030\010 \001(\0132\037.tensorflow."
  "MakeCallableRequestH\000\0226\n\014run_callable\030\t "
  "\001(\0132\036.tensorflow.RunCallableRequestH\000\022>\n"
  "\020release_callable\030\n \001(\0132\".tensorflow.Rel"
  "easeCallableRequestH\000\022:\n\022new_replay_sess"
  "ion\030\013 \001(\0132\034.tensorflow.NewReplaySessionH"
  "\000\022D\n\027create_session_response\030\025 \001(\0132!.ten"
  "sorflow.CreateSessionResponseH\001\022D\n\027exten"
  "d_session_response\030\026 \001(\0132!.tensorflow.Ex"
  "tendSessionResponseH\001\022I\n\032partial_run_set"
  "up_response\030\027 \001(\0132#.tensorflow.PartialRu"
  "nSetupResponseH\001\0228\n\021run_step_response\030\030 "
  "\001(\0132\033.tensorflow.RunStepResponseH\001\022B\n\026cl"
  "ose_session_response\030\031 \001(\0132 .tensorflow."
  "CloseSessionResponseH\001\022@\n\025list_devices_r"
  "esponse\030\032 \001(\0132\037.tensorflow.ListDevicesRe"
  "sponseH\001\022;\n\026reset_request_response\030\033 \001(\013"
  "2\031.tensorflow.ResetResponseH\001\022B\n\026make_ca"
  "llable_response\030\034 \001(\0132 .tensorflow.MakeC"
  "allableResponseH\001\022@\n\025run_callable_respon"
  "se\030\035 \001(\0132\037.tensorflow.RunCallableRespons"
  "eH\001\022H\n\031release_callable_response\030\036 \001(\0132#"
  ".tensorflow.ReleaseCallableResponseH\001B\004\n"
  "\002opB\n\n\010responseBMZHgithub.com/tensorflow"
  "/tensorflow/tensorflow/go/core/core_prot"
  "os_go_proto\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto_deps[1] = {
  &::descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto_sccs[2] = {
  &scc_info_NewReplaySession_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto.base,
  &scc_info_ReplayOp_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto_once;
static bool descriptor_table_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto = {
  &descriptor_table_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto_initialized, descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto, "tensorflow/core/protobuf/replay_log.proto", 1662,
  &descriptor_table_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto_once, descriptor_table_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto_sccs, descriptor_table_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto::offsets,
  file_level_metadata_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto, 2, file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto, file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto), true);
namespace tensorflow {

// ===================================================================

void NewReplaySession::InitAsDefaultInstance() {
  ::tensorflow::_NewReplaySession_default_instance_._instance.get_mutable()->devices_ = const_cast< ::tensorflow::ListDevicesResponse*>(
      ::tensorflow::ListDevicesResponse::internal_default_instance());
}
class NewReplaySession::HasBitSetters {
 public:
  static const ::tensorflow::ListDevicesResponse& devices(const NewReplaySession* msg);
};

const ::tensorflow::ListDevicesResponse&
NewReplaySession::HasBitSetters::devices(const NewReplaySession* msg) {
  return *msg->devices_;
}
void NewReplaySession::unsafe_arena_set_allocated_devices(
    ::tensorflow::ListDevicesResponse* devices) {
  if (GetArenaNoVirtual() == nullptr) {
    delete devices_;
  }
  devices_ = devices;
  if (devices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.NewReplaySession.devices)
}
void NewReplaySession::clear_devices() {
  if (GetArenaNoVirtual() == nullptr && devices_ != nullptr) {
    delete devices_;
  }
  devices_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewReplaySession::kDevicesFieldNumber;
const int NewReplaySession::kSessionHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewReplaySession::NewReplaySession()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.NewReplaySession)
}
NewReplaySession::NewReplaySession(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.NewReplaySession)
}
NewReplaySession::NewReplaySession(const NewReplaySession& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.session_handle().size() > 0) {
    session_handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_handle(),
      GetArenaNoVirtual());
  }
  if (from.has_devices()) {
    devices_ = new ::tensorflow::ListDevicesResponse(*from.devices_);
  } else {
    devices_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.NewReplaySession)
}

void NewReplaySession::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewReplaySession_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto.base);
  session_handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  devices_ = nullptr;
}

NewReplaySession::~NewReplaySession() {
  // @@protoc_insertion_point(destructor:tensorflow.NewReplaySession)
  SharedDtor();
}

void NewReplaySession::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  session_handle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete devices_;
}

void NewReplaySession::ArenaDtor(void* object) {
  NewReplaySession* _this = reinterpret_cast< NewReplaySession* >(object);
  (void)_this;
}
void NewReplaySession::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewReplaySession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewReplaySession& NewReplaySession::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewReplaySession_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto.base);
  return *internal_default_instance();
}


void NewReplaySession::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.NewReplaySession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_handle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && devices_ != nullptr) {
    delete devices_;
  }
  devices_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NewReplaySession::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.ListDevicesResponse devices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_devices(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_session_handle(), ptr, ctx, "tensorflow.NewReplaySession.session_handle");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NewReplaySession::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.NewReplaySession)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.ListDevicesResponse devices = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_devices()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_handle = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_session_handle()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->session_handle().data(), static_cast<int>(this->session_handle().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.NewReplaySession.session_handle"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.NewReplaySession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.NewReplaySession)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NewReplaySession::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.NewReplaySession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.ListDevicesResponse devices = 1;
  if (this->has_devices()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::devices(this), output);
  }

  // string session_handle = 2;
  if (this->session_handle().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), static_cast<int>(this->session_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.NewReplaySession.session_handle");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.NewReplaySession)
}

::PROTOBUF_NAMESPACE_ID::uint8* NewReplaySession::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.NewReplaySession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.ListDevicesResponse devices = 1;
  if (this->has_devices()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::devices(this), target);
  }

  // string session_handle = 2;
  if (this->session_handle().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), static_cast<int>(this->session_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.NewReplaySession.session_handle");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->session_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.NewReplaySession)
  return target;
}

size_t NewReplaySession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.NewReplaySession)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_handle = 2;
  if (this->session_handle().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->session_handle());
  }

  // .tensorflow.ListDevicesResponse devices = 1;
  if (this->has_devices()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *devices_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewReplaySession::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.NewReplaySession)
  GOOGLE_DCHECK_NE(&from, this);
  const NewReplaySession* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewReplaySession>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.NewReplaySession)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.NewReplaySession)
    MergeFrom(*source);
  }
}

void NewReplaySession::MergeFrom(const NewReplaySession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.NewReplaySession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_handle().size() > 0) {
    set_session_handle(from.session_handle());
  }
  if (from.has_devices()) {
    mutable_devices()->::tensorflow::ListDevicesResponse::MergeFrom(from.devices());
  }
}

void NewReplaySession::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.NewReplaySession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewReplaySession::CopyFrom(const NewReplaySession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.NewReplaySession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewReplaySession::IsInitialized() const {
  return true;
}

void NewReplaySession::Swap(NewReplaySession* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NewReplaySession* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void NewReplaySession::UnsafeArenaSwap(NewReplaySession* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NewReplaySession::InternalSwap(NewReplaySession* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  session_handle_.Swap(&other->session_handle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(devices_, other->devices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NewReplaySession::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReplayOp::InitAsDefaultInstance() {
  ::tensorflow::_ReplayOp_default_instance_.create_session_ = const_cast< ::tensorflow::CreateSessionRequest*>(
      ::tensorflow::CreateSessionRequest::internal_default_instance());
  ::tensorflow::_ReplayOp_default_instance_.extend_session_ = const_cast< ::tensorflow::ExtendSessionRequest*>(
      ::tensorflow::ExtendSessionRequest::internal_default_instance());
  ::tensorflow::_ReplayOp_default_instance_.partial_run_setup_ = const_cast< ::tensorflow::PartialRunSetupRequest*>(
      ::tensorflow::PartialRunSetupRequest::internal_default_instance());
  ::tensorflow::_ReplayOp_default_instance_.run_step_ = const_cast< ::tensorflow::RunStepRequest*>(
      ::tensorflow::RunStepRequest::internal_default_instance());
  ::tensorflow::_ReplayOp_default_instance_.close_session_ = const_cast< ::tensorflow::CloseSessionRequest*>(
      ::tensorflow::CloseSessionRequest::internal_default_instance());
  ::tensorflow::_ReplayOp_default_instance_.list_devices_ = const_cast< ::tensorflow::ListDevicesRequest*>(
      ::tensorflow::ListDevicesRequest::internal_default_instance());
  ::tensorflow::_ReplayOp_default_instance_.reset_request_ = const_cast< ::tensorflow::ResetRequest*>(
      ::tensorflow::ResetRequest::internal_default_instance());
  ::tensorflow::_ReplayOp_default_instance_.make_callable_ = const_cast< ::tensorflow::MakeCallableRequest*>(
      ::tensorflow::MakeCallableRequest::internal_default_instance());
  ::tensorflow::_ReplayOp_default_instance_.run_callable_ = const_cast< ::tensorflow::RunCallableRequest*>(
      ::tensorflow::RunCallableRequest::internal_default_instance());
  ::tensorflow::_ReplayOp_default_instance_.release_callable_ = const_cast< ::tensorflow::ReleaseCallableRequest*>(
      ::tensorflow::ReleaseCallableRequest::internal_default_instance());
  ::tensorflow::_ReplayOp_default_instance_.new_replay_session_ = const_cast< ::tensorflow::NewReplaySession*>(
      ::tensorflow::NewReplaySession::internal_default_instance());
  ::tensorflow::_ReplayOp_default_instance_.create_session_response_ = const_cast< ::tensorflow::CreateSessionResponse*>(
      ::tensorflow::CreateSessionResponse::internal_default_instance());
  ::tensorflow::_ReplayOp_default_instance_.extend_session_response_ = const_cast< ::tensorflow::ExtendSessionResponse*>(
      ::tensorflow::ExtendSessionResponse::internal_default_instance());
  ::tensorflow::_ReplayOp_default_instance_.partial_run_setup_response_ = const_cast< ::tensorflow::PartialRunSetupResponse*>(
      ::tensorflow::PartialRunSetupResponse::internal_default_instance());
  ::tensorflow::_ReplayOp_default_instance_.run_step_response_ = const_cast< ::tensorflow::RunStepResponse*>(
      ::tensorflow::RunStepResponse::internal_default_instance());
  ::tensorflow::_ReplayOp_default_instance_.close_session_response_ = const_cast< ::tensorflow::CloseSessionResponse*>(
      ::tensorflow::CloseSessionResponse::internal_default_instance());
  ::tensorflow::_ReplayOp_default_instance_.list_devices_response_ = const_cast< ::tensorflow::ListDevicesResponse*>(
      ::tensorflow::ListDevicesResponse::internal_default_instance());
  ::tensorflow::_ReplayOp_default_instance_.reset_request_response_ = const_cast< ::tensorflow::ResetResponse*>(
      ::tensorflow::ResetResponse::internal_default_instance());
  ::tensorflow::_ReplayOp_default_instance_.make_callable_response_ = const_cast< ::tensorflow::MakeCallableResponse*>(
      ::tensorflow::MakeCallableResponse::internal_default_instance());
  ::tensorflow::_ReplayOp_default_instance_.run_callable_response_ = const_cast< ::tensorflow::RunCallableResponse*>(
      ::tensorflow::RunCallableResponse::internal_default_instance());
  ::tensorflow::_ReplayOp_default_instance_.release_callable_response_ = const_cast< ::tensorflow::ReleaseCallableResponse*>(
      ::tensorflow::ReleaseCallableResponse::internal_default_instance());
}
class ReplayOp::HasBitSetters {
 public:
  static const ::tensorflow::CreateSessionRequest& create_session(const ReplayOp* msg);
  static const ::tensorflow::ExtendSessionRequest& extend_session(const ReplayOp* msg);
  static const ::tensorflow::PartialRunSetupRequest& partial_run_setup(const ReplayOp* msg);
  static const ::tensorflow::RunStepRequest& run_step(const ReplayOp* msg);
  static const ::tensorflow::CloseSessionRequest& close_session(const ReplayOp* msg);
  static const ::tensorflow::ListDevicesRequest& list_devices(const ReplayOp* msg);
  static const ::tensorflow::ResetRequest& reset_request(const ReplayOp* msg);
  static const ::tensorflow::MakeCallableRequest& make_callable(const ReplayOp* msg);
  static const ::tensorflow::RunCallableRequest& run_callable(const ReplayOp* msg);
  static const ::tensorflow::ReleaseCallableRequest& release_callable(const ReplayOp* msg);
  static const ::tensorflow::NewReplaySession& new_replay_session(const ReplayOp* msg);
  static const ::tensorflow::CreateSessionResponse& create_session_response(const ReplayOp* msg);
  static const ::tensorflow::ExtendSessionResponse& extend_session_response(const ReplayOp* msg);
  static const ::tensorflow::PartialRunSetupResponse& partial_run_setup_response(const ReplayOp* msg);
  static const ::tensorflow::RunStepResponse& run_step_response(const ReplayOp* msg);
  static const ::tensorflow::CloseSessionResponse& close_session_response(const ReplayOp* msg);
  static const ::tensorflow::ListDevicesResponse& list_devices_response(const ReplayOp* msg);
  static const ::tensorflow::ResetResponse& reset_request_response(const ReplayOp* msg);
  static const ::tensorflow::MakeCallableResponse& make_callable_response(const ReplayOp* msg);
  static const ::tensorflow::RunCallableResponse& run_callable_response(const ReplayOp* msg);
  static const ::tensorflow::ReleaseCallableResponse& release_callable_response(const ReplayOp* msg);
};

const ::tensorflow::CreateSessionRequest&
ReplayOp::HasBitSetters::create_session(const ReplayOp* msg) {
  return *msg->op_.create_session_;
}
const ::tensorflow::ExtendSessionRequest&
ReplayOp::HasBitSetters::extend_session(const ReplayOp* msg) {
  return *msg->op_.extend_session_;
}
const ::tensorflow::PartialRunSetupRequest&
ReplayOp::HasBitSetters::partial_run_setup(const ReplayOp* msg) {
  return *msg->op_.partial_run_setup_;
}
const ::tensorflow::RunStepRequest&
ReplayOp::HasBitSetters::run_step(const ReplayOp* msg) {
  return *msg->op_.run_step_;
}
const ::tensorflow::CloseSessionRequest&
ReplayOp::HasBitSetters::close_session(const ReplayOp* msg) {
  return *msg->op_.close_session_;
}
const ::tensorflow::ListDevicesRequest&
ReplayOp::HasBitSetters::list_devices(const ReplayOp* msg) {
  return *msg->op_.list_devices_;
}
const ::tensorflow::ResetRequest&
ReplayOp::HasBitSetters::reset_request(const ReplayOp* msg) {
  return *msg->op_.reset_request_;
}
const ::tensorflow::MakeCallableRequest&
ReplayOp::HasBitSetters::make_callable(const ReplayOp* msg) {
  return *msg->op_.make_callable_;
}
const ::tensorflow::RunCallableRequest&
ReplayOp::HasBitSetters::run_callable(const ReplayOp* msg) {
  return *msg->op_.run_callable_;
}
const ::tensorflow::ReleaseCallableRequest&
ReplayOp::HasBitSetters::release_callable(const ReplayOp* msg) {
  return *msg->op_.release_callable_;
}
const ::tensorflow::NewReplaySession&
ReplayOp::HasBitSetters::new_replay_session(const ReplayOp* msg) {
  return *msg->op_.new_replay_session_;
}
const ::tensorflow::CreateSessionResponse&
ReplayOp::HasBitSetters::create_session_response(const ReplayOp* msg) {
  return *msg->response_.create_session_response_;
}
const ::tensorflow::ExtendSessionResponse&
ReplayOp::HasBitSetters::extend_session_response(const ReplayOp* msg) {
  return *msg->response_.extend_session_response_;
}
const ::tensorflow::PartialRunSetupResponse&
ReplayOp::HasBitSetters::partial_run_setup_response(const ReplayOp* msg) {
  return *msg->response_.partial_run_setup_response_;
}
const ::tensorflow::RunStepResponse&
ReplayOp::HasBitSetters::run_step_response(const ReplayOp* msg) {
  return *msg->response_.run_step_response_;
}
const ::tensorflow::CloseSessionResponse&
ReplayOp::HasBitSetters::close_session_response(const ReplayOp* msg) {
  return *msg->response_.close_session_response_;
}
const ::tensorflow::ListDevicesResponse&
ReplayOp::HasBitSetters::list_devices_response(const ReplayOp* msg) {
  return *msg->response_.list_devices_response_;
}
const ::tensorflow::ResetResponse&
ReplayOp::HasBitSetters::reset_request_response(const ReplayOp* msg) {
  return *msg->response_.reset_request_response_;
}
const ::tensorflow::MakeCallableResponse&
ReplayOp::HasBitSetters::make_callable_response(const ReplayOp* msg) {
  return *msg->response_.make_callable_response_;
}
const ::tensorflow::RunCallableResponse&
ReplayOp::HasBitSetters::run_callable_response(const ReplayOp* msg) {
  return *msg->response_.run_callable_response_;
}
const ::tensorflow::ReleaseCallableResponse&
ReplayOp::HasBitSetters::release_callable_response(const ReplayOp* msg) {
  return *msg->response_.release_callable_response_;
}
void ReplayOp::set_allocated_create_session(::tensorflow::CreateSessionRequest* create_session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_op();
  if (create_session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_session)->GetArena();
    if (message_arena != submessage_arena) {
      create_session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_session, submessage_arena);
    }
    set_has_create_session();
    op_.create_session_ = create_session;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.create_session)
}
void ReplayOp::clear_create_session() {
  if (has_create_session()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete op_.create_session_;
    }
    clear_has_op();
  }
}
void ReplayOp::set_allocated_extend_session(::tensorflow::ExtendSessionRequest* extend_session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_op();
  if (extend_session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extend_session)->GetArena();
    if (message_arena != submessage_arena) {
      extend_session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extend_session, submessage_arena);
    }
    set_has_extend_session();
    op_.extend_session_ = extend_session;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.extend_session)
}
void ReplayOp::clear_extend_session() {
  if (has_extend_session()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete op_.extend_session_;
    }
    clear_has_op();
  }
}
void ReplayOp::set_allocated_partial_run_setup(::tensorflow::PartialRunSetupRequest* partial_run_setup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_op();
  if (partial_run_setup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(partial_run_setup)->GetArena();
    if (message_arena != submessage_arena) {
      partial_run_setup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, partial_run_setup, submessage_arena);
    }
    set_has_partial_run_setup();
    op_.partial_run_setup_ = partial_run_setup;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.partial_run_setup)
}
void ReplayOp::clear_partial_run_setup() {
  if (has_partial_run_setup()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete op_.partial_run_setup_;
    }
    clear_has_op();
  }
}
void ReplayOp::set_allocated_run_step(::tensorflow::RunStepRequest* run_step) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_op();
  if (run_step) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_step)->GetArena();
    if (message_arena != submessage_arena) {
      run_step = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, run_step, submessage_arena);
    }
    set_has_run_step();
    op_.run_step_ = run_step;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.run_step)
}
void ReplayOp::clear_run_step() {
  if (has_run_step()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete op_.run_step_;
    }
    clear_has_op();
  }
}
void ReplayOp::set_allocated_close_session(::tensorflow::CloseSessionRequest* close_session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_op();
  if (close_session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(close_session)->GetArena();
    if (message_arena != submessage_arena) {
      close_session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, close_session, submessage_arena);
    }
    set_has_close_session();
    op_.close_session_ = close_session;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.close_session)
}
void ReplayOp::clear_close_session() {
  if (has_close_session()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete op_.close_session_;
    }
    clear_has_op();
  }
}
void ReplayOp::set_allocated_list_devices(::tensorflow::ListDevicesRequest* list_devices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_op();
  if (list_devices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(list_devices)->GetArena();
    if (message_arena != submessage_arena) {
      list_devices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_devices, submessage_arena);
    }
    set_has_list_devices();
    op_.list_devices_ = list_devices;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.list_devices)
}
void ReplayOp::clear_list_devices() {
  if (has_list_devices()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete op_.list_devices_;
    }
    clear_has_op();
  }
}
void ReplayOp::set_allocated_reset_request(::tensorflow::ResetRequest* reset_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_op();
  if (reset_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reset_request)->GetArena();
    if (message_arena != submessage_arena) {
      reset_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reset_request, submessage_arena);
    }
    set_has_reset_request();
    op_.reset_request_ = reset_request;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.reset_request)
}
void ReplayOp::clear_reset_request() {
  if (has_reset_request()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete op_.reset_request_;
    }
    clear_has_op();
  }
}
void ReplayOp::set_allocated_make_callable(::tensorflow::MakeCallableRequest* make_callable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_op();
  if (make_callable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(make_callable)->GetArena();
    if (message_arena != submessage_arena) {
      make_callable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, make_callable, submessage_arena);
    }
    set_has_make_callable();
    op_.make_callable_ = make_callable;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.make_callable)
}
void ReplayOp::clear_make_callable() {
  if (has_make_callable()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete op_.make_callable_;
    }
    clear_has_op();
  }
}
void ReplayOp::set_allocated_run_callable(::tensorflow::RunCallableRequest* run_callable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_op();
  if (run_callable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_callable)->GetArena();
    if (message_arena != submessage_arena) {
      run_callable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, run_callable, submessage_arena);
    }
    set_has_run_callable();
    op_.run_callable_ = run_callable;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.run_callable)
}
void ReplayOp::clear_run_callable() {
  if (has_run_callable()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete op_.run_callable_;
    }
    clear_has_op();
  }
}
void ReplayOp::set_allocated_release_callable(::tensorflow::ReleaseCallableRequest* release_callable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_op();
  if (release_callable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(release_callable)->GetArena();
    if (message_arena != submessage_arena) {
      release_callable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, release_callable, submessage_arena);
    }
    set_has_release_callable();
    op_.release_callable_ = release_callable;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.release_callable)
}
void ReplayOp::clear_release_callable() {
  if (has_release_callable()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete op_.release_callable_;
    }
    clear_has_op();
  }
}
void ReplayOp::set_allocated_new_replay_session(::tensorflow::NewReplaySession* new_replay_session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_op();
  if (new_replay_session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(new_replay_session);
    if (message_arena != submessage_arena) {
      new_replay_session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_replay_session, submessage_arena);
    }
    set_has_new_replay_session();
    op_.new_replay_session_ = new_replay_session;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.new_replay_session)
}
void ReplayOp::set_allocated_create_session_response(::tensorflow::CreateSessionResponse* create_session_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (create_session_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_session_response)->GetArena();
    if (message_arena != submessage_arena) {
      create_session_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_session_response, submessage_arena);
    }
    set_has_create_session_response();
    response_.create_session_response_ = create_session_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.create_session_response)
}
void ReplayOp::clear_create_session_response() {
  if (has_create_session_response()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete response_.create_session_response_;
    }
    clear_has_response();
  }
}
void ReplayOp::set_allocated_extend_session_response(::tensorflow::ExtendSessionResponse* extend_session_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (extend_session_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extend_session_response)->GetArena();
    if (message_arena != submessage_arena) {
      extend_session_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extend_session_response, submessage_arena);
    }
    set_has_extend_session_response();
    response_.extend_session_response_ = extend_session_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.extend_session_response)
}
void ReplayOp::clear_extend_session_response() {
  if (has_extend_session_response()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete response_.extend_session_response_;
    }
    clear_has_response();
  }
}
void ReplayOp::set_allocated_partial_run_setup_response(::tensorflow::PartialRunSetupResponse* partial_run_setup_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (partial_run_setup_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(partial_run_setup_response)->GetArena();
    if (message_arena != submessage_arena) {
      partial_run_setup_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, partial_run_setup_response, submessage_arena);
    }
    set_has_partial_run_setup_response();
    response_.partial_run_setup_response_ = partial_run_setup_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.partial_run_setup_response)
}
void ReplayOp::clear_partial_run_setup_response() {
  if (has_partial_run_setup_response()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete response_.partial_run_setup_response_;
    }
    clear_has_response();
  }
}
void ReplayOp::set_allocated_run_step_response(::tensorflow::RunStepResponse* run_step_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (run_step_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_step_response)->GetArena();
    if (message_arena != submessage_arena) {
      run_step_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, run_step_response, submessage_arena);
    }
    set_has_run_step_response();
    response_.run_step_response_ = run_step_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.run_step_response)
}
void ReplayOp::clear_run_step_response() {
  if (has_run_step_response()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete response_.run_step_response_;
    }
    clear_has_response();
  }
}
void ReplayOp::set_allocated_close_session_response(::tensorflow::CloseSessionResponse* close_session_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (close_session_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(close_session_response)->GetArena();
    if (message_arena != submessage_arena) {
      close_session_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, close_session_response, submessage_arena);
    }
    set_has_close_session_response();
    response_.close_session_response_ = close_session_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.close_session_response)
}
void ReplayOp::clear_close_session_response() {
  if (has_close_session_response()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete response_.close_session_response_;
    }
    clear_has_response();
  }
}
void ReplayOp::set_allocated_list_devices_response(::tensorflow::ListDevicesResponse* list_devices_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (list_devices_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(list_devices_response)->GetArena();
    if (message_arena != submessage_arena) {
      list_devices_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_devices_response, submessage_arena);
    }
    set_has_list_devices_response();
    response_.list_devices_response_ = list_devices_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.list_devices_response)
}
void ReplayOp::clear_list_devices_response() {
  if (has_list_devices_response()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete response_.list_devices_response_;
    }
    clear_has_response();
  }
}
void ReplayOp::set_allocated_reset_request_response(::tensorflow::ResetResponse* reset_request_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (reset_request_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reset_request_response)->GetArena();
    if (message_arena != submessage_arena) {
      reset_request_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reset_request_response, submessage_arena);
    }
    set_has_reset_request_response();
    response_.reset_request_response_ = reset_request_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.reset_request_response)
}
void ReplayOp::clear_reset_request_response() {
  if (has_reset_request_response()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete response_.reset_request_response_;
    }
    clear_has_response();
  }
}
void ReplayOp::set_allocated_make_callable_response(::tensorflow::MakeCallableResponse* make_callable_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (make_callable_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(make_callable_response)->GetArena();
    if (message_arena != submessage_arena) {
      make_callable_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, make_callable_response, submessage_arena);
    }
    set_has_make_callable_response();
    response_.make_callable_response_ = make_callable_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.make_callable_response)
}
void ReplayOp::clear_make_callable_response() {
  if (has_make_callable_response()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete response_.make_callable_response_;
    }
    clear_has_response();
  }
}
void ReplayOp::set_allocated_run_callable_response(::tensorflow::RunCallableResponse* run_callable_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (run_callable_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_callable_response)->GetArena();
    if (message_arena != submessage_arena) {
      run_callable_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, run_callable_response, submessage_arena);
    }
    set_has_run_callable_response();
    response_.run_callable_response_ = run_callable_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.run_callable_response)
}
void ReplayOp::clear_run_callable_response() {
  if (has_run_callable_response()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete response_.run_callable_response_;
    }
    clear_has_response();
  }
}
void ReplayOp::set_allocated_release_callable_response(::tensorflow::ReleaseCallableResponse* release_callable_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (release_callable_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(release_callable_response)->GetArena();
    if (message_arena != submessage_arena) {
      release_callable_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, release_callable_response, submessage_arena);
    }
    set_has_release_callable_response();
    response_.release_callable_response_ = release_callable_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ReplayOp.release_callable_response)
}
void ReplayOp::clear_release_callable_response() {
  if (has_release_callable_response()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete response_.release_callable_response_;
    }
    clear_has_response();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReplayOp::kStartTimeUsFieldNumber;
const int ReplayOp::kEndTimeUsFieldNumber;
const int ReplayOp::kCreateSessionFieldNumber;
const int ReplayOp::kExtendSessionFieldNumber;
const int ReplayOp::kPartialRunSetupFieldNumber;
const int ReplayOp::kRunStepFieldNumber;
const int ReplayOp::kCloseSessionFieldNumber;
const int ReplayOp::kListDevicesFieldNumber;
const int ReplayOp::kResetRequestFieldNumber;
const int ReplayOp::kMakeCallableFieldNumber;
const int ReplayOp::kRunCallableFieldNumber;
const int ReplayOp::kReleaseCallableFieldNumber;
const int ReplayOp::kNewReplaySessionFieldNumber;
const int ReplayOp::kCreateSessionResponseFieldNumber;
const int ReplayOp::kExtendSessionResponseFieldNumber;
const int ReplayOp::kPartialRunSetupResponseFieldNumber;
const int ReplayOp::kRunStepResponseFieldNumber;
const int ReplayOp::kCloseSessionResponseFieldNumber;
const int ReplayOp::kListDevicesResponseFieldNumber;
const int ReplayOp::kResetRequestResponseFieldNumber;
const int ReplayOp::kMakeCallableResponseFieldNumber;
const int ReplayOp::kRunCallableResponseFieldNumber;
const int ReplayOp::kReleaseCallableResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReplayOp::ReplayOp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ReplayOp)
}
ReplayOp::ReplayOp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ReplayOp)
}
ReplayOp::ReplayOp(const ReplayOp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_time_us_, &from.start_time_us_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_us_) -
    reinterpret_cast<char*>(&start_time_us_)) + sizeof(end_time_us_));
  clear_has_op();
  switch (from.op_case()) {
    case kCreateSession: {
      mutable_create_session()->::tensorflow::CreateSessionRequest::MergeFrom(from.create_session());
      break;
    }
    case kExtendSession: {
      mutable_extend_session()->::tensorflow::ExtendSessionRequest::MergeFrom(from.extend_session());
      break;
    }
    case kPartialRunSetup: {
      mutable_partial_run_setup()->::tensorflow::PartialRunSetupRequest::MergeFrom(from.partial_run_setup());
      break;
    }
    case kRunStep: {
      mutable_run_step()->::tensorflow::RunStepRequest::MergeFrom(from.run_step());
      break;
    }
    case kCloseSession: {
      mutable_close_session()->::tensorflow::CloseSessionRequest::MergeFrom(from.close_session());
      break;
    }
    case kListDevices: {
      mutable_list_devices()->::tensorflow::ListDevicesRequest::MergeFrom(from.list_devices());
      break;
    }
    case kResetRequest: {
      mutable_reset_request()->::tensorflow::ResetRequest::MergeFrom(from.reset_request());
      break;
    }
    case kMakeCallable: {
      mutable_make_callable()->::tensorflow::MakeCallableRequest::MergeFrom(from.make_callable());
      break;
    }
    case kRunCallable: {
      mutable_run_callable()->::tensorflow::RunCallableRequest::MergeFrom(from.run_callable());
      break;
    }
    case kReleaseCallable: {
      mutable_release_callable()->::tensorflow::ReleaseCallableRequest::MergeFrom(from.release_callable());
      break;
    }
    case kNewReplaySession: {
      mutable_new_replay_session()->::tensorflow::NewReplaySession::MergeFrom(from.new_replay_session());
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  clear_has_response();
  switch (from.response_case()) {
    case kCreateSessionResponse: {
      mutable_create_session_response()->::tensorflow::CreateSessionResponse::MergeFrom(from.create_session_response());
      break;
    }
    case kExtendSessionResponse: {
      mutable_extend_session_response()->::tensorflow::ExtendSessionResponse::MergeFrom(from.extend_session_response());
      break;
    }
    case kPartialRunSetupResponse: {
      mutable_partial_run_setup_response()->::tensorflow::PartialRunSetupResponse::MergeFrom(from.partial_run_setup_response());
      break;
    }
    case kRunStepResponse: {
      mutable_run_step_response()->::tensorflow::RunStepResponse::MergeFrom(from.run_step_response());
      break;
    }
    case kCloseSessionResponse: {
      mutable_close_session_response()->::tensorflow::CloseSessionResponse::MergeFrom(from.close_session_response());
      break;
    }
    case kListDevicesResponse: {
      mutable_list_devices_response()->::tensorflow::ListDevicesResponse::MergeFrom(from.list_devices_response());
      break;
    }
    case kResetRequestResponse: {
      mutable_reset_request_response()->::tensorflow::ResetResponse::MergeFrom(from.reset_request_response());
      break;
    }
    case kMakeCallableResponse: {
      mutable_make_callable_response()->::tensorflow::MakeCallableResponse::MergeFrom(from.make_callable_response());
      break;
    }
    case kRunCallableResponse: {
      mutable_run_callable_response()->::tensorflow::RunCallableResponse::MergeFrom(from.run_callable_response());
      break;
    }
    case kReleaseCallableResponse: {
      mutable_release_callable_response()->::tensorflow::ReleaseCallableResponse::MergeFrom(from.release_callable_response());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.ReplayOp)
}

void ReplayOp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReplayOp_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto.base);
  ::memset(&start_time_us_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_us_) -
      reinterpret_cast<char*>(&start_time_us_)) + sizeof(end_time_us_));
  clear_has_op();
  clear_has_response();
}

ReplayOp::~ReplayOp() {
  // @@protoc_insertion_point(destructor:tensorflow.ReplayOp)
  SharedDtor();
}

void ReplayOp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (has_op()) {
    clear_op();
  }
  if (has_response()) {
    clear_response();
  }
}

void ReplayOp::ArenaDtor(void* object) {
  ReplayOp* _this = reinterpret_cast< ReplayOp* >(object);
  (void)_this;
}
void ReplayOp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReplayOp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplayOp& ReplayOp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplayOp_tensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto.base);
  return *internal_default_instance();
}


void ReplayOp::clear_op() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.ReplayOp)
  switch (op_case()) {
    case kCreateSession: {
      if (GetArenaNoVirtual() == nullptr) {
        delete op_.create_session_;
      }
      break;
    }
    case kExtendSession: {
      if (GetArenaNoVirtual() == nullptr) {
        delete op_.extend_session_;
      }
      break;
    }
    case kPartialRunSetup: {
      if (GetArenaNoVirtual() == nullptr) {
        delete op_.partial_run_setup_;
      }
      break;
    }
    case kRunStep: {
      if (GetArenaNoVirtual() == nullptr) {
        delete op_.run_step_;
      }
      break;
    }
    case kCloseSession: {
      if (GetArenaNoVirtual() == nullptr) {
        delete op_.close_session_;
      }
      break;
    }
    case kListDevices: {
      if (GetArenaNoVirtual() == nullptr) {
        delete op_.list_devices_;
      }
      break;
    }
    case kResetRequest: {
      if (GetArenaNoVirtual() == nullptr) {
        delete op_.reset_request_;
      }
      break;
    }
    case kMakeCallable: {
      if (GetArenaNoVirtual() == nullptr) {
        delete op_.make_callable_;
      }
      break;
    }
    case kRunCallable: {
      if (GetArenaNoVirtual() == nullptr) {
        delete op_.run_callable_;
      }
      break;
    }
    case kReleaseCallable: {
      if (GetArenaNoVirtual() == nullptr) {
        delete op_.release_callable_;
      }
      break;
    }
    case kNewReplaySession: {
      if (GetArenaNoVirtual() == nullptr) {
        delete op_.new_replay_session_;
      }
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OP_NOT_SET;
}

void ReplayOp::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.ReplayOp)
  switch (response_case()) {
    case kCreateSessionResponse: {
      if (GetArenaNoVirtual() == nullptr) {
        delete response_.create_session_response_;
      }
      break;
    }
    case kExtendSessionResponse: {
      if (GetArenaNoVirtual() == nullptr) {
        delete response_.extend_session_response_;
      }
      break;
    }
    case kPartialRunSetupResponse: {
      if (GetArenaNoVirtual() == nullptr) {
        delete response_.partial_run_setup_response_;
      }
      break;
    }
    case kRunStepResponse: {
      if (GetArenaNoVirtual() == nullptr) {
        delete response_.run_step_response_;
      }
      break;
    }
    case kCloseSessionResponse: {
      if (GetArenaNoVirtual() == nullptr) {
        delete response_.close_session_response_;
      }
      break;
    }
    case kListDevicesResponse: {
      if (GetArenaNoVirtual() == nullptr) {
        delete response_.list_devices_response_;
      }
      break;
    }
    case kResetRequestResponse: {
      if (GetArenaNoVirtual() == nullptr) {
        delete response_.reset_request_response_;
      }
      break;
    }
    case kMakeCallableResponse: {
      if (GetArenaNoVirtual() == nullptr) {
        delete response_.make_callable_response_;
      }
      break;
    }
    case kRunCallableResponse: {
      if (GetArenaNoVirtual() == nullptr) {
        delete response_.run_callable_response_;
      }
      break;
    }
    case kReleaseCallableResponse: {
      if (GetArenaNoVirtual() == nullptr) {
        delete response_.release_callable_response_;
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = RESPONSE_NOT_SET;
}


void ReplayOp::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ReplayOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_time_us_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_us_) -
      reinterpret_cast<char*>(&start_time_us_)) + sizeof(end_time_us_));
  clear_op();
  clear_response();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReplayOp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.CreateSessionRequest create_session = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_create_session(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.ExtendSessionRequest extend_session = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_extend_session(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.PartialRunSetupRequest partial_run_setup = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_partial_run_setup(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.RunStepRequest run_step = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_run_step(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.CloseSessionRequest close_session = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_close_session(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.ListDevicesRequest list_devices = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_list_devices(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.ResetRequest reset_request = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_reset_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.MakeCallableRequest make_callable = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_make_callable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.RunCallableRequest run_callable = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_run_callable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.ReleaseCallableRequest release_callable = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_release_callable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.NewReplaySession new_replay_session = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_new_replay_session(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.CreateSessionResponse create_session_response = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_create_session_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.ExtendSessionResponse extend_session_response = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_extend_session_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.PartialRunSetupResponse partial_run_setup_response = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_partial_run_setup_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.RunStepResponse run_step_response = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_run_step_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.CloseSessionResponse close_session_response = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_close_session_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.ListDevicesResponse list_devices_response = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_list_devices_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.ResetResponse reset_request_response = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_reset_request_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.MakeCallableResponse make_callable_response = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_make_callable_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.RunCallableResponse run_callable_response = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_run_callable_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.ReleaseCallableResponse release_callable_response = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(mutable_release_callable_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double start_time_us = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 249)) {
          start_time_us_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double end_time_us = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 1)) {
          end_time_us_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReplayOp::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.ReplayOp)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.CreateSessionRequest create_session = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_create_session()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.ExtendSessionRequest extend_session = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_extend_session()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.PartialRunSetupRequest partial_run_setup = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_partial_run_setup()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.RunStepRequest run_step = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_run_step()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.CloseSessionRequest close_session = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_close_session()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.ListDevicesRequest list_devices = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_list_devices()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.ResetRequest reset_request = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_reset_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.MakeCallableRequest make_callable = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_make_callable()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.RunCallableRequest run_callable = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_run_callable()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.ReleaseCallableRequest release_callable = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_release_callable()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.NewReplaySession new_replay_session = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_new_replay_session()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.CreateSessionResponse create_session_response = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_create_session_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.ExtendSessionResponse extend_session_response = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_extend_session_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.PartialRunSetupResponse partial_run_setup_response = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_partial_run_setup_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.RunStepResponse run_step_response = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (194 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_run_step_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.CloseSessionResponse close_session_response = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_close_session_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.ListDevicesResponse list_devices_response = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_list_devices_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.ResetResponse reset_request_response = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (218 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_reset_request_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.MakeCallableResponse make_callable_response = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (226 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_make_callable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.RunCallableResponse run_callable_response = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (234 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_run_callable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.ReleaseCallableResponse release_callable_response = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (242 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_release_callable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double start_time_us = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (249 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_time_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double end_time_us = 32;
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (257 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_time_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.ReplayOp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.ReplayOp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReplayOp::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.ReplayOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.CreateSessionRequest create_session = 1;
  if (has_create_session()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::create_session(this), output);
  }

  // .tensorflow.ExtendSessionRequest extend_session = 2;
  if (has_extend_session()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::extend_session(this), output);
  }

  // .tensorflow.PartialRunSetupRequest partial_run_setup = 3;
  if (has_partial_run_setup()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::partial_run_setup(this), output);
  }

  // .tensorflow.RunStepRequest run_step = 4;
  if (has_run_step()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::run_step(this), output);
  }

  // .tensorflow.CloseSessionRequest close_session = 5;
  if (has_close_session()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::close_session(this), output);
  }

  // .tensorflow.ListDevicesRequest list_devices = 6;
  if (has_list_devices()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::list_devices(this), output);
  }

  // .tensorflow.ResetRequest reset_request = 7;
  if (has_reset_request()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::reset_request(this), output);
  }

  // .tensorflow.MakeCallableRequest make_callable = 8;
  if (has_make_callable()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::make_callable(this), output);
  }

  // .tensorflow.RunCallableRequest run_callable = 9;
  if (has_run_callable()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::run_callable(this), output);
  }

  // .tensorflow.ReleaseCallableRequest release_callable = 10;
  if (has_release_callable()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::release_callable(this), output);
  }

  // .tensorflow.NewReplaySession new_replay_session = 11;
  if (has_new_replay_session()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::new_replay_session(this), output);
  }

  // .tensorflow.CreateSessionResponse create_session_response = 21;
  if (has_create_session_response()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, HasBitSetters::create_session_response(this), output);
  }

  // .tensorflow.ExtendSessionResponse extend_session_response = 22;
  if (has_extend_session_response()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, HasBitSetters::extend_session_response(this), output);
  }

  // .tensorflow.PartialRunSetupResponse partial_run_setup_response = 23;
  if (has_partial_run_setup_response()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, HasBitSetters::partial_run_setup_response(this), output);
  }

  // .tensorflow.RunStepResponse run_step_response = 24;
  if (has_run_step_response()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, HasBitSetters::run_step_response(this), output);
  }

  // .tensorflow.CloseSessionResponse close_session_response = 25;
  if (has_close_session_response()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, HasBitSetters::close_session_response(this), output);
  }

  // .tensorflow.ListDevicesResponse list_devices_response = 26;
  if (has_list_devices_response()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, HasBitSetters::list_devices_response(this), output);
  }

  // .tensorflow.ResetResponse reset_request_response = 27;
  if (has_reset_request_response()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, HasBitSetters::reset_request_response(this), output);
  }

  // .tensorflow.MakeCallableResponse make_callable_response = 28;
  if (has_make_callable_response()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, HasBitSetters::make_callable_response(this), output);
  }

  // .tensorflow.RunCallableResponse run_callable_response = 29;
  if (has_run_callable_response()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, HasBitSetters::run_callable_response(this), output);
  }

  // .tensorflow.ReleaseCallableResponse release_callable_response = 30;
  if (has_release_callable_response()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, HasBitSetters::release_callable_response(this), output);
  }

  // double start_time_us = 31;
  if (!(this->start_time_us() <= 0 && this->start_time_us() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(31, this->start_time_us(), output);
  }

  // double end_time_us = 32;
  if (!(this->end_time_us() <= 0 && this->end_time_us() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(32, this->end_time_us(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.ReplayOp)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplayOp::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ReplayOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.CreateSessionRequest create_session = 1;
  if (has_create_session()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::create_session(this), target);
  }

  // .tensorflow.ExtendSessionRequest extend_session = 2;
  if (has_extend_session()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::extend_session(this), target);
  }

  // .tensorflow.PartialRunSetupRequest partial_run_setup = 3;
  if (has_partial_run_setup()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::partial_run_setup(this), target);
  }

  // .tensorflow.RunStepRequest run_step = 4;
  if (has_run_step()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::run_step(this), target);
  }

  // .tensorflow.CloseSessionRequest close_session = 5;
  if (has_close_session()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::close_session(this), target);
  }

  // .tensorflow.ListDevicesRequest list_devices = 6;
  if (has_list_devices()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::list_devices(this), target);
  }

  // .tensorflow.ResetRequest reset_request = 7;
  if (has_reset_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::reset_request(this), target);
  }

  // .tensorflow.MakeCallableRequest make_callable = 8;
  if (has_make_callable()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::make_callable(this), target);
  }

  // .tensorflow.RunCallableRequest run_callable = 9;
  if (has_run_callable()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::run_callable(this), target);
  }

  // .tensorflow.ReleaseCallableRequest release_callable = 10;
  if (has_release_callable()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::release_callable(this), target);
  }

  // .tensorflow.NewReplaySession new_replay_session = 11;
  if (has_new_replay_session()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::new_replay_session(this), target);
  }

  // .tensorflow.CreateSessionResponse create_session_response = 21;
  if (has_create_session_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, HasBitSetters::create_session_response(this), target);
  }

  // .tensorflow.ExtendSessionResponse extend_session_response = 22;
  if (has_extend_session_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, HasBitSetters::extend_session_response(this), target);
  }

  // .tensorflow.PartialRunSetupResponse partial_run_setup_response = 23;
  if (has_partial_run_setup_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, HasBitSetters::partial_run_setup_response(this), target);
  }

  // .tensorflow.RunStepResponse run_step_response = 24;
  if (has_run_step_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, HasBitSetters::run_step_response(this), target);
  }

  // .tensorflow.CloseSessionResponse close_session_response = 25;
  if (has_close_session_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, HasBitSetters::close_session_response(this), target);
  }

  // .tensorflow.ListDevicesResponse list_devices_response = 26;
  if (has_list_devices_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        26, HasBitSetters::list_devices_response(this), target);
  }

  // .tensorflow.ResetResponse reset_request_response = 27;
  if (has_reset_request_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        27, HasBitSetters::reset_request_response(this), target);
  }

  // .tensorflow.MakeCallableResponse make_callable_response = 28;
  if (has_make_callable_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        28, HasBitSetters::make_callable_response(this), target);
  }

  // .tensorflow.RunCallableResponse run_callable_response = 29;
  if (has_run_callable_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        29, HasBitSetters::run_callable_response(this), target);
  }

  // .tensorflow.ReleaseCallableResponse release_callable_response = 30;
  if (has_release_callable_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30, HasBitSetters::release_callable_response(this), target);
  }

  // double start_time_us = 31;
  if (!(this->start_time_us() <= 0 && this->start_time_us() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(31, this->start_time_us(), target);
  }

  // double end_time_us = 32;
  if (!(this->end_time_us() <= 0 && this->end_time_us() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(32, this->end_time_us(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ReplayOp)
  return target;
}

size_t ReplayOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ReplayOp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double start_time_us = 31;
  if (!(this->start_time_us() <= 0 && this->start_time_us() >= 0)) {
    total_size += 2 + 8;
  }

  // double end_time_us = 32;
  if (!(this->end_time_us() <= 0 && this->end_time_us() >= 0)) {
    total_size += 2 + 8;
  }

  switch (op_case()) {
    // .tensorflow.CreateSessionRequest create_session = 1;
    case kCreateSession: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.create_session_);
      break;
    }
    // .tensorflow.ExtendSessionRequest extend_session = 2;
    case kExtendSession: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.extend_session_);
      break;
    }
    // .tensorflow.PartialRunSetupRequest partial_run_setup = 3;
    case kPartialRunSetup: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.partial_run_setup_);
      break;
    }
    // .tensorflow.RunStepRequest run_step = 4;
    case kRunStep: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.run_step_);
      break;
    }
    // .tensorflow.CloseSessionRequest close_session = 5;
    case kCloseSession: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.close_session_);
      break;
    }
    // .tensorflow.ListDevicesRequest list_devices = 6;
    case kListDevices: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.list_devices_);
      break;
    }
    // .tensorflow.ResetRequest reset_request = 7;
    case kResetRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.reset_request_);
      break;
    }
    // .tensorflow.MakeCallableRequest make_callable = 8;
    case kMakeCallable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.make_callable_);
      break;
    }
    // .tensorflow.RunCallableRequest run_callable = 9;
    case kRunCallable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.run_callable_);
      break;
    }
    // .tensorflow.ReleaseCallableRequest release_callable = 10;
    case kReleaseCallable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.release_callable_);
      break;
    }
    // .tensorflow.NewReplaySession new_replay_session = 11;
    case kNewReplaySession: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.new_replay_session_);
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  switch (response_case()) {
    // .tensorflow.CreateSessionResponse create_session_response = 21;
    case kCreateSessionResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.create_session_response_);
      break;
    }
    // .tensorflow.ExtendSessionResponse extend_session_response = 22;
    case kExtendSessionResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.extend_session_response_);
      break;
    }
    // .tensorflow.PartialRunSetupResponse partial_run_setup_response = 23;
    case kPartialRunSetupResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.partial_run_setup_response_);
      break;
    }
    // .tensorflow.RunStepResponse run_step_response = 24;
    case kRunStepResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.run_step_response_);
      break;
    }
    // .tensorflow.CloseSessionResponse close_session_response = 25;
    case kCloseSessionResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.close_session_response_);
      break;
    }
    // .tensorflow.ListDevicesResponse list_devices_response = 26;
    case kListDevicesResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.list_devices_response_);
      break;
    }
    // .tensorflow.ResetResponse reset_request_response = 27;
    case kResetRequestResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.reset_request_response_);
      break;
    }
    // .tensorflow.MakeCallableResponse make_callable_response = 28;
    case kMakeCallableResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.make_callable_response_);
      break;
    }
    // .tensorflow.RunCallableResponse run_callable_response = 29;
    case kRunCallableResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.run_callable_response_);
      break;
    }
    // .tensorflow.ReleaseCallableResponse release_callable_response = 30;
    case kReleaseCallableResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.release_callable_response_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplayOp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ReplayOp)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplayOp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplayOp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ReplayOp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ReplayOp)
    MergeFrom(*source);
  }
}

void ReplayOp::MergeFrom(const ReplayOp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ReplayOp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.start_time_us() <= 0 && from.start_time_us() >= 0)) {
    set_start_time_us(from.start_time_us());
  }
  if (!(from.end_time_us() <= 0 && from.end_time_us() >= 0)) {
    set_end_time_us(from.end_time_us());
  }
  switch (from.op_case()) {
    case kCreateSession: {
      mutable_create_session()->::tensorflow::CreateSessionRequest::MergeFrom(from.create_session());
      break;
    }
    case kExtendSession: {
      mutable_extend_session()->::tensorflow::ExtendSessionRequest::MergeFrom(from.extend_session());
      break;
    }
    case kPartialRunSetup: {
      mutable_partial_run_setup()->::tensorflow::PartialRunSetupRequest::MergeFrom(from.partial_run_setup());
      break;
    }
    case kRunStep: {
      mutable_run_step()->::tensorflow::RunStepRequest::MergeFrom(from.run_step());
      break;
    }
    case kCloseSession: {
      mutable_close_session()->::tensorflow::CloseSessionRequest::MergeFrom(from.close_session());
      break;
    }
    case kListDevices: {
      mutable_list_devices()->::tensorflow::ListDevicesRequest::MergeFrom(from.list_devices());
      break;
    }
    case kResetRequest: {
      mutable_reset_request()->::tensorflow::ResetRequest::MergeFrom(from.reset_request());
      break;
    }
    case kMakeCallable: {
      mutable_make_callable()->::tensorflow::MakeCallableRequest::MergeFrom(from.make_callable());
      break;
    }
    case kRunCallable: {
      mutable_run_callable()->::tensorflow::RunCallableRequest::MergeFrom(from.run_callable());
      break;
    }
    case kReleaseCallable: {
      mutable_release_callable()->::tensorflow::ReleaseCallableRequest::MergeFrom(from.release_callable());
      break;
    }
    case kNewReplaySession: {
      mutable_new_replay_session()->::tensorflow::NewReplaySession::MergeFrom(from.new_replay_session());
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  switch (from.response_case()) {
    case kCreateSessionResponse: {
      mutable_create_session_response()->::tensorflow::CreateSessionResponse::MergeFrom(from.create_session_response());
      break;
    }
    case kExtendSessionResponse: {
      mutable_extend_session_response()->::tensorflow::ExtendSessionResponse::MergeFrom(from.extend_session_response());
      break;
    }
    case kPartialRunSetupResponse: {
      mutable_partial_run_setup_response()->::tensorflow::PartialRunSetupResponse::MergeFrom(from.partial_run_setup_response());
      break;
    }
    case kRunStepResponse: {
      mutable_run_step_response()->::tensorflow::RunStepResponse::MergeFrom(from.run_step_response());
      break;
    }
    case kCloseSessionResponse: {
      mutable_close_session_response()->::tensorflow::CloseSessionResponse::MergeFrom(from.close_session_response());
      break;
    }
    case kListDevicesResponse: {
      mutable_list_devices_response()->::tensorflow::ListDevicesResponse::MergeFrom(from.list_devices_response());
      break;
    }
    case kResetRequestResponse: {
      mutable_reset_request_response()->::tensorflow::ResetResponse::MergeFrom(from.reset_request_response());
      break;
    }
    case kMakeCallableResponse: {
      mutable_make_callable_response()->::tensorflow::MakeCallableResponse::MergeFrom(from.make_callable_response());
      break;
    }
    case kRunCallableResponse: {
      mutable_run_callable_response()->::tensorflow::RunCallableResponse::MergeFrom(from.run_callable_response());
      break;
    }
    case kReleaseCallableResponse: {
      mutable_release_callable_response()->::tensorflow::ReleaseCallableResponse::MergeFrom(from.release_callable_response());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
}

void ReplayOp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ReplayOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplayOp::CopyFrom(const ReplayOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ReplayOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplayOp::IsInitialized() const {
  return true;
}

void ReplayOp::Swap(ReplayOp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ReplayOp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void ReplayOp::UnsafeArenaSwap(ReplayOp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ReplayOp::InternalSwap(ReplayOp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(start_time_us_, other->start_time_us_);
  swap(end_time_us_, other->end_time_us_);
  swap(op_, other->op_);
  swap(response_, other->response_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplayOp::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::NewReplaySession* Arena::CreateMaybeMessage< ::tensorflow::NewReplaySession >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::NewReplaySession >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::ReplayOp* Arena::CreateMaybeMessage< ::tensorflow::ReplayOp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::ReplayOp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
