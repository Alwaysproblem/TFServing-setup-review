// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/util/class_registration_test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2futil_2fclass_5fregistration_5ftest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2futil_2fclass_5fregistration_5ftest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_5fserving_2futil_2fclass_5fregistration_5ftest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_5fserving_2futil_2fclass_5fregistration_5ftest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_5fserving_2futil_2fclass_5fregistration_5ftest_2eproto;
namespace tensorflow {
namespace serving {
class Config1;
class Config1DefaultTypeInternal;
extern Config1DefaultTypeInternal _Config1_default_instance_;
class Config2;
class Config2DefaultTypeInternal;
extern Config2DefaultTypeInternal _Config2_default_instance_;
class MessageWithAny;
class MessageWithAnyDefaultTypeInternal;
extern MessageWithAnyDefaultTypeInternal _MessageWithAny_default_instance_;
}  // namespace serving
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::serving::Config1* Arena::CreateMaybeMessage<::tensorflow::serving::Config1>(Arena*);
template<> ::tensorflow::serving::Config2* Arena::CreateMaybeMessage<::tensorflow::serving::Config2>(Arena*);
template<> ::tensorflow::serving::MessageWithAny* Arena::CreateMaybeMessage<::tensorflow::serving::MessageWithAny>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {
namespace serving {

// ===================================================================

class Config1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.Config1) */ {
 public:
  Config1();
  virtual ~Config1();

  Config1(const Config1& from);
  Config1(Config1&& from) noexcept
    : Config1() {
    *this = ::std::move(from);
  }

  inline Config1& operator=(const Config1& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config1& operator=(Config1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Config1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Config1* internal_default_instance() {
    return reinterpret_cast<const Config1*>(
               &_Config1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Config1* other);
  friend void swap(Config1& a, Config1& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Config1* New() const final {
    return CreateMaybeMessage<Config1>(nullptr);
  }

  Config1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Config1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Config1& from);
  void MergeFrom(const Config1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.Config1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_5fserving_2futil_2fclass_5fregistration_5ftest_2eproto);
    return ::descriptor_table_tensorflow_5fserving_2futil_2fclass_5fregistration_5ftest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string string_field = 1;
  void clear_string_field();
  static const int kStringFieldFieldNumber = 1;
  const std::string& string_field() const;
  void set_string_field(const std::string& value);
  void set_string_field(std::string&& value);
  void set_string_field(const char* value);
  void set_string_field(const char* value, size_t size);
  std::string* mutable_string_field();
  std::string* release_string_field();
  void set_allocated_string_field(std::string* string_field);

  // @@protoc_insertion_point(class_scope:tensorflow.serving.Config1)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_field_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_5fserving_2futil_2fclass_5fregistration_5ftest_2eproto;
};
// -------------------------------------------------------------------

class Config2 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.Config2) */ {
 public:
  Config2();
  virtual ~Config2();

  Config2(const Config2& from);
  Config2(Config2&& from) noexcept
    : Config2() {
    *this = ::std::move(from);
  }

  inline Config2& operator=(const Config2& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config2& operator=(Config2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Config2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Config2* internal_default_instance() {
    return reinterpret_cast<const Config2*>(
               &_Config2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Config2* other);
  friend void swap(Config2& a, Config2& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Config2* New() const final {
    return CreateMaybeMessage<Config2>(nullptr);
  }

  Config2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Config2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Config2& from);
  void MergeFrom(const Config2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.Config2";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_5fserving_2futil_2fclass_5fregistration_5ftest_2eproto);
    return ::descriptor_table_tensorflow_5fserving_2futil_2fclass_5fregistration_5ftest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string string_field = 1;
  void clear_string_field();
  static const int kStringFieldFieldNumber = 1;
  const std::string& string_field() const;
  void set_string_field(const std::string& value);
  void set_string_field(std::string&& value);
  void set_string_field(const char* value);
  void set_string_field(const char* value, size_t size);
  std::string* mutable_string_field();
  std::string* release_string_field();
  void set_allocated_string_field(std::string* string_field);

  // @@protoc_insertion_point(class_scope:tensorflow.serving.Config2)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_field_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_5fserving_2futil_2fclass_5fregistration_5ftest_2eproto;
};
// -------------------------------------------------------------------

class MessageWithAny :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.MessageWithAny) */ {
 public:
  MessageWithAny();
  virtual ~MessageWithAny();

  MessageWithAny(const MessageWithAny& from);
  MessageWithAny(MessageWithAny&& from) noexcept
    : MessageWithAny() {
    *this = ::std::move(from);
  }

  inline MessageWithAny& operator=(const MessageWithAny& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageWithAny& operator=(MessageWithAny&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageWithAny& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageWithAny* internal_default_instance() {
    return reinterpret_cast<const MessageWithAny*>(
               &_MessageWithAny_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(MessageWithAny* other);
  friend void swap(MessageWithAny& a, MessageWithAny& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MessageWithAny* New() const final {
    return CreateMaybeMessage<MessageWithAny>(nullptr);
  }

  MessageWithAny* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageWithAny>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageWithAny& from);
  void MergeFrom(const MessageWithAny& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageWithAny* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.MessageWithAny";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_5fserving_2futil_2fclass_5fregistration_5ftest_2eproto);
    return ::descriptor_table_tensorflow_5fserving_2futil_2fclass_5fregistration_5ftest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Any any_field = 1;
  bool has_any_field() const;
  void clear_any_field();
  static const int kAnyFieldFieldNumber = 1;
  const PROTOBUF_NAMESPACE_ID::Any& any_field() const;
  PROTOBUF_NAMESPACE_ID::Any* release_any_field();
  PROTOBUF_NAMESPACE_ID::Any* mutable_any_field();
  void set_allocated_any_field(PROTOBUF_NAMESPACE_ID::Any* any_field);

  // @@protoc_insertion_point(class_scope:tensorflow.serving.MessageWithAny)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  PROTOBUF_NAMESPACE_ID::Any* any_field_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_5fserving_2futil_2fclass_5fregistration_5ftest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Config1

// string string_field = 1;
inline void Config1::clear_string_field() {
  string_field_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Config1::string_field() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.Config1.string_field)
  return string_field_.GetNoArena();
}
inline void Config1::set_string_field(const std::string& value) {
  
  string_field_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.Config1.string_field)
}
inline void Config1::set_string_field(std::string&& value) {
  
  string_field_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.serving.Config1.string_field)
}
inline void Config1::set_string_field(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  string_field_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.Config1.string_field)
}
inline void Config1::set_string_field(const char* value, size_t size) {
  
  string_field_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.Config1.string_field)
}
inline std::string* Config1::mutable_string_field() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.Config1.string_field)
  return string_field_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Config1::release_string_field() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.Config1.string_field)
  
  return string_field_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Config1::set_allocated_string_field(std::string* string_field) {
  if (string_field != nullptr) {
    
  } else {
    
  }
  string_field_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string_field);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.Config1.string_field)
}

// -------------------------------------------------------------------

// Config2

// string string_field = 1;
inline void Config2::clear_string_field() {
  string_field_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Config2::string_field() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.Config2.string_field)
  return string_field_.GetNoArena();
}
inline void Config2::set_string_field(const std::string& value) {
  
  string_field_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.Config2.string_field)
}
inline void Config2::set_string_field(std::string&& value) {
  
  string_field_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.serving.Config2.string_field)
}
inline void Config2::set_string_field(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  string_field_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.Config2.string_field)
}
inline void Config2::set_string_field(const char* value, size_t size) {
  
  string_field_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.Config2.string_field)
}
inline std::string* Config2::mutable_string_field() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.Config2.string_field)
  return string_field_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Config2::release_string_field() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.Config2.string_field)
  
  return string_field_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Config2::set_allocated_string_field(std::string* string_field) {
  if (string_field != nullptr) {
    
  } else {
    
  }
  string_field_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string_field);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.Config2.string_field)
}

// -------------------------------------------------------------------

// MessageWithAny

// .google.protobuf.Any any_field = 1;
inline bool MessageWithAny::has_any_field() const {
  return this != internal_default_instance() && any_field_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Any& MessageWithAny::any_field() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = any_field_;
  // @@protoc_insertion_point(field_get:tensorflow.serving.MessageWithAny.any_field)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Any* MessageWithAny::release_any_field() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.MessageWithAny.any_field)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = any_field_;
  any_field_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* MessageWithAny::mutable_any_field() {
  
  if (any_field_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaNoVirtual());
    any_field_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.MessageWithAny.any_field)
  return any_field_;
}
inline void MessageWithAny::set_allocated_any_field(PROTOBUF_NAMESPACE_ID::Any* any_field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(any_field_);
  }
  if (any_field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      any_field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, any_field, submessage_arena);
    }
    
  } else {
    
  }
  any_field_ = any_field;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.MessageWithAny.any_field)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serving
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2futil_2fclass_5fregistration_5ftest_2eproto
