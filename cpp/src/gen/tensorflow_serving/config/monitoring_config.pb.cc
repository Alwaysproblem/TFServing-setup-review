// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/config/monitoring_config.proto

#include "tensorflow_serving/config/monitoring_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrometheusConfig_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto;
namespace tensorflow {
namespace serving {
class PrometheusConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrometheusConfig> _instance;
} _PrometheusConfig_default_instance_;
class MonitoringConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MonitoringConfig> _instance;
} _MonitoringConfig_default_instance_;
}  // namespace serving
}  // namespace tensorflow
static void InitDefaultsscc_info_MonitoringConfig_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::serving::_MonitoringConfig_default_instance_;
    new (ptr) ::tensorflow::serving::MonitoringConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::serving::MonitoringConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MonitoringConfig_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MonitoringConfig_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto}, {
      &scc_info_PrometheusConfig_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_PrometheusConfig_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::serving::_PrometheusConfig_default_instance_;
    new (ptr) ::tensorflow::serving::PrometheusConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::serving::PrometheusConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrometheusConfig_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PrometheusConfig_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::PrometheusConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::PrometheusConfig, enable_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::PrometheusConfig, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::MonitoringConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::MonitoringConfig, prometheus_config_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::serving::PrometheusConfig)},
  { 7, -1, sizeof(::tensorflow::serving::MonitoringConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::serving::_PrometheusConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::serving::_MonitoringConfig_default_instance_),
};

const char descriptor_table_protodef_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n1tensorflow_serving/config/monitoring_c"
  "onfig.proto\022\022tensorflow.serving\"0\n\020Prome"
  "theusConfig\022\016\n\006enable\030\001 \001(\010\022\014\n\004path\030\002 \001("
  "\t\"S\n\020MonitoringConfig\022\?\n\021prometheus_conf"
  "ig\030\001 \001(\0132$.tensorflow.serving.Prometheus"
  "ConfigB\003\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto_sccs[2] = {
  &scc_info_MonitoringConfig_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto.base,
  &scc_info_PrometheusConfig_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto = {
  false, false, descriptor_table_protodef_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto, "tensorflow_serving/config/monitoring_config.proto", 219,
  &descriptor_table_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto_once, descriptor_table_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto_sccs, descriptor_table_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto::offsets,
  file_level_metadata_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto, 2, file_level_enum_descriptors_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto, file_level_service_descriptors_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto)), true);
namespace tensorflow {
namespace serving {

// ===================================================================

void PrometheusConfig::InitAsDefaultInstance() {
}
class PrometheusConfig::_Internal {
 public:
};

PrometheusConfig::PrometheusConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.PrometheusConfig)
}
PrometheusConfig::PrometheusConfig(const PrometheusConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_path(),
      GetArena());
  }
  enable_ = from.enable_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.PrometheusConfig)
}

void PrometheusConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrometheusConfig_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enable_ = false;
}

PrometheusConfig::~PrometheusConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.PrometheusConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrometheusConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PrometheusConfig::ArenaDtor(void* object) {
  PrometheusConfig* _this = reinterpret_cast< PrometheusConfig* >(object);
  (void)_this;
}
void PrometheusConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrometheusConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrometheusConfig& PrometheusConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrometheusConfig_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PrometheusConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.PrometheusConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  enable_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrometheusConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.serving.PrometheusConfig.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrometheusConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.PrometheusConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable(), target);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.PrometheusConfig.path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.PrometheusConfig)
  return target;
}

size_t PrometheusConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.PrometheusConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrometheusConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.PrometheusConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PrometheusConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrometheusConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.PrometheusConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.PrometheusConfig)
    MergeFrom(*source);
  }
}

void PrometheusConfig::MergeFrom(const PrometheusConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.PrometheusConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
}

void PrometheusConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.PrometheusConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrometheusConfig::CopyFrom(const PrometheusConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.PrometheusConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrometheusConfig::IsInitialized() const {
  return true;
}

void PrometheusConfig::InternalSwap(PrometheusConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(enable_, other->enable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrometheusConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MonitoringConfig::InitAsDefaultInstance() {
  ::tensorflow::serving::_MonitoringConfig_default_instance_._instance.get_mutable()->prometheus_config_ = const_cast< ::tensorflow::serving::PrometheusConfig*>(
      ::tensorflow::serving::PrometheusConfig::internal_default_instance());
}
class MonitoringConfig::_Internal {
 public:
  static const ::tensorflow::serving::PrometheusConfig& prometheus_config(const MonitoringConfig* msg);
};

const ::tensorflow::serving::PrometheusConfig&
MonitoringConfig::_Internal::prometheus_config(const MonitoringConfig* msg) {
  return *msg->prometheus_config_;
}
MonitoringConfig::MonitoringConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.MonitoringConfig)
}
MonitoringConfig::MonitoringConfig(const MonitoringConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_prometheus_config()) {
    prometheus_config_ = new ::tensorflow::serving::PrometheusConfig(*from.prometheus_config_);
  } else {
    prometheus_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.MonitoringConfig)
}

void MonitoringConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MonitoringConfig_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto.base);
  prometheus_config_ = nullptr;
}

MonitoringConfig::~MonitoringConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.MonitoringConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MonitoringConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete prometheus_config_;
}

void MonitoringConfig::ArenaDtor(void* object) {
  MonitoringConfig* _this = reinterpret_cast< MonitoringConfig* >(object);
  (void)_this;
}
void MonitoringConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MonitoringConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MonitoringConfig& MonitoringConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MonitoringConfig_tensorflow_5fserving_2fconfig_2fmonitoring_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void MonitoringConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.MonitoringConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && prometheus_config_ != nullptr) {
    delete prometheus_config_;
  }
  prometheus_config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MonitoringConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.serving.PrometheusConfig prometheus_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_prometheus_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MonitoringConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.MonitoringConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.serving.PrometheusConfig prometheus_config = 1;
  if (this->has_prometheus_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::prometheus_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.MonitoringConfig)
  return target;
}

size_t MonitoringConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.MonitoringConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.serving.PrometheusConfig prometheus_config = 1;
  if (this->has_prometheus_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prometheus_config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MonitoringConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.MonitoringConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MonitoringConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MonitoringConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.MonitoringConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.MonitoringConfig)
    MergeFrom(*source);
  }
}

void MonitoringConfig::MergeFrom(const MonitoringConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.MonitoringConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_prometheus_config()) {
    _internal_mutable_prometheus_config()->::tensorflow::serving::PrometheusConfig::MergeFrom(from._internal_prometheus_config());
  }
}

void MonitoringConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.MonitoringConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonitoringConfig::CopyFrom(const MonitoringConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.MonitoringConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitoringConfig::IsInitialized() const {
  return true;
}

void MonitoringConfig::InternalSwap(MonitoringConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(prometheus_config_, other->prometheus_config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MonitoringConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace serving
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::serving::PrometheusConfig* Arena::CreateMaybeMessage< ::tensorflow::serving::PrometheusConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::PrometheusConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::serving::MonitoringConfig* Arena::CreateMaybeMessage< ::tensorflow::serving::MonitoringConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::MonitoringConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
