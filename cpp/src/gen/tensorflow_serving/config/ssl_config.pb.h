// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/config/ssl_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto;
namespace tensorflow {
namespace serving {
class SSLConfig;
class SSLConfigDefaultTypeInternal;
extern SSLConfigDefaultTypeInternal _SSLConfig_default_instance_;
}  // namespace serving
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::serving::SSLConfig* Arena::CreateMaybeMessage<::tensorflow::serving::SSLConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {
namespace serving {

// ===================================================================

class SSLConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.SSLConfig) */ {
 public:
  SSLConfig();
  virtual ~SSLConfig();

  SSLConfig(const SSLConfig& from);
  SSLConfig(SSLConfig&& from) noexcept
    : SSLConfig() {
    *this = ::std::move(from);
  }

  inline SSLConfig& operator=(const SSLConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSLConfig& operator=(SSLConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSLConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSLConfig* internal_default_instance() {
    return reinterpret_cast<const SSLConfig*>(
               &_SSLConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(SSLConfig* other);
  void Swap(SSLConfig* other);
  friend void swap(SSLConfig& a, SSLConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SSLConfig* New() const final {
    return CreateMaybeMessage<SSLConfig>(nullptr);
  }

  SSLConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSLConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSLConfig& from);
  void MergeFrom(const SSLConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSLConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.SSLConfig";
  }
  protected:
  explicit SSLConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto);
    return ::descriptor_table_tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string server_key = 1;
  void clear_server_key();
  static const int kServerKeyFieldNumber = 1;
  const std::string& server_key() const;
  void set_server_key(const std::string& value);
  void set_server_key(std::string&& value);
  void set_server_key(const char* value);
  void set_server_key(const char* value, size_t size);
  std::string* mutable_server_key();
  std::string* release_server_key();
  void set_allocated_server_key(std::string* server_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_server_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_server_key(
      std::string* server_key);

  // string server_cert = 2;
  void clear_server_cert();
  static const int kServerCertFieldNumber = 2;
  const std::string& server_cert() const;
  void set_server_cert(const std::string& value);
  void set_server_cert(std::string&& value);
  void set_server_cert(const char* value);
  void set_server_cert(const char* value, size_t size);
  std::string* mutable_server_cert();
  std::string* release_server_cert();
  void set_allocated_server_cert(std::string* server_cert);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_server_cert();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_server_cert(
      std::string* server_cert);

  // string custom_ca = 3;
  void clear_custom_ca();
  static const int kCustomCaFieldNumber = 3;
  const std::string& custom_ca() const;
  void set_custom_ca(const std::string& value);
  void set_custom_ca(std::string&& value);
  void set_custom_ca(const char* value);
  void set_custom_ca(const char* value, size_t size);
  std::string* mutable_custom_ca();
  std::string* release_custom_ca();
  void set_allocated_custom_ca(std::string* custom_ca);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_custom_ca();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_custom_ca(
      std::string* custom_ca);

  // bool client_verify = 4;
  void clear_client_verify();
  static const int kClientVerifyFieldNumber = 4;
  bool client_verify() const;
  void set_client_verify(bool value);

  // @@protoc_insertion_point(class_scope:tensorflow.serving.SSLConfig)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_cert_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_ca_;
  bool client_verify_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SSLConfig

// string server_key = 1;
inline void SSLConfig::clear_server_key() {
  server_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& SSLConfig::server_key() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SSLConfig.server_key)
  return server_key_.Get();
}
inline void SSLConfig::set_server_key(const std::string& value) {
  
  server_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.serving.SSLConfig.server_key)
}
inline void SSLConfig::set_server_key(std::string&& value) {
  
  server_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.serving.SSLConfig.server_key)
}
inline void SSLConfig::set_server_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.SSLConfig.server_key)
}
inline void SSLConfig::set_server_key(const char* value,
    size_t size) {
  
  server_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.SSLConfig.server_key)
}
inline std::string* SSLConfig::mutable_server_key() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SSLConfig.server_key)
  return server_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* SSLConfig::release_server_key() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.SSLConfig.server_key)
  
  return server_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void SSLConfig::set_allocated_server_key(std::string* server_key) {
  if (server_key != nullptr) {
    
  } else {
    
  }
  server_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_key,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.SSLConfig.server_key)
}
inline std::string* SSLConfig::unsafe_arena_release_server_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.SSLConfig.server_key)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return server_key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SSLConfig::unsafe_arena_set_allocated_server_key(
    std::string* server_key) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (server_key != nullptr) {
    
  } else {
    
  }
  server_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      server_key, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.SSLConfig.server_key)
}

// string server_cert = 2;
inline void SSLConfig::clear_server_cert() {
  server_cert_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& SSLConfig::server_cert() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SSLConfig.server_cert)
  return server_cert_.Get();
}
inline void SSLConfig::set_server_cert(const std::string& value) {
  
  server_cert_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.serving.SSLConfig.server_cert)
}
inline void SSLConfig::set_server_cert(std::string&& value) {
  
  server_cert_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.serving.SSLConfig.server_cert)
}
inline void SSLConfig::set_server_cert(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_cert_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.SSLConfig.server_cert)
}
inline void SSLConfig::set_server_cert(const char* value,
    size_t size) {
  
  server_cert_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.SSLConfig.server_cert)
}
inline std::string* SSLConfig::mutable_server_cert() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SSLConfig.server_cert)
  return server_cert_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* SSLConfig::release_server_cert() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.SSLConfig.server_cert)
  
  return server_cert_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void SSLConfig::set_allocated_server_cert(std::string* server_cert) {
  if (server_cert != nullptr) {
    
  } else {
    
  }
  server_cert_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_cert,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.SSLConfig.server_cert)
}
inline std::string* SSLConfig::unsafe_arena_release_server_cert() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.SSLConfig.server_cert)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return server_cert_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SSLConfig::unsafe_arena_set_allocated_server_cert(
    std::string* server_cert) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (server_cert != nullptr) {
    
  } else {
    
  }
  server_cert_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      server_cert, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.SSLConfig.server_cert)
}

// string custom_ca = 3;
inline void SSLConfig::clear_custom_ca() {
  custom_ca_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& SSLConfig::custom_ca() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SSLConfig.custom_ca)
  return custom_ca_.Get();
}
inline void SSLConfig::set_custom_ca(const std::string& value) {
  
  custom_ca_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.serving.SSLConfig.custom_ca)
}
inline void SSLConfig::set_custom_ca(std::string&& value) {
  
  custom_ca_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.serving.SSLConfig.custom_ca)
}
inline void SSLConfig::set_custom_ca(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  custom_ca_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.SSLConfig.custom_ca)
}
inline void SSLConfig::set_custom_ca(const char* value,
    size_t size) {
  
  custom_ca_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.SSLConfig.custom_ca)
}
inline std::string* SSLConfig::mutable_custom_ca() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SSLConfig.custom_ca)
  return custom_ca_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* SSLConfig::release_custom_ca() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.SSLConfig.custom_ca)
  
  return custom_ca_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void SSLConfig::set_allocated_custom_ca(std::string* custom_ca) {
  if (custom_ca != nullptr) {
    
  } else {
    
  }
  custom_ca_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), custom_ca,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.SSLConfig.custom_ca)
}
inline std::string* SSLConfig::unsafe_arena_release_custom_ca() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.SSLConfig.custom_ca)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return custom_ca_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SSLConfig::unsafe_arena_set_allocated_custom_ca(
    std::string* custom_ca) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (custom_ca != nullptr) {
    
  } else {
    
  }
  custom_ca_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      custom_ca, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.SSLConfig.custom_ca)
}

// bool client_verify = 4;
inline void SSLConfig::clear_client_verify() {
  client_verify_ = false;
}
inline bool SSLConfig::client_verify() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SSLConfig.client_verify)
  return client_verify_;
}
inline void SSLConfig::set_client_verify(bool value) {
  
  client_verify_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.serving.SSLConfig.client_verify)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace serving
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto
