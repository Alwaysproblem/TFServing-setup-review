// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tensorflow/core/protobuf/master_service.proto
// Original file comments:
// Copyright 2016 The TensorFlow Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ==============================================================================
//
#ifndef GRPC_tensorflow_2fcore_2fprotobuf_2fmaster_5fservice_2eproto__INCLUDED
#define GRPC_tensorflow_2fcore_2fprotobuf_2fmaster_5fservice_2eproto__INCLUDED

#include "tensorflow/core/protobuf/master_service.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace tensorflow {
namespace grpc {

// //////////////////////////////////////////////////////////////////////////////
//
// MasterService defines a TensorFlow service with which a client can
// interact to execute a distributed TensorFlow computation.
//
// A master service keeps track of multiple "master sessions". Each
// session encapsulates a computation graph and its associated state,
// and typically corresponds to a single "client session" (e.g. a
// `tensorflow::Session` instance).
//
// A session is responsible for the following:
// * assigning each node to a device (locally or remotely) using a
//   placement algorithm. This may make decisions based on collected
//   statistics from the workers in the system (e.g., memory usage,
//   bandwidth consumption, etc.)
//
// * inserting intermediate nodes and edges to support cross-device
//   and cross-process data flows and resource management.
//
// * issuing commands to workers to execute the subgraphs associated
//   with those workers.
//
// Typically, a client carries out an iterative computation
// (e.g. training) by invoking RPCs against the master in a
// client-side loop. The client first creates a client session that
// connects to a particular master (using gRPC for example). The
// master creates a corresponding master session that is hosted on
// the master and caches state between the client's invocations.
//
// After the session is established, the master returns an opaque
// handle to the client that can be used to associate the client and
// master sessions.
//
// The client may send an initial graph to the master in the
// CreateSession call, and add nodes to the graph using ExtendSession.
//
// The most frequent operation a master is "RunStep", which implements
// the `Session::Run()` API. It supports feeding in arguments,
// executing a dataflow computation, and fetching arguments.
//
// Finally, when the client no longer needs the session, it should
// close the session by invoking CloseSession, which allows the master
// to reclaim resources associated with the session. The master may
// implement a garbage collection scheme that closes sessions that
// have been inactive for some time.
//
// For example, the following pseudo-code illustrates how a client
// interacts with a master:
//
// stub = NewStub("/job:mnist/replica:0/task:0")
// {handle} = stub->CreateSession({graph_def})
// do {
//   stub->RunStep({handle, {feeds}, {fetches}})
//   // The client can evaluate a predicate locally, based on the
//   // result of `fetches`, to determine whether to terminate. For
//   // example, it might fetch the loss and evaluate whether it is less
//   // than some threshold.
// } while (!should_stop({fetches}));
// stub->CloseSession({handle})
//
// //////////////////////////////////////////////////////////////////////////////
//
class MasterService final {
 public:
  static constexpr char const* service_full_name() {
    return "tensorflow.grpc.MasterService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Creates a session.
    virtual ::grpc::Status CreateSession(::grpc::ClientContext* context, const ::tensorflow::CreateSessionRequest& request, ::tensorflow::CreateSessionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CreateSessionResponse>> AsyncCreateSession(::grpc::ClientContext* context, const ::tensorflow::CreateSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CreateSessionResponse>>(AsyncCreateSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CreateSessionResponse>> PrepareAsyncCreateSession(::grpc::ClientContext* context, const ::tensorflow::CreateSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CreateSessionResponse>>(PrepareAsyncCreateSessionRaw(context, request, cq));
    }
    // Extends a session.
    virtual ::grpc::Status ExtendSession(::grpc::ClientContext* context, const ::tensorflow::ExtendSessionRequest& request, ::tensorflow::ExtendSessionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::ExtendSessionResponse>> AsyncExtendSession(::grpc::ClientContext* context, const ::tensorflow::ExtendSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::ExtendSessionResponse>>(AsyncExtendSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::ExtendSessionResponse>> PrepareAsyncExtendSession(::grpc::ClientContext* context, const ::tensorflow::ExtendSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::ExtendSessionResponse>>(PrepareAsyncExtendSessionRaw(context, request, cq));
    }
    // Prepares future partial run calls.
    virtual ::grpc::Status PartialRunSetup(::grpc::ClientContext* context, const ::tensorflow::PartialRunSetupRequest& request, ::tensorflow::PartialRunSetupResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::PartialRunSetupResponse>> AsyncPartialRunSetup(::grpc::ClientContext* context, const ::tensorflow::PartialRunSetupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::PartialRunSetupResponse>>(AsyncPartialRunSetupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::PartialRunSetupResponse>> PrepareAsyncPartialRunSetup(::grpc::ClientContext* context, const ::tensorflow::PartialRunSetupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::PartialRunSetupResponse>>(PrepareAsyncPartialRunSetupRaw(context, request, cq));
    }
    // Drives the graph computation.
    virtual ::grpc::Status RunStep(::grpc::ClientContext* context, const ::tensorflow::RunStepRequest& request, ::tensorflow::RunStepResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RunStepResponse>> AsyncRunStep(::grpc::ClientContext* context, const ::tensorflow::RunStepRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RunStepResponse>>(AsyncRunStepRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RunStepResponse>> PrepareAsyncRunStep(::grpc::ClientContext* context, const ::tensorflow::RunStepRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RunStepResponse>>(PrepareAsyncRunStepRaw(context, request, cq));
    }
    // Closes a session.
    virtual ::grpc::Status CloseSession(::grpc::ClientContext* context, const ::tensorflow::CloseSessionRequest& request, ::tensorflow::CloseSessionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CloseSessionResponse>> AsyncCloseSession(::grpc::ClientContext* context, const ::tensorflow::CloseSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CloseSessionResponse>>(AsyncCloseSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CloseSessionResponse>> PrepareAsyncCloseSession(::grpc::ClientContext* context, const ::tensorflow::CloseSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CloseSessionResponse>>(PrepareAsyncCloseSessionRaw(context, request, cq));
    }
    // List the devices usable by the master.
    virtual ::grpc::Status ListDevices(::grpc::ClientContext* context, const ::tensorflow::ListDevicesRequest& request, ::tensorflow::ListDevicesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::ListDevicesResponse>> AsyncListDevices(::grpc::ClientContext* context, const ::tensorflow::ListDevicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::ListDevicesResponse>>(AsyncListDevicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::ListDevicesResponse>> PrepareAsyncListDevices(::grpc::ClientContext* context, const ::tensorflow::ListDevicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::ListDevicesResponse>>(PrepareAsyncListDevicesRaw(context, request, cq));
    }
    // Close and abandon all existing sessions.  Ongoing computations
    // will no longer affect fresh ones via the resources in containers listed in
    // the ResetRequest.  See ResetRequest for more details.
    virtual ::grpc::Status Reset(::grpc::ClientContext* context, const ::tensorflow::ResetRequest& request, ::tensorflow::ResetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::ResetResponse>> AsyncReset(::grpc::ClientContext* context, const ::tensorflow::ResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::ResetResponse>>(AsyncResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::ResetResponse>> PrepareAsyncReset(::grpc::ClientContext* context, const ::tensorflow::ResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::ResetResponse>>(PrepareAsyncResetRaw(context, request, cq));
    }
    // Registers a callable for execution with RunCallable.
    virtual ::grpc::Status MakeCallable(::grpc::ClientContext* context, const ::tensorflow::MakeCallableRequest& request, ::tensorflow::MakeCallableResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::MakeCallableResponse>> AsyncMakeCallable(::grpc::ClientContext* context, const ::tensorflow::MakeCallableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::MakeCallableResponse>>(AsyncMakeCallableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::MakeCallableResponse>> PrepareAsyncMakeCallable(::grpc::ClientContext* context, const ::tensorflow::MakeCallableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::MakeCallableResponse>>(PrepareAsyncMakeCallableRaw(context, request, cq));
    }
    // Executes a callable registered with MakeCallable.
    virtual ::grpc::Status RunCallable(::grpc::ClientContext* context, const ::tensorflow::RunCallableRequest& request, ::tensorflow::RunCallableResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RunCallableResponse>> AsyncRunCallable(::grpc::ClientContext* context, const ::tensorflow::RunCallableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RunCallableResponse>>(AsyncRunCallableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RunCallableResponse>> PrepareAsyncRunCallable(::grpc::ClientContext* context, const ::tensorflow::RunCallableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RunCallableResponse>>(PrepareAsyncRunCallableRaw(context, request, cq));
    }
    // Frees resources associated with a callable registered with MakeCallable.
    virtual ::grpc::Status ReleaseCallable(::grpc::ClientContext* context, const ::tensorflow::ReleaseCallableRequest& request, ::tensorflow::ReleaseCallableResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::ReleaseCallableResponse>> AsyncReleaseCallable(::grpc::ClientContext* context, const ::tensorflow::ReleaseCallableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::ReleaseCallableResponse>>(AsyncReleaseCallableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::ReleaseCallableResponse>> PrepareAsyncReleaseCallable(::grpc::ClientContext* context, const ::tensorflow::ReleaseCallableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::ReleaseCallableResponse>>(PrepareAsyncReleaseCallableRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Creates a session.
      virtual void CreateSession(::grpc::ClientContext* context, const ::tensorflow::CreateSessionRequest* request, ::tensorflow::CreateSessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::CreateSessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateSession(::grpc::ClientContext* context, const ::tensorflow::CreateSessionRequest* request, ::tensorflow::CreateSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateSession(::grpc::ClientContext* context, const ::tensorflow::CreateSessionRequest* request, ::tensorflow::CreateSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::CreateSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::CreateSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Extends a session.
      virtual void ExtendSession(::grpc::ClientContext* context, const ::tensorflow::ExtendSessionRequest* request, ::tensorflow::ExtendSessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExtendSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::ExtendSessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ExtendSession(::grpc::ClientContext* context, const ::tensorflow::ExtendSessionRequest* request, ::tensorflow::ExtendSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ExtendSession(::grpc::ClientContext* context, const ::tensorflow::ExtendSessionRequest* request, ::tensorflow::ExtendSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ExtendSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::ExtendSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ExtendSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::ExtendSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Prepares future partial run calls.
      virtual void PartialRunSetup(::grpc::ClientContext* context, const ::tensorflow::PartialRunSetupRequest* request, ::tensorflow::PartialRunSetupResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PartialRunSetup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::PartialRunSetupResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PartialRunSetup(::grpc::ClientContext* context, const ::tensorflow::PartialRunSetupRequest* request, ::tensorflow::PartialRunSetupResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PartialRunSetup(::grpc::ClientContext* context, const ::tensorflow::PartialRunSetupRequest* request, ::tensorflow::PartialRunSetupResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PartialRunSetup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::PartialRunSetupResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PartialRunSetup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::PartialRunSetupResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Drives the graph computation.
      virtual void RunStep(::grpc::ClientContext* context, const ::tensorflow::RunStepRequest* request, ::tensorflow::RunStepResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RunStep(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::RunStepResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RunStep(::grpc::ClientContext* context, const ::tensorflow::RunStepRequest* request, ::tensorflow::RunStepResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RunStep(::grpc::ClientContext* context, const ::tensorflow::RunStepRequest* request, ::tensorflow::RunStepResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RunStep(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::RunStepResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RunStep(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::RunStepResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Closes a session.
      virtual void CloseSession(::grpc::ClientContext* context, const ::tensorflow::CloseSessionRequest* request, ::tensorflow::CloseSessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CloseSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::CloseSessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CloseSession(::grpc::ClientContext* context, const ::tensorflow::CloseSessionRequest* request, ::tensorflow::CloseSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CloseSession(::grpc::ClientContext* context, const ::tensorflow::CloseSessionRequest* request, ::tensorflow::CloseSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CloseSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::CloseSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CloseSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::CloseSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // List the devices usable by the master.
      virtual void ListDevices(::grpc::ClientContext* context, const ::tensorflow::ListDevicesRequest* request, ::tensorflow::ListDevicesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListDevices(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::ListDevicesResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListDevices(::grpc::ClientContext* context, const ::tensorflow::ListDevicesRequest* request, ::tensorflow::ListDevicesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListDevices(::grpc::ClientContext* context, const ::tensorflow::ListDevicesRequest* request, ::tensorflow::ListDevicesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListDevices(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::ListDevicesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListDevices(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::ListDevicesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Close and abandon all existing sessions.  Ongoing computations
      // will no longer affect fresh ones via the resources in containers listed in
      // the ResetRequest.  See ResetRequest for more details.
      virtual void Reset(::grpc::ClientContext* context, const ::tensorflow::ResetRequest* request, ::tensorflow::ResetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::ResetResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Reset(::grpc::ClientContext* context, const ::tensorflow::ResetRequest* request, ::tensorflow::ResetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Reset(::grpc::ClientContext* context, const ::tensorflow::ResetRequest* request, ::tensorflow::ResetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::ResetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::ResetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Registers a callable for execution with RunCallable.
      virtual void MakeCallable(::grpc::ClientContext* context, const ::tensorflow::MakeCallableRequest* request, ::tensorflow::MakeCallableResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MakeCallable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::MakeCallableResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void MakeCallable(::grpc::ClientContext* context, const ::tensorflow::MakeCallableRequest* request, ::tensorflow::MakeCallableResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void MakeCallable(::grpc::ClientContext* context, const ::tensorflow::MakeCallableRequest* request, ::tensorflow::MakeCallableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void MakeCallable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::MakeCallableResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void MakeCallable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::MakeCallableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Executes a callable registered with MakeCallable.
      virtual void RunCallable(::grpc::ClientContext* context, const ::tensorflow::RunCallableRequest* request, ::tensorflow::RunCallableResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RunCallable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::RunCallableResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RunCallable(::grpc::ClientContext* context, const ::tensorflow::RunCallableRequest* request, ::tensorflow::RunCallableResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RunCallable(::grpc::ClientContext* context, const ::tensorflow::RunCallableRequest* request, ::tensorflow::RunCallableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RunCallable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::RunCallableResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RunCallable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::RunCallableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Frees resources associated with a callable registered with MakeCallable.
      virtual void ReleaseCallable(::grpc::ClientContext* context, const ::tensorflow::ReleaseCallableRequest* request, ::tensorflow::ReleaseCallableResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReleaseCallable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::ReleaseCallableResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReleaseCallable(::grpc::ClientContext* context, const ::tensorflow::ReleaseCallableRequest* request, ::tensorflow::ReleaseCallableResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReleaseCallable(::grpc::ClientContext* context, const ::tensorflow::ReleaseCallableRequest* request, ::tensorflow::ReleaseCallableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReleaseCallable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::ReleaseCallableResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReleaseCallable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::ReleaseCallableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CreateSessionResponse>* AsyncCreateSessionRaw(::grpc::ClientContext* context, const ::tensorflow::CreateSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CreateSessionResponse>* PrepareAsyncCreateSessionRaw(::grpc::ClientContext* context, const ::tensorflow::CreateSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::ExtendSessionResponse>* AsyncExtendSessionRaw(::grpc::ClientContext* context, const ::tensorflow::ExtendSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::ExtendSessionResponse>* PrepareAsyncExtendSessionRaw(::grpc::ClientContext* context, const ::tensorflow::ExtendSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::PartialRunSetupResponse>* AsyncPartialRunSetupRaw(::grpc::ClientContext* context, const ::tensorflow::PartialRunSetupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::PartialRunSetupResponse>* PrepareAsyncPartialRunSetupRaw(::grpc::ClientContext* context, const ::tensorflow::PartialRunSetupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RunStepResponse>* AsyncRunStepRaw(::grpc::ClientContext* context, const ::tensorflow::RunStepRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RunStepResponse>* PrepareAsyncRunStepRaw(::grpc::ClientContext* context, const ::tensorflow::RunStepRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CloseSessionResponse>* AsyncCloseSessionRaw(::grpc::ClientContext* context, const ::tensorflow::CloseSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CloseSessionResponse>* PrepareAsyncCloseSessionRaw(::grpc::ClientContext* context, const ::tensorflow::CloseSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::ListDevicesResponse>* AsyncListDevicesRaw(::grpc::ClientContext* context, const ::tensorflow::ListDevicesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::ListDevicesResponse>* PrepareAsyncListDevicesRaw(::grpc::ClientContext* context, const ::tensorflow::ListDevicesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::ResetResponse>* AsyncResetRaw(::grpc::ClientContext* context, const ::tensorflow::ResetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::ResetResponse>* PrepareAsyncResetRaw(::grpc::ClientContext* context, const ::tensorflow::ResetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::MakeCallableResponse>* AsyncMakeCallableRaw(::grpc::ClientContext* context, const ::tensorflow::MakeCallableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::MakeCallableResponse>* PrepareAsyncMakeCallableRaw(::grpc::ClientContext* context, const ::tensorflow::MakeCallableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RunCallableResponse>* AsyncRunCallableRaw(::grpc::ClientContext* context, const ::tensorflow::RunCallableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RunCallableResponse>* PrepareAsyncRunCallableRaw(::grpc::ClientContext* context, const ::tensorflow::RunCallableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::ReleaseCallableResponse>* AsyncReleaseCallableRaw(::grpc::ClientContext* context, const ::tensorflow::ReleaseCallableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::ReleaseCallableResponse>* PrepareAsyncReleaseCallableRaw(::grpc::ClientContext* context, const ::tensorflow::ReleaseCallableRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateSession(::grpc::ClientContext* context, const ::tensorflow::CreateSessionRequest& request, ::tensorflow::CreateSessionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::CreateSessionResponse>> AsyncCreateSession(::grpc::ClientContext* context, const ::tensorflow::CreateSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::CreateSessionResponse>>(AsyncCreateSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::CreateSessionResponse>> PrepareAsyncCreateSession(::grpc::ClientContext* context, const ::tensorflow::CreateSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::CreateSessionResponse>>(PrepareAsyncCreateSessionRaw(context, request, cq));
    }
    ::grpc::Status ExtendSession(::grpc::ClientContext* context, const ::tensorflow::ExtendSessionRequest& request, ::tensorflow::ExtendSessionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::ExtendSessionResponse>> AsyncExtendSession(::grpc::ClientContext* context, const ::tensorflow::ExtendSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::ExtendSessionResponse>>(AsyncExtendSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::ExtendSessionResponse>> PrepareAsyncExtendSession(::grpc::ClientContext* context, const ::tensorflow::ExtendSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::ExtendSessionResponse>>(PrepareAsyncExtendSessionRaw(context, request, cq));
    }
    ::grpc::Status PartialRunSetup(::grpc::ClientContext* context, const ::tensorflow::PartialRunSetupRequest& request, ::tensorflow::PartialRunSetupResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::PartialRunSetupResponse>> AsyncPartialRunSetup(::grpc::ClientContext* context, const ::tensorflow::PartialRunSetupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::PartialRunSetupResponse>>(AsyncPartialRunSetupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::PartialRunSetupResponse>> PrepareAsyncPartialRunSetup(::grpc::ClientContext* context, const ::tensorflow::PartialRunSetupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::PartialRunSetupResponse>>(PrepareAsyncPartialRunSetupRaw(context, request, cq));
    }
    ::grpc::Status RunStep(::grpc::ClientContext* context, const ::tensorflow::RunStepRequest& request, ::tensorflow::RunStepResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::RunStepResponse>> AsyncRunStep(::grpc::ClientContext* context, const ::tensorflow::RunStepRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::RunStepResponse>>(AsyncRunStepRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::RunStepResponse>> PrepareAsyncRunStep(::grpc::ClientContext* context, const ::tensorflow::RunStepRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::RunStepResponse>>(PrepareAsyncRunStepRaw(context, request, cq));
    }
    ::grpc::Status CloseSession(::grpc::ClientContext* context, const ::tensorflow::CloseSessionRequest& request, ::tensorflow::CloseSessionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::CloseSessionResponse>> AsyncCloseSession(::grpc::ClientContext* context, const ::tensorflow::CloseSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::CloseSessionResponse>>(AsyncCloseSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::CloseSessionResponse>> PrepareAsyncCloseSession(::grpc::ClientContext* context, const ::tensorflow::CloseSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::CloseSessionResponse>>(PrepareAsyncCloseSessionRaw(context, request, cq));
    }
    ::grpc::Status ListDevices(::grpc::ClientContext* context, const ::tensorflow::ListDevicesRequest& request, ::tensorflow::ListDevicesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::ListDevicesResponse>> AsyncListDevices(::grpc::ClientContext* context, const ::tensorflow::ListDevicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::ListDevicesResponse>>(AsyncListDevicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::ListDevicesResponse>> PrepareAsyncListDevices(::grpc::ClientContext* context, const ::tensorflow::ListDevicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::ListDevicesResponse>>(PrepareAsyncListDevicesRaw(context, request, cq));
    }
    ::grpc::Status Reset(::grpc::ClientContext* context, const ::tensorflow::ResetRequest& request, ::tensorflow::ResetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::ResetResponse>> AsyncReset(::grpc::ClientContext* context, const ::tensorflow::ResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::ResetResponse>>(AsyncResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::ResetResponse>> PrepareAsyncReset(::grpc::ClientContext* context, const ::tensorflow::ResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::ResetResponse>>(PrepareAsyncResetRaw(context, request, cq));
    }
    ::grpc::Status MakeCallable(::grpc::ClientContext* context, const ::tensorflow::MakeCallableRequest& request, ::tensorflow::MakeCallableResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::MakeCallableResponse>> AsyncMakeCallable(::grpc::ClientContext* context, const ::tensorflow::MakeCallableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::MakeCallableResponse>>(AsyncMakeCallableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::MakeCallableResponse>> PrepareAsyncMakeCallable(::grpc::ClientContext* context, const ::tensorflow::MakeCallableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::MakeCallableResponse>>(PrepareAsyncMakeCallableRaw(context, request, cq));
    }
    ::grpc::Status RunCallable(::grpc::ClientContext* context, const ::tensorflow::RunCallableRequest& request, ::tensorflow::RunCallableResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::RunCallableResponse>> AsyncRunCallable(::grpc::ClientContext* context, const ::tensorflow::RunCallableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::RunCallableResponse>>(AsyncRunCallableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::RunCallableResponse>> PrepareAsyncRunCallable(::grpc::ClientContext* context, const ::tensorflow::RunCallableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::RunCallableResponse>>(PrepareAsyncRunCallableRaw(context, request, cq));
    }
    ::grpc::Status ReleaseCallable(::grpc::ClientContext* context, const ::tensorflow::ReleaseCallableRequest& request, ::tensorflow::ReleaseCallableResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::ReleaseCallableResponse>> AsyncReleaseCallable(::grpc::ClientContext* context, const ::tensorflow::ReleaseCallableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::ReleaseCallableResponse>>(AsyncReleaseCallableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::ReleaseCallableResponse>> PrepareAsyncReleaseCallable(::grpc::ClientContext* context, const ::tensorflow::ReleaseCallableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::ReleaseCallableResponse>>(PrepareAsyncReleaseCallableRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateSession(::grpc::ClientContext* context, const ::tensorflow::CreateSessionRequest* request, ::tensorflow::CreateSessionResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::CreateSessionResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateSession(::grpc::ClientContext* context, const ::tensorflow::CreateSessionRequest* request, ::tensorflow::CreateSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateSession(::grpc::ClientContext* context, const ::tensorflow::CreateSessionRequest* request, ::tensorflow::CreateSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::CreateSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::CreateSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ExtendSession(::grpc::ClientContext* context, const ::tensorflow::ExtendSessionRequest* request, ::tensorflow::ExtendSessionResponse* response, std::function<void(::grpc::Status)>) override;
      void ExtendSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::ExtendSessionResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ExtendSession(::grpc::ClientContext* context, const ::tensorflow::ExtendSessionRequest* request, ::tensorflow::ExtendSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ExtendSession(::grpc::ClientContext* context, const ::tensorflow::ExtendSessionRequest* request, ::tensorflow::ExtendSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ExtendSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::ExtendSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ExtendSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::ExtendSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void PartialRunSetup(::grpc::ClientContext* context, const ::tensorflow::PartialRunSetupRequest* request, ::tensorflow::PartialRunSetupResponse* response, std::function<void(::grpc::Status)>) override;
      void PartialRunSetup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::PartialRunSetupResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PartialRunSetup(::grpc::ClientContext* context, const ::tensorflow::PartialRunSetupRequest* request, ::tensorflow::PartialRunSetupResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PartialRunSetup(::grpc::ClientContext* context, const ::tensorflow::PartialRunSetupRequest* request, ::tensorflow::PartialRunSetupResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PartialRunSetup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::PartialRunSetupResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PartialRunSetup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::PartialRunSetupResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RunStep(::grpc::ClientContext* context, const ::tensorflow::RunStepRequest* request, ::tensorflow::RunStepResponse* response, std::function<void(::grpc::Status)>) override;
      void RunStep(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::RunStepResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RunStep(::grpc::ClientContext* context, const ::tensorflow::RunStepRequest* request, ::tensorflow::RunStepResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RunStep(::grpc::ClientContext* context, const ::tensorflow::RunStepRequest* request, ::tensorflow::RunStepResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RunStep(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::RunStepResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RunStep(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::RunStepResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CloseSession(::grpc::ClientContext* context, const ::tensorflow::CloseSessionRequest* request, ::tensorflow::CloseSessionResponse* response, std::function<void(::grpc::Status)>) override;
      void CloseSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::CloseSessionResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CloseSession(::grpc::ClientContext* context, const ::tensorflow::CloseSessionRequest* request, ::tensorflow::CloseSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CloseSession(::grpc::ClientContext* context, const ::tensorflow::CloseSessionRequest* request, ::tensorflow::CloseSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CloseSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::CloseSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CloseSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::CloseSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ListDevices(::grpc::ClientContext* context, const ::tensorflow::ListDevicesRequest* request, ::tensorflow::ListDevicesResponse* response, std::function<void(::grpc::Status)>) override;
      void ListDevices(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::ListDevicesResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListDevices(::grpc::ClientContext* context, const ::tensorflow::ListDevicesRequest* request, ::tensorflow::ListDevicesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListDevices(::grpc::ClientContext* context, const ::tensorflow::ListDevicesRequest* request, ::tensorflow::ListDevicesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListDevices(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::ListDevicesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListDevices(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::ListDevicesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Reset(::grpc::ClientContext* context, const ::tensorflow::ResetRequest* request, ::tensorflow::ResetResponse* response, std::function<void(::grpc::Status)>) override;
      void Reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::ResetResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Reset(::grpc::ClientContext* context, const ::tensorflow::ResetRequest* request, ::tensorflow::ResetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Reset(::grpc::ClientContext* context, const ::tensorflow::ResetRequest* request, ::tensorflow::ResetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::ResetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::ResetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void MakeCallable(::grpc::ClientContext* context, const ::tensorflow::MakeCallableRequest* request, ::tensorflow::MakeCallableResponse* response, std::function<void(::grpc::Status)>) override;
      void MakeCallable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::MakeCallableResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void MakeCallable(::grpc::ClientContext* context, const ::tensorflow::MakeCallableRequest* request, ::tensorflow::MakeCallableResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void MakeCallable(::grpc::ClientContext* context, const ::tensorflow::MakeCallableRequest* request, ::tensorflow::MakeCallableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void MakeCallable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::MakeCallableResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void MakeCallable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::MakeCallableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RunCallable(::grpc::ClientContext* context, const ::tensorflow::RunCallableRequest* request, ::tensorflow::RunCallableResponse* response, std::function<void(::grpc::Status)>) override;
      void RunCallable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::RunCallableResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RunCallable(::grpc::ClientContext* context, const ::tensorflow::RunCallableRequest* request, ::tensorflow::RunCallableResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RunCallable(::grpc::ClientContext* context, const ::tensorflow::RunCallableRequest* request, ::tensorflow::RunCallableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RunCallable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::RunCallableResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RunCallable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::RunCallableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ReleaseCallable(::grpc::ClientContext* context, const ::tensorflow::ReleaseCallableRequest* request, ::tensorflow::ReleaseCallableResponse* response, std::function<void(::grpc::Status)>) override;
      void ReleaseCallable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::ReleaseCallableResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReleaseCallable(::grpc::ClientContext* context, const ::tensorflow::ReleaseCallableRequest* request, ::tensorflow::ReleaseCallableResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReleaseCallable(::grpc::ClientContext* context, const ::tensorflow::ReleaseCallableRequest* request, ::tensorflow::ReleaseCallableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReleaseCallable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::ReleaseCallableResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReleaseCallable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tensorflow::ReleaseCallableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::tensorflow::CreateSessionResponse>* AsyncCreateSessionRaw(::grpc::ClientContext* context, const ::tensorflow::CreateSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::CreateSessionResponse>* PrepareAsyncCreateSessionRaw(::grpc::ClientContext* context, const ::tensorflow::CreateSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::ExtendSessionResponse>* AsyncExtendSessionRaw(::grpc::ClientContext* context, const ::tensorflow::ExtendSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::ExtendSessionResponse>* PrepareAsyncExtendSessionRaw(::grpc::ClientContext* context, const ::tensorflow::ExtendSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::PartialRunSetupResponse>* AsyncPartialRunSetupRaw(::grpc::ClientContext* context, const ::tensorflow::PartialRunSetupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::PartialRunSetupResponse>* PrepareAsyncPartialRunSetupRaw(::grpc::ClientContext* context, const ::tensorflow::PartialRunSetupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::RunStepResponse>* AsyncRunStepRaw(::grpc::ClientContext* context, const ::tensorflow::RunStepRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::RunStepResponse>* PrepareAsyncRunStepRaw(::grpc::ClientContext* context, const ::tensorflow::RunStepRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::CloseSessionResponse>* AsyncCloseSessionRaw(::grpc::ClientContext* context, const ::tensorflow::CloseSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::CloseSessionResponse>* PrepareAsyncCloseSessionRaw(::grpc::ClientContext* context, const ::tensorflow::CloseSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::ListDevicesResponse>* AsyncListDevicesRaw(::grpc::ClientContext* context, const ::tensorflow::ListDevicesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::ListDevicesResponse>* PrepareAsyncListDevicesRaw(::grpc::ClientContext* context, const ::tensorflow::ListDevicesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::ResetResponse>* AsyncResetRaw(::grpc::ClientContext* context, const ::tensorflow::ResetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::ResetResponse>* PrepareAsyncResetRaw(::grpc::ClientContext* context, const ::tensorflow::ResetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::MakeCallableResponse>* AsyncMakeCallableRaw(::grpc::ClientContext* context, const ::tensorflow::MakeCallableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::MakeCallableResponse>* PrepareAsyncMakeCallableRaw(::grpc::ClientContext* context, const ::tensorflow::MakeCallableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::RunCallableResponse>* AsyncRunCallableRaw(::grpc::ClientContext* context, const ::tensorflow::RunCallableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::RunCallableResponse>* PrepareAsyncRunCallableRaw(::grpc::ClientContext* context, const ::tensorflow::RunCallableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::ReleaseCallableResponse>* AsyncReleaseCallableRaw(::grpc::ClientContext* context, const ::tensorflow::ReleaseCallableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::ReleaseCallableResponse>* PrepareAsyncReleaseCallableRaw(::grpc::ClientContext* context, const ::tensorflow::ReleaseCallableRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateSession_;
    const ::grpc::internal::RpcMethod rpcmethod_ExtendSession_;
    const ::grpc::internal::RpcMethod rpcmethod_PartialRunSetup_;
    const ::grpc::internal::RpcMethod rpcmethod_RunStep_;
    const ::grpc::internal::RpcMethod rpcmethod_CloseSession_;
    const ::grpc::internal::RpcMethod rpcmethod_ListDevices_;
    const ::grpc::internal::RpcMethod rpcmethod_Reset_;
    const ::grpc::internal::RpcMethod rpcmethod_MakeCallable_;
    const ::grpc::internal::RpcMethod rpcmethod_RunCallable_;
    const ::grpc::internal::RpcMethod rpcmethod_ReleaseCallable_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Creates a session.
    virtual ::grpc::Status CreateSession(::grpc::ServerContext* context, const ::tensorflow::CreateSessionRequest* request, ::tensorflow::CreateSessionResponse* response);
    // Extends a session.
    virtual ::grpc::Status ExtendSession(::grpc::ServerContext* context, const ::tensorflow::ExtendSessionRequest* request, ::tensorflow::ExtendSessionResponse* response);
    // Prepares future partial run calls.
    virtual ::grpc::Status PartialRunSetup(::grpc::ServerContext* context, const ::tensorflow::PartialRunSetupRequest* request, ::tensorflow::PartialRunSetupResponse* response);
    // Drives the graph computation.
    virtual ::grpc::Status RunStep(::grpc::ServerContext* context, const ::tensorflow::RunStepRequest* request, ::tensorflow::RunStepResponse* response);
    // Closes a session.
    virtual ::grpc::Status CloseSession(::grpc::ServerContext* context, const ::tensorflow::CloseSessionRequest* request, ::tensorflow::CloseSessionResponse* response);
    // List the devices usable by the master.
    virtual ::grpc::Status ListDevices(::grpc::ServerContext* context, const ::tensorflow::ListDevicesRequest* request, ::tensorflow::ListDevicesResponse* response);
    // Close and abandon all existing sessions.  Ongoing computations
    // will no longer affect fresh ones via the resources in containers listed in
    // the ResetRequest.  See ResetRequest for more details.
    virtual ::grpc::Status Reset(::grpc::ServerContext* context, const ::tensorflow::ResetRequest* request, ::tensorflow::ResetResponse* response);
    // Registers a callable for execution with RunCallable.
    virtual ::grpc::Status MakeCallable(::grpc::ServerContext* context, const ::tensorflow::MakeCallableRequest* request, ::tensorflow::MakeCallableResponse* response);
    // Executes a callable registered with MakeCallable.
    virtual ::grpc::Status RunCallable(::grpc::ServerContext* context, const ::tensorflow::RunCallableRequest* request, ::tensorflow::RunCallableResponse* response);
    // Frees resources associated with a callable registered with MakeCallable.
    virtual ::grpc::Status ReleaseCallable(::grpc::ServerContext* context, const ::tensorflow::ReleaseCallableRequest* request, ::tensorflow::ReleaseCallableResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateSession() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSession(::grpc::ServerContext* /*context*/, const ::tensorflow::CreateSessionRequest* /*request*/, ::tensorflow::CreateSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateSession(::grpc::ServerContext* context, ::tensorflow::CreateSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::tensorflow::CreateSessionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExtendSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExtendSession() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ExtendSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExtendSession(::grpc::ServerContext* /*context*/, const ::tensorflow::ExtendSessionRequest* /*request*/, ::tensorflow::ExtendSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExtendSession(::grpc::ServerContext* context, ::tensorflow::ExtendSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::tensorflow::ExtendSessionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PartialRunSetup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PartialRunSetup() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_PartialRunSetup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PartialRunSetup(::grpc::ServerContext* /*context*/, const ::tensorflow::PartialRunSetupRequest* /*request*/, ::tensorflow::PartialRunSetupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPartialRunSetup(::grpc::ServerContext* context, ::tensorflow::PartialRunSetupRequest* request, ::grpc::ServerAsyncResponseWriter< ::tensorflow::PartialRunSetupResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RunStep : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RunStep() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_RunStep() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunStep(::grpc::ServerContext* /*context*/, const ::tensorflow::RunStepRequest* /*request*/, ::tensorflow::RunStepResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRunStep(::grpc::ServerContext* context, ::tensorflow::RunStepRequest* request, ::grpc::ServerAsyncResponseWriter< ::tensorflow::RunStepResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CloseSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CloseSession() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_CloseSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseSession(::grpc::ServerContext* /*context*/, const ::tensorflow::CloseSessionRequest* /*request*/, ::tensorflow::CloseSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseSession(::grpc::ServerContext* context, ::tensorflow::CloseSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::tensorflow::CloseSessionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListDevices() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ListDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDevices(::grpc::ServerContext* /*context*/, const ::tensorflow::ListDevicesRequest* /*request*/, ::tensorflow::ListDevicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListDevices(::grpc::ServerContext* context, ::tensorflow::ListDevicesRequest* request, ::grpc::ServerAsyncResponseWriter< ::tensorflow::ListDevicesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Reset() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::tensorflow::ResetRequest* /*request*/, ::tensorflow::ResetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReset(::grpc::ServerContext* context, ::tensorflow::ResetRequest* request, ::grpc::ServerAsyncResponseWriter< ::tensorflow::ResetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MakeCallable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MakeCallable() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_MakeCallable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MakeCallable(::grpc::ServerContext* /*context*/, const ::tensorflow::MakeCallableRequest* /*request*/, ::tensorflow::MakeCallableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMakeCallable(::grpc::ServerContext* context, ::tensorflow::MakeCallableRequest* request, ::grpc::ServerAsyncResponseWriter< ::tensorflow::MakeCallableResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RunCallable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RunCallable() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_RunCallable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunCallable(::grpc::ServerContext* /*context*/, const ::tensorflow::RunCallableRequest* /*request*/, ::tensorflow::RunCallableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRunCallable(::grpc::ServerContext* context, ::tensorflow::RunCallableRequest* request, ::grpc::ServerAsyncResponseWriter< ::tensorflow::RunCallableResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReleaseCallable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReleaseCallable() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_ReleaseCallable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReleaseCallable(::grpc::ServerContext* /*context*/, const ::tensorflow::ReleaseCallableRequest* /*request*/, ::tensorflow::ReleaseCallableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReleaseCallable(::grpc::ServerContext* context, ::tensorflow::ReleaseCallableRequest* request, ::grpc::ServerAsyncResponseWriter< ::tensorflow::ReleaseCallableResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateSession<WithAsyncMethod_ExtendSession<WithAsyncMethod_PartialRunSetup<WithAsyncMethod_RunStep<WithAsyncMethod_CloseSession<WithAsyncMethod_ListDevices<WithAsyncMethod_Reset<WithAsyncMethod_MakeCallable<WithAsyncMethod_RunCallable<WithAsyncMethod_ReleaseCallable<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::CreateSessionRequest, ::tensorflow::CreateSessionResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tensorflow::CreateSessionRequest* request, ::tensorflow::CreateSessionResponse* response) { return this->CreateSession(context, request, response); }));}
    void SetMessageAllocatorFor_CreateSession(
        ::grpc::experimental::MessageAllocator< ::tensorflow::CreateSessionRequest, ::tensorflow::CreateSessionResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::CreateSessionRequest, ::tensorflow::CreateSessionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSession(::grpc::ServerContext* /*context*/, const ::tensorflow::CreateSessionRequest* /*request*/, ::tensorflow::CreateSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateSession(
      ::grpc::CallbackServerContext* /*context*/, const ::tensorflow::CreateSessionRequest* /*request*/, ::tensorflow::CreateSessionResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tensorflow::CreateSessionRequest* /*request*/, ::tensorflow::CreateSessionResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ExtendSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ExtendSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::ExtendSessionRequest, ::tensorflow::ExtendSessionResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tensorflow::ExtendSessionRequest* request, ::tensorflow::ExtendSessionResponse* response) { return this->ExtendSession(context, request, response); }));}
    void SetMessageAllocatorFor_ExtendSession(
        ::grpc::experimental::MessageAllocator< ::tensorflow::ExtendSessionRequest, ::tensorflow::ExtendSessionResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::ExtendSessionRequest, ::tensorflow::ExtendSessionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ExtendSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExtendSession(::grpc::ServerContext* /*context*/, const ::tensorflow::ExtendSessionRequest* /*request*/, ::tensorflow::ExtendSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ExtendSession(
      ::grpc::CallbackServerContext* /*context*/, const ::tensorflow::ExtendSessionRequest* /*request*/, ::tensorflow::ExtendSessionResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ExtendSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tensorflow::ExtendSessionRequest* /*request*/, ::tensorflow::ExtendSessionResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PartialRunSetup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PartialRunSetup() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::PartialRunSetupRequest, ::tensorflow::PartialRunSetupResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tensorflow::PartialRunSetupRequest* request, ::tensorflow::PartialRunSetupResponse* response) { return this->PartialRunSetup(context, request, response); }));}
    void SetMessageAllocatorFor_PartialRunSetup(
        ::grpc::experimental::MessageAllocator< ::tensorflow::PartialRunSetupRequest, ::tensorflow::PartialRunSetupResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::PartialRunSetupRequest, ::tensorflow::PartialRunSetupResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PartialRunSetup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PartialRunSetup(::grpc::ServerContext* /*context*/, const ::tensorflow::PartialRunSetupRequest* /*request*/, ::tensorflow::PartialRunSetupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PartialRunSetup(
      ::grpc::CallbackServerContext* /*context*/, const ::tensorflow::PartialRunSetupRequest* /*request*/, ::tensorflow::PartialRunSetupResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PartialRunSetup(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tensorflow::PartialRunSetupRequest* /*request*/, ::tensorflow::PartialRunSetupResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RunStep : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RunStep() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::RunStepRequest, ::tensorflow::RunStepResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tensorflow::RunStepRequest* request, ::tensorflow::RunStepResponse* response) { return this->RunStep(context, request, response); }));}
    void SetMessageAllocatorFor_RunStep(
        ::grpc::experimental::MessageAllocator< ::tensorflow::RunStepRequest, ::tensorflow::RunStepResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::RunStepRequest, ::tensorflow::RunStepResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RunStep() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunStep(::grpc::ServerContext* /*context*/, const ::tensorflow::RunStepRequest* /*request*/, ::tensorflow::RunStepResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RunStep(
      ::grpc::CallbackServerContext* /*context*/, const ::tensorflow::RunStepRequest* /*request*/, ::tensorflow::RunStepResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RunStep(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tensorflow::RunStepRequest* /*request*/, ::tensorflow::RunStepResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CloseSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CloseSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::CloseSessionRequest, ::tensorflow::CloseSessionResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tensorflow::CloseSessionRequest* request, ::tensorflow::CloseSessionResponse* response) { return this->CloseSession(context, request, response); }));}
    void SetMessageAllocatorFor_CloseSession(
        ::grpc::experimental::MessageAllocator< ::tensorflow::CloseSessionRequest, ::tensorflow::CloseSessionResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::CloseSessionRequest, ::tensorflow::CloseSessionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CloseSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseSession(::grpc::ServerContext* /*context*/, const ::tensorflow::CloseSessionRequest* /*request*/, ::tensorflow::CloseSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CloseSession(
      ::grpc::CallbackServerContext* /*context*/, const ::tensorflow::CloseSessionRequest* /*request*/, ::tensorflow::CloseSessionResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CloseSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tensorflow::CloseSessionRequest* /*request*/, ::tensorflow::CloseSessionResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListDevices() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::ListDevicesRequest, ::tensorflow::ListDevicesResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tensorflow::ListDevicesRequest* request, ::tensorflow::ListDevicesResponse* response) { return this->ListDevices(context, request, response); }));}
    void SetMessageAllocatorFor_ListDevices(
        ::grpc::experimental::MessageAllocator< ::tensorflow::ListDevicesRequest, ::tensorflow::ListDevicesResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::ListDevicesRequest, ::tensorflow::ListDevicesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDevices(::grpc::ServerContext* /*context*/, const ::tensorflow::ListDevicesRequest* /*request*/, ::tensorflow::ListDevicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListDevices(
      ::grpc::CallbackServerContext* /*context*/, const ::tensorflow::ListDevicesRequest* /*request*/, ::tensorflow::ListDevicesResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListDevices(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tensorflow::ListDevicesRequest* /*request*/, ::tensorflow::ListDevicesResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Reset() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::ResetRequest, ::tensorflow::ResetResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tensorflow::ResetRequest* request, ::tensorflow::ResetResponse* response) { return this->Reset(context, request, response); }));}
    void SetMessageAllocatorFor_Reset(
        ::grpc::experimental::MessageAllocator< ::tensorflow::ResetRequest, ::tensorflow::ResetResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::ResetRequest, ::tensorflow::ResetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::tensorflow::ResetRequest* /*request*/, ::tensorflow::ResetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Reset(
      ::grpc::CallbackServerContext* /*context*/, const ::tensorflow::ResetRequest* /*request*/, ::tensorflow::ResetResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Reset(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tensorflow::ResetRequest* /*request*/, ::tensorflow::ResetResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_MakeCallable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_MakeCallable() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::MakeCallableRequest, ::tensorflow::MakeCallableResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tensorflow::MakeCallableRequest* request, ::tensorflow::MakeCallableResponse* response) { return this->MakeCallable(context, request, response); }));}
    void SetMessageAllocatorFor_MakeCallable(
        ::grpc::experimental::MessageAllocator< ::tensorflow::MakeCallableRequest, ::tensorflow::MakeCallableResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::MakeCallableRequest, ::tensorflow::MakeCallableResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_MakeCallable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MakeCallable(::grpc::ServerContext* /*context*/, const ::tensorflow::MakeCallableRequest* /*request*/, ::tensorflow::MakeCallableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* MakeCallable(
      ::grpc::CallbackServerContext* /*context*/, const ::tensorflow::MakeCallableRequest* /*request*/, ::tensorflow::MakeCallableResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* MakeCallable(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tensorflow::MakeCallableRequest* /*request*/, ::tensorflow::MakeCallableResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RunCallable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RunCallable() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::RunCallableRequest, ::tensorflow::RunCallableResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tensorflow::RunCallableRequest* request, ::tensorflow::RunCallableResponse* response) { return this->RunCallable(context, request, response); }));}
    void SetMessageAllocatorFor_RunCallable(
        ::grpc::experimental::MessageAllocator< ::tensorflow::RunCallableRequest, ::tensorflow::RunCallableResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::RunCallableRequest, ::tensorflow::RunCallableResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RunCallable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunCallable(::grpc::ServerContext* /*context*/, const ::tensorflow::RunCallableRequest* /*request*/, ::tensorflow::RunCallableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RunCallable(
      ::grpc::CallbackServerContext* /*context*/, const ::tensorflow::RunCallableRequest* /*request*/, ::tensorflow::RunCallableResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RunCallable(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tensorflow::RunCallableRequest* /*request*/, ::tensorflow::RunCallableResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReleaseCallable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ReleaseCallable() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::ReleaseCallableRequest, ::tensorflow::ReleaseCallableResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tensorflow::ReleaseCallableRequest* request, ::tensorflow::ReleaseCallableResponse* response) { return this->ReleaseCallable(context, request, response); }));}
    void SetMessageAllocatorFor_ReleaseCallable(
        ::grpc::experimental::MessageAllocator< ::tensorflow::ReleaseCallableRequest, ::tensorflow::ReleaseCallableResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(9);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tensorflow::ReleaseCallableRequest, ::tensorflow::ReleaseCallableResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ReleaseCallable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReleaseCallable(::grpc::ServerContext* /*context*/, const ::tensorflow::ReleaseCallableRequest* /*request*/, ::tensorflow::ReleaseCallableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReleaseCallable(
      ::grpc::CallbackServerContext* /*context*/, const ::tensorflow::ReleaseCallableRequest* /*request*/, ::tensorflow::ReleaseCallableResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReleaseCallable(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tensorflow::ReleaseCallableRequest* /*request*/, ::tensorflow::ReleaseCallableResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_CreateSession<ExperimentalWithCallbackMethod_ExtendSession<ExperimentalWithCallbackMethod_PartialRunSetup<ExperimentalWithCallbackMethod_RunStep<ExperimentalWithCallbackMethod_CloseSession<ExperimentalWithCallbackMethod_ListDevices<ExperimentalWithCallbackMethod_Reset<ExperimentalWithCallbackMethod_MakeCallable<ExperimentalWithCallbackMethod_RunCallable<ExperimentalWithCallbackMethod_ReleaseCallable<Service > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_CreateSession<ExperimentalWithCallbackMethod_ExtendSession<ExperimentalWithCallbackMethod_PartialRunSetup<ExperimentalWithCallbackMethod_RunStep<ExperimentalWithCallbackMethod_CloseSession<ExperimentalWithCallbackMethod_ListDevices<ExperimentalWithCallbackMethod_Reset<ExperimentalWithCallbackMethod_MakeCallable<ExperimentalWithCallbackMethod_RunCallable<ExperimentalWithCallbackMethod_ReleaseCallable<Service > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateSession() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSession(::grpc::ServerContext* /*context*/, const ::tensorflow::CreateSessionRequest* /*request*/, ::tensorflow::CreateSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExtendSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExtendSession() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ExtendSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExtendSession(::grpc::ServerContext* /*context*/, const ::tensorflow::ExtendSessionRequest* /*request*/, ::tensorflow::ExtendSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PartialRunSetup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PartialRunSetup() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_PartialRunSetup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PartialRunSetup(::grpc::ServerContext* /*context*/, const ::tensorflow::PartialRunSetupRequest* /*request*/, ::tensorflow::PartialRunSetupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RunStep : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RunStep() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_RunStep() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunStep(::grpc::ServerContext* /*context*/, const ::tensorflow::RunStepRequest* /*request*/, ::tensorflow::RunStepResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CloseSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CloseSession() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_CloseSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseSession(::grpc::ServerContext* /*context*/, const ::tensorflow::CloseSessionRequest* /*request*/, ::tensorflow::CloseSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListDevices() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ListDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDevices(::grpc::ServerContext* /*context*/, const ::tensorflow::ListDevicesRequest* /*request*/, ::tensorflow::ListDevicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Reset() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::tensorflow::ResetRequest* /*request*/, ::tensorflow::ResetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MakeCallable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MakeCallable() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_MakeCallable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MakeCallable(::grpc::ServerContext* /*context*/, const ::tensorflow::MakeCallableRequest* /*request*/, ::tensorflow::MakeCallableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RunCallable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RunCallable() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_RunCallable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunCallable(::grpc::ServerContext* /*context*/, const ::tensorflow::RunCallableRequest* /*request*/, ::tensorflow::RunCallableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReleaseCallable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReleaseCallable() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_ReleaseCallable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReleaseCallable(::grpc::ServerContext* /*context*/, const ::tensorflow::ReleaseCallableRequest* /*request*/, ::tensorflow::ReleaseCallableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateSession() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSession(::grpc::ServerContext* /*context*/, const ::tensorflow::CreateSessionRequest* /*request*/, ::tensorflow::CreateSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExtendSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExtendSession() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ExtendSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExtendSession(::grpc::ServerContext* /*context*/, const ::tensorflow::ExtendSessionRequest* /*request*/, ::tensorflow::ExtendSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExtendSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PartialRunSetup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PartialRunSetup() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_PartialRunSetup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PartialRunSetup(::grpc::ServerContext* /*context*/, const ::tensorflow::PartialRunSetupRequest* /*request*/, ::tensorflow::PartialRunSetupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPartialRunSetup(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RunStep : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RunStep() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_RunStep() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunStep(::grpc::ServerContext* /*context*/, const ::tensorflow::RunStepRequest* /*request*/, ::tensorflow::RunStepResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRunStep(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CloseSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CloseSession() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_CloseSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseSession(::grpc::ServerContext* /*context*/, const ::tensorflow::CloseSessionRequest* /*request*/, ::tensorflow::CloseSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListDevices() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ListDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDevices(::grpc::ServerContext* /*context*/, const ::tensorflow::ListDevicesRequest* /*request*/, ::tensorflow::ListDevicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListDevices(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Reset() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::tensorflow::ResetRequest* /*request*/, ::tensorflow::ResetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MakeCallable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MakeCallable() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_MakeCallable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MakeCallable(::grpc::ServerContext* /*context*/, const ::tensorflow::MakeCallableRequest* /*request*/, ::tensorflow::MakeCallableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMakeCallable(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RunCallable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RunCallable() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_RunCallable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunCallable(::grpc::ServerContext* /*context*/, const ::tensorflow::RunCallableRequest* /*request*/, ::tensorflow::RunCallableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRunCallable(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReleaseCallable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReleaseCallable() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_ReleaseCallable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReleaseCallable(::grpc::ServerContext* /*context*/, const ::tensorflow::ReleaseCallableRequest* /*request*/, ::tensorflow::ReleaseCallableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReleaseCallable(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateSession(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSession(::grpc::ServerContext* /*context*/, const ::tensorflow::CreateSessionRequest* /*request*/, ::tensorflow::CreateSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ExtendSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ExtendSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExtendSession(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ExtendSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExtendSession(::grpc::ServerContext* /*context*/, const ::tensorflow::ExtendSessionRequest* /*request*/, ::tensorflow::ExtendSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ExtendSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ExtendSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PartialRunSetup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PartialRunSetup() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PartialRunSetup(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_PartialRunSetup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PartialRunSetup(::grpc::ServerContext* /*context*/, const ::tensorflow::PartialRunSetupRequest* /*request*/, ::tensorflow::PartialRunSetupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PartialRunSetup(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PartialRunSetup(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RunStep : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RunStep() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RunStep(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RunStep() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunStep(::grpc::ServerContext* /*context*/, const ::tensorflow::RunStepRequest* /*request*/, ::tensorflow::RunStepResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RunStep(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RunStep(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CloseSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CloseSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CloseSession(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CloseSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseSession(::grpc::ServerContext* /*context*/, const ::tensorflow::CloseSessionRequest* /*request*/, ::tensorflow::CloseSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CloseSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CloseSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListDevices() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListDevices(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDevices(::grpc::ServerContext* /*context*/, const ::tensorflow::ListDevicesRequest* /*request*/, ::tensorflow::ListDevicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListDevices(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListDevices(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Reset() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Reset(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::tensorflow::ResetRequest* /*request*/, ::tensorflow::ResetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Reset(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Reset(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_MakeCallable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_MakeCallable() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MakeCallable(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_MakeCallable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MakeCallable(::grpc::ServerContext* /*context*/, const ::tensorflow::MakeCallableRequest* /*request*/, ::tensorflow::MakeCallableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* MakeCallable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* MakeCallable(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RunCallable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RunCallable() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RunCallable(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RunCallable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunCallable(::grpc::ServerContext* /*context*/, const ::tensorflow::RunCallableRequest* /*request*/, ::tensorflow::RunCallableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RunCallable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RunCallable(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReleaseCallable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ReleaseCallable() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReleaseCallable(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ReleaseCallable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReleaseCallable(::grpc::ServerContext* /*context*/, const ::tensorflow::ReleaseCallableRequest* /*request*/, ::tensorflow::ReleaseCallableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReleaseCallable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReleaseCallable(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateSession() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tensorflow::CreateSessionRequest, ::tensorflow::CreateSessionResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::tensorflow::CreateSessionRequest, ::tensorflow::CreateSessionResponse>* streamer) {
                       return this->StreamedCreateSession(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateSession(::grpc::ServerContext* /*context*/, const ::tensorflow::CreateSessionRequest* /*request*/, ::tensorflow::CreateSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tensorflow::CreateSessionRequest,::tensorflow::CreateSessionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExtendSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExtendSession() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tensorflow::ExtendSessionRequest, ::tensorflow::ExtendSessionResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::tensorflow::ExtendSessionRequest, ::tensorflow::ExtendSessionResponse>* streamer) {
                       return this->StreamedExtendSession(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExtendSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExtendSession(::grpc::ServerContext* /*context*/, const ::tensorflow::ExtendSessionRequest* /*request*/, ::tensorflow::ExtendSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExtendSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tensorflow::ExtendSessionRequest,::tensorflow::ExtendSessionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PartialRunSetup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PartialRunSetup() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tensorflow::PartialRunSetupRequest, ::tensorflow::PartialRunSetupResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::tensorflow::PartialRunSetupRequest, ::tensorflow::PartialRunSetupResponse>* streamer) {
                       return this->StreamedPartialRunSetup(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PartialRunSetup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PartialRunSetup(::grpc::ServerContext* /*context*/, const ::tensorflow::PartialRunSetupRequest* /*request*/, ::tensorflow::PartialRunSetupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPartialRunSetup(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tensorflow::PartialRunSetupRequest,::tensorflow::PartialRunSetupResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RunStep : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RunStep() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tensorflow::RunStepRequest, ::tensorflow::RunStepResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::tensorflow::RunStepRequest, ::tensorflow::RunStepResponse>* streamer) {
                       return this->StreamedRunStep(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RunStep() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RunStep(::grpc::ServerContext* /*context*/, const ::tensorflow::RunStepRequest* /*request*/, ::tensorflow::RunStepResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRunStep(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tensorflow::RunStepRequest,::tensorflow::RunStepResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CloseSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CloseSession() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tensorflow::CloseSessionRequest, ::tensorflow::CloseSessionResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::tensorflow::CloseSessionRequest, ::tensorflow::CloseSessionResponse>* streamer) {
                       return this->StreamedCloseSession(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CloseSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CloseSession(::grpc::ServerContext* /*context*/, const ::tensorflow::CloseSessionRequest* /*request*/, ::tensorflow::CloseSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCloseSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tensorflow::CloseSessionRequest,::tensorflow::CloseSessionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListDevices() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tensorflow::ListDevicesRequest, ::tensorflow::ListDevicesResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::tensorflow::ListDevicesRequest, ::tensorflow::ListDevicesResponse>* streamer) {
                       return this->StreamedListDevices(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListDevices(::grpc::ServerContext* /*context*/, const ::tensorflow::ListDevicesRequest* /*request*/, ::tensorflow::ListDevicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListDevices(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tensorflow::ListDevicesRequest,::tensorflow::ListDevicesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Reset() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tensorflow::ResetRequest, ::tensorflow::ResetResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::tensorflow::ResetRequest, ::tensorflow::ResetResponse>* streamer) {
                       return this->StreamedReset(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::tensorflow::ResetRequest* /*request*/, ::tensorflow::ResetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tensorflow::ResetRequest,::tensorflow::ResetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MakeCallable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MakeCallable() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tensorflow::MakeCallableRequest, ::tensorflow::MakeCallableResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::tensorflow::MakeCallableRequest, ::tensorflow::MakeCallableResponse>* streamer) {
                       return this->StreamedMakeCallable(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MakeCallable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MakeCallable(::grpc::ServerContext* /*context*/, const ::tensorflow::MakeCallableRequest* /*request*/, ::tensorflow::MakeCallableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMakeCallable(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tensorflow::MakeCallableRequest,::tensorflow::MakeCallableResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RunCallable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RunCallable() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tensorflow::RunCallableRequest, ::tensorflow::RunCallableResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::tensorflow::RunCallableRequest, ::tensorflow::RunCallableResponse>* streamer) {
                       return this->StreamedRunCallable(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RunCallable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RunCallable(::grpc::ServerContext* /*context*/, const ::tensorflow::RunCallableRequest* /*request*/, ::tensorflow::RunCallableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRunCallable(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tensorflow::RunCallableRequest,::tensorflow::RunCallableResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReleaseCallable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReleaseCallable() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tensorflow::ReleaseCallableRequest, ::tensorflow::ReleaseCallableResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::tensorflow::ReleaseCallableRequest, ::tensorflow::ReleaseCallableResponse>* streamer) {
                       return this->StreamedReleaseCallable(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReleaseCallable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReleaseCallable(::grpc::ServerContext* /*context*/, const ::tensorflow::ReleaseCallableRequest* /*request*/, ::tensorflow::ReleaseCallableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReleaseCallable(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tensorflow::ReleaseCallableRequest,::tensorflow::ReleaseCallableResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateSession<WithStreamedUnaryMethod_ExtendSession<WithStreamedUnaryMethod_PartialRunSetup<WithStreamedUnaryMethod_RunStep<WithStreamedUnaryMethod_CloseSession<WithStreamedUnaryMethod_ListDevices<WithStreamedUnaryMethod_Reset<WithStreamedUnaryMethod_MakeCallable<WithStreamedUnaryMethod_RunCallable<WithStreamedUnaryMethod_ReleaseCallable<Service > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateSession<WithStreamedUnaryMethod_ExtendSession<WithStreamedUnaryMethod_PartialRunSetup<WithStreamedUnaryMethod_RunStep<WithStreamedUnaryMethod_CloseSession<WithStreamedUnaryMethod_ListDevices<WithStreamedUnaryMethod_Reset<WithStreamedUnaryMethod_MakeCallable<WithStreamedUnaryMethod_RunCallable<WithStreamedUnaryMethod_ReleaseCallable<Service > > > > > > > > > > StreamedService;
};

}  // namespace grpc
}  // namespace tensorflow


#endif  // GRPC_tensorflow_2fcore_2fprotobuf_2fmaster_5fservice_2eproto__INCLUDED
